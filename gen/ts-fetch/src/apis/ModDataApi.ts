/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  CoreContentbankRenameContent200Response,
  ErrorResponse,
  ModChatGetChatsByCoursesRequest,
  ModDataAddEntry200Response,
  ModDataAddEntryRequest,
  ModDataApproveEntryRequest,
  ModDataDeleteEntry200Response,
  ModDataDeleteEntryRequest,
  ModDataDeleteSavedPresetRequest,
  ModDataGetDataAccessInformation200Response,
  ModDataGetDataAccessInformationRequest,
  ModDataGetDatabasesByCourses200Response,
  ModDataGetEntries200Response,
  ModDataGetEntriesRequest,
  ModDataGetEntry200Response,
  ModDataGetEntryRequest,
  ModDataGetFields200Response,
  ModDataGetFieldsRequest,
  ModDataGetMappingInformation200Response,
  ModDataGetMappingInformationRequest,
  ModDataSearchEntries200Response,
  ModDataSearchEntriesRequest,
  ModDataUpdateEntry200Response,
  ModDataUpdateEntryRequest,
  ModDataViewDatabaseRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    CoreContentbankRenameContent200ResponseFromJSON,
    CoreContentbankRenameContent200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModChatGetChatsByCoursesRequestFromJSON,
    ModChatGetChatsByCoursesRequestToJSON,
    ModDataAddEntry200ResponseFromJSON,
    ModDataAddEntry200ResponseToJSON,
    ModDataAddEntryRequestFromJSON,
    ModDataAddEntryRequestToJSON,
    ModDataApproveEntryRequestFromJSON,
    ModDataApproveEntryRequestToJSON,
    ModDataDeleteEntry200ResponseFromJSON,
    ModDataDeleteEntry200ResponseToJSON,
    ModDataDeleteEntryRequestFromJSON,
    ModDataDeleteEntryRequestToJSON,
    ModDataDeleteSavedPresetRequestFromJSON,
    ModDataDeleteSavedPresetRequestToJSON,
    ModDataGetDataAccessInformation200ResponseFromJSON,
    ModDataGetDataAccessInformation200ResponseToJSON,
    ModDataGetDataAccessInformationRequestFromJSON,
    ModDataGetDataAccessInformationRequestToJSON,
    ModDataGetDatabasesByCourses200ResponseFromJSON,
    ModDataGetDatabasesByCourses200ResponseToJSON,
    ModDataGetEntries200ResponseFromJSON,
    ModDataGetEntries200ResponseToJSON,
    ModDataGetEntriesRequestFromJSON,
    ModDataGetEntriesRequestToJSON,
    ModDataGetEntry200ResponseFromJSON,
    ModDataGetEntry200ResponseToJSON,
    ModDataGetEntryRequestFromJSON,
    ModDataGetEntryRequestToJSON,
    ModDataGetFields200ResponseFromJSON,
    ModDataGetFields200ResponseToJSON,
    ModDataGetFieldsRequestFromJSON,
    ModDataGetFieldsRequestToJSON,
    ModDataGetMappingInformation200ResponseFromJSON,
    ModDataGetMappingInformation200ResponseToJSON,
    ModDataGetMappingInformationRequestFromJSON,
    ModDataGetMappingInformationRequestToJSON,
    ModDataSearchEntries200ResponseFromJSON,
    ModDataSearchEntries200ResponseToJSON,
    ModDataSearchEntriesRequestFromJSON,
    ModDataSearchEntriesRequestToJSON,
    ModDataUpdateEntry200ResponseFromJSON,
    ModDataUpdateEntry200ResponseToJSON,
    ModDataUpdateEntryRequestFromJSON,
    ModDataUpdateEntryRequestToJSON,
    ModDataViewDatabaseRequestFromJSON,
    ModDataViewDatabaseRequestToJSON,
} from '../models/index';

export interface ModDataAddEntryOperationRequest {
    modDataAddEntryRequest: ModDataAddEntryRequest;
}

export interface ModDataApproveEntryOperationRequest {
    modDataApproveEntryRequest: ModDataApproveEntryRequest;
}

export interface ModDataDeleteEntryOperationRequest {
    modDataDeleteEntryRequest: ModDataDeleteEntryRequest;
}

export interface ModDataDeleteSavedPresetOperationRequest {
    modDataDeleteSavedPresetRequest: ModDataDeleteSavedPresetRequest;
}

export interface ModDataGetDataAccessInformationOperationRequest {
    modDataGetDataAccessInformationRequest: ModDataGetDataAccessInformationRequest;
}

export interface ModDataGetDatabasesByCoursesRequest {
    modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest;
}

export interface ModDataGetEntriesOperationRequest {
    modDataGetEntriesRequest: ModDataGetEntriesRequest;
}

export interface ModDataGetEntryOperationRequest {
    modDataGetEntryRequest: ModDataGetEntryRequest;
}

export interface ModDataGetFieldsOperationRequest {
    modDataGetFieldsRequest: ModDataGetFieldsRequest;
}

export interface ModDataGetMappingInformationOperationRequest {
    modDataGetMappingInformationRequest: ModDataGetMappingInformationRequest;
}

export interface ModDataSearchEntriesOperationRequest {
    modDataSearchEntriesRequest: ModDataSearchEntriesRequest;
}

export interface ModDataUpdateEntryOperationRequest {
    modDataUpdateEntryRequest: ModDataUpdateEntryRequest;
}

export interface ModDataViewDatabaseOperationRequest {
    modDataViewDatabaseRequest: ModDataViewDatabaseRequest;
}

/**
 * 
 */
export class ModDataApi extends runtime.BaseAPI {

    /**
     * Adds a new entry.
     * Adds a new entry.
     */
    async modDataAddEntryRaw(requestParameters: ModDataAddEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModDataAddEntry200Response>> {
        if (requestParameters['modDataAddEntryRequest'] == null) {
            throw new runtime.RequiredError(
                'modDataAddEntryRequest',
                'Required parameter "modDataAddEntryRequest" was null or undefined when calling modDataAddEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_data_add_entry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModDataAddEntryRequestToJSON(requestParameters['modDataAddEntryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModDataAddEntry200ResponseFromJSON(jsonValue));
    }

    /**
     * Adds a new entry.
     * Adds a new entry.
     */
    async modDataAddEntry(requestParameters: ModDataAddEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModDataAddEntry200Response> {
        const response = await this.modDataAddEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Approves or unapproves an entry.
     * Approves or unapproves an entry.
     */
    async modDataApproveEntryRaw(requestParameters: ModDataApproveEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modDataApproveEntryRequest'] == null) {
            throw new runtime.RequiredError(
                'modDataApproveEntryRequest',
                'Required parameter "modDataApproveEntryRequest" was null or undefined when calling modDataApproveEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_data_approve_entry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModDataApproveEntryRequestToJSON(requestParameters['modDataApproveEntryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Approves or unapproves an entry.
     * Approves or unapproves an entry.
     */
    async modDataApproveEntry(requestParameters: ModDataApproveEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modDataApproveEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an entry.
     * Deletes an entry.
     */
    async modDataDeleteEntryRaw(requestParameters: ModDataDeleteEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModDataDeleteEntry200Response>> {
        if (requestParameters['modDataDeleteEntryRequest'] == null) {
            throw new runtime.RequiredError(
                'modDataDeleteEntryRequest',
                'Required parameter "modDataDeleteEntryRequest" was null or undefined when calling modDataDeleteEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_data_delete_entry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModDataDeleteEntryRequestToJSON(requestParameters['modDataDeleteEntryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModDataDeleteEntry200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an entry.
     * Deletes an entry.
     */
    async modDataDeleteEntry(requestParameters: ModDataDeleteEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModDataDeleteEntry200Response> {
        const response = await this.modDataDeleteEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete site user preset.
     * Delete site user preset.
     */
    async modDataDeleteSavedPresetRaw(requestParameters: ModDataDeleteSavedPresetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankRenameContent200Response>> {
        if (requestParameters['modDataDeleteSavedPresetRequest'] == null) {
            throw new runtime.RequiredError(
                'modDataDeleteSavedPresetRequest',
                'Required parameter "modDataDeleteSavedPresetRequest" was null or undefined when calling modDataDeleteSavedPreset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_data_delete_saved_preset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModDataDeleteSavedPresetRequestToJSON(requestParameters['modDataDeleteSavedPresetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankRenameContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete site user preset.
     * Delete site user preset.
     */
    async modDataDeleteSavedPreset(requestParameters: ModDataDeleteSavedPresetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankRenameContent200Response> {
        const response = await this.modDataDeleteSavedPresetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return access information for a given database.
     * Return access information for a given database.
     */
    async modDataGetDataAccessInformationRaw(requestParameters: ModDataGetDataAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModDataGetDataAccessInformation200Response>> {
        if (requestParameters['modDataGetDataAccessInformationRequest'] == null) {
            throw new runtime.RequiredError(
                'modDataGetDataAccessInformationRequest',
                'Required parameter "modDataGetDataAccessInformationRequest" was null or undefined when calling modDataGetDataAccessInformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_data_get_data_access_information`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModDataGetDataAccessInformationRequestToJSON(requestParameters['modDataGetDataAccessInformationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModDataGetDataAccessInformation200ResponseFromJSON(jsonValue));
    }

    /**
     * Return access information for a given database.
     * Return access information for a given database.
     */
    async modDataGetDataAccessInformation(requestParameters: ModDataGetDataAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModDataGetDataAccessInformation200Response> {
        const response = await this.modDataGetDataAccessInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
     * Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
     */
    async modDataGetDatabasesByCoursesRaw(requestParameters: ModDataGetDatabasesByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModDataGetDatabasesByCourses200Response>> {
        if (requestParameters['modChatGetChatsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatGetChatsByCoursesRequest',
                'Required parameter "modChatGetChatsByCoursesRequest" was null or undefined when calling modDataGetDatabasesByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_data_get_databases_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatGetChatsByCoursesRequestToJSON(requestParameters['modChatGetChatsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModDataGetDatabasesByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
     * Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
     */
    async modDataGetDatabasesByCourses(requestParameters: ModDataGetDatabasesByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModDataGetDatabasesByCourses200Response> {
        const response = await this.modDataGetDatabasesByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the complete list of entries of the given database.
     * Return the complete list of entries of the given database.
     */
    async modDataGetEntriesRaw(requestParameters: ModDataGetEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModDataGetEntries200Response>> {
        if (requestParameters['modDataGetEntriesRequest'] == null) {
            throw new runtime.RequiredError(
                'modDataGetEntriesRequest',
                'Required parameter "modDataGetEntriesRequest" was null or undefined when calling modDataGetEntries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_data_get_entries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModDataGetEntriesRequestToJSON(requestParameters['modDataGetEntriesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModDataGetEntries200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the complete list of entries of the given database.
     * Return the complete list of entries of the given database.
     */
    async modDataGetEntries(requestParameters: ModDataGetEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModDataGetEntries200Response> {
        const response = await this.modDataGetEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return one entry record from the database, including contents optionally.
     * Return one entry record from the database, including contents optionally.
     */
    async modDataGetEntryRaw(requestParameters: ModDataGetEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModDataGetEntry200Response>> {
        if (requestParameters['modDataGetEntryRequest'] == null) {
            throw new runtime.RequiredError(
                'modDataGetEntryRequest',
                'Required parameter "modDataGetEntryRequest" was null or undefined when calling modDataGetEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_data_get_entry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModDataGetEntryRequestToJSON(requestParameters['modDataGetEntryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModDataGetEntry200ResponseFromJSON(jsonValue));
    }

    /**
     * Return one entry record from the database, including contents optionally.
     * Return one entry record from the database, including contents optionally.
     */
    async modDataGetEntry(requestParameters: ModDataGetEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModDataGetEntry200Response> {
        const response = await this.modDataGetEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the list of configured fields for the given database.
     * Return the list of configured fields for the given database.
     */
    async modDataGetFieldsRaw(requestParameters: ModDataGetFieldsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModDataGetFields200Response>> {
        if (requestParameters['modDataGetFieldsRequest'] == null) {
            throw new runtime.RequiredError(
                'modDataGetFieldsRequest',
                'Required parameter "modDataGetFieldsRequest" was null or undefined when calling modDataGetFields().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_data_get_fields`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModDataGetFieldsRequestToJSON(requestParameters['modDataGetFieldsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModDataGetFields200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the list of configured fields for the given database.
     * Return the list of configured fields for the given database.
     */
    async modDataGetFields(requestParameters: ModDataGetFieldsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModDataGetFields200Response> {
        const response = await this.modDataGetFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get importing information
     * Get importing information
     */
    async modDataGetMappingInformationRaw(requestParameters: ModDataGetMappingInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModDataGetMappingInformation200Response>> {
        if (requestParameters['modDataGetMappingInformationRequest'] == null) {
            throw new runtime.RequiredError(
                'modDataGetMappingInformationRequest',
                'Required parameter "modDataGetMappingInformationRequest" was null or undefined when calling modDataGetMappingInformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_data_get_mapping_information`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModDataGetMappingInformationRequestToJSON(requestParameters['modDataGetMappingInformationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModDataGetMappingInformation200ResponseFromJSON(jsonValue));
    }

    /**
     * Get importing information
     * Get importing information
     */
    async modDataGetMappingInformation(requestParameters: ModDataGetMappingInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModDataGetMappingInformation200Response> {
        const response = await this.modDataGetMappingInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for entries in the given database.
     * Search for entries in the given database.
     */
    async modDataSearchEntriesRaw(requestParameters: ModDataSearchEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModDataSearchEntries200Response>> {
        if (requestParameters['modDataSearchEntriesRequest'] == null) {
            throw new runtime.RequiredError(
                'modDataSearchEntriesRequest',
                'Required parameter "modDataSearchEntriesRequest" was null or undefined when calling modDataSearchEntries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_data_search_entries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModDataSearchEntriesRequestToJSON(requestParameters['modDataSearchEntriesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModDataSearchEntries200ResponseFromJSON(jsonValue));
    }

    /**
     * Search for entries in the given database.
     * Search for entries in the given database.
     */
    async modDataSearchEntries(requestParameters: ModDataSearchEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModDataSearchEntries200Response> {
        const response = await this.modDataSearchEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing entry.
     * Updates an existing entry.
     */
    async modDataUpdateEntryRaw(requestParameters: ModDataUpdateEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModDataUpdateEntry200Response>> {
        if (requestParameters['modDataUpdateEntryRequest'] == null) {
            throw new runtime.RequiredError(
                'modDataUpdateEntryRequest',
                'Required parameter "modDataUpdateEntryRequest" was null or undefined when calling modDataUpdateEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_data_update_entry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModDataUpdateEntryRequestToJSON(requestParameters['modDataUpdateEntryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModDataUpdateEntry200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates an existing entry.
     * Updates an existing entry.
     */
    async modDataUpdateEntry(requestParameters: ModDataUpdateEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModDataUpdateEntry200Response> {
        const response = await this.modDataUpdateEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Simulate the view.php web interface data: trigger events, completion, etc...
     * Simulate the view.php web interface data: trigger events, completion, etc...
     */
    async modDataViewDatabaseRaw(requestParameters: ModDataViewDatabaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modDataViewDatabaseRequest'] == null) {
            throw new runtime.RequiredError(
                'modDataViewDatabaseRequest',
                'Required parameter "modDataViewDatabaseRequest" was null or undefined when calling modDataViewDatabase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_data_view_database`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModDataViewDatabaseRequestToJSON(requestParameters['modDataViewDatabaseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Simulate the view.php web interface data: trigger events, completion, etc...
     * Simulate the view.php web interface data: trigger events, completion, etc...
     */
    async modDataViewDatabase(requestParameters: ModDataViewDatabaseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modDataViewDatabaseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
