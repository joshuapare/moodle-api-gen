/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  ErrorResponse,
  ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest,
  ModPageGetPagesByCourses200Response,
  ModPageViewPageRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestFromJSON,
    ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestToJSON,
    ModPageGetPagesByCourses200ResponseFromJSON,
    ModPageGetPagesByCourses200ResponseToJSON,
    ModPageViewPageRequestFromJSON,
    ModPageViewPageRequestToJSON,
} from '../models/index';

export interface ModPageGetPagesByCoursesRequest {
    modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;
}

export interface ModPageViewPageOperationRequest {
    modPageViewPageRequest: ModPageViewPageRequest;
}

/**
 * 
 */
export class ModPageApi extends runtime.BaseAPI {

    /**
     * Returns a list of pages in a provided list of courses, if no list is provided all pages that the user                             can view will be returned.
     * Returns a list of pages in a provided list of courses, if no list is provided all pages that the user                             can view will be returned.
     */
    async modPageGetPagesByCoursesRaw(requestParameters: ModPageGetPagesByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModPageGetPagesByCourses200Response>> {
        if (requestParameters['modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest',
                'Required parameter "modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest" was null or undefined when calling modPageGetPagesByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_page_get_pages_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestToJSON(requestParameters['modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModPageGetPagesByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of pages in a provided list of courses, if no list is provided all pages that the user                             can view will be returned.
     * Returns a list of pages in a provided list of courses, if no list is provided all pages that the user                             can view will be returned.
     */
    async modPageGetPagesByCourses(requestParameters: ModPageGetPagesByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModPageGetPagesByCourses200Response> {
        const response = await this.modPageGetPagesByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Simulate the view.php web interface page: trigger events, completion, etc...
     * Simulate the view.php web interface page: trigger events, completion, etc...
     */
    async modPageViewPageRaw(requestParameters: ModPageViewPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modPageViewPageRequest'] == null) {
            throw new runtime.RequiredError(
                'modPageViewPageRequest',
                'Required parameter "modPageViewPageRequest" was null or undefined when calling modPageViewPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_page_view_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModPageViewPageRequestToJSON(requestParameters['modPageViewPageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Simulate the view.php web interface page: trigger events, completion, etc...
     * Simulate the view.php web interface page: trigger events, completion, etc...
     */
    async modPageViewPage(requestParameters: ModPageViewPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modPageViewPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
