/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  ErrorResponse,
  ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest,
  ModFeedbackGetAnalysis200Response,
  ModFeedbackGetAnalysisRequest,
  ModFeedbackGetCurrentCompletedTmp200Response,
  ModFeedbackGetCurrentCompletedTmpRequest,
  ModFeedbackGetFeedbackAccessInformation200Response,
  ModFeedbackGetFeedbackAccessInformationRequest,
  ModFeedbackGetFeedbacksByCourses200Response,
  ModFeedbackGetFinishedResponses200Response,
  ModFeedbackGetFinishedResponsesRequest,
  ModFeedbackGetItems200Response,
  ModFeedbackGetLastCompleted200Response,
  ModFeedbackGetNonRespondents200Response,
  ModFeedbackGetNonRespondentsRequest,
  ModFeedbackGetPageItems200Response,
  ModFeedbackGetPageItemsRequest,
  ModFeedbackGetResponsesAnalysis200Response,
  ModFeedbackGetResponsesAnalysisRequest,
  ModFeedbackGetUnfinishedResponses200Response,
  ModFeedbackLaunchFeedback200Response,
  ModFeedbackProcessPage200Response,
  ModFeedbackProcessPageRequest,
  ModFeedbackViewFeedbackRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestFromJSON,
    ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestToJSON,
    ModFeedbackGetAnalysis200ResponseFromJSON,
    ModFeedbackGetAnalysis200ResponseToJSON,
    ModFeedbackGetAnalysisRequestFromJSON,
    ModFeedbackGetAnalysisRequestToJSON,
    ModFeedbackGetCurrentCompletedTmp200ResponseFromJSON,
    ModFeedbackGetCurrentCompletedTmp200ResponseToJSON,
    ModFeedbackGetCurrentCompletedTmpRequestFromJSON,
    ModFeedbackGetCurrentCompletedTmpRequestToJSON,
    ModFeedbackGetFeedbackAccessInformation200ResponseFromJSON,
    ModFeedbackGetFeedbackAccessInformation200ResponseToJSON,
    ModFeedbackGetFeedbackAccessInformationRequestFromJSON,
    ModFeedbackGetFeedbackAccessInformationRequestToJSON,
    ModFeedbackGetFeedbacksByCourses200ResponseFromJSON,
    ModFeedbackGetFeedbacksByCourses200ResponseToJSON,
    ModFeedbackGetFinishedResponses200ResponseFromJSON,
    ModFeedbackGetFinishedResponses200ResponseToJSON,
    ModFeedbackGetFinishedResponsesRequestFromJSON,
    ModFeedbackGetFinishedResponsesRequestToJSON,
    ModFeedbackGetItems200ResponseFromJSON,
    ModFeedbackGetItems200ResponseToJSON,
    ModFeedbackGetLastCompleted200ResponseFromJSON,
    ModFeedbackGetLastCompleted200ResponseToJSON,
    ModFeedbackGetNonRespondents200ResponseFromJSON,
    ModFeedbackGetNonRespondents200ResponseToJSON,
    ModFeedbackGetNonRespondentsRequestFromJSON,
    ModFeedbackGetNonRespondentsRequestToJSON,
    ModFeedbackGetPageItems200ResponseFromJSON,
    ModFeedbackGetPageItems200ResponseToJSON,
    ModFeedbackGetPageItemsRequestFromJSON,
    ModFeedbackGetPageItemsRequestToJSON,
    ModFeedbackGetResponsesAnalysis200ResponseFromJSON,
    ModFeedbackGetResponsesAnalysis200ResponseToJSON,
    ModFeedbackGetResponsesAnalysisRequestFromJSON,
    ModFeedbackGetResponsesAnalysisRequestToJSON,
    ModFeedbackGetUnfinishedResponses200ResponseFromJSON,
    ModFeedbackGetUnfinishedResponses200ResponseToJSON,
    ModFeedbackLaunchFeedback200ResponseFromJSON,
    ModFeedbackLaunchFeedback200ResponseToJSON,
    ModFeedbackProcessPage200ResponseFromJSON,
    ModFeedbackProcessPage200ResponseToJSON,
    ModFeedbackProcessPageRequestFromJSON,
    ModFeedbackProcessPageRequestToJSON,
    ModFeedbackViewFeedbackRequestFromJSON,
    ModFeedbackViewFeedbackRequestToJSON,
} from '../models/index';

export interface ModFeedbackGetAnalysisOperationRequest {
    modFeedbackGetAnalysisRequest: ModFeedbackGetAnalysisRequest;
}

export interface ModFeedbackGetCurrentCompletedTmpOperationRequest {
    modFeedbackGetCurrentCompletedTmpRequest: ModFeedbackGetCurrentCompletedTmpRequest;
}

export interface ModFeedbackGetFeedbackAccessInformationOperationRequest {
    modFeedbackGetFeedbackAccessInformationRequest: ModFeedbackGetFeedbackAccessInformationRequest;
}

export interface ModFeedbackGetFeedbacksByCoursesRequest {
    modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;
}

export interface ModFeedbackGetFinishedResponsesOperationRequest {
    modFeedbackGetFinishedResponsesRequest: ModFeedbackGetFinishedResponsesRequest;
}

export interface ModFeedbackGetItemsRequest {
    modFeedbackGetCurrentCompletedTmpRequest: ModFeedbackGetCurrentCompletedTmpRequest;
}

export interface ModFeedbackGetLastCompletedRequest {
    modFeedbackGetCurrentCompletedTmpRequest: ModFeedbackGetCurrentCompletedTmpRequest;
}

export interface ModFeedbackGetNonRespondentsOperationRequest {
    modFeedbackGetNonRespondentsRequest: ModFeedbackGetNonRespondentsRequest;
}

export interface ModFeedbackGetPageItemsOperationRequest {
    modFeedbackGetPageItemsRequest: ModFeedbackGetPageItemsRequest;
}

export interface ModFeedbackGetResponsesAnalysisOperationRequest {
    modFeedbackGetResponsesAnalysisRequest: ModFeedbackGetResponsesAnalysisRequest;
}

export interface ModFeedbackGetUnfinishedResponsesRequest {
    modFeedbackGetFinishedResponsesRequest: ModFeedbackGetFinishedResponsesRequest;
}

export interface ModFeedbackLaunchFeedbackRequest {
    modFeedbackGetCurrentCompletedTmpRequest: ModFeedbackGetCurrentCompletedTmpRequest;
}

export interface ModFeedbackProcessPageOperationRequest {
    modFeedbackProcessPageRequest: ModFeedbackProcessPageRequest;
}

export interface ModFeedbackViewFeedbackOperationRequest {
    modFeedbackViewFeedbackRequest: ModFeedbackViewFeedbackRequest;
}

/**
 * 
 */
export class ModFeedbackApi extends runtime.BaseAPI {

    /**
     * Retrieves the feedback analysis.
     * Retrieves the feedback analysis.
     */
    async modFeedbackGetAnalysisRaw(requestParameters: ModFeedbackGetAnalysisOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModFeedbackGetAnalysis200Response>> {
        if (requestParameters['modFeedbackGetAnalysisRequest'] == null) {
            throw new runtime.RequiredError(
                'modFeedbackGetAnalysisRequest',
                'Required parameter "modFeedbackGetAnalysisRequest" was null or undefined when calling modFeedbackGetAnalysis().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_feedback_get_analysis`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModFeedbackGetAnalysisRequestToJSON(requestParameters['modFeedbackGetAnalysisRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModFeedbackGetAnalysis200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the feedback analysis.
     * Retrieves the feedback analysis.
     */
    async modFeedbackGetAnalysis(requestParameters: ModFeedbackGetAnalysisOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModFeedbackGetAnalysis200Response> {
        const response = await this.modFeedbackGetAnalysisRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the temporary completion record for the current user.
     * Returns the temporary completion record for the current user.
     */
    async modFeedbackGetCurrentCompletedTmpRaw(requestParameters: ModFeedbackGetCurrentCompletedTmpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModFeedbackGetCurrentCompletedTmp200Response>> {
        if (requestParameters['modFeedbackGetCurrentCompletedTmpRequest'] == null) {
            throw new runtime.RequiredError(
                'modFeedbackGetCurrentCompletedTmpRequest',
                'Required parameter "modFeedbackGetCurrentCompletedTmpRequest" was null or undefined when calling modFeedbackGetCurrentCompletedTmp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_feedback_get_current_completed_tmp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModFeedbackGetCurrentCompletedTmpRequestToJSON(requestParameters['modFeedbackGetCurrentCompletedTmpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModFeedbackGetCurrentCompletedTmp200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the temporary completion record for the current user.
     * Returns the temporary completion record for the current user.
     */
    async modFeedbackGetCurrentCompletedTmp(requestParameters: ModFeedbackGetCurrentCompletedTmpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModFeedbackGetCurrentCompletedTmp200Response> {
        const response = await this.modFeedbackGetCurrentCompletedTmpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return access information for a given feedback.
     * Return access information for a given feedback.
     */
    async modFeedbackGetFeedbackAccessInformationRaw(requestParameters: ModFeedbackGetFeedbackAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModFeedbackGetFeedbackAccessInformation200Response>> {
        if (requestParameters['modFeedbackGetFeedbackAccessInformationRequest'] == null) {
            throw new runtime.RequiredError(
                'modFeedbackGetFeedbackAccessInformationRequest',
                'Required parameter "modFeedbackGetFeedbackAccessInformationRequest" was null or undefined when calling modFeedbackGetFeedbackAccessInformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_feedback_get_feedback_access_information`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModFeedbackGetFeedbackAccessInformationRequestToJSON(requestParameters['modFeedbackGetFeedbackAccessInformationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModFeedbackGetFeedbackAccessInformation200ResponseFromJSON(jsonValue));
    }

    /**
     * Return access information for a given feedback.
     * Return access information for a given feedback.
     */
    async modFeedbackGetFeedbackAccessInformation(requestParameters: ModFeedbackGetFeedbackAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModFeedbackGetFeedbackAccessInformation200Response> {
        const response = await this.modFeedbackGetFeedbackAccessInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
     * Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
     */
    async modFeedbackGetFeedbacksByCoursesRaw(requestParameters: ModFeedbackGetFeedbacksByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModFeedbackGetFeedbacksByCourses200Response>> {
        if (requestParameters['modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest',
                'Required parameter "modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest" was null or undefined when calling modFeedbackGetFeedbacksByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_feedback_get_feedbacks_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestToJSON(requestParameters['modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModFeedbackGetFeedbacksByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
     * Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
     */
    async modFeedbackGetFeedbacksByCourses(requestParameters: ModFeedbackGetFeedbacksByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModFeedbackGetFeedbacksByCourses200Response> {
        const response = await this.modFeedbackGetFeedbacksByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves responses from the last finished attempt.
     * Retrieves responses from the last finished attempt.
     */
    async modFeedbackGetFinishedResponsesRaw(requestParameters: ModFeedbackGetFinishedResponsesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModFeedbackGetFinishedResponses200Response>> {
        if (requestParameters['modFeedbackGetFinishedResponsesRequest'] == null) {
            throw new runtime.RequiredError(
                'modFeedbackGetFinishedResponsesRequest',
                'Required parameter "modFeedbackGetFinishedResponsesRequest" was null or undefined when calling modFeedbackGetFinishedResponses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_feedback_get_finished_responses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModFeedbackGetFinishedResponsesRequestToJSON(requestParameters['modFeedbackGetFinishedResponsesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModFeedbackGetFinishedResponses200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves responses from the last finished attempt.
     * Retrieves responses from the last finished attempt.
     */
    async modFeedbackGetFinishedResponses(requestParameters: ModFeedbackGetFinishedResponsesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModFeedbackGetFinishedResponses200Response> {
        const response = await this.modFeedbackGetFinishedResponsesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the items (questions) in the given feedback.
     * Returns the items (questions) in the given feedback.
     */
    async modFeedbackGetItemsRaw(requestParameters: ModFeedbackGetItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModFeedbackGetItems200Response>> {
        if (requestParameters['modFeedbackGetCurrentCompletedTmpRequest'] == null) {
            throw new runtime.RequiredError(
                'modFeedbackGetCurrentCompletedTmpRequest',
                'Required parameter "modFeedbackGetCurrentCompletedTmpRequest" was null or undefined when calling modFeedbackGetItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_feedback_get_items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModFeedbackGetCurrentCompletedTmpRequestToJSON(requestParameters['modFeedbackGetCurrentCompletedTmpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModFeedbackGetItems200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the items (questions) in the given feedback.
     * Returns the items (questions) in the given feedback.
     */
    async modFeedbackGetItems(requestParameters: ModFeedbackGetItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModFeedbackGetItems200Response> {
        const response = await this.modFeedbackGetItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the last completion record for the current user.
     * Retrieves the last completion record for the current user.
     */
    async modFeedbackGetLastCompletedRaw(requestParameters: ModFeedbackGetLastCompletedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModFeedbackGetLastCompleted200Response>> {
        if (requestParameters['modFeedbackGetCurrentCompletedTmpRequest'] == null) {
            throw new runtime.RequiredError(
                'modFeedbackGetCurrentCompletedTmpRequest',
                'Required parameter "modFeedbackGetCurrentCompletedTmpRequest" was null or undefined when calling modFeedbackGetLastCompleted().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_feedback_get_last_completed`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModFeedbackGetCurrentCompletedTmpRequestToJSON(requestParameters['modFeedbackGetCurrentCompletedTmpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModFeedbackGetLastCompleted200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the last completion record for the current user.
     * Retrieves the last completion record for the current user.
     */
    async modFeedbackGetLastCompleted(requestParameters: ModFeedbackGetLastCompletedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModFeedbackGetLastCompleted200Response> {
        const response = await this.modFeedbackGetLastCompletedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of students who didn\'t submit the feedback.
     * Retrieves a list of students who didn\'t submit the feedback.
     */
    async modFeedbackGetNonRespondentsRaw(requestParameters: ModFeedbackGetNonRespondentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModFeedbackGetNonRespondents200Response>> {
        if (requestParameters['modFeedbackGetNonRespondentsRequest'] == null) {
            throw new runtime.RequiredError(
                'modFeedbackGetNonRespondentsRequest',
                'Required parameter "modFeedbackGetNonRespondentsRequest" was null or undefined when calling modFeedbackGetNonRespondents().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_feedback_get_non_respondents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModFeedbackGetNonRespondentsRequestToJSON(requestParameters['modFeedbackGetNonRespondentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModFeedbackGetNonRespondents200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of students who didn\'t submit the feedback.
     * Retrieves a list of students who didn\'t submit the feedback.
     */
    async modFeedbackGetNonRespondents(requestParameters: ModFeedbackGetNonRespondentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModFeedbackGetNonRespondents200Response> {
        const response = await this.modFeedbackGetNonRespondentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single feedback page items.
     * Get a single feedback page items.
     */
    async modFeedbackGetPageItemsRaw(requestParameters: ModFeedbackGetPageItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModFeedbackGetPageItems200Response>> {
        if (requestParameters['modFeedbackGetPageItemsRequest'] == null) {
            throw new runtime.RequiredError(
                'modFeedbackGetPageItemsRequest',
                'Required parameter "modFeedbackGetPageItemsRequest" was null or undefined when calling modFeedbackGetPageItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_feedback_get_page_items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModFeedbackGetPageItemsRequestToJSON(requestParameters['modFeedbackGetPageItemsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModFeedbackGetPageItems200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a single feedback page items.
     * Get a single feedback page items.
     */
    async modFeedbackGetPageItems(requestParameters: ModFeedbackGetPageItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModFeedbackGetPageItems200Response> {
        const response = await this.modFeedbackGetPageItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the feedback user responses analysis.
     * Return the feedback user responses analysis.
     */
    async modFeedbackGetResponsesAnalysisRaw(requestParameters: ModFeedbackGetResponsesAnalysisOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModFeedbackGetResponsesAnalysis200Response>> {
        if (requestParameters['modFeedbackGetResponsesAnalysisRequest'] == null) {
            throw new runtime.RequiredError(
                'modFeedbackGetResponsesAnalysisRequest',
                'Required parameter "modFeedbackGetResponsesAnalysisRequest" was null or undefined when calling modFeedbackGetResponsesAnalysis().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_feedback_get_responses_analysis`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModFeedbackGetResponsesAnalysisRequestToJSON(requestParameters['modFeedbackGetResponsesAnalysisRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModFeedbackGetResponsesAnalysis200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the feedback user responses analysis.
     * Return the feedback user responses analysis.
     */
    async modFeedbackGetResponsesAnalysis(requestParameters: ModFeedbackGetResponsesAnalysisOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModFeedbackGetResponsesAnalysis200Response> {
        const response = await this.modFeedbackGetResponsesAnalysisRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves responses from the current unfinished attempt.
     * Retrieves responses from the current unfinished attempt.
     */
    async modFeedbackGetUnfinishedResponsesRaw(requestParameters: ModFeedbackGetUnfinishedResponsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModFeedbackGetUnfinishedResponses200Response>> {
        if (requestParameters['modFeedbackGetFinishedResponsesRequest'] == null) {
            throw new runtime.RequiredError(
                'modFeedbackGetFinishedResponsesRequest',
                'Required parameter "modFeedbackGetFinishedResponsesRequest" was null or undefined when calling modFeedbackGetUnfinishedResponses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_feedback_get_unfinished_responses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModFeedbackGetFinishedResponsesRequestToJSON(requestParameters['modFeedbackGetFinishedResponsesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModFeedbackGetUnfinishedResponses200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves responses from the current unfinished attempt.
     * Retrieves responses from the current unfinished attempt.
     */
    async modFeedbackGetUnfinishedResponses(requestParameters: ModFeedbackGetUnfinishedResponsesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModFeedbackGetUnfinishedResponses200Response> {
        const response = await this.modFeedbackGetUnfinishedResponsesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Starts or continues a feedback submission.
     * Starts or continues a feedback submission.
     */
    async modFeedbackLaunchFeedbackRaw(requestParameters: ModFeedbackLaunchFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModFeedbackLaunchFeedback200Response>> {
        if (requestParameters['modFeedbackGetCurrentCompletedTmpRequest'] == null) {
            throw new runtime.RequiredError(
                'modFeedbackGetCurrentCompletedTmpRequest',
                'Required parameter "modFeedbackGetCurrentCompletedTmpRequest" was null or undefined when calling modFeedbackLaunchFeedback().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_feedback_launch_feedback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModFeedbackGetCurrentCompletedTmpRequestToJSON(requestParameters['modFeedbackGetCurrentCompletedTmpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModFeedbackLaunchFeedback200ResponseFromJSON(jsonValue));
    }

    /**
     * Starts or continues a feedback submission.
     * Starts or continues a feedback submission.
     */
    async modFeedbackLaunchFeedback(requestParameters: ModFeedbackLaunchFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModFeedbackLaunchFeedback200Response> {
        const response = await this.modFeedbackLaunchFeedbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process a jump between pages.
     * Process a jump between pages.
     */
    async modFeedbackProcessPageRaw(requestParameters: ModFeedbackProcessPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModFeedbackProcessPage200Response>> {
        if (requestParameters['modFeedbackProcessPageRequest'] == null) {
            throw new runtime.RequiredError(
                'modFeedbackProcessPageRequest',
                'Required parameter "modFeedbackProcessPageRequest" was null or undefined when calling modFeedbackProcessPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_feedback_process_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModFeedbackProcessPageRequestToJSON(requestParameters['modFeedbackProcessPageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModFeedbackProcessPage200ResponseFromJSON(jsonValue));
    }

    /**
     * Process a jump between pages.
     * Process a jump between pages.
     */
    async modFeedbackProcessPage(requestParameters: ModFeedbackProcessPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModFeedbackProcessPage200Response> {
        const response = await this.modFeedbackProcessPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modFeedbackViewFeedbackRaw(requestParameters: ModFeedbackViewFeedbackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modFeedbackViewFeedbackRequest'] == null) {
            throw new runtime.RequiredError(
                'modFeedbackViewFeedbackRequest',
                'Required parameter "modFeedbackViewFeedbackRequest" was null or undefined when calling modFeedbackViewFeedback().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_feedback_view_feedback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModFeedbackViewFeedbackRequestToJSON(requestParameters['modFeedbackViewFeedbackRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modFeedbackViewFeedback(requestParameters: ModFeedbackViewFeedbackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modFeedbackViewFeedbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
