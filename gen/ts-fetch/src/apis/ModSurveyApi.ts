/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  ErrorResponse,
  ModChatGetChatsByCoursesRequest,
  ModSurveyGetQuestions200Response,
  ModSurveyGetQuestionsRequest,
  ModSurveyGetSurveysByCourses200Response,
  ModSurveySubmitAnswersRequest,
  ModSurveyViewSurveyRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModChatGetChatsByCoursesRequestFromJSON,
    ModChatGetChatsByCoursesRequestToJSON,
    ModSurveyGetQuestions200ResponseFromJSON,
    ModSurveyGetQuestions200ResponseToJSON,
    ModSurveyGetQuestionsRequestFromJSON,
    ModSurveyGetQuestionsRequestToJSON,
    ModSurveyGetSurveysByCourses200ResponseFromJSON,
    ModSurveyGetSurveysByCourses200ResponseToJSON,
    ModSurveySubmitAnswersRequestFromJSON,
    ModSurveySubmitAnswersRequestToJSON,
    ModSurveyViewSurveyRequestFromJSON,
    ModSurveyViewSurveyRequestToJSON,
} from '../models/index';

export interface ModSurveyGetQuestionsOperationRequest {
    modSurveyGetQuestionsRequest: ModSurveyGetQuestionsRequest;
}

export interface ModSurveyGetSurveysByCoursesRequest {
    modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest;
}

export interface ModSurveySubmitAnswersOperationRequest {
    modSurveySubmitAnswersRequest: ModSurveySubmitAnswersRequest;
}

export interface ModSurveyViewSurveyOperationRequest {
    modSurveyViewSurveyRequest: ModSurveyViewSurveyRequest;
}

/**
 * 
 */
export class ModSurveyApi extends runtime.BaseAPI {

    /**
     * Get the complete list of questions for the survey, including subquestions.
     * Get the complete list of questions for the survey, including subquestions.
     */
    async modSurveyGetQuestionsRaw(requestParameters: ModSurveyGetQuestionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModSurveyGetQuestions200Response>> {
        if (requestParameters['modSurveyGetQuestionsRequest'] == null) {
            throw new runtime.RequiredError(
                'modSurveyGetQuestionsRequest',
                'Required parameter "modSurveyGetQuestionsRequest" was null or undefined when calling modSurveyGetQuestions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_survey_get_questions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModSurveyGetQuestionsRequestToJSON(requestParameters['modSurveyGetQuestionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModSurveyGetQuestions200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the complete list of questions for the survey, including subquestions.
     * Get the complete list of questions for the survey, including subquestions.
     */
    async modSurveyGetQuestions(requestParameters: ModSurveyGetQuestionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModSurveyGetQuestions200Response> {
        const response = await this.modSurveyGetQuestionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
     * Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
     */
    async modSurveyGetSurveysByCoursesRaw(requestParameters: ModSurveyGetSurveysByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModSurveyGetSurveysByCourses200Response>> {
        if (requestParameters['modChatGetChatsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatGetChatsByCoursesRequest',
                'Required parameter "modChatGetChatsByCoursesRequest" was null or undefined when calling modSurveyGetSurveysByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_survey_get_surveys_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatGetChatsByCoursesRequestToJSON(requestParameters['modChatGetChatsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModSurveyGetSurveysByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
     * Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
     */
    async modSurveyGetSurveysByCourses(requestParameters: ModSurveyGetSurveysByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModSurveyGetSurveysByCourses200Response> {
        const response = await this.modSurveyGetSurveysByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit the answers for a given survey.
     * Submit the answers for a given survey.
     */
    async modSurveySubmitAnswersRaw(requestParameters: ModSurveySubmitAnswersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modSurveySubmitAnswersRequest'] == null) {
            throw new runtime.RequiredError(
                'modSurveySubmitAnswersRequest',
                'Required parameter "modSurveySubmitAnswersRequest" was null or undefined when calling modSurveySubmitAnswers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_survey_submit_answers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModSurveySubmitAnswersRequestToJSON(requestParameters['modSurveySubmitAnswersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Submit the answers for a given survey.
     * Submit the answers for a given survey.
     */
    async modSurveySubmitAnswers(requestParameters: ModSurveySubmitAnswersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modSurveySubmitAnswersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modSurveyViewSurveyRaw(requestParameters: ModSurveyViewSurveyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modSurveyViewSurveyRequest'] == null) {
            throw new runtime.RequiredError(
                'modSurveyViewSurveyRequest',
                'Required parameter "modSurveyViewSurveyRequest" was null or undefined when calling modSurveyViewSurvey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_survey_view_survey`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModSurveyViewSurveyRequestToJSON(requestParameters['modSurveyViewSurveyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modSurveyViewSurvey(requestParameters: ModSurveyViewSurveyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modSurveyViewSurveyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
