/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  ErrorResponse,
  ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest,
  ModWorkshopAddSubmission200Response,
  ModWorkshopAddSubmissionRequest,
  ModWorkshopDeleteSubmission200Response,
  ModWorkshopDeleteSubmissionRequest,
  ModWorkshopEvaluateAssessment200Response,
  ModWorkshopEvaluateAssessmentRequest,
  ModWorkshopEvaluateSubmission200Response,
  ModWorkshopEvaluateSubmissionRequest,
  ModWorkshopGetAssessment200Response,
  ModWorkshopGetAssessmentFormDefinition200Response,
  ModWorkshopGetAssessmentFormDefinitionRequest,
  ModWorkshopGetAssessmentRequest,
  ModWorkshopGetGrades200Response,
  ModWorkshopGetGradesReport200Response,
  ModWorkshopGetGradesReportRequest,
  ModWorkshopGetGradesRequest,
  ModWorkshopGetReviewerAssessments200Response,
  ModWorkshopGetReviewerAssessmentsRequest,
  ModWorkshopGetSubmission200Response,
  ModWorkshopGetSubmissionRequest,
  ModWorkshopGetSubmissions200Response,
  ModWorkshopGetSubmissionsRequest,
  ModWorkshopGetUserPlan200Response,
  ModWorkshopGetUserPlanRequest,
  ModWorkshopGetWorkshopAccessInformation200Response,
  ModWorkshopGetWorkshopAccessInformationRequest,
  ModWorkshopGetWorkshopsByCourses200Response,
  ModWorkshopUpdateAssessment200Response,
  ModWorkshopUpdateAssessmentRequest,
  ModWorkshopUpdateSubmission200Response,
  ModWorkshopUpdateSubmissionRequest,
  ModWorkshopViewWorkshopRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestFromJSON,
    ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestToJSON,
    ModWorkshopAddSubmission200ResponseFromJSON,
    ModWorkshopAddSubmission200ResponseToJSON,
    ModWorkshopAddSubmissionRequestFromJSON,
    ModWorkshopAddSubmissionRequestToJSON,
    ModWorkshopDeleteSubmission200ResponseFromJSON,
    ModWorkshopDeleteSubmission200ResponseToJSON,
    ModWorkshopDeleteSubmissionRequestFromJSON,
    ModWorkshopDeleteSubmissionRequestToJSON,
    ModWorkshopEvaluateAssessment200ResponseFromJSON,
    ModWorkshopEvaluateAssessment200ResponseToJSON,
    ModWorkshopEvaluateAssessmentRequestFromJSON,
    ModWorkshopEvaluateAssessmentRequestToJSON,
    ModWorkshopEvaluateSubmission200ResponseFromJSON,
    ModWorkshopEvaluateSubmission200ResponseToJSON,
    ModWorkshopEvaluateSubmissionRequestFromJSON,
    ModWorkshopEvaluateSubmissionRequestToJSON,
    ModWorkshopGetAssessment200ResponseFromJSON,
    ModWorkshopGetAssessment200ResponseToJSON,
    ModWorkshopGetAssessmentFormDefinition200ResponseFromJSON,
    ModWorkshopGetAssessmentFormDefinition200ResponseToJSON,
    ModWorkshopGetAssessmentFormDefinitionRequestFromJSON,
    ModWorkshopGetAssessmentFormDefinitionRequestToJSON,
    ModWorkshopGetAssessmentRequestFromJSON,
    ModWorkshopGetAssessmentRequestToJSON,
    ModWorkshopGetGrades200ResponseFromJSON,
    ModWorkshopGetGrades200ResponseToJSON,
    ModWorkshopGetGradesReport200ResponseFromJSON,
    ModWorkshopGetGradesReport200ResponseToJSON,
    ModWorkshopGetGradesReportRequestFromJSON,
    ModWorkshopGetGradesReportRequestToJSON,
    ModWorkshopGetGradesRequestFromJSON,
    ModWorkshopGetGradesRequestToJSON,
    ModWorkshopGetReviewerAssessments200ResponseFromJSON,
    ModWorkshopGetReviewerAssessments200ResponseToJSON,
    ModWorkshopGetReviewerAssessmentsRequestFromJSON,
    ModWorkshopGetReviewerAssessmentsRequestToJSON,
    ModWorkshopGetSubmission200ResponseFromJSON,
    ModWorkshopGetSubmission200ResponseToJSON,
    ModWorkshopGetSubmissionRequestFromJSON,
    ModWorkshopGetSubmissionRequestToJSON,
    ModWorkshopGetSubmissions200ResponseFromJSON,
    ModWorkshopGetSubmissions200ResponseToJSON,
    ModWorkshopGetSubmissionsRequestFromJSON,
    ModWorkshopGetSubmissionsRequestToJSON,
    ModWorkshopGetUserPlan200ResponseFromJSON,
    ModWorkshopGetUserPlan200ResponseToJSON,
    ModWorkshopGetUserPlanRequestFromJSON,
    ModWorkshopGetUserPlanRequestToJSON,
    ModWorkshopGetWorkshopAccessInformation200ResponseFromJSON,
    ModWorkshopGetWorkshopAccessInformation200ResponseToJSON,
    ModWorkshopGetWorkshopAccessInformationRequestFromJSON,
    ModWorkshopGetWorkshopAccessInformationRequestToJSON,
    ModWorkshopGetWorkshopsByCourses200ResponseFromJSON,
    ModWorkshopGetWorkshopsByCourses200ResponseToJSON,
    ModWorkshopUpdateAssessment200ResponseFromJSON,
    ModWorkshopUpdateAssessment200ResponseToJSON,
    ModWorkshopUpdateAssessmentRequestFromJSON,
    ModWorkshopUpdateAssessmentRequestToJSON,
    ModWorkshopUpdateSubmission200ResponseFromJSON,
    ModWorkshopUpdateSubmission200ResponseToJSON,
    ModWorkshopUpdateSubmissionRequestFromJSON,
    ModWorkshopUpdateSubmissionRequestToJSON,
    ModWorkshopViewWorkshopRequestFromJSON,
    ModWorkshopViewWorkshopRequestToJSON,
} from '../models/index';

export interface ModWorkshopAddSubmissionOperationRequest {
    modWorkshopAddSubmissionRequest: ModWorkshopAddSubmissionRequest;
}

export interface ModWorkshopDeleteSubmissionOperationRequest {
    modWorkshopDeleteSubmissionRequest: ModWorkshopDeleteSubmissionRequest;
}

export interface ModWorkshopEvaluateAssessmentOperationRequest {
    modWorkshopEvaluateAssessmentRequest: ModWorkshopEvaluateAssessmentRequest;
}

export interface ModWorkshopEvaluateSubmissionOperationRequest {
    modWorkshopEvaluateSubmissionRequest: ModWorkshopEvaluateSubmissionRequest;
}

export interface ModWorkshopGetAssessmentOperationRequest {
    modWorkshopGetAssessmentRequest: ModWorkshopGetAssessmentRequest;
}

export interface ModWorkshopGetAssessmentFormDefinitionOperationRequest {
    modWorkshopGetAssessmentFormDefinitionRequest: ModWorkshopGetAssessmentFormDefinitionRequest;
}

export interface ModWorkshopGetGradesOperationRequest {
    modWorkshopGetGradesRequest: ModWorkshopGetGradesRequest;
}

export interface ModWorkshopGetGradesReportOperationRequest {
    modWorkshopGetGradesReportRequest: ModWorkshopGetGradesReportRequest;
}

export interface ModWorkshopGetReviewerAssessmentsOperationRequest {
    modWorkshopGetReviewerAssessmentsRequest: ModWorkshopGetReviewerAssessmentsRequest;
}

export interface ModWorkshopGetSubmissionOperationRequest {
    modWorkshopGetSubmissionRequest: ModWorkshopGetSubmissionRequest;
}

export interface ModWorkshopGetSubmissionAssessmentsRequest {
    modWorkshopGetSubmissionRequest: ModWorkshopGetSubmissionRequest;
}

export interface ModWorkshopGetSubmissionsOperationRequest {
    modWorkshopGetSubmissionsRequest: ModWorkshopGetSubmissionsRequest;
}

export interface ModWorkshopGetUserPlanOperationRequest {
    modWorkshopGetUserPlanRequest: ModWorkshopGetUserPlanRequest;
}

export interface ModWorkshopGetWorkshopAccessInformationOperationRequest {
    modWorkshopGetWorkshopAccessInformationRequest: ModWorkshopGetWorkshopAccessInformationRequest;
}

export interface ModWorkshopGetWorkshopsByCoursesRequest {
    modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;
}

export interface ModWorkshopUpdateAssessmentOperationRequest {
    modWorkshopUpdateAssessmentRequest: ModWorkshopUpdateAssessmentRequest;
}

export interface ModWorkshopUpdateSubmissionOperationRequest {
    modWorkshopUpdateSubmissionRequest: ModWorkshopUpdateSubmissionRequest;
}

export interface ModWorkshopViewSubmissionRequest {
    modWorkshopGetSubmissionRequest: ModWorkshopGetSubmissionRequest;
}

export interface ModWorkshopViewWorkshopOperationRequest {
    modWorkshopViewWorkshopRequest: ModWorkshopViewWorkshopRequest;
}

/**
 * 
 */
export class ModWorkshopApi extends runtime.BaseAPI {

    /**
     * Add a new submission to a given workshop.
     * Add a new submission to a given workshop.
     */
    async modWorkshopAddSubmissionRaw(requestParameters: ModWorkshopAddSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopAddSubmission200Response>> {
        if (requestParameters['modWorkshopAddSubmissionRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopAddSubmissionRequest',
                'Required parameter "modWorkshopAddSubmissionRequest" was null or undefined when calling modWorkshopAddSubmission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_add_submission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopAddSubmissionRequestToJSON(requestParameters['modWorkshopAddSubmissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopAddSubmission200ResponseFromJSON(jsonValue));
    }

    /**
     * Add a new submission to a given workshop.
     * Add a new submission to a given workshop.
     */
    async modWorkshopAddSubmission(requestParameters: ModWorkshopAddSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopAddSubmission200Response> {
        const response = await this.modWorkshopAddSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the given submission.
     * Deletes the given submission.
     */
    async modWorkshopDeleteSubmissionRaw(requestParameters: ModWorkshopDeleteSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopDeleteSubmission200Response>> {
        if (requestParameters['modWorkshopDeleteSubmissionRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopDeleteSubmissionRequest',
                'Required parameter "modWorkshopDeleteSubmissionRequest" was null or undefined when calling modWorkshopDeleteSubmission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_delete_submission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopDeleteSubmissionRequestToJSON(requestParameters['modWorkshopDeleteSubmissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopDeleteSubmission200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes the given submission.
     * Deletes the given submission.
     */
    async modWorkshopDeleteSubmission(requestParameters: ModWorkshopDeleteSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopDeleteSubmission200Response> {
        const response = await this.modWorkshopDeleteSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     */
    async modWorkshopEvaluateAssessmentRaw(requestParameters: ModWorkshopEvaluateAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopEvaluateAssessment200Response>> {
        if (requestParameters['modWorkshopEvaluateAssessmentRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopEvaluateAssessmentRequest',
                'Required parameter "modWorkshopEvaluateAssessmentRequest" was null or undefined when calling modWorkshopEvaluateAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_evaluate_assessment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopEvaluateAssessmentRequestToJSON(requestParameters['modWorkshopEvaluateAssessmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopEvaluateAssessment200ResponseFromJSON(jsonValue));
    }

    /**
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     * Evaluates an assessment (used by teachers for provide feedback to the reviewer).
     */
    async modWorkshopEvaluateAssessment(requestParameters: ModWorkshopEvaluateAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopEvaluateAssessment200Response> {
        const response = await this.modWorkshopEvaluateAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     */
    async modWorkshopEvaluateSubmissionRaw(requestParameters: ModWorkshopEvaluateSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopEvaluateSubmission200Response>> {
        if (requestParameters['modWorkshopEvaluateSubmissionRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopEvaluateSubmissionRequest',
                'Required parameter "modWorkshopEvaluateSubmissionRequest" was null or undefined when calling modWorkshopEvaluateSubmission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_evaluate_submission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopEvaluateSubmissionRequestToJSON(requestParameters['modWorkshopEvaluateSubmissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopEvaluateSubmission200ResponseFromJSON(jsonValue));
    }

    /**
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     * Evaluates a submission (used by teachers for provide feedback or override the submission grade).
     */
    async modWorkshopEvaluateSubmission(requestParameters: ModWorkshopEvaluateSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopEvaluateSubmission200Response> {
        const response = await this.modWorkshopEvaluateSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the given assessment.
     * Retrieves the given assessment.
     */
    async modWorkshopGetAssessmentRaw(requestParameters: ModWorkshopGetAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopGetAssessment200Response>> {
        if (requestParameters['modWorkshopGetAssessmentRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopGetAssessmentRequest',
                'Required parameter "modWorkshopGetAssessmentRequest" was null or undefined when calling modWorkshopGetAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_get_assessment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopGetAssessmentRequestToJSON(requestParameters['modWorkshopGetAssessmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopGetAssessment200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the given assessment.
     * Retrieves the given assessment.
     */
    async modWorkshopGetAssessment(requestParameters: ModWorkshopGetAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopGetAssessment200Response> {
        const response = await this.modWorkshopGetAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the assessment form definition.
     * Retrieves the assessment form definition.
     */
    async modWorkshopGetAssessmentFormDefinitionRaw(requestParameters: ModWorkshopGetAssessmentFormDefinitionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopGetAssessmentFormDefinition200Response>> {
        if (requestParameters['modWorkshopGetAssessmentFormDefinitionRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopGetAssessmentFormDefinitionRequest',
                'Required parameter "modWorkshopGetAssessmentFormDefinitionRequest" was null or undefined when calling modWorkshopGetAssessmentFormDefinition().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_get_assessment_form_definition`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopGetAssessmentFormDefinitionRequestToJSON(requestParameters['modWorkshopGetAssessmentFormDefinitionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopGetAssessmentFormDefinition200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the assessment form definition.
     * Retrieves the assessment form definition.
     */
    async modWorkshopGetAssessmentFormDefinition(requestParameters: ModWorkshopGetAssessmentFormDefinitionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopGetAssessmentFormDefinition200Response> {
        const response = await this.modWorkshopGetAssessmentFormDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the assessment and submission grade for the given user.
     * Returns the assessment and submission grade for the given user.
     */
    async modWorkshopGetGradesRaw(requestParameters: ModWorkshopGetGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopGetGrades200Response>> {
        if (requestParameters['modWorkshopGetGradesRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopGetGradesRequest',
                'Required parameter "modWorkshopGetGradesRequest" was null or undefined when calling modWorkshopGetGrades().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_get_grades`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopGetGradesRequestToJSON(requestParameters['modWorkshopGetGradesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopGetGrades200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the assessment and submission grade for the given user.
     * Returns the assessment and submission grade for the given user.
     */
    async modWorkshopGetGrades(requestParameters: ModWorkshopGetGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopGetGrades200Response> {
        const response = await this.modWorkshopGetGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the assessment grades report.
     * Retrieves the assessment grades report.
     */
    async modWorkshopGetGradesReportRaw(requestParameters: ModWorkshopGetGradesReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopGetGradesReport200Response>> {
        if (requestParameters['modWorkshopGetGradesReportRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopGetGradesReportRequest',
                'Required parameter "modWorkshopGetGradesReportRequest" was null or undefined when calling modWorkshopGetGradesReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_get_grades_report`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopGetGradesReportRequestToJSON(requestParameters['modWorkshopGetGradesReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopGetGradesReport200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the assessment grades report.
     * Retrieves the assessment grades report.
     */
    async modWorkshopGetGradesReport(requestParameters: ModWorkshopGetGradesReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopGetGradesReport200Response> {
        const response = await this.modWorkshopGetGradesReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the assessments reviewed by the given user.
     * Retrieves all the assessments reviewed by the given user.
     */
    async modWorkshopGetReviewerAssessmentsRaw(requestParameters: ModWorkshopGetReviewerAssessmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopGetReviewerAssessments200Response>> {
        if (requestParameters['modWorkshopGetReviewerAssessmentsRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopGetReviewerAssessmentsRequest',
                'Required parameter "modWorkshopGetReviewerAssessmentsRequest" was null or undefined when calling modWorkshopGetReviewerAssessments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_get_reviewer_assessments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopGetReviewerAssessmentsRequestToJSON(requestParameters['modWorkshopGetReviewerAssessmentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopGetReviewerAssessments200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves all the assessments reviewed by the given user.
     * Retrieves all the assessments reviewed by the given user.
     */
    async modWorkshopGetReviewerAssessments(requestParameters: ModWorkshopGetReviewerAssessmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopGetReviewerAssessments200Response> {
        const response = await this.modWorkshopGetReviewerAssessmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the given submission.
     * Retrieves the given submission.
     */
    async modWorkshopGetSubmissionRaw(requestParameters: ModWorkshopGetSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopGetSubmission200Response>> {
        if (requestParameters['modWorkshopGetSubmissionRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopGetSubmissionRequest',
                'Required parameter "modWorkshopGetSubmissionRequest" was null or undefined when calling modWorkshopGetSubmission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_get_submission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopGetSubmissionRequestToJSON(requestParameters['modWorkshopGetSubmissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopGetSubmission200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the given submission.
     * Retrieves the given submission.
     */
    async modWorkshopGetSubmission(requestParameters: ModWorkshopGetSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopGetSubmission200Response> {
        const response = await this.modWorkshopGetSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the assessments of the given submission.
     * Retrieves all the assessments of the given submission.
     */
    async modWorkshopGetSubmissionAssessmentsRaw(requestParameters: ModWorkshopGetSubmissionAssessmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopGetReviewerAssessments200Response>> {
        if (requestParameters['modWorkshopGetSubmissionRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopGetSubmissionRequest',
                'Required parameter "modWorkshopGetSubmissionRequest" was null or undefined when calling modWorkshopGetSubmissionAssessments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_get_submission_assessments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopGetSubmissionRequestToJSON(requestParameters['modWorkshopGetSubmissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopGetReviewerAssessments200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves all the assessments of the given submission.
     * Retrieves all the assessments of the given submission.
     */
    async modWorkshopGetSubmissionAssessments(requestParameters: ModWorkshopGetSubmissionAssessmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopGetReviewerAssessments200Response> {
        const response = await this.modWorkshopGetSubmissionAssessmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     */
    async modWorkshopGetSubmissionsRaw(requestParameters: ModWorkshopGetSubmissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopGetSubmissions200Response>> {
        if (requestParameters['modWorkshopGetSubmissionsRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopGetSubmissionsRequest',
                'Required parameter "modWorkshopGetSubmissionsRequest" was null or undefined when calling modWorkshopGetSubmissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_get_submissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopGetSubmissionsRequestToJSON(requestParameters['modWorkshopGetSubmissionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopGetSubmissions200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     * Retrieves all the workshop submissions or the one done by the given user (except example submissions).
     */
    async modWorkshopGetSubmissions(requestParameters: ModWorkshopGetSubmissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopGetSubmissions200Response> {
        const response = await this.modWorkshopGetSubmissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the planner information for the given user.
     * Return the planner information for the given user.
     */
    async modWorkshopGetUserPlanRaw(requestParameters: ModWorkshopGetUserPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopGetUserPlan200Response>> {
        if (requestParameters['modWorkshopGetUserPlanRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopGetUserPlanRequest',
                'Required parameter "modWorkshopGetUserPlanRequest" was null or undefined when calling modWorkshopGetUserPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_get_user_plan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopGetUserPlanRequestToJSON(requestParameters['modWorkshopGetUserPlanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopGetUserPlan200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the planner information for the given user.
     * Return the planner information for the given user.
     */
    async modWorkshopGetUserPlan(requestParameters: ModWorkshopGetUserPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopGetUserPlan200Response> {
        const response = await this.modWorkshopGetUserPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return access information for a given workshop.
     * Return access information for a given workshop.
     */
    async modWorkshopGetWorkshopAccessInformationRaw(requestParameters: ModWorkshopGetWorkshopAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopGetWorkshopAccessInformation200Response>> {
        if (requestParameters['modWorkshopGetWorkshopAccessInformationRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopGetWorkshopAccessInformationRequest',
                'Required parameter "modWorkshopGetWorkshopAccessInformationRequest" was null or undefined when calling modWorkshopGetWorkshopAccessInformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_get_workshop_access_information`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopGetWorkshopAccessInformationRequestToJSON(requestParameters['modWorkshopGetWorkshopAccessInformationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopGetWorkshopAccessInformation200ResponseFromJSON(jsonValue));
    }

    /**
     * Return access information for a given workshop.
     * Return access information for a given workshop.
     */
    async modWorkshopGetWorkshopAccessInformation(requestParameters: ModWorkshopGetWorkshopAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopGetWorkshopAccessInformation200Response> {
        const response = await this.modWorkshopGetWorkshopAccessInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     */
    async modWorkshopGetWorkshopsByCoursesRaw(requestParameters: ModWorkshopGetWorkshopsByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopGetWorkshopsByCourses200Response>> {
        if (requestParameters['modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest',
                'Required parameter "modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest" was null or undefined when calling modWorkshopGetWorkshopsByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_get_workshops_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestToJSON(requestParameters['modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopGetWorkshopsByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     * Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
     */
    async modWorkshopGetWorkshopsByCourses(requestParameters: ModWorkshopGetWorkshopsByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopGetWorkshopsByCourses200Response> {
        const response = await this.modWorkshopGetWorkshopsByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add information to an allocated assessment.
     * Add information to an allocated assessment.
     */
    async modWorkshopUpdateAssessmentRaw(requestParameters: ModWorkshopUpdateAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopUpdateAssessment200Response>> {
        if (requestParameters['modWorkshopUpdateAssessmentRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopUpdateAssessmentRequest',
                'Required parameter "modWorkshopUpdateAssessmentRequest" was null or undefined when calling modWorkshopUpdateAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_update_assessment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopUpdateAssessmentRequestToJSON(requestParameters['modWorkshopUpdateAssessmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopUpdateAssessment200ResponseFromJSON(jsonValue));
    }

    /**
     * Add information to an allocated assessment.
     * Add information to an allocated assessment.
     */
    async modWorkshopUpdateAssessment(requestParameters: ModWorkshopUpdateAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopUpdateAssessment200Response> {
        const response = await this.modWorkshopUpdateAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the given submission.
     * Update the given submission.
     */
    async modWorkshopUpdateSubmissionRaw(requestParameters: ModWorkshopUpdateSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWorkshopUpdateSubmission200Response>> {
        if (requestParameters['modWorkshopUpdateSubmissionRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopUpdateSubmissionRequest',
                'Required parameter "modWorkshopUpdateSubmissionRequest" was null or undefined when calling modWorkshopUpdateSubmission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_update_submission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopUpdateSubmissionRequestToJSON(requestParameters['modWorkshopUpdateSubmissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWorkshopUpdateSubmission200ResponseFromJSON(jsonValue));
    }

    /**
     * Update the given submission.
     * Update the given submission.
     */
    async modWorkshopUpdateSubmission(requestParameters: ModWorkshopUpdateSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWorkshopUpdateSubmission200Response> {
        const response = await this.modWorkshopUpdateSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the submission viewed event.
     * Trigger the submission viewed event.
     */
    async modWorkshopViewSubmissionRaw(requestParameters: ModWorkshopViewSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modWorkshopGetSubmissionRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopGetSubmissionRequest',
                'Required parameter "modWorkshopGetSubmissionRequest" was null or undefined when calling modWorkshopViewSubmission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_view_submission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopGetSubmissionRequestToJSON(requestParameters['modWorkshopGetSubmissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the submission viewed event.
     * Trigger the submission viewed event.
     */
    async modWorkshopViewSubmission(requestParameters: ModWorkshopViewSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modWorkshopViewSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modWorkshopViewWorkshopRaw(requestParameters: ModWorkshopViewWorkshopOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modWorkshopViewWorkshopRequest'] == null) {
            throw new runtime.RequiredError(
                'modWorkshopViewWorkshopRequest',
                'Required parameter "modWorkshopViewWorkshopRequest" was null or undefined when calling modWorkshopViewWorkshop().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_workshop_view_workshop`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWorkshopViewWorkshopRequestToJSON(requestParameters['modWorkshopViewWorkshopRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modWorkshopViewWorkshop(requestParameters: ModWorkshopViewWorkshopOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modWorkshopViewWorkshopRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
