/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  ErrorResponse,
  ModAssignCopyPreviousAttemptRequest,
  ModAssignGetAssignments200Response,
  ModAssignGetAssignmentsRequest,
  ModAssignGetGrades200Response,
  ModAssignGetGradesRequest,
  ModAssignGetParticipant200Response,
  ModAssignGetParticipantRequest,
  ModAssignGetSubmissionStatus200Response,
  ModAssignGetSubmissionStatusRequest,
  ModAssignGetSubmissions200Response,
  ModAssignGetSubmissionsRequest,
  ModAssignGetUserFlags200Response,
  ModAssignGetUserFlagsRequest,
  ModAssignGetUserMappings200Response,
  ModAssignListParticipantsRequest,
  ModAssignLockSubmissionsRequest,
  ModAssignRevealIdentitiesRequest,
  ModAssignRevertSubmissionsToDraftRequest,
  ModAssignSaveGradeRequest,
  ModAssignSaveGradesRequest,
  ModAssignSaveSubmissionRequest,
  ModAssignSaveUserExtensionsRequest,
  ModAssignSetUserFlagsRequest,
  ModAssignStartSubmission200Response,
  ModAssignStartSubmissionRequest,
  ModAssignSubmitForGradingRequest,
  ModAssignSubmitGradingFormRequest,
  ModAssignViewAssignRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModAssignCopyPreviousAttemptRequestFromJSON,
    ModAssignCopyPreviousAttemptRequestToJSON,
    ModAssignGetAssignments200ResponseFromJSON,
    ModAssignGetAssignments200ResponseToJSON,
    ModAssignGetAssignmentsRequestFromJSON,
    ModAssignGetAssignmentsRequestToJSON,
    ModAssignGetGrades200ResponseFromJSON,
    ModAssignGetGrades200ResponseToJSON,
    ModAssignGetGradesRequestFromJSON,
    ModAssignGetGradesRequestToJSON,
    ModAssignGetParticipant200ResponseFromJSON,
    ModAssignGetParticipant200ResponseToJSON,
    ModAssignGetParticipantRequestFromJSON,
    ModAssignGetParticipantRequestToJSON,
    ModAssignGetSubmissionStatus200ResponseFromJSON,
    ModAssignGetSubmissionStatus200ResponseToJSON,
    ModAssignGetSubmissionStatusRequestFromJSON,
    ModAssignGetSubmissionStatusRequestToJSON,
    ModAssignGetSubmissions200ResponseFromJSON,
    ModAssignGetSubmissions200ResponseToJSON,
    ModAssignGetSubmissionsRequestFromJSON,
    ModAssignGetSubmissionsRequestToJSON,
    ModAssignGetUserFlags200ResponseFromJSON,
    ModAssignGetUserFlags200ResponseToJSON,
    ModAssignGetUserFlagsRequestFromJSON,
    ModAssignGetUserFlagsRequestToJSON,
    ModAssignGetUserMappings200ResponseFromJSON,
    ModAssignGetUserMappings200ResponseToJSON,
    ModAssignListParticipantsRequestFromJSON,
    ModAssignListParticipantsRequestToJSON,
    ModAssignLockSubmissionsRequestFromJSON,
    ModAssignLockSubmissionsRequestToJSON,
    ModAssignRevealIdentitiesRequestFromJSON,
    ModAssignRevealIdentitiesRequestToJSON,
    ModAssignRevertSubmissionsToDraftRequestFromJSON,
    ModAssignRevertSubmissionsToDraftRequestToJSON,
    ModAssignSaveGradeRequestFromJSON,
    ModAssignSaveGradeRequestToJSON,
    ModAssignSaveGradesRequestFromJSON,
    ModAssignSaveGradesRequestToJSON,
    ModAssignSaveSubmissionRequestFromJSON,
    ModAssignSaveSubmissionRequestToJSON,
    ModAssignSaveUserExtensionsRequestFromJSON,
    ModAssignSaveUserExtensionsRequestToJSON,
    ModAssignSetUserFlagsRequestFromJSON,
    ModAssignSetUserFlagsRequestToJSON,
    ModAssignStartSubmission200ResponseFromJSON,
    ModAssignStartSubmission200ResponseToJSON,
    ModAssignStartSubmissionRequestFromJSON,
    ModAssignStartSubmissionRequestToJSON,
    ModAssignSubmitForGradingRequestFromJSON,
    ModAssignSubmitForGradingRequestToJSON,
    ModAssignSubmitGradingFormRequestFromJSON,
    ModAssignSubmitGradingFormRequestToJSON,
    ModAssignViewAssignRequestFromJSON,
    ModAssignViewAssignRequestToJSON,
} from '../models/index';

export interface ModAssignCopyPreviousAttemptOperationRequest {
    modAssignCopyPreviousAttemptRequest: ModAssignCopyPreviousAttemptRequest;
}

export interface ModAssignGetAssignmentsOperationRequest {
    modAssignGetAssignmentsRequest: ModAssignGetAssignmentsRequest;
}

export interface ModAssignGetGradesOperationRequest {
    modAssignGetGradesRequest: ModAssignGetGradesRequest;
}

export interface ModAssignGetParticipantOperationRequest {
    modAssignGetParticipantRequest: ModAssignGetParticipantRequest;
}

export interface ModAssignGetSubmissionStatusOperationRequest {
    modAssignGetSubmissionStatusRequest: ModAssignGetSubmissionStatusRequest;
}

export interface ModAssignGetSubmissionsOperationRequest {
    modAssignGetSubmissionsRequest: ModAssignGetSubmissionsRequest;
}

export interface ModAssignGetUserFlagsOperationRequest {
    modAssignGetUserFlagsRequest: ModAssignGetUserFlagsRequest;
}

export interface ModAssignGetUserMappingsRequest {
    modAssignGetUserFlagsRequest: ModAssignGetUserFlagsRequest;
}

export interface ModAssignListParticipantsOperationRequest {
    modAssignListParticipantsRequest: ModAssignListParticipantsRequest;
}

export interface ModAssignLockSubmissionsOperationRequest {
    modAssignLockSubmissionsRequest: ModAssignLockSubmissionsRequest;
}

export interface ModAssignRevealIdentitiesOperationRequest {
    modAssignRevealIdentitiesRequest: ModAssignRevealIdentitiesRequest;
}

export interface ModAssignRevertSubmissionsToDraftOperationRequest {
    modAssignRevertSubmissionsToDraftRequest: ModAssignRevertSubmissionsToDraftRequest;
}

export interface ModAssignSaveGradeOperationRequest {
    modAssignSaveGradeRequest: ModAssignSaveGradeRequest;
}

export interface ModAssignSaveGradesOperationRequest {
    modAssignSaveGradesRequest: ModAssignSaveGradesRequest;
}

export interface ModAssignSaveSubmissionOperationRequest {
    modAssignSaveSubmissionRequest: ModAssignSaveSubmissionRequest;
}

export interface ModAssignSaveUserExtensionsOperationRequest {
    modAssignSaveUserExtensionsRequest: ModAssignSaveUserExtensionsRequest;
}

export interface ModAssignSetUserFlagsOperationRequest {
    modAssignSetUserFlagsRequest: ModAssignSetUserFlagsRequest;
}

export interface ModAssignStartSubmissionOperationRequest {
    modAssignStartSubmissionRequest: ModAssignStartSubmissionRequest;
}

export interface ModAssignSubmitForGradingOperationRequest {
    modAssignSubmitForGradingRequest: ModAssignSubmitForGradingRequest;
}

export interface ModAssignSubmitGradingFormOperationRequest {
    modAssignSubmitGradingFormRequest: ModAssignSubmitGradingFormRequest;
}

export interface ModAssignUnlockSubmissionsRequest {
    modAssignRevertSubmissionsToDraftRequest: ModAssignRevertSubmissionsToDraftRequest;
}

export interface ModAssignViewAssignOperationRequest {
    modAssignViewAssignRequest: ModAssignViewAssignRequest;
}

export interface ModAssignViewGradingTableRequest {
    modAssignViewAssignRequest: ModAssignViewAssignRequest;
}

export interface ModAssignViewSubmissionStatusRequest {
    modAssignViewAssignRequest: ModAssignViewAssignRequest;
}

/**
 * 
 */
export class ModAssignApi extends runtime.BaseAPI {

    /**
     * Copy a students previous attempt to a new attempt.
     * Copy a students previous attempt to a new attempt.
     */
    async modAssignCopyPreviousAttemptRaw(requestParameters: ModAssignCopyPreviousAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modAssignCopyPreviousAttemptRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignCopyPreviousAttemptRequest',
                'Required parameter "modAssignCopyPreviousAttemptRequest" was null or undefined when calling modAssignCopyPreviousAttempt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_copy_previous_attempt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignCopyPreviousAttemptRequestToJSON(requestParameters['modAssignCopyPreviousAttemptRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Copy a students previous attempt to a new attempt.
     * Copy a students previous attempt to a new attempt.
     */
    async modAssignCopyPreviousAttempt(requestParameters: ModAssignCopyPreviousAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modAssignCopyPreviousAttemptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the courses and assignments for the users capability
     * Returns the courses and assignments for the users capability
     */
    async modAssignGetAssignmentsRaw(requestParameters: ModAssignGetAssignmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModAssignGetAssignments200Response>> {
        if (requestParameters['modAssignGetAssignmentsRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignGetAssignmentsRequest',
                'Required parameter "modAssignGetAssignmentsRequest" was null or undefined when calling modAssignGetAssignments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_get_assignments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignGetAssignmentsRequestToJSON(requestParameters['modAssignGetAssignmentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModAssignGetAssignments200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the courses and assignments for the users capability
     * Returns the courses and assignments for the users capability
     */
    async modAssignGetAssignments(requestParameters: ModAssignGetAssignmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModAssignGetAssignments200Response> {
        const response = await this.modAssignGetAssignmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns grades from the assignment
     * Returns grades from the assignment
     */
    async modAssignGetGradesRaw(requestParameters: ModAssignGetGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModAssignGetGrades200Response>> {
        if (requestParameters['modAssignGetGradesRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignGetGradesRequest',
                'Required parameter "modAssignGetGradesRequest" was null or undefined when calling modAssignGetGrades().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_get_grades`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignGetGradesRequestToJSON(requestParameters['modAssignGetGradesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModAssignGetGrades200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns grades from the assignment
     * Returns grades from the assignment
     */
    async modAssignGetGrades(requestParameters: ModAssignGetGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModAssignGetGrades200Response> {
        const response = await this.modAssignGetGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a participant for an assignment, with some summary info about their submissions.
     * Get a participant for an assignment, with some summary info about their submissions.
     */
    async modAssignGetParticipantRaw(requestParameters: ModAssignGetParticipantOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModAssignGetParticipant200Response>> {
        if (requestParameters['modAssignGetParticipantRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignGetParticipantRequest',
                'Required parameter "modAssignGetParticipantRequest" was null or undefined when calling modAssignGetParticipant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_get_participant`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignGetParticipantRequestToJSON(requestParameters['modAssignGetParticipantRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModAssignGetParticipant200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a participant for an assignment, with some summary info about their submissions.
     * Get a participant for an assignment, with some summary info about their submissions.
     */
    async modAssignGetParticipant(requestParameters: ModAssignGetParticipantOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModAssignGetParticipant200Response> {
        const response = await this.modAssignGetParticipantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns information about an assignment submission status for a given user.
     * Returns information about an assignment submission status for a given user.
     */
    async modAssignGetSubmissionStatusRaw(requestParameters: ModAssignGetSubmissionStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModAssignGetSubmissionStatus200Response>> {
        if (requestParameters['modAssignGetSubmissionStatusRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignGetSubmissionStatusRequest',
                'Required parameter "modAssignGetSubmissionStatusRequest" was null or undefined when calling modAssignGetSubmissionStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_get_submission_status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignGetSubmissionStatusRequestToJSON(requestParameters['modAssignGetSubmissionStatusRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModAssignGetSubmissionStatus200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns information about an assignment submission status for a given user.
     * Returns information about an assignment submission status for a given user.
     */
    async modAssignGetSubmissionStatus(requestParameters: ModAssignGetSubmissionStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModAssignGetSubmissionStatus200Response> {
        const response = await this.modAssignGetSubmissionStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the submissions for assignments
     * Returns the submissions for assignments
     */
    async modAssignGetSubmissionsRaw(requestParameters: ModAssignGetSubmissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModAssignGetSubmissions200Response>> {
        if (requestParameters['modAssignGetSubmissionsRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignGetSubmissionsRequest',
                'Required parameter "modAssignGetSubmissionsRequest" was null or undefined when calling modAssignGetSubmissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_get_submissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignGetSubmissionsRequestToJSON(requestParameters['modAssignGetSubmissionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModAssignGetSubmissions200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the submissions for assignments
     * Returns the submissions for assignments
     */
    async modAssignGetSubmissions(requestParameters: ModAssignGetSubmissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModAssignGetSubmissions200Response> {
        const response = await this.modAssignGetSubmissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the user flags for assignments
     * Returns the user flags for assignments
     */
    async modAssignGetUserFlagsRaw(requestParameters: ModAssignGetUserFlagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModAssignGetUserFlags200Response>> {
        if (requestParameters['modAssignGetUserFlagsRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignGetUserFlagsRequest',
                'Required parameter "modAssignGetUserFlagsRequest" was null or undefined when calling modAssignGetUserFlags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_get_user_flags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignGetUserFlagsRequestToJSON(requestParameters['modAssignGetUserFlagsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModAssignGetUserFlags200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the user flags for assignments
     * Returns the user flags for assignments
     */
    async modAssignGetUserFlags(requestParameters: ModAssignGetUserFlagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModAssignGetUserFlags200Response> {
        const response = await this.modAssignGetUserFlagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the blind marking mappings for assignments
     * Returns the blind marking mappings for assignments
     */
    async modAssignGetUserMappingsRaw(requestParameters: ModAssignGetUserMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModAssignGetUserMappings200Response>> {
        if (requestParameters['modAssignGetUserFlagsRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignGetUserFlagsRequest',
                'Required parameter "modAssignGetUserFlagsRequest" was null or undefined when calling modAssignGetUserMappings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_get_user_mappings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignGetUserFlagsRequestToJSON(requestParameters['modAssignGetUserFlagsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModAssignGetUserMappings200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the blind marking mappings for assignments
     * Returns the blind marking mappings for assignments
     */
    async modAssignGetUserMappings(requestParameters: ModAssignGetUserMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModAssignGetUserMappings200Response> {
        const response = await this.modAssignGetUserMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the participants for a single assignment, with some summary info about their submissions.
     * List the participants for a single assignment, with some summary info about their submissions.
     */
    async modAssignListParticipantsRaw(requestParameters: ModAssignListParticipantsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modAssignListParticipantsRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignListParticipantsRequest',
                'Required parameter "modAssignListParticipantsRequest" was null or undefined when calling modAssignListParticipants().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_list_participants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignListParticipantsRequestToJSON(requestParameters['modAssignListParticipantsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List the participants for a single assignment, with some summary info about their submissions.
     * List the participants for a single assignment, with some summary info about their submissions.
     */
    async modAssignListParticipants(requestParameters: ModAssignListParticipantsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modAssignListParticipantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prevent students from making changes to a list of submissions
     * Prevent students from making changes to a list of submissions
     */
    async modAssignLockSubmissionsRaw(requestParameters: ModAssignLockSubmissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modAssignLockSubmissionsRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignLockSubmissionsRequest',
                'Required parameter "modAssignLockSubmissionsRequest" was null or undefined when calling modAssignLockSubmissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_lock_submissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignLockSubmissionsRequestToJSON(requestParameters['modAssignLockSubmissionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Prevent students from making changes to a list of submissions
     * Prevent students from making changes to a list of submissions
     */
    async modAssignLockSubmissions(requestParameters: ModAssignLockSubmissionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modAssignLockSubmissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reveal the identities for a blind marking assignment
     * Reveal the identities for a blind marking assignment
     */
    async modAssignRevealIdentitiesRaw(requestParameters: ModAssignRevealIdentitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modAssignRevealIdentitiesRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignRevealIdentitiesRequest',
                'Required parameter "modAssignRevealIdentitiesRequest" was null or undefined when calling modAssignRevealIdentities().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_reveal_identities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignRevealIdentitiesRequestToJSON(requestParameters['modAssignRevealIdentitiesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Reveal the identities for a blind marking assignment
     * Reveal the identities for a blind marking assignment
     */
    async modAssignRevealIdentities(requestParameters: ModAssignRevealIdentitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modAssignRevealIdentitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reverts the list of submissions to draft status
     * Reverts the list of submissions to draft status
     */
    async modAssignRevertSubmissionsToDraftRaw(requestParameters: ModAssignRevertSubmissionsToDraftOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modAssignRevertSubmissionsToDraftRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignRevertSubmissionsToDraftRequest',
                'Required parameter "modAssignRevertSubmissionsToDraftRequest" was null or undefined when calling modAssignRevertSubmissionsToDraft().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_revert_submissions_to_draft`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignRevertSubmissionsToDraftRequestToJSON(requestParameters['modAssignRevertSubmissionsToDraftRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Reverts the list of submissions to draft status
     * Reverts the list of submissions to draft status
     */
    async modAssignRevertSubmissionsToDraft(requestParameters: ModAssignRevertSubmissionsToDraftOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modAssignRevertSubmissionsToDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save a grade update for a single student.
     * Save a grade update for a single student.
     */
    async modAssignSaveGradeRaw(requestParameters: ModAssignSaveGradeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modAssignSaveGradeRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignSaveGradeRequest',
                'Required parameter "modAssignSaveGradeRequest" was null or undefined when calling modAssignSaveGrade().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_save_grade`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignSaveGradeRequestToJSON(requestParameters['modAssignSaveGradeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Save a grade update for a single student.
     * Save a grade update for a single student.
     */
    async modAssignSaveGrade(requestParameters: ModAssignSaveGradeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modAssignSaveGradeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save multiple grade updates for an assignment.
     * Save multiple grade updates for an assignment.
     */
    async modAssignSaveGradesRaw(requestParameters: ModAssignSaveGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modAssignSaveGradesRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignSaveGradesRequest',
                'Required parameter "modAssignSaveGradesRequest" was null or undefined when calling modAssignSaveGrades().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_save_grades`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignSaveGradesRequestToJSON(requestParameters['modAssignSaveGradesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Save multiple grade updates for an assignment.
     * Save multiple grade updates for an assignment.
     */
    async modAssignSaveGrades(requestParameters: ModAssignSaveGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modAssignSaveGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the current students submission
     * Update the current students submission
     */
    async modAssignSaveSubmissionRaw(requestParameters: ModAssignSaveSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modAssignSaveSubmissionRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignSaveSubmissionRequest',
                'Required parameter "modAssignSaveSubmissionRequest" was null or undefined when calling modAssignSaveSubmission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_save_submission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignSaveSubmissionRequestToJSON(requestParameters['modAssignSaveSubmissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update the current students submission
     * Update the current students submission
     */
    async modAssignSaveSubmission(requestParameters: ModAssignSaveSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modAssignSaveSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save a list of assignment extensions
     * Save a list of assignment extensions
     */
    async modAssignSaveUserExtensionsRaw(requestParameters: ModAssignSaveUserExtensionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modAssignSaveUserExtensionsRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignSaveUserExtensionsRequest',
                'Required parameter "modAssignSaveUserExtensionsRequest" was null or undefined when calling modAssignSaveUserExtensions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_save_user_extensions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignSaveUserExtensionsRequestToJSON(requestParameters['modAssignSaveUserExtensionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Save a list of assignment extensions
     * Save a list of assignment extensions
     */
    async modAssignSaveUserExtensions(requestParameters: ModAssignSaveUserExtensionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modAssignSaveUserExtensionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates or updates user flags
     * Creates or updates user flags
     */
    async modAssignSetUserFlagsRaw(requestParameters: ModAssignSetUserFlagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modAssignSetUserFlagsRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignSetUserFlagsRequest',
                'Required parameter "modAssignSetUserFlagsRequest" was null or undefined when calling modAssignSetUserFlags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_set_user_flags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignSetUserFlagsRequestToJSON(requestParameters['modAssignSetUserFlagsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates or updates user flags
     * Creates or updates user flags
     */
    async modAssignSetUserFlags(requestParameters: ModAssignSetUserFlagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modAssignSetUserFlagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start a submission for user if assignment has a time limit.
     * Start a submission for user if assignment has a time limit.
     */
    async modAssignStartSubmissionRaw(requestParameters: ModAssignStartSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModAssignStartSubmission200Response>> {
        if (requestParameters['modAssignStartSubmissionRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignStartSubmissionRequest',
                'Required parameter "modAssignStartSubmissionRequest" was null or undefined when calling modAssignStartSubmission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_start_submission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignStartSubmissionRequestToJSON(requestParameters['modAssignStartSubmissionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModAssignStartSubmission200ResponseFromJSON(jsonValue));
    }

    /**
     * Start a submission for user if assignment has a time limit.
     * Start a submission for user if assignment has a time limit.
     */
    async modAssignStartSubmission(requestParameters: ModAssignStartSubmissionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModAssignStartSubmission200Response> {
        const response = await this.modAssignStartSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit the current students assignment for grading
     * Submit the current students assignment for grading
     */
    async modAssignSubmitForGradingRaw(requestParameters: ModAssignSubmitForGradingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modAssignSubmitForGradingRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignSubmitForGradingRequest',
                'Required parameter "modAssignSubmitForGradingRequest" was null or undefined when calling modAssignSubmitForGrading().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_submit_for_grading`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignSubmitForGradingRequestToJSON(requestParameters['modAssignSubmitForGradingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Submit the current students assignment for grading
     * Submit the current students assignment for grading
     */
    async modAssignSubmitForGrading(requestParameters: ModAssignSubmitForGradingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modAssignSubmitForGradingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit the grading form data via ajax
     * Submit the grading form data via ajax
     */
    async modAssignSubmitGradingFormRaw(requestParameters: ModAssignSubmitGradingFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modAssignSubmitGradingFormRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignSubmitGradingFormRequest',
                'Required parameter "modAssignSubmitGradingFormRequest" was null or undefined when calling modAssignSubmitGradingForm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_submit_grading_form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignSubmitGradingFormRequestToJSON(requestParameters['modAssignSubmitGradingFormRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Submit the grading form data via ajax
     * Submit the grading form data via ajax
     */
    async modAssignSubmitGradingForm(requestParameters: ModAssignSubmitGradingFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modAssignSubmitGradingFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allow students to make changes to a list of submissions
     * Allow students to make changes to a list of submissions
     */
    async modAssignUnlockSubmissionsRaw(requestParameters: ModAssignUnlockSubmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modAssignRevertSubmissionsToDraftRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignRevertSubmissionsToDraftRequest',
                'Required parameter "modAssignRevertSubmissionsToDraftRequest" was null or undefined when calling modAssignUnlockSubmissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_unlock_submissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignRevertSubmissionsToDraftRequestToJSON(requestParameters['modAssignRevertSubmissionsToDraftRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Allow students to make changes to a list of submissions
     * Allow students to make changes to a list of submissions
     */
    async modAssignUnlockSubmissions(requestParameters: ModAssignUnlockSubmissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modAssignUnlockSubmissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the module completion status.
     * Update the module completion status.
     */
    async modAssignViewAssignRaw(requestParameters: ModAssignViewAssignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modAssignViewAssignRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignViewAssignRequest',
                'Required parameter "modAssignViewAssignRequest" was null or undefined when calling modAssignViewAssign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_view_assign`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignViewAssignRequestToJSON(requestParameters['modAssignViewAssignRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Update the module completion status.
     * Update the module completion status.
     */
    async modAssignViewAssign(requestParameters: ModAssignViewAssignOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modAssignViewAssignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the grading_table_viewed event.
     * Trigger the grading_table_viewed event.
     */
    async modAssignViewGradingTableRaw(requestParameters: ModAssignViewGradingTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modAssignViewAssignRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignViewAssignRequest',
                'Required parameter "modAssignViewAssignRequest" was null or undefined when calling modAssignViewGradingTable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_view_grading_table`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignViewAssignRequestToJSON(requestParameters['modAssignViewAssignRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the grading_table_viewed event.
     * Trigger the grading_table_viewed event.
     */
    async modAssignViewGradingTable(requestParameters: ModAssignViewGradingTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modAssignViewGradingTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the submission status viewed event.
     * Trigger the submission status viewed event.
     */
    async modAssignViewSubmissionStatusRaw(requestParameters: ModAssignViewSubmissionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modAssignViewAssignRequest'] == null) {
            throw new runtime.RequiredError(
                'modAssignViewAssignRequest',
                'Required parameter "modAssignViewAssignRequest" was null or undefined when calling modAssignViewSubmissionStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_assign_view_submission_status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModAssignViewAssignRequestToJSON(requestParameters['modAssignViewAssignRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the submission status viewed event.
     * Trigger the submission status viewed event.
     */
    async modAssignViewSubmissionStatus(requestParameters: ModAssignViewSubmissionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modAssignViewSubmissionStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
