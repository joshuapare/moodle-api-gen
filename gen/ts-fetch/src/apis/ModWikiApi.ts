/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreH5pGetTrustedH5pFile200Response,
  ErrorResponse,
  ModWikiEditPage200Response,
  ModWikiEditPageRequest,
  ModWikiGetPageContents200Response,
  ModWikiGetPageContentsRequest,
  ModWikiGetPageForEditing200Response,
  ModWikiGetPageForEditingRequest,
  ModWikiGetSubwikiFilesRequest,
  ModWikiGetSubwikiPages200Response,
  ModWikiGetSubwikiPagesRequest,
  ModWikiGetSubwikis200Response,
  ModWikiGetSubwikisRequest,
  ModWikiGetWikisByCourses200Response,
  ModWikiGetWikisByCoursesRequest,
  ModWikiNewPage200Response,
  ModWikiNewPageRequest,
  ModWikiViewPage200Response,
  ModWikiViewPageRequest,
  ModWikiViewWiki200Response,
} from '../models/index';
import {
    CoreH5pGetTrustedH5pFile200ResponseFromJSON,
    CoreH5pGetTrustedH5pFile200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModWikiEditPage200ResponseFromJSON,
    ModWikiEditPage200ResponseToJSON,
    ModWikiEditPageRequestFromJSON,
    ModWikiEditPageRequestToJSON,
    ModWikiGetPageContents200ResponseFromJSON,
    ModWikiGetPageContents200ResponseToJSON,
    ModWikiGetPageContentsRequestFromJSON,
    ModWikiGetPageContentsRequestToJSON,
    ModWikiGetPageForEditing200ResponseFromJSON,
    ModWikiGetPageForEditing200ResponseToJSON,
    ModWikiGetPageForEditingRequestFromJSON,
    ModWikiGetPageForEditingRequestToJSON,
    ModWikiGetSubwikiFilesRequestFromJSON,
    ModWikiGetSubwikiFilesRequestToJSON,
    ModWikiGetSubwikiPages200ResponseFromJSON,
    ModWikiGetSubwikiPages200ResponseToJSON,
    ModWikiGetSubwikiPagesRequestFromJSON,
    ModWikiGetSubwikiPagesRequestToJSON,
    ModWikiGetSubwikis200ResponseFromJSON,
    ModWikiGetSubwikis200ResponseToJSON,
    ModWikiGetSubwikisRequestFromJSON,
    ModWikiGetSubwikisRequestToJSON,
    ModWikiGetWikisByCourses200ResponseFromJSON,
    ModWikiGetWikisByCourses200ResponseToJSON,
    ModWikiGetWikisByCoursesRequestFromJSON,
    ModWikiGetWikisByCoursesRequestToJSON,
    ModWikiNewPage200ResponseFromJSON,
    ModWikiNewPage200ResponseToJSON,
    ModWikiNewPageRequestFromJSON,
    ModWikiNewPageRequestToJSON,
    ModWikiViewPage200ResponseFromJSON,
    ModWikiViewPage200ResponseToJSON,
    ModWikiViewPageRequestFromJSON,
    ModWikiViewPageRequestToJSON,
    ModWikiViewWiki200ResponseFromJSON,
    ModWikiViewWiki200ResponseToJSON,
} from '../models/index';

export interface ModWikiEditPageOperationRequest {
    modWikiEditPageRequest: ModWikiEditPageRequest;
}

export interface ModWikiGetPageContentsOperationRequest {
    modWikiGetPageContentsRequest: ModWikiGetPageContentsRequest;
}

export interface ModWikiGetPageForEditingOperationRequest {
    modWikiGetPageForEditingRequest: ModWikiGetPageForEditingRequest;
}

export interface ModWikiGetSubwikiFilesOperationRequest {
    modWikiGetSubwikiFilesRequest: ModWikiGetSubwikiFilesRequest;
}

export interface ModWikiGetSubwikiPagesOperationRequest {
    modWikiGetSubwikiPagesRequest: ModWikiGetSubwikiPagesRequest;
}

export interface ModWikiGetSubwikisOperationRequest {
    modWikiGetSubwikisRequest: ModWikiGetSubwikisRequest;
}

export interface ModWikiGetWikisByCoursesOperationRequest {
    modWikiGetWikisByCoursesRequest: ModWikiGetWikisByCoursesRequest;
}

export interface ModWikiNewPageOperationRequest {
    modWikiNewPageRequest: ModWikiNewPageRequest;
}

export interface ModWikiViewPageOperationRequest {
    modWikiViewPageRequest: ModWikiViewPageRequest;
}

export interface ModWikiViewWikiRequest {
    modWikiGetSubwikisRequest: ModWikiGetSubwikisRequest;
}

/**
 * 
 */
export class ModWikiApi extends runtime.BaseAPI {

    /**
     * Save the contents of a page.
     * Save the contents of a page.
     */
    async modWikiEditPageRaw(requestParameters: ModWikiEditPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWikiEditPage200Response>> {
        if (requestParameters['modWikiEditPageRequest'] == null) {
            throw new runtime.RequiredError(
                'modWikiEditPageRequest',
                'Required parameter "modWikiEditPageRequest" was null or undefined when calling modWikiEditPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_wiki_edit_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWikiEditPageRequestToJSON(requestParameters['modWikiEditPageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWikiEditPage200ResponseFromJSON(jsonValue));
    }

    /**
     * Save the contents of a page.
     * Save the contents of a page.
     */
    async modWikiEditPage(requestParameters: ModWikiEditPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWikiEditPage200Response> {
        const response = await this.modWikiEditPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the contents of a page.
     * Returns the contents of a page.
     */
    async modWikiGetPageContentsRaw(requestParameters: ModWikiGetPageContentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWikiGetPageContents200Response>> {
        if (requestParameters['modWikiGetPageContentsRequest'] == null) {
            throw new runtime.RequiredError(
                'modWikiGetPageContentsRequest',
                'Required parameter "modWikiGetPageContentsRequest" was null or undefined when calling modWikiGetPageContents().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_wiki_get_page_contents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWikiGetPageContentsRequestToJSON(requestParameters['modWikiGetPageContentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWikiGetPageContents200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the contents of a page.
     * Returns the contents of a page.
     */
    async modWikiGetPageContents(requestParameters: ModWikiGetPageContentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWikiGetPageContents200Response> {
        const response = await this.modWikiGetPageContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Locks and retrieves info of page-section to be edited.
     * Locks and retrieves info of page-section to be edited.
     */
    async modWikiGetPageForEditingRaw(requestParameters: ModWikiGetPageForEditingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWikiGetPageForEditing200Response>> {
        if (requestParameters['modWikiGetPageForEditingRequest'] == null) {
            throw new runtime.RequiredError(
                'modWikiGetPageForEditingRequest',
                'Required parameter "modWikiGetPageForEditingRequest" was null or undefined when calling modWikiGetPageForEditing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_wiki_get_page_for_editing`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWikiGetPageForEditingRequestToJSON(requestParameters['modWikiGetPageForEditingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWikiGetPageForEditing200ResponseFromJSON(jsonValue));
    }

    /**
     * Locks and retrieves info of page-section to be edited.
     * Locks and retrieves info of page-section to be edited.
     */
    async modWikiGetPageForEditing(requestParameters: ModWikiGetPageForEditingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWikiGetPageForEditing200Response> {
        const response = await this.modWikiGetPageForEditingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the list of files for a specific subwiki.
     * Returns the list of files for a specific subwiki.
     */
    async modWikiGetSubwikiFilesRaw(requestParameters: ModWikiGetSubwikiFilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreH5pGetTrustedH5pFile200Response>> {
        if (requestParameters['modWikiGetSubwikiFilesRequest'] == null) {
            throw new runtime.RequiredError(
                'modWikiGetSubwikiFilesRequest',
                'Required parameter "modWikiGetSubwikiFilesRequest" was null or undefined when calling modWikiGetSubwikiFiles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_wiki_get_subwiki_files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWikiGetSubwikiFilesRequestToJSON(requestParameters['modWikiGetSubwikiFilesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreH5pGetTrustedH5pFile200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the list of files for a specific subwiki.
     * Returns the list of files for a specific subwiki.
     */
    async modWikiGetSubwikiFiles(requestParameters: ModWikiGetSubwikiFilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreH5pGetTrustedH5pFile200Response> {
        const response = await this.modWikiGetSubwikiFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the list of pages for a specific subwiki.
     * Returns the list of pages for a specific subwiki.
     */
    async modWikiGetSubwikiPagesRaw(requestParameters: ModWikiGetSubwikiPagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWikiGetSubwikiPages200Response>> {
        if (requestParameters['modWikiGetSubwikiPagesRequest'] == null) {
            throw new runtime.RequiredError(
                'modWikiGetSubwikiPagesRequest',
                'Required parameter "modWikiGetSubwikiPagesRequest" was null or undefined when calling modWikiGetSubwikiPages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_wiki_get_subwiki_pages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWikiGetSubwikiPagesRequestToJSON(requestParameters['modWikiGetSubwikiPagesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWikiGetSubwikiPages200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the list of pages for a specific subwiki.
     * Returns the list of pages for a specific subwiki.
     */
    async modWikiGetSubwikiPages(requestParameters: ModWikiGetSubwikiPagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWikiGetSubwikiPages200Response> {
        const response = await this.modWikiGetSubwikiPagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the list of subwikis the user can see in a specific wiki.
     * Returns the list of subwikis the user can see in a specific wiki.
     */
    async modWikiGetSubwikisRaw(requestParameters: ModWikiGetSubwikisOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWikiGetSubwikis200Response>> {
        if (requestParameters['modWikiGetSubwikisRequest'] == null) {
            throw new runtime.RequiredError(
                'modWikiGetSubwikisRequest',
                'Required parameter "modWikiGetSubwikisRequest" was null or undefined when calling modWikiGetSubwikis().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_wiki_get_subwikis`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWikiGetSubwikisRequestToJSON(requestParameters['modWikiGetSubwikisRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWikiGetSubwikis200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the list of subwikis the user can see in a specific wiki.
     * Returns the list of subwikis the user can see in a specific wiki.
     */
    async modWikiGetSubwikis(requestParameters: ModWikiGetSubwikisOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWikiGetSubwikis200Response> {
        const response = await this.modWikiGetSubwikisRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
     * Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
     */
    async modWikiGetWikisByCoursesRaw(requestParameters: ModWikiGetWikisByCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWikiGetWikisByCourses200Response>> {
        if (requestParameters['modWikiGetWikisByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modWikiGetWikisByCoursesRequest',
                'Required parameter "modWikiGetWikisByCoursesRequest" was null or undefined when calling modWikiGetWikisByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_wiki_get_wikis_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWikiGetWikisByCoursesRequestToJSON(requestParameters['modWikiGetWikisByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWikiGetWikisByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
     * Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
     */
    async modWikiGetWikisByCourses(requestParameters: ModWikiGetWikisByCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWikiGetWikisByCourses200Response> {
        const response = await this.modWikiGetWikisByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new page in a subwiki.
     * Create a new page in a subwiki.
     */
    async modWikiNewPageRaw(requestParameters: ModWikiNewPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWikiNewPage200Response>> {
        if (requestParameters['modWikiNewPageRequest'] == null) {
            throw new runtime.RequiredError(
                'modWikiNewPageRequest',
                'Required parameter "modWikiNewPageRequest" was null or undefined when calling modWikiNewPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_wiki_new_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWikiNewPageRequestToJSON(requestParameters['modWikiNewPageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWikiNewPage200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new page in a subwiki.
     * Create a new page in a subwiki.
     */
    async modWikiNewPage(requestParameters: ModWikiNewPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWikiNewPage200Response> {
        const response = await this.modWikiNewPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the page viewed event and update the module completion status.
     * Trigger the page viewed event and update the module completion status.
     */
    async modWikiViewPageRaw(requestParameters: ModWikiViewPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWikiViewPage200Response>> {
        if (requestParameters['modWikiViewPageRequest'] == null) {
            throw new runtime.RequiredError(
                'modWikiViewPageRequest',
                'Required parameter "modWikiViewPageRequest" was null or undefined when calling modWikiViewPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_wiki_view_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWikiViewPageRequestToJSON(requestParameters['modWikiViewPageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWikiViewPage200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the page viewed event and update the module completion status.
     * Trigger the page viewed event and update the module completion status.
     */
    async modWikiViewPage(requestParameters: ModWikiViewPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWikiViewPage200Response> {
        const response = await this.modWikiViewPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modWikiViewWikiRaw(requestParameters: ModWikiViewWikiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModWikiViewWiki200Response>> {
        if (requestParameters['modWikiGetSubwikisRequest'] == null) {
            throw new runtime.RequiredError(
                'modWikiGetSubwikisRequest',
                'Required parameter "modWikiGetSubwikisRequest" was null or undefined when calling modWikiViewWiki().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_wiki_view_wiki`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModWikiGetSubwikisRequestToJSON(requestParameters['modWikiGetSubwikisRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModWikiViewWiki200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modWikiViewWiki(requestParameters: ModWikiViewWikiRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModWikiViewWiki200Response> {
        const response = await this.modWikiViewWikiRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
