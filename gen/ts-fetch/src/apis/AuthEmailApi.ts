/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthEmailGetSignupSettings200Response,
  AuthEmailSignupUser200Response,
  AuthEmailSignupUserRequest,
  ErrorResponse,
} from '../models/index';
import {
    AuthEmailGetSignupSettings200ResponseFromJSON,
    AuthEmailGetSignupSettings200ResponseToJSON,
    AuthEmailSignupUser200ResponseFromJSON,
    AuthEmailSignupUser200ResponseToJSON,
    AuthEmailSignupUserRequestFromJSON,
    AuthEmailSignupUserRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface AuthEmailSignupUserOperationRequest {
    authEmailSignupUserRequest: AuthEmailSignupUserRequest;
}

/**
 * 
 */
export class AuthEmailApi extends runtime.BaseAPI {

    /**
     * Get the signup required settings and profile fields.
     * Get the signup required settings and profile fields.
     */
    async authEmailGetSignupSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthEmailGetSignupSettings200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/auth_email_get_signup_settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthEmailGetSignupSettings200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the signup required settings and profile fields.
     * Get the signup required settings and profile fields.
     */
    async authEmailGetSignupSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthEmailGetSignupSettings200Response> {
        const response = await this.authEmailGetSignupSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Adds a new user (pendingto be confirmed) in the site.
     * Adds a new user (pendingto be confirmed) in the site.
     */
    async authEmailSignupUserRaw(requestParameters: AuthEmailSignupUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthEmailSignupUser200Response>> {
        if (requestParameters['authEmailSignupUserRequest'] == null) {
            throw new runtime.RequiredError(
                'authEmailSignupUserRequest',
                'Required parameter "authEmailSignupUserRequest" was null or undefined when calling authEmailSignupUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/auth_email_signup_user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthEmailSignupUserRequestToJSON(requestParameters['authEmailSignupUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthEmailSignupUser200ResponseFromJSON(jsonValue));
    }

    /**
     * Adds a new user (pendingto be confirmed) in the site.
     * Adds a new user (pendingto be confirmed) in the site.
     */
    async authEmailSignupUser(requestParameters: AuthEmailSignupUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthEmailSignupUser200Response> {
        const response = await this.authEmailSignupUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
