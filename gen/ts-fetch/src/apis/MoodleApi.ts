/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreAdminSetBlockProtectionRequest,
  CoreAdminSetPluginOrderRequest,
  CoreAdminSetPluginStateRequest,
  CoreAuthConfirmUser200Response,
  CoreAuthConfirmUserRequest,
  CoreAuthIsAgeDigitalConsentVerificationEnabled200Response,
  CoreAuthIsMinor200Response,
  CoreAuthIsMinorRequest,
  CoreAuthRequestPasswordReset200Response,
  CoreAuthRequestPasswordResetRequest,
  CoreAuthResendConfirmationEmail200Response,
  CoreAuthResendConfirmationEmailRequest,
  CoreBackupGetAsyncBackupLinksBackup200Response,
  CoreBackupGetAsyncBackupLinksBackupRequest,
  CoreBackupGetAsyncBackupLinksRestore200Response,
  CoreBackupGetAsyncBackupLinksRestoreRequest,
  CoreBackupGetAsyncBackupProgressRequest,
  CoreBackupGetCopyProgressRequest,
  CoreBackupSubmitCopyFormRequest,
  CoreBadgesGetUserBadgeByHash200Response,
  CoreBadgesGetUserBadgeByHashRequest,
  CoreBadgesGetUserBadges200Response,
  CoreBadgesGetUserBadgesRequest,
  CoreBlockFetchAddableBlocksRequest,
  CoreBlockGetCourseBlocks200Response,
  CoreBlockGetCourseBlocksRequest,
  CoreBlockGetDashboardBlocks200Response,
  CoreBlockGetDashboardBlocksRequest,
  CoreBlogGetEntries200Response,
  CoreBlogGetEntriesRequest,
  CoreBlogViewEntries200Response,
  CoreBlogViewEntriesRequest,
  CoreCalendarCreateCalendarEvents200Response,
  CoreCalendarCreateCalendarEventsRequest,
  CoreCalendarDeleteCalendarEventsRequest,
  CoreCalendarDeleteSubscription200Response,
  CoreCalendarDeleteSubscriptionRequest,
  CoreCalendarGetActionEventsByCourse200Response,
  CoreCalendarGetActionEventsByCourseRequest,
  CoreCalendarGetActionEventsByCourses200Response,
  CoreCalendarGetActionEventsByCoursesRequest,
  CoreCalendarGetActionEventsByTimesort200Response,
  CoreCalendarGetActionEventsByTimesortRequest,
  CoreCalendarGetAllowedEventTypes200Response,
  CoreCalendarGetAllowedEventTypesRequest,
  CoreCalendarGetCalendarAccessInformation200Response,
  CoreCalendarGetCalendarAccessInformationRequest,
  CoreCalendarGetCalendarDayView200Response,
  CoreCalendarGetCalendarDayViewRequest,
  CoreCalendarGetCalendarEventById200Response,
  CoreCalendarGetCalendarEventByIdRequest,
  CoreCalendarGetCalendarEvents200Response,
  CoreCalendarGetCalendarEventsRequest,
  CoreCalendarGetCalendarExportToken200Response,
  CoreCalendarGetCalendarMonthlyView200Response,
  CoreCalendarGetCalendarMonthlyViewRequest,
  CoreCalendarGetCalendarUpcomingView200Response,
  CoreCalendarGetCalendarUpcomingViewRequest,
  CoreCalendarGetTimestamps200Response,
  CoreCalendarGetTimestampsRequest,
  CoreCalendarSubmitCreateUpdateForm200Response,
  CoreCalendarSubmitCreateUpdateFormRequest,
  CoreCalendarUpdateEventStartDay200Response,
  CoreCalendarUpdateEventStartDayRequest,
  CoreChangeEditmode200Response,
  CoreChangeEditmodeRequest,
  CoreCohortAddCohortMembers200Response,
  CoreCohortAddCohortMembersRequest,
  CoreCohortCreateCohortsRequest,
  CoreCohortDeleteCohortMembersRequest,
  CoreCohortDeleteCohortsRequest,
  CoreCohortGetCohortMembersRequest,
  CoreCohortGetCohortsRequest,
  CoreCohortSearchCohorts200Response,
  CoreCohortSearchCohortsRequest,
  CoreCohortUpdateCohortsRequest,
  CoreCommentAddCommentsRequest,
  CoreCommentDeleteCommentsRequest,
  CoreCommentGetComments200Response,
  CoreCommentGetCommentsRequest,
  CoreCompetencyAddCompetencyToCourseRequest,
  CoreCompetencyAddCompetencyToPlanRequest,
  CoreCompetencyAddCompetencyToTemplateRequest,
  CoreCompetencyAddRelatedCompetencyRequest,
  CoreCompetencyApprovePlanRequest,
  CoreCompetencyCompetencyFrameworkViewedRequest,
  CoreCompetencyCompetencyViewedRequest,
  CoreCompetencyCompletePlanRequest,
  CoreCompetencyCountCompetenciesInCourseRequest,
  CoreCompetencyCountCompetenciesInTemplateRequest,
  CoreCompetencyCountCompetenciesRequest,
  CoreCompetencyCountCompetencyFrameworksRequest,
  CoreCompetencyCountCourseModuleCompetenciesRequest,
  CoreCompetencyCreateCompetency200Response,
  CoreCompetencyCreateCompetencyFramework200Response,
  CoreCompetencyCreateCompetencyFrameworkRequest,
  CoreCompetencyCreateCompetencyRequest,
  CoreCompetencyCreatePlan200Response,
  CoreCompetencyCreatePlanRequest,
  CoreCompetencyCreateTemplate200Response,
  CoreCompetencyCreateTemplateRequest,
  CoreCompetencyCreateUserEvidenceCompetency200Response,
  CoreCompetencyCreateUserEvidenceCompetencyRequest,
  CoreCompetencyDeleteCompetencyFrameworkRequest,
  CoreCompetencyDeleteCompetencyRequest,
  CoreCompetencyDeleteEvidenceRequest,
  CoreCompetencyDeletePlanRequest,
  CoreCompetencyDeleteTemplateRequest,
  CoreCompetencyDeleteUserEvidenceCompetencyRequest,
  CoreCompetencyDeleteUserEvidenceRequest,
  CoreCompetencyDuplicateCompetencyFramework200Response,
  CoreCompetencyDuplicateCompetencyFrameworkRequest,
  CoreCompetencyGetScaleValuesRequest,
  CoreCompetencyGradeCompetency200Response,
  CoreCompetencyGradeCompetencyInCourse200Response,
  CoreCompetencyGradeCompetencyInCourseRequest,
  CoreCompetencyGradeCompetencyInPlanRequest,
  CoreCompetencyGradeCompetencyRequest,
  CoreCompetencyListCompetenciesRequest,
  CoreCompetencyListCompetencyFrameworksRequest,
  CoreCompetencyListCourseModuleCompetenciesRequest,
  CoreCompetencyListPlanCompetenciesRequest,
  CoreCompetencyListTemplatesRequest,
  CoreCompetencyListUserPlansRequest,
  CoreCompetencyPlanCancelReviewRequestRequest,
  CoreCompetencyReadCompetencyRequest,
  CoreCompetencyReadPlan200Response,
  CoreCompetencyReadPlanRequest,
  CoreCompetencyReadTemplateRequest,
  CoreCompetencyReadUserEvidence200Response,
  CoreCompetencyRemoveCompetencyFromCourseRequest,
  CoreCompetencyRemoveCompetencyFromPlanRequest,
  CoreCompetencyRemoveCompetencyFromTemplateRequest,
  CoreCompetencyRemoveRelatedCompetencyRequest,
  CoreCompetencyReorderCourseCompetencyRequest,
  CoreCompetencyReorderPlanCompetencyRequest,
  CoreCompetencyReorderTemplateCompetencyRequest,
  CoreCompetencySearchCompetenciesRequest,
  CoreCompetencySetCourseCompetencyRuleoutcomeRequest,
  CoreCompetencySetParentCompetencyRequest,
  CoreCompetencyUnlinkPlanFromTemplateRequest,
  CoreCompetencyUpdateCompetencyFrameworkRequest,
  CoreCompetencyUpdateCompetencyRequest,
  CoreCompetencyUpdateCourseCompetencySettingsRequest,
  CoreCompetencyUpdatePlanRequest,
  CoreCompetencyUpdateTemplateRequest,
  CoreCompetencyUserCompetencyCancelReviewRequestRequest,
  CoreCompetencyUserCompetencyPlanViewedRequest,
  CoreCompetencyUserCompetencyRequestReviewRequest,
  CoreCompetencyUserCompetencyViewedInCourseRequest,
  CoreCompetencyUserCompetencyViewedRequest,
  CoreCompletionGetActivitiesCompletionStatus200Response,
  CoreCompletionGetActivitiesCompletionStatusRequest,
  CoreCompletionGetCourseCompletionStatus200Response,
  CoreCompletionMarkCourseSelfCompleted200Response,
  CoreCompletionMarkCourseSelfCompletedRequest,
  CoreCompletionOverrideActivityCompletionStatus200Response,
  CoreCompletionOverrideActivityCompletionStatusRequest,
  CoreCompletionUpdateActivityCompletionStatusManually200Response,
  CoreCompletionUpdateActivityCompletionStatusManuallyRequest,
  CoreContentbankCopyContent200Response,
  CoreContentbankCopyContentRequest,
  CoreContentbankDeleteContent200Response,
  CoreContentbankDeleteContentRequest,
  CoreContentbankRenameContent200Response,
  CoreContentbankRenameContentRequest,
  CoreContentbankSetContentVisibilityRequest,
  CoreCourseAddContentItemToUserFavourites200Response,
  CoreCourseAddContentItemToUserFavouritesRequest,
  CoreCourseCheckUpdates200Response,
  CoreCourseCheckUpdatesRequest,
  CoreCourseCreateCategoriesRequest,
  CoreCourseCreateCoursesRequest,
  CoreCourseDeleteCategoriesRequest,
  CoreCourseDeleteCoursesRequest,
  CoreCourseDeleteModulesRequest,
  CoreCourseDuplicateCourse200Response,
  CoreCourseDuplicateCourseRequest,
  CoreCourseEditModuleRequest,
  CoreCourseEditSectionRequest,
  CoreCourseGetActivityChooserFooter200Response,
  CoreCourseGetActivityChooserFooterRequest,
  CoreCourseGetCategoriesRequest,
  CoreCourseGetContentsRequest,
  CoreCourseGetCourseContentItems200Response,
  CoreCourseGetCourseContentItemsRequest,
  CoreCourseGetCourseModule200Response,
  CoreCourseGetCourseModuleByInstance200Response,
  CoreCourseGetCourseModuleByInstanceRequest,
  CoreCourseGetCoursesByField200Response,
  CoreCourseGetCoursesByFieldRequest,
  CoreCourseGetCoursesRequest,
  CoreCourseGetEnrolledCoursesByTimelineClassification200Response,
  CoreCourseGetEnrolledCoursesByTimelineClassificationRequest,
  CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200Response,
  CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest,
  CoreCourseGetEnrolledUsersByCmid200Response,
  CoreCourseGetEnrolledUsersByCmidRequest,
  CoreCourseGetModuleRequest,
  CoreCourseGetRecentCoursesRequest,
  CoreCourseGetUpdatesSince200Response,
  CoreCourseGetUpdatesSinceRequest,
  CoreCourseGetUserAdministrationOptions200Response,
  CoreCourseGetUserAdministrationOptionsRequest,
  CoreCourseGetUserNavigationOptions200Response,
  CoreCourseGetUserNavigationOptionsRequest,
  CoreCourseImportCourseRequest,
  CoreCourseRemoveContentItemFromUserFavouritesRequest,
  CoreCourseSearchCourses200Response,
  CoreCourseSearchCoursesRequest,
  CoreCourseSetFavouriteCoursesRequest,
  CoreCourseToggleActivityRecommendation200Response,
  CoreCourseToggleActivityRecommendationRequest,
  CoreCourseUpdateCategoriesRequest,
  CoreCourseUpdateCoursesRequest,
  CoreCourseViewCourseRequest,
  CoreCourseformatFileHandlersRequest,
  CoreCourseformatUpdateCourseRequest,
  CoreCreateUserfeedbackActionRecordRequest,
  CoreCustomfieldCreateCategoryRequest,
  CoreCustomfieldDeleteCategoryRequest,
  CoreCustomfieldDeleteFieldRequest,
  CoreCustomfieldMoveCategoryRequest,
  CoreCustomfieldMoveFieldRequest,
  CoreCustomfieldReloadTemplate200Response,
  CoreCustomfieldReloadTemplateRequest,
  CoreDynamicTabsGetContent200Response,
  CoreDynamicTabsGetContentRequest,
  CoreEnrolGetCourseEnrolmentMethodsRequest,
  CoreEnrolGetEnrolledUsersRequest,
  CoreEnrolGetEnrolledUsersWithCapabilityRequest,
  CoreEnrolGetPotentialUsersRequest,
  CoreEnrolGetUsersCoursesRequest,
  CoreEnrolSearchUsersRequest,
  CoreEnrolSubmitUserEnrolmentForm200Response,
  CoreEnrolSubmitUserEnrolmentFormRequest,
  CoreEnrolUnenrolUserEnrolment200Response,
  CoreEnrolUnenrolUserEnrolmentRequest,
  CoreFetchNotificationsRequest,
  CoreFilesDeleteDraftFiles200Response,
  CoreFilesDeleteDraftFilesRequest,
  CoreFilesGetFiles200Response,
  CoreFilesGetFilesRequest,
  CoreFilesGetUnusedDraftItemid200Response,
  CoreFilesUpload200Response,
  CoreFilesUploadRequest,
  CoreFiltersGetAvailableInContext200Response,
  CoreFiltersGetAvailableInContextRequest,
  CoreFormDynamicForm200Response,
  CoreFormDynamicFormRequest,
  CoreFormGetFiletypesBrowserData200Response,
  CoreFormGetFiletypesBrowserDataRequest,
  CoreGetComponentStringsRequest,
  CoreGetFragment200Response,
  CoreGetFragmentRequest,
  CoreGetStringRequest,
  CoreGetStringsRequest,
  CoreGetUserDates200Response,
  CoreGetUserDatesRequest,
  CoreGradesCreateGradecategories200Response,
  CoreGradesCreateGradecategoriesRequest,
  CoreGradesGetEnrolledUsersForSearchWidget200Response,
  CoreGradesGetEnrolledUsersForSearchWidgetRequest,
  CoreGradesGetEnrolledUsersForSelector200Response,
  CoreGradesGetEnrolledUsersForSelectorRequest,
  CoreGradesGetFeedback200Response,
  CoreGradesGetFeedbackRequest,
  CoreGradesGetGradableUsers200Response,
  CoreGradesGetGradableUsersRequest,
  CoreGradesGetGradeitems200Response,
  CoreGradesGetGroupsForSearchWidget200Response,
  CoreGradesGetGroupsForSearchWidgetRequest,
  CoreGradesGetGroupsForSelector200Response,
  CoreGradesGraderGradingpanelPointFetch200Response,
  CoreGradesGraderGradingpanelPointFetchRequest,
  CoreGradesGraderGradingpanelPointStore200Response,
  CoreGradesGraderGradingpanelPointStoreRequest,
  CoreGradesGraderGradingpanelScaleFetch200Response,
  CoreGradesGraderGradingpanelScaleFetchRequest,
  CoreGradesGraderGradingpanelScaleStore200Response,
  CoreGradesGraderGradingpanelScaleStoreRequest,
  CoreGradesUpdateGradesRequest,
  CoreGradingGetDefinitions200Response,
  CoreGradingGetDefinitionsRequest,
  CoreGradingGetGradingformInstances200Response,
  CoreGradingGetGradingformInstancesRequest,
  CoreGradingSaveDefinitionsRequest,
  CoreGroupAddGroupMembersRequest,
  CoreGroupAssignGroupingRequest,
  CoreGroupCreateGroupingsRequest,
  CoreGroupCreateGroupsRequest,
  CoreGroupDeleteGroupMembersRequest,
  CoreGroupDeleteGroupingsRequest,
  CoreGroupDeleteGroupsRequest,
  CoreGroupGetActivityAllowedGroups200Response,
  CoreGroupGetActivityAllowedGroupsRequest,
  CoreGroupGetActivityGroupmode200Response,
  CoreGroupGetActivityGroupmodeRequest,
  CoreGroupGetCourseGroupingsRequest,
  CoreGroupGetCourseUserGroups200Response,
  CoreGroupGetCourseUserGroupsRequest,
  CoreGroupGetGroupMembersRequest,
  CoreGroupGetGroupingsRequest,
  CoreGroupUnassignGroupingRequest,
  CoreGroupUpdateGroupingsRequest,
  CoreGroupUpdateGroupsRequest,
  CoreH5pGetTrustedH5pFile200Response,
  CoreH5pGetTrustedH5pFileRequest,
  CoreMessageBlockUserRequest,
  CoreMessageConfirmContactRequestRequest,
  CoreMessageCreateContactRequest200Response,
  CoreMessageCreateContactRequestRequest,
  CoreMessageDataForMessageareaSearchMessages200Response,
  CoreMessageDataForMessageareaSearchMessagesRequest,
  CoreMessageDeleteContactsRequest,
  CoreMessageDeleteConversationsByIdRequest,
  CoreMessageDeleteMessage200Response,
  CoreMessageDeleteMessageForAllUsersRequest,
  CoreMessageDeleteMessageRequest,
  CoreMessageGetBlockedUsers200Response,
  CoreMessageGetBlockedUsersRequest,
  CoreMessageGetContactRequestsRequest,
  CoreMessageGetConversation200Response,
  CoreMessageGetConversationBetweenUsers200Response,
  CoreMessageGetConversationBetweenUsersRequest,
  CoreMessageGetConversationCounts200Response,
  CoreMessageGetConversationCountsRequest,
  CoreMessageGetConversationMembersRequest,
  CoreMessageGetConversationMessages200Response,
  CoreMessageGetConversationMessagesRequest,
  CoreMessageGetConversationRequest,
  CoreMessageGetConversations200Response,
  CoreMessageGetConversationsRequest,
  CoreMessageGetMemberInfoRequest,
  CoreMessageGetMessageProcessor200Response,
  CoreMessageGetMessageProcessorRequest,
  CoreMessageGetMessages200Response,
  CoreMessageGetMessagesRequest,
  CoreMessageGetReceivedContactRequestsCountRequest,
  CoreMessageGetSelfConversationRequest,
  CoreMessageGetUnreadConversationCounts200Response,
  CoreMessageGetUnreadConversationsCountRequest,
  CoreMessageGetUnreadNotificationCountRequest,
  CoreMessageGetUserContactsRequest,
  CoreMessageGetUserMessagePreferences200Response,
  CoreMessageGetUserNotificationPreferences200Response,
  CoreMessageMarkAllConversationMessagesAsReadRequest,
  CoreMessageMarkAllNotificationsAsReadRequest,
  CoreMessageMarkMessageRead200Response,
  CoreMessageMarkMessageReadRequest,
  CoreMessageMarkNotificationRead200Response,
  CoreMessageMarkNotificationReadRequest,
  CoreMessageMessageProcessorConfigFormRequest,
  CoreMessageMessageSearchUsers200Response,
  CoreMessageMessageSearchUsersRequest,
  CoreMessageMuteConversationsRequest,
  CoreMessageSearchContactsRequest,
  CoreMessageSendInstantMessagesRequest,
  CoreMessageSendMessagesToConversationRequest,
  CoreMessageSetFavouriteConversationsRequest,
  CoreMessageUnblockUserRequest,
  CoreMessageUnmuteConversationsRequest,
  CoreMoodlenetAuthCheck200Response,
  CoreMoodlenetAuthCheckRequest,
  CoreMoodlenetGetShareInfoActivity200Response,
  CoreMoodlenetGetShareInfoActivityRequest,
  CoreMoodlenetGetSharedCourseInfo200Response,
  CoreMoodlenetGetSharedCourseInfoRequest,
  CoreMoodlenetSendActivity200Response,
  CoreMoodlenetSendActivityRequest,
  CoreMoodlenetSendCourse200Response,
  CoreMoodlenetSendCourseRequest,
  CoreMyViewPageRequest,
  CoreNotesCreateNotesRequest,
  CoreNotesDeleteNotesRequest,
  CoreNotesGetCourseNotes200Response,
  CoreNotesGetCourseNotesRequest,
  CoreNotesGetNotes200Response,
  CoreNotesGetNotesRequest,
  CoreNotesUpdateNotesRequest,
  CoreNotesViewNotesRequest,
  CoreOutputLoadFontawesomeIconSystemMapRequest,
  CoreOutputLoadTemplateRequest,
  CoreOutputLoadTemplateWithDependencies200Response,
  CoreOutputLoadTemplateWithDependenciesRequest,
  CorePaymentGetAvailableGatewaysRequest,
  CoreQuestionGetRandomQuestionSummaries200Response,
  CoreQuestionGetRandomQuestionSummariesRequest,
  CoreQuestionSubmitTagsForm200Response,
  CoreQuestionSubmitTagsFormRequest,
  CoreQuestionUpdateFlagRequest,
  CoreRatingAddRating200Response,
  CoreRatingAddRatingRequest,
  CoreRatingGetItemRatings200Response,
  CoreRatingGetItemRatingsRequest,
  CoreReportbuilderAudiencesDeleteRequest,
  CoreReportbuilderCanViewSystemReportRequest,
  CoreReportbuilderColumnsAdd200Response,
  CoreReportbuilderColumnsAddRequest,
  CoreReportbuilderColumnsDelete200Response,
  CoreReportbuilderColumnsDeleteRequest,
  CoreReportbuilderColumnsReorderRequest,
  CoreReportbuilderColumnsSortGetRequest,
  CoreReportbuilderColumnsSortReorderRequest,
  CoreReportbuilderColumnsSortToggleRequest,
  CoreReportbuilderConditionsAdd200Response,
  CoreReportbuilderConditionsAddRequest,
  CoreReportbuilderConditionsDelete200Response,
  CoreReportbuilderConditionsDeleteRequest,
  CoreReportbuilderConditionsReorderRequest,
  CoreReportbuilderFiltersAdd200Response,
  CoreReportbuilderFiltersAddRequest,
  CoreReportbuilderFiltersDelete200Response,
  CoreReportbuilderFiltersDeleteRequest,
  CoreReportbuilderFiltersReorderRequest,
  CoreReportbuilderFiltersResetRequest,
  CoreReportbuilderListReports200Response,
  CoreReportbuilderListReportsRequest,
  CoreReportbuilderReportsGet200Response,
  CoreReportbuilderReportsGetRequest,
  CoreReportbuilderRetrieveReport200Response,
  CoreReportbuilderRetrieveReportRequest,
  CoreReportbuilderRetrieveSystemReport200Response,
  CoreReportbuilderRetrieveSystemReportRequest,
  CoreReportbuilderSchedulesDeleteRequest,
  CoreReportbuilderSchedulesSendRequest,
  CoreReportbuilderSchedulesToggleRequest,
  CoreReportbuilderSetFiltersRequest,
  CoreReportbuilderViewReport200Response,
  CoreRoleAssignRolesRequest,
  CoreRoleUnassignRolesRequest,
  CoreSearchGetRelevantUsersRequest,
  CoreSearchGetResults200Response,
  CoreSearchGetResultsRequest,
  CoreSearchGetSearchAreasList200Response,
  CoreSearchGetSearchAreasListRequest,
  CoreSearchGetTopResults200Response,
  CoreSearchGetTopResultsRequest,
  CoreSearchViewResultsRequest,
  CoreSessionTimeRemaining200Response,
  CoreTableGetDynamicTableContent200Response,
  CoreTableGetDynamicTableContentRequest,
  CoreTagGetTagAreas200Response,
  CoreTagGetTagCloud200Response,
  CoreTagGetTagCloudRequest,
  CoreTagGetTagCollections200Response,
  CoreTagGetTagindex200Response,
  CoreTagGetTagindexPerAreaRequest,
  CoreTagGetTagindexRequest,
  CoreTagGetTags200Response,
  CoreTagGetTagsRequest,
  CoreTagUpdateTagsRequest,
  CoreUpdateInplaceEditable200Response,
  CoreUpdateInplaceEditableRequest,
  CoreUserAddUserDeviceRequest,
  CoreUserAddUserPrivateFilesRequest,
  CoreUserAgreeSitePolicy200Response,
  CoreUserCreateUsersRequest,
  CoreUserDeleteUsersRequest,
  CoreUserGetCourseUserProfilesRequest,
  CoreUserGetPrivateFilesInfo200Response,
  CoreUserGetPrivateFilesInfoRequest,
  CoreUserGetUserPreferences200Response,
  CoreUserGetUserPreferencesRequest,
  CoreUserGetUsers200Response,
  CoreUserGetUsersByFieldRequest,
  CoreUserGetUsersRequest,
  CoreUserRemoveUserDevice200Response,
  CoreUserRemoveUserDeviceRequest,
  CoreUserSearchIdentity200Response,
  CoreUserSearchIdentityRequest,
  CoreUserSetUserPreferences200Response,
  CoreUserSetUserPreferencesRequest,
  CoreUserUpdatePicture200Response,
  CoreUserUpdatePictureRequest,
  CoreUserUpdateUserDevicePublicKey200Response,
  CoreUserUpdateUserDevicePublicKeyRequest,
  CoreUserUpdateUserPreferencesRequest,
  CoreUserUpdateUsersRequest,
  CoreUserViewUserListRequest,
  CoreUserViewUserProfileRequest,
  CoreWebserviceGetSiteInfo200Response,
  CoreWebserviceGetSiteInfoRequest,
  CoreXapiDeleteStateRequest,
  CoreXapiDeleteStatesRequest,
  CoreXapiGetStateRequest,
  CoreXapiGetStatesRequest,
  CoreXapiPostStateRequest,
  CoreXapiStatementPostRequest,
  ErrorResponse,
} from '../models/index';
import {
    CoreAdminSetBlockProtectionRequestFromJSON,
    CoreAdminSetBlockProtectionRequestToJSON,
    CoreAdminSetPluginOrderRequestFromJSON,
    CoreAdminSetPluginOrderRequestToJSON,
    CoreAdminSetPluginStateRequestFromJSON,
    CoreAdminSetPluginStateRequestToJSON,
    CoreAuthConfirmUser200ResponseFromJSON,
    CoreAuthConfirmUser200ResponseToJSON,
    CoreAuthConfirmUserRequestFromJSON,
    CoreAuthConfirmUserRequestToJSON,
    CoreAuthIsAgeDigitalConsentVerificationEnabled200ResponseFromJSON,
    CoreAuthIsAgeDigitalConsentVerificationEnabled200ResponseToJSON,
    CoreAuthIsMinor200ResponseFromJSON,
    CoreAuthIsMinor200ResponseToJSON,
    CoreAuthIsMinorRequestFromJSON,
    CoreAuthIsMinorRequestToJSON,
    CoreAuthRequestPasswordReset200ResponseFromJSON,
    CoreAuthRequestPasswordReset200ResponseToJSON,
    CoreAuthRequestPasswordResetRequestFromJSON,
    CoreAuthRequestPasswordResetRequestToJSON,
    CoreAuthResendConfirmationEmail200ResponseFromJSON,
    CoreAuthResendConfirmationEmail200ResponseToJSON,
    CoreAuthResendConfirmationEmailRequestFromJSON,
    CoreAuthResendConfirmationEmailRequestToJSON,
    CoreBackupGetAsyncBackupLinksBackup200ResponseFromJSON,
    CoreBackupGetAsyncBackupLinksBackup200ResponseToJSON,
    CoreBackupGetAsyncBackupLinksBackupRequestFromJSON,
    CoreBackupGetAsyncBackupLinksBackupRequestToJSON,
    CoreBackupGetAsyncBackupLinksRestore200ResponseFromJSON,
    CoreBackupGetAsyncBackupLinksRestore200ResponseToJSON,
    CoreBackupGetAsyncBackupLinksRestoreRequestFromJSON,
    CoreBackupGetAsyncBackupLinksRestoreRequestToJSON,
    CoreBackupGetAsyncBackupProgressRequestFromJSON,
    CoreBackupGetAsyncBackupProgressRequestToJSON,
    CoreBackupGetCopyProgressRequestFromJSON,
    CoreBackupGetCopyProgressRequestToJSON,
    CoreBackupSubmitCopyFormRequestFromJSON,
    CoreBackupSubmitCopyFormRequestToJSON,
    CoreBadgesGetUserBadgeByHash200ResponseFromJSON,
    CoreBadgesGetUserBadgeByHash200ResponseToJSON,
    CoreBadgesGetUserBadgeByHashRequestFromJSON,
    CoreBadgesGetUserBadgeByHashRequestToJSON,
    CoreBadgesGetUserBadges200ResponseFromJSON,
    CoreBadgesGetUserBadges200ResponseToJSON,
    CoreBadgesGetUserBadgesRequestFromJSON,
    CoreBadgesGetUserBadgesRequestToJSON,
    CoreBlockFetchAddableBlocksRequestFromJSON,
    CoreBlockFetchAddableBlocksRequestToJSON,
    CoreBlockGetCourseBlocks200ResponseFromJSON,
    CoreBlockGetCourseBlocks200ResponseToJSON,
    CoreBlockGetCourseBlocksRequestFromJSON,
    CoreBlockGetCourseBlocksRequestToJSON,
    CoreBlockGetDashboardBlocks200ResponseFromJSON,
    CoreBlockGetDashboardBlocks200ResponseToJSON,
    CoreBlockGetDashboardBlocksRequestFromJSON,
    CoreBlockGetDashboardBlocksRequestToJSON,
    CoreBlogGetEntries200ResponseFromJSON,
    CoreBlogGetEntries200ResponseToJSON,
    CoreBlogGetEntriesRequestFromJSON,
    CoreBlogGetEntriesRequestToJSON,
    CoreBlogViewEntries200ResponseFromJSON,
    CoreBlogViewEntries200ResponseToJSON,
    CoreBlogViewEntriesRequestFromJSON,
    CoreBlogViewEntriesRequestToJSON,
    CoreCalendarCreateCalendarEvents200ResponseFromJSON,
    CoreCalendarCreateCalendarEvents200ResponseToJSON,
    CoreCalendarCreateCalendarEventsRequestFromJSON,
    CoreCalendarCreateCalendarEventsRequestToJSON,
    CoreCalendarDeleteCalendarEventsRequestFromJSON,
    CoreCalendarDeleteCalendarEventsRequestToJSON,
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    CoreCalendarDeleteSubscriptionRequestFromJSON,
    CoreCalendarDeleteSubscriptionRequestToJSON,
    CoreCalendarGetActionEventsByCourse200ResponseFromJSON,
    CoreCalendarGetActionEventsByCourse200ResponseToJSON,
    CoreCalendarGetActionEventsByCourseRequestFromJSON,
    CoreCalendarGetActionEventsByCourseRequestToJSON,
    CoreCalendarGetActionEventsByCourses200ResponseFromJSON,
    CoreCalendarGetActionEventsByCourses200ResponseToJSON,
    CoreCalendarGetActionEventsByCoursesRequestFromJSON,
    CoreCalendarGetActionEventsByCoursesRequestToJSON,
    CoreCalendarGetActionEventsByTimesort200ResponseFromJSON,
    CoreCalendarGetActionEventsByTimesort200ResponseToJSON,
    CoreCalendarGetActionEventsByTimesortRequestFromJSON,
    CoreCalendarGetActionEventsByTimesortRequestToJSON,
    CoreCalendarGetAllowedEventTypes200ResponseFromJSON,
    CoreCalendarGetAllowedEventTypes200ResponseToJSON,
    CoreCalendarGetAllowedEventTypesRequestFromJSON,
    CoreCalendarGetAllowedEventTypesRequestToJSON,
    CoreCalendarGetCalendarAccessInformation200ResponseFromJSON,
    CoreCalendarGetCalendarAccessInformation200ResponseToJSON,
    CoreCalendarGetCalendarAccessInformationRequestFromJSON,
    CoreCalendarGetCalendarAccessInformationRequestToJSON,
    CoreCalendarGetCalendarDayView200ResponseFromJSON,
    CoreCalendarGetCalendarDayView200ResponseToJSON,
    CoreCalendarGetCalendarDayViewRequestFromJSON,
    CoreCalendarGetCalendarDayViewRequestToJSON,
    CoreCalendarGetCalendarEventById200ResponseFromJSON,
    CoreCalendarGetCalendarEventById200ResponseToJSON,
    CoreCalendarGetCalendarEventByIdRequestFromJSON,
    CoreCalendarGetCalendarEventByIdRequestToJSON,
    CoreCalendarGetCalendarEvents200ResponseFromJSON,
    CoreCalendarGetCalendarEvents200ResponseToJSON,
    CoreCalendarGetCalendarEventsRequestFromJSON,
    CoreCalendarGetCalendarEventsRequestToJSON,
    CoreCalendarGetCalendarExportToken200ResponseFromJSON,
    CoreCalendarGetCalendarExportToken200ResponseToJSON,
    CoreCalendarGetCalendarMonthlyView200ResponseFromJSON,
    CoreCalendarGetCalendarMonthlyView200ResponseToJSON,
    CoreCalendarGetCalendarMonthlyViewRequestFromJSON,
    CoreCalendarGetCalendarMonthlyViewRequestToJSON,
    CoreCalendarGetCalendarUpcomingView200ResponseFromJSON,
    CoreCalendarGetCalendarUpcomingView200ResponseToJSON,
    CoreCalendarGetCalendarUpcomingViewRequestFromJSON,
    CoreCalendarGetCalendarUpcomingViewRequestToJSON,
    CoreCalendarGetTimestamps200ResponseFromJSON,
    CoreCalendarGetTimestamps200ResponseToJSON,
    CoreCalendarGetTimestampsRequestFromJSON,
    CoreCalendarGetTimestampsRequestToJSON,
    CoreCalendarSubmitCreateUpdateForm200ResponseFromJSON,
    CoreCalendarSubmitCreateUpdateForm200ResponseToJSON,
    CoreCalendarSubmitCreateUpdateFormRequestFromJSON,
    CoreCalendarSubmitCreateUpdateFormRequestToJSON,
    CoreCalendarUpdateEventStartDay200ResponseFromJSON,
    CoreCalendarUpdateEventStartDay200ResponseToJSON,
    CoreCalendarUpdateEventStartDayRequestFromJSON,
    CoreCalendarUpdateEventStartDayRequestToJSON,
    CoreChangeEditmode200ResponseFromJSON,
    CoreChangeEditmode200ResponseToJSON,
    CoreChangeEditmodeRequestFromJSON,
    CoreChangeEditmodeRequestToJSON,
    CoreCohortAddCohortMembers200ResponseFromJSON,
    CoreCohortAddCohortMembers200ResponseToJSON,
    CoreCohortAddCohortMembersRequestFromJSON,
    CoreCohortAddCohortMembersRequestToJSON,
    CoreCohortCreateCohortsRequestFromJSON,
    CoreCohortCreateCohortsRequestToJSON,
    CoreCohortDeleteCohortMembersRequestFromJSON,
    CoreCohortDeleteCohortMembersRequestToJSON,
    CoreCohortDeleteCohortsRequestFromJSON,
    CoreCohortDeleteCohortsRequestToJSON,
    CoreCohortGetCohortMembersRequestFromJSON,
    CoreCohortGetCohortMembersRequestToJSON,
    CoreCohortGetCohortsRequestFromJSON,
    CoreCohortGetCohortsRequestToJSON,
    CoreCohortSearchCohorts200ResponseFromJSON,
    CoreCohortSearchCohorts200ResponseToJSON,
    CoreCohortSearchCohortsRequestFromJSON,
    CoreCohortSearchCohortsRequestToJSON,
    CoreCohortUpdateCohortsRequestFromJSON,
    CoreCohortUpdateCohortsRequestToJSON,
    CoreCommentAddCommentsRequestFromJSON,
    CoreCommentAddCommentsRequestToJSON,
    CoreCommentDeleteCommentsRequestFromJSON,
    CoreCommentDeleteCommentsRequestToJSON,
    CoreCommentGetComments200ResponseFromJSON,
    CoreCommentGetComments200ResponseToJSON,
    CoreCommentGetCommentsRequestFromJSON,
    CoreCommentGetCommentsRequestToJSON,
    CoreCompetencyAddCompetencyToCourseRequestFromJSON,
    CoreCompetencyAddCompetencyToCourseRequestToJSON,
    CoreCompetencyAddCompetencyToPlanRequestFromJSON,
    CoreCompetencyAddCompetencyToPlanRequestToJSON,
    CoreCompetencyAddCompetencyToTemplateRequestFromJSON,
    CoreCompetencyAddCompetencyToTemplateRequestToJSON,
    CoreCompetencyAddRelatedCompetencyRequestFromJSON,
    CoreCompetencyAddRelatedCompetencyRequestToJSON,
    CoreCompetencyApprovePlanRequestFromJSON,
    CoreCompetencyApprovePlanRequestToJSON,
    CoreCompetencyCompetencyFrameworkViewedRequestFromJSON,
    CoreCompetencyCompetencyFrameworkViewedRequestToJSON,
    CoreCompetencyCompetencyViewedRequestFromJSON,
    CoreCompetencyCompetencyViewedRequestToJSON,
    CoreCompetencyCompletePlanRequestFromJSON,
    CoreCompetencyCompletePlanRequestToJSON,
    CoreCompetencyCountCompetenciesInCourseRequestFromJSON,
    CoreCompetencyCountCompetenciesInCourseRequestToJSON,
    CoreCompetencyCountCompetenciesInTemplateRequestFromJSON,
    CoreCompetencyCountCompetenciesInTemplateRequestToJSON,
    CoreCompetencyCountCompetenciesRequestFromJSON,
    CoreCompetencyCountCompetenciesRequestToJSON,
    CoreCompetencyCountCompetencyFrameworksRequestFromJSON,
    CoreCompetencyCountCompetencyFrameworksRequestToJSON,
    CoreCompetencyCountCourseModuleCompetenciesRequestFromJSON,
    CoreCompetencyCountCourseModuleCompetenciesRequestToJSON,
    CoreCompetencyCreateCompetency200ResponseFromJSON,
    CoreCompetencyCreateCompetency200ResponseToJSON,
    CoreCompetencyCreateCompetencyFramework200ResponseFromJSON,
    CoreCompetencyCreateCompetencyFramework200ResponseToJSON,
    CoreCompetencyCreateCompetencyFrameworkRequestFromJSON,
    CoreCompetencyCreateCompetencyFrameworkRequestToJSON,
    CoreCompetencyCreateCompetencyRequestFromJSON,
    CoreCompetencyCreateCompetencyRequestToJSON,
    CoreCompetencyCreatePlan200ResponseFromJSON,
    CoreCompetencyCreatePlan200ResponseToJSON,
    CoreCompetencyCreatePlanRequestFromJSON,
    CoreCompetencyCreatePlanRequestToJSON,
    CoreCompetencyCreateTemplate200ResponseFromJSON,
    CoreCompetencyCreateTemplate200ResponseToJSON,
    CoreCompetencyCreateTemplateRequestFromJSON,
    CoreCompetencyCreateTemplateRequestToJSON,
    CoreCompetencyCreateUserEvidenceCompetency200ResponseFromJSON,
    CoreCompetencyCreateUserEvidenceCompetency200ResponseToJSON,
    CoreCompetencyCreateUserEvidenceCompetencyRequestFromJSON,
    CoreCompetencyCreateUserEvidenceCompetencyRequestToJSON,
    CoreCompetencyDeleteCompetencyFrameworkRequestFromJSON,
    CoreCompetencyDeleteCompetencyFrameworkRequestToJSON,
    CoreCompetencyDeleteCompetencyRequestFromJSON,
    CoreCompetencyDeleteCompetencyRequestToJSON,
    CoreCompetencyDeleteEvidenceRequestFromJSON,
    CoreCompetencyDeleteEvidenceRequestToJSON,
    CoreCompetencyDeletePlanRequestFromJSON,
    CoreCompetencyDeletePlanRequestToJSON,
    CoreCompetencyDeleteTemplateRequestFromJSON,
    CoreCompetencyDeleteTemplateRequestToJSON,
    CoreCompetencyDeleteUserEvidenceCompetencyRequestFromJSON,
    CoreCompetencyDeleteUserEvidenceCompetencyRequestToJSON,
    CoreCompetencyDeleteUserEvidenceRequestFromJSON,
    CoreCompetencyDeleteUserEvidenceRequestToJSON,
    CoreCompetencyDuplicateCompetencyFramework200ResponseFromJSON,
    CoreCompetencyDuplicateCompetencyFramework200ResponseToJSON,
    CoreCompetencyDuplicateCompetencyFrameworkRequestFromJSON,
    CoreCompetencyDuplicateCompetencyFrameworkRequestToJSON,
    CoreCompetencyGetScaleValuesRequestFromJSON,
    CoreCompetencyGetScaleValuesRequestToJSON,
    CoreCompetencyGradeCompetency200ResponseFromJSON,
    CoreCompetencyGradeCompetency200ResponseToJSON,
    CoreCompetencyGradeCompetencyInCourse200ResponseFromJSON,
    CoreCompetencyGradeCompetencyInCourse200ResponseToJSON,
    CoreCompetencyGradeCompetencyInCourseRequestFromJSON,
    CoreCompetencyGradeCompetencyInCourseRequestToJSON,
    CoreCompetencyGradeCompetencyInPlanRequestFromJSON,
    CoreCompetencyGradeCompetencyInPlanRequestToJSON,
    CoreCompetencyGradeCompetencyRequestFromJSON,
    CoreCompetencyGradeCompetencyRequestToJSON,
    CoreCompetencyListCompetenciesRequestFromJSON,
    CoreCompetencyListCompetenciesRequestToJSON,
    CoreCompetencyListCompetencyFrameworksRequestFromJSON,
    CoreCompetencyListCompetencyFrameworksRequestToJSON,
    CoreCompetencyListCourseModuleCompetenciesRequestFromJSON,
    CoreCompetencyListCourseModuleCompetenciesRequestToJSON,
    CoreCompetencyListPlanCompetenciesRequestFromJSON,
    CoreCompetencyListPlanCompetenciesRequestToJSON,
    CoreCompetencyListTemplatesRequestFromJSON,
    CoreCompetencyListTemplatesRequestToJSON,
    CoreCompetencyListUserPlansRequestFromJSON,
    CoreCompetencyListUserPlansRequestToJSON,
    CoreCompetencyPlanCancelReviewRequestRequestFromJSON,
    CoreCompetencyPlanCancelReviewRequestRequestToJSON,
    CoreCompetencyReadCompetencyRequestFromJSON,
    CoreCompetencyReadCompetencyRequestToJSON,
    CoreCompetencyReadPlan200ResponseFromJSON,
    CoreCompetencyReadPlan200ResponseToJSON,
    CoreCompetencyReadPlanRequestFromJSON,
    CoreCompetencyReadPlanRequestToJSON,
    CoreCompetencyReadTemplateRequestFromJSON,
    CoreCompetencyReadTemplateRequestToJSON,
    CoreCompetencyReadUserEvidence200ResponseFromJSON,
    CoreCompetencyReadUserEvidence200ResponseToJSON,
    CoreCompetencyRemoveCompetencyFromCourseRequestFromJSON,
    CoreCompetencyRemoveCompetencyFromCourseRequestToJSON,
    CoreCompetencyRemoveCompetencyFromPlanRequestFromJSON,
    CoreCompetencyRemoveCompetencyFromPlanRequestToJSON,
    CoreCompetencyRemoveCompetencyFromTemplateRequestFromJSON,
    CoreCompetencyRemoveCompetencyFromTemplateRequestToJSON,
    CoreCompetencyRemoveRelatedCompetencyRequestFromJSON,
    CoreCompetencyRemoveRelatedCompetencyRequestToJSON,
    CoreCompetencyReorderCourseCompetencyRequestFromJSON,
    CoreCompetencyReorderCourseCompetencyRequestToJSON,
    CoreCompetencyReorderPlanCompetencyRequestFromJSON,
    CoreCompetencyReorderPlanCompetencyRequestToJSON,
    CoreCompetencyReorderTemplateCompetencyRequestFromJSON,
    CoreCompetencyReorderTemplateCompetencyRequestToJSON,
    CoreCompetencySearchCompetenciesRequestFromJSON,
    CoreCompetencySearchCompetenciesRequestToJSON,
    CoreCompetencySetCourseCompetencyRuleoutcomeRequestFromJSON,
    CoreCompetencySetCourseCompetencyRuleoutcomeRequestToJSON,
    CoreCompetencySetParentCompetencyRequestFromJSON,
    CoreCompetencySetParentCompetencyRequestToJSON,
    CoreCompetencyUnlinkPlanFromTemplateRequestFromJSON,
    CoreCompetencyUnlinkPlanFromTemplateRequestToJSON,
    CoreCompetencyUpdateCompetencyFrameworkRequestFromJSON,
    CoreCompetencyUpdateCompetencyFrameworkRequestToJSON,
    CoreCompetencyUpdateCompetencyRequestFromJSON,
    CoreCompetencyUpdateCompetencyRequestToJSON,
    CoreCompetencyUpdateCourseCompetencySettingsRequestFromJSON,
    CoreCompetencyUpdateCourseCompetencySettingsRequestToJSON,
    CoreCompetencyUpdatePlanRequestFromJSON,
    CoreCompetencyUpdatePlanRequestToJSON,
    CoreCompetencyUpdateTemplateRequestFromJSON,
    CoreCompetencyUpdateTemplateRequestToJSON,
    CoreCompetencyUserCompetencyCancelReviewRequestRequestFromJSON,
    CoreCompetencyUserCompetencyCancelReviewRequestRequestToJSON,
    CoreCompetencyUserCompetencyPlanViewedRequestFromJSON,
    CoreCompetencyUserCompetencyPlanViewedRequestToJSON,
    CoreCompetencyUserCompetencyRequestReviewRequestFromJSON,
    CoreCompetencyUserCompetencyRequestReviewRequestToJSON,
    CoreCompetencyUserCompetencyViewedInCourseRequestFromJSON,
    CoreCompetencyUserCompetencyViewedInCourseRequestToJSON,
    CoreCompetencyUserCompetencyViewedRequestFromJSON,
    CoreCompetencyUserCompetencyViewedRequestToJSON,
    CoreCompletionGetActivitiesCompletionStatus200ResponseFromJSON,
    CoreCompletionGetActivitiesCompletionStatus200ResponseToJSON,
    CoreCompletionGetActivitiesCompletionStatusRequestFromJSON,
    CoreCompletionGetActivitiesCompletionStatusRequestToJSON,
    CoreCompletionGetCourseCompletionStatus200ResponseFromJSON,
    CoreCompletionGetCourseCompletionStatus200ResponseToJSON,
    CoreCompletionMarkCourseSelfCompleted200ResponseFromJSON,
    CoreCompletionMarkCourseSelfCompleted200ResponseToJSON,
    CoreCompletionMarkCourseSelfCompletedRequestFromJSON,
    CoreCompletionMarkCourseSelfCompletedRequestToJSON,
    CoreCompletionOverrideActivityCompletionStatus200ResponseFromJSON,
    CoreCompletionOverrideActivityCompletionStatus200ResponseToJSON,
    CoreCompletionOverrideActivityCompletionStatusRequestFromJSON,
    CoreCompletionOverrideActivityCompletionStatusRequestToJSON,
    CoreCompletionUpdateActivityCompletionStatusManually200ResponseFromJSON,
    CoreCompletionUpdateActivityCompletionStatusManually200ResponseToJSON,
    CoreCompletionUpdateActivityCompletionStatusManuallyRequestFromJSON,
    CoreCompletionUpdateActivityCompletionStatusManuallyRequestToJSON,
    CoreContentbankCopyContent200ResponseFromJSON,
    CoreContentbankCopyContent200ResponseToJSON,
    CoreContentbankCopyContentRequestFromJSON,
    CoreContentbankCopyContentRequestToJSON,
    CoreContentbankDeleteContent200ResponseFromJSON,
    CoreContentbankDeleteContent200ResponseToJSON,
    CoreContentbankDeleteContentRequestFromJSON,
    CoreContentbankDeleteContentRequestToJSON,
    CoreContentbankRenameContent200ResponseFromJSON,
    CoreContentbankRenameContent200ResponseToJSON,
    CoreContentbankRenameContentRequestFromJSON,
    CoreContentbankRenameContentRequestToJSON,
    CoreContentbankSetContentVisibilityRequestFromJSON,
    CoreContentbankSetContentVisibilityRequestToJSON,
    CoreCourseAddContentItemToUserFavourites200ResponseFromJSON,
    CoreCourseAddContentItemToUserFavourites200ResponseToJSON,
    CoreCourseAddContentItemToUserFavouritesRequestFromJSON,
    CoreCourseAddContentItemToUserFavouritesRequestToJSON,
    CoreCourseCheckUpdates200ResponseFromJSON,
    CoreCourseCheckUpdates200ResponseToJSON,
    CoreCourseCheckUpdatesRequestFromJSON,
    CoreCourseCheckUpdatesRequestToJSON,
    CoreCourseCreateCategoriesRequestFromJSON,
    CoreCourseCreateCategoriesRequestToJSON,
    CoreCourseCreateCoursesRequestFromJSON,
    CoreCourseCreateCoursesRequestToJSON,
    CoreCourseDeleteCategoriesRequestFromJSON,
    CoreCourseDeleteCategoriesRequestToJSON,
    CoreCourseDeleteCoursesRequestFromJSON,
    CoreCourseDeleteCoursesRequestToJSON,
    CoreCourseDeleteModulesRequestFromJSON,
    CoreCourseDeleteModulesRequestToJSON,
    CoreCourseDuplicateCourse200ResponseFromJSON,
    CoreCourseDuplicateCourse200ResponseToJSON,
    CoreCourseDuplicateCourseRequestFromJSON,
    CoreCourseDuplicateCourseRequestToJSON,
    CoreCourseEditModuleRequestFromJSON,
    CoreCourseEditModuleRequestToJSON,
    CoreCourseEditSectionRequestFromJSON,
    CoreCourseEditSectionRequestToJSON,
    CoreCourseGetActivityChooserFooter200ResponseFromJSON,
    CoreCourseGetActivityChooserFooter200ResponseToJSON,
    CoreCourseGetActivityChooserFooterRequestFromJSON,
    CoreCourseGetActivityChooserFooterRequestToJSON,
    CoreCourseGetCategoriesRequestFromJSON,
    CoreCourseGetCategoriesRequestToJSON,
    CoreCourseGetContentsRequestFromJSON,
    CoreCourseGetContentsRequestToJSON,
    CoreCourseGetCourseContentItems200ResponseFromJSON,
    CoreCourseGetCourseContentItems200ResponseToJSON,
    CoreCourseGetCourseContentItemsRequestFromJSON,
    CoreCourseGetCourseContentItemsRequestToJSON,
    CoreCourseGetCourseModule200ResponseFromJSON,
    CoreCourseGetCourseModule200ResponseToJSON,
    CoreCourseGetCourseModuleByInstance200ResponseFromJSON,
    CoreCourseGetCourseModuleByInstance200ResponseToJSON,
    CoreCourseGetCourseModuleByInstanceRequestFromJSON,
    CoreCourseGetCourseModuleByInstanceRequestToJSON,
    CoreCourseGetCoursesByField200ResponseFromJSON,
    CoreCourseGetCoursesByField200ResponseToJSON,
    CoreCourseGetCoursesByFieldRequestFromJSON,
    CoreCourseGetCoursesByFieldRequestToJSON,
    CoreCourseGetCoursesRequestFromJSON,
    CoreCourseGetCoursesRequestToJSON,
    CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseFromJSON,
    CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseToJSON,
    CoreCourseGetEnrolledCoursesByTimelineClassificationRequestFromJSON,
    CoreCourseGetEnrolledCoursesByTimelineClassificationRequestToJSON,
    CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200ResponseFromJSON,
    CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200ResponseToJSON,
    CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequestFromJSON,
    CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequestToJSON,
    CoreCourseGetEnrolledUsersByCmid200ResponseFromJSON,
    CoreCourseGetEnrolledUsersByCmid200ResponseToJSON,
    CoreCourseGetEnrolledUsersByCmidRequestFromJSON,
    CoreCourseGetEnrolledUsersByCmidRequestToJSON,
    CoreCourseGetModuleRequestFromJSON,
    CoreCourseGetModuleRequestToJSON,
    CoreCourseGetRecentCoursesRequestFromJSON,
    CoreCourseGetRecentCoursesRequestToJSON,
    CoreCourseGetUpdatesSince200ResponseFromJSON,
    CoreCourseGetUpdatesSince200ResponseToJSON,
    CoreCourseGetUpdatesSinceRequestFromJSON,
    CoreCourseGetUpdatesSinceRequestToJSON,
    CoreCourseGetUserAdministrationOptions200ResponseFromJSON,
    CoreCourseGetUserAdministrationOptions200ResponseToJSON,
    CoreCourseGetUserAdministrationOptionsRequestFromJSON,
    CoreCourseGetUserAdministrationOptionsRequestToJSON,
    CoreCourseGetUserNavigationOptions200ResponseFromJSON,
    CoreCourseGetUserNavigationOptions200ResponseToJSON,
    CoreCourseGetUserNavigationOptionsRequestFromJSON,
    CoreCourseGetUserNavigationOptionsRequestToJSON,
    CoreCourseImportCourseRequestFromJSON,
    CoreCourseImportCourseRequestToJSON,
    CoreCourseRemoveContentItemFromUserFavouritesRequestFromJSON,
    CoreCourseRemoveContentItemFromUserFavouritesRequestToJSON,
    CoreCourseSearchCourses200ResponseFromJSON,
    CoreCourseSearchCourses200ResponseToJSON,
    CoreCourseSearchCoursesRequestFromJSON,
    CoreCourseSearchCoursesRequestToJSON,
    CoreCourseSetFavouriteCoursesRequestFromJSON,
    CoreCourseSetFavouriteCoursesRequestToJSON,
    CoreCourseToggleActivityRecommendation200ResponseFromJSON,
    CoreCourseToggleActivityRecommendation200ResponseToJSON,
    CoreCourseToggleActivityRecommendationRequestFromJSON,
    CoreCourseToggleActivityRecommendationRequestToJSON,
    CoreCourseUpdateCategoriesRequestFromJSON,
    CoreCourseUpdateCategoriesRequestToJSON,
    CoreCourseUpdateCoursesRequestFromJSON,
    CoreCourseUpdateCoursesRequestToJSON,
    CoreCourseViewCourseRequestFromJSON,
    CoreCourseViewCourseRequestToJSON,
    CoreCourseformatFileHandlersRequestFromJSON,
    CoreCourseformatFileHandlersRequestToJSON,
    CoreCourseformatUpdateCourseRequestFromJSON,
    CoreCourseformatUpdateCourseRequestToJSON,
    CoreCreateUserfeedbackActionRecordRequestFromJSON,
    CoreCreateUserfeedbackActionRecordRequestToJSON,
    CoreCustomfieldCreateCategoryRequestFromJSON,
    CoreCustomfieldCreateCategoryRequestToJSON,
    CoreCustomfieldDeleteCategoryRequestFromJSON,
    CoreCustomfieldDeleteCategoryRequestToJSON,
    CoreCustomfieldDeleteFieldRequestFromJSON,
    CoreCustomfieldDeleteFieldRequestToJSON,
    CoreCustomfieldMoveCategoryRequestFromJSON,
    CoreCustomfieldMoveCategoryRequestToJSON,
    CoreCustomfieldMoveFieldRequestFromJSON,
    CoreCustomfieldMoveFieldRequestToJSON,
    CoreCustomfieldReloadTemplate200ResponseFromJSON,
    CoreCustomfieldReloadTemplate200ResponseToJSON,
    CoreCustomfieldReloadTemplateRequestFromJSON,
    CoreCustomfieldReloadTemplateRequestToJSON,
    CoreDynamicTabsGetContent200ResponseFromJSON,
    CoreDynamicTabsGetContent200ResponseToJSON,
    CoreDynamicTabsGetContentRequestFromJSON,
    CoreDynamicTabsGetContentRequestToJSON,
    CoreEnrolGetCourseEnrolmentMethodsRequestFromJSON,
    CoreEnrolGetCourseEnrolmentMethodsRequestToJSON,
    CoreEnrolGetEnrolledUsersRequestFromJSON,
    CoreEnrolGetEnrolledUsersRequestToJSON,
    CoreEnrolGetEnrolledUsersWithCapabilityRequestFromJSON,
    CoreEnrolGetEnrolledUsersWithCapabilityRequestToJSON,
    CoreEnrolGetPotentialUsersRequestFromJSON,
    CoreEnrolGetPotentialUsersRequestToJSON,
    CoreEnrolGetUsersCoursesRequestFromJSON,
    CoreEnrolGetUsersCoursesRequestToJSON,
    CoreEnrolSearchUsersRequestFromJSON,
    CoreEnrolSearchUsersRequestToJSON,
    CoreEnrolSubmitUserEnrolmentForm200ResponseFromJSON,
    CoreEnrolSubmitUserEnrolmentForm200ResponseToJSON,
    CoreEnrolSubmitUserEnrolmentFormRequestFromJSON,
    CoreEnrolSubmitUserEnrolmentFormRequestToJSON,
    CoreEnrolUnenrolUserEnrolment200ResponseFromJSON,
    CoreEnrolUnenrolUserEnrolment200ResponseToJSON,
    CoreEnrolUnenrolUserEnrolmentRequestFromJSON,
    CoreEnrolUnenrolUserEnrolmentRequestToJSON,
    CoreFetchNotificationsRequestFromJSON,
    CoreFetchNotificationsRequestToJSON,
    CoreFilesDeleteDraftFiles200ResponseFromJSON,
    CoreFilesDeleteDraftFiles200ResponseToJSON,
    CoreFilesDeleteDraftFilesRequestFromJSON,
    CoreFilesDeleteDraftFilesRequestToJSON,
    CoreFilesGetFiles200ResponseFromJSON,
    CoreFilesGetFiles200ResponseToJSON,
    CoreFilesGetFilesRequestFromJSON,
    CoreFilesGetFilesRequestToJSON,
    CoreFilesGetUnusedDraftItemid200ResponseFromJSON,
    CoreFilesGetUnusedDraftItemid200ResponseToJSON,
    CoreFilesUpload200ResponseFromJSON,
    CoreFilesUpload200ResponseToJSON,
    CoreFilesUploadRequestFromJSON,
    CoreFilesUploadRequestToJSON,
    CoreFiltersGetAvailableInContext200ResponseFromJSON,
    CoreFiltersGetAvailableInContext200ResponseToJSON,
    CoreFiltersGetAvailableInContextRequestFromJSON,
    CoreFiltersGetAvailableInContextRequestToJSON,
    CoreFormDynamicForm200ResponseFromJSON,
    CoreFormDynamicForm200ResponseToJSON,
    CoreFormDynamicFormRequestFromJSON,
    CoreFormDynamicFormRequestToJSON,
    CoreFormGetFiletypesBrowserData200ResponseFromJSON,
    CoreFormGetFiletypesBrowserData200ResponseToJSON,
    CoreFormGetFiletypesBrowserDataRequestFromJSON,
    CoreFormGetFiletypesBrowserDataRequestToJSON,
    CoreGetComponentStringsRequestFromJSON,
    CoreGetComponentStringsRequestToJSON,
    CoreGetFragment200ResponseFromJSON,
    CoreGetFragment200ResponseToJSON,
    CoreGetFragmentRequestFromJSON,
    CoreGetFragmentRequestToJSON,
    CoreGetStringRequestFromJSON,
    CoreGetStringRequestToJSON,
    CoreGetStringsRequestFromJSON,
    CoreGetStringsRequestToJSON,
    CoreGetUserDates200ResponseFromJSON,
    CoreGetUserDates200ResponseToJSON,
    CoreGetUserDatesRequestFromJSON,
    CoreGetUserDatesRequestToJSON,
    CoreGradesCreateGradecategories200ResponseFromJSON,
    CoreGradesCreateGradecategories200ResponseToJSON,
    CoreGradesCreateGradecategoriesRequestFromJSON,
    CoreGradesCreateGradecategoriesRequestToJSON,
    CoreGradesGetEnrolledUsersForSearchWidget200ResponseFromJSON,
    CoreGradesGetEnrolledUsersForSearchWidget200ResponseToJSON,
    CoreGradesGetEnrolledUsersForSearchWidgetRequestFromJSON,
    CoreGradesGetEnrolledUsersForSearchWidgetRequestToJSON,
    CoreGradesGetEnrolledUsersForSelector200ResponseFromJSON,
    CoreGradesGetEnrolledUsersForSelector200ResponseToJSON,
    CoreGradesGetEnrolledUsersForSelectorRequestFromJSON,
    CoreGradesGetEnrolledUsersForSelectorRequestToJSON,
    CoreGradesGetFeedback200ResponseFromJSON,
    CoreGradesGetFeedback200ResponseToJSON,
    CoreGradesGetFeedbackRequestFromJSON,
    CoreGradesGetFeedbackRequestToJSON,
    CoreGradesGetGradableUsers200ResponseFromJSON,
    CoreGradesGetGradableUsers200ResponseToJSON,
    CoreGradesGetGradableUsersRequestFromJSON,
    CoreGradesGetGradableUsersRequestToJSON,
    CoreGradesGetGradeitems200ResponseFromJSON,
    CoreGradesGetGradeitems200ResponseToJSON,
    CoreGradesGetGroupsForSearchWidget200ResponseFromJSON,
    CoreGradesGetGroupsForSearchWidget200ResponseToJSON,
    CoreGradesGetGroupsForSearchWidgetRequestFromJSON,
    CoreGradesGetGroupsForSearchWidgetRequestToJSON,
    CoreGradesGetGroupsForSelector200ResponseFromJSON,
    CoreGradesGetGroupsForSelector200ResponseToJSON,
    CoreGradesGraderGradingpanelPointFetch200ResponseFromJSON,
    CoreGradesGraderGradingpanelPointFetch200ResponseToJSON,
    CoreGradesGraderGradingpanelPointFetchRequestFromJSON,
    CoreGradesGraderGradingpanelPointFetchRequestToJSON,
    CoreGradesGraderGradingpanelPointStore200ResponseFromJSON,
    CoreGradesGraderGradingpanelPointStore200ResponseToJSON,
    CoreGradesGraderGradingpanelPointStoreRequestFromJSON,
    CoreGradesGraderGradingpanelPointStoreRequestToJSON,
    CoreGradesGraderGradingpanelScaleFetch200ResponseFromJSON,
    CoreGradesGraderGradingpanelScaleFetch200ResponseToJSON,
    CoreGradesGraderGradingpanelScaleFetchRequestFromJSON,
    CoreGradesGraderGradingpanelScaleFetchRequestToJSON,
    CoreGradesGraderGradingpanelScaleStore200ResponseFromJSON,
    CoreGradesGraderGradingpanelScaleStore200ResponseToJSON,
    CoreGradesGraderGradingpanelScaleStoreRequestFromJSON,
    CoreGradesGraderGradingpanelScaleStoreRequestToJSON,
    CoreGradesUpdateGradesRequestFromJSON,
    CoreGradesUpdateGradesRequestToJSON,
    CoreGradingGetDefinitions200ResponseFromJSON,
    CoreGradingGetDefinitions200ResponseToJSON,
    CoreGradingGetDefinitionsRequestFromJSON,
    CoreGradingGetDefinitionsRequestToJSON,
    CoreGradingGetGradingformInstances200ResponseFromJSON,
    CoreGradingGetGradingformInstances200ResponseToJSON,
    CoreGradingGetGradingformInstancesRequestFromJSON,
    CoreGradingGetGradingformInstancesRequestToJSON,
    CoreGradingSaveDefinitionsRequestFromJSON,
    CoreGradingSaveDefinitionsRequestToJSON,
    CoreGroupAddGroupMembersRequestFromJSON,
    CoreGroupAddGroupMembersRequestToJSON,
    CoreGroupAssignGroupingRequestFromJSON,
    CoreGroupAssignGroupingRequestToJSON,
    CoreGroupCreateGroupingsRequestFromJSON,
    CoreGroupCreateGroupingsRequestToJSON,
    CoreGroupCreateGroupsRequestFromJSON,
    CoreGroupCreateGroupsRequestToJSON,
    CoreGroupDeleteGroupMembersRequestFromJSON,
    CoreGroupDeleteGroupMembersRequestToJSON,
    CoreGroupDeleteGroupingsRequestFromJSON,
    CoreGroupDeleteGroupingsRequestToJSON,
    CoreGroupDeleteGroupsRequestFromJSON,
    CoreGroupDeleteGroupsRequestToJSON,
    CoreGroupGetActivityAllowedGroups200ResponseFromJSON,
    CoreGroupGetActivityAllowedGroups200ResponseToJSON,
    CoreGroupGetActivityAllowedGroupsRequestFromJSON,
    CoreGroupGetActivityAllowedGroupsRequestToJSON,
    CoreGroupGetActivityGroupmode200ResponseFromJSON,
    CoreGroupGetActivityGroupmode200ResponseToJSON,
    CoreGroupGetActivityGroupmodeRequestFromJSON,
    CoreGroupGetActivityGroupmodeRequestToJSON,
    CoreGroupGetCourseGroupingsRequestFromJSON,
    CoreGroupGetCourseGroupingsRequestToJSON,
    CoreGroupGetCourseUserGroups200ResponseFromJSON,
    CoreGroupGetCourseUserGroups200ResponseToJSON,
    CoreGroupGetCourseUserGroupsRequestFromJSON,
    CoreGroupGetCourseUserGroupsRequestToJSON,
    CoreGroupGetGroupMembersRequestFromJSON,
    CoreGroupGetGroupMembersRequestToJSON,
    CoreGroupGetGroupingsRequestFromJSON,
    CoreGroupGetGroupingsRequestToJSON,
    CoreGroupUnassignGroupingRequestFromJSON,
    CoreGroupUnassignGroupingRequestToJSON,
    CoreGroupUpdateGroupingsRequestFromJSON,
    CoreGroupUpdateGroupingsRequestToJSON,
    CoreGroupUpdateGroupsRequestFromJSON,
    CoreGroupUpdateGroupsRequestToJSON,
    CoreH5pGetTrustedH5pFile200ResponseFromJSON,
    CoreH5pGetTrustedH5pFile200ResponseToJSON,
    CoreH5pGetTrustedH5pFileRequestFromJSON,
    CoreH5pGetTrustedH5pFileRequestToJSON,
    CoreMessageBlockUserRequestFromJSON,
    CoreMessageBlockUserRequestToJSON,
    CoreMessageConfirmContactRequestRequestFromJSON,
    CoreMessageConfirmContactRequestRequestToJSON,
    CoreMessageCreateContactRequest200ResponseFromJSON,
    CoreMessageCreateContactRequest200ResponseToJSON,
    CoreMessageCreateContactRequestRequestFromJSON,
    CoreMessageCreateContactRequestRequestToJSON,
    CoreMessageDataForMessageareaSearchMessages200ResponseFromJSON,
    CoreMessageDataForMessageareaSearchMessages200ResponseToJSON,
    CoreMessageDataForMessageareaSearchMessagesRequestFromJSON,
    CoreMessageDataForMessageareaSearchMessagesRequestToJSON,
    CoreMessageDeleteContactsRequestFromJSON,
    CoreMessageDeleteContactsRequestToJSON,
    CoreMessageDeleteConversationsByIdRequestFromJSON,
    CoreMessageDeleteConversationsByIdRequestToJSON,
    CoreMessageDeleteMessage200ResponseFromJSON,
    CoreMessageDeleteMessage200ResponseToJSON,
    CoreMessageDeleteMessageForAllUsersRequestFromJSON,
    CoreMessageDeleteMessageForAllUsersRequestToJSON,
    CoreMessageDeleteMessageRequestFromJSON,
    CoreMessageDeleteMessageRequestToJSON,
    CoreMessageGetBlockedUsers200ResponseFromJSON,
    CoreMessageGetBlockedUsers200ResponseToJSON,
    CoreMessageGetBlockedUsersRequestFromJSON,
    CoreMessageGetBlockedUsersRequestToJSON,
    CoreMessageGetContactRequestsRequestFromJSON,
    CoreMessageGetContactRequestsRequestToJSON,
    CoreMessageGetConversation200ResponseFromJSON,
    CoreMessageGetConversation200ResponseToJSON,
    CoreMessageGetConversationBetweenUsers200ResponseFromJSON,
    CoreMessageGetConversationBetweenUsers200ResponseToJSON,
    CoreMessageGetConversationBetweenUsersRequestFromJSON,
    CoreMessageGetConversationBetweenUsersRequestToJSON,
    CoreMessageGetConversationCounts200ResponseFromJSON,
    CoreMessageGetConversationCounts200ResponseToJSON,
    CoreMessageGetConversationCountsRequestFromJSON,
    CoreMessageGetConversationCountsRequestToJSON,
    CoreMessageGetConversationMembersRequestFromJSON,
    CoreMessageGetConversationMembersRequestToJSON,
    CoreMessageGetConversationMessages200ResponseFromJSON,
    CoreMessageGetConversationMessages200ResponseToJSON,
    CoreMessageGetConversationMessagesRequestFromJSON,
    CoreMessageGetConversationMessagesRequestToJSON,
    CoreMessageGetConversationRequestFromJSON,
    CoreMessageGetConversationRequestToJSON,
    CoreMessageGetConversations200ResponseFromJSON,
    CoreMessageGetConversations200ResponseToJSON,
    CoreMessageGetConversationsRequestFromJSON,
    CoreMessageGetConversationsRequestToJSON,
    CoreMessageGetMemberInfoRequestFromJSON,
    CoreMessageGetMemberInfoRequestToJSON,
    CoreMessageGetMessageProcessor200ResponseFromJSON,
    CoreMessageGetMessageProcessor200ResponseToJSON,
    CoreMessageGetMessageProcessorRequestFromJSON,
    CoreMessageGetMessageProcessorRequestToJSON,
    CoreMessageGetMessages200ResponseFromJSON,
    CoreMessageGetMessages200ResponseToJSON,
    CoreMessageGetMessagesRequestFromJSON,
    CoreMessageGetMessagesRequestToJSON,
    CoreMessageGetReceivedContactRequestsCountRequestFromJSON,
    CoreMessageGetReceivedContactRequestsCountRequestToJSON,
    CoreMessageGetSelfConversationRequestFromJSON,
    CoreMessageGetSelfConversationRequestToJSON,
    CoreMessageGetUnreadConversationCounts200ResponseFromJSON,
    CoreMessageGetUnreadConversationCounts200ResponseToJSON,
    CoreMessageGetUnreadConversationsCountRequestFromJSON,
    CoreMessageGetUnreadConversationsCountRequestToJSON,
    CoreMessageGetUnreadNotificationCountRequestFromJSON,
    CoreMessageGetUnreadNotificationCountRequestToJSON,
    CoreMessageGetUserContactsRequestFromJSON,
    CoreMessageGetUserContactsRequestToJSON,
    CoreMessageGetUserMessagePreferences200ResponseFromJSON,
    CoreMessageGetUserMessagePreferences200ResponseToJSON,
    CoreMessageGetUserNotificationPreferences200ResponseFromJSON,
    CoreMessageGetUserNotificationPreferences200ResponseToJSON,
    CoreMessageMarkAllConversationMessagesAsReadRequestFromJSON,
    CoreMessageMarkAllConversationMessagesAsReadRequestToJSON,
    CoreMessageMarkAllNotificationsAsReadRequestFromJSON,
    CoreMessageMarkAllNotificationsAsReadRequestToJSON,
    CoreMessageMarkMessageRead200ResponseFromJSON,
    CoreMessageMarkMessageRead200ResponseToJSON,
    CoreMessageMarkMessageReadRequestFromJSON,
    CoreMessageMarkMessageReadRequestToJSON,
    CoreMessageMarkNotificationRead200ResponseFromJSON,
    CoreMessageMarkNotificationRead200ResponseToJSON,
    CoreMessageMarkNotificationReadRequestFromJSON,
    CoreMessageMarkNotificationReadRequestToJSON,
    CoreMessageMessageProcessorConfigFormRequestFromJSON,
    CoreMessageMessageProcessorConfigFormRequestToJSON,
    CoreMessageMessageSearchUsers200ResponseFromJSON,
    CoreMessageMessageSearchUsers200ResponseToJSON,
    CoreMessageMessageSearchUsersRequestFromJSON,
    CoreMessageMessageSearchUsersRequestToJSON,
    CoreMessageMuteConversationsRequestFromJSON,
    CoreMessageMuteConversationsRequestToJSON,
    CoreMessageSearchContactsRequestFromJSON,
    CoreMessageSearchContactsRequestToJSON,
    CoreMessageSendInstantMessagesRequestFromJSON,
    CoreMessageSendInstantMessagesRequestToJSON,
    CoreMessageSendMessagesToConversationRequestFromJSON,
    CoreMessageSendMessagesToConversationRequestToJSON,
    CoreMessageSetFavouriteConversationsRequestFromJSON,
    CoreMessageSetFavouriteConversationsRequestToJSON,
    CoreMessageUnblockUserRequestFromJSON,
    CoreMessageUnblockUserRequestToJSON,
    CoreMessageUnmuteConversationsRequestFromJSON,
    CoreMessageUnmuteConversationsRequestToJSON,
    CoreMoodlenetAuthCheck200ResponseFromJSON,
    CoreMoodlenetAuthCheck200ResponseToJSON,
    CoreMoodlenetAuthCheckRequestFromJSON,
    CoreMoodlenetAuthCheckRequestToJSON,
    CoreMoodlenetGetShareInfoActivity200ResponseFromJSON,
    CoreMoodlenetGetShareInfoActivity200ResponseToJSON,
    CoreMoodlenetGetShareInfoActivityRequestFromJSON,
    CoreMoodlenetGetShareInfoActivityRequestToJSON,
    CoreMoodlenetGetSharedCourseInfo200ResponseFromJSON,
    CoreMoodlenetGetSharedCourseInfo200ResponseToJSON,
    CoreMoodlenetGetSharedCourseInfoRequestFromJSON,
    CoreMoodlenetGetSharedCourseInfoRequestToJSON,
    CoreMoodlenetSendActivity200ResponseFromJSON,
    CoreMoodlenetSendActivity200ResponseToJSON,
    CoreMoodlenetSendActivityRequestFromJSON,
    CoreMoodlenetSendActivityRequestToJSON,
    CoreMoodlenetSendCourse200ResponseFromJSON,
    CoreMoodlenetSendCourse200ResponseToJSON,
    CoreMoodlenetSendCourseRequestFromJSON,
    CoreMoodlenetSendCourseRequestToJSON,
    CoreMyViewPageRequestFromJSON,
    CoreMyViewPageRequestToJSON,
    CoreNotesCreateNotesRequestFromJSON,
    CoreNotesCreateNotesRequestToJSON,
    CoreNotesDeleteNotesRequestFromJSON,
    CoreNotesDeleteNotesRequestToJSON,
    CoreNotesGetCourseNotes200ResponseFromJSON,
    CoreNotesGetCourseNotes200ResponseToJSON,
    CoreNotesGetCourseNotesRequestFromJSON,
    CoreNotesGetCourseNotesRequestToJSON,
    CoreNotesGetNotes200ResponseFromJSON,
    CoreNotesGetNotes200ResponseToJSON,
    CoreNotesGetNotesRequestFromJSON,
    CoreNotesGetNotesRequestToJSON,
    CoreNotesUpdateNotesRequestFromJSON,
    CoreNotesUpdateNotesRequestToJSON,
    CoreNotesViewNotesRequestFromJSON,
    CoreNotesViewNotesRequestToJSON,
    CoreOutputLoadFontawesomeIconSystemMapRequestFromJSON,
    CoreOutputLoadFontawesomeIconSystemMapRequestToJSON,
    CoreOutputLoadTemplateRequestFromJSON,
    CoreOutputLoadTemplateRequestToJSON,
    CoreOutputLoadTemplateWithDependencies200ResponseFromJSON,
    CoreOutputLoadTemplateWithDependencies200ResponseToJSON,
    CoreOutputLoadTemplateWithDependenciesRequestFromJSON,
    CoreOutputLoadTemplateWithDependenciesRequestToJSON,
    CorePaymentGetAvailableGatewaysRequestFromJSON,
    CorePaymentGetAvailableGatewaysRequestToJSON,
    CoreQuestionGetRandomQuestionSummaries200ResponseFromJSON,
    CoreQuestionGetRandomQuestionSummaries200ResponseToJSON,
    CoreQuestionGetRandomQuestionSummariesRequestFromJSON,
    CoreQuestionGetRandomQuestionSummariesRequestToJSON,
    CoreQuestionSubmitTagsForm200ResponseFromJSON,
    CoreQuestionSubmitTagsForm200ResponseToJSON,
    CoreQuestionSubmitTagsFormRequestFromJSON,
    CoreQuestionSubmitTagsFormRequestToJSON,
    CoreQuestionUpdateFlagRequestFromJSON,
    CoreQuestionUpdateFlagRequestToJSON,
    CoreRatingAddRating200ResponseFromJSON,
    CoreRatingAddRating200ResponseToJSON,
    CoreRatingAddRatingRequestFromJSON,
    CoreRatingAddRatingRequestToJSON,
    CoreRatingGetItemRatings200ResponseFromJSON,
    CoreRatingGetItemRatings200ResponseToJSON,
    CoreRatingGetItemRatingsRequestFromJSON,
    CoreRatingGetItemRatingsRequestToJSON,
    CoreReportbuilderAudiencesDeleteRequestFromJSON,
    CoreReportbuilderAudiencesDeleteRequestToJSON,
    CoreReportbuilderCanViewSystemReportRequestFromJSON,
    CoreReportbuilderCanViewSystemReportRequestToJSON,
    CoreReportbuilderColumnsAdd200ResponseFromJSON,
    CoreReportbuilderColumnsAdd200ResponseToJSON,
    CoreReportbuilderColumnsAddRequestFromJSON,
    CoreReportbuilderColumnsAddRequestToJSON,
    CoreReportbuilderColumnsDelete200ResponseFromJSON,
    CoreReportbuilderColumnsDelete200ResponseToJSON,
    CoreReportbuilderColumnsDeleteRequestFromJSON,
    CoreReportbuilderColumnsDeleteRequestToJSON,
    CoreReportbuilderColumnsReorderRequestFromJSON,
    CoreReportbuilderColumnsReorderRequestToJSON,
    CoreReportbuilderColumnsSortGetRequestFromJSON,
    CoreReportbuilderColumnsSortGetRequestToJSON,
    CoreReportbuilderColumnsSortReorderRequestFromJSON,
    CoreReportbuilderColumnsSortReorderRequestToJSON,
    CoreReportbuilderColumnsSortToggleRequestFromJSON,
    CoreReportbuilderColumnsSortToggleRequestToJSON,
    CoreReportbuilderConditionsAdd200ResponseFromJSON,
    CoreReportbuilderConditionsAdd200ResponseToJSON,
    CoreReportbuilderConditionsAddRequestFromJSON,
    CoreReportbuilderConditionsAddRequestToJSON,
    CoreReportbuilderConditionsDelete200ResponseFromJSON,
    CoreReportbuilderConditionsDelete200ResponseToJSON,
    CoreReportbuilderConditionsDeleteRequestFromJSON,
    CoreReportbuilderConditionsDeleteRequestToJSON,
    CoreReportbuilderConditionsReorderRequestFromJSON,
    CoreReportbuilderConditionsReorderRequestToJSON,
    CoreReportbuilderFiltersAdd200ResponseFromJSON,
    CoreReportbuilderFiltersAdd200ResponseToJSON,
    CoreReportbuilderFiltersAddRequestFromJSON,
    CoreReportbuilderFiltersAddRequestToJSON,
    CoreReportbuilderFiltersDelete200ResponseFromJSON,
    CoreReportbuilderFiltersDelete200ResponseToJSON,
    CoreReportbuilderFiltersDeleteRequestFromJSON,
    CoreReportbuilderFiltersDeleteRequestToJSON,
    CoreReportbuilderFiltersReorderRequestFromJSON,
    CoreReportbuilderFiltersReorderRequestToJSON,
    CoreReportbuilderFiltersResetRequestFromJSON,
    CoreReportbuilderFiltersResetRequestToJSON,
    CoreReportbuilderListReports200ResponseFromJSON,
    CoreReportbuilderListReports200ResponseToJSON,
    CoreReportbuilderListReportsRequestFromJSON,
    CoreReportbuilderListReportsRequestToJSON,
    CoreReportbuilderReportsGet200ResponseFromJSON,
    CoreReportbuilderReportsGet200ResponseToJSON,
    CoreReportbuilderReportsGetRequestFromJSON,
    CoreReportbuilderReportsGetRequestToJSON,
    CoreReportbuilderRetrieveReport200ResponseFromJSON,
    CoreReportbuilderRetrieveReport200ResponseToJSON,
    CoreReportbuilderRetrieveReportRequestFromJSON,
    CoreReportbuilderRetrieveReportRequestToJSON,
    CoreReportbuilderRetrieveSystemReport200ResponseFromJSON,
    CoreReportbuilderRetrieveSystemReport200ResponseToJSON,
    CoreReportbuilderRetrieveSystemReportRequestFromJSON,
    CoreReportbuilderRetrieveSystemReportRequestToJSON,
    CoreReportbuilderSchedulesDeleteRequestFromJSON,
    CoreReportbuilderSchedulesDeleteRequestToJSON,
    CoreReportbuilderSchedulesSendRequestFromJSON,
    CoreReportbuilderSchedulesSendRequestToJSON,
    CoreReportbuilderSchedulesToggleRequestFromJSON,
    CoreReportbuilderSchedulesToggleRequestToJSON,
    CoreReportbuilderSetFiltersRequestFromJSON,
    CoreReportbuilderSetFiltersRequestToJSON,
    CoreReportbuilderViewReport200ResponseFromJSON,
    CoreReportbuilderViewReport200ResponseToJSON,
    CoreRoleAssignRolesRequestFromJSON,
    CoreRoleAssignRolesRequestToJSON,
    CoreRoleUnassignRolesRequestFromJSON,
    CoreRoleUnassignRolesRequestToJSON,
    CoreSearchGetRelevantUsersRequestFromJSON,
    CoreSearchGetRelevantUsersRequestToJSON,
    CoreSearchGetResults200ResponseFromJSON,
    CoreSearchGetResults200ResponseToJSON,
    CoreSearchGetResultsRequestFromJSON,
    CoreSearchGetResultsRequestToJSON,
    CoreSearchGetSearchAreasList200ResponseFromJSON,
    CoreSearchGetSearchAreasList200ResponseToJSON,
    CoreSearchGetSearchAreasListRequestFromJSON,
    CoreSearchGetSearchAreasListRequestToJSON,
    CoreSearchGetTopResults200ResponseFromJSON,
    CoreSearchGetTopResults200ResponseToJSON,
    CoreSearchGetTopResultsRequestFromJSON,
    CoreSearchGetTopResultsRequestToJSON,
    CoreSearchViewResultsRequestFromJSON,
    CoreSearchViewResultsRequestToJSON,
    CoreSessionTimeRemaining200ResponseFromJSON,
    CoreSessionTimeRemaining200ResponseToJSON,
    CoreTableGetDynamicTableContent200ResponseFromJSON,
    CoreTableGetDynamicTableContent200ResponseToJSON,
    CoreTableGetDynamicTableContentRequestFromJSON,
    CoreTableGetDynamicTableContentRequestToJSON,
    CoreTagGetTagAreas200ResponseFromJSON,
    CoreTagGetTagAreas200ResponseToJSON,
    CoreTagGetTagCloud200ResponseFromJSON,
    CoreTagGetTagCloud200ResponseToJSON,
    CoreTagGetTagCloudRequestFromJSON,
    CoreTagGetTagCloudRequestToJSON,
    CoreTagGetTagCollections200ResponseFromJSON,
    CoreTagGetTagCollections200ResponseToJSON,
    CoreTagGetTagindex200ResponseFromJSON,
    CoreTagGetTagindex200ResponseToJSON,
    CoreTagGetTagindexPerAreaRequestFromJSON,
    CoreTagGetTagindexPerAreaRequestToJSON,
    CoreTagGetTagindexRequestFromJSON,
    CoreTagGetTagindexRequestToJSON,
    CoreTagGetTags200ResponseFromJSON,
    CoreTagGetTags200ResponseToJSON,
    CoreTagGetTagsRequestFromJSON,
    CoreTagGetTagsRequestToJSON,
    CoreTagUpdateTagsRequestFromJSON,
    CoreTagUpdateTagsRequestToJSON,
    CoreUpdateInplaceEditable200ResponseFromJSON,
    CoreUpdateInplaceEditable200ResponseToJSON,
    CoreUpdateInplaceEditableRequestFromJSON,
    CoreUpdateInplaceEditableRequestToJSON,
    CoreUserAddUserDeviceRequestFromJSON,
    CoreUserAddUserDeviceRequestToJSON,
    CoreUserAddUserPrivateFilesRequestFromJSON,
    CoreUserAddUserPrivateFilesRequestToJSON,
    CoreUserAgreeSitePolicy200ResponseFromJSON,
    CoreUserAgreeSitePolicy200ResponseToJSON,
    CoreUserCreateUsersRequestFromJSON,
    CoreUserCreateUsersRequestToJSON,
    CoreUserDeleteUsersRequestFromJSON,
    CoreUserDeleteUsersRequestToJSON,
    CoreUserGetCourseUserProfilesRequestFromJSON,
    CoreUserGetCourseUserProfilesRequestToJSON,
    CoreUserGetPrivateFilesInfo200ResponseFromJSON,
    CoreUserGetPrivateFilesInfo200ResponseToJSON,
    CoreUserGetPrivateFilesInfoRequestFromJSON,
    CoreUserGetPrivateFilesInfoRequestToJSON,
    CoreUserGetUserPreferences200ResponseFromJSON,
    CoreUserGetUserPreferences200ResponseToJSON,
    CoreUserGetUserPreferencesRequestFromJSON,
    CoreUserGetUserPreferencesRequestToJSON,
    CoreUserGetUsers200ResponseFromJSON,
    CoreUserGetUsers200ResponseToJSON,
    CoreUserGetUsersByFieldRequestFromJSON,
    CoreUserGetUsersByFieldRequestToJSON,
    CoreUserGetUsersRequestFromJSON,
    CoreUserGetUsersRequestToJSON,
    CoreUserRemoveUserDevice200ResponseFromJSON,
    CoreUserRemoveUserDevice200ResponseToJSON,
    CoreUserRemoveUserDeviceRequestFromJSON,
    CoreUserRemoveUserDeviceRequestToJSON,
    CoreUserSearchIdentity200ResponseFromJSON,
    CoreUserSearchIdentity200ResponseToJSON,
    CoreUserSearchIdentityRequestFromJSON,
    CoreUserSearchIdentityRequestToJSON,
    CoreUserSetUserPreferences200ResponseFromJSON,
    CoreUserSetUserPreferences200ResponseToJSON,
    CoreUserSetUserPreferencesRequestFromJSON,
    CoreUserSetUserPreferencesRequestToJSON,
    CoreUserUpdatePicture200ResponseFromJSON,
    CoreUserUpdatePicture200ResponseToJSON,
    CoreUserUpdatePictureRequestFromJSON,
    CoreUserUpdatePictureRequestToJSON,
    CoreUserUpdateUserDevicePublicKey200ResponseFromJSON,
    CoreUserUpdateUserDevicePublicKey200ResponseToJSON,
    CoreUserUpdateUserDevicePublicKeyRequestFromJSON,
    CoreUserUpdateUserDevicePublicKeyRequestToJSON,
    CoreUserUpdateUserPreferencesRequestFromJSON,
    CoreUserUpdateUserPreferencesRequestToJSON,
    CoreUserUpdateUsersRequestFromJSON,
    CoreUserUpdateUsersRequestToJSON,
    CoreUserViewUserListRequestFromJSON,
    CoreUserViewUserListRequestToJSON,
    CoreUserViewUserProfileRequestFromJSON,
    CoreUserViewUserProfileRequestToJSON,
    CoreWebserviceGetSiteInfo200ResponseFromJSON,
    CoreWebserviceGetSiteInfo200ResponseToJSON,
    CoreWebserviceGetSiteInfoRequestFromJSON,
    CoreWebserviceGetSiteInfoRequestToJSON,
    CoreXapiDeleteStateRequestFromJSON,
    CoreXapiDeleteStateRequestToJSON,
    CoreXapiDeleteStatesRequestFromJSON,
    CoreXapiDeleteStatesRequestToJSON,
    CoreXapiGetStateRequestFromJSON,
    CoreXapiGetStateRequestToJSON,
    CoreXapiGetStatesRequestFromJSON,
    CoreXapiGetStatesRequestToJSON,
    CoreXapiPostStateRequestFromJSON,
    CoreXapiPostStateRequestToJSON,
    CoreXapiStatementPostRequestFromJSON,
    CoreXapiStatementPostRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface CoreAdminSetBlockProtectionOperationRequest {
    coreAdminSetBlockProtectionRequest: CoreAdminSetBlockProtectionRequest;
}

export interface CoreAdminSetPluginOrderOperationRequest {
    coreAdminSetPluginOrderRequest: CoreAdminSetPluginOrderRequest;
}

export interface CoreAdminSetPluginStateOperationRequest {
    coreAdminSetPluginStateRequest: CoreAdminSetPluginStateRequest;
}

export interface CoreAuthConfirmUserOperationRequest {
    coreAuthConfirmUserRequest: CoreAuthConfirmUserRequest;
}

export interface CoreAuthIsMinorOperationRequest {
    coreAuthIsMinorRequest: CoreAuthIsMinorRequest;
}

export interface CoreAuthRequestPasswordResetOperationRequest {
    coreAuthRequestPasswordResetRequest: CoreAuthRequestPasswordResetRequest;
}

export interface CoreAuthResendConfirmationEmailOperationRequest {
    coreAuthResendConfirmationEmailRequest: CoreAuthResendConfirmationEmailRequest;
}

export interface CoreBackupGetAsyncBackupLinksBackupOperationRequest {
    coreBackupGetAsyncBackupLinksBackupRequest: CoreBackupGetAsyncBackupLinksBackupRequest;
}

export interface CoreBackupGetAsyncBackupLinksRestoreOperationRequest {
    coreBackupGetAsyncBackupLinksRestoreRequest: CoreBackupGetAsyncBackupLinksRestoreRequest;
}

export interface CoreBackupGetAsyncBackupProgressOperationRequest {
    coreBackupGetAsyncBackupProgressRequest: CoreBackupGetAsyncBackupProgressRequest;
}

export interface CoreBackupGetCopyProgressOperationRequest {
    coreBackupGetCopyProgressRequest: CoreBackupGetCopyProgressRequest;
}

export interface CoreBackupSubmitCopyFormOperationRequest {
    coreBackupSubmitCopyFormRequest: CoreBackupSubmitCopyFormRequest;
}

export interface CoreBadgesGetUserBadgeByHashOperationRequest {
    coreBadgesGetUserBadgeByHashRequest: CoreBadgesGetUserBadgeByHashRequest;
}

export interface CoreBadgesGetUserBadgesOperationRequest {
    coreBadgesGetUserBadgesRequest: CoreBadgesGetUserBadgesRequest;
}

export interface CoreBlockFetchAddableBlocksOperationRequest {
    coreBlockFetchAddableBlocksRequest: CoreBlockFetchAddableBlocksRequest;
}

export interface CoreBlockGetCourseBlocksOperationRequest {
    coreBlockGetCourseBlocksRequest: CoreBlockGetCourseBlocksRequest;
}

export interface CoreBlockGetDashboardBlocksOperationRequest {
    coreBlockGetDashboardBlocksRequest: CoreBlockGetDashboardBlocksRequest;
}

export interface CoreBlogGetEntriesOperationRequest {
    coreBlogGetEntriesRequest: CoreBlogGetEntriesRequest;
}

export interface CoreBlogViewEntriesOperationRequest {
    coreBlogViewEntriesRequest: CoreBlogViewEntriesRequest;
}

export interface CoreCalendarCreateCalendarEventsOperationRequest {
    coreCalendarCreateCalendarEventsRequest: CoreCalendarCreateCalendarEventsRequest;
}

export interface CoreCalendarDeleteCalendarEventsOperationRequest {
    coreCalendarDeleteCalendarEventsRequest: CoreCalendarDeleteCalendarEventsRequest;
}

export interface CoreCalendarDeleteSubscriptionOperationRequest {
    coreCalendarDeleteSubscriptionRequest: CoreCalendarDeleteSubscriptionRequest;
}

export interface CoreCalendarGetActionEventsByCourseOperationRequest {
    coreCalendarGetActionEventsByCourseRequest: CoreCalendarGetActionEventsByCourseRequest;
}

export interface CoreCalendarGetActionEventsByCoursesOperationRequest {
    coreCalendarGetActionEventsByCoursesRequest: CoreCalendarGetActionEventsByCoursesRequest;
}

export interface CoreCalendarGetActionEventsByTimesortOperationRequest {
    coreCalendarGetActionEventsByTimesortRequest: CoreCalendarGetActionEventsByTimesortRequest;
}

export interface CoreCalendarGetAllowedEventTypesOperationRequest {
    coreCalendarGetAllowedEventTypesRequest: CoreCalendarGetAllowedEventTypesRequest;
}

export interface CoreCalendarGetCalendarAccessInformationOperationRequest {
    coreCalendarGetCalendarAccessInformationRequest: CoreCalendarGetCalendarAccessInformationRequest;
}

export interface CoreCalendarGetCalendarDayViewOperationRequest {
    coreCalendarGetCalendarDayViewRequest: CoreCalendarGetCalendarDayViewRequest;
}

export interface CoreCalendarGetCalendarEventByIdOperationRequest {
    coreCalendarGetCalendarEventByIdRequest: CoreCalendarGetCalendarEventByIdRequest;
}

export interface CoreCalendarGetCalendarEventsOperationRequest {
    coreCalendarGetCalendarEventsRequest: CoreCalendarGetCalendarEventsRequest;
}

export interface CoreCalendarGetCalendarMonthlyViewOperationRequest {
    coreCalendarGetCalendarMonthlyViewRequest: CoreCalendarGetCalendarMonthlyViewRequest;
}

export interface CoreCalendarGetCalendarUpcomingViewOperationRequest {
    coreCalendarGetCalendarUpcomingViewRequest: CoreCalendarGetCalendarUpcomingViewRequest;
}

export interface CoreCalendarGetTimestampsOperationRequest {
    coreCalendarGetTimestampsRequest: CoreCalendarGetTimestampsRequest;
}

export interface CoreCalendarSubmitCreateUpdateFormOperationRequest {
    coreCalendarSubmitCreateUpdateFormRequest: CoreCalendarSubmitCreateUpdateFormRequest;
}

export interface CoreCalendarUpdateEventStartDayOperationRequest {
    coreCalendarUpdateEventStartDayRequest: CoreCalendarUpdateEventStartDayRequest;
}

export interface CoreChangeEditmodeOperationRequest {
    coreChangeEditmodeRequest: CoreChangeEditmodeRequest;
}

export interface CoreCohortAddCohortMembersOperationRequest {
    coreCohortAddCohortMembersRequest: CoreCohortAddCohortMembersRequest;
}

export interface CoreCohortCreateCohortsOperationRequest {
    coreCohortCreateCohortsRequest: CoreCohortCreateCohortsRequest;
}

export interface CoreCohortDeleteCohortMembersOperationRequest {
    coreCohortDeleteCohortMembersRequest: CoreCohortDeleteCohortMembersRequest;
}

export interface CoreCohortDeleteCohortsOperationRequest {
    coreCohortDeleteCohortsRequest: CoreCohortDeleteCohortsRequest;
}

export interface CoreCohortGetCohortMembersOperationRequest {
    coreCohortGetCohortMembersRequest: CoreCohortGetCohortMembersRequest;
}

export interface CoreCohortGetCohortsOperationRequest {
    coreCohortGetCohortsRequest: CoreCohortGetCohortsRequest;
}

export interface CoreCohortSearchCohortsOperationRequest {
    coreCohortSearchCohortsRequest: CoreCohortSearchCohortsRequest;
}

export interface CoreCohortUpdateCohortsOperationRequest {
    coreCohortUpdateCohortsRequest: CoreCohortUpdateCohortsRequest;
}

export interface CoreCommentAddCommentsOperationRequest {
    coreCommentAddCommentsRequest: CoreCommentAddCommentsRequest;
}

export interface CoreCommentDeleteCommentsOperationRequest {
    coreCommentDeleteCommentsRequest: CoreCommentDeleteCommentsRequest;
}

export interface CoreCommentGetCommentsOperationRequest {
    coreCommentGetCommentsRequest: CoreCommentGetCommentsRequest;
}

export interface CoreCompetencyAddCompetencyToCourseOperationRequest {
    coreCompetencyAddCompetencyToCourseRequest: CoreCompetencyAddCompetencyToCourseRequest;
}

export interface CoreCompetencyAddCompetencyToPlanOperationRequest {
    coreCompetencyAddCompetencyToPlanRequest: CoreCompetencyAddCompetencyToPlanRequest;
}

export interface CoreCompetencyAddCompetencyToTemplateOperationRequest {
    coreCompetencyAddCompetencyToTemplateRequest: CoreCompetencyAddCompetencyToTemplateRequest;
}

export interface CoreCompetencyAddRelatedCompetencyOperationRequest {
    coreCompetencyAddRelatedCompetencyRequest: CoreCompetencyAddRelatedCompetencyRequest;
}

export interface CoreCompetencyApprovePlanOperationRequest {
    coreCompetencyApprovePlanRequest: CoreCompetencyApprovePlanRequest;
}

export interface CoreCompetencyCompetencyFrameworkViewedOperationRequest {
    coreCompetencyCompetencyFrameworkViewedRequest: CoreCompetencyCompetencyFrameworkViewedRequest;
}

export interface CoreCompetencyCompetencyViewedOperationRequest {
    coreCompetencyCompetencyViewedRequest: CoreCompetencyCompetencyViewedRequest;
}

export interface CoreCompetencyCompletePlanOperationRequest {
    coreCompetencyCompletePlanRequest: CoreCompetencyCompletePlanRequest;
}

export interface CoreCompetencyCountCompetenciesOperationRequest {
    coreCompetencyCountCompetenciesRequest: CoreCompetencyCountCompetenciesRequest;
}

export interface CoreCompetencyCountCompetenciesInCourseOperationRequest {
    coreCompetencyCountCompetenciesInCourseRequest: CoreCompetencyCountCompetenciesInCourseRequest;
}

export interface CoreCompetencyCountCompetenciesInTemplateOperationRequest {
    coreCompetencyCountCompetenciesInTemplateRequest: CoreCompetencyCountCompetenciesInTemplateRequest;
}

export interface CoreCompetencyCountCompetencyFrameworksOperationRequest {
    coreCompetencyCountCompetencyFrameworksRequest: CoreCompetencyCountCompetencyFrameworksRequest;
}

export interface CoreCompetencyCountCourseModuleCompetenciesOperationRequest {
    coreCompetencyCountCourseModuleCompetenciesRequest: CoreCompetencyCountCourseModuleCompetenciesRequest;
}

export interface CoreCompetencyCountCoursesUsingCompetencyRequest {
    coreCompetencyCompetencyViewedRequest: CoreCompetencyCompetencyViewedRequest;
}

export interface CoreCompetencyCountTemplatesRequest {
    coreCompetencyCountCompetencyFrameworksRequest: CoreCompetencyCountCompetencyFrameworksRequest;
}

export interface CoreCompetencyCountTemplatesUsingCompetencyRequest {
    coreCompetencyCompetencyViewedRequest: CoreCompetencyCompetencyViewedRequest;
}

export interface CoreCompetencyCreateCompetencyOperationRequest {
    coreCompetencyCreateCompetencyRequest: CoreCompetencyCreateCompetencyRequest;
}

export interface CoreCompetencyCreateCompetencyFrameworkOperationRequest {
    coreCompetencyCreateCompetencyFrameworkRequest: CoreCompetencyCreateCompetencyFrameworkRequest;
}

export interface CoreCompetencyCreatePlanOperationRequest {
    coreCompetencyCreatePlanRequest: CoreCompetencyCreatePlanRequest;
}

export interface CoreCompetencyCreateTemplateOperationRequest {
    coreCompetencyCreateTemplateRequest: CoreCompetencyCreateTemplateRequest;
}

export interface CoreCompetencyCreateUserEvidenceCompetencyOperationRequest {
    coreCompetencyCreateUserEvidenceCompetencyRequest: CoreCompetencyCreateUserEvidenceCompetencyRequest;
}

export interface CoreCompetencyDeleteCompetencyOperationRequest {
    coreCompetencyDeleteCompetencyRequest: CoreCompetencyDeleteCompetencyRequest;
}

export interface CoreCompetencyDeleteCompetencyFrameworkOperationRequest {
    coreCompetencyDeleteCompetencyFrameworkRequest: CoreCompetencyDeleteCompetencyFrameworkRequest;
}

export interface CoreCompetencyDeleteEvidenceOperationRequest {
    coreCompetencyDeleteEvidenceRequest: CoreCompetencyDeleteEvidenceRequest;
}

export interface CoreCompetencyDeletePlanOperationRequest {
    coreCompetencyDeletePlanRequest: CoreCompetencyDeletePlanRequest;
}

export interface CoreCompetencyDeleteTemplateOperationRequest {
    coreCompetencyDeleteTemplateRequest: CoreCompetencyDeleteTemplateRequest;
}

export interface CoreCompetencyDeleteUserEvidenceOperationRequest {
    coreCompetencyDeleteUserEvidenceRequest: CoreCompetencyDeleteUserEvidenceRequest;
}

export interface CoreCompetencyDeleteUserEvidenceCompetencyOperationRequest {
    coreCompetencyDeleteUserEvidenceCompetencyRequest: CoreCompetencyDeleteUserEvidenceCompetencyRequest;
}

export interface CoreCompetencyDuplicateCompetencyFrameworkOperationRequest {
    coreCompetencyDuplicateCompetencyFrameworkRequest: CoreCompetencyDuplicateCompetencyFrameworkRequest;
}

export interface CoreCompetencyDuplicateTemplateRequest {
    coreCompetencyCountCompetenciesInTemplateRequest: CoreCompetencyCountCompetenciesInTemplateRequest;
}

export interface CoreCompetencyGetScaleValuesOperationRequest {
    coreCompetencyGetScaleValuesRequest: CoreCompetencyGetScaleValuesRequest;
}

export interface CoreCompetencyGradeCompetencyOperationRequest {
    coreCompetencyGradeCompetencyRequest: CoreCompetencyGradeCompetencyRequest;
}

export interface CoreCompetencyGradeCompetencyInCourseOperationRequest {
    coreCompetencyGradeCompetencyInCourseRequest: CoreCompetencyGradeCompetencyInCourseRequest;
}

export interface CoreCompetencyGradeCompetencyInPlanOperationRequest {
    coreCompetencyGradeCompetencyInPlanRequest: CoreCompetencyGradeCompetencyInPlanRequest;
}

export interface CoreCompetencyListCompetenciesOperationRequest {
    coreCompetencyListCompetenciesRequest: CoreCompetencyListCompetenciesRequest;
}

export interface CoreCompetencyListCompetenciesInTemplateRequest {
    coreCompetencyCountCompetenciesInTemplateRequest: CoreCompetencyCountCompetenciesInTemplateRequest;
}

export interface CoreCompetencyListCompetencyFrameworksOperationRequest {
    coreCompetencyListCompetencyFrameworksRequest: CoreCompetencyListCompetencyFrameworksRequest;
}

export interface CoreCompetencyListCourseCompetenciesRequest {
    coreCompetencyCountCompetenciesInCourseRequest: CoreCompetencyCountCompetenciesInCourseRequest;
}

export interface CoreCompetencyListCourseModuleCompetenciesOperationRequest {
    coreCompetencyListCourseModuleCompetenciesRequest: CoreCompetencyListCourseModuleCompetenciesRequest;
}

export interface CoreCompetencyListPlanCompetenciesOperationRequest {
    coreCompetencyListPlanCompetenciesRequest: CoreCompetencyListPlanCompetenciesRequest;
}

export interface CoreCompetencyListTemplatesOperationRequest {
    coreCompetencyListTemplatesRequest: CoreCompetencyListTemplatesRequest;
}

export interface CoreCompetencyListTemplatesUsingCompetencyRequest {
    coreCompetencyCompetencyViewedRequest: CoreCompetencyCompetencyViewedRequest;
}

export interface CoreCompetencyListUserPlansOperationRequest {
    coreCompetencyListUserPlansRequest: CoreCompetencyListUserPlansRequest;
}

export interface CoreCompetencyMoveDownCompetencyRequest {
    coreCompetencyCompetencyViewedRequest: CoreCompetencyCompetencyViewedRequest;
}

export interface CoreCompetencyMoveUpCompetencyRequest {
    coreCompetencyCompetencyViewedRequest: CoreCompetencyCompetencyViewedRequest;
}

export interface CoreCompetencyPlanCancelReviewRequestOperationRequest {
    coreCompetencyPlanCancelReviewRequestRequest: CoreCompetencyPlanCancelReviewRequestRequest;
}

export interface CoreCompetencyPlanRequestReviewRequest {
    coreCompetencyPlanCancelReviewRequestRequest: CoreCompetencyPlanCancelReviewRequestRequest;
}

export interface CoreCompetencyPlanStartReviewRequest {
    coreCompetencyPlanCancelReviewRequestRequest: CoreCompetencyPlanCancelReviewRequestRequest;
}

export interface CoreCompetencyPlanStopReviewRequest {
    coreCompetencyPlanCancelReviewRequestRequest: CoreCompetencyPlanCancelReviewRequestRequest;
}

export interface CoreCompetencyReadCompetencyOperationRequest {
    coreCompetencyReadCompetencyRequest: CoreCompetencyReadCompetencyRequest;
}

export interface CoreCompetencyReadCompetencyFrameworkRequest {
    coreCompetencyDuplicateCompetencyFrameworkRequest: CoreCompetencyDuplicateCompetencyFrameworkRequest;
}

export interface CoreCompetencyReadPlanOperationRequest {
    coreCompetencyReadPlanRequest: CoreCompetencyReadPlanRequest;
}

export interface CoreCompetencyReadTemplateOperationRequest {
    coreCompetencyReadTemplateRequest: CoreCompetencyReadTemplateRequest;
}

export interface CoreCompetencyReadUserEvidenceRequest {
    coreCompetencyDeleteUserEvidenceRequest: CoreCompetencyDeleteUserEvidenceRequest;
}

export interface CoreCompetencyRemoveCompetencyFromCourseOperationRequest {
    coreCompetencyRemoveCompetencyFromCourseRequest: CoreCompetencyRemoveCompetencyFromCourseRequest;
}

export interface CoreCompetencyRemoveCompetencyFromPlanOperationRequest {
    coreCompetencyRemoveCompetencyFromPlanRequest: CoreCompetencyRemoveCompetencyFromPlanRequest;
}

export interface CoreCompetencyRemoveCompetencyFromTemplateOperationRequest {
    coreCompetencyRemoveCompetencyFromTemplateRequest: CoreCompetencyRemoveCompetencyFromTemplateRequest;
}

export interface CoreCompetencyRemoveRelatedCompetencyOperationRequest {
    coreCompetencyRemoveRelatedCompetencyRequest: CoreCompetencyRemoveRelatedCompetencyRequest;
}

export interface CoreCompetencyReopenPlanRequest {
    coreCompetencyCompletePlanRequest: CoreCompetencyCompletePlanRequest;
}

export interface CoreCompetencyReorderCourseCompetencyOperationRequest {
    coreCompetencyReorderCourseCompetencyRequest: CoreCompetencyReorderCourseCompetencyRequest;
}

export interface CoreCompetencyReorderPlanCompetencyOperationRequest {
    coreCompetencyReorderPlanCompetencyRequest: CoreCompetencyReorderPlanCompetencyRequest;
}

export interface CoreCompetencyReorderTemplateCompetencyOperationRequest {
    coreCompetencyReorderTemplateCompetencyRequest: CoreCompetencyReorderTemplateCompetencyRequest;
}

export interface CoreCompetencyRequestReviewOfUserEvidenceLinkedCompetenciesRequest {
    coreCompetencyDeleteUserEvidenceRequest: CoreCompetencyDeleteUserEvidenceRequest;
}

export interface CoreCompetencySearchCompetenciesOperationRequest {
    coreCompetencySearchCompetenciesRequest: CoreCompetencySearchCompetenciesRequest;
}

export interface CoreCompetencySetCourseCompetencyRuleoutcomeOperationRequest {
    coreCompetencySetCourseCompetencyRuleoutcomeRequest: CoreCompetencySetCourseCompetencyRuleoutcomeRequest;
}

export interface CoreCompetencySetParentCompetencyOperationRequest {
    coreCompetencySetParentCompetencyRequest: CoreCompetencySetParentCompetencyRequest;
}

export interface CoreCompetencyTemplateHasRelatedDataRequest {
    coreCompetencyCountCompetenciesInTemplateRequest: CoreCompetencyCountCompetenciesInTemplateRequest;
}

export interface CoreCompetencyTemplateViewedRequest {
    coreCompetencyReadTemplateRequest: CoreCompetencyReadTemplateRequest;
}

export interface CoreCompetencyUnapprovePlanRequest {
    coreCompetencyPlanCancelReviewRequestRequest: CoreCompetencyPlanCancelReviewRequestRequest;
}

export interface CoreCompetencyUnlinkPlanFromTemplateOperationRequest {
    coreCompetencyUnlinkPlanFromTemplateRequest: CoreCompetencyUnlinkPlanFromTemplateRequest;
}

export interface CoreCompetencyUpdateCompetencyOperationRequest {
    coreCompetencyUpdateCompetencyRequest: CoreCompetencyUpdateCompetencyRequest;
}

export interface CoreCompetencyUpdateCompetencyFrameworkOperationRequest {
    coreCompetencyUpdateCompetencyFrameworkRequest: CoreCompetencyUpdateCompetencyFrameworkRequest;
}

export interface CoreCompetencyUpdateCourseCompetencySettingsOperationRequest {
    coreCompetencyUpdateCourseCompetencySettingsRequest: CoreCompetencyUpdateCourseCompetencySettingsRequest;
}

export interface CoreCompetencyUpdatePlanOperationRequest {
    coreCompetencyUpdatePlanRequest: CoreCompetencyUpdatePlanRequest;
}

export interface CoreCompetencyUpdateTemplateOperationRequest {
    coreCompetencyUpdateTemplateRequest: CoreCompetencyUpdateTemplateRequest;
}

export interface CoreCompetencyUserCompetencyCancelReviewRequestOperationRequest {
    coreCompetencyUserCompetencyCancelReviewRequestRequest: CoreCompetencyUserCompetencyCancelReviewRequestRequest;
}

export interface CoreCompetencyUserCompetencyPlanViewedOperationRequest {
    coreCompetencyUserCompetencyPlanViewedRequest: CoreCompetencyUserCompetencyPlanViewedRequest;
}

export interface CoreCompetencyUserCompetencyRequestReviewOperationRequest {
    coreCompetencyUserCompetencyRequestReviewRequest: CoreCompetencyUserCompetencyRequestReviewRequest;
}

export interface CoreCompetencyUserCompetencyStartReviewRequest {
    coreCompetencyUserCompetencyRequestReviewRequest: CoreCompetencyUserCompetencyRequestReviewRequest;
}

export interface CoreCompetencyUserCompetencyStopReviewRequest {
    coreCompetencyUserCompetencyRequestReviewRequest: CoreCompetencyUserCompetencyRequestReviewRequest;
}

export interface CoreCompetencyUserCompetencyViewedOperationRequest {
    coreCompetencyUserCompetencyViewedRequest: CoreCompetencyUserCompetencyViewedRequest;
}

export interface CoreCompetencyUserCompetencyViewedInCourseOperationRequest {
    coreCompetencyUserCompetencyViewedInCourseRequest: CoreCompetencyUserCompetencyViewedInCourseRequest;
}

export interface CoreCompetencyUserCompetencyViewedInPlanRequest {
    coreCompetencyUserCompetencyPlanViewedRequest: CoreCompetencyUserCompetencyPlanViewedRequest;
}

export interface CoreCompletionGetActivitiesCompletionStatusOperationRequest {
    coreCompletionGetActivitiesCompletionStatusRequest: CoreCompletionGetActivitiesCompletionStatusRequest;
}

export interface CoreCompletionGetCourseCompletionStatusRequest {
    coreCompletionGetActivitiesCompletionStatusRequest: CoreCompletionGetActivitiesCompletionStatusRequest;
}

export interface CoreCompletionMarkCourseSelfCompletedOperationRequest {
    coreCompletionMarkCourseSelfCompletedRequest: CoreCompletionMarkCourseSelfCompletedRequest;
}

export interface CoreCompletionOverrideActivityCompletionStatusOperationRequest {
    coreCompletionOverrideActivityCompletionStatusRequest: CoreCompletionOverrideActivityCompletionStatusRequest;
}

export interface CoreCompletionUpdateActivityCompletionStatusManuallyOperationRequest {
    coreCompletionUpdateActivityCompletionStatusManuallyRequest: CoreCompletionUpdateActivityCompletionStatusManuallyRequest;
}

export interface CoreContentbankCopyContentOperationRequest {
    coreContentbankCopyContentRequest: CoreContentbankCopyContentRequest;
}

export interface CoreContentbankDeleteContentOperationRequest {
    coreContentbankDeleteContentRequest: CoreContentbankDeleteContentRequest;
}

export interface CoreContentbankRenameContentOperationRequest {
    coreContentbankRenameContentRequest: CoreContentbankRenameContentRequest;
}

export interface CoreContentbankSetContentVisibilityOperationRequest {
    coreContentbankSetContentVisibilityRequest: CoreContentbankSetContentVisibilityRequest;
}

export interface CoreCourseAddContentItemToUserFavouritesOperationRequest {
    coreCourseAddContentItemToUserFavouritesRequest: CoreCourseAddContentItemToUserFavouritesRequest;
}

export interface CoreCourseCheckUpdatesOperationRequest {
    coreCourseCheckUpdatesRequest: CoreCourseCheckUpdatesRequest;
}

export interface CoreCourseCreateCategoriesOperationRequest {
    coreCourseCreateCategoriesRequest: CoreCourseCreateCategoriesRequest;
}

export interface CoreCourseCreateCoursesOperationRequest {
    coreCourseCreateCoursesRequest: CoreCourseCreateCoursesRequest;
}

export interface CoreCourseDeleteCategoriesOperationRequest {
    coreCourseDeleteCategoriesRequest: CoreCourseDeleteCategoriesRequest;
}

export interface CoreCourseDeleteCoursesOperationRequest {
    coreCourseDeleteCoursesRequest: CoreCourseDeleteCoursesRequest;
}

export interface CoreCourseDeleteModulesOperationRequest {
    coreCourseDeleteModulesRequest: CoreCourseDeleteModulesRequest;
}

export interface CoreCourseDuplicateCourseOperationRequest {
    coreCourseDuplicateCourseRequest: CoreCourseDuplicateCourseRequest;
}

export interface CoreCourseEditModuleOperationRequest {
    coreCourseEditModuleRequest: CoreCourseEditModuleRequest;
}

export interface CoreCourseEditSectionOperationRequest {
    coreCourseEditSectionRequest: CoreCourseEditSectionRequest;
}

export interface CoreCourseGetActivityChooserFooterOperationRequest {
    coreCourseGetActivityChooserFooterRequest: CoreCourseGetActivityChooserFooterRequest;
}

export interface CoreCourseGetCategoriesOperationRequest {
    coreCourseGetCategoriesRequest: CoreCourseGetCategoriesRequest;
}

export interface CoreCourseGetContentsOperationRequest {
    coreCourseGetContentsRequest: CoreCourseGetContentsRequest;
}

export interface CoreCourseGetCourseContentItemsOperationRequest {
    coreCourseGetCourseContentItemsRequest: CoreCourseGetCourseContentItemsRequest;
}

export interface CoreCourseGetCourseModuleRequest {
    coreCompetencyListCourseModuleCompetenciesRequest: CoreCompetencyListCourseModuleCompetenciesRequest;
}

export interface CoreCourseGetCourseModuleByInstanceOperationRequest {
    coreCourseGetCourseModuleByInstanceRequest: CoreCourseGetCourseModuleByInstanceRequest;
}

export interface CoreCourseGetCoursesOperationRequest {
    coreCourseGetCoursesRequest: CoreCourseGetCoursesRequest;
}

export interface CoreCourseGetCoursesByFieldOperationRequest {
    coreCourseGetCoursesByFieldRequest: CoreCourseGetCoursesByFieldRequest;
}

export interface CoreCourseGetEnrolledCoursesByTimelineClassificationOperationRequest {
    coreCourseGetEnrolledCoursesByTimelineClassificationRequest: CoreCourseGetEnrolledCoursesByTimelineClassificationRequest;
}

export interface CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationOperationRequest {
    coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest: CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest;
}

export interface CoreCourseGetEnrolledUsersByCmidOperationRequest {
    coreCourseGetEnrolledUsersByCmidRequest: CoreCourseGetEnrolledUsersByCmidRequest;
}

export interface CoreCourseGetModuleOperationRequest {
    coreCourseGetModuleRequest: CoreCourseGetModuleRequest;
}

export interface CoreCourseGetRecentCoursesOperationRequest {
    coreCourseGetRecentCoursesRequest: CoreCourseGetRecentCoursesRequest;
}

export interface CoreCourseGetUpdatesSinceOperationRequest {
    coreCourseGetUpdatesSinceRequest: CoreCourseGetUpdatesSinceRequest;
}

export interface CoreCourseGetUserAdministrationOptionsOperationRequest {
    coreCourseGetUserAdministrationOptionsRequest: CoreCourseGetUserAdministrationOptionsRequest;
}

export interface CoreCourseGetUserNavigationOptionsOperationRequest {
    coreCourseGetUserNavigationOptionsRequest: CoreCourseGetUserNavigationOptionsRequest;
}

export interface CoreCourseImportCourseOperationRequest {
    coreCourseImportCourseRequest: CoreCourseImportCourseRequest;
}

export interface CoreCourseRemoveContentItemFromUserFavouritesOperationRequest {
    coreCourseRemoveContentItemFromUserFavouritesRequest: CoreCourseRemoveContentItemFromUserFavouritesRequest;
}

export interface CoreCourseSearchCoursesOperationRequest {
    coreCourseSearchCoursesRequest: CoreCourseSearchCoursesRequest;
}

export interface CoreCourseSetFavouriteCoursesOperationRequest {
    coreCourseSetFavouriteCoursesRequest: CoreCourseSetFavouriteCoursesRequest;
}

export interface CoreCourseToggleActivityRecommendationOperationRequest {
    coreCourseToggleActivityRecommendationRequest: CoreCourseToggleActivityRecommendationRequest;
}

export interface CoreCourseUpdateCategoriesOperationRequest {
    coreCourseUpdateCategoriesRequest: CoreCourseUpdateCategoriesRequest;
}

export interface CoreCourseUpdateCoursesOperationRequest {
    coreCourseUpdateCoursesRequest: CoreCourseUpdateCoursesRequest;
}

export interface CoreCourseViewCourseOperationRequest {
    coreCourseViewCourseRequest: CoreCourseViewCourseRequest;
}

export interface CoreCourseformatFileHandlersOperationRequest {
    coreCourseformatFileHandlersRequest: CoreCourseformatFileHandlersRequest;
}

export interface CoreCourseformatGetStateRequest {
    coreCourseformatFileHandlersRequest: CoreCourseformatFileHandlersRequest;
}

export interface CoreCourseformatUpdateCourseOperationRequest {
    coreCourseformatUpdateCourseRequest: CoreCourseformatUpdateCourseRequest;
}

export interface CoreCreateUserfeedbackActionRecordOperationRequest {
    coreCreateUserfeedbackActionRecordRequest: CoreCreateUserfeedbackActionRecordRequest;
}

export interface CoreCustomfieldCreateCategoryOperationRequest {
    coreCustomfieldCreateCategoryRequest: CoreCustomfieldCreateCategoryRequest;
}

export interface CoreCustomfieldDeleteCategoryOperationRequest {
    coreCustomfieldDeleteCategoryRequest: CoreCustomfieldDeleteCategoryRequest;
}

export interface CoreCustomfieldDeleteFieldOperationRequest {
    coreCustomfieldDeleteFieldRequest: CoreCustomfieldDeleteFieldRequest;
}

export interface CoreCustomfieldMoveCategoryOperationRequest {
    coreCustomfieldMoveCategoryRequest: CoreCustomfieldMoveCategoryRequest;
}

export interface CoreCustomfieldMoveFieldOperationRequest {
    coreCustomfieldMoveFieldRequest: CoreCustomfieldMoveFieldRequest;
}

export interface CoreCustomfieldReloadTemplateOperationRequest {
    coreCustomfieldReloadTemplateRequest: CoreCustomfieldReloadTemplateRequest;
}

export interface CoreDynamicTabsGetContentOperationRequest {
    coreDynamicTabsGetContentRequest: CoreDynamicTabsGetContentRequest;
}

export interface CoreEnrolGetCourseEnrolmentMethodsOperationRequest {
    coreEnrolGetCourseEnrolmentMethodsRequest: CoreEnrolGetCourseEnrolmentMethodsRequest;
}

export interface CoreEnrolGetEnrolledUsersOperationRequest {
    coreEnrolGetEnrolledUsersRequest: CoreEnrolGetEnrolledUsersRequest;
}

export interface CoreEnrolGetEnrolledUsersWithCapabilityOperationRequest {
    coreEnrolGetEnrolledUsersWithCapabilityRequest: CoreEnrolGetEnrolledUsersWithCapabilityRequest;
}

export interface CoreEnrolGetPotentialUsersOperationRequest {
    coreEnrolGetPotentialUsersRequest: CoreEnrolGetPotentialUsersRequest;
}

export interface CoreEnrolGetUsersCoursesOperationRequest {
    coreEnrolGetUsersCoursesRequest: CoreEnrolGetUsersCoursesRequest;
}

export interface CoreEnrolSearchUsersOperationRequest {
    coreEnrolSearchUsersRequest: CoreEnrolSearchUsersRequest;
}

export interface CoreEnrolSubmitUserEnrolmentFormOperationRequest {
    coreEnrolSubmitUserEnrolmentFormRequest: CoreEnrolSubmitUserEnrolmentFormRequest;
}

export interface CoreEnrolUnenrolUserEnrolmentOperationRequest {
    coreEnrolUnenrolUserEnrolmentRequest: CoreEnrolUnenrolUserEnrolmentRequest;
}

export interface CoreFetchNotificationsOperationRequest {
    coreFetchNotificationsRequest: CoreFetchNotificationsRequest;
}

export interface CoreFilesDeleteDraftFilesOperationRequest {
    coreFilesDeleteDraftFilesRequest: CoreFilesDeleteDraftFilesRequest;
}

export interface CoreFilesGetFilesOperationRequest {
    coreFilesGetFilesRequest: CoreFilesGetFilesRequest;
}

export interface CoreFilesUploadOperationRequest {
    coreFilesUploadRequest: CoreFilesUploadRequest;
}

export interface CoreFiltersGetAvailableInContextOperationRequest {
    coreFiltersGetAvailableInContextRequest: CoreFiltersGetAvailableInContextRequest;
}

export interface CoreFormDynamicFormOperationRequest {
    coreFormDynamicFormRequest: CoreFormDynamicFormRequest;
}

export interface CoreFormGetFiletypesBrowserDataOperationRequest {
    coreFormGetFiletypesBrowserDataRequest: CoreFormGetFiletypesBrowserDataRequest;
}

export interface CoreGetComponentStringsOperationRequest {
    coreGetComponentStringsRequest: CoreGetComponentStringsRequest;
}

export interface CoreGetFragmentOperationRequest {
    coreGetFragmentRequest: CoreGetFragmentRequest;
}

export interface CoreGetStringOperationRequest {
    coreGetStringRequest: CoreGetStringRequest;
}

export interface CoreGetStringsOperationRequest {
    coreGetStringsRequest: CoreGetStringsRequest;
}

export interface CoreGetUserDatesOperationRequest {
    coreGetUserDatesRequest: CoreGetUserDatesRequest;
}

export interface CoreGradesCreateGradecategoriesOperationRequest {
    coreGradesCreateGradecategoriesRequest: CoreGradesCreateGradecategoriesRequest;
}

export interface CoreGradesGetEnrolledUsersForSearchWidgetOperationRequest {
    coreGradesGetEnrolledUsersForSearchWidgetRequest: CoreGradesGetEnrolledUsersForSearchWidgetRequest;
}

export interface CoreGradesGetEnrolledUsersForSelectorOperationRequest {
    coreGradesGetEnrolledUsersForSelectorRequest: CoreGradesGetEnrolledUsersForSelectorRequest;
}

export interface CoreGradesGetFeedbackOperationRequest {
    coreGradesGetFeedbackRequest: CoreGradesGetFeedbackRequest;
}

export interface CoreGradesGetGradableUsersOperationRequest {
    coreGradesGetGradableUsersRequest: CoreGradesGetGradableUsersRequest;
}

export interface CoreGradesGetGradeTreeRequest {
    coreCompletionMarkCourseSelfCompletedRequest: CoreCompletionMarkCourseSelfCompletedRequest;
}

export interface CoreGradesGetGradeitemsRequest {
    coreCompletionMarkCourseSelfCompletedRequest: CoreCompletionMarkCourseSelfCompletedRequest;
}

export interface CoreGradesGetGroupsForSearchWidgetOperationRequest {
    coreGradesGetGroupsForSearchWidgetRequest: CoreGradesGetGroupsForSearchWidgetRequest;
}

export interface CoreGradesGetGroupsForSelectorRequest {
    coreGradesGetGroupsForSearchWidgetRequest: CoreGradesGetGroupsForSearchWidgetRequest;
}

export interface CoreGradesGraderGradingpanelPointFetchOperationRequest {
    coreGradesGraderGradingpanelPointFetchRequest: CoreGradesGraderGradingpanelPointFetchRequest;
}

export interface CoreGradesGraderGradingpanelPointStoreOperationRequest {
    coreGradesGraderGradingpanelPointStoreRequest: CoreGradesGraderGradingpanelPointStoreRequest;
}

export interface CoreGradesGraderGradingpanelScaleFetchOperationRequest {
    coreGradesGraderGradingpanelScaleFetchRequest: CoreGradesGraderGradingpanelScaleFetchRequest;
}

export interface CoreGradesGraderGradingpanelScaleStoreOperationRequest {
    coreGradesGraderGradingpanelScaleStoreRequest: CoreGradesGraderGradingpanelScaleStoreRequest;
}

export interface CoreGradesUpdateGradesOperationRequest {
    coreGradesUpdateGradesRequest: CoreGradesUpdateGradesRequest;
}

export interface CoreGradingGetDefinitionsOperationRequest {
    coreGradingGetDefinitionsRequest: CoreGradingGetDefinitionsRequest;
}

export interface CoreGradingGetGradingformInstancesOperationRequest {
    coreGradingGetGradingformInstancesRequest: CoreGradingGetGradingformInstancesRequest;
}

export interface CoreGradingSaveDefinitionsOperationRequest {
    coreGradingSaveDefinitionsRequest: CoreGradingSaveDefinitionsRequest;
}

export interface CoreGroupAddGroupMembersOperationRequest {
    coreGroupAddGroupMembersRequest: CoreGroupAddGroupMembersRequest;
}

export interface CoreGroupAssignGroupingOperationRequest {
    coreGroupAssignGroupingRequest: CoreGroupAssignGroupingRequest;
}

export interface CoreGroupCreateGroupingsOperationRequest {
    coreGroupCreateGroupingsRequest: CoreGroupCreateGroupingsRequest;
}

export interface CoreGroupCreateGroupsOperationRequest {
    coreGroupCreateGroupsRequest: CoreGroupCreateGroupsRequest;
}

export interface CoreGroupDeleteGroupMembersOperationRequest {
    coreGroupDeleteGroupMembersRequest: CoreGroupDeleteGroupMembersRequest;
}

export interface CoreGroupDeleteGroupingsOperationRequest {
    coreGroupDeleteGroupingsRequest: CoreGroupDeleteGroupingsRequest;
}

export interface CoreGroupDeleteGroupsOperationRequest {
    coreGroupDeleteGroupsRequest: CoreGroupDeleteGroupsRequest;
}

export interface CoreGroupGetActivityAllowedGroupsOperationRequest {
    coreGroupGetActivityAllowedGroupsRequest: CoreGroupGetActivityAllowedGroupsRequest;
}

export interface CoreGroupGetActivityGroupmodeOperationRequest {
    coreGroupGetActivityGroupmodeRequest: CoreGroupGetActivityGroupmodeRequest;
}

export interface CoreGroupGetCourseGroupingsOperationRequest {
    coreGroupGetCourseGroupingsRequest: CoreGroupGetCourseGroupingsRequest;
}

export interface CoreGroupGetCourseGroupsRequest {
    coreGroupGetCourseGroupingsRequest: CoreGroupGetCourseGroupingsRequest;
}

export interface CoreGroupGetCourseUserGroupsOperationRequest {
    coreGroupGetCourseUserGroupsRequest: CoreGroupGetCourseUserGroupsRequest;
}

export interface CoreGroupGetGroupMembersOperationRequest {
    coreGroupGetGroupMembersRequest: CoreGroupGetGroupMembersRequest;
}

export interface CoreGroupGetGroupingsOperationRequest {
    coreGroupGetGroupingsRequest: CoreGroupGetGroupingsRequest;
}

export interface CoreGroupGetGroupsRequest {
    coreGroupGetGroupMembersRequest: CoreGroupGetGroupMembersRequest;
}

export interface CoreGroupGetGroupsForSelectorRequest {
    coreGradesGetGroupsForSearchWidgetRequest: CoreGradesGetGroupsForSearchWidgetRequest;
}

export interface CoreGroupUnassignGroupingOperationRequest {
    coreGroupUnassignGroupingRequest: CoreGroupUnassignGroupingRequest;
}

export interface CoreGroupUpdateGroupingsOperationRequest {
    coreGroupUpdateGroupingsRequest: CoreGroupUpdateGroupingsRequest;
}

export interface CoreGroupUpdateGroupsOperationRequest {
    coreGroupUpdateGroupsRequest: CoreGroupUpdateGroupsRequest;
}

export interface CoreH5pGetTrustedH5pFileOperationRequest {
    coreH5pGetTrustedH5pFileRequest: CoreH5pGetTrustedH5pFileRequest;
}

export interface CoreMessageBlockUserOperationRequest {
    coreMessageBlockUserRequest: CoreMessageBlockUserRequest;
}

export interface CoreMessageConfirmContactRequestOperationRequest {
    coreMessageConfirmContactRequestRequest: CoreMessageConfirmContactRequestRequest;
}

export interface CoreMessageCreateContactRequestOperationRequest {
    coreMessageCreateContactRequestRequest: CoreMessageCreateContactRequestRequest;
}

export interface CoreMessageDataForMessageareaSearchMessagesOperationRequest {
    coreMessageDataForMessageareaSearchMessagesRequest: CoreMessageDataForMessageareaSearchMessagesRequest;
}

export interface CoreMessageDeclineContactRequestRequest {
    coreMessageCreateContactRequestRequest: CoreMessageCreateContactRequestRequest;
}

export interface CoreMessageDeleteContactsOperationRequest {
    coreMessageDeleteContactsRequest: CoreMessageDeleteContactsRequest;
}

export interface CoreMessageDeleteConversationsByIdOperationRequest {
    coreMessageDeleteConversationsByIdRequest: CoreMessageDeleteConversationsByIdRequest;
}

export interface CoreMessageDeleteMessageOperationRequest {
    coreMessageDeleteMessageRequest: CoreMessageDeleteMessageRequest;
}

export interface CoreMessageDeleteMessageForAllUsersOperationRequest {
    coreMessageDeleteMessageForAllUsersRequest: CoreMessageDeleteMessageForAllUsersRequest;
}

export interface CoreMessageGetBlockedUsersOperationRequest {
    coreMessageGetBlockedUsersRequest: CoreMessageGetBlockedUsersRequest;
}

export interface CoreMessageGetContactRequestsOperationRequest {
    coreMessageGetContactRequestsRequest: CoreMessageGetContactRequestsRequest;
}

export interface CoreMessageGetConversationOperationRequest {
    coreMessageGetConversationRequest: CoreMessageGetConversationRequest;
}

export interface CoreMessageGetConversationBetweenUsersOperationRequest {
    coreMessageGetConversationBetweenUsersRequest: CoreMessageGetConversationBetweenUsersRequest;
}

export interface CoreMessageGetConversationCountsOperationRequest {
    coreMessageGetConversationCountsRequest: CoreMessageGetConversationCountsRequest;
}

export interface CoreMessageGetConversationMembersOperationRequest {
    coreMessageGetConversationMembersRequest: CoreMessageGetConversationMembersRequest;
}

export interface CoreMessageGetConversationMessagesOperationRequest {
    coreMessageGetConversationMessagesRequest: CoreMessageGetConversationMessagesRequest;
}

export interface CoreMessageGetConversationsOperationRequest {
    coreMessageGetConversationsRequest: CoreMessageGetConversationsRequest;
}

export interface CoreMessageGetMemberInfoOperationRequest {
    coreMessageGetMemberInfoRequest: CoreMessageGetMemberInfoRequest;
}

export interface CoreMessageGetMessageProcessorOperationRequest {
    coreMessageGetMessageProcessorRequest: CoreMessageGetMessageProcessorRequest;
}

export interface CoreMessageGetMessagesOperationRequest {
    coreMessageGetMessagesRequest: CoreMessageGetMessagesRequest;
}

export interface CoreMessageGetReceivedContactRequestsCountOperationRequest {
    coreMessageGetReceivedContactRequestsCountRequest: CoreMessageGetReceivedContactRequestsCountRequest;
}

export interface CoreMessageGetSelfConversationOperationRequest {
    coreMessageGetSelfConversationRequest: CoreMessageGetSelfConversationRequest;
}

export interface CoreMessageGetUnreadConversationCountsRequest {
    coreMessageGetConversationCountsRequest: CoreMessageGetConversationCountsRequest;
}

export interface CoreMessageGetUnreadConversationsCountOperationRequest {
    coreMessageGetUnreadConversationsCountRequest: CoreMessageGetUnreadConversationsCountRequest;
}

export interface CoreMessageGetUnreadNotificationCountOperationRequest {
    coreMessageGetUnreadNotificationCountRequest: CoreMessageGetUnreadNotificationCountRequest;
}

export interface CoreMessageGetUserContactsOperationRequest {
    coreMessageGetUserContactsRequest: CoreMessageGetUserContactsRequest;
}

export interface CoreMessageGetUserMessagePreferencesRequest {
    coreMessageGetConversationCountsRequest: CoreMessageGetConversationCountsRequest;
}

export interface CoreMessageGetUserNotificationPreferencesRequest {
    coreMessageGetConversationCountsRequest: CoreMessageGetConversationCountsRequest;
}

export interface CoreMessageMarkAllConversationMessagesAsReadOperationRequest {
    coreMessageMarkAllConversationMessagesAsReadRequest: CoreMessageMarkAllConversationMessagesAsReadRequest;
}

export interface CoreMessageMarkAllNotificationsAsReadOperationRequest {
    coreMessageMarkAllNotificationsAsReadRequest: CoreMessageMarkAllNotificationsAsReadRequest;
}

export interface CoreMessageMarkMessageReadOperationRequest {
    coreMessageMarkMessageReadRequest: CoreMessageMarkMessageReadRequest;
}

export interface CoreMessageMarkNotificationReadOperationRequest {
    coreMessageMarkNotificationReadRequest: CoreMessageMarkNotificationReadRequest;
}

export interface CoreMessageMessageProcessorConfigFormOperationRequest {
    coreMessageMessageProcessorConfigFormRequest: CoreMessageMessageProcessorConfigFormRequest;
}

export interface CoreMessageMessageSearchUsersOperationRequest {
    coreMessageMessageSearchUsersRequest: CoreMessageMessageSearchUsersRequest;
}

export interface CoreMessageMuteConversationsOperationRequest {
    coreMessageMuteConversationsRequest: CoreMessageMuteConversationsRequest;
}

export interface CoreMessageSearchContactsOperationRequest {
    coreMessageSearchContactsRequest: CoreMessageSearchContactsRequest;
}

export interface CoreMessageSendInstantMessagesOperationRequest {
    coreMessageSendInstantMessagesRequest: CoreMessageSendInstantMessagesRequest;
}

export interface CoreMessageSendMessagesToConversationOperationRequest {
    coreMessageSendMessagesToConversationRequest: CoreMessageSendMessagesToConversationRequest;
}

export interface CoreMessageSetFavouriteConversationsOperationRequest {
    coreMessageSetFavouriteConversationsRequest: CoreMessageSetFavouriteConversationsRequest;
}

export interface CoreMessageUnblockUserOperationRequest {
    coreMessageUnblockUserRequest: CoreMessageUnblockUserRequest;
}

export interface CoreMessageUnmuteConversationsOperationRequest {
    coreMessageUnmuteConversationsRequest: CoreMessageUnmuteConversationsRequest;
}

export interface CoreMessageUnsetFavouriteConversationsRequest {
    coreMessageSetFavouriteConversationsRequest: CoreMessageSetFavouriteConversationsRequest;
}

export interface CoreMoodlenetAuthCheckOperationRequest {
    coreMoodlenetAuthCheckRequest: CoreMoodlenetAuthCheckRequest;
}

export interface CoreMoodlenetGetShareInfoActivityOperationRequest {
    coreMoodlenetGetShareInfoActivityRequest: CoreMoodlenetGetShareInfoActivityRequest;
}

export interface CoreMoodlenetGetSharedCourseInfoOperationRequest {
    coreMoodlenetGetSharedCourseInfoRequest: CoreMoodlenetGetSharedCourseInfoRequest;
}

export interface CoreMoodlenetSendActivityOperationRequest {
    coreMoodlenetSendActivityRequest: CoreMoodlenetSendActivityRequest;
}

export interface CoreMoodlenetSendCourseOperationRequest {
    coreMoodlenetSendCourseRequest: CoreMoodlenetSendCourseRequest;
}

export interface CoreMyViewPageOperationRequest {
    coreMyViewPageRequest: CoreMyViewPageRequest;
}

export interface CoreNotesCreateNotesOperationRequest {
    coreNotesCreateNotesRequest: CoreNotesCreateNotesRequest;
}

export interface CoreNotesDeleteNotesOperationRequest {
    coreNotesDeleteNotesRequest: CoreNotesDeleteNotesRequest;
}

export interface CoreNotesGetCourseNotesOperationRequest {
    coreNotesGetCourseNotesRequest: CoreNotesGetCourseNotesRequest;
}

export interface CoreNotesGetNotesOperationRequest {
    coreNotesGetNotesRequest: CoreNotesGetNotesRequest;
}

export interface CoreNotesUpdateNotesOperationRequest {
    coreNotesUpdateNotesRequest: CoreNotesUpdateNotesRequest;
}

export interface CoreNotesViewNotesOperationRequest {
    coreNotesViewNotesRequest: CoreNotesViewNotesRequest;
}

export interface CoreOutputLoadFontawesomeIconSystemMapOperationRequest {
    coreOutputLoadFontawesomeIconSystemMapRequest: CoreOutputLoadFontawesomeIconSystemMapRequest;
}

export interface CoreOutputLoadTemplateOperationRequest {
    coreOutputLoadTemplateRequest: CoreOutputLoadTemplateRequest;
}

export interface CoreOutputLoadTemplateWithDependenciesOperationRequest {
    coreOutputLoadTemplateWithDependenciesRequest: CoreOutputLoadTemplateWithDependenciesRequest;
}

export interface CorePaymentGetAvailableGatewaysOperationRequest {
    corePaymentGetAvailableGatewaysRequest: CorePaymentGetAvailableGatewaysRequest;
}

export interface CoreQuestionGetRandomQuestionSummariesOperationRequest {
    coreQuestionGetRandomQuestionSummariesRequest: CoreQuestionGetRandomQuestionSummariesRequest;
}

export interface CoreQuestionSubmitTagsFormOperationRequest {
    coreQuestionSubmitTagsFormRequest: CoreQuestionSubmitTagsFormRequest;
}

export interface CoreQuestionUpdateFlagOperationRequest {
    coreQuestionUpdateFlagRequest: CoreQuestionUpdateFlagRequest;
}

export interface CoreRatingAddRatingOperationRequest {
    coreRatingAddRatingRequest: CoreRatingAddRatingRequest;
}

export interface CoreRatingGetItemRatingsOperationRequest {
    coreRatingGetItemRatingsRequest: CoreRatingGetItemRatingsRequest;
}

export interface CoreReportbuilderAudiencesDeleteOperationRequest {
    coreReportbuilderAudiencesDeleteRequest: CoreReportbuilderAudiencesDeleteRequest;
}

export interface CoreReportbuilderCanViewSystemReportOperationRequest {
    coreReportbuilderCanViewSystemReportRequest: CoreReportbuilderCanViewSystemReportRequest;
}

export interface CoreReportbuilderColumnsAddOperationRequest {
    coreReportbuilderColumnsAddRequest: CoreReportbuilderColumnsAddRequest;
}

export interface CoreReportbuilderColumnsDeleteOperationRequest {
    coreReportbuilderColumnsDeleteRequest: CoreReportbuilderColumnsDeleteRequest;
}

export interface CoreReportbuilderColumnsReorderOperationRequest {
    coreReportbuilderColumnsReorderRequest: CoreReportbuilderColumnsReorderRequest;
}

export interface CoreReportbuilderColumnsSortGetOperationRequest {
    coreReportbuilderColumnsSortGetRequest: CoreReportbuilderColumnsSortGetRequest;
}

export interface CoreReportbuilderColumnsSortReorderOperationRequest {
    coreReportbuilderColumnsSortReorderRequest: CoreReportbuilderColumnsSortReorderRequest;
}

export interface CoreReportbuilderColumnsSortToggleOperationRequest {
    coreReportbuilderColumnsSortToggleRequest: CoreReportbuilderColumnsSortToggleRequest;
}

export interface CoreReportbuilderConditionsAddOperationRequest {
    coreReportbuilderConditionsAddRequest: CoreReportbuilderConditionsAddRequest;
}

export interface CoreReportbuilderConditionsDeleteOperationRequest {
    coreReportbuilderConditionsDeleteRequest: CoreReportbuilderConditionsDeleteRequest;
}

export interface CoreReportbuilderConditionsReorderOperationRequest {
    coreReportbuilderConditionsReorderRequest: CoreReportbuilderConditionsReorderRequest;
}

export interface CoreReportbuilderConditionsResetRequest {
    coreReportbuilderColumnsSortGetRequest: CoreReportbuilderColumnsSortGetRequest;
}

export interface CoreReportbuilderFiltersAddOperationRequest {
    coreReportbuilderFiltersAddRequest: CoreReportbuilderFiltersAddRequest;
}

export interface CoreReportbuilderFiltersDeleteOperationRequest {
    coreReportbuilderFiltersDeleteRequest: CoreReportbuilderFiltersDeleteRequest;
}

export interface CoreReportbuilderFiltersReorderOperationRequest {
    coreReportbuilderFiltersReorderRequest: CoreReportbuilderFiltersReorderRequest;
}

export interface CoreReportbuilderFiltersResetOperationRequest {
    coreReportbuilderFiltersResetRequest: CoreReportbuilderFiltersResetRequest;
}

export interface CoreReportbuilderListReportsOperationRequest {
    coreReportbuilderListReportsRequest: CoreReportbuilderListReportsRequest;
}

export interface CoreReportbuilderReportsDeleteRequest {
    coreReportbuilderColumnsSortGetRequest: CoreReportbuilderColumnsSortGetRequest;
}

export interface CoreReportbuilderReportsGetOperationRequest {
    coreReportbuilderReportsGetRequest: CoreReportbuilderReportsGetRequest;
}

export interface CoreReportbuilderRetrieveReportOperationRequest {
    coreReportbuilderRetrieveReportRequest: CoreReportbuilderRetrieveReportRequest;
}

export interface CoreReportbuilderRetrieveSystemReportOperationRequest {
    coreReportbuilderRetrieveSystemReportRequest: CoreReportbuilderRetrieveSystemReportRequest;
}

export interface CoreReportbuilderSchedulesDeleteOperationRequest {
    coreReportbuilderSchedulesDeleteRequest: CoreReportbuilderSchedulesDeleteRequest;
}

export interface CoreReportbuilderSchedulesSendOperationRequest {
    coreReportbuilderSchedulesSendRequest: CoreReportbuilderSchedulesSendRequest;
}

export interface CoreReportbuilderSchedulesToggleOperationRequest {
    coreReportbuilderSchedulesToggleRequest: CoreReportbuilderSchedulesToggleRequest;
}

export interface CoreReportbuilderSetFiltersOperationRequest {
    coreReportbuilderSetFiltersRequest: CoreReportbuilderSetFiltersRequest;
}

export interface CoreReportbuilderViewReportRequest {
    coreReportbuilderColumnsSortGetRequest: CoreReportbuilderColumnsSortGetRequest;
}

export interface CoreRoleAssignRolesOperationRequest {
    coreRoleAssignRolesRequest: CoreRoleAssignRolesRequest;
}

export interface CoreRoleUnassignRolesOperationRequest {
    coreRoleUnassignRolesRequest: CoreRoleUnassignRolesRequest;
}

export interface CoreSearchGetRelevantUsersOperationRequest {
    coreSearchGetRelevantUsersRequest: CoreSearchGetRelevantUsersRequest;
}

export interface CoreSearchGetResultsOperationRequest {
    coreSearchGetResultsRequest: CoreSearchGetResultsRequest;
}

export interface CoreSearchGetSearchAreasListOperationRequest {
    coreSearchGetSearchAreasListRequest: CoreSearchGetSearchAreasListRequest;
}

export interface CoreSearchGetTopResultsOperationRequest {
    coreSearchGetTopResultsRequest: CoreSearchGetTopResultsRequest;
}

export interface CoreSearchViewResultsOperationRequest {
    coreSearchViewResultsRequest: CoreSearchViewResultsRequest;
}

export interface CoreTableGetDynamicTableContentOperationRequest {
    coreTableGetDynamicTableContentRequest: CoreTableGetDynamicTableContentRequest;
}

export interface CoreTagGetTagCloudOperationRequest {
    coreTagGetTagCloudRequest: CoreTagGetTagCloudRequest;
}

export interface CoreTagGetTagindexOperationRequest {
    coreTagGetTagindexRequest: CoreTagGetTagindexRequest;
}

export interface CoreTagGetTagindexPerAreaOperationRequest {
    coreTagGetTagindexPerAreaRequest: CoreTagGetTagindexPerAreaRequest;
}

export interface CoreTagGetTagsOperationRequest {
    coreTagGetTagsRequest: CoreTagGetTagsRequest;
}

export interface CoreTagUpdateTagsOperationRequest {
    coreTagUpdateTagsRequest: CoreTagUpdateTagsRequest;
}

export interface CoreUpdateInplaceEditableOperationRequest {
    coreUpdateInplaceEditableRequest: CoreUpdateInplaceEditableRequest;
}

export interface CoreUserAddUserDeviceOperationRequest {
    coreUserAddUserDeviceRequest: CoreUserAddUserDeviceRequest;
}

export interface CoreUserAddUserPrivateFilesOperationRequest {
    coreUserAddUserPrivateFilesRequest: CoreUserAddUserPrivateFilesRequest;
}

export interface CoreUserCreateUsersOperationRequest {
    coreUserCreateUsersRequest: CoreUserCreateUsersRequest;
}

export interface CoreUserDeleteUsersOperationRequest {
    coreUserDeleteUsersRequest: CoreUserDeleteUsersRequest;
}

export interface CoreUserGetCourseUserProfilesOperationRequest {
    coreUserGetCourseUserProfilesRequest: CoreUserGetCourseUserProfilesRequest;
}

export interface CoreUserGetPrivateFilesInfoOperationRequest {
    coreUserGetPrivateFilesInfoRequest: CoreUserGetPrivateFilesInfoRequest;
}

export interface CoreUserGetUserPreferencesOperationRequest {
    coreUserGetUserPreferencesRequest: CoreUserGetUserPreferencesRequest;
}

export interface CoreUserGetUsersOperationRequest {
    coreUserGetUsersRequest: CoreUserGetUsersRequest;
}

export interface CoreUserGetUsersByFieldOperationRequest {
    coreUserGetUsersByFieldRequest: CoreUserGetUsersByFieldRequest;
}

export interface CoreUserRemoveUserDeviceOperationRequest {
    coreUserRemoveUserDeviceRequest: CoreUserRemoveUserDeviceRequest;
}

export interface CoreUserSearchIdentityOperationRequest {
    coreUserSearchIdentityRequest: CoreUserSearchIdentityRequest;
}

export interface CoreUserSetUserPreferencesOperationRequest {
    coreUserSetUserPreferencesRequest: CoreUserSetUserPreferencesRequest;
}

export interface CoreUserUpdatePictureOperationRequest {
    coreUserUpdatePictureRequest: CoreUserUpdatePictureRequest;
}

export interface CoreUserUpdateUserDevicePublicKeyOperationRequest {
    coreUserUpdateUserDevicePublicKeyRequest: CoreUserUpdateUserDevicePublicKeyRequest;
}

export interface CoreUserUpdateUserPreferencesOperationRequest {
    coreUserUpdateUserPreferencesRequest: CoreUserUpdateUserPreferencesRequest;
}

export interface CoreUserUpdateUsersOperationRequest {
    coreUserUpdateUsersRequest: CoreUserUpdateUsersRequest;
}

export interface CoreUserViewUserListOperationRequest {
    coreUserViewUserListRequest: CoreUserViewUserListRequest;
}

export interface CoreUserViewUserProfileOperationRequest {
    coreUserViewUserProfileRequest: CoreUserViewUserProfileRequest;
}

export interface CoreWebserviceGetSiteInfoOperationRequest {
    coreWebserviceGetSiteInfoRequest: CoreWebserviceGetSiteInfoRequest;
}

export interface CoreXapiDeleteStateOperationRequest {
    coreXapiDeleteStateRequest: CoreXapiDeleteStateRequest;
}

export interface CoreXapiDeleteStatesOperationRequest {
    coreXapiDeleteStatesRequest: CoreXapiDeleteStatesRequest;
}

export interface CoreXapiGetStateOperationRequest {
    coreXapiGetStateRequest: CoreXapiGetStateRequest;
}

export interface CoreXapiGetStatesOperationRequest {
    coreXapiGetStatesRequest: CoreXapiGetStatesRequest;
}

export interface CoreXapiPostStateOperationRequest {
    coreXapiPostStateRequest: CoreXapiPostStateRequest;
}

export interface CoreXapiStatementPostOperationRequest {
    coreXapiStatementPostRequest: CoreXapiStatementPostRequest;
}

/**
 * 
 */
export class MoodleApi extends runtime.BaseAPI {

    /**
     * Set the protection state for a block plugin
     * Set the protection state for a block plugin
     */
    async coreAdminSetBlockProtectionRaw(requestParameters: CoreAdminSetBlockProtectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreAdminSetBlockProtectionRequest'] == null) {
            throw new runtime.RequiredError(
                'coreAdminSetBlockProtectionRequest',
                'Required parameter "coreAdminSetBlockProtectionRequest" was null or undefined when calling coreAdminSetBlockProtection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_admin_set_block_protection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreAdminSetBlockProtectionRequestToJSON(requestParameters['coreAdminSetBlockProtectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set the protection state for a block plugin
     * Set the protection state for a block plugin
     */
    async coreAdminSetBlockProtection(requestParameters: CoreAdminSetBlockProtectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreAdminSetBlockProtectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the order of a plugin
     * Set the order of a plugin
     */
    async coreAdminSetPluginOrderRaw(requestParameters: CoreAdminSetPluginOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreAdminSetPluginOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'coreAdminSetPluginOrderRequest',
                'Required parameter "coreAdminSetPluginOrderRequest" was null or undefined when calling coreAdminSetPluginOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_admin_set_plugin_order`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreAdminSetPluginOrderRequestToJSON(requestParameters['coreAdminSetPluginOrderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set the order of a plugin
     * Set the order of a plugin
     */
    async coreAdminSetPluginOrder(requestParameters: CoreAdminSetPluginOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreAdminSetPluginOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the state of a plugin
     * Set the state of a plugin
     */
    async coreAdminSetPluginStateRaw(requestParameters: CoreAdminSetPluginStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreAdminSetPluginStateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreAdminSetPluginStateRequest',
                'Required parameter "coreAdminSetPluginStateRequest" was null or undefined when calling coreAdminSetPluginState().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_admin_set_plugin_state`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreAdminSetPluginStateRequestToJSON(requestParameters['coreAdminSetPluginStateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set the state of a plugin
     * Set the state of a plugin
     */
    async coreAdminSetPluginState(requestParameters: CoreAdminSetPluginStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreAdminSetPluginStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Confirm a user account.
     * Confirm a user account.
     */
    async coreAuthConfirmUserRaw(requestParameters: CoreAuthConfirmUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreAuthConfirmUser200Response>> {
        if (requestParameters['coreAuthConfirmUserRequest'] == null) {
            throw new runtime.RequiredError(
                'coreAuthConfirmUserRequest',
                'Required parameter "coreAuthConfirmUserRequest" was null or undefined when calling coreAuthConfirmUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_auth_confirm_user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreAuthConfirmUserRequestToJSON(requestParameters['coreAuthConfirmUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreAuthConfirmUser200ResponseFromJSON(jsonValue));
    }

    /**
     * Confirm a user account.
     * Confirm a user account.
     */
    async coreAuthConfirmUser(requestParameters: CoreAuthConfirmUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreAuthConfirmUser200Response> {
        const response = await this.coreAuthConfirmUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Checks if age digital consent verification is enabled.
     * Checks if age digital consent verification is enabled.
     */
    async coreAuthIsAgeDigitalConsentVerificationEnabledRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreAuthIsAgeDigitalConsentVerificationEnabled200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_auth_is_age_digital_consent_verification_enabled`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreAuthIsAgeDigitalConsentVerificationEnabled200ResponseFromJSON(jsonValue));
    }

    /**
     * Checks if age digital consent verification is enabled.
     * Checks if age digital consent verification is enabled.
     */
    async coreAuthIsAgeDigitalConsentVerificationEnabled(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreAuthIsAgeDigitalConsentVerificationEnabled200Response> {
        const response = await this.coreAuthIsAgeDigitalConsentVerificationEnabledRaw(initOverrides);
        return await response.value();
    }

    /**
     * Requests a check if a user is a digital minor.
     * Requests a check if a user is a digital minor.
     */
    async coreAuthIsMinorRaw(requestParameters: CoreAuthIsMinorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreAuthIsMinor200Response>> {
        if (requestParameters['coreAuthIsMinorRequest'] == null) {
            throw new runtime.RequiredError(
                'coreAuthIsMinorRequest',
                'Required parameter "coreAuthIsMinorRequest" was null or undefined when calling coreAuthIsMinor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_auth_is_minor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreAuthIsMinorRequestToJSON(requestParameters['coreAuthIsMinorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreAuthIsMinor200ResponseFromJSON(jsonValue));
    }

    /**
     * Requests a check if a user is a digital minor.
     * Requests a check if a user is a digital minor.
     */
    async coreAuthIsMinor(requestParameters: CoreAuthIsMinorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreAuthIsMinor200Response> {
        const response = await this.coreAuthIsMinorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Requests a password reset.
     * Requests a password reset.
     */
    async coreAuthRequestPasswordResetRaw(requestParameters: CoreAuthRequestPasswordResetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreAuthRequestPasswordReset200Response>> {
        if (requestParameters['coreAuthRequestPasswordResetRequest'] == null) {
            throw new runtime.RequiredError(
                'coreAuthRequestPasswordResetRequest',
                'Required parameter "coreAuthRequestPasswordResetRequest" was null or undefined when calling coreAuthRequestPasswordReset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_auth_request_password_reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreAuthRequestPasswordResetRequestToJSON(requestParameters['coreAuthRequestPasswordResetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreAuthRequestPasswordReset200ResponseFromJSON(jsonValue));
    }

    /**
     * Requests a password reset.
     * Requests a password reset.
     */
    async coreAuthRequestPasswordReset(requestParameters: CoreAuthRequestPasswordResetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreAuthRequestPasswordReset200Response> {
        const response = await this.coreAuthRequestPasswordResetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend confirmation email.
     * Resend confirmation email.
     */
    async coreAuthResendConfirmationEmailRaw(requestParameters: CoreAuthResendConfirmationEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreAuthResendConfirmationEmail200Response>> {
        if (requestParameters['coreAuthResendConfirmationEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'coreAuthResendConfirmationEmailRequest',
                'Required parameter "coreAuthResendConfirmationEmailRequest" was null or undefined when calling coreAuthResendConfirmationEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_auth_resend_confirmation_email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreAuthResendConfirmationEmailRequestToJSON(requestParameters['coreAuthResendConfirmationEmailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreAuthResendConfirmationEmail200ResponseFromJSON(jsonValue));
    }

    /**
     * Resend confirmation email.
     * Resend confirmation email.
     */
    async coreAuthResendConfirmationEmail(requestParameters: CoreAuthResendConfirmationEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreAuthResendConfirmationEmail200Response> {
        const response = await this.coreAuthResendConfirmationEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the data to use when updating the status table row in the UI for when an async backup completes.
     * Gets the data to use when updating the status table row in the UI for when an async backup completes.
     */
    async coreBackupGetAsyncBackupLinksBackupRaw(requestParameters: CoreBackupGetAsyncBackupLinksBackupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreBackupGetAsyncBackupLinksBackup200Response>> {
        if (requestParameters['coreBackupGetAsyncBackupLinksBackupRequest'] == null) {
            throw new runtime.RequiredError(
                'coreBackupGetAsyncBackupLinksBackupRequest',
                'Required parameter "coreBackupGetAsyncBackupLinksBackupRequest" was null or undefined when calling coreBackupGetAsyncBackupLinksBackup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_backup_get_async_backup_links_backup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreBackupGetAsyncBackupLinksBackupRequestToJSON(requestParameters['coreBackupGetAsyncBackupLinksBackupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreBackupGetAsyncBackupLinksBackup200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets the data to use when updating the status table row in the UI for when an async backup completes.
     * Gets the data to use when updating the status table row in the UI for when an async backup completes.
     */
    async coreBackupGetAsyncBackupLinksBackup(requestParameters: CoreBackupGetAsyncBackupLinksBackupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreBackupGetAsyncBackupLinksBackup200Response> {
        const response = await this.coreBackupGetAsyncBackupLinksBackupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the data to use when updating the status table row in the UI for when an async restore completes.
     * Gets the data to use when updating the status table row in the UI for when an async restore completes.
     */
    async coreBackupGetAsyncBackupLinksRestoreRaw(requestParameters: CoreBackupGetAsyncBackupLinksRestoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreBackupGetAsyncBackupLinksRestore200Response>> {
        if (requestParameters['coreBackupGetAsyncBackupLinksRestoreRequest'] == null) {
            throw new runtime.RequiredError(
                'coreBackupGetAsyncBackupLinksRestoreRequest',
                'Required parameter "coreBackupGetAsyncBackupLinksRestoreRequest" was null or undefined when calling coreBackupGetAsyncBackupLinksRestore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_backup_get_async_backup_links_restore`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreBackupGetAsyncBackupLinksRestoreRequestToJSON(requestParameters['coreBackupGetAsyncBackupLinksRestoreRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreBackupGetAsyncBackupLinksRestore200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets the data to use when updating the status table row in the UI for when an async restore completes.
     * Gets the data to use when updating the status table row in the UI for when an async restore completes.
     */
    async coreBackupGetAsyncBackupLinksRestore(requestParameters: CoreBackupGetAsyncBackupLinksRestoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreBackupGetAsyncBackupLinksRestore200Response> {
        const response = await this.coreBackupGetAsyncBackupLinksRestoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the progress of an Asyncronhous backup.
     * Get the progress of an Asyncronhous backup.
     */
    async coreBackupGetAsyncBackupProgressRaw(requestParameters: CoreBackupGetAsyncBackupProgressOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreBackupGetAsyncBackupProgressRequest'] == null) {
            throw new runtime.RequiredError(
                'coreBackupGetAsyncBackupProgressRequest',
                'Required parameter "coreBackupGetAsyncBackupProgressRequest" was null or undefined when calling coreBackupGetAsyncBackupProgress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_backup_get_async_backup_progress`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreBackupGetAsyncBackupProgressRequestToJSON(requestParameters['coreBackupGetAsyncBackupProgressRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the progress of an Asyncronhous backup.
     * Get the progress of an Asyncronhous backup.
     */
    async coreBackupGetAsyncBackupProgress(requestParameters: CoreBackupGetAsyncBackupProgressOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreBackupGetAsyncBackupProgressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the progress of course copy operations.
     * Gets the progress of course copy operations.
     */
    async coreBackupGetCopyProgressRaw(requestParameters: CoreBackupGetCopyProgressOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreBackupGetCopyProgressRequest'] == null) {
            throw new runtime.RequiredError(
                'coreBackupGetCopyProgressRequest',
                'Required parameter "coreBackupGetCopyProgressRequest" was null or undefined when calling coreBackupGetCopyProgress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_backup_get_copy_progress`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreBackupGetCopyProgressRequestToJSON(requestParameters['coreBackupGetCopyProgressRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets the progress of course copy operations.
     * Gets the progress of course copy operations.
     */
    async coreBackupGetCopyProgress(requestParameters: CoreBackupGetCopyProgressOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreBackupGetCopyProgressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Handles ajax submission of course copy form.
     * Handles ajax submission of course copy form.
     */
    async coreBackupSubmitCopyFormRaw(requestParameters: CoreBackupSubmitCopyFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreBackupSubmitCopyFormRequest'] == null) {
            throw new runtime.RequiredError(
                'coreBackupSubmitCopyFormRequest',
                'Required parameter "coreBackupSubmitCopyFormRequest" was null or undefined when calling coreBackupSubmitCopyForm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_backup_submit_copy_form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreBackupSubmitCopyFormRequestToJSON(requestParameters['coreBackupSubmitCopyFormRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Handles ajax submission of course copy form.
     * Handles ajax submission of course copy form.
     */
    async coreBackupSubmitCopyForm(requestParameters: CoreBackupSubmitCopyFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreBackupSubmitCopyFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the badge awarded to a user by hash.
     * Returns the badge awarded to a user by hash.
     */
    async coreBadgesGetUserBadgeByHashRaw(requestParameters: CoreBadgesGetUserBadgeByHashOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreBadgesGetUserBadgeByHash200Response>> {
        if (requestParameters['coreBadgesGetUserBadgeByHashRequest'] == null) {
            throw new runtime.RequiredError(
                'coreBadgesGetUserBadgeByHashRequest',
                'Required parameter "coreBadgesGetUserBadgeByHashRequest" was null or undefined when calling coreBadgesGetUserBadgeByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_badges_get_user_badge_by_hash`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreBadgesGetUserBadgeByHashRequestToJSON(requestParameters['coreBadgesGetUserBadgeByHashRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreBadgesGetUserBadgeByHash200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the badge awarded to a user by hash.
     * Returns the badge awarded to a user by hash.
     */
    async coreBadgesGetUserBadgeByHash(requestParameters: CoreBadgesGetUserBadgeByHashOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreBadgesGetUserBadgeByHash200Response> {
        const response = await this.coreBadgesGetUserBadgeByHashRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the list of badges awarded to a user.
     * Returns the list of badges awarded to a user.
     */
    async coreBadgesGetUserBadgesRaw(requestParameters: CoreBadgesGetUserBadgesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreBadgesGetUserBadges200Response>> {
        if (requestParameters['coreBadgesGetUserBadgesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreBadgesGetUserBadgesRequest',
                'Required parameter "coreBadgesGetUserBadgesRequest" was null or undefined when calling coreBadgesGetUserBadges().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_badges_get_user_badges`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreBadgesGetUserBadgesRequestToJSON(requestParameters['coreBadgesGetUserBadgesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreBadgesGetUserBadges200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the list of badges awarded to a user.
     * Returns the list of badges awarded to a user.
     */
    async coreBadgesGetUserBadges(requestParameters: CoreBadgesGetUserBadgesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreBadgesGetUserBadges200Response> {
        const response = await this.coreBadgesGetUserBadgesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all addable blocks in a given page.
     * Returns all addable blocks in a given page.
     */
    async coreBlockFetchAddableBlocksRaw(requestParameters: CoreBlockFetchAddableBlocksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreBlockFetchAddableBlocksRequest'] == null) {
            throw new runtime.RequiredError(
                'coreBlockFetchAddableBlocksRequest',
                'Required parameter "coreBlockFetchAddableBlocksRequest" was null or undefined when calling coreBlockFetchAddableBlocks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_block_fetch_addable_blocks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreBlockFetchAddableBlocksRequestToJSON(requestParameters['coreBlockFetchAddableBlocksRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns all addable blocks in a given page.
     * Returns all addable blocks in a given page.
     */
    async coreBlockFetchAddableBlocks(requestParameters: CoreBlockFetchAddableBlocksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreBlockFetchAddableBlocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns blocks information for a course.
     * Returns blocks information for a course.
     */
    async coreBlockGetCourseBlocksRaw(requestParameters: CoreBlockGetCourseBlocksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreBlockGetCourseBlocks200Response>> {
        if (requestParameters['coreBlockGetCourseBlocksRequest'] == null) {
            throw new runtime.RequiredError(
                'coreBlockGetCourseBlocksRequest',
                'Required parameter "coreBlockGetCourseBlocksRequest" was null or undefined when calling coreBlockGetCourseBlocks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_block_get_course_blocks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreBlockGetCourseBlocksRequestToJSON(requestParameters['coreBlockGetCourseBlocksRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreBlockGetCourseBlocks200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns blocks information for a course.
     * Returns blocks information for a course.
     */
    async coreBlockGetCourseBlocks(requestParameters: CoreBlockGetCourseBlocksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreBlockGetCourseBlocks200Response> {
        const response = await this.coreBlockGetCourseBlocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns blocks information for the given user dashboard.
     * Returns blocks information for the given user dashboard.
     */
    async coreBlockGetDashboardBlocksRaw(requestParameters: CoreBlockGetDashboardBlocksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreBlockGetDashboardBlocks200Response>> {
        if (requestParameters['coreBlockGetDashboardBlocksRequest'] == null) {
            throw new runtime.RequiredError(
                'coreBlockGetDashboardBlocksRequest',
                'Required parameter "coreBlockGetDashboardBlocksRequest" was null or undefined when calling coreBlockGetDashboardBlocks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_block_get_dashboard_blocks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreBlockGetDashboardBlocksRequestToJSON(requestParameters['coreBlockGetDashboardBlocksRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreBlockGetDashboardBlocks200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns blocks information for the given user dashboard.
     * Returns blocks information for the given user dashboard.
     */
    async coreBlockGetDashboardBlocks(requestParameters: CoreBlockGetDashboardBlocksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreBlockGetDashboardBlocks200Response> {
        const response = await this.coreBlockGetDashboardBlocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns blog entries.
     * Returns blog entries.
     */
    async coreBlogGetEntriesRaw(requestParameters: CoreBlogGetEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreBlogGetEntries200Response>> {
        if (requestParameters['coreBlogGetEntriesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreBlogGetEntriesRequest',
                'Required parameter "coreBlogGetEntriesRequest" was null or undefined when calling coreBlogGetEntries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_blog_get_entries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreBlogGetEntriesRequestToJSON(requestParameters['coreBlogGetEntriesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreBlogGetEntries200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns blog entries.
     * Returns blog entries.
     */
    async coreBlogGetEntries(requestParameters: CoreBlogGetEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreBlogGetEntries200Response> {
        const response = await this.coreBlogGetEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the blog_entries_viewed event.
     * Trigger the blog_entries_viewed event.
     */
    async coreBlogViewEntriesRaw(requestParameters: CoreBlogViewEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreBlogViewEntries200Response>> {
        if (requestParameters['coreBlogViewEntriesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreBlogViewEntriesRequest',
                'Required parameter "coreBlogViewEntriesRequest" was null or undefined when calling coreBlogViewEntries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_blog_view_entries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreBlogViewEntriesRequestToJSON(requestParameters['coreBlogViewEntriesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreBlogViewEntries200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the blog_entries_viewed event.
     * Trigger the blog_entries_viewed event.
     */
    async coreBlogViewEntries(requestParameters: CoreBlogViewEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreBlogViewEntries200Response> {
        const response = await this.coreBlogViewEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create calendar events
     * Create calendar events
     */
    async coreCalendarCreateCalendarEventsRaw(requestParameters: CoreCalendarCreateCalendarEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarCreateCalendarEvents200Response>> {
        if (requestParameters['coreCalendarCreateCalendarEventsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarCreateCalendarEventsRequest',
                'Required parameter "coreCalendarCreateCalendarEventsRequest" was null or undefined when calling coreCalendarCreateCalendarEvents().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_create_calendar_events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarCreateCalendarEventsRequestToJSON(requestParameters['coreCalendarCreateCalendarEventsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarCreateCalendarEvents200ResponseFromJSON(jsonValue));
    }

    /**
     * Create calendar events
     * Create calendar events
     */
    async coreCalendarCreateCalendarEvents(requestParameters: CoreCalendarCreateCalendarEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarCreateCalendarEvents200Response> {
        const response = await this.coreCalendarCreateCalendarEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete calendar events
     * Delete calendar events
     */
    async coreCalendarDeleteCalendarEventsRaw(requestParameters: CoreCalendarDeleteCalendarEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCalendarDeleteCalendarEventsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarDeleteCalendarEventsRequest',
                'Required parameter "coreCalendarDeleteCalendarEventsRequest" was null or undefined when calling coreCalendarDeleteCalendarEvents().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_delete_calendar_events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarDeleteCalendarEventsRequestToJSON(requestParameters['coreCalendarDeleteCalendarEventsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete calendar events
     * Delete calendar events
     */
    async coreCalendarDeleteCalendarEvents(requestParameters: CoreCalendarDeleteCalendarEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCalendarDeleteCalendarEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the calendar subscription
     * Delete the calendar subscription
     */
    async coreCalendarDeleteSubscriptionRaw(requestParameters: CoreCalendarDeleteSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['coreCalendarDeleteSubscriptionRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarDeleteSubscriptionRequest',
                'Required parameter "coreCalendarDeleteSubscriptionRequest" was null or undefined when calling coreCalendarDeleteSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_delete_subscription`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarDeleteSubscriptionRequestToJSON(requestParameters['coreCalendarDeleteSubscriptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete the calendar subscription
     * Delete the calendar subscription
     */
    async coreCalendarDeleteSubscription(requestParameters: CoreCalendarDeleteSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.coreCalendarDeleteSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get calendar action events by course
     * Get calendar action events by course
     */
    async coreCalendarGetActionEventsByCourseRaw(requestParameters: CoreCalendarGetActionEventsByCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarGetActionEventsByCourse200Response>> {
        if (requestParameters['coreCalendarGetActionEventsByCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarGetActionEventsByCourseRequest',
                'Required parameter "coreCalendarGetActionEventsByCourseRequest" was null or undefined when calling coreCalendarGetActionEventsByCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_get_action_events_by_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarGetActionEventsByCourseRequestToJSON(requestParameters['coreCalendarGetActionEventsByCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarGetActionEventsByCourse200ResponseFromJSON(jsonValue));
    }

    /**
     * Get calendar action events by course
     * Get calendar action events by course
     */
    async coreCalendarGetActionEventsByCourse(requestParameters: CoreCalendarGetActionEventsByCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarGetActionEventsByCourse200Response> {
        const response = await this.coreCalendarGetActionEventsByCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get calendar action events by courses
     * Get calendar action events by courses
     */
    async coreCalendarGetActionEventsByCoursesRaw(requestParameters: CoreCalendarGetActionEventsByCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarGetActionEventsByCourses200Response>> {
        if (requestParameters['coreCalendarGetActionEventsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarGetActionEventsByCoursesRequest',
                'Required parameter "coreCalendarGetActionEventsByCoursesRequest" was null or undefined when calling coreCalendarGetActionEventsByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_get_action_events_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarGetActionEventsByCoursesRequestToJSON(requestParameters['coreCalendarGetActionEventsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarGetActionEventsByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Get calendar action events by courses
     * Get calendar action events by courses
     */
    async coreCalendarGetActionEventsByCourses(requestParameters: CoreCalendarGetActionEventsByCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarGetActionEventsByCourses200Response> {
        const response = await this.coreCalendarGetActionEventsByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get calendar action events by tiemsort
     * Get calendar action events by tiemsort
     */
    async coreCalendarGetActionEventsByTimesortRaw(requestParameters: CoreCalendarGetActionEventsByTimesortOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarGetActionEventsByTimesort200Response>> {
        if (requestParameters['coreCalendarGetActionEventsByTimesortRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarGetActionEventsByTimesortRequest',
                'Required parameter "coreCalendarGetActionEventsByTimesortRequest" was null or undefined when calling coreCalendarGetActionEventsByTimesort().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_get_action_events_by_timesort`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarGetActionEventsByTimesortRequestToJSON(requestParameters['coreCalendarGetActionEventsByTimesortRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarGetActionEventsByTimesort200ResponseFromJSON(jsonValue));
    }

    /**
     * Get calendar action events by tiemsort
     * Get calendar action events by tiemsort
     */
    async coreCalendarGetActionEventsByTimesort(requestParameters: CoreCalendarGetActionEventsByTimesortOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarGetActionEventsByTimesort200Response> {
        const response = await this.coreCalendarGetActionEventsByTimesortRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the type of events a user can create in the given course.
     * Get the type of events a user can create in the given course.
     */
    async coreCalendarGetAllowedEventTypesRaw(requestParameters: CoreCalendarGetAllowedEventTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarGetAllowedEventTypes200Response>> {
        if (requestParameters['coreCalendarGetAllowedEventTypesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarGetAllowedEventTypesRequest',
                'Required parameter "coreCalendarGetAllowedEventTypesRequest" was null or undefined when calling coreCalendarGetAllowedEventTypes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_get_allowed_event_types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarGetAllowedEventTypesRequestToJSON(requestParameters['coreCalendarGetAllowedEventTypesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarGetAllowedEventTypes200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the type of events a user can create in the given course.
     * Get the type of events a user can create in the given course.
     */
    async coreCalendarGetAllowedEventTypes(requestParameters: CoreCalendarGetAllowedEventTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarGetAllowedEventTypes200Response> {
        const response = await this.coreCalendarGetAllowedEventTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Convenience function to retrieve some permissions/access information for the given course calendar.
     * Convenience function to retrieve some permissions/access information for the given course calendar.
     */
    async coreCalendarGetCalendarAccessInformationRaw(requestParameters: CoreCalendarGetCalendarAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarGetCalendarAccessInformation200Response>> {
        if (requestParameters['coreCalendarGetCalendarAccessInformationRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarGetCalendarAccessInformationRequest',
                'Required parameter "coreCalendarGetCalendarAccessInformationRequest" was null or undefined when calling coreCalendarGetCalendarAccessInformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_get_calendar_access_information`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarGetCalendarAccessInformationRequestToJSON(requestParameters['coreCalendarGetCalendarAccessInformationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarGetCalendarAccessInformation200ResponseFromJSON(jsonValue));
    }

    /**
     * Convenience function to retrieve some permissions/access information for the given course calendar.
     * Convenience function to retrieve some permissions/access information for the given course calendar.
     */
    async coreCalendarGetCalendarAccessInformation(requestParameters: CoreCalendarGetCalendarAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarGetCalendarAccessInformation200Response> {
        const response = await this.coreCalendarGetCalendarAccessInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the day view data for a calendar
     * Fetch the day view data for a calendar
     */
    async coreCalendarGetCalendarDayViewRaw(requestParameters: CoreCalendarGetCalendarDayViewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarGetCalendarDayView200Response>> {
        if (requestParameters['coreCalendarGetCalendarDayViewRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarGetCalendarDayViewRequest',
                'Required parameter "coreCalendarGetCalendarDayViewRequest" was null or undefined when calling coreCalendarGetCalendarDayView().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_get_calendar_day_view`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarGetCalendarDayViewRequestToJSON(requestParameters['coreCalendarGetCalendarDayViewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarGetCalendarDayView200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetch the day view data for a calendar
     * Fetch the day view data for a calendar
     */
    async coreCalendarGetCalendarDayView(requestParameters: CoreCalendarGetCalendarDayViewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarGetCalendarDayView200Response> {
        const response = await this.coreCalendarGetCalendarDayViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get calendar event by id
     * Get calendar event by id
     */
    async coreCalendarGetCalendarEventByIdRaw(requestParameters: CoreCalendarGetCalendarEventByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarGetCalendarEventById200Response>> {
        if (requestParameters['coreCalendarGetCalendarEventByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarGetCalendarEventByIdRequest',
                'Required parameter "coreCalendarGetCalendarEventByIdRequest" was null or undefined when calling coreCalendarGetCalendarEventById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_get_calendar_event_by_id`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarGetCalendarEventByIdRequestToJSON(requestParameters['coreCalendarGetCalendarEventByIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarGetCalendarEventById200ResponseFromJSON(jsonValue));
    }

    /**
     * Get calendar event by id
     * Get calendar event by id
     */
    async coreCalendarGetCalendarEventById(requestParameters: CoreCalendarGetCalendarEventByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarGetCalendarEventById200Response> {
        const response = await this.coreCalendarGetCalendarEventByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get calendar events
     * Get calendar events
     */
    async coreCalendarGetCalendarEventsRaw(requestParameters: CoreCalendarGetCalendarEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarGetCalendarEvents200Response>> {
        if (requestParameters['coreCalendarGetCalendarEventsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarGetCalendarEventsRequest',
                'Required parameter "coreCalendarGetCalendarEventsRequest" was null or undefined when calling coreCalendarGetCalendarEvents().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_get_calendar_events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarGetCalendarEventsRequestToJSON(requestParameters['coreCalendarGetCalendarEventsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarGetCalendarEvents200ResponseFromJSON(jsonValue));
    }

    /**
     * Get calendar events
     * Get calendar events
     */
    async coreCalendarGetCalendarEvents(requestParameters: CoreCalendarGetCalendarEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarGetCalendarEvents200Response> {
        const response = await this.coreCalendarGetCalendarEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the auth token required for exporting a calendar.
     * Return the auth token required for exporting a calendar.
     */
    async coreCalendarGetCalendarExportTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarGetCalendarExportToken200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_get_calendar_export_token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarGetCalendarExportToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the auth token required for exporting a calendar.
     * Return the auth token required for exporting a calendar.
     */
    async coreCalendarGetCalendarExportToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarGetCalendarExportToken200Response> {
        const response = await this.coreCalendarGetCalendarExportTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetch the monthly view data for a calendar
     * Fetch the monthly view data for a calendar
     */
    async coreCalendarGetCalendarMonthlyViewRaw(requestParameters: CoreCalendarGetCalendarMonthlyViewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarGetCalendarMonthlyView200Response>> {
        if (requestParameters['coreCalendarGetCalendarMonthlyViewRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarGetCalendarMonthlyViewRequest',
                'Required parameter "coreCalendarGetCalendarMonthlyViewRequest" was null or undefined when calling coreCalendarGetCalendarMonthlyView().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_get_calendar_monthly_view`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarGetCalendarMonthlyViewRequestToJSON(requestParameters['coreCalendarGetCalendarMonthlyViewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarGetCalendarMonthlyView200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetch the monthly view data for a calendar
     * Fetch the monthly view data for a calendar
     */
    async coreCalendarGetCalendarMonthlyView(requestParameters: CoreCalendarGetCalendarMonthlyViewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarGetCalendarMonthlyView200Response> {
        const response = await this.coreCalendarGetCalendarMonthlyViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the upcoming view data for a calendar
     * Fetch the upcoming view data for a calendar
     */
    async coreCalendarGetCalendarUpcomingViewRaw(requestParameters: CoreCalendarGetCalendarUpcomingViewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarGetCalendarUpcomingView200Response>> {
        if (requestParameters['coreCalendarGetCalendarUpcomingViewRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarGetCalendarUpcomingViewRequest',
                'Required parameter "coreCalendarGetCalendarUpcomingViewRequest" was null or undefined when calling coreCalendarGetCalendarUpcomingView().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_get_calendar_upcoming_view`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarGetCalendarUpcomingViewRequestToJSON(requestParameters['coreCalendarGetCalendarUpcomingViewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarGetCalendarUpcomingView200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetch the upcoming view data for a calendar
     * Fetch the upcoming view data for a calendar
     */
    async coreCalendarGetCalendarUpcomingView(requestParameters: CoreCalendarGetCalendarUpcomingViewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarGetCalendarUpcomingView200Response> {
        const response = await this.coreCalendarGetCalendarUpcomingViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch unix timestamps for given date times.
     * Fetch unix timestamps for given date times.
     */
    async coreCalendarGetTimestampsRaw(requestParameters: CoreCalendarGetTimestampsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarGetTimestamps200Response>> {
        if (requestParameters['coreCalendarGetTimestampsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarGetTimestampsRequest',
                'Required parameter "coreCalendarGetTimestampsRequest" was null or undefined when calling coreCalendarGetTimestamps().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_get_timestamps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarGetTimestampsRequestToJSON(requestParameters['coreCalendarGetTimestampsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarGetTimestamps200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetch unix timestamps for given date times.
     * Fetch unix timestamps for given date times.
     */
    async coreCalendarGetTimestamps(requestParameters: CoreCalendarGetTimestampsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarGetTimestamps200Response> {
        const response = await this.coreCalendarGetTimestampsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit form data for event form
     * Submit form data for event form
     */
    async coreCalendarSubmitCreateUpdateFormRaw(requestParameters: CoreCalendarSubmitCreateUpdateFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarSubmitCreateUpdateForm200Response>> {
        if (requestParameters['coreCalendarSubmitCreateUpdateFormRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarSubmitCreateUpdateFormRequest',
                'Required parameter "coreCalendarSubmitCreateUpdateFormRequest" was null or undefined when calling coreCalendarSubmitCreateUpdateForm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_submit_create_update_form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarSubmitCreateUpdateFormRequestToJSON(requestParameters['coreCalendarSubmitCreateUpdateFormRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarSubmitCreateUpdateForm200ResponseFromJSON(jsonValue));
    }

    /**
     * Submit form data for event form
     * Submit form data for event form
     */
    async coreCalendarSubmitCreateUpdateForm(requestParameters: CoreCalendarSubmitCreateUpdateFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarSubmitCreateUpdateForm200Response> {
        const response = await this.coreCalendarSubmitCreateUpdateFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the start day (but not time) for an event.
     * Update the start day (but not time) for an event.
     */
    async coreCalendarUpdateEventStartDayRaw(requestParameters: CoreCalendarUpdateEventStartDayOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarUpdateEventStartDay200Response>> {
        if (requestParameters['coreCalendarUpdateEventStartDayRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCalendarUpdateEventStartDayRequest',
                'Required parameter "coreCalendarUpdateEventStartDayRequest" was null or undefined when calling coreCalendarUpdateEventStartDay().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_calendar_update_event_start_day`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCalendarUpdateEventStartDayRequestToJSON(requestParameters['coreCalendarUpdateEventStartDayRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarUpdateEventStartDay200ResponseFromJSON(jsonValue));
    }

    /**
     * Update the start day (but not time) for an event.
     * Update the start day (but not time) for an event.
     */
    async coreCalendarUpdateEventStartDay(requestParameters: CoreCalendarUpdateEventStartDayOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarUpdateEventStartDay200Response> {
        const response = await this.coreCalendarUpdateEventStartDayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change the editing mode
     * Change the editing mode
     */
    async coreChangeEditmodeRaw(requestParameters: CoreChangeEditmodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreChangeEditmode200Response>> {
        if (requestParameters['coreChangeEditmodeRequest'] == null) {
            throw new runtime.RequiredError(
                'coreChangeEditmodeRequest',
                'Required parameter "coreChangeEditmodeRequest" was null or undefined when calling coreChangeEditmode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_change_editmode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreChangeEditmodeRequestToJSON(requestParameters['coreChangeEditmodeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreChangeEditmode200ResponseFromJSON(jsonValue));
    }

    /**
     * Change the editing mode
     * Change the editing mode
     */
    async coreChangeEditmode(requestParameters: CoreChangeEditmodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreChangeEditmode200Response> {
        const response = await this.coreChangeEditmodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds cohort members.
     * Adds cohort members.
     */
    async coreCohortAddCohortMembersRaw(requestParameters: CoreCohortAddCohortMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCohortAddCohortMembers200Response>> {
        if (requestParameters['coreCohortAddCohortMembersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCohortAddCohortMembersRequest',
                'Required parameter "coreCohortAddCohortMembersRequest" was null or undefined when calling coreCohortAddCohortMembers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_cohort_add_cohort_members`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCohortAddCohortMembersRequestToJSON(requestParameters['coreCohortAddCohortMembersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCohortAddCohortMembers200ResponseFromJSON(jsonValue));
    }

    /**
     * Adds cohort members.
     * Adds cohort members.
     */
    async coreCohortAddCohortMembers(requestParameters: CoreCohortAddCohortMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCohortAddCohortMembers200Response> {
        const response = await this.coreCohortAddCohortMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new cohorts.
     * Creates new cohorts.
     */
    async coreCohortCreateCohortsRaw(requestParameters: CoreCohortCreateCohortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCohortCreateCohortsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCohortCreateCohortsRequest',
                'Required parameter "coreCohortCreateCohortsRequest" was null or undefined when calling coreCohortCreateCohorts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_cohort_create_cohorts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCohortCreateCohortsRequestToJSON(requestParameters['coreCohortCreateCohortsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates new cohorts.
     * Creates new cohorts.
     */
    async coreCohortCreateCohorts(requestParameters: CoreCohortCreateCohortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCohortCreateCohortsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes cohort members.
     * Deletes cohort members.
     */
    async coreCohortDeleteCohortMembersRaw(requestParameters: CoreCohortDeleteCohortMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCohortDeleteCohortMembersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCohortDeleteCohortMembersRequest',
                'Required parameter "coreCohortDeleteCohortMembersRequest" was null or undefined when calling coreCohortDeleteCohortMembers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_cohort_delete_cohort_members`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCohortDeleteCohortMembersRequestToJSON(requestParameters['coreCohortDeleteCohortMembersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes cohort members.
     * Deletes cohort members.
     */
    async coreCohortDeleteCohortMembers(requestParameters: CoreCohortDeleteCohortMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCohortDeleteCohortMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes all specified cohorts.
     * Deletes all specified cohorts.
     */
    async coreCohortDeleteCohortsRaw(requestParameters: CoreCohortDeleteCohortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCohortDeleteCohortsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCohortDeleteCohortsRequest',
                'Required parameter "coreCohortDeleteCohortsRequest" was null or undefined when calling coreCohortDeleteCohorts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_cohort_delete_cohorts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCohortDeleteCohortsRequestToJSON(requestParameters['coreCohortDeleteCohortsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes all specified cohorts.
     * Deletes all specified cohorts.
     */
    async coreCohortDeleteCohorts(requestParameters: CoreCohortDeleteCohortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCohortDeleteCohortsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns cohort members.
     * Returns cohort members.
     */
    async coreCohortGetCohortMembersRaw(requestParameters: CoreCohortGetCohortMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCohortGetCohortMembersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCohortGetCohortMembersRequest',
                'Required parameter "coreCohortGetCohortMembersRequest" was null or undefined when calling coreCohortGetCohortMembers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_cohort_get_cohort_members`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCohortGetCohortMembersRequestToJSON(requestParameters['coreCohortGetCohortMembersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns cohort members.
     * Returns cohort members.
     */
    async coreCohortGetCohortMembers(requestParameters: CoreCohortGetCohortMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCohortGetCohortMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns cohort details.
     * Returns cohort details.
     */
    async coreCohortGetCohortsRaw(requestParameters: CoreCohortGetCohortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCohortGetCohortsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCohortGetCohortsRequest',
                'Required parameter "coreCohortGetCohortsRequest" was null or undefined when calling coreCohortGetCohorts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_cohort_get_cohorts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCohortGetCohortsRequestToJSON(requestParameters['coreCohortGetCohortsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns cohort details.
     * Returns cohort details.
     */
    async coreCohortGetCohorts(requestParameters: CoreCohortGetCohortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCohortGetCohortsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for cohorts.
     * Search for cohorts.
     */
    async coreCohortSearchCohortsRaw(requestParameters: CoreCohortSearchCohortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCohortSearchCohorts200Response>> {
        if (requestParameters['coreCohortSearchCohortsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCohortSearchCohortsRequest',
                'Required parameter "coreCohortSearchCohortsRequest" was null or undefined when calling coreCohortSearchCohorts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_cohort_search_cohorts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCohortSearchCohortsRequestToJSON(requestParameters['coreCohortSearchCohortsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCohortSearchCohorts200ResponseFromJSON(jsonValue));
    }

    /**
     * Search for cohorts.
     * Search for cohorts.
     */
    async coreCohortSearchCohorts(requestParameters: CoreCohortSearchCohortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCohortSearchCohorts200Response> {
        const response = await this.coreCohortSearchCohortsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates existing cohorts.
     * Updates existing cohorts.
     */
    async coreCohortUpdateCohortsRaw(requestParameters: CoreCohortUpdateCohortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCohortUpdateCohortsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCohortUpdateCohortsRequest',
                'Required parameter "coreCohortUpdateCohortsRequest" was null or undefined when calling coreCohortUpdateCohorts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_cohort_update_cohorts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCohortUpdateCohortsRequestToJSON(requestParameters['coreCohortUpdateCohortsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates existing cohorts.
     * Updates existing cohorts.
     */
    async coreCohortUpdateCohorts(requestParameters: CoreCohortUpdateCohortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCohortUpdateCohortsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a comment or comments.
     * Adds a comment or comments.
     */
    async coreCommentAddCommentsRaw(requestParameters: CoreCommentAddCommentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCommentAddCommentsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCommentAddCommentsRequest',
                'Required parameter "coreCommentAddCommentsRequest" was null or undefined when calling coreCommentAddComments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_comment_add_comments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCommentAddCommentsRequestToJSON(requestParameters['coreCommentAddCommentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Adds a comment or comments.
     * Adds a comment or comments.
     */
    async coreCommentAddComments(requestParameters: CoreCommentAddCommentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCommentAddCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a comment or comments.
     * Deletes a comment or comments.
     */
    async coreCommentDeleteCommentsRaw(requestParameters: CoreCommentDeleteCommentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCommentDeleteCommentsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCommentDeleteCommentsRequest',
                'Required parameter "coreCommentDeleteCommentsRequest" was null or undefined when calling coreCommentDeleteComments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_comment_delete_comments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCommentDeleteCommentsRequestToJSON(requestParameters['coreCommentDeleteCommentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes a comment or comments.
     * Deletes a comment or comments.
     */
    async coreCommentDeleteComments(requestParameters: CoreCommentDeleteCommentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCommentDeleteCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns comments.
     * Returns comments.
     */
    async coreCommentGetCommentsRaw(requestParameters: CoreCommentGetCommentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCommentGetComments200Response>> {
        if (requestParameters['coreCommentGetCommentsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCommentGetCommentsRequest',
                'Required parameter "coreCommentGetCommentsRequest" was null or undefined when calling coreCommentGetComments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_comment_get_comments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCommentGetCommentsRequestToJSON(requestParameters['coreCommentGetCommentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCommentGetComments200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns comments.
     * Returns comments.
     */
    async coreCommentGetComments(requestParameters: CoreCommentGetCommentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCommentGetComments200Response> {
        const response = await this.coreCommentGetCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add the competency to a course
     * Add the competency to a course
     */
    async coreCompetencyAddCompetencyToCourseRaw(requestParameters: CoreCompetencyAddCompetencyToCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyAddCompetencyToCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyAddCompetencyToCourseRequest',
                'Required parameter "coreCompetencyAddCompetencyToCourseRequest" was null or undefined when calling coreCompetencyAddCompetencyToCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_add_competency_to_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyAddCompetencyToCourseRequestToJSON(requestParameters['coreCompetencyAddCompetencyToCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Add the competency to a course
     * Add the competency to a course
     */
    async coreCompetencyAddCompetencyToCourse(requestParameters: CoreCompetencyAddCompetencyToCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyAddCompetencyToCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add the competency to a learning plan
     * Add the competency to a learning plan
     */
    async coreCompetencyAddCompetencyToPlanRaw(requestParameters: CoreCompetencyAddCompetencyToPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyAddCompetencyToPlanRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyAddCompetencyToPlanRequest',
                'Required parameter "coreCompetencyAddCompetencyToPlanRequest" was null or undefined when calling coreCompetencyAddCompetencyToPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_add_competency_to_plan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyAddCompetencyToPlanRequestToJSON(requestParameters['coreCompetencyAddCompetencyToPlanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Add the competency to a learning plan
     * Add the competency to a learning plan
     */
    async coreCompetencyAddCompetencyToPlan(requestParameters: CoreCompetencyAddCompetencyToPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyAddCompetencyToPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add the competency to a template
     * Add the competency to a template
     */
    async coreCompetencyAddCompetencyToTemplateRaw(requestParameters: CoreCompetencyAddCompetencyToTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyAddCompetencyToTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyAddCompetencyToTemplateRequest',
                'Required parameter "coreCompetencyAddCompetencyToTemplateRequest" was null or undefined when calling coreCompetencyAddCompetencyToTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_add_competency_to_template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyAddCompetencyToTemplateRequestToJSON(requestParameters['coreCompetencyAddCompetencyToTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Add the competency to a template
     * Add the competency to a template
     */
    async coreCompetencyAddCompetencyToTemplate(requestParameters: CoreCompetencyAddCompetencyToTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyAddCompetencyToTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a related competency
     * Adds a related competency
     */
    async coreCompetencyAddRelatedCompetencyRaw(requestParameters: CoreCompetencyAddRelatedCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyAddRelatedCompetencyRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyAddRelatedCompetencyRequest',
                'Required parameter "coreCompetencyAddRelatedCompetencyRequest" was null or undefined when calling coreCompetencyAddRelatedCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_add_related_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyAddRelatedCompetencyRequestToJSON(requestParameters['coreCompetencyAddRelatedCompetencyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Adds a related competency
     * Adds a related competency
     */
    async coreCompetencyAddRelatedCompetency(requestParameters: CoreCompetencyAddRelatedCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyAddRelatedCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Approve a plan.
     * Approve a plan.
     */
    async coreCompetencyApprovePlanRaw(requestParameters: CoreCompetencyApprovePlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyApprovePlanRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyApprovePlanRequest',
                'Required parameter "coreCompetencyApprovePlanRequest" was null or undefined when calling coreCompetencyApprovePlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_approve_plan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyApprovePlanRequestToJSON(requestParameters['coreCompetencyApprovePlanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Approve a plan.
     * Approve a plan.
     */
    async coreCompetencyApprovePlan(requestParameters: CoreCompetencyApprovePlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyApprovePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log event competency framework viewed
     * Log event competency framework viewed
     */
    async coreCompetencyCompetencyFrameworkViewedRaw(requestParameters: CoreCompetencyCompetencyFrameworkViewedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCompetencyFrameworkViewedRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCompetencyFrameworkViewedRequest',
                'Required parameter "coreCompetencyCompetencyFrameworkViewedRequest" was null or undefined when calling coreCompetencyCompetencyFrameworkViewed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_competency_framework_viewed`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCompetencyFrameworkViewedRequestToJSON(requestParameters['coreCompetencyCompetencyFrameworkViewedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Log event competency framework viewed
     * Log event competency framework viewed
     */
    async coreCompetencyCompetencyFrameworkViewed(requestParameters: CoreCompetencyCompetencyFrameworkViewedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyCompetencyFrameworkViewedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log event competency viewed
     * Log event competency viewed
     */
    async coreCompetencyCompetencyViewedRaw(requestParameters: CoreCompetencyCompetencyViewedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCompetencyViewedRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCompetencyViewedRequest',
                'Required parameter "coreCompetencyCompetencyViewedRequest" was null or undefined when calling coreCompetencyCompetencyViewed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_competency_viewed`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCompetencyViewedRequestToJSON(requestParameters['coreCompetencyCompetencyViewedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Log event competency viewed
     * Log event competency viewed
     */
    async coreCompetencyCompetencyViewed(requestParameters: CoreCompetencyCompetencyViewedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyCompetencyViewedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Complete learning plan.
     * Complete learning plan.
     */
    async coreCompetencyCompletePlanRaw(requestParameters: CoreCompetencyCompletePlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCompletePlanRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCompletePlanRequest',
                'Required parameter "coreCompetencyCompletePlanRequest" was null or undefined when calling coreCompetencyCompletePlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_complete_plan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCompletePlanRequestToJSON(requestParameters['coreCompetencyCompletePlanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Complete learning plan.
     * Complete learning plan.
     */
    async coreCompetencyCompletePlan(requestParameters: CoreCompetencyCompletePlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyCompletePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count a list of a competencies.
     * Count a list of a competencies.
     */
    async coreCompetencyCountCompetenciesRaw(requestParameters: CoreCompetencyCountCompetenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCountCompetenciesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCountCompetenciesRequest',
                'Required parameter "coreCompetencyCountCompetenciesRequest" was null or undefined when calling coreCompetencyCountCompetencies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_count_competencies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCountCompetenciesRequestToJSON(requestParameters['coreCompetencyCountCompetenciesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Count a list of a competencies.
     * Count a list of a competencies.
     */
    async coreCompetencyCountCompetencies(requestParameters: CoreCompetencyCountCompetenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyCountCompetenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the competencies in a course
     * List the competencies in a course
     */
    async coreCompetencyCountCompetenciesInCourseRaw(requestParameters: CoreCompetencyCountCompetenciesInCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCountCompetenciesInCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCountCompetenciesInCourseRequest',
                'Required parameter "coreCompetencyCountCompetenciesInCourseRequest" was null or undefined when calling coreCompetencyCountCompetenciesInCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_count_competencies_in_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCountCompetenciesInCourseRequestToJSON(requestParameters['coreCompetencyCountCompetenciesInCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List the competencies in a course
     * List the competencies in a course
     */
    async coreCompetencyCountCompetenciesInCourse(requestParameters: CoreCompetencyCountCompetenciesInCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyCountCompetenciesInCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count a list of a competencies for a given template.
     * Count a list of a competencies for a given template.
     */
    async coreCompetencyCountCompetenciesInTemplateRaw(requestParameters: CoreCompetencyCountCompetenciesInTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCountCompetenciesInTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCountCompetenciesInTemplateRequest',
                'Required parameter "coreCompetencyCountCompetenciesInTemplateRequest" was null or undefined when calling coreCompetencyCountCompetenciesInTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_count_competencies_in_template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCountCompetenciesInTemplateRequestToJSON(requestParameters['coreCompetencyCountCompetenciesInTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Count a list of a competencies for a given template.
     * Count a list of a competencies for a given template.
     */
    async coreCompetencyCountCompetenciesInTemplate(requestParameters: CoreCompetencyCountCompetenciesInTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyCountCompetenciesInTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count a list of a competency frameworks.
     * Count a list of a competency frameworks.
     */
    async coreCompetencyCountCompetencyFrameworksRaw(requestParameters: CoreCompetencyCountCompetencyFrameworksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCountCompetencyFrameworksRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCountCompetencyFrameworksRequest',
                'Required parameter "coreCompetencyCountCompetencyFrameworksRequest" was null or undefined when calling coreCompetencyCountCompetencyFrameworks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_count_competency_frameworks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCountCompetencyFrameworksRequestToJSON(requestParameters['coreCompetencyCountCompetencyFrameworksRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Count a list of a competency frameworks.
     * Count a list of a competency frameworks.
     */
    async coreCompetencyCountCompetencyFrameworks(requestParameters: CoreCompetencyCountCompetencyFrameworksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyCountCompetencyFrameworksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count the competencies in a course module
     * Count the competencies in a course module
     */
    async coreCompetencyCountCourseModuleCompetenciesRaw(requestParameters: CoreCompetencyCountCourseModuleCompetenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCountCourseModuleCompetenciesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCountCourseModuleCompetenciesRequest',
                'Required parameter "coreCompetencyCountCourseModuleCompetenciesRequest" was null or undefined when calling coreCompetencyCountCourseModuleCompetencies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_count_course_module_competencies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCountCourseModuleCompetenciesRequestToJSON(requestParameters['coreCompetencyCountCourseModuleCompetenciesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Count the competencies in a course module
     * Count the competencies in a course module
     */
    async coreCompetencyCountCourseModuleCompetencies(requestParameters: CoreCompetencyCountCourseModuleCompetenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyCountCourseModuleCompetenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the courses using a competency
     * List the courses using a competency
     */
    async coreCompetencyCountCoursesUsingCompetencyRaw(requestParameters: CoreCompetencyCountCoursesUsingCompetencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCompetencyViewedRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCompetencyViewedRequest',
                'Required parameter "coreCompetencyCompetencyViewedRequest" was null or undefined when calling coreCompetencyCountCoursesUsingCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_count_courses_using_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCompetencyViewedRequestToJSON(requestParameters['coreCompetencyCompetencyViewedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List the courses using a competency
     * List the courses using a competency
     */
    async coreCompetencyCountCoursesUsingCompetency(requestParameters: CoreCompetencyCountCoursesUsingCompetencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyCountCoursesUsingCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count a list of a learning plan templates.
     * Count a list of a learning plan templates.
     */
    async coreCompetencyCountTemplatesRaw(requestParameters: CoreCompetencyCountTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCountCompetencyFrameworksRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCountCompetencyFrameworksRequest',
                'Required parameter "coreCompetencyCountCompetencyFrameworksRequest" was null or undefined when calling coreCompetencyCountTemplates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_count_templates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCountCompetencyFrameworksRequestToJSON(requestParameters['coreCompetencyCountCompetencyFrameworksRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Count a list of a learning plan templates.
     * Count a list of a learning plan templates.
     */
    async coreCompetencyCountTemplates(requestParameters: CoreCompetencyCountTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyCountTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count a list of a learning plan templates for a given competency.
     * Count a list of a learning plan templates for a given competency.
     */
    async coreCompetencyCountTemplatesUsingCompetencyRaw(requestParameters: CoreCompetencyCountTemplatesUsingCompetencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCompetencyViewedRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCompetencyViewedRequest',
                'Required parameter "coreCompetencyCompetencyViewedRequest" was null or undefined when calling coreCompetencyCountTemplatesUsingCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_count_templates_using_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCompetencyViewedRequestToJSON(requestParameters['coreCompetencyCompetencyViewedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Count a list of a learning plan templates for a given competency.
     * Count a list of a learning plan templates for a given competency.
     */
    async coreCompetencyCountTemplatesUsingCompetency(requestParameters: CoreCompetencyCountTemplatesUsingCompetencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyCountTemplatesUsingCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new competencies.
     * Creates new competencies.
     */
    async coreCompetencyCreateCompetencyRaw(requestParameters: CoreCompetencyCreateCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyCreateCompetency200Response>> {
        if (requestParameters['coreCompetencyCreateCompetencyRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCreateCompetencyRequest',
                'Required parameter "coreCompetencyCreateCompetencyRequest" was null or undefined when calling coreCompetencyCreateCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_create_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCreateCompetencyRequestToJSON(requestParameters['coreCompetencyCreateCompetencyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyCreateCompetency200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates new competencies.
     * Creates new competencies.
     */
    async coreCompetencyCreateCompetency(requestParameters: CoreCompetencyCreateCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyCreateCompetency200Response> {
        const response = await this.coreCompetencyCreateCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new competency frameworks.
     * Creates new competency frameworks.
     */
    async coreCompetencyCreateCompetencyFrameworkRaw(requestParameters: CoreCompetencyCreateCompetencyFrameworkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyCreateCompetencyFramework200Response>> {
        if (requestParameters['coreCompetencyCreateCompetencyFrameworkRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCreateCompetencyFrameworkRequest',
                'Required parameter "coreCompetencyCreateCompetencyFrameworkRequest" was null or undefined when calling coreCompetencyCreateCompetencyFramework().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_create_competency_framework`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCreateCompetencyFrameworkRequestToJSON(requestParameters['coreCompetencyCreateCompetencyFrameworkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyCreateCompetencyFramework200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates new competency frameworks.
     * Creates new competency frameworks.
     */
    async coreCompetencyCreateCompetencyFramework(requestParameters: CoreCompetencyCreateCompetencyFrameworkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyCreateCompetencyFramework200Response> {
        const response = await this.coreCompetencyCreateCompetencyFrameworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a learning plan.
     * Creates a learning plan.
     */
    async coreCompetencyCreatePlanRaw(requestParameters: CoreCompetencyCreatePlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyCreatePlan200Response>> {
        if (requestParameters['coreCompetencyCreatePlanRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCreatePlanRequest',
                'Required parameter "coreCompetencyCreatePlanRequest" was null or undefined when calling coreCompetencyCreatePlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_create_plan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCreatePlanRequestToJSON(requestParameters['coreCompetencyCreatePlanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyCreatePlan200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a learning plan.
     * Creates a learning plan.
     */
    async coreCompetencyCreatePlan(requestParameters: CoreCompetencyCreatePlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyCreatePlan200Response> {
        const response = await this.coreCompetencyCreatePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new learning plan templates.
     * Creates new learning plan templates.
     */
    async coreCompetencyCreateTemplateRaw(requestParameters: CoreCompetencyCreateTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyCreateTemplate200Response>> {
        if (requestParameters['coreCompetencyCreateTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCreateTemplateRequest',
                'Required parameter "coreCompetencyCreateTemplateRequest" was null or undefined when calling coreCompetencyCreateTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_create_template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCreateTemplateRequestToJSON(requestParameters['coreCompetencyCreateTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyCreateTemplate200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates new learning plan templates.
     * Creates new learning plan templates.
     */
    async coreCompetencyCreateTemplate(requestParameters: CoreCompetencyCreateTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyCreateTemplate200Response> {
        const response = await this.coreCompetencyCreateTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an evidence of prior learning relationship with a competency.
     * Create an evidence of prior learning relationship with a competency.
     */
    async coreCompetencyCreateUserEvidenceCompetencyRaw(requestParameters: CoreCompetencyCreateUserEvidenceCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyCreateUserEvidenceCompetency200Response>> {
        if (requestParameters['coreCompetencyCreateUserEvidenceCompetencyRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCreateUserEvidenceCompetencyRequest',
                'Required parameter "coreCompetencyCreateUserEvidenceCompetencyRequest" was null or undefined when calling coreCompetencyCreateUserEvidenceCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_create_user_evidence_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCreateUserEvidenceCompetencyRequestToJSON(requestParameters['coreCompetencyCreateUserEvidenceCompetencyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyCreateUserEvidenceCompetency200ResponseFromJSON(jsonValue));
    }

    /**
     * Create an evidence of prior learning relationship with a competency.
     * Create an evidence of prior learning relationship with a competency.
     */
    async coreCompetencyCreateUserEvidenceCompetency(requestParameters: CoreCompetencyCreateUserEvidenceCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyCreateUserEvidenceCompetency200Response> {
        const response = await this.coreCompetencyCreateUserEvidenceCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a competency.
     * Delete a competency.
     */
    async coreCompetencyDeleteCompetencyRaw(requestParameters: CoreCompetencyDeleteCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyDeleteCompetencyRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyDeleteCompetencyRequest',
                'Required parameter "coreCompetencyDeleteCompetencyRequest" was null or undefined when calling coreCompetencyDeleteCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_delete_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyDeleteCompetencyRequestToJSON(requestParameters['coreCompetencyDeleteCompetencyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a competency.
     * Delete a competency.
     */
    async coreCompetencyDeleteCompetency(requestParameters: CoreCompetencyDeleteCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyDeleteCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a competency framework.
     * Delete a competency framework.
     */
    async coreCompetencyDeleteCompetencyFrameworkRaw(requestParameters: CoreCompetencyDeleteCompetencyFrameworkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyDeleteCompetencyFrameworkRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyDeleteCompetencyFrameworkRequest',
                'Required parameter "coreCompetencyDeleteCompetencyFrameworkRequest" was null or undefined when calling coreCompetencyDeleteCompetencyFramework().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_delete_competency_framework`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyDeleteCompetencyFrameworkRequestToJSON(requestParameters['coreCompetencyDeleteCompetencyFrameworkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a competency framework.
     * Delete a competency framework.
     */
    async coreCompetencyDeleteCompetencyFramework(requestParameters: CoreCompetencyDeleteCompetencyFrameworkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyDeleteCompetencyFrameworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an evidence
     * Delete an evidence
     */
    async coreCompetencyDeleteEvidenceRaw(requestParameters: CoreCompetencyDeleteEvidenceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyDeleteEvidenceRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyDeleteEvidenceRequest',
                'Required parameter "coreCompetencyDeleteEvidenceRequest" was null or undefined when calling coreCompetencyDeleteEvidence().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_delete_evidence`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyDeleteEvidenceRequestToJSON(requestParameters['coreCompetencyDeleteEvidenceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an evidence
     * Delete an evidence
     */
    async coreCompetencyDeleteEvidence(requestParameters: CoreCompetencyDeleteEvidenceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyDeleteEvidenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a learning plan.
     * Delete a learning plan.
     */
    async coreCompetencyDeletePlanRaw(requestParameters: CoreCompetencyDeletePlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyDeletePlanRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyDeletePlanRequest',
                'Required parameter "coreCompetencyDeletePlanRequest" was null or undefined when calling coreCompetencyDeletePlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_delete_plan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyDeletePlanRequestToJSON(requestParameters['coreCompetencyDeletePlanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a learning plan.
     * Delete a learning plan.
     */
    async coreCompetencyDeletePlan(requestParameters: CoreCompetencyDeletePlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyDeletePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a learning plan template.
     * Delete a learning plan template.
     */
    async coreCompetencyDeleteTemplateRaw(requestParameters: CoreCompetencyDeleteTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyDeleteTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyDeleteTemplateRequest',
                'Required parameter "coreCompetencyDeleteTemplateRequest" was null or undefined when calling coreCompetencyDeleteTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_delete_template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyDeleteTemplateRequestToJSON(requestParameters['coreCompetencyDeleteTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a learning plan template.
     * Delete a learning plan template.
     */
    async coreCompetencyDeleteTemplate(requestParameters: CoreCompetencyDeleteTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyDeleteTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an evidence of prior learning.
     * Delete an evidence of prior learning.
     */
    async coreCompetencyDeleteUserEvidenceRaw(requestParameters: CoreCompetencyDeleteUserEvidenceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyDeleteUserEvidenceRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyDeleteUserEvidenceRequest',
                'Required parameter "coreCompetencyDeleteUserEvidenceRequest" was null or undefined when calling coreCompetencyDeleteUserEvidence().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_delete_user_evidence`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyDeleteUserEvidenceRequestToJSON(requestParameters['coreCompetencyDeleteUserEvidenceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an evidence of prior learning.
     * Delete an evidence of prior learning.
     */
    async coreCompetencyDeleteUserEvidence(requestParameters: CoreCompetencyDeleteUserEvidenceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyDeleteUserEvidenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an evidence of prior learning relationship with a competency.
     * Delete an evidence of prior learning relationship with a competency.
     */
    async coreCompetencyDeleteUserEvidenceCompetencyRaw(requestParameters: CoreCompetencyDeleteUserEvidenceCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyDeleteUserEvidenceCompetencyRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyDeleteUserEvidenceCompetencyRequest',
                'Required parameter "coreCompetencyDeleteUserEvidenceCompetencyRequest" was null or undefined when calling coreCompetencyDeleteUserEvidenceCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_delete_user_evidence_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyDeleteUserEvidenceCompetencyRequestToJSON(requestParameters['coreCompetencyDeleteUserEvidenceCompetencyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an evidence of prior learning relationship with a competency.
     * Delete an evidence of prior learning relationship with a competency.
     */
    async coreCompetencyDeleteUserEvidenceCompetency(requestParameters: CoreCompetencyDeleteUserEvidenceCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyDeleteUserEvidenceCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Duplicate a competency framework.
     * Duplicate a competency framework.
     */
    async coreCompetencyDuplicateCompetencyFrameworkRaw(requestParameters: CoreCompetencyDuplicateCompetencyFrameworkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyDuplicateCompetencyFramework200Response>> {
        if (requestParameters['coreCompetencyDuplicateCompetencyFrameworkRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyDuplicateCompetencyFrameworkRequest',
                'Required parameter "coreCompetencyDuplicateCompetencyFrameworkRequest" was null or undefined when calling coreCompetencyDuplicateCompetencyFramework().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_duplicate_competency_framework`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyDuplicateCompetencyFrameworkRequestToJSON(requestParameters['coreCompetencyDuplicateCompetencyFrameworkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyDuplicateCompetencyFramework200ResponseFromJSON(jsonValue));
    }

    /**
     * Duplicate a competency framework.
     * Duplicate a competency framework.
     */
    async coreCompetencyDuplicateCompetencyFramework(requestParameters: CoreCompetencyDuplicateCompetencyFrameworkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyDuplicateCompetencyFramework200Response> {
        const response = await this.coreCompetencyDuplicateCompetencyFrameworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Duplicate learning plan template.
     * Duplicate learning plan template.
     */
    async coreCompetencyDuplicateTemplateRaw(requestParameters: CoreCompetencyDuplicateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyCreateTemplate200Response>> {
        if (requestParameters['coreCompetencyCountCompetenciesInTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCountCompetenciesInTemplateRequest',
                'Required parameter "coreCompetencyCountCompetenciesInTemplateRequest" was null or undefined when calling coreCompetencyDuplicateTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_duplicate_template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCountCompetenciesInTemplateRequestToJSON(requestParameters['coreCompetencyCountCompetenciesInTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyCreateTemplate200ResponseFromJSON(jsonValue));
    }

    /**
     * Duplicate learning plan template.
     * Duplicate learning plan template.
     */
    async coreCompetencyDuplicateTemplate(requestParameters: CoreCompetencyDuplicateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyCreateTemplate200Response> {
        const response = await this.coreCompetencyDuplicateTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the values for a specific scale
     * Fetch the values for a specific scale
     */
    async coreCompetencyGetScaleValuesRaw(requestParameters: CoreCompetencyGetScaleValuesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyGetScaleValuesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyGetScaleValuesRequest',
                'Required parameter "coreCompetencyGetScaleValuesRequest" was null or undefined when calling coreCompetencyGetScaleValues().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_get_scale_values`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyGetScaleValuesRequestToJSON(requestParameters['coreCompetencyGetScaleValuesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Fetch the values for a specific scale
     * Fetch the values for a specific scale
     */
    async coreCompetencyGetScaleValues(requestParameters: CoreCompetencyGetScaleValuesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyGetScaleValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Grade a competency.
     * Grade a competency.
     */
    async coreCompetencyGradeCompetencyRaw(requestParameters: CoreCompetencyGradeCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyGradeCompetency200Response>> {
        if (requestParameters['coreCompetencyGradeCompetencyRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyGradeCompetencyRequest',
                'Required parameter "coreCompetencyGradeCompetencyRequest" was null or undefined when calling coreCompetencyGradeCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_grade_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyGradeCompetencyRequestToJSON(requestParameters['coreCompetencyGradeCompetencyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyGradeCompetency200ResponseFromJSON(jsonValue));
    }

    /**
     * Grade a competency.
     * Grade a competency.
     */
    async coreCompetencyGradeCompetency(requestParameters: CoreCompetencyGradeCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyGradeCompetency200Response> {
        const response = await this.coreCompetencyGradeCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Grade a competency from the course page.
     * Grade a competency from the course page.
     */
    async coreCompetencyGradeCompetencyInCourseRaw(requestParameters: CoreCompetencyGradeCompetencyInCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyGradeCompetencyInCourse200Response>> {
        if (requestParameters['coreCompetencyGradeCompetencyInCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyGradeCompetencyInCourseRequest',
                'Required parameter "coreCompetencyGradeCompetencyInCourseRequest" was null or undefined when calling coreCompetencyGradeCompetencyInCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_grade_competency_in_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyGradeCompetencyInCourseRequestToJSON(requestParameters['coreCompetencyGradeCompetencyInCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyGradeCompetencyInCourse200ResponseFromJSON(jsonValue));
    }

    /**
     * Grade a competency from the course page.
     * Grade a competency from the course page.
     */
    async coreCompetencyGradeCompetencyInCourse(requestParameters: CoreCompetencyGradeCompetencyInCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyGradeCompetencyInCourse200Response> {
        const response = await this.coreCompetencyGradeCompetencyInCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Grade a competency from the user plan page.
     * Grade a competency from the user plan page.
     */
    async coreCompetencyGradeCompetencyInPlanRaw(requestParameters: CoreCompetencyGradeCompetencyInPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyGradeCompetencyInCourse200Response>> {
        if (requestParameters['coreCompetencyGradeCompetencyInPlanRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyGradeCompetencyInPlanRequest',
                'Required parameter "coreCompetencyGradeCompetencyInPlanRequest" was null or undefined when calling coreCompetencyGradeCompetencyInPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_grade_competency_in_plan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyGradeCompetencyInPlanRequestToJSON(requestParameters['coreCompetencyGradeCompetencyInPlanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyGradeCompetencyInCourse200ResponseFromJSON(jsonValue));
    }

    /**
     * Grade a competency from the user plan page.
     * Grade a competency from the user plan page.
     */
    async coreCompetencyGradeCompetencyInPlan(requestParameters: CoreCompetencyGradeCompetencyInPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyGradeCompetencyInCourse200Response> {
        const response = await this.coreCompetencyGradeCompetencyInPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load a list of a competencies.
     * Load a list of a competencies.
     */
    async coreCompetencyListCompetenciesRaw(requestParameters: CoreCompetencyListCompetenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyListCompetenciesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyListCompetenciesRequest',
                'Required parameter "coreCompetencyListCompetenciesRequest" was null or undefined when calling coreCompetencyListCompetencies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_list_competencies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyListCompetenciesRequestToJSON(requestParameters['coreCompetencyListCompetenciesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Load a list of a competencies.
     * Load a list of a competencies.
     */
    async coreCompetencyListCompetencies(requestParameters: CoreCompetencyListCompetenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyListCompetenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load a list of a competencies for a given template.
     * Load a list of a competencies for a given template.
     */
    async coreCompetencyListCompetenciesInTemplateRaw(requestParameters: CoreCompetencyListCompetenciesInTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCountCompetenciesInTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCountCompetenciesInTemplateRequest',
                'Required parameter "coreCompetencyCountCompetenciesInTemplateRequest" was null or undefined when calling coreCompetencyListCompetenciesInTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_list_competencies_in_template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCountCompetenciesInTemplateRequestToJSON(requestParameters['coreCompetencyCountCompetenciesInTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Load a list of a competencies for a given template.
     * Load a list of a competencies for a given template.
     */
    async coreCompetencyListCompetenciesInTemplate(requestParameters: CoreCompetencyListCompetenciesInTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyListCompetenciesInTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load a list of a competency frameworks.
     * Load a list of a competency frameworks.
     */
    async coreCompetencyListCompetencyFrameworksRaw(requestParameters: CoreCompetencyListCompetencyFrameworksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyListCompetencyFrameworksRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyListCompetencyFrameworksRequest',
                'Required parameter "coreCompetencyListCompetencyFrameworksRequest" was null or undefined when calling coreCompetencyListCompetencyFrameworks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_list_competency_frameworks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyListCompetencyFrameworksRequestToJSON(requestParameters['coreCompetencyListCompetencyFrameworksRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Load a list of a competency frameworks.
     * Load a list of a competency frameworks.
     */
    async coreCompetencyListCompetencyFrameworks(requestParameters: CoreCompetencyListCompetencyFrameworksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyListCompetencyFrameworksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the competencies in a course
     * List the competencies in a course
     */
    async coreCompetencyListCourseCompetenciesRaw(requestParameters: CoreCompetencyListCourseCompetenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCountCompetenciesInCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCountCompetenciesInCourseRequest',
                'Required parameter "coreCompetencyCountCompetenciesInCourseRequest" was null or undefined when calling coreCompetencyListCourseCompetencies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_list_course_competencies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCountCompetenciesInCourseRequestToJSON(requestParameters['coreCompetencyCountCompetenciesInCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List the competencies in a course
     * List the competencies in a course
     */
    async coreCompetencyListCourseCompetencies(requestParameters: CoreCompetencyListCourseCompetenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyListCourseCompetenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the competencies in a course module
     * List the competencies in a course module
     */
    async coreCompetencyListCourseModuleCompetenciesRaw(requestParameters: CoreCompetencyListCourseModuleCompetenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyListCourseModuleCompetenciesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyListCourseModuleCompetenciesRequest',
                'Required parameter "coreCompetencyListCourseModuleCompetenciesRequest" was null or undefined when calling coreCompetencyListCourseModuleCompetencies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_list_course_module_competencies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyListCourseModuleCompetenciesRequestToJSON(requestParameters['coreCompetencyListCourseModuleCompetenciesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List the competencies in a course module
     * List the competencies in a course module
     */
    async coreCompetencyListCourseModuleCompetencies(requestParameters: CoreCompetencyListCourseModuleCompetenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyListCourseModuleCompetenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the competencies in a plan
     * List the competencies in a plan
     */
    async coreCompetencyListPlanCompetenciesRaw(requestParameters: CoreCompetencyListPlanCompetenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyListPlanCompetenciesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyListPlanCompetenciesRequest',
                'Required parameter "coreCompetencyListPlanCompetenciesRequest" was null or undefined when calling coreCompetencyListPlanCompetencies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_list_plan_competencies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyListPlanCompetenciesRequestToJSON(requestParameters['coreCompetencyListPlanCompetenciesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List the competencies in a plan
     * List the competencies in a plan
     */
    async coreCompetencyListPlanCompetencies(requestParameters: CoreCompetencyListPlanCompetenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyListPlanCompetenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load a list of a learning plan templates.
     * Load a list of a learning plan templates.
     */
    async coreCompetencyListTemplatesRaw(requestParameters: CoreCompetencyListTemplatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyListTemplatesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyListTemplatesRequest',
                'Required parameter "coreCompetencyListTemplatesRequest" was null or undefined when calling coreCompetencyListTemplates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_list_templates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyListTemplatesRequestToJSON(requestParameters['coreCompetencyListTemplatesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Load a list of a learning plan templates.
     * Load a list of a learning plan templates.
     */
    async coreCompetencyListTemplates(requestParameters: CoreCompetencyListTemplatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyListTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load a list of a learning plan templates for a given competency.
     * Load a list of a learning plan templates for a given competency.
     */
    async coreCompetencyListTemplatesUsingCompetencyRaw(requestParameters: CoreCompetencyListTemplatesUsingCompetencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCompetencyViewedRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCompetencyViewedRequest',
                'Required parameter "coreCompetencyCompetencyViewedRequest" was null or undefined when calling coreCompetencyListTemplatesUsingCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_list_templates_using_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCompetencyViewedRequestToJSON(requestParameters['coreCompetencyCompetencyViewedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Load a list of a learning plan templates for a given competency.
     * Load a list of a learning plan templates for a given competency.
     */
    async coreCompetencyListTemplatesUsingCompetency(requestParameters: CoreCompetencyListTemplatesUsingCompetencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyListTemplatesUsingCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List a user\'s learning plans.
     * List a user\'s learning plans.
     */
    async coreCompetencyListUserPlansRaw(requestParameters: CoreCompetencyListUserPlansOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyListUserPlansRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyListUserPlansRequest',
                'Required parameter "coreCompetencyListUserPlansRequest" was null or undefined when calling coreCompetencyListUserPlans().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_list_user_plans`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyListUserPlansRequestToJSON(requestParameters['coreCompetencyListUserPlansRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List a user\'s learning plans.
     * List a user\'s learning plans.
     */
    async coreCompetencyListUserPlans(requestParameters: CoreCompetencyListUserPlansOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyListUserPlansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Re-order a competency.
     * Re-order a competency.
     */
    async coreCompetencyMoveDownCompetencyRaw(requestParameters: CoreCompetencyMoveDownCompetencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCompetencyViewedRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCompetencyViewedRequest',
                'Required parameter "coreCompetencyCompetencyViewedRequest" was null or undefined when calling coreCompetencyMoveDownCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_move_down_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCompetencyViewedRequestToJSON(requestParameters['coreCompetencyCompetencyViewedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Re-order a competency.
     * Re-order a competency.
     */
    async coreCompetencyMoveDownCompetency(requestParameters: CoreCompetencyMoveDownCompetencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyMoveDownCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Re-order a competency.
     * Re-order a competency.
     */
    async coreCompetencyMoveUpCompetencyRaw(requestParameters: CoreCompetencyMoveUpCompetencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCompetencyViewedRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCompetencyViewedRequest',
                'Required parameter "coreCompetencyCompetencyViewedRequest" was null or undefined when calling coreCompetencyMoveUpCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_move_up_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCompetencyViewedRequestToJSON(requestParameters['coreCompetencyCompetencyViewedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Re-order a competency.
     * Re-order a competency.
     */
    async coreCompetencyMoveUpCompetency(requestParameters: CoreCompetencyMoveUpCompetencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyMoveUpCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel the review of a plan.
     * Cancel the review of a plan.
     */
    async coreCompetencyPlanCancelReviewRequestRaw(requestParameters: CoreCompetencyPlanCancelReviewRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyPlanCancelReviewRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyPlanCancelReviewRequestRequest',
                'Required parameter "coreCompetencyPlanCancelReviewRequestRequest" was null or undefined when calling coreCompetencyPlanCancelReviewRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_plan_cancel_review_request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyPlanCancelReviewRequestRequestToJSON(requestParameters['coreCompetencyPlanCancelReviewRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Cancel the review of a plan.
     * Cancel the review of a plan.
     */
    async coreCompetencyPlanCancelReviewRequest(requestParameters: CoreCompetencyPlanCancelReviewRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyPlanCancelReviewRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request for a plan to be reviewed.
     * Request for a plan to be reviewed.
     */
    async coreCompetencyPlanRequestReviewRaw(requestParameters: CoreCompetencyPlanRequestReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyPlanCancelReviewRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyPlanCancelReviewRequestRequest',
                'Required parameter "coreCompetencyPlanCancelReviewRequestRequest" was null or undefined when calling coreCompetencyPlanRequestReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_plan_request_review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyPlanCancelReviewRequestRequestToJSON(requestParameters['coreCompetencyPlanCancelReviewRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Request for a plan to be reviewed.
     * Request for a plan to be reviewed.
     */
    async coreCompetencyPlanRequestReview(requestParameters: CoreCompetencyPlanRequestReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyPlanRequestReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start the review of a plan.
     * Start the review of a plan.
     */
    async coreCompetencyPlanStartReviewRaw(requestParameters: CoreCompetencyPlanStartReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyPlanCancelReviewRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyPlanCancelReviewRequestRequest',
                'Required parameter "coreCompetencyPlanCancelReviewRequestRequest" was null or undefined when calling coreCompetencyPlanStartReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_plan_start_review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyPlanCancelReviewRequestRequestToJSON(requestParameters['coreCompetencyPlanCancelReviewRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Start the review of a plan.
     * Start the review of a plan.
     */
    async coreCompetencyPlanStartReview(requestParameters: CoreCompetencyPlanStartReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyPlanStartReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stop the review of a plan.
     * Stop the review of a plan.
     */
    async coreCompetencyPlanStopReviewRaw(requestParameters: CoreCompetencyPlanStopReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyPlanCancelReviewRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyPlanCancelReviewRequestRequest',
                'Required parameter "coreCompetencyPlanCancelReviewRequestRequest" was null or undefined when calling coreCompetencyPlanStopReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_plan_stop_review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyPlanCancelReviewRequestRequestToJSON(requestParameters['coreCompetencyPlanCancelReviewRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Stop the review of a plan.
     * Stop the review of a plan.
     */
    async coreCompetencyPlanStopReview(requestParameters: CoreCompetencyPlanStopReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyPlanStopReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load a summary of a competency.
     * Load a summary of a competency.
     */
    async coreCompetencyReadCompetencyRaw(requestParameters: CoreCompetencyReadCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyCreateCompetency200Response>> {
        if (requestParameters['coreCompetencyReadCompetencyRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyReadCompetencyRequest',
                'Required parameter "coreCompetencyReadCompetencyRequest" was null or undefined when calling coreCompetencyReadCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_read_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyReadCompetencyRequestToJSON(requestParameters['coreCompetencyReadCompetencyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyCreateCompetency200ResponseFromJSON(jsonValue));
    }

    /**
     * Load a summary of a competency.
     * Load a summary of a competency.
     */
    async coreCompetencyReadCompetency(requestParameters: CoreCompetencyReadCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyCreateCompetency200Response> {
        const response = await this.coreCompetencyReadCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load a summary of a competency framework.
     * Load a summary of a competency framework.
     */
    async coreCompetencyReadCompetencyFrameworkRaw(requestParameters: CoreCompetencyReadCompetencyFrameworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyDuplicateCompetencyFramework200Response>> {
        if (requestParameters['coreCompetencyDuplicateCompetencyFrameworkRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyDuplicateCompetencyFrameworkRequest',
                'Required parameter "coreCompetencyDuplicateCompetencyFrameworkRequest" was null or undefined when calling coreCompetencyReadCompetencyFramework().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_read_competency_framework`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyDuplicateCompetencyFrameworkRequestToJSON(requestParameters['coreCompetencyDuplicateCompetencyFrameworkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyDuplicateCompetencyFramework200ResponseFromJSON(jsonValue));
    }

    /**
     * Load a summary of a competency framework.
     * Load a summary of a competency framework.
     */
    async coreCompetencyReadCompetencyFramework(requestParameters: CoreCompetencyReadCompetencyFrameworkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyDuplicateCompetencyFramework200Response> {
        const response = await this.coreCompetencyReadCompetencyFrameworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load a learning plan.
     * Load a learning plan.
     */
    async coreCompetencyReadPlanRaw(requestParameters: CoreCompetencyReadPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyReadPlan200Response>> {
        if (requestParameters['coreCompetencyReadPlanRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyReadPlanRequest',
                'Required parameter "coreCompetencyReadPlanRequest" was null or undefined when calling coreCompetencyReadPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_read_plan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyReadPlanRequestToJSON(requestParameters['coreCompetencyReadPlanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyReadPlan200ResponseFromJSON(jsonValue));
    }

    /**
     * Load a learning plan.
     * Load a learning plan.
     */
    async coreCompetencyReadPlan(requestParameters: CoreCompetencyReadPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyReadPlan200Response> {
        const response = await this.coreCompetencyReadPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load a summary of a learning plan template.
     * Load a summary of a learning plan template.
     */
    async coreCompetencyReadTemplateRaw(requestParameters: CoreCompetencyReadTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyCreateTemplate200Response>> {
        if (requestParameters['coreCompetencyReadTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyReadTemplateRequest',
                'Required parameter "coreCompetencyReadTemplateRequest" was null or undefined when calling coreCompetencyReadTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_read_template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyReadTemplateRequestToJSON(requestParameters['coreCompetencyReadTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyCreateTemplate200ResponseFromJSON(jsonValue));
    }

    /**
     * Load a summary of a learning plan template.
     * Load a summary of a learning plan template.
     */
    async coreCompetencyReadTemplate(requestParameters: CoreCompetencyReadTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyCreateTemplate200Response> {
        const response = await this.coreCompetencyReadTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read an evidence of prior learning.
     * Read an evidence of prior learning.
     */
    async coreCompetencyReadUserEvidenceRaw(requestParameters: CoreCompetencyReadUserEvidenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyReadUserEvidence200Response>> {
        if (requestParameters['coreCompetencyDeleteUserEvidenceRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyDeleteUserEvidenceRequest',
                'Required parameter "coreCompetencyDeleteUserEvidenceRequest" was null or undefined when calling coreCompetencyReadUserEvidence().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_read_user_evidence`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyDeleteUserEvidenceRequestToJSON(requestParameters['coreCompetencyDeleteUserEvidenceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyReadUserEvidence200ResponseFromJSON(jsonValue));
    }

    /**
     * Read an evidence of prior learning.
     * Read an evidence of prior learning.
     */
    async coreCompetencyReadUserEvidence(requestParameters: CoreCompetencyReadUserEvidenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyReadUserEvidence200Response> {
        const response = await this.coreCompetencyReadUserEvidenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a competency from a course
     * Remove a competency from a course
     */
    async coreCompetencyRemoveCompetencyFromCourseRaw(requestParameters: CoreCompetencyRemoveCompetencyFromCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyRemoveCompetencyFromCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyRemoveCompetencyFromCourseRequest',
                'Required parameter "coreCompetencyRemoveCompetencyFromCourseRequest" was null or undefined when calling coreCompetencyRemoveCompetencyFromCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_remove_competency_from_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyRemoveCompetencyFromCourseRequestToJSON(requestParameters['coreCompetencyRemoveCompetencyFromCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove a competency from a course
     * Remove a competency from a course
     */
    async coreCompetencyRemoveCompetencyFromCourse(requestParameters: CoreCompetencyRemoveCompetencyFromCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyRemoveCompetencyFromCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove the competency from a learning plan
     * Remove the competency from a learning plan
     */
    async coreCompetencyRemoveCompetencyFromPlanRaw(requestParameters: CoreCompetencyRemoveCompetencyFromPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyRemoveCompetencyFromPlanRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyRemoveCompetencyFromPlanRequest',
                'Required parameter "coreCompetencyRemoveCompetencyFromPlanRequest" was null or undefined when calling coreCompetencyRemoveCompetencyFromPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_remove_competency_from_plan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyRemoveCompetencyFromPlanRequestToJSON(requestParameters['coreCompetencyRemoveCompetencyFromPlanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove the competency from a learning plan
     * Remove the competency from a learning plan
     */
    async coreCompetencyRemoveCompetencyFromPlan(requestParameters: CoreCompetencyRemoveCompetencyFromPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyRemoveCompetencyFromPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a competency from a template
     * Remove a competency from a template
     */
    async coreCompetencyRemoveCompetencyFromTemplateRaw(requestParameters: CoreCompetencyRemoveCompetencyFromTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyRemoveCompetencyFromTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyRemoveCompetencyFromTemplateRequest',
                'Required parameter "coreCompetencyRemoveCompetencyFromTemplateRequest" was null or undefined when calling coreCompetencyRemoveCompetencyFromTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_remove_competency_from_template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyRemoveCompetencyFromTemplateRequestToJSON(requestParameters['coreCompetencyRemoveCompetencyFromTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove a competency from a template
     * Remove a competency from a template
     */
    async coreCompetencyRemoveCompetencyFromTemplate(requestParameters: CoreCompetencyRemoveCompetencyFromTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyRemoveCompetencyFromTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a related competency
     * Remove a related competency
     */
    async coreCompetencyRemoveRelatedCompetencyRaw(requestParameters: CoreCompetencyRemoveRelatedCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyRemoveRelatedCompetencyRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyRemoveRelatedCompetencyRequest',
                'Required parameter "coreCompetencyRemoveRelatedCompetencyRequest" was null or undefined when calling coreCompetencyRemoveRelatedCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_remove_related_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyRemoveRelatedCompetencyRequestToJSON(requestParameters['coreCompetencyRemoveRelatedCompetencyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove a related competency
     * Remove a related competency
     */
    async coreCompetencyRemoveRelatedCompetency(requestParameters: CoreCompetencyRemoveRelatedCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyRemoveRelatedCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reopen learning plan.
     * Reopen learning plan.
     */
    async coreCompetencyReopenPlanRaw(requestParameters: CoreCompetencyReopenPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCompletePlanRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCompletePlanRequest',
                'Required parameter "coreCompetencyCompletePlanRequest" was null or undefined when calling coreCompetencyReopenPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_reopen_plan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCompletePlanRequestToJSON(requestParameters['coreCompetencyCompletePlanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Reopen learning plan.
     * Reopen learning plan.
     */
    async coreCompetencyReopenPlan(requestParameters: CoreCompetencyReopenPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyReopenPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Move a course competency to a new relative sort order.
     * Move a course competency to a new relative sort order.
     */
    async coreCompetencyReorderCourseCompetencyRaw(requestParameters: CoreCompetencyReorderCourseCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyReorderCourseCompetencyRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyReorderCourseCompetencyRequest',
                'Required parameter "coreCompetencyReorderCourseCompetencyRequest" was null or undefined when calling coreCompetencyReorderCourseCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_reorder_course_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyReorderCourseCompetencyRequestToJSON(requestParameters['coreCompetencyReorderCourseCompetencyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Move a course competency to a new relative sort order.
     * Move a course competency to a new relative sort order.
     */
    async coreCompetencyReorderCourseCompetency(requestParameters: CoreCompetencyReorderCourseCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyReorderCourseCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Move a plan competency to a new relative sort order.
     * Move a plan competency to a new relative sort order.
     */
    async coreCompetencyReorderPlanCompetencyRaw(requestParameters: CoreCompetencyReorderPlanCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyReorderPlanCompetencyRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyReorderPlanCompetencyRequest',
                'Required parameter "coreCompetencyReorderPlanCompetencyRequest" was null or undefined when calling coreCompetencyReorderPlanCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_reorder_plan_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyReorderPlanCompetencyRequestToJSON(requestParameters['coreCompetencyReorderPlanCompetencyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Move a plan competency to a new relative sort order.
     * Move a plan competency to a new relative sort order.
     */
    async coreCompetencyReorderPlanCompetency(requestParameters: CoreCompetencyReorderPlanCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyReorderPlanCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Move a template competency to a new relative sort order.
     * Move a template competency to a new relative sort order.
     */
    async coreCompetencyReorderTemplateCompetencyRaw(requestParameters: CoreCompetencyReorderTemplateCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyReorderTemplateCompetencyRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyReorderTemplateCompetencyRequest',
                'Required parameter "coreCompetencyReorderTemplateCompetencyRequest" was null or undefined when calling coreCompetencyReorderTemplateCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_reorder_template_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyReorderTemplateCompetencyRequestToJSON(requestParameters['coreCompetencyReorderTemplateCompetencyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Move a template competency to a new relative sort order.
     * Move a template competency to a new relative sort order.
     */
    async coreCompetencyReorderTemplateCompetency(requestParameters: CoreCompetencyReorderTemplateCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyReorderTemplateCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send user evidence competencies in review
     * Send user evidence competencies in review
     */
    async coreCompetencyRequestReviewOfUserEvidenceLinkedCompetenciesRaw(requestParameters: CoreCompetencyRequestReviewOfUserEvidenceLinkedCompetenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyDeleteUserEvidenceRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyDeleteUserEvidenceRequest',
                'Required parameter "coreCompetencyDeleteUserEvidenceRequest" was null or undefined when calling coreCompetencyRequestReviewOfUserEvidenceLinkedCompetencies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_request_review_of_user_evidence_linked_competencies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyDeleteUserEvidenceRequestToJSON(requestParameters['coreCompetencyDeleteUserEvidenceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send user evidence competencies in review
     * Send user evidence competencies in review
     */
    async coreCompetencyRequestReviewOfUserEvidenceLinkedCompetencies(requestParameters: CoreCompetencyRequestReviewOfUserEvidenceLinkedCompetenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyRequestReviewOfUserEvidenceLinkedCompetenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search a list of a competencies.
     * Search a list of a competencies.
     */
    async coreCompetencySearchCompetenciesRaw(requestParameters: CoreCompetencySearchCompetenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencySearchCompetenciesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencySearchCompetenciesRequest',
                'Required parameter "coreCompetencySearchCompetenciesRequest" was null or undefined when calling coreCompetencySearchCompetencies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_search_competencies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencySearchCompetenciesRequestToJSON(requestParameters['coreCompetencySearchCompetenciesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Search a list of a competencies.
     * Search a list of a competencies.
     */
    async coreCompetencySearchCompetencies(requestParameters: CoreCompetencySearchCompetenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencySearchCompetenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the ruleoutcome value for course competency
     * Modify the ruleoutcome value for course competency
     */
    async coreCompetencySetCourseCompetencyRuleoutcomeRaw(requestParameters: CoreCompetencySetCourseCompetencyRuleoutcomeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencySetCourseCompetencyRuleoutcomeRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencySetCourseCompetencyRuleoutcomeRequest',
                'Required parameter "coreCompetencySetCourseCompetencyRuleoutcomeRequest" was null or undefined when calling coreCompetencySetCourseCompetencyRuleoutcome().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_set_course_competency_ruleoutcome`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencySetCourseCompetencyRuleoutcomeRequestToJSON(requestParameters['coreCompetencySetCourseCompetencyRuleoutcomeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Modify the ruleoutcome value for course competency
     * Modify the ruleoutcome value for course competency
     */
    async coreCompetencySetCourseCompetencyRuleoutcome(requestParameters: CoreCompetencySetCourseCompetencyRuleoutcomeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencySetCourseCompetencyRuleoutcomeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set a new parent for a competency.
     * Set a new parent for a competency.
     */
    async coreCompetencySetParentCompetencyRaw(requestParameters: CoreCompetencySetParentCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencySetParentCompetencyRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencySetParentCompetencyRequest',
                'Required parameter "coreCompetencySetParentCompetencyRequest" was null or undefined when calling coreCompetencySetParentCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_set_parent_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencySetParentCompetencyRequestToJSON(requestParameters['coreCompetencySetParentCompetencyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set a new parent for a competency.
     * Set a new parent for a competency.
     */
    async coreCompetencySetParentCompetency(requestParameters: CoreCompetencySetParentCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencySetParentCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if a template has related data
     * Check if a template has related data
     */
    async coreCompetencyTemplateHasRelatedDataRaw(requestParameters: CoreCompetencyTemplateHasRelatedDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCountCompetenciesInTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCountCompetenciesInTemplateRequest',
                'Required parameter "coreCompetencyCountCompetenciesInTemplateRequest" was null or undefined when calling coreCompetencyTemplateHasRelatedData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_template_has_related_data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCountCompetenciesInTemplateRequestToJSON(requestParameters['coreCompetencyCountCompetenciesInTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Check if a template has related data
     * Check if a template has related data
     */
    async coreCompetencyTemplateHasRelatedData(requestParameters: CoreCompetencyTemplateHasRelatedDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyTemplateHasRelatedDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log event template viewed
     * Log event template viewed
     */
    async coreCompetencyTemplateViewedRaw(requestParameters: CoreCompetencyTemplateViewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyReadTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyReadTemplateRequest',
                'Required parameter "coreCompetencyReadTemplateRequest" was null or undefined when calling coreCompetencyTemplateViewed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_template_viewed`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyReadTemplateRequestToJSON(requestParameters['coreCompetencyReadTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Log event template viewed
     * Log event template viewed
     */
    async coreCompetencyTemplateViewed(requestParameters: CoreCompetencyTemplateViewedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyTemplateViewedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unapprove a plan.
     * Unapprove a plan.
     */
    async coreCompetencyUnapprovePlanRaw(requestParameters: CoreCompetencyUnapprovePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyPlanCancelReviewRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyPlanCancelReviewRequestRequest',
                'Required parameter "coreCompetencyPlanCancelReviewRequestRequest" was null or undefined when calling coreCompetencyUnapprovePlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_unapprove_plan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyPlanCancelReviewRequestRequestToJSON(requestParameters['coreCompetencyPlanCancelReviewRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Unapprove a plan.
     * Unapprove a plan.
     */
    async coreCompetencyUnapprovePlan(requestParameters: CoreCompetencyUnapprovePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyUnapprovePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unlink a plan form it template.
     * Unlink a plan form it template.
     */
    async coreCompetencyUnlinkPlanFromTemplateRaw(requestParameters: CoreCompetencyUnlinkPlanFromTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyUnlinkPlanFromTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyUnlinkPlanFromTemplateRequest',
                'Required parameter "coreCompetencyUnlinkPlanFromTemplateRequest" was null or undefined when calling coreCompetencyUnlinkPlanFromTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_unlink_plan_from_template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyUnlinkPlanFromTemplateRequestToJSON(requestParameters['coreCompetencyUnlinkPlanFromTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Unlink a plan form it template.
     * Unlink a plan form it template.
     */
    async coreCompetencyUnlinkPlanFromTemplate(requestParameters: CoreCompetencyUnlinkPlanFromTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyUnlinkPlanFromTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a competency.
     * Update a competency.
     */
    async coreCompetencyUpdateCompetencyRaw(requestParameters: CoreCompetencyUpdateCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyUpdateCompetencyRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyUpdateCompetencyRequest',
                'Required parameter "coreCompetencyUpdateCompetencyRequest" was null or undefined when calling coreCompetencyUpdateCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_update_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyUpdateCompetencyRequestToJSON(requestParameters['coreCompetencyUpdateCompetencyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update a competency.
     * Update a competency.
     */
    async coreCompetencyUpdateCompetency(requestParameters: CoreCompetencyUpdateCompetencyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyUpdateCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a competency framework.
     * Update a competency framework.
     */
    async coreCompetencyUpdateCompetencyFrameworkRaw(requestParameters: CoreCompetencyUpdateCompetencyFrameworkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyUpdateCompetencyFrameworkRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyUpdateCompetencyFrameworkRequest',
                'Required parameter "coreCompetencyUpdateCompetencyFrameworkRequest" was null or undefined when calling coreCompetencyUpdateCompetencyFramework().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_update_competency_framework`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyUpdateCompetencyFrameworkRequestToJSON(requestParameters['coreCompetencyUpdateCompetencyFrameworkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update a competency framework.
     * Update a competency framework.
     */
    async coreCompetencyUpdateCompetencyFramework(requestParameters: CoreCompetencyUpdateCompetencyFrameworkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyUpdateCompetencyFrameworkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the course competency settings
     * Update the course competency settings
     */
    async coreCompetencyUpdateCourseCompetencySettingsRaw(requestParameters: CoreCompetencyUpdateCourseCompetencySettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyUpdateCourseCompetencySettingsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyUpdateCourseCompetencySettingsRequest',
                'Required parameter "coreCompetencyUpdateCourseCompetencySettingsRequest" was null or undefined when calling coreCompetencyUpdateCourseCompetencySettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_update_course_competency_settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyUpdateCourseCompetencySettingsRequestToJSON(requestParameters['coreCompetencyUpdateCourseCompetencySettingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update the course competency settings
     * Update the course competency settings
     */
    async coreCompetencyUpdateCourseCompetencySettings(requestParameters: CoreCompetencyUpdateCourseCompetencySettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyUpdateCourseCompetencySettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a learning plan.
     * Updates a learning plan.
     */
    async coreCompetencyUpdatePlanRaw(requestParameters: CoreCompetencyUpdatePlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompetencyReadPlan200Response>> {
        if (requestParameters['coreCompetencyUpdatePlanRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyUpdatePlanRequest',
                'Required parameter "coreCompetencyUpdatePlanRequest" was null or undefined when calling coreCompetencyUpdatePlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_update_plan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyUpdatePlanRequestToJSON(requestParameters['coreCompetencyUpdatePlanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompetencyReadPlan200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a learning plan.
     * Updates a learning plan.
     */
    async coreCompetencyUpdatePlan(requestParameters: CoreCompetencyUpdatePlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompetencyReadPlan200Response> {
        const response = await this.coreCompetencyUpdatePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a learning plan template.
     * Update a learning plan template.
     */
    async coreCompetencyUpdateTemplateRaw(requestParameters: CoreCompetencyUpdateTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyUpdateTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyUpdateTemplateRequest',
                'Required parameter "coreCompetencyUpdateTemplateRequest" was null or undefined when calling coreCompetencyUpdateTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_update_template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyUpdateTemplateRequestToJSON(requestParameters['coreCompetencyUpdateTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update a learning plan template.
     * Update a learning plan template.
     */
    async coreCompetencyUpdateTemplate(requestParameters: CoreCompetencyUpdateTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyUpdateTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel a review request.
     * Cancel a review request.
     */
    async coreCompetencyUserCompetencyCancelReviewRequestRaw(requestParameters: CoreCompetencyUserCompetencyCancelReviewRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyUserCompetencyCancelReviewRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyUserCompetencyCancelReviewRequestRequest',
                'Required parameter "coreCompetencyUserCompetencyCancelReviewRequestRequest" was null or undefined when calling coreCompetencyUserCompetencyCancelReviewRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_user_competency_cancel_review_request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyUserCompetencyCancelReviewRequestRequestToJSON(requestParameters['coreCompetencyUserCompetencyCancelReviewRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Cancel a review request.
     * Cancel a review request.
     */
    async coreCompetencyUserCompetencyCancelReviewRequest(requestParameters: CoreCompetencyUserCompetencyCancelReviewRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyUserCompetencyCancelReviewRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log the user competency plan viewed event.
     * Log the user competency plan viewed event.
     */
    async coreCompetencyUserCompetencyPlanViewedRaw(requestParameters: CoreCompetencyUserCompetencyPlanViewedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyUserCompetencyPlanViewedRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyUserCompetencyPlanViewedRequest',
                'Required parameter "coreCompetencyUserCompetencyPlanViewedRequest" was null or undefined when calling coreCompetencyUserCompetencyPlanViewed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_user_competency_plan_viewed`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyUserCompetencyPlanViewedRequestToJSON(requestParameters['coreCompetencyUserCompetencyPlanViewedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Log the user competency plan viewed event.
     * Log the user competency plan viewed event.
     */
    async coreCompetencyUserCompetencyPlanViewed(requestParameters: CoreCompetencyUserCompetencyPlanViewedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyUserCompetencyPlanViewedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request a review.
     * Request a review.
     */
    async coreCompetencyUserCompetencyRequestReviewRaw(requestParameters: CoreCompetencyUserCompetencyRequestReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyUserCompetencyRequestReviewRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyUserCompetencyRequestReviewRequest',
                'Required parameter "coreCompetencyUserCompetencyRequestReviewRequest" was null or undefined when calling coreCompetencyUserCompetencyRequestReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_user_competency_request_review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyUserCompetencyRequestReviewRequestToJSON(requestParameters['coreCompetencyUserCompetencyRequestReviewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Request a review.
     * Request a review.
     */
    async coreCompetencyUserCompetencyRequestReview(requestParameters: CoreCompetencyUserCompetencyRequestReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyUserCompetencyRequestReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start a review.
     * Start a review.
     */
    async coreCompetencyUserCompetencyStartReviewRaw(requestParameters: CoreCompetencyUserCompetencyStartReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyUserCompetencyRequestReviewRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyUserCompetencyRequestReviewRequest',
                'Required parameter "coreCompetencyUserCompetencyRequestReviewRequest" was null or undefined when calling coreCompetencyUserCompetencyStartReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_user_competency_start_review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyUserCompetencyRequestReviewRequestToJSON(requestParameters['coreCompetencyUserCompetencyRequestReviewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Start a review.
     * Start a review.
     */
    async coreCompetencyUserCompetencyStartReview(requestParameters: CoreCompetencyUserCompetencyStartReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyUserCompetencyStartReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stop a review.
     * Stop a review.
     */
    async coreCompetencyUserCompetencyStopReviewRaw(requestParameters: CoreCompetencyUserCompetencyStopReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyUserCompetencyRequestReviewRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyUserCompetencyRequestReviewRequest',
                'Required parameter "coreCompetencyUserCompetencyRequestReviewRequest" was null or undefined when calling coreCompetencyUserCompetencyStopReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_user_competency_stop_review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyUserCompetencyRequestReviewRequestToJSON(requestParameters['coreCompetencyUserCompetencyRequestReviewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Stop a review.
     * Stop a review.
     */
    async coreCompetencyUserCompetencyStopReview(requestParameters: CoreCompetencyUserCompetencyStopReviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyUserCompetencyStopReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log the user competency viewed event.
     * Log the user competency viewed event.
     */
    async coreCompetencyUserCompetencyViewedRaw(requestParameters: CoreCompetencyUserCompetencyViewedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyUserCompetencyViewedRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyUserCompetencyViewedRequest',
                'Required parameter "coreCompetencyUserCompetencyViewedRequest" was null or undefined when calling coreCompetencyUserCompetencyViewed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_user_competency_viewed`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyUserCompetencyViewedRequestToJSON(requestParameters['coreCompetencyUserCompetencyViewedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Log the user competency viewed event.
     * Log the user competency viewed event.
     */
    async coreCompetencyUserCompetencyViewed(requestParameters: CoreCompetencyUserCompetencyViewedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyUserCompetencyViewedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log the user competency viewed in course event
     * Log the user competency viewed in course event
     */
    async coreCompetencyUserCompetencyViewedInCourseRaw(requestParameters: CoreCompetencyUserCompetencyViewedInCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyUserCompetencyViewedInCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyUserCompetencyViewedInCourseRequest',
                'Required parameter "coreCompetencyUserCompetencyViewedInCourseRequest" was null or undefined when calling coreCompetencyUserCompetencyViewedInCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_user_competency_viewed_in_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyUserCompetencyViewedInCourseRequestToJSON(requestParameters['coreCompetencyUserCompetencyViewedInCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Log the user competency viewed in course event
     * Log the user competency viewed in course event
     */
    async coreCompetencyUserCompetencyViewedInCourse(requestParameters: CoreCompetencyUserCompetencyViewedInCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyUserCompetencyViewedInCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log the user competency viewed in plan event.
     * Log the user competency viewed in plan event.
     */
    async coreCompetencyUserCompetencyViewedInPlanRaw(requestParameters: CoreCompetencyUserCompetencyViewedInPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyUserCompetencyPlanViewedRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyUserCompetencyPlanViewedRequest',
                'Required parameter "coreCompetencyUserCompetencyPlanViewedRequest" was null or undefined when calling coreCompetencyUserCompetencyViewedInPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_competency_user_competency_viewed_in_plan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyUserCompetencyPlanViewedRequestToJSON(requestParameters['coreCompetencyUserCompetencyPlanViewedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Log the user competency viewed in plan event.
     * Log the user competency viewed in plan event.
     */
    async coreCompetencyUserCompetencyViewedInPlan(requestParameters: CoreCompetencyUserCompetencyViewedInPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCompetencyUserCompetencyViewedInPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the activities completion status for a user in a course.
     * Return the activities completion status for a user in a course.
     */
    async coreCompletionGetActivitiesCompletionStatusRaw(requestParameters: CoreCompletionGetActivitiesCompletionStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompletionGetActivitiesCompletionStatus200Response>> {
        if (requestParameters['coreCompletionGetActivitiesCompletionStatusRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompletionGetActivitiesCompletionStatusRequest',
                'Required parameter "coreCompletionGetActivitiesCompletionStatusRequest" was null or undefined when calling coreCompletionGetActivitiesCompletionStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_completion_get_activities_completion_status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompletionGetActivitiesCompletionStatusRequestToJSON(requestParameters['coreCompletionGetActivitiesCompletionStatusRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompletionGetActivitiesCompletionStatus200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the activities completion status for a user in a course.
     * Return the activities completion status for a user in a course.
     */
    async coreCompletionGetActivitiesCompletionStatus(requestParameters: CoreCompletionGetActivitiesCompletionStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompletionGetActivitiesCompletionStatus200Response> {
        const response = await this.coreCompletionGetActivitiesCompletionStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns course completion status.
     * Returns course completion status.
     */
    async coreCompletionGetCourseCompletionStatusRaw(requestParameters: CoreCompletionGetCourseCompletionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompletionGetCourseCompletionStatus200Response>> {
        if (requestParameters['coreCompletionGetActivitiesCompletionStatusRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompletionGetActivitiesCompletionStatusRequest',
                'Required parameter "coreCompletionGetActivitiesCompletionStatusRequest" was null or undefined when calling coreCompletionGetCourseCompletionStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_completion_get_course_completion_status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompletionGetActivitiesCompletionStatusRequestToJSON(requestParameters['coreCompletionGetActivitiesCompletionStatusRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompletionGetCourseCompletionStatus200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns course completion status.
     * Returns course completion status.
     */
    async coreCompletionGetCourseCompletionStatus(requestParameters: CoreCompletionGetCourseCompletionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompletionGetCourseCompletionStatus200Response> {
        const response = await this.coreCompletionGetCourseCompletionStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the course completion status for the current user (if course self-completion is enabled).
     * Update the course completion status for the current user (if course self-completion is enabled).
     */
    async coreCompletionMarkCourseSelfCompletedRaw(requestParameters: CoreCompletionMarkCourseSelfCompletedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompletionMarkCourseSelfCompleted200Response>> {
        if (requestParameters['coreCompletionMarkCourseSelfCompletedRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompletionMarkCourseSelfCompletedRequest',
                'Required parameter "coreCompletionMarkCourseSelfCompletedRequest" was null or undefined when calling coreCompletionMarkCourseSelfCompleted().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_completion_mark_course_self_completed`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompletionMarkCourseSelfCompletedRequestToJSON(requestParameters['coreCompletionMarkCourseSelfCompletedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompletionMarkCourseSelfCompleted200ResponseFromJSON(jsonValue));
    }

    /**
     * Update the course completion status for the current user (if course self-completion is enabled).
     * Update the course completion status for the current user (if course self-completion is enabled).
     */
    async coreCompletionMarkCourseSelfCompleted(requestParameters: CoreCompletionMarkCourseSelfCompletedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompletionMarkCourseSelfCompleted200Response> {
        const response = await this.coreCompletionMarkCourseSelfCompletedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update completion status for a user in an activity by overriding it.
     * Update completion status for a user in an activity by overriding it.
     */
    async coreCompletionOverrideActivityCompletionStatusRaw(requestParameters: CoreCompletionOverrideActivityCompletionStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompletionOverrideActivityCompletionStatus200Response>> {
        if (requestParameters['coreCompletionOverrideActivityCompletionStatusRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompletionOverrideActivityCompletionStatusRequest',
                'Required parameter "coreCompletionOverrideActivityCompletionStatusRequest" was null or undefined when calling coreCompletionOverrideActivityCompletionStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_completion_override_activity_completion_status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompletionOverrideActivityCompletionStatusRequestToJSON(requestParameters['coreCompletionOverrideActivityCompletionStatusRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompletionOverrideActivityCompletionStatus200ResponseFromJSON(jsonValue));
    }

    /**
     * Update completion status for a user in an activity by overriding it.
     * Update completion status for a user in an activity by overriding it.
     */
    async coreCompletionOverrideActivityCompletionStatus(requestParameters: CoreCompletionOverrideActivityCompletionStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompletionOverrideActivityCompletionStatus200Response> {
        const response = await this.coreCompletionOverrideActivityCompletionStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update completion status for the current user in an activity, only for activities with manual tracking.
     * Update completion status for the current user in an activity, only for activities with manual tracking.
     */
    async coreCompletionUpdateActivityCompletionStatusManuallyRaw(requestParameters: CoreCompletionUpdateActivityCompletionStatusManuallyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCompletionUpdateActivityCompletionStatusManually200Response>> {
        if (requestParameters['coreCompletionUpdateActivityCompletionStatusManuallyRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompletionUpdateActivityCompletionStatusManuallyRequest',
                'Required parameter "coreCompletionUpdateActivityCompletionStatusManuallyRequest" was null or undefined when calling coreCompletionUpdateActivityCompletionStatusManually().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_completion_update_activity_completion_status_manually`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompletionUpdateActivityCompletionStatusManuallyRequestToJSON(requestParameters['coreCompletionUpdateActivityCompletionStatusManuallyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCompletionUpdateActivityCompletionStatusManually200ResponseFromJSON(jsonValue));
    }

    /**
     * Update completion status for the current user in an activity, only for activities with manual tracking.
     * Update completion status for the current user in an activity, only for activities with manual tracking.
     */
    async coreCompletionUpdateActivityCompletionStatusManually(requestParameters: CoreCompletionUpdateActivityCompletionStatusManuallyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCompletionUpdateActivityCompletionStatusManually200Response> {
        const response = await this.coreCompletionUpdateActivityCompletionStatusManuallyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy a content in the content bank.
     * Copy a content in the content bank.
     */
    async coreContentbankCopyContentRaw(requestParameters: CoreContentbankCopyContentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankCopyContent200Response>> {
        if (requestParameters['coreContentbankCopyContentRequest'] == null) {
            throw new runtime.RequiredError(
                'coreContentbankCopyContentRequest',
                'Required parameter "coreContentbankCopyContentRequest" was null or undefined when calling coreContentbankCopyContent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_contentbank_copy_content`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreContentbankCopyContentRequestToJSON(requestParameters['coreContentbankCopyContentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankCopyContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Copy a content in the content bank.
     * Copy a content in the content bank.
     */
    async coreContentbankCopyContent(requestParameters: CoreContentbankCopyContentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankCopyContent200Response> {
        const response = await this.coreContentbankCopyContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a content from the content bank.
     * Delete a content from the content bank.
     */
    async coreContentbankDeleteContentRaw(requestParameters: CoreContentbankDeleteContentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankDeleteContent200Response>> {
        if (requestParameters['coreContentbankDeleteContentRequest'] == null) {
            throw new runtime.RequiredError(
                'coreContentbankDeleteContentRequest',
                'Required parameter "coreContentbankDeleteContentRequest" was null or undefined when calling coreContentbankDeleteContent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_contentbank_delete_content`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreContentbankDeleteContentRequestToJSON(requestParameters['coreContentbankDeleteContentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankDeleteContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a content from the content bank.
     * Delete a content from the content bank.
     */
    async coreContentbankDeleteContent(requestParameters: CoreContentbankDeleteContentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankDeleteContent200Response> {
        const response = await this.coreContentbankDeleteContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rename a content in the content bank.
     * Rename a content in the content bank.
     */
    async coreContentbankRenameContentRaw(requestParameters: CoreContentbankRenameContentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankRenameContent200Response>> {
        if (requestParameters['coreContentbankRenameContentRequest'] == null) {
            throw new runtime.RequiredError(
                'coreContentbankRenameContentRequest',
                'Required parameter "coreContentbankRenameContentRequest" was null or undefined when calling coreContentbankRenameContent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_contentbank_rename_content`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreContentbankRenameContentRequestToJSON(requestParameters['coreContentbankRenameContentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankRenameContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Rename a content in the content bank.
     * Rename a content in the content bank.
     */
    async coreContentbankRenameContent(requestParameters: CoreContentbankRenameContentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankRenameContent200Response> {
        const response = await this.coreContentbankRenameContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the visibility of a content in the content bank.
     * Set the visibility of a content in the content bank.
     */
    async coreContentbankSetContentVisibilityRaw(requestParameters: CoreContentbankSetContentVisibilityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankRenameContent200Response>> {
        if (requestParameters['coreContentbankSetContentVisibilityRequest'] == null) {
            throw new runtime.RequiredError(
                'coreContentbankSetContentVisibilityRequest',
                'Required parameter "coreContentbankSetContentVisibilityRequest" was null or undefined when calling coreContentbankSetContentVisibility().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_contentbank_set_content_visibility`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreContentbankSetContentVisibilityRequestToJSON(requestParameters['coreContentbankSetContentVisibilityRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankRenameContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Set the visibility of a content in the content bank.
     * Set the visibility of a content in the content bank.
     */
    async coreContentbankSetContentVisibility(requestParameters: CoreContentbankSetContentVisibilityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankRenameContent200Response> {
        const response = await this.coreContentbankSetContentVisibilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a content item (activity, resource or their subtypes) to the favourites for the user.
     * Adds a content item (activity, resource or their subtypes) to the favourites for the user.
     */
    async coreCourseAddContentItemToUserFavouritesRaw(requestParameters: CoreCourseAddContentItemToUserFavouritesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseAddContentItemToUserFavourites200Response>> {
        if (requestParameters['coreCourseAddContentItemToUserFavouritesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseAddContentItemToUserFavouritesRequest',
                'Required parameter "coreCourseAddContentItemToUserFavouritesRequest" was null or undefined when calling coreCourseAddContentItemToUserFavourites().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_add_content_item_to_user_favourites`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseAddContentItemToUserFavouritesRequestToJSON(requestParameters['coreCourseAddContentItemToUserFavouritesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseAddContentItemToUserFavourites200ResponseFromJSON(jsonValue));
    }

    /**
     * Adds a content item (activity, resource or their subtypes) to the favourites for the user.
     * Adds a content item (activity, resource or their subtypes) to the favourites for the user.
     */
    async coreCourseAddContentItemToUserFavourites(requestParameters: CoreCourseAddContentItemToUserFavouritesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseAddContentItemToUserFavourites200Response> {
        const response = await this.coreCourseAddContentItemToUserFavouritesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if there is updates affecting the user for the given course and contexts.
     * Check if there is updates affecting the user for the given course and contexts.
     */
    async coreCourseCheckUpdatesRaw(requestParameters: CoreCourseCheckUpdatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseCheckUpdates200Response>> {
        if (requestParameters['coreCourseCheckUpdatesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseCheckUpdatesRequest',
                'Required parameter "coreCourseCheckUpdatesRequest" was null or undefined when calling coreCourseCheckUpdates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_check_updates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseCheckUpdatesRequestToJSON(requestParameters['coreCourseCheckUpdatesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseCheckUpdates200ResponseFromJSON(jsonValue));
    }

    /**
     * Check if there is updates affecting the user for the given course and contexts.
     * Check if there is updates affecting the user for the given course and contexts.
     */
    async coreCourseCheckUpdates(requestParameters: CoreCourseCheckUpdatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseCheckUpdates200Response> {
        const response = await this.coreCourseCheckUpdatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create course categories
     * Create course categories
     */
    async coreCourseCreateCategoriesRaw(requestParameters: CoreCourseCreateCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseCreateCategoriesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseCreateCategoriesRequest',
                'Required parameter "coreCourseCreateCategoriesRequest" was null or undefined when calling coreCourseCreateCategories().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_create_categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseCreateCategoriesRequestToJSON(requestParameters['coreCourseCreateCategoriesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create course categories
     * Create course categories
     */
    async coreCourseCreateCategories(requestParameters: CoreCourseCreateCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseCreateCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new courses
     * Create new courses
     */
    async coreCourseCreateCoursesRaw(requestParameters: CoreCourseCreateCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseCreateCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseCreateCoursesRequest',
                'Required parameter "coreCourseCreateCoursesRequest" was null or undefined when calling coreCourseCreateCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_create_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseCreateCoursesRequestToJSON(requestParameters['coreCourseCreateCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create new courses
     * Create new courses
     */
    async coreCourseCreateCourses(requestParameters: CoreCourseCreateCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseCreateCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete course categories
     * Delete course categories
     */
    async coreCourseDeleteCategoriesRaw(requestParameters: CoreCourseDeleteCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseDeleteCategoriesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseDeleteCategoriesRequest',
                'Required parameter "coreCourseDeleteCategoriesRequest" was null or undefined when calling coreCourseDeleteCategories().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_delete_categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseDeleteCategoriesRequestToJSON(requestParameters['coreCourseDeleteCategoriesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete course categories
     * Delete course categories
     */
    async coreCourseDeleteCategories(requestParameters: CoreCourseDeleteCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseDeleteCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes all specified courses
     * Deletes all specified courses
     */
    async coreCourseDeleteCoursesRaw(requestParameters: CoreCourseDeleteCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCohortAddCohortMembers200Response>> {
        if (requestParameters['coreCourseDeleteCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseDeleteCoursesRequest',
                'Required parameter "coreCourseDeleteCoursesRequest" was null or undefined when calling coreCourseDeleteCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_delete_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseDeleteCoursesRequestToJSON(requestParameters['coreCourseDeleteCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCohortAddCohortMembers200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes all specified courses
     * Deletes all specified courses
     */
    async coreCourseDeleteCourses(requestParameters: CoreCourseDeleteCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCohortAddCohortMembers200Response> {
        const response = await this.coreCourseDeleteCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes all specified module instances
     * Deletes all specified module instances
     */
    async coreCourseDeleteModulesRaw(requestParameters: CoreCourseDeleteModulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseDeleteModulesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseDeleteModulesRequest',
                'Required parameter "coreCourseDeleteModulesRequest" was null or undefined when calling coreCourseDeleteModules().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_delete_modules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseDeleteModulesRequestToJSON(requestParameters['coreCourseDeleteModulesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes all specified module instances
     * Deletes all specified module instances
     */
    async coreCourseDeleteModules(requestParameters: CoreCourseDeleteModulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseDeleteModulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Duplicate an existing course (creating a new one).
     * Duplicate an existing course (creating a new one).
     */
    async coreCourseDuplicateCourseRaw(requestParameters: CoreCourseDuplicateCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseDuplicateCourse200Response>> {
        if (requestParameters['coreCourseDuplicateCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseDuplicateCourseRequest',
                'Required parameter "coreCourseDuplicateCourseRequest" was null or undefined when calling coreCourseDuplicateCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_duplicate_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseDuplicateCourseRequestToJSON(requestParameters['coreCourseDuplicateCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseDuplicateCourse200ResponseFromJSON(jsonValue));
    }

    /**
     * Duplicate an existing course (creating a new one).
     * Duplicate an existing course (creating a new one).
     */
    async coreCourseDuplicateCourse(requestParameters: CoreCourseDuplicateCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseDuplicateCourse200Response> {
        const response = await this.coreCourseDuplicateCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Performs an action on course module (change visibility, duplicate, delete, etc.)
     * Performs an action on course module (change visibility, duplicate, delete, etc.)
     */
    async coreCourseEditModuleRaw(requestParameters: CoreCourseEditModuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseEditModuleRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseEditModuleRequest',
                'Required parameter "coreCourseEditModuleRequest" was null or undefined when calling coreCourseEditModule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_edit_module`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseEditModuleRequestToJSON(requestParameters['coreCourseEditModuleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Performs an action on course module (change visibility, duplicate, delete, etc.)
     * Performs an action on course module (change visibility, duplicate, delete, etc.)
     */
    async coreCourseEditModule(requestParameters: CoreCourseEditModuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseEditModuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Performs an action on course section (change visibility, set marker, delete)
     * Performs an action on course section (change visibility, set marker, delete)
     */
    async coreCourseEditSectionRaw(requestParameters: CoreCourseEditSectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseEditSectionRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseEditSectionRequest',
                'Required parameter "coreCourseEditSectionRequest" was null or undefined when calling coreCourseEditSection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_edit_section`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseEditSectionRequestToJSON(requestParameters['coreCourseEditSectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Performs an action on course section (change visibility, set marker, delete)
     * Performs an action on course section (change visibility, set marker, delete)
     */
    async coreCourseEditSection(requestParameters: CoreCourseEditSectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseEditSectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the data for the activity chooser footer.
     * Fetch the data for the activity chooser footer.
     */
    async coreCourseGetActivityChooserFooterRaw(requestParameters: CoreCourseGetActivityChooserFooterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseGetActivityChooserFooter200Response>> {
        if (requestParameters['coreCourseGetActivityChooserFooterRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseGetActivityChooserFooterRequest',
                'Required parameter "coreCourseGetActivityChooserFooterRequest" was null or undefined when calling coreCourseGetActivityChooserFooter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_activity_chooser_footer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseGetActivityChooserFooterRequestToJSON(requestParameters['coreCourseGetActivityChooserFooterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseGetActivityChooserFooter200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetch the data for the activity chooser footer.
     * Fetch the data for the activity chooser footer.
     */
    async coreCourseGetActivityChooserFooter(requestParameters: CoreCourseGetActivityChooserFooterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseGetActivityChooserFooter200Response> {
        const response = await this.coreCourseGetActivityChooserFooterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return category details
     * Return category details
     */
    async coreCourseGetCategoriesRaw(requestParameters: CoreCourseGetCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseGetCategoriesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseGetCategoriesRequest',
                'Required parameter "coreCourseGetCategoriesRequest" was null or undefined when calling coreCourseGetCategories().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseGetCategoriesRequestToJSON(requestParameters['coreCourseGetCategoriesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Return category details
     * Return category details
     */
    async coreCourseGetCategories(requestParameters: CoreCourseGetCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseGetCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get course contents
     * Get course contents
     */
    async coreCourseGetContentsRaw(requestParameters: CoreCourseGetContentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseGetContentsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseGetContentsRequest',
                'Required parameter "coreCourseGetContentsRequest" was null or undefined when calling coreCourseGetContents().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_contents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseGetContentsRequestToJSON(requestParameters['coreCourseGetContentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get course contents
     * Get course contents
     */
    async coreCourseGetContents(requestParameters: CoreCourseGetContentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseGetContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch all the content items (activities, resources and their subtypes) for the activity picker
     * Fetch all the content items (activities, resources and their subtypes) for the activity picker
     */
    async coreCourseGetCourseContentItemsRaw(requestParameters: CoreCourseGetCourseContentItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseGetCourseContentItems200Response>> {
        if (requestParameters['coreCourseGetCourseContentItemsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseGetCourseContentItemsRequest',
                'Required parameter "coreCourseGetCourseContentItemsRequest" was null or undefined when calling coreCourseGetCourseContentItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_course_content_items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseGetCourseContentItemsRequestToJSON(requestParameters['coreCourseGetCourseContentItemsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseGetCourseContentItems200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetch all the content items (activities, resources and their subtypes) for the activity picker
     * Fetch all the content items (activities, resources and their subtypes) for the activity picker
     */
    async coreCourseGetCourseContentItems(requestParameters: CoreCourseGetCourseContentItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseGetCourseContentItems200Response> {
        const response = await this.coreCourseGetCourseContentItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return information about a course module
     * Return information about a course module
     */
    async coreCourseGetCourseModuleRaw(requestParameters: CoreCourseGetCourseModuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseGetCourseModule200Response>> {
        if (requestParameters['coreCompetencyListCourseModuleCompetenciesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyListCourseModuleCompetenciesRequest',
                'Required parameter "coreCompetencyListCourseModuleCompetenciesRequest" was null or undefined when calling coreCourseGetCourseModule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_course_module`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyListCourseModuleCompetenciesRequestToJSON(requestParameters['coreCompetencyListCourseModuleCompetenciesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseGetCourseModule200ResponseFromJSON(jsonValue));
    }

    /**
     * Return information about a course module
     * Return information about a course module
     */
    async coreCourseGetCourseModule(requestParameters: CoreCourseGetCourseModuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseGetCourseModule200Response> {
        const response = await this.coreCourseGetCourseModuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return information about a given module name and instance id
     * Return information about a given module name and instance id
     */
    async coreCourseGetCourseModuleByInstanceRaw(requestParameters: CoreCourseGetCourseModuleByInstanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseGetCourseModuleByInstance200Response>> {
        if (requestParameters['coreCourseGetCourseModuleByInstanceRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseGetCourseModuleByInstanceRequest',
                'Required parameter "coreCourseGetCourseModuleByInstanceRequest" was null or undefined when calling coreCourseGetCourseModuleByInstance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_course_module_by_instance`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseGetCourseModuleByInstanceRequestToJSON(requestParameters['coreCourseGetCourseModuleByInstanceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseGetCourseModuleByInstance200ResponseFromJSON(jsonValue));
    }

    /**
     * Return information about a given module name and instance id
     * Return information about a given module name and instance id
     */
    async coreCourseGetCourseModuleByInstance(requestParameters: CoreCourseGetCourseModuleByInstanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseGetCourseModuleByInstance200Response> {
        const response = await this.coreCourseGetCourseModuleByInstanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return course details
     * Return course details
     */
    async coreCourseGetCoursesRaw(requestParameters: CoreCourseGetCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseGetCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseGetCoursesRequest',
                'Required parameter "coreCourseGetCoursesRequest" was null or undefined when calling coreCourseGetCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseGetCoursesRequestToJSON(requestParameters['coreCourseGetCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Return course details
     * Return course details
     */
    async coreCourseGetCourses(requestParameters: CoreCourseGetCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseGetCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get courses matching a specific field (id/s, shortname, idnumber, category)
     * Get courses matching a specific field (id/s, shortname, idnumber, category)
     */
    async coreCourseGetCoursesByFieldRaw(requestParameters: CoreCourseGetCoursesByFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseGetCoursesByField200Response>> {
        if (requestParameters['coreCourseGetCoursesByFieldRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseGetCoursesByFieldRequest',
                'Required parameter "coreCourseGetCoursesByFieldRequest" was null or undefined when calling coreCourseGetCoursesByField().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_courses_by_field`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseGetCoursesByFieldRequestToJSON(requestParameters['coreCourseGetCoursesByFieldRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseGetCoursesByField200ResponseFromJSON(jsonValue));
    }

    /**
     * Get courses matching a specific field (id/s, shortname, idnumber, category)
     * Get courses matching a specific field (id/s, shortname, idnumber, category)
     */
    async coreCourseGetCoursesByField(requestParameters: CoreCourseGetCoursesByFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseGetCoursesByField200Response> {
        const response = await this.coreCourseGetCoursesByFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of enrolled courses for the given timeline classification (past, inprogress, or future).
     * List of enrolled courses for the given timeline classification (past, inprogress, or future).
     */
    async coreCourseGetEnrolledCoursesByTimelineClassificationRaw(requestParameters: CoreCourseGetEnrolledCoursesByTimelineClassificationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseGetEnrolledCoursesByTimelineClassification200Response>> {
        if (requestParameters['coreCourseGetEnrolledCoursesByTimelineClassificationRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseGetEnrolledCoursesByTimelineClassificationRequest',
                'Required parameter "coreCourseGetEnrolledCoursesByTimelineClassificationRequest" was null or undefined when calling coreCourseGetEnrolledCoursesByTimelineClassification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_enrolled_courses_by_timeline_classification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseGetEnrolledCoursesByTimelineClassificationRequestToJSON(requestParameters['coreCourseGetEnrolledCoursesByTimelineClassificationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseFromJSON(jsonValue));
    }

    /**
     * List of enrolled courses for the given timeline classification (past, inprogress, or future).
     * List of enrolled courses for the given timeline classification (past, inprogress, or future).
     */
    async coreCourseGetEnrolledCoursesByTimelineClassification(requestParameters: CoreCourseGetEnrolledCoursesByTimelineClassificationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseGetEnrolledCoursesByTimelineClassification200Response> {
        const response = await this.coreCourseGetEnrolledCoursesByTimelineClassificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of enrolled courses with action events in a given timeframe, for the given timeline classification.
     * List of enrolled courses with action events in a given timeframe, for the given timeline classification.
     */
    async coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRaw(requestParameters: CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200Response>> {
        if (requestParameters['coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest',
                'Required parameter "coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest" was null or undefined when calling coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_enrolled_courses_with_action_events_by_timeline_classification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequestToJSON(requestParameters['coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200ResponseFromJSON(jsonValue));
    }

    /**
     * List of enrolled courses with action events in a given timeframe, for the given timeline classification.
     * List of enrolled courses with action events in a given timeframe, for the given timeline classification.
     */
    async coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification(requestParameters: CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200Response> {
        const response = await this.coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List users by course module id, filter by group and active enrolment status.
     * List users by course module id, filter by group and active enrolment status.
     */
    async coreCourseGetEnrolledUsersByCmidRaw(requestParameters: CoreCourseGetEnrolledUsersByCmidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseGetEnrolledUsersByCmid200Response>> {
        if (requestParameters['coreCourseGetEnrolledUsersByCmidRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseGetEnrolledUsersByCmidRequest',
                'Required parameter "coreCourseGetEnrolledUsersByCmidRequest" was null or undefined when calling coreCourseGetEnrolledUsersByCmid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_enrolled_users_by_cmid`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseGetEnrolledUsersByCmidRequestToJSON(requestParameters['coreCourseGetEnrolledUsersByCmidRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseGetEnrolledUsersByCmid200ResponseFromJSON(jsonValue));
    }

    /**
     * List users by course module id, filter by group and active enrolment status.
     * List users by course module id, filter by group and active enrolment status.
     */
    async coreCourseGetEnrolledUsersByCmid(requestParameters: CoreCourseGetEnrolledUsersByCmidOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseGetEnrolledUsersByCmid200Response> {
        const response = await this.coreCourseGetEnrolledUsersByCmidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns html with one activity module on course page
     * Returns html with one activity module on course page
     */
    async coreCourseGetModuleRaw(requestParameters: CoreCourseGetModuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseGetModuleRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseGetModuleRequest',
                'Required parameter "coreCourseGetModuleRequest" was null or undefined when calling coreCourseGetModule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_module`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseGetModuleRequestToJSON(requestParameters['coreCourseGetModuleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns html with one activity module on course page
     * Returns html with one activity module on course page
     */
    async coreCourseGetModule(requestParameters: CoreCourseGetModuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseGetModuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of courses a user has accessed most recently.
     * List of courses a user has accessed most recently.
     */
    async coreCourseGetRecentCoursesRaw(requestParameters: CoreCourseGetRecentCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseGetRecentCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseGetRecentCoursesRequest',
                'Required parameter "coreCourseGetRecentCoursesRequest" was null or undefined when calling coreCourseGetRecentCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_recent_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseGetRecentCoursesRequestToJSON(requestParameters['coreCourseGetRecentCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List of courses a user has accessed most recently.
     * List of courses a user has accessed most recently.
     */
    async coreCourseGetRecentCourses(requestParameters: CoreCourseGetRecentCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseGetRecentCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if there are updates affecting the user for the given course since the given time stamp.
     * Check if there are updates affecting the user for the given course since the given time stamp.
     */
    async coreCourseGetUpdatesSinceRaw(requestParameters: CoreCourseGetUpdatesSinceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseGetUpdatesSince200Response>> {
        if (requestParameters['coreCourseGetUpdatesSinceRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseGetUpdatesSinceRequest',
                'Required parameter "coreCourseGetUpdatesSinceRequest" was null or undefined when calling coreCourseGetUpdatesSince().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_updates_since`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseGetUpdatesSinceRequestToJSON(requestParameters['coreCourseGetUpdatesSinceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseGetUpdatesSince200ResponseFromJSON(jsonValue));
    }

    /**
     * Check if there are updates affecting the user for the given course since the given time stamp.
     * Check if there are updates affecting the user for the given course since the given time stamp.
     */
    async coreCourseGetUpdatesSince(requestParameters: CoreCourseGetUpdatesSinceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseGetUpdatesSince200Response> {
        const response = await this.coreCourseGetUpdatesSinceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of administration options in a set of courses that are avaialable or not for the current                             user.
     * Return a list of administration options in a set of courses that are avaialable or not for the current                             user.
     */
    async coreCourseGetUserAdministrationOptionsRaw(requestParameters: CoreCourseGetUserAdministrationOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseGetUserAdministrationOptions200Response>> {
        if (requestParameters['coreCourseGetUserAdministrationOptionsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseGetUserAdministrationOptionsRequest',
                'Required parameter "coreCourseGetUserAdministrationOptionsRequest" was null or undefined when calling coreCourseGetUserAdministrationOptions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_user_administration_options`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseGetUserAdministrationOptionsRequestToJSON(requestParameters['coreCourseGetUserAdministrationOptionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseGetUserAdministrationOptions200ResponseFromJSON(jsonValue));
    }

    /**
     * Return a list of administration options in a set of courses that are avaialable or not for the current                             user.
     * Return a list of administration options in a set of courses that are avaialable or not for the current                             user.
     */
    async coreCourseGetUserAdministrationOptions(requestParameters: CoreCourseGetUserAdministrationOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseGetUserAdministrationOptions200Response> {
        const response = await this.coreCourseGetUserAdministrationOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of navigation options in a set of courses that are avaialable or not for the current user.
     * Return a list of navigation options in a set of courses that are avaialable or not for the current user.
     */
    async coreCourseGetUserNavigationOptionsRaw(requestParameters: CoreCourseGetUserNavigationOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseGetUserNavigationOptions200Response>> {
        if (requestParameters['coreCourseGetUserNavigationOptionsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseGetUserNavigationOptionsRequest',
                'Required parameter "coreCourseGetUserNavigationOptionsRequest" was null or undefined when calling coreCourseGetUserNavigationOptions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_get_user_navigation_options`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseGetUserNavigationOptionsRequestToJSON(requestParameters['coreCourseGetUserNavigationOptionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseGetUserNavigationOptions200ResponseFromJSON(jsonValue));
    }

    /**
     * Return a list of navigation options in a set of courses that are avaialable or not for the current user.
     * Return a list of navigation options in a set of courses that are avaialable or not for the current user.
     */
    async coreCourseGetUserNavigationOptions(requestParameters: CoreCourseGetUserNavigationOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseGetUserNavigationOptions200Response> {
        const response = await this.coreCourseGetUserNavigationOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Import course data from a course into another course. Does not include any user data.
     * Import course data from a course into another course. Does not include any user data.
     */
    async coreCourseImportCourseRaw(requestParameters: CoreCourseImportCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseImportCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseImportCourseRequest',
                'Required parameter "coreCourseImportCourseRequest" was null or undefined when calling coreCourseImportCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_import_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseImportCourseRequestToJSON(requestParameters['coreCourseImportCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Import course data from a course into another course. Does not include any user data.
     * Import course data from a course into another course. Does not include any user data.
     */
    async coreCourseImportCourse(requestParameters: CoreCourseImportCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseImportCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a content item (activity, resource or their subtypes) from the favourites for the user.
     * Removes a content item (activity, resource or their subtypes) from the favourites for the user.
     */
    async coreCourseRemoveContentItemFromUserFavouritesRaw(requestParameters: CoreCourseRemoveContentItemFromUserFavouritesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseAddContentItemToUserFavourites200Response>> {
        if (requestParameters['coreCourseRemoveContentItemFromUserFavouritesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseRemoveContentItemFromUserFavouritesRequest',
                'Required parameter "coreCourseRemoveContentItemFromUserFavouritesRequest" was null or undefined when calling coreCourseRemoveContentItemFromUserFavourites().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_remove_content_item_from_user_favourites`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseRemoveContentItemFromUserFavouritesRequestToJSON(requestParameters['coreCourseRemoveContentItemFromUserFavouritesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseAddContentItemToUserFavourites200ResponseFromJSON(jsonValue));
    }

    /**
     * Removes a content item (activity, resource or their subtypes) from the favourites for the user.
     * Removes a content item (activity, resource or their subtypes) from the favourites for the user.
     */
    async coreCourseRemoveContentItemFromUserFavourites(requestParameters: CoreCourseRemoveContentItemFromUserFavouritesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseAddContentItemToUserFavourites200Response> {
        const response = await this.coreCourseRemoveContentItemFromUserFavouritesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search courses by (name, module, block, tag)
     * Search courses by (name, module, block, tag)
     */
    async coreCourseSearchCoursesRaw(requestParameters: CoreCourseSearchCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseSearchCourses200Response>> {
        if (requestParameters['coreCourseSearchCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseSearchCoursesRequest',
                'Required parameter "coreCourseSearchCoursesRequest" was null or undefined when calling coreCourseSearchCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_search_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseSearchCoursesRequestToJSON(requestParameters['coreCourseSearchCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseSearchCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Search courses by (name, module, block, tag)
     * Search courses by (name, module, block, tag)
     */
    async coreCourseSearchCourses(requestParameters: CoreCourseSearchCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseSearchCourses200Response> {
        const response = await this.coreCourseSearchCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a list of courses to the list of favourite courses.
     * Add a list of courses to the list of favourite courses.
     */
    async coreCourseSetFavouriteCoursesRaw(requestParameters: CoreCourseSetFavouriteCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCohortAddCohortMembers200Response>> {
        if (requestParameters['coreCourseSetFavouriteCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseSetFavouriteCoursesRequest',
                'Required parameter "coreCourseSetFavouriteCoursesRequest" was null or undefined when calling coreCourseSetFavouriteCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_set_favourite_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseSetFavouriteCoursesRequestToJSON(requestParameters['coreCourseSetFavouriteCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCohortAddCohortMembers200ResponseFromJSON(jsonValue));
    }

    /**
     * Add a list of courses to the list of favourite courses.
     * Add a list of courses to the list of favourite courses.
     */
    async coreCourseSetFavouriteCourses(requestParameters: CoreCourseSetFavouriteCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCohortAddCohortMembers200Response> {
        const response = await this.coreCourseSetFavouriteCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds or removes an activity as a recommendation in the activity chooser.
     * Adds or removes an activity as a recommendation in the activity chooser.
     */
    async coreCourseToggleActivityRecommendationRaw(requestParameters: CoreCourseToggleActivityRecommendationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCourseToggleActivityRecommendation200Response>> {
        if (requestParameters['coreCourseToggleActivityRecommendationRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseToggleActivityRecommendationRequest',
                'Required parameter "coreCourseToggleActivityRecommendationRequest" was null or undefined when calling coreCourseToggleActivityRecommendation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_toggle_activity_recommendation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseToggleActivityRecommendationRequestToJSON(requestParameters['coreCourseToggleActivityRecommendationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCourseToggleActivityRecommendation200ResponseFromJSON(jsonValue));
    }

    /**
     * Adds or removes an activity as a recommendation in the activity chooser.
     * Adds or removes an activity as a recommendation in the activity chooser.
     */
    async coreCourseToggleActivityRecommendation(requestParameters: CoreCourseToggleActivityRecommendationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCourseToggleActivityRecommendation200Response> {
        const response = await this.coreCourseToggleActivityRecommendationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update categories
     * Update categories
     */
    async coreCourseUpdateCategoriesRaw(requestParameters: CoreCourseUpdateCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseUpdateCategoriesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseUpdateCategoriesRequest',
                'Required parameter "coreCourseUpdateCategoriesRequest" was null or undefined when calling coreCourseUpdateCategories().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_update_categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseUpdateCategoriesRequestToJSON(requestParameters['coreCourseUpdateCategoriesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update categories
     * Update categories
     */
    async coreCourseUpdateCategories(requestParameters: CoreCourseUpdateCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseUpdateCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update courses
     * Update courses
     */
    async coreCourseUpdateCoursesRaw(requestParameters: CoreCourseUpdateCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCohortAddCohortMembers200Response>> {
        if (requestParameters['coreCourseUpdateCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseUpdateCoursesRequest',
                'Required parameter "coreCourseUpdateCoursesRequest" was null or undefined when calling coreCourseUpdateCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_update_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseUpdateCoursesRequestToJSON(requestParameters['coreCourseUpdateCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCohortAddCohortMembers200ResponseFromJSON(jsonValue));
    }

    /**
     * Update courses
     * Update courses
     */
    async coreCourseUpdateCourses(requestParameters: CoreCourseUpdateCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCohortAddCohortMembers200Response> {
        const response = await this.coreCourseUpdateCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log that the course was viewed
     * Log that the course was viewed
     */
    async coreCourseViewCourseRaw(requestParameters: CoreCourseViewCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['coreCourseViewCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseViewCourseRequest',
                'Required parameter "coreCourseViewCourseRequest" was null or undefined when calling coreCourseViewCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_course_view_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseViewCourseRequestToJSON(requestParameters['coreCourseViewCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Log that the course was viewed
     * Log that the course was viewed
     */
    async coreCourseViewCourse(requestParameters: CoreCourseViewCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.coreCourseViewCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current course file hanlders.
     * Get the current course file hanlders.
     */
    async coreCourseformatFileHandlersRaw(requestParameters: CoreCourseformatFileHandlersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseformatFileHandlersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseformatFileHandlersRequest',
                'Required parameter "coreCourseformatFileHandlersRequest" was null or undefined when calling coreCourseformatFileHandlers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_courseformat_file_handlers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseformatFileHandlersRequestToJSON(requestParameters['coreCourseformatFileHandlersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the current course file hanlders.
     * Get the current course file hanlders.
     */
    async coreCourseformatFileHandlers(requestParameters: CoreCourseformatFileHandlersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseformatFileHandlersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current course state.
     * Get the current course state.
     */
    async coreCourseformatGetStateRaw(requestParameters: CoreCourseformatGetStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseformatFileHandlersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseformatFileHandlersRequest',
                'Required parameter "coreCourseformatFileHandlersRequest" was null or undefined when calling coreCourseformatGetState().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_courseformat_get_state`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseformatFileHandlersRequestToJSON(requestParameters['coreCourseformatFileHandlersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the current course state.
     * Get the current course state.
     */
    async coreCourseformatGetState(requestParameters: CoreCourseformatGetStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseformatGetStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update course contents.
     * Update course contents.
     */
    async coreCourseformatUpdateCourseRaw(requestParameters: CoreCourseformatUpdateCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCourseformatUpdateCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCourseformatUpdateCourseRequest',
                'Required parameter "coreCourseformatUpdateCourseRequest" was null or undefined when calling coreCourseformatUpdateCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_courseformat_update_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCourseformatUpdateCourseRequestToJSON(requestParameters['coreCourseformatUpdateCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update course contents.
     * Update course contents.
     */
    async coreCourseformatUpdateCourse(requestParameters: CoreCourseformatUpdateCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCourseformatUpdateCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Record the action that the user takes in the user feedback notification for future use.
     * Record the action that the user takes in the user feedback notification for future use.
     */
    async coreCreateUserfeedbackActionRecordRaw(requestParameters: CoreCreateUserfeedbackActionRecordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCreateUserfeedbackActionRecordRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCreateUserfeedbackActionRecordRequest',
                'Required parameter "coreCreateUserfeedbackActionRecordRequest" was null or undefined when calling coreCreateUserfeedbackActionRecord().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_create_userfeedback_action_record`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCreateUserfeedbackActionRecordRequestToJSON(requestParameters['coreCreateUserfeedbackActionRecordRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Record the action that the user takes in the user feedback notification for future use.
     * Record the action that the user takes in the user feedback notification for future use.
     */
    async coreCreateUserfeedbackActionRecord(requestParameters: CoreCreateUserfeedbackActionRecordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCreateUserfeedbackActionRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new category
     * Creates a new category
     */
    async coreCustomfieldCreateCategoryRaw(requestParameters: CoreCustomfieldCreateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCustomfieldCreateCategoryRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCustomfieldCreateCategoryRequest',
                'Required parameter "coreCustomfieldCreateCategoryRequest" was null or undefined when calling coreCustomfieldCreateCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_customfield_create_category`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCustomfieldCreateCategoryRequestToJSON(requestParameters['coreCustomfieldCreateCategoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates a new category
     * Creates a new category
     */
    async coreCustomfieldCreateCategory(requestParameters: CoreCustomfieldCreateCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCustomfieldCreateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a category
     * Deletes a category
     */
    async coreCustomfieldDeleteCategoryRaw(requestParameters: CoreCustomfieldDeleteCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCustomfieldDeleteCategoryRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCustomfieldDeleteCategoryRequest',
                'Required parameter "coreCustomfieldDeleteCategoryRequest" was null or undefined when calling coreCustomfieldDeleteCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_customfield_delete_category`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCustomfieldDeleteCategoryRequestToJSON(requestParameters['coreCustomfieldDeleteCategoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes a category
     * Deletes a category
     */
    async coreCustomfieldDeleteCategory(requestParameters: CoreCustomfieldDeleteCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCustomfieldDeleteCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an entry
     * Deletes an entry
     */
    async coreCustomfieldDeleteFieldRaw(requestParameters: CoreCustomfieldDeleteFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCustomfieldDeleteFieldRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCustomfieldDeleteFieldRequest',
                'Required parameter "coreCustomfieldDeleteFieldRequest" was null or undefined when calling coreCustomfieldDeleteField().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_customfield_delete_field`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCustomfieldDeleteFieldRequestToJSON(requestParameters['coreCustomfieldDeleteFieldRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes an entry
     * Deletes an entry
     */
    async coreCustomfieldDeleteField(requestParameters: CoreCustomfieldDeleteFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCustomfieldDeleteFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Drag and drop categories
     * Drag and drop categories
     */
    async coreCustomfieldMoveCategoryRaw(requestParameters: CoreCustomfieldMoveCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCustomfieldMoveCategoryRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCustomfieldMoveCategoryRequest',
                'Required parameter "coreCustomfieldMoveCategoryRequest" was null or undefined when calling coreCustomfieldMoveCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_customfield_move_category`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCustomfieldMoveCategoryRequestToJSON(requestParameters['coreCustomfieldMoveCategoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Drag and drop categories
     * Drag and drop categories
     */
    async coreCustomfieldMoveCategory(requestParameters: CoreCustomfieldMoveCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCustomfieldMoveCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Drag and drop
     * Drag and drop
     */
    async coreCustomfieldMoveFieldRaw(requestParameters: CoreCustomfieldMoveFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCustomfieldMoveFieldRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCustomfieldMoveFieldRequest',
                'Required parameter "coreCustomfieldMoveFieldRequest" was null or undefined when calling coreCustomfieldMoveField().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_customfield_move_field`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCustomfieldMoveFieldRequestToJSON(requestParameters['coreCustomfieldMoveFieldRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Drag and drop
     * Drag and drop
     */
    async coreCustomfieldMoveField(requestParameters: CoreCustomfieldMoveFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreCustomfieldMoveFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reloads template
     * Reloads template
     */
    async coreCustomfieldReloadTemplateRaw(requestParameters: CoreCustomfieldReloadTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCustomfieldReloadTemplate200Response>> {
        if (requestParameters['coreCustomfieldReloadTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCustomfieldReloadTemplateRequest',
                'Required parameter "coreCustomfieldReloadTemplateRequest" was null or undefined when calling coreCustomfieldReloadTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_customfield_reload_template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCustomfieldReloadTemplateRequestToJSON(requestParameters['coreCustomfieldReloadTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCustomfieldReloadTemplate200ResponseFromJSON(jsonValue));
    }

    /**
     * Reloads template
     * Reloads template
     */
    async coreCustomfieldReloadTemplate(requestParameters: CoreCustomfieldReloadTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCustomfieldReloadTemplate200Response> {
        const response = await this.coreCustomfieldReloadTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the content for a dynamic tab
     * Returns the content for a dynamic tab
     */
    async coreDynamicTabsGetContentRaw(requestParameters: CoreDynamicTabsGetContentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreDynamicTabsGetContent200Response>> {
        if (requestParameters['coreDynamicTabsGetContentRequest'] == null) {
            throw new runtime.RequiredError(
                'coreDynamicTabsGetContentRequest',
                'Required parameter "coreDynamicTabsGetContentRequest" was null or undefined when calling coreDynamicTabsGetContent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_dynamic_tabs_get_content`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreDynamicTabsGetContentRequestToJSON(requestParameters['coreDynamicTabsGetContentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreDynamicTabsGetContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the content for a dynamic tab
     * Returns the content for a dynamic tab
     */
    async coreDynamicTabsGetContent(requestParameters: CoreDynamicTabsGetContentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreDynamicTabsGetContent200Response> {
        const response = await this.coreDynamicTabsGetContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of course enrolment methods
     * Get the list of course enrolment methods
     */
    async coreEnrolGetCourseEnrolmentMethodsRaw(requestParameters: CoreEnrolGetCourseEnrolmentMethodsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreEnrolGetCourseEnrolmentMethodsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreEnrolGetCourseEnrolmentMethodsRequest',
                'Required parameter "coreEnrolGetCourseEnrolmentMethodsRequest" was null or undefined when calling coreEnrolGetCourseEnrolmentMethods().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_enrol_get_course_enrolment_methods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreEnrolGetCourseEnrolmentMethodsRequestToJSON(requestParameters['coreEnrolGetCourseEnrolmentMethodsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the list of course enrolment methods
     * Get the list of course enrolment methods
     */
    async coreEnrolGetCourseEnrolmentMethods(requestParameters: CoreEnrolGetCourseEnrolmentMethodsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreEnrolGetCourseEnrolmentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get enrolled users by course id.
     * Get enrolled users by course id.
     */
    async coreEnrolGetEnrolledUsersRaw(requestParameters: CoreEnrolGetEnrolledUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreEnrolGetEnrolledUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreEnrolGetEnrolledUsersRequest',
                'Required parameter "coreEnrolGetEnrolledUsersRequest" was null or undefined when calling coreEnrolGetEnrolledUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_enrol_get_enrolled_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreEnrolGetEnrolledUsersRequestToJSON(requestParameters['coreEnrolGetEnrolledUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get enrolled users by course id.
     * Get enrolled users by course id.
     */
    async coreEnrolGetEnrolledUsers(requestParameters: CoreEnrolGetEnrolledUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreEnrolGetEnrolledUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * For each course and capability specified, return a list of the users that are enrolled in the course                                   and have that capability
     * For each course and capability specified, return a list of the users that are enrolled in the course                                   and have that capability
     */
    async coreEnrolGetEnrolledUsersWithCapabilityRaw(requestParameters: CoreEnrolGetEnrolledUsersWithCapabilityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreEnrolGetEnrolledUsersWithCapabilityRequest'] == null) {
            throw new runtime.RequiredError(
                'coreEnrolGetEnrolledUsersWithCapabilityRequest',
                'Required parameter "coreEnrolGetEnrolledUsersWithCapabilityRequest" was null or undefined when calling coreEnrolGetEnrolledUsersWithCapability().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_enrol_get_enrolled_users_with_capability`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreEnrolGetEnrolledUsersWithCapabilityRequestToJSON(requestParameters['coreEnrolGetEnrolledUsersWithCapabilityRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * For each course and capability specified, return a list of the users that are enrolled in the course                                   and have that capability
     * For each course and capability specified, return a list of the users that are enrolled in the course                                   and have that capability
     */
    async coreEnrolGetEnrolledUsersWithCapability(requestParameters: CoreEnrolGetEnrolledUsersWithCapabilityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreEnrolGetEnrolledUsersWithCapabilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of potential users to enrol
     * Get the list of potential users to enrol
     */
    async coreEnrolGetPotentialUsersRaw(requestParameters: CoreEnrolGetPotentialUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreEnrolGetPotentialUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreEnrolGetPotentialUsersRequest',
                'Required parameter "coreEnrolGetPotentialUsersRequest" was null or undefined when calling coreEnrolGetPotentialUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_enrol_get_potential_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreEnrolGetPotentialUsersRequestToJSON(requestParameters['coreEnrolGetPotentialUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the list of potential users to enrol
     * Get the list of potential users to enrol
     */
    async coreEnrolGetPotentialUsers(requestParameters: CoreEnrolGetPotentialUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreEnrolGetPotentialUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of courses where a user is enrolled in
     * Get the list of courses where a user is enrolled in
     */
    async coreEnrolGetUsersCoursesRaw(requestParameters: CoreEnrolGetUsersCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreEnrolGetUsersCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreEnrolGetUsersCoursesRequest',
                'Required parameter "coreEnrolGetUsersCoursesRequest" was null or undefined when calling coreEnrolGetUsersCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_enrol_get_users_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreEnrolGetUsersCoursesRequestToJSON(requestParameters['coreEnrolGetUsersCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the list of courses where a user is enrolled in
     * Get the list of courses where a user is enrolled in
     */
    async coreEnrolGetUsersCourses(requestParameters: CoreEnrolGetUsersCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreEnrolGetUsersCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search within the list of course participants
     * Search within the list of course participants
     */
    async coreEnrolSearchUsersRaw(requestParameters: CoreEnrolSearchUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreEnrolSearchUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreEnrolSearchUsersRequest',
                'Required parameter "coreEnrolSearchUsersRequest" was null or undefined when calling coreEnrolSearchUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_enrol_search_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreEnrolSearchUsersRequestToJSON(requestParameters['coreEnrolSearchUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Search within the list of course participants
     * Search within the list of course participants
     */
    async coreEnrolSearchUsers(requestParameters: CoreEnrolSearchUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreEnrolSearchUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit form data for enrolment form
     * Submit form data for enrolment form
     */
    async coreEnrolSubmitUserEnrolmentFormRaw(requestParameters: CoreEnrolSubmitUserEnrolmentFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreEnrolSubmitUserEnrolmentForm200Response>> {
        if (requestParameters['coreEnrolSubmitUserEnrolmentFormRequest'] == null) {
            throw new runtime.RequiredError(
                'coreEnrolSubmitUserEnrolmentFormRequest',
                'Required parameter "coreEnrolSubmitUserEnrolmentFormRequest" was null or undefined when calling coreEnrolSubmitUserEnrolmentForm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_enrol_submit_user_enrolment_form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreEnrolSubmitUserEnrolmentFormRequestToJSON(requestParameters['coreEnrolSubmitUserEnrolmentFormRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreEnrolSubmitUserEnrolmentForm200ResponseFromJSON(jsonValue));
    }

    /**
     * Submit form data for enrolment form
     * Submit form data for enrolment form
     */
    async coreEnrolSubmitUserEnrolmentForm(requestParameters: CoreEnrolSubmitUserEnrolmentFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreEnrolSubmitUserEnrolmentForm200Response> {
        const response = await this.coreEnrolSubmitUserEnrolmentFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * External function that unenrols a given user enrolment
     * External function that unenrols a given user enrolment
     */
    async coreEnrolUnenrolUserEnrolmentRaw(requestParameters: CoreEnrolUnenrolUserEnrolmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreEnrolUnenrolUserEnrolment200Response>> {
        if (requestParameters['coreEnrolUnenrolUserEnrolmentRequest'] == null) {
            throw new runtime.RequiredError(
                'coreEnrolUnenrolUserEnrolmentRequest',
                'Required parameter "coreEnrolUnenrolUserEnrolmentRequest" was null or undefined when calling coreEnrolUnenrolUserEnrolment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_enrol_unenrol_user_enrolment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreEnrolUnenrolUserEnrolmentRequestToJSON(requestParameters['coreEnrolUnenrolUserEnrolmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreEnrolUnenrolUserEnrolment200ResponseFromJSON(jsonValue));
    }

    /**
     * External function that unenrols a given user enrolment
     * External function that unenrols a given user enrolment
     */
    async coreEnrolUnenrolUserEnrolment(requestParameters: CoreEnrolUnenrolUserEnrolmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreEnrolUnenrolUserEnrolment200Response> {
        const response = await this.coreEnrolUnenrolUserEnrolmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of notifications for the current session
     * Return a list of notifications for the current session
     */
    async coreFetchNotificationsRaw(requestParameters: CoreFetchNotificationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreFetchNotificationsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreFetchNotificationsRequest',
                'Required parameter "coreFetchNotificationsRequest" was null or undefined when calling coreFetchNotifications().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_fetch_notifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreFetchNotificationsRequestToJSON(requestParameters['coreFetchNotificationsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Return a list of notifications for the current session
     * Return a list of notifications for the current session
     */
    async coreFetchNotifications(requestParameters: CoreFetchNotificationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreFetchNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the indicated files (or directories) from a user draft file area.
     * Delete the indicated files (or directories) from a user draft file area.
     */
    async coreFilesDeleteDraftFilesRaw(requestParameters: CoreFilesDeleteDraftFilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreFilesDeleteDraftFiles200Response>> {
        if (requestParameters['coreFilesDeleteDraftFilesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreFilesDeleteDraftFilesRequest',
                'Required parameter "coreFilesDeleteDraftFilesRequest" was null or undefined when calling coreFilesDeleteDraftFiles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_files_delete_draft_files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreFilesDeleteDraftFilesRequestToJSON(requestParameters['coreFilesDeleteDraftFilesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreFilesDeleteDraftFiles200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete the indicated files (or directories) from a user draft file area.
     * Delete the indicated files (or directories) from a user draft file area.
     */
    async coreFilesDeleteDraftFiles(requestParameters: CoreFilesDeleteDraftFilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreFilesDeleteDraftFiles200Response> {
        const response = await this.coreFilesDeleteDraftFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * browse moodle files
     * browse moodle files
     */
    async coreFilesGetFilesRaw(requestParameters: CoreFilesGetFilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreFilesGetFiles200Response>> {
        if (requestParameters['coreFilesGetFilesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreFilesGetFilesRequest',
                'Required parameter "coreFilesGetFilesRequest" was null or undefined when calling coreFilesGetFiles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_files_get_files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreFilesGetFilesRequestToJSON(requestParameters['coreFilesGetFilesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreFilesGetFiles200ResponseFromJSON(jsonValue));
    }

    /**
     * browse moodle files
     * browse moodle files
     */
    async coreFilesGetFiles(requestParameters: CoreFilesGetFilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreFilesGetFiles200Response> {
        const response = await this.coreFilesGetFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a new draft itemid for the current user.
     * Generate a new draft itemid for the current user.
     */
    async coreFilesGetUnusedDraftItemidRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreFilesGetUnusedDraftItemid200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_files_get_unused_draft_itemid`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreFilesGetUnusedDraftItemid200ResponseFromJSON(jsonValue));
    }

    /**
     * Generate a new draft itemid for the current user.
     * Generate a new draft itemid for the current user.
     */
    async coreFilesGetUnusedDraftItemid(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreFilesGetUnusedDraftItemid200Response> {
        const response = await this.coreFilesGetUnusedDraftItemidRaw(initOverrides);
        return await response.value();
    }

    /**
     * upload a file to moodle
     * upload a file to moodle
     */
    async coreFilesUploadRaw(requestParameters: CoreFilesUploadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreFilesUpload200Response>> {
        if (requestParameters['coreFilesUploadRequest'] == null) {
            throw new runtime.RequiredError(
                'coreFilesUploadRequest',
                'Required parameter "coreFilesUploadRequest" was null or undefined when calling coreFilesUpload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_files_upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreFilesUploadRequestToJSON(requestParameters['coreFilesUploadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreFilesUpload200ResponseFromJSON(jsonValue));
    }

    /**
     * upload a file to moodle
     * upload a file to moodle
     */
    async coreFilesUpload(requestParameters: CoreFilesUploadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreFilesUpload200Response> {
        const response = await this.coreFilesUploadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the filters available in the given contexts.
     * Returns the filters available in the given contexts.
     */
    async coreFiltersGetAvailableInContextRaw(requestParameters: CoreFiltersGetAvailableInContextOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreFiltersGetAvailableInContext200Response>> {
        if (requestParameters['coreFiltersGetAvailableInContextRequest'] == null) {
            throw new runtime.RequiredError(
                'coreFiltersGetAvailableInContextRequest',
                'Required parameter "coreFiltersGetAvailableInContextRequest" was null or undefined when calling coreFiltersGetAvailableInContext().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_filters_get_available_in_context`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreFiltersGetAvailableInContextRequestToJSON(requestParameters['coreFiltersGetAvailableInContextRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreFiltersGetAvailableInContext200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the filters available in the given contexts.
     * Returns the filters available in the given contexts.
     */
    async coreFiltersGetAvailableInContext(requestParameters: CoreFiltersGetAvailableInContextOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreFiltersGetAvailableInContext200Response> {
        const response = await this.coreFiltersGetAvailableInContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process submission of a dynamic (modal) form
     * Process submission of a dynamic (modal) form
     */
    async coreFormDynamicFormRaw(requestParameters: CoreFormDynamicFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreFormDynamicForm200Response>> {
        if (requestParameters['coreFormDynamicFormRequest'] == null) {
            throw new runtime.RequiredError(
                'coreFormDynamicFormRequest',
                'Required parameter "coreFormDynamicFormRequest" was null or undefined when calling coreFormDynamicForm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_form_dynamic_form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreFormDynamicFormRequestToJSON(requestParameters['coreFormDynamicFormRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreFormDynamicForm200ResponseFromJSON(jsonValue));
    }

    /**
     * Process submission of a dynamic (modal) form
     * Process submission of a dynamic (modal) form
     */
    async coreFormDynamicForm(requestParameters: CoreFormDynamicFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreFormDynamicForm200Response> {
        const response = await this.coreFormDynamicFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides data for the filetypes element browser.
     * Provides data for the filetypes element browser.
     */
    async coreFormGetFiletypesBrowserDataRaw(requestParameters: CoreFormGetFiletypesBrowserDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreFormGetFiletypesBrowserData200Response>> {
        if (requestParameters['coreFormGetFiletypesBrowserDataRequest'] == null) {
            throw new runtime.RequiredError(
                'coreFormGetFiletypesBrowserDataRequest',
                'Required parameter "coreFormGetFiletypesBrowserDataRequest" was null or undefined when calling coreFormGetFiletypesBrowserData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_form_get_filetypes_browser_data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreFormGetFiletypesBrowserDataRequestToJSON(requestParameters['coreFormGetFiletypesBrowserDataRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreFormGetFiletypesBrowserData200ResponseFromJSON(jsonValue));
    }

    /**
     * Provides data for the filetypes element browser.
     * Provides data for the filetypes element browser.
     */
    async coreFormGetFiletypesBrowserData(requestParameters: CoreFormGetFiletypesBrowserDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreFormGetFiletypesBrowserData200Response> {
        const response = await this.coreFormGetFiletypesBrowserDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return all raw strings (with {$a->xxx}), for a specific component - similar to core get_component_strings(), call
     * Return all raw strings (with {$a->xxx}), for a specific component - similar to core get_component_strings(), call
     */
    async coreGetComponentStringsRaw(requestParameters: CoreGetComponentStringsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGetComponentStringsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGetComponentStringsRequest',
                'Required parameter "coreGetComponentStringsRequest" was null or undefined when calling coreGetComponentStrings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_get_component_strings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGetComponentStringsRequestToJSON(requestParameters['coreGetComponentStringsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Return all raw strings (with {$a->xxx}), for a specific component - similar to core get_component_strings(), call
     * Return all raw strings (with {$a->xxx}), for a specific component - similar to core get_component_strings(), call
     */
    async coreGetComponentStrings(requestParameters: CoreGetComponentStringsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGetComponentStringsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a fragment for inclusion, such as a JavaScript page.
     * Return a fragment for inclusion, such as a JavaScript page.
     */
    async coreGetFragmentRaw(requestParameters: CoreGetFragmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGetFragment200Response>> {
        if (requestParameters['coreGetFragmentRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGetFragmentRequest',
                'Required parameter "coreGetFragmentRequest" was null or undefined when calling coreGetFragment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_get_fragment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGetFragmentRequestToJSON(requestParameters['coreGetFragmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGetFragment200ResponseFromJSON(jsonValue));
    }

    /**
     * Return a fragment for inclusion, such as a JavaScript page.
     * Return a fragment for inclusion, such as a JavaScript page.
     */
    async coreGetFragment(requestParameters: CoreGetFragmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGetFragment200Response> {
        const response = await this.coreGetFragmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a translated string - similar to core get_string(), call
     * Return a translated string - similar to core get_string(), call
     */
    async coreGetStringRaw(requestParameters: CoreGetStringOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGetStringRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGetStringRequest',
                'Required parameter "coreGetStringRequest" was null or undefined when calling coreGetString().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_get_string`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGetStringRequestToJSON(requestParameters['coreGetStringRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Return a translated string - similar to core get_string(), call
     * Return a translated string - similar to core get_string(), call
     */
    async coreGetString(requestParameters: CoreGetStringOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGetStringRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return some translated strings - like several core get_string(), calls
     * Return some translated strings - like several core get_string(), calls
     */
    async coreGetStringsRaw(requestParameters: CoreGetStringsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGetStringsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGetStringsRequest',
                'Required parameter "coreGetStringsRequest" was null or undefined when calling coreGetStrings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_get_strings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGetStringsRequestToJSON(requestParameters['coreGetStringsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Return some translated strings - like several core get_string(), calls
     * Return some translated strings - like several core get_string(), calls
     */
    async coreGetStrings(requestParameters: CoreGetStringsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGetStringsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return formatted timestamps
     * Return formatted timestamps
     */
    async coreGetUserDatesRaw(requestParameters: CoreGetUserDatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGetUserDates200Response>> {
        if (requestParameters['coreGetUserDatesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGetUserDatesRequest',
                'Required parameter "coreGetUserDatesRequest" was null or undefined when calling coreGetUserDates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_get_user_dates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGetUserDatesRequestToJSON(requestParameters['coreGetUserDatesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGetUserDates200ResponseFromJSON(jsonValue));
    }

    /**
     * Return formatted timestamps
     * Return formatted timestamps
     */
    async coreGetUserDates(requestParameters: CoreGetUserDatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGetUserDates200Response> {
        const response = await this.coreGetUserDatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create grade categories inside a course gradebook.
     * Create grade categories inside a course gradebook.
     */
    async coreGradesCreateGradecategoriesRaw(requestParameters: CoreGradesCreateGradecategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGradesCreateGradecategories200Response>> {
        if (requestParameters['coreGradesCreateGradecategoriesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradesCreateGradecategoriesRequest',
                'Required parameter "coreGradesCreateGradecategoriesRequest" was null or undefined when calling coreGradesCreateGradecategories().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grades_create_gradecategories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradesCreateGradecategoriesRequestToJSON(requestParameters['coreGradesCreateGradecategoriesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGradesCreateGradecategories200ResponseFromJSON(jsonValue));
    }

    /**
     * Create grade categories inside a course gradebook.
     * Create grade categories inside a course gradebook.
     */
    async coreGradesCreateGradecategories(requestParameters: CoreGradesCreateGradecategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGradesCreateGradecategories200Response> {
        const response = await this.coreGradesCreateGradecategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_grades_get_enrolled_users_for_selector instead. Returns the enrolled users within and map some fields to the returned array of user objects.
     * ** DEPRECATED ** Please do not call this function any more. Use core_grades_get_enrolled_users_for_selector instead. Returns the enrolled users within and map some fields to the returned array of user objects.
     */
    async coreGradesGetEnrolledUsersForSearchWidgetRaw(requestParameters: CoreGradesGetEnrolledUsersForSearchWidgetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGradesGetEnrolledUsersForSearchWidget200Response>> {
        if (requestParameters['coreGradesGetEnrolledUsersForSearchWidgetRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradesGetEnrolledUsersForSearchWidgetRequest',
                'Required parameter "coreGradesGetEnrolledUsersForSearchWidgetRequest" was null or undefined when calling coreGradesGetEnrolledUsersForSearchWidget().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grades_get_enrolled_users_for_search_widget`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradesGetEnrolledUsersForSearchWidgetRequestToJSON(requestParameters['coreGradesGetEnrolledUsersForSearchWidgetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGradesGetEnrolledUsersForSearchWidget200ResponseFromJSON(jsonValue));
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_grades_get_enrolled_users_for_selector instead. Returns the enrolled users within and map some fields to the returned array of user objects.
     * ** DEPRECATED ** Please do not call this function any more. Use core_grades_get_enrolled_users_for_selector instead. Returns the enrolled users within and map some fields to the returned array of user objects.
     */
    async coreGradesGetEnrolledUsersForSearchWidget(requestParameters: CoreGradesGetEnrolledUsersForSearchWidgetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGradesGetEnrolledUsersForSearchWidget200Response> {
        const response = await this.coreGradesGetEnrolledUsersForSearchWidgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the enrolled users within and map some fields to the returned array of user objects.
     * Returns the enrolled users within and map some fields to the returned array of user objects.
     */
    async coreGradesGetEnrolledUsersForSelectorRaw(requestParameters: CoreGradesGetEnrolledUsersForSelectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGradesGetEnrolledUsersForSelector200Response>> {
        if (requestParameters['coreGradesGetEnrolledUsersForSelectorRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradesGetEnrolledUsersForSelectorRequest',
                'Required parameter "coreGradesGetEnrolledUsersForSelectorRequest" was null or undefined when calling coreGradesGetEnrolledUsersForSelector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grades_get_enrolled_users_for_selector`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradesGetEnrolledUsersForSelectorRequestToJSON(requestParameters['coreGradesGetEnrolledUsersForSelectorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGradesGetEnrolledUsersForSelector200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the enrolled users within and map some fields to the returned array of user objects.
     * Returns the enrolled users within and map some fields to the returned array of user objects.
     */
    async coreGradesGetEnrolledUsersForSelector(requestParameters: CoreGradesGetEnrolledUsersForSelectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGradesGetEnrolledUsersForSelector200Response> {
        const response = await this.coreGradesGetEnrolledUsersForSelectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the feedback data for a grade item
     * Get the feedback data for a grade item
     */
    async coreGradesGetFeedbackRaw(requestParameters: CoreGradesGetFeedbackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGradesGetFeedback200Response>> {
        if (requestParameters['coreGradesGetFeedbackRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradesGetFeedbackRequest',
                'Required parameter "coreGradesGetFeedbackRequest" was null or undefined when calling coreGradesGetFeedback().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grades_get_feedback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradesGetFeedbackRequestToJSON(requestParameters['coreGradesGetFeedbackRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGradesGetFeedback200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the feedback data for a grade item
     * Get the feedback data for a grade item
     */
    async coreGradesGetFeedback(requestParameters: CoreGradesGetFeedbackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGradesGetFeedback200Response> {
        const response = await this.coreGradesGetFeedbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the gradable users in a course
     * Returns the gradable users in a course
     */
    async coreGradesGetGradableUsersRaw(requestParameters: CoreGradesGetGradableUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGradesGetGradableUsers200Response>> {
        if (requestParameters['coreGradesGetGradableUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradesGetGradableUsersRequest',
                'Required parameter "coreGradesGetGradableUsersRequest" was null or undefined when calling coreGradesGetGradableUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grades_get_gradable_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradesGetGradableUsersRequestToJSON(requestParameters['coreGradesGetGradableUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGradesGetGradableUsers200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the gradable users in a course
     * Returns the gradable users in a course
     */
    async coreGradesGetGradableUsers(requestParameters: CoreGradesGetGradableUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGradesGetGradableUsers200Response> {
        const response = await this.coreGradesGetGradableUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the grade tree structure for a course
     * Get the grade tree structure for a course
     */
    async coreGradesGetGradeTreeRaw(requestParameters: CoreGradesGetGradeTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompletionMarkCourseSelfCompletedRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompletionMarkCourseSelfCompletedRequest',
                'Required parameter "coreCompletionMarkCourseSelfCompletedRequest" was null or undefined when calling coreGradesGetGradeTree().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grades_get_grade_tree`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompletionMarkCourseSelfCompletedRequestToJSON(requestParameters['coreCompletionMarkCourseSelfCompletedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the grade tree structure for a course
     * Get the grade tree structure for a course
     */
    async coreGradesGetGradeTree(requestParameters: CoreGradesGetGradeTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGradesGetGradeTreeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the gradeitems for a course
     * Get the gradeitems for a course
     */
    async coreGradesGetGradeitemsRaw(requestParameters: CoreGradesGetGradeitemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGradesGetGradeitems200Response>> {
        if (requestParameters['coreCompletionMarkCourseSelfCompletedRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompletionMarkCourseSelfCompletedRequest',
                'Required parameter "coreCompletionMarkCourseSelfCompletedRequest" was null or undefined when calling coreGradesGetGradeitems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grades_get_gradeitems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompletionMarkCourseSelfCompletedRequestToJSON(requestParameters['coreCompletionMarkCourseSelfCompletedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGradesGetGradeitems200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the gradeitems for a course
     * Get the gradeitems for a course
     */
    async coreGradesGetGradeitems(requestParameters: CoreGradesGetGradeitemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGradesGetGradeitems200Response> {
        const response = await this.coreGradesGetGradeitemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     */
    async coreGradesGetGroupsForSearchWidgetRaw(requestParameters: CoreGradesGetGroupsForSearchWidgetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGradesGetGroupsForSearchWidget200Response>> {
        if (requestParameters['coreGradesGetGroupsForSearchWidgetRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradesGetGroupsForSearchWidgetRequest',
                'Required parameter "coreGradesGetGroupsForSearchWidgetRequest" was null or undefined when calling coreGradesGetGroupsForSearchWidget().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grades_get_groups_for_search_widget`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradesGetGroupsForSearchWidgetRequestToJSON(requestParameters['coreGradesGetGroupsForSearchWidgetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGradesGetGroupsForSearchWidget200ResponseFromJSON(jsonValue));
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     */
    async coreGradesGetGroupsForSearchWidget(requestParameters: CoreGradesGetGroupsForSearchWidgetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGradesGetGroupsForSearchWidget200Response> {
        const response = await this.coreGradesGetGroupsForSearchWidgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     */
    async coreGradesGetGroupsForSelectorRaw(requestParameters: CoreGradesGetGroupsForSelectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGradesGetGroupsForSelector200Response>> {
        if (requestParameters['coreGradesGetGroupsForSearchWidgetRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradesGetGroupsForSearchWidgetRequest',
                'Required parameter "coreGradesGetGroupsForSearchWidgetRequest" was null or undefined when calling coreGradesGetGroupsForSelector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grades_get_groups_for_selector`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradesGetGroupsForSearchWidgetRequestToJSON(requestParameters['coreGradesGetGroupsForSearchWidgetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGradesGetGroupsForSelector200ResponseFromJSON(jsonValue));
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
     */
    async coreGradesGetGroupsForSelector(requestParameters: CoreGradesGetGroupsForSelectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGradesGetGroupsForSelector200Response> {
        const response = await this.coreGradesGetGroupsForSelectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the data required to display the grader grading panel for simple grading, creating the grade item if required
     * Fetch the data required to display the grader grading panel for simple grading, creating the grade item if required
     */
    async coreGradesGraderGradingpanelPointFetchRaw(requestParameters: CoreGradesGraderGradingpanelPointFetchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGradesGraderGradingpanelPointFetch200Response>> {
        if (requestParameters['coreGradesGraderGradingpanelPointFetchRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradesGraderGradingpanelPointFetchRequest',
                'Required parameter "coreGradesGraderGradingpanelPointFetchRequest" was null or undefined when calling coreGradesGraderGradingpanelPointFetch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grades_grader_gradingpanel_point_fetch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradesGraderGradingpanelPointFetchRequestToJSON(requestParameters['coreGradesGraderGradingpanelPointFetchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGradesGraderGradingpanelPointFetch200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetch the data required to display the grader grading panel for simple grading, creating the grade item if required
     * Fetch the data required to display the grader grading panel for simple grading, creating the grade item if required
     */
    async coreGradesGraderGradingpanelPointFetch(requestParameters: CoreGradesGraderGradingpanelPointFetchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGradesGraderGradingpanelPointFetch200Response> {
        const response = await this.coreGradesGraderGradingpanelPointFetchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store the data required to display the grader grading panel for simple grading
     * Store the data required to display the grader grading panel for simple grading
     */
    async coreGradesGraderGradingpanelPointStoreRaw(requestParameters: CoreGradesGraderGradingpanelPointStoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGradesGraderGradingpanelPointStore200Response>> {
        if (requestParameters['coreGradesGraderGradingpanelPointStoreRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradesGraderGradingpanelPointStoreRequest',
                'Required parameter "coreGradesGraderGradingpanelPointStoreRequest" was null or undefined when calling coreGradesGraderGradingpanelPointStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grades_grader_gradingpanel_point_store`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradesGraderGradingpanelPointStoreRequestToJSON(requestParameters['coreGradesGraderGradingpanelPointStoreRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGradesGraderGradingpanelPointStore200ResponseFromJSON(jsonValue));
    }

    /**
     * Store the data required to display the grader grading panel for simple grading
     * Store the data required to display the grader grading panel for simple grading
     */
    async coreGradesGraderGradingpanelPointStore(requestParameters: CoreGradesGraderGradingpanelPointStoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGradesGraderGradingpanelPointStore200Response> {
        const response = await this.coreGradesGraderGradingpanelPointStoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the data required to display the grader grading panel for scale-based grading, creating the grade item if required
     * Fetch the data required to display the grader grading panel for scale-based grading, creating the grade item if required
     */
    async coreGradesGraderGradingpanelScaleFetchRaw(requestParameters: CoreGradesGraderGradingpanelScaleFetchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGradesGraderGradingpanelScaleFetch200Response>> {
        if (requestParameters['coreGradesGraderGradingpanelScaleFetchRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradesGraderGradingpanelScaleFetchRequest',
                'Required parameter "coreGradesGraderGradingpanelScaleFetchRequest" was null or undefined when calling coreGradesGraderGradingpanelScaleFetch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grades_grader_gradingpanel_scale_fetch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradesGraderGradingpanelScaleFetchRequestToJSON(requestParameters['coreGradesGraderGradingpanelScaleFetchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGradesGraderGradingpanelScaleFetch200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetch the data required to display the grader grading panel for scale-based grading, creating the grade item if required
     * Fetch the data required to display the grader grading panel for scale-based grading, creating the grade item if required
     */
    async coreGradesGraderGradingpanelScaleFetch(requestParameters: CoreGradesGraderGradingpanelScaleFetchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGradesGraderGradingpanelScaleFetch200Response> {
        const response = await this.coreGradesGraderGradingpanelScaleFetchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store the data required to display the grader grading panel for scale-based grading
     * Store the data required to display the grader grading panel for scale-based grading
     */
    async coreGradesGraderGradingpanelScaleStoreRaw(requestParameters: CoreGradesGraderGradingpanelScaleStoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGradesGraderGradingpanelScaleStore200Response>> {
        if (requestParameters['coreGradesGraderGradingpanelScaleStoreRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradesGraderGradingpanelScaleStoreRequest',
                'Required parameter "coreGradesGraderGradingpanelScaleStoreRequest" was null or undefined when calling coreGradesGraderGradingpanelScaleStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grades_grader_gradingpanel_scale_store`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradesGraderGradingpanelScaleStoreRequestToJSON(requestParameters['coreGradesGraderGradingpanelScaleStoreRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGradesGraderGradingpanelScaleStore200ResponseFromJSON(jsonValue));
    }

    /**
     * Store the data required to display the grader grading panel for scale-based grading
     * Store the data required to display the grader grading panel for scale-based grading
     */
    async coreGradesGraderGradingpanelScaleStore(requestParameters: CoreGradesGraderGradingpanelScaleStoreOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGradesGraderGradingpanelScaleStore200Response> {
        const response = await this.coreGradesGraderGradingpanelScaleStoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a grade item and associated student grades.
     * Update a grade item and associated student grades.
     */
    async coreGradesUpdateGradesRaw(requestParameters: CoreGradesUpdateGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGradesUpdateGradesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradesUpdateGradesRequest',
                'Required parameter "coreGradesUpdateGradesRequest" was null or undefined when calling coreGradesUpdateGrades().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grades_update_grades`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradesUpdateGradesRequestToJSON(requestParameters['coreGradesUpdateGradesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update a grade item and associated student grades.
     * Update a grade item and associated student grades.
     */
    async coreGradesUpdateGrades(requestParameters: CoreGradesUpdateGradesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGradesUpdateGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get grading definitions
     * Get grading definitions
     */
    async coreGradingGetDefinitionsRaw(requestParameters: CoreGradingGetDefinitionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGradingGetDefinitions200Response>> {
        if (requestParameters['coreGradingGetDefinitionsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradingGetDefinitionsRequest',
                'Required parameter "coreGradingGetDefinitionsRequest" was null or undefined when calling coreGradingGetDefinitions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grading_get_definitions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradingGetDefinitionsRequestToJSON(requestParameters['coreGradingGetDefinitionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGradingGetDefinitions200ResponseFromJSON(jsonValue));
    }

    /**
     * Get grading definitions
     * Get grading definitions
     */
    async coreGradingGetDefinitions(requestParameters: CoreGradingGetDefinitionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGradingGetDefinitions200Response> {
        const response = await this.coreGradingGetDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get grading form instances
     * Get grading form instances
     */
    async coreGradingGetGradingformInstancesRaw(requestParameters: CoreGradingGetGradingformInstancesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGradingGetGradingformInstances200Response>> {
        if (requestParameters['coreGradingGetGradingformInstancesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradingGetGradingformInstancesRequest',
                'Required parameter "coreGradingGetGradingformInstancesRequest" was null or undefined when calling coreGradingGetGradingformInstances().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grading_get_gradingform_instances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradingGetGradingformInstancesRequestToJSON(requestParameters['coreGradingGetGradingformInstancesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGradingGetGradingformInstances200ResponseFromJSON(jsonValue));
    }

    /**
     * Get grading form instances
     * Get grading form instances
     */
    async coreGradingGetGradingformInstances(requestParameters: CoreGradingGetGradingformInstancesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGradingGetGradingformInstances200Response> {
        const response = await this.coreGradingGetGradingformInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save grading definitions
     * Save grading definitions
     */
    async coreGradingSaveDefinitionsRaw(requestParameters: CoreGradingSaveDefinitionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGradingSaveDefinitionsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradingSaveDefinitionsRequest',
                'Required parameter "coreGradingSaveDefinitionsRequest" was null or undefined when calling coreGradingSaveDefinitions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_grading_save_definitions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradingSaveDefinitionsRequestToJSON(requestParameters['coreGradingSaveDefinitionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Save grading definitions
     * Save grading definitions
     */
    async coreGradingSaveDefinitions(requestParameters: CoreGradingSaveDefinitionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGradingSaveDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds group members.
     * Adds group members.
     */
    async coreGroupAddGroupMembersRaw(requestParameters: CoreGroupAddGroupMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGroupAddGroupMembersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupAddGroupMembersRequest',
                'Required parameter "coreGroupAddGroupMembersRequest" was null or undefined when calling coreGroupAddGroupMembers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_add_group_members`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupAddGroupMembersRequestToJSON(requestParameters['coreGroupAddGroupMembersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Adds group members.
     * Adds group members.
     */
    async coreGroupAddGroupMembers(requestParameters: CoreGroupAddGroupMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGroupAddGroupMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assing groups from groupings
     * Assing groups from groupings
     */
    async coreGroupAssignGroupingRaw(requestParameters: CoreGroupAssignGroupingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGroupAssignGroupingRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupAssignGroupingRequest',
                'Required parameter "coreGroupAssignGroupingRequest" was null or undefined when calling coreGroupAssignGrouping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_assign_grouping`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupAssignGroupingRequestToJSON(requestParameters['coreGroupAssignGroupingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Assing groups from groupings
     * Assing groups from groupings
     */
    async coreGroupAssignGrouping(requestParameters: CoreGroupAssignGroupingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGroupAssignGroupingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new groupings
     * Creates new groupings
     */
    async coreGroupCreateGroupingsRaw(requestParameters: CoreGroupCreateGroupingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGroupCreateGroupingsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupCreateGroupingsRequest',
                'Required parameter "coreGroupCreateGroupingsRequest" was null or undefined when calling coreGroupCreateGroupings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_create_groupings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupCreateGroupingsRequestToJSON(requestParameters['coreGroupCreateGroupingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates new groupings
     * Creates new groupings
     */
    async coreGroupCreateGroupings(requestParameters: CoreGroupCreateGroupingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGroupCreateGroupingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates new groups.
     * Creates new groups.
     */
    async coreGroupCreateGroupsRaw(requestParameters: CoreGroupCreateGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGroupCreateGroupsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupCreateGroupsRequest',
                'Required parameter "coreGroupCreateGroupsRequest" was null or undefined when calling coreGroupCreateGroups().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_create_groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupCreateGroupsRequestToJSON(requestParameters['coreGroupCreateGroupsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates new groups.
     * Creates new groups.
     */
    async coreGroupCreateGroups(requestParameters: CoreGroupCreateGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGroupCreateGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes group members.
     * Deletes group members.
     */
    async coreGroupDeleteGroupMembersRaw(requestParameters: CoreGroupDeleteGroupMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGroupDeleteGroupMembersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupDeleteGroupMembersRequest',
                'Required parameter "coreGroupDeleteGroupMembersRequest" was null or undefined when calling coreGroupDeleteGroupMembers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_delete_group_members`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupDeleteGroupMembersRequestToJSON(requestParameters['coreGroupDeleteGroupMembersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes group members.
     * Deletes group members.
     */
    async coreGroupDeleteGroupMembers(requestParameters: CoreGroupDeleteGroupMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGroupDeleteGroupMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes all specified groupings.
     * Deletes all specified groupings.
     */
    async coreGroupDeleteGroupingsRaw(requestParameters: CoreGroupDeleteGroupingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGroupDeleteGroupingsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupDeleteGroupingsRequest',
                'Required parameter "coreGroupDeleteGroupingsRequest" was null or undefined when calling coreGroupDeleteGroupings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_delete_groupings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupDeleteGroupingsRequestToJSON(requestParameters['coreGroupDeleteGroupingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes all specified groupings.
     * Deletes all specified groupings.
     */
    async coreGroupDeleteGroupings(requestParameters: CoreGroupDeleteGroupingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGroupDeleteGroupingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes all specified groups.
     * Deletes all specified groups.
     */
    async coreGroupDeleteGroupsRaw(requestParameters: CoreGroupDeleteGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGroupDeleteGroupsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupDeleteGroupsRequest',
                'Required parameter "coreGroupDeleteGroupsRequest" was null or undefined when calling coreGroupDeleteGroups().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_delete_groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupDeleteGroupsRequestToJSON(requestParameters['coreGroupDeleteGroupsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes all specified groups.
     * Deletes all specified groups.
     */
    async coreGroupDeleteGroups(requestParameters: CoreGroupDeleteGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGroupDeleteGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of groups that the user is allowed to access within the specified activity.
     * Gets a list of groups that the user is allowed to access within the specified activity.
     */
    async coreGroupGetActivityAllowedGroupsRaw(requestParameters: CoreGroupGetActivityAllowedGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGroupGetActivityAllowedGroups200Response>> {
        if (requestParameters['coreGroupGetActivityAllowedGroupsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupGetActivityAllowedGroupsRequest',
                'Required parameter "coreGroupGetActivityAllowedGroupsRequest" was null or undefined when calling coreGroupGetActivityAllowedGroups().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_get_activity_allowed_groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupGetActivityAllowedGroupsRequestToJSON(requestParameters['coreGroupGetActivityAllowedGroupsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGroupGetActivityAllowedGroups200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of groups that the user is allowed to access within the specified activity.
     * Gets a list of groups that the user is allowed to access within the specified activity.
     */
    async coreGroupGetActivityAllowedGroups(requestParameters: CoreGroupGetActivityAllowedGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGroupGetActivityAllowedGroups200Response> {
        const response = await this.coreGroupGetActivityAllowedGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns effective groupmode used in a given activity.
     * Returns effective groupmode used in a given activity.
     */
    async coreGroupGetActivityGroupmodeRaw(requestParameters: CoreGroupGetActivityGroupmodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGroupGetActivityGroupmode200Response>> {
        if (requestParameters['coreGroupGetActivityGroupmodeRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupGetActivityGroupmodeRequest',
                'Required parameter "coreGroupGetActivityGroupmodeRequest" was null or undefined when calling coreGroupGetActivityGroupmode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_get_activity_groupmode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupGetActivityGroupmodeRequestToJSON(requestParameters['coreGroupGetActivityGroupmodeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGroupGetActivityGroupmode200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns effective groupmode used in a given activity.
     * Returns effective groupmode used in a given activity.
     */
    async coreGroupGetActivityGroupmode(requestParameters: CoreGroupGetActivityGroupmodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGroupGetActivityGroupmode200Response> {
        const response = await this.coreGroupGetActivityGroupmodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all groupings in specified course.
     * Returns all groupings in specified course.
     */
    async coreGroupGetCourseGroupingsRaw(requestParameters: CoreGroupGetCourseGroupingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGroupGetCourseGroupingsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupGetCourseGroupingsRequest',
                'Required parameter "coreGroupGetCourseGroupingsRequest" was null or undefined when calling coreGroupGetCourseGroupings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_get_course_groupings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupGetCourseGroupingsRequestToJSON(requestParameters['coreGroupGetCourseGroupingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns all groupings in specified course.
     * Returns all groupings in specified course.
     */
    async coreGroupGetCourseGroupings(requestParameters: CoreGroupGetCourseGroupingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGroupGetCourseGroupingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all groups in specified course.
     * Returns all groups in specified course.
     */
    async coreGroupGetCourseGroupsRaw(requestParameters: CoreGroupGetCourseGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGroupGetCourseGroupingsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupGetCourseGroupingsRequest',
                'Required parameter "coreGroupGetCourseGroupingsRequest" was null or undefined when calling coreGroupGetCourseGroups().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_get_course_groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupGetCourseGroupingsRequestToJSON(requestParameters['coreGroupGetCourseGroupingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns all groups in specified course.
     * Returns all groups in specified course.
     */
    async coreGroupGetCourseGroups(requestParameters: CoreGroupGetCourseGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGroupGetCourseGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all groups in specified course for the specified user.
     * Returns all groups in specified course for the specified user.
     */
    async coreGroupGetCourseUserGroupsRaw(requestParameters: CoreGroupGetCourseUserGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGroupGetCourseUserGroups200Response>> {
        if (requestParameters['coreGroupGetCourseUserGroupsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupGetCourseUserGroupsRequest',
                'Required parameter "coreGroupGetCourseUserGroupsRequest" was null or undefined when calling coreGroupGetCourseUserGroups().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_get_course_user_groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupGetCourseUserGroupsRequestToJSON(requestParameters['coreGroupGetCourseUserGroupsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGroupGetCourseUserGroups200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all groups in specified course for the specified user.
     * Returns all groups in specified course for the specified user.
     */
    async coreGroupGetCourseUserGroups(requestParameters: CoreGroupGetCourseUserGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGroupGetCourseUserGroups200Response> {
        const response = await this.coreGroupGetCourseUserGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns group members.
     * Returns group members.
     */
    async coreGroupGetGroupMembersRaw(requestParameters: CoreGroupGetGroupMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGroupGetGroupMembersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupGetGroupMembersRequest',
                'Required parameter "coreGroupGetGroupMembersRequest" was null or undefined when calling coreGroupGetGroupMembers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_get_group_members`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupGetGroupMembersRequestToJSON(requestParameters['coreGroupGetGroupMembersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns group members.
     * Returns group members.
     */
    async coreGroupGetGroupMembers(requestParameters: CoreGroupGetGroupMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGroupGetGroupMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns groupings details.
     * Returns groupings details.
     */
    async coreGroupGetGroupingsRaw(requestParameters: CoreGroupGetGroupingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGroupGetGroupingsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupGetGroupingsRequest',
                'Required parameter "coreGroupGetGroupingsRequest" was null or undefined when calling coreGroupGetGroupings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_get_groupings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupGetGroupingsRequestToJSON(requestParameters['coreGroupGetGroupingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns groupings details.
     * Returns groupings details.
     */
    async coreGroupGetGroupings(requestParameters: CoreGroupGetGroupingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGroupGetGroupingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns group details.
     * Returns group details.
     */
    async coreGroupGetGroupsRaw(requestParameters: CoreGroupGetGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGroupGetGroupMembersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupGetGroupMembersRequest',
                'Required parameter "coreGroupGetGroupMembersRequest" was null or undefined when calling coreGroupGetGroups().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_get_groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupGetGroupMembersRequestToJSON(requestParameters['coreGroupGetGroupMembersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns group details.
     * Returns group details.
     */
    async coreGroupGetGroups(requestParameters: CoreGroupGetGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGroupGetGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the group/(s) for a course
     * Get the group/(s) for a course
     */
    async coreGroupGetGroupsForSelectorRaw(requestParameters: CoreGroupGetGroupsForSelectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreGradesGetGroupsForSelector200Response>> {
        if (requestParameters['coreGradesGetGroupsForSearchWidgetRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGradesGetGroupsForSearchWidgetRequest',
                'Required parameter "coreGradesGetGroupsForSearchWidgetRequest" was null or undefined when calling coreGroupGetGroupsForSelector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_get_groups_for_selector`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGradesGetGroupsForSearchWidgetRequestToJSON(requestParameters['coreGradesGetGroupsForSearchWidgetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreGradesGetGroupsForSelector200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the group/(s) for a course
     * Get the group/(s) for a course
     */
    async coreGroupGetGroupsForSelector(requestParameters: CoreGroupGetGroupsForSelectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreGradesGetGroupsForSelector200Response> {
        const response = await this.coreGroupGetGroupsForSelectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unassing groups from groupings
     * Unassing groups from groupings
     */
    async coreGroupUnassignGroupingRaw(requestParameters: CoreGroupUnassignGroupingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGroupUnassignGroupingRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupUnassignGroupingRequest',
                'Required parameter "coreGroupUnassignGroupingRequest" was null or undefined when calling coreGroupUnassignGrouping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_unassign_grouping`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupUnassignGroupingRequestToJSON(requestParameters['coreGroupUnassignGroupingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Unassing groups from groupings
     * Unassing groups from groupings
     */
    async coreGroupUnassignGrouping(requestParameters: CoreGroupUnassignGroupingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGroupUnassignGroupingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates existing groupings
     * Updates existing groupings
     */
    async coreGroupUpdateGroupingsRaw(requestParameters: CoreGroupUpdateGroupingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGroupUpdateGroupingsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupUpdateGroupingsRequest',
                'Required parameter "coreGroupUpdateGroupingsRequest" was null or undefined when calling coreGroupUpdateGroupings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_update_groupings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupUpdateGroupingsRequestToJSON(requestParameters['coreGroupUpdateGroupingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates existing groupings
     * Updates existing groupings
     */
    async coreGroupUpdateGroupings(requestParameters: CoreGroupUpdateGroupingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGroupUpdateGroupingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates existing groups.
     * Updates existing groups.
     */
    async coreGroupUpdateGroupsRaw(requestParameters: CoreGroupUpdateGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreGroupUpdateGroupsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreGroupUpdateGroupsRequest',
                'Required parameter "coreGroupUpdateGroupsRequest" was null or undefined when calling coreGroupUpdateGroups().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_group_update_groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreGroupUpdateGroupsRequestToJSON(requestParameters['coreGroupUpdateGroupsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates existing groups.
     * Updates existing groups.
     */
    async coreGroupUpdateGroups(requestParameters: CoreGroupUpdateGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreGroupUpdateGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the H5P file cleaned for Mobile App.
     * Get the H5P file cleaned for Mobile App.
     */
    async coreH5pGetTrustedH5pFileRaw(requestParameters: CoreH5pGetTrustedH5pFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreH5pGetTrustedH5pFile200Response>> {
        if (requestParameters['coreH5pGetTrustedH5pFileRequest'] == null) {
            throw new runtime.RequiredError(
                'coreH5pGetTrustedH5pFileRequest',
                'Required parameter "coreH5pGetTrustedH5pFileRequest" was null or undefined when calling coreH5pGetTrustedH5pFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_h5p_get_trusted_h5p_file`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreH5pGetTrustedH5pFileRequestToJSON(requestParameters['coreH5pGetTrustedH5pFileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreH5pGetTrustedH5pFile200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the H5P file cleaned for Mobile App.
     * Get the H5P file cleaned for Mobile App.
     */
    async coreH5pGetTrustedH5pFile(requestParameters: CoreH5pGetTrustedH5pFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreH5pGetTrustedH5pFile200Response> {
        const response = await this.coreH5pGetTrustedH5pFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Blocks a user
     * Blocks a user
     */
    async coreMessageBlockUserRaw(requestParameters: CoreMessageBlockUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageBlockUserRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageBlockUserRequest',
                'Required parameter "coreMessageBlockUserRequest" was null or undefined when calling coreMessageBlockUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_block_user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageBlockUserRequestToJSON(requestParameters['coreMessageBlockUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Blocks a user
     * Blocks a user
     */
    async coreMessageBlockUser(requestParameters: CoreMessageBlockUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageBlockUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Confirms a contact request
     * Confirms a contact request
     */
    async coreMessageConfirmContactRequestRaw(requestParameters: CoreMessageConfirmContactRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageConfirmContactRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageConfirmContactRequestRequest',
                'Required parameter "coreMessageConfirmContactRequestRequest" was null or undefined when calling coreMessageConfirmContactRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_confirm_contact_request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageConfirmContactRequestRequestToJSON(requestParameters['coreMessageConfirmContactRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Confirms a contact request
     * Confirms a contact request
     */
    async coreMessageConfirmContactRequest(requestParameters: CoreMessageConfirmContactRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageConfirmContactRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a contact request
     * Creates a contact request
     */
    async coreMessageCreateContactRequestRaw(requestParameters: CoreMessageCreateContactRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageCreateContactRequest200Response>> {
        if (requestParameters['coreMessageCreateContactRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageCreateContactRequestRequest',
                'Required parameter "coreMessageCreateContactRequestRequest" was null or undefined when calling coreMessageCreateContactRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_create_contact_request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageCreateContactRequestRequestToJSON(requestParameters['coreMessageCreateContactRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageCreateContactRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a contact request
     * Creates a contact request
     */
    async coreMessageCreateContactRequest(requestParameters: CoreMessageCreateContactRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageCreateContactRequest200Response> {
        const response = await this.coreMessageCreateContactRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the template data for searching for messages
     * Retrieve the template data for searching for messages
     */
    async coreMessageDataForMessageareaSearchMessagesRaw(requestParameters: CoreMessageDataForMessageareaSearchMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageDataForMessageareaSearchMessages200Response>> {
        if (requestParameters['coreMessageDataForMessageareaSearchMessagesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageDataForMessageareaSearchMessagesRequest',
                'Required parameter "coreMessageDataForMessageareaSearchMessagesRequest" was null or undefined when calling coreMessageDataForMessageareaSearchMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_data_for_messagearea_search_messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageDataForMessageareaSearchMessagesRequestToJSON(requestParameters['coreMessageDataForMessageareaSearchMessagesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageDataForMessageareaSearchMessages200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the template data for searching for messages
     * Retrieve the template data for searching for messages
     */
    async coreMessageDataForMessageareaSearchMessages(requestParameters: CoreMessageDataForMessageareaSearchMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageDataForMessageareaSearchMessages200Response> {
        const response = await this.coreMessageDataForMessageareaSearchMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Declines a contact request
     * Declines a contact request
     */
    async coreMessageDeclineContactRequestRaw(requestParameters: CoreMessageDeclineContactRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageCreateContactRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageCreateContactRequestRequest',
                'Required parameter "coreMessageCreateContactRequestRequest" was null or undefined when calling coreMessageDeclineContactRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_decline_contact_request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageCreateContactRequestRequestToJSON(requestParameters['coreMessageCreateContactRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Declines a contact request
     * Declines a contact request
     */
    async coreMessageDeclineContactRequest(requestParameters: CoreMessageDeclineContactRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageDeclineContactRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove contacts from the contact list
     * Remove contacts from the contact list
     */
    async coreMessageDeleteContactsRaw(requestParameters: CoreMessageDeleteContactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageDeleteContactsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageDeleteContactsRequest',
                'Required parameter "coreMessageDeleteContactsRequest" was null or undefined when calling coreMessageDeleteContacts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_delete_contacts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageDeleteContactsRequestToJSON(requestParameters['coreMessageDeleteContactsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove contacts from the contact list
     * Remove contacts from the contact list
     */
    async coreMessageDeleteContacts(requestParameters: CoreMessageDeleteContactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageDeleteContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a list of conversations.
     * Deletes a list of conversations.
     */
    async coreMessageDeleteConversationsByIdRaw(requestParameters: CoreMessageDeleteConversationsByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageDeleteConversationsByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageDeleteConversationsByIdRequest',
                'Required parameter "coreMessageDeleteConversationsByIdRequest" was null or undefined when calling coreMessageDeleteConversationsById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_delete_conversations_by_id`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageDeleteConversationsByIdRequestToJSON(requestParameters['coreMessageDeleteConversationsByIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes a list of conversations.
     * Deletes a list of conversations.
     */
    async coreMessageDeleteConversationsById(requestParameters: CoreMessageDeleteConversationsByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageDeleteConversationsByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a message.
     * Deletes a message.
     */
    async coreMessageDeleteMessageRaw(requestParameters: CoreMessageDeleteMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageDeleteMessage200Response>> {
        if (requestParameters['coreMessageDeleteMessageRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageDeleteMessageRequest',
                'Required parameter "coreMessageDeleteMessageRequest" was null or undefined when calling coreMessageDeleteMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_delete_message`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageDeleteMessageRequestToJSON(requestParameters['coreMessageDeleteMessageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageDeleteMessage200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a message.
     * Deletes a message.
     */
    async coreMessageDeleteMessage(requestParameters: CoreMessageDeleteMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageDeleteMessage200Response> {
        const response = await this.coreMessageDeleteMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a message for all users.
     * Deletes a message for all users.
     */
    async coreMessageDeleteMessageForAllUsersRaw(requestParameters: CoreMessageDeleteMessageForAllUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageDeleteMessageForAllUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageDeleteMessageForAllUsersRequest',
                'Required parameter "coreMessageDeleteMessageForAllUsersRequest" was null or undefined when calling coreMessageDeleteMessageForAllUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_delete_message_for_all_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageDeleteMessageForAllUsersRequestToJSON(requestParameters['coreMessageDeleteMessageForAllUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes a message for all users.
     * Deletes a message for all users.
     */
    async coreMessageDeleteMessageForAllUsers(requestParameters: CoreMessageDeleteMessageForAllUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageDeleteMessageForAllUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of users blocked
     * Retrieve a list of users blocked
     */
    async coreMessageGetBlockedUsersRaw(requestParameters: CoreMessageGetBlockedUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageGetBlockedUsers200Response>> {
        if (requestParameters['coreMessageGetBlockedUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetBlockedUsersRequest',
                'Required parameter "coreMessageGetBlockedUsersRequest" was null or undefined when calling coreMessageGetBlockedUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_blocked_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetBlockedUsersRequestToJSON(requestParameters['coreMessageGetBlockedUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageGetBlockedUsers200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of users blocked
     * Retrieve a list of users blocked
     */
    async coreMessageGetBlockedUsers(requestParameters: CoreMessageGetBlockedUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageGetBlockedUsers200Response> {
        const response = await this.coreMessageGetBlockedUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns contact requests for a user
     * Returns contact requests for a user
     */
    async coreMessageGetContactRequestsRaw(requestParameters: CoreMessageGetContactRequestsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageGetContactRequestsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetContactRequestsRequest',
                'Required parameter "coreMessageGetContactRequestsRequest" was null or undefined when calling coreMessageGetContactRequests().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_contact_requests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetContactRequestsRequestToJSON(requestParameters['coreMessageGetContactRequestsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns contact requests for a user
     * Returns contact requests for a user
     */
    async coreMessageGetContactRequests(requestParameters: CoreMessageGetContactRequestsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageGetContactRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a conversation for a user
     * Retrieve a conversation for a user
     */
    async coreMessageGetConversationRaw(requestParameters: CoreMessageGetConversationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageGetConversation200Response>> {
        if (requestParameters['coreMessageGetConversationRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetConversationRequest',
                'Required parameter "coreMessageGetConversationRequest" was null or undefined when calling coreMessageGetConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_conversation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetConversationRequestToJSON(requestParameters['coreMessageGetConversationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageGetConversation200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a conversation for a user
     * Retrieve a conversation for a user
     */
    async coreMessageGetConversation(requestParameters: CoreMessageGetConversationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageGetConversation200Response> {
        const response = await this.coreMessageGetConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a conversation for a user between another user
     * Retrieve a conversation for a user between another user
     */
    async coreMessageGetConversationBetweenUsersRaw(requestParameters: CoreMessageGetConversationBetweenUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageGetConversationBetweenUsers200Response>> {
        if (requestParameters['coreMessageGetConversationBetweenUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetConversationBetweenUsersRequest',
                'Required parameter "coreMessageGetConversationBetweenUsersRequest" was null or undefined when calling coreMessageGetConversationBetweenUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_conversation_between_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetConversationBetweenUsersRequestToJSON(requestParameters['coreMessageGetConversationBetweenUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageGetConversationBetweenUsers200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a conversation for a user between another user
     * Retrieve a conversation for a user between another user
     */
    async coreMessageGetConversationBetweenUsers(requestParameters: CoreMessageGetConversationBetweenUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageGetConversationBetweenUsers200Response> {
        const response = await this.coreMessageGetConversationBetweenUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of conversation counts, indexed by type.
     * Retrieve a list of conversation counts, indexed by type.
     */
    async coreMessageGetConversationCountsRaw(requestParameters: CoreMessageGetConversationCountsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageGetConversationCounts200Response>> {
        if (requestParameters['coreMessageGetConversationCountsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetConversationCountsRequest',
                'Required parameter "coreMessageGetConversationCountsRequest" was null or undefined when calling coreMessageGetConversationCounts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_conversation_counts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetConversationCountsRequestToJSON(requestParameters['coreMessageGetConversationCountsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageGetConversationCounts200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of conversation counts, indexed by type.
     * Retrieve a list of conversation counts, indexed by type.
     */
    async coreMessageGetConversationCounts(requestParameters: CoreMessageGetConversationCountsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageGetConversationCounts200Response> {
        const response = await this.coreMessageGetConversationCountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of members in a conversation
     * Retrieve a list of members in a conversation
     */
    async coreMessageGetConversationMembersRaw(requestParameters: CoreMessageGetConversationMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageGetConversationMembersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetConversationMembersRequest',
                'Required parameter "coreMessageGetConversationMembersRequest" was null or undefined when calling coreMessageGetConversationMembers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_conversation_members`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetConversationMembersRequestToJSON(requestParameters['coreMessageGetConversationMembersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve a list of members in a conversation
     * Retrieve a list of members in a conversation
     */
    async coreMessageGetConversationMembers(requestParameters: CoreMessageGetConversationMembersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageGetConversationMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the conversation messages and relevant member information
     * Retrieve the conversation messages and relevant member information
     */
    async coreMessageGetConversationMessagesRaw(requestParameters: CoreMessageGetConversationMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageGetConversationMessages200Response>> {
        if (requestParameters['coreMessageGetConversationMessagesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetConversationMessagesRequest',
                'Required parameter "coreMessageGetConversationMessagesRequest" was null or undefined when calling coreMessageGetConversationMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_conversation_messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetConversationMessagesRequestToJSON(requestParameters['coreMessageGetConversationMessagesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageGetConversationMessages200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the conversation messages and relevant member information
     * Retrieve the conversation messages and relevant member information
     */
    async coreMessageGetConversationMessages(requestParameters: CoreMessageGetConversationMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageGetConversationMessages200Response> {
        const response = await this.coreMessageGetConversationMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of conversations for a user
     * Retrieve a list of conversations for a user
     */
    async coreMessageGetConversationsRaw(requestParameters: CoreMessageGetConversationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageGetConversations200Response>> {
        if (requestParameters['coreMessageGetConversationsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetConversationsRequest',
                'Required parameter "coreMessageGetConversationsRequest" was null or undefined when calling coreMessageGetConversations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_conversations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetConversationsRequestToJSON(requestParameters['coreMessageGetConversationsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageGetConversations200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of conversations for a user
     * Retrieve a list of conversations for a user
     */
    async coreMessageGetConversations(requestParameters: CoreMessageGetConversationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageGetConversations200Response> {
        const response = await this.coreMessageGetConversationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a user message profiles
     * Retrieve a user message profiles
     */
    async coreMessageGetMemberInfoRaw(requestParameters: CoreMessageGetMemberInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageGetMemberInfoRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetMemberInfoRequest',
                'Required parameter "coreMessageGetMemberInfoRequest" was null or undefined when calling coreMessageGetMemberInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_member_info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetMemberInfoRequestToJSON(requestParameters['coreMessageGetMemberInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve a user message profiles
     * Retrieve a user message profiles
     */
    async coreMessageGetMemberInfo(requestParameters: CoreMessageGetMemberInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageGetMemberInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a message processor
     * Get a message processor
     */
    async coreMessageGetMessageProcessorRaw(requestParameters: CoreMessageGetMessageProcessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageGetMessageProcessor200Response>> {
        if (requestParameters['coreMessageGetMessageProcessorRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetMessageProcessorRequest',
                'Required parameter "coreMessageGetMessageProcessorRequest" was null or undefined when calling coreMessageGetMessageProcessor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_message_processor`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetMessageProcessorRequestToJSON(requestParameters['coreMessageGetMessageProcessorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageGetMessageProcessor200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a message processor
     * Get a message processor
     */
    async coreMessageGetMessageProcessor(requestParameters: CoreMessageGetMessageProcessorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageGetMessageProcessor200Response> {
        const response = await this.coreMessageGetMessageProcessorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of messages sent and received by a user (conversations, notifications or both)
     * Retrieve a list of messages sent and received by a user (conversations, notifications or both)
     */
    async coreMessageGetMessagesRaw(requestParameters: CoreMessageGetMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageGetMessages200Response>> {
        if (requestParameters['coreMessageGetMessagesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetMessagesRequest',
                'Required parameter "coreMessageGetMessagesRequest" was null or undefined when calling coreMessageGetMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetMessagesRequestToJSON(requestParameters['coreMessageGetMessagesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageGetMessages200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of messages sent and received by a user (conversations, notifications or both)
     * Retrieve a list of messages sent and received by a user (conversations, notifications or both)
     */
    async coreMessageGetMessages(requestParameters: CoreMessageGetMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageGetMessages200Response> {
        const response = await this.coreMessageGetMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the number of received contact requests
     * Gets the number of received contact requests
     */
    async coreMessageGetReceivedContactRequestsCountRaw(requestParameters: CoreMessageGetReceivedContactRequestsCountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageGetReceivedContactRequestsCountRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetReceivedContactRequestsCountRequest',
                'Required parameter "coreMessageGetReceivedContactRequestsCountRequest" was null or undefined when calling coreMessageGetReceivedContactRequestsCount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_received_contact_requests_count`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetReceivedContactRequestsCountRequestToJSON(requestParameters['coreMessageGetReceivedContactRequestsCountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets the number of received contact requests
     * Gets the number of received contact requests
     */
    async coreMessageGetReceivedContactRequestsCount(requestParameters: CoreMessageGetReceivedContactRequestsCountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageGetReceivedContactRequestsCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a self-conversation for a user
     * Retrieve a self-conversation for a user
     */
    async coreMessageGetSelfConversationRaw(requestParameters: CoreMessageGetSelfConversationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageGetConversationBetweenUsers200Response>> {
        if (requestParameters['coreMessageGetSelfConversationRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetSelfConversationRequest',
                'Required parameter "coreMessageGetSelfConversationRequest" was null or undefined when calling coreMessageGetSelfConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_self_conversation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetSelfConversationRequestToJSON(requestParameters['coreMessageGetSelfConversationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageGetConversationBetweenUsers200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a self-conversation for a user
     * Retrieve a self-conversation for a user
     */
    async coreMessageGetSelfConversation(requestParameters: CoreMessageGetSelfConversationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageGetConversationBetweenUsers200Response> {
        const response = await this.coreMessageGetSelfConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of unread conversation counts, indexed by type.
     * Retrieve a list of unread conversation counts, indexed by type.
     */
    async coreMessageGetUnreadConversationCountsRaw(requestParameters: CoreMessageGetUnreadConversationCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageGetUnreadConversationCounts200Response>> {
        if (requestParameters['coreMessageGetConversationCountsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetConversationCountsRequest',
                'Required parameter "coreMessageGetConversationCountsRequest" was null or undefined when calling coreMessageGetUnreadConversationCounts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_unread_conversation_counts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetConversationCountsRequestToJSON(requestParameters['coreMessageGetConversationCountsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageGetUnreadConversationCounts200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of unread conversation counts, indexed by type.
     * Retrieve a list of unread conversation counts, indexed by type.
     */
    async coreMessageGetUnreadConversationCounts(requestParameters: CoreMessageGetUnreadConversationCountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageGetUnreadConversationCounts200Response> {
        const response = await this.coreMessageGetUnreadConversationCountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the count of unread conversations for a given user
     * Retrieve the count of unread conversations for a given user
     */
    async coreMessageGetUnreadConversationsCountRaw(requestParameters: CoreMessageGetUnreadConversationsCountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageGetUnreadConversationsCountRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetUnreadConversationsCountRequest',
                'Required parameter "coreMessageGetUnreadConversationsCountRequest" was null or undefined when calling coreMessageGetUnreadConversationsCount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_unread_conversations_count`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetUnreadConversationsCountRequestToJSON(requestParameters['coreMessageGetUnreadConversationsCountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve the count of unread conversations for a given user
     * Retrieve the count of unread conversations for a given user
     */
    async coreMessageGetUnreadConversationsCount(requestParameters: CoreMessageGetUnreadConversationsCountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageGetUnreadConversationsCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get number of unread notifications.
     * Get number of unread notifications.
     */
    async coreMessageGetUnreadNotificationCountRaw(requestParameters: CoreMessageGetUnreadNotificationCountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageGetUnreadNotificationCountRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetUnreadNotificationCountRequest',
                'Required parameter "coreMessageGetUnreadNotificationCountRequest" was null or undefined when calling coreMessageGetUnreadNotificationCount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_unread_notification_count`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetUnreadNotificationCountRequestToJSON(requestParameters['coreMessageGetUnreadNotificationCountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get number of unread notifications.
     * Get number of unread notifications.
     */
    async coreMessageGetUnreadNotificationCount(requestParameters: CoreMessageGetUnreadNotificationCountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageGetUnreadNotificationCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the contact list
     * Retrieve the contact list
     */
    async coreMessageGetUserContactsRaw(requestParameters: CoreMessageGetUserContactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageGetUserContactsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetUserContactsRequest',
                'Required parameter "coreMessageGetUserContactsRequest" was null or undefined when calling coreMessageGetUserContacts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_user_contacts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetUserContactsRequestToJSON(requestParameters['coreMessageGetUserContactsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve the contact list
     * Retrieve the contact list
     */
    async coreMessageGetUserContacts(requestParameters: CoreMessageGetUserContactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageGetUserContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the message preferences for a given user.
     * Get the message preferences for a given user.
     */
    async coreMessageGetUserMessagePreferencesRaw(requestParameters: CoreMessageGetUserMessagePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageGetUserMessagePreferences200Response>> {
        if (requestParameters['coreMessageGetConversationCountsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetConversationCountsRequest',
                'Required parameter "coreMessageGetConversationCountsRequest" was null or undefined when calling coreMessageGetUserMessagePreferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_user_message_preferences`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetConversationCountsRequestToJSON(requestParameters['coreMessageGetConversationCountsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageGetUserMessagePreferences200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the message preferences for a given user.
     * Get the message preferences for a given user.
     */
    async coreMessageGetUserMessagePreferences(requestParameters: CoreMessageGetUserMessagePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageGetUserMessagePreferences200Response> {
        const response = await this.coreMessageGetUserMessagePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the notification preferences for a given user.
     * Get the notification preferences for a given user.
     */
    async coreMessageGetUserNotificationPreferencesRaw(requestParameters: CoreMessageGetUserNotificationPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageGetUserNotificationPreferences200Response>> {
        if (requestParameters['coreMessageGetConversationCountsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetConversationCountsRequest',
                'Required parameter "coreMessageGetConversationCountsRequest" was null or undefined when calling coreMessageGetUserNotificationPreferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_get_user_notification_preferences`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetConversationCountsRequestToJSON(requestParameters['coreMessageGetConversationCountsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageGetUserNotificationPreferences200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the notification preferences for a given user.
     * Get the notification preferences for a given user.
     */
    async coreMessageGetUserNotificationPreferences(requestParameters: CoreMessageGetUserNotificationPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageGetUserNotificationPreferences200Response> {
        const response = await this.coreMessageGetUserNotificationPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark all conversation messages as read for a given user
     * Mark all conversation messages as read for a given user
     */
    async coreMessageMarkAllConversationMessagesAsReadRaw(requestParameters: CoreMessageMarkAllConversationMessagesAsReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageMarkAllConversationMessagesAsReadRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageMarkAllConversationMessagesAsReadRequest',
                'Required parameter "coreMessageMarkAllConversationMessagesAsReadRequest" was null or undefined when calling coreMessageMarkAllConversationMessagesAsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_mark_all_conversation_messages_as_read`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageMarkAllConversationMessagesAsReadRequestToJSON(requestParameters['coreMessageMarkAllConversationMessagesAsReadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Mark all conversation messages as read for a given user
     * Mark all conversation messages as read for a given user
     */
    async coreMessageMarkAllConversationMessagesAsRead(requestParameters: CoreMessageMarkAllConversationMessagesAsReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageMarkAllConversationMessagesAsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark all notifications as read for a given user
     * Mark all notifications as read for a given user
     */
    async coreMessageMarkAllNotificationsAsReadRaw(requestParameters: CoreMessageMarkAllNotificationsAsReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageMarkAllNotificationsAsReadRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageMarkAllNotificationsAsReadRequest',
                'Required parameter "coreMessageMarkAllNotificationsAsReadRequest" was null or undefined when calling coreMessageMarkAllNotificationsAsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_mark_all_notifications_as_read`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageMarkAllNotificationsAsReadRequestToJSON(requestParameters['coreMessageMarkAllNotificationsAsReadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Mark all notifications as read for a given user
     * Mark all notifications as read for a given user
     */
    async coreMessageMarkAllNotificationsAsRead(requestParameters: CoreMessageMarkAllNotificationsAsReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageMarkAllNotificationsAsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark a single message as read, trigger message_viewed event.
     * Mark a single message as read, trigger message_viewed event.
     */
    async coreMessageMarkMessageReadRaw(requestParameters: CoreMessageMarkMessageReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageMarkMessageRead200Response>> {
        if (requestParameters['coreMessageMarkMessageReadRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageMarkMessageReadRequest',
                'Required parameter "coreMessageMarkMessageReadRequest" was null or undefined when calling coreMessageMarkMessageRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_mark_message_read`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageMarkMessageReadRequestToJSON(requestParameters['coreMessageMarkMessageReadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageMarkMessageRead200ResponseFromJSON(jsonValue));
    }

    /**
     * Mark a single message as read, trigger message_viewed event.
     * Mark a single message as read, trigger message_viewed event.
     */
    async coreMessageMarkMessageRead(requestParameters: CoreMessageMarkMessageReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageMarkMessageRead200Response> {
        const response = await this.coreMessageMarkMessageReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark a single notification as read, trigger notification_viewed event.
     * Mark a single notification as read, trigger notification_viewed event.
     */
    async coreMessageMarkNotificationReadRaw(requestParameters: CoreMessageMarkNotificationReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageMarkNotificationRead200Response>> {
        if (requestParameters['coreMessageMarkNotificationReadRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageMarkNotificationReadRequest',
                'Required parameter "coreMessageMarkNotificationReadRequest" was null or undefined when calling coreMessageMarkNotificationRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_mark_notification_read`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageMarkNotificationReadRequestToJSON(requestParameters['coreMessageMarkNotificationReadRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageMarkNotificationRead200ResponseFromJSON(jsonValue));
    }

    /**
     * Mark a single notification as read, trigger notification_viewed event.
     * Mark a single notification as read, trigger notification_viewed event.
     */
    async coreMessageMarkNotificationRead(requestParameters: CoreMessageMarkNotificationReadOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageMarkNotificationRead200Response> {
        const response = await this.coreMessageMarkNotificationReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process the message processor config form
     * Process the message processor config form
     */
    async coreMessageMessageProcessorConfigFormRaw(requestParameters: CoreMessageMessageProcessorConfigFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageMessageProcessorConfigFormRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageMessageProcessorConfigFormRequest',
                'Required parameter "coreMessageMessageProcessorConfigFormRequest" was null or undefined when calling coreMessageMessageProcessorConfigForm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_message_processor_config_form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageMessageProcessorConfigFormRequestToJSON(requestParameters['coreMessageMessageProcessorConfigFormRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Process the message processor config form
     * Process the message processor config form
     */
    async coreMessageMessageProcessorConfigForm(requestParameters: CoreMessageMessageProcessorConfigFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageMessageProcessorConfigFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the data for searching for people
     * Retrieve the data for searching for people
     */
    async coreMessageMessageSearchUsersRaw(requestParameters: CoreMessageMessageSearchUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMessageMessageSearchUsers200Response>> {
        if (requestParameters['coreMessageMessageSearchUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageMessageSearchUsersRequest',
                'Required parameter "coreMessageMessageSearchUsersRequest" was null or undefined when calling coreMessageMessageSearchUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_message_search_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageMessageSearchUsersRequestToJSON(requestParameters['coreMessageMessageSearchUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMessageMessageSearchUsers200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the data for searching for people
     * Retrieve the data for searching for people
     */
    async coreMessageMessageSearchUsers(requestParameters: CoreMessageMessageSearchUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMessageMessageSearchUsers200Response> {
        const response = await this.coreMessageMessageSearchUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mutes a list of conversations
     * Mutes a list of conversations
     */
    async coreMessageMuteConversationsRaw(requestParameters: CoreMessageMuteConversationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageMuteConversationsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageMuteConversationsRequest',
                'Required parameter "coreMessageMuteConversationsRequest" was null or undefined when calling coreMessageMuteConversations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_mute_conversations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageMuteConversationsRequestToJSON(requestParameters['coreMessageMuteConversationsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Mutes a list of conversations
     * Mutes a list of conversations
     */
    async coreMessageMuteConversations(requestParameters: CoreMessageMuteConversationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageMuteConversationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for contacts
     * Search for contacts
     */
    async coreMessageSearchContactsRaw(requestParameters: CoreMessageSearchContactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageSearchContactsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageSearchContactsRequest',
                'Required parameter "coreMessageSearchContactsRequest" was null or undefined when calling coreMessageSearchContacts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_search_contacts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageSearchContactsRequestToJSON(requestParameters['coreMessageSearchContactsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Search for contacts
     * Search for contacts
     */
    async coreMessageSearchContacts(requestParameters: CoreMessageSearchContactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageSearchContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send instant messages
     * Send instant messages
     */
    async coreMessageSendInstantMessagesRaw(requestParameters: CoreMessageSendInstantMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageSendInstantMessagesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageSendInstantMessagesRequest',
                'Required parameter "coreMessageSendInstantMessagesRequest" was null or undefined when calling coreMessageSendInstantMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_send_instant_messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageSendInstantMessagesRequestToJSON(requestParameters['coreMessageSendInstantMessagesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send instant messages
     * Send instant messages
     */
    async coreMessageSendInstantMessages(requestParameters: CoreMessageSendInstantMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageSendInstantMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send messages to an existing conversation between users
     * Send messages to an existing conversation between users
     */
    async coreMessageSendMessagesToConversationRaw(requestParameters: CoreMessageSendMessagesToConversationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageSendMessagesToConversationRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageSendMessagesToConversationRequest',
                'Required parameter "coreMessageSendMessagesToConversationRequest" was null or undefined when calling coreMessageSendMessagesToConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_send_messages_to_conversation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageSendMessagesToConversationRequestToJSON(requestParameters['coreMessageSendMessagesToConversationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send messages to an existing conversation between users
     * Send messages to an existing conversation between users
     */
    async coreMessageSendMessagesToConversation(requestParameters: CoreMessageSendMessagesToConversationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageSendMessagesToConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark a conversation or group of conversations as favourites/starred conversations.
     * Mark a conversation or group of conversations as favourites/starred conversations.
     */
    async coreMessageSetFavouriteConversationsRaw(requestParameters: CoreMessageSetFavouriteConversationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageSetFavouriteConversationsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageSetFavouriteConversationsRequest',
                'Required parameter "coreMessageSetFavouriteConversationsRequest" was null or undefined when calling coreMessageSetFavouriteConversations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_set_favourite_conversations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageSetFavouriteConversationsRequestToJSON(requestParameters['coreMessageSetFavouriteConversationsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Mark a conversation or group of conversations as favourites/starred conversations.
     * Mark a conversation or group of conversations as favourites/starred conversations.
     */
    async coreMessageSetFavouriteConversations(requestParameters: CoreMessageSetFavouriteConversationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageSetFavouriteConversationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unblocks a user
     * Unblocks a user
     */
    async coreMessageUnblockUserRaw(requestParameters: CoreMessageUnblockUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageUnblockUserRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageUnblockUserRequest',
                'Required parameter "coreMessageUnblockUserRequest" was null or undefined when calling coreMessageUnblockUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_unblock_user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageUnblockUserRequestToJSON(requestParameters['coreMessageUnblockUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Unblocks a user
     * Unblocks a user
     */
    async coreMessageUnblockUser(requestParameters: CoreMessageUnblockUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageUnblockUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unmutes a list of conversations
     * Unmutes a list of conversations
     */
    async coreMessageUnmuteConversationsRaw(requestParameters: CoreMessageUnmuteConversationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageUnmuteConversationsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageUnmuteConversationsRequest',
                'Required parameter "coreMessageUnmuteConversationsRequest" was null or undefined when calling coreMessageUnmuteConversations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_unmute_conversations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageUnmuteConversationsRequestToJSON(requestParameters['coreMessageUnmuteConversationsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Unmutes a list of conversations
     * Unmutes a list of conversations
     */
    async coreMessageUnmuteConversations(requestParameters: CoreMessageUnmuteConversationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageUnmuteConversationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unset a conversation or group of conversations as favourites/starred conversations.
     * Unset a conversation or group of conversations as favourites/starred conversations.
     */
    async coreMessageUnsetFavouriteConversationsRaw(requestParameters: CoreMessageUnsetFavouriteConversationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageSetFavouriteConversationsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageSetFavouriteConversationsRequest',
                'Required parameter "coreMessageSetFavouriteConversationsRequest" was null or undefined when calling coreMessageUnsetFavouriteConversations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_message_unset_favourite_conversations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageSetFavouriteConversationsRequestToJSON(requestParameters['coreMessageSetFavouriteConversationsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Unset a conversation or group of conversations as favourites/starred conversations.
     * Unset a conversation or group of conversations as favourites/starred conversations.
     */
    async coreMessageUnsetFavouriteConversations(requestParameters: CoreMessageUnsetFavouriteConversationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreMessageUnsetFavouriteConversationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check a user has authorized for a given MoodleNet site
     * Check a user has authorized for a given MoodleNet site
     */
    async coreMoodlenetAuthCheckRaw(requestParameters: CoreMoodlenetAuthCheckOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMoodlenetAuthCheck200Response>> {
        if (requestParameters['coreMoodlenetAuthCheckRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMoodlenetAuthCheckRequest',
                'Required parameter "coreMoodlenetAuthCheckRequest" was null or undefined when calling coreMoodlenetAuthCheck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_moodlenet_auth_check`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMoodlenetAuthCheckRequestToJSON(requestParameters['coreMoodlenetAuthCheckRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMoodlenetAuthCheck200ResponseFromJSON(jsonValue));
    }

    /**
     * Check a user has authorized for a given MoodleNet site
     * Check a user has authorized for a given MoodleNet site
     */
    async coreMoodlenetAuthCheck(requestParameters: CoreMoodlenetAuthCheckOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMoodlenetAuthCheck200Response> {
        const response = await this.coreMoodlenetAuthCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information about an activity being shared
     * Get information about an activity being shared
     */
    async coreMoodlenetGetShareInfoActivityRaw(requestParameters: CoreMoodlenetGetShareInfoActivityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMoodlenetGetShareInfoActivity200Response>> {
        if (requestParameters['coreMoodlenetGetShareInfoActivityRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMoodlenetGetShareInfoActivityRequest',
                'Required parameter "coreMoodlenetGetShareInfoActivityRequest" was null or undefined when calling coreMoodlenetGetShareInfoActivity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_moodlenet_get_share_info_activity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMoodlenetGetShareInfoActivityRequestToJSON(requestParameters['coreMoodlenetGetShareInfoActivityRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMoodlenetGetShareInfoActivity200ResponseFromJSON(jsonValue));
    }

    /**
     * Get information about an activity being shared
     * Get information about an activity being shared
     */
    async coreMoodlenetGetShareInfoActivity(requestParameters: CoreMoodlenetGetShareInfoActivityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMoodlenetGetShareInfoActivity200Response> {
        const response = await this.coreMoodlenetGetShareInfoActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information about an course being shared
     * Get information about an course being shared
     */
    async coreMoodlenetGetSharedCourseInfoRaw(requestParameters: CoreMoodlenetGetSharedCourseInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMoodlenetGetSharedCourseInfo200Response>> {
        if (requestParameters['coreMoodlenetGetSharedCourseInfoRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMoodlenetGetSharedCourseInfoRequest',
                'Required parameter "coreMoodlenetGetSharedCourseInfoRequest" was null or undefined when calling coreMoodlenetGetSharedCourseInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_moodlenet_get_shared_course_info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMoodlenetGetSharedCourseInfoRequestToJSON(requestParameters['coreMoodlenetGetSharedCourseInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMoodlenetGetSharedCourseInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Get information about an course being shared
     * Get information about an course being shared
     */
    async coreMoodlenetGetSharedCourseInfo(requestParameters: CoreMoodlenetGetSharedCourseInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMoodlenetGetSharedCourseInfo200Response> {
        const response = await this.coreMoodlenetGetSharedCourseInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send activity to MoodleNet
     * Send activity to MoodleNet
     */
    async coreMoodlenetSendActivityRaw(requestParameters: CoreMoodlenetSendActivityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMoodlenetSendActivity200Response>> {
        if (requestParameters['coreMoodlenetSendActivityRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMoodlenetSendActivityRequest',
                'Required parameter "coreMoodlenetSendActivityRequest" was null or undefined when calling coreMoodlenetSendActivity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_moodlenet_send_activity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMoodlenetSendActivityRequestToJSON(requestParameters['coreMoodlenetSendActivityRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMoodlenetSendActivity200ResponseFromJSON(jsonValue));
    }

    /**
     * Send activity to MoodleNet
     * Send activity to MoodleNet
     */
    async coreMoodlenetSendActivity(requestParameters: CoreMoodlenetSendActivityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMoodlenetSendActivity200Response> {
        const response = await this.coreMoodlenetSendActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send course to MoodleNet
     * Send course to MoodleNet
     */
    async coreMoodlenetSendCourseRaw(requestParameters: CoreMoodlenetSendCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreMoodlenetSendCourse200Response>> {
        if (requestParameters['coreMoodlenetSendCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMoodlenetSendCourseRequest',
                'Required parameter "coreMoodlenetSendCourseRequest" was null or undefined when calling coreMoodlenetSendCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_moodlenet_send_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMoodlenetSendCourseRequestToJSON(requestParameters['coreMoodlenetSendCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreMoodlenetSendCourse200ResponseFromJSON(jsonValue));
    }

    /**
     * Send course to MoodleNet
     * Send course to MoodleNet
     */
    async coreMoodlenetSendCourse(requestParameters: CoreMoodlenetSendCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreMoodlenetSendCourse200Response> {
        const response = await this.coreMoodlenetSendCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the My or Dashboard viewed event.
     * Trigger the My or Dashboard viewed event.
     */
    async coreMyViewPageRaw(requestParameters: CoreMyViewPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['coreMyViewPageRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMyViewPageRequest',
                'Required parameter "coreMyViewPageRequest" was null or undefined when calling coreMyViewPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_my_view_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMyViewPageRequestToJSON(requestParameters['coreMyViewPageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the My or Dashboard viewed event.
     * Trigger the My or Dashboard viewed event.
     */
    async coreMyViewPage(requestParameters: CoreMyViewPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.coreMyViewPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create notes
     * Create notes
     */
    async coreNotesCreateNotesRaw(requestParameters: CoreNotesCreateNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreNotesCreateNotesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreNotesCreateNotesRequest',
                'Required parameter "coreNotesCreateNotesRequest" was null or undefined when calling coreNotesCreateNotes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_notes_create_notes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreNotesCreateNotesRequestToJSON(requestParameters['coreNotesCreateNotesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create notes
     * Create notes
     */
    async coreNotesCreateNotes(requestParameters: CoreNotesCreateNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreNotesCreateNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete notes
     * Delete notes
     */
    async coreNotesDeleteNotesRaw(requestParameters: CoreNotesDeleteNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreNotesDeleteNotesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreNotesDeleteNotesRequest',
                'Required parameter "coreNotesDeleteNotesRequest" was null or undefined when calling coreNotesDeleteNotes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_notes_delete_notes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreNotesDeleteNotesRequestToJSON(requestParameters['coreNotesDeleteNotesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete notes
     * Delete notes
     */
    async coreNotesDeleteNotes(requestParameters: CoreNotesDeleteNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreNotesDeleteNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all notes in specified course (or site), for the specified user.
     * Returns all notes in specified course (or site), for the specified user.
     */
    async coreNotesGetCourseNotesRaw(requestParameters: CoreNotesGetCourseNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreNotesGetCourseNotes200Response>> {
        if (requestParameters['coreNotesGetCourseNotesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreNotesGetCourseNotesRequest',
                'Required parameter "coreNotesGetCourseNotesRequest" was null or undefined when calling coreNotesGetCourseNotes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_notes_get_course_notes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreNotesGetCourseNotesRequestToJSON(requestParameters['coreNotesGetCourseNotesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreNotesGetCourseNotes200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns all notes in specified course (or site), for the specified user.
     * Returns all notes in specified course (or site), for the specified user.
     */
    async coreNotesGetCourseNotes(requestParameters: CoreNotesGetCourseNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreNotesGetCourseNotes200Response> {
        const response = await this.coreNotesGetCourseNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get notes
     * Get notes
     */
    async coreNotesGetNotesRaw(requestParameters: CoreNotesGetNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreNotesGetNotes200Response>> {
        if (requestParameters['coreNotesGetNotesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreNotesGetNotesRequest',
                'Required parameter "coreNotesGetNotesRequest" was null or undefined when calling coreNotesGetNotes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_notes_get_notes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreNotesGetNotesRequestToJSON(requestParameters['coreNotesGetNotesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreNotesGetNotes200ResponseFromJSON(jsonValue));
    }

    /**
     * Get notes
     * Get notes
     */
    async coreNotesGetNotes(requestParameters: CoreNotesGetNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreNotesGetNotes200Response> {
        const response = await this.coreNotesGetNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update notes
     * Update notes
     */
    async coreNotesUpdateNotesRaw(requestParameters: CoreNotesUpdateNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreNotesUpdateNotesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreNotesUpdateNotesRequest',
                'Required parameter "coreNotesUpdateNotesRequest" was null or undefined when calling coreNotesUpdateNotes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_notes_update_notes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreNotesUpdateNotesRequestToJSON(requestParameters['coreNotesUpdateNotesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update notes
     * Update notes
     */
    async coreNotesUpdateNotes(requestParameters: CoreNotesUpdateNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreNotesUpdateNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Simulates the web interface view of notes/index.php: trigger events.
     * Simulates the web interface view of notes/index.php: trigger events.
     */
    async coreNotesViewNotesRaw(requestParameters: CoreNotesViewNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['coreNotesViewNotesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreNotesViewNotesRequest',
                'Required parameter "coreNotesViewNotesRequest" was null or undefined when calling coreNotesViewNotes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_notes_view_notes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreNotesViewNotesRequestToJSON(requestParameters['coreNotesViewNotesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Simulates the web interface view of notes/index.php: trigger events.
     * Simulates the web interface view of notes/index.php: trigger events.
     */
    async coreNotesViewNotes(requestParameters: CoreNotesViewNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.coreNotesViewNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load the mapping of names to icons
     * Load the mapping of names to icons
     */
    async coreOutputLoadFontawesomeIconMapRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_output_load_fontawesome_icon_map`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Load the mapping of names to icons
     * Load the mapping of names to icons
     */
    async coreOutputLoadFontawesomeIconMap(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreOutputLoadFontawesomeIconMapRaw(initOverrides);
        return await response.value();
    }

    /**
     * Load the mapping of moodle pix names to fontawesome icon names
     * Load the mapping of moodle pix names to fontawesome icon names
     */
    async coreOutputLoadFontawesomeIconSystemMapRaw(requestParameters: CoreOutputLoadFontawesomeIconSystemMapOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreOutputLoadFontawesomeIconSystemMapRequest'] == null) {
            throw new runtime.RequiredError(
                'coreOutputLoadFontawesomeIconSystemMapRequest',
                'Required parameter "coreOutputLoadFontawesomeIconSystemMapRequest" was null or undefined when calling coreOutputLoadFontawesomeIconSystemMap().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_output_load_fontawesome_icon_system_map`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreOutputLoadFontawesomeIconSystemMapRequestToJSON(requestParameters['coreOutputLoadFontawesomeIconSystemMapRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Load the mapping of moodle pix names to fontawesome icon names
     * Load the mapping of moodle pix names to fontawesome icon names
     */
    async coreOutputLoadFontawesomeIconSystemMap(requestParameters: CoreOutputLoadFontawesomeIconSystemMapOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreOutputLoadFontawesomeIconSystemMapRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load a template for a renderable
     * Load a template for a renderable
     */
    async coreOutputLoadTemplateRaw(requestParameters: CoreOutputLoadTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreOutputLoadTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreOutputLoadTemplateRequest',
                'Required parameter "coreOutputLoadTemplateRequest" was null or undefined when calling coreOutputLoadTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_output_load_template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreOutputLoadTemplateRequestToJSON(requestParameters['coreOutputLoadTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Load a template for a renderable
     * Load a template for a renderable
     */
    async coreOutputLoadTemplate(requestParameters: CoreOutputLoadTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreOutputLoadTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load a template and its dependencies for a renderable
     * Load a template and its dependencies for a renderable
     */
    async coreOutputLoadTemplateWithDependenciesRaw(requestParameters: CoreOutputLoadTemplateWithDependenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreOutputLoadTemplateWithDependencies200Response>> {
        if (requestParameters['coreOutputLoadTemplateWithDependenciesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreOutputLoadTemplateWithDependenciesRequest',
                'Required parameter "coreOutputLoadTemplateWithDependenciesRequest" was null or undefined when calling coreOutputLoadTemplateWithDependencies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_output_load_template_with_dependencies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreOutputLoadTemplateWithDependenciesRequestToJSON(requestParameters['coreOutputLoadTemplateWithDependenciesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreOutputLoadTemplateWithDependencies200ResponseFromJSON(jsonValue));
    }

    /**
     * Load a template and its dependencies for a renderable
     * Load a template and its dependencies for a renderable
     */
    async coreOutputLoadTemplateWithDependencies(requestParameters: CoreOutputLoadTemplateWithDependenciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreOutputLoadTemplateWithDependencies200Response> {
        const response = await this.coreOutputLoadTemplateWithDependenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of payment gateways that support the given component/area
     * Get the list of payment gateways that support the given component/area
     */
    async corePaymentGetAvailableGatewaysRaw(requestParameters: CorePaymentGetAvailableGatewaysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['corePaymentGetAvailableGatewaysRequest'] == null) {
            throw new runtime.RequiredError(
                'corePaymentGetAvailableGatewaysRequest',
                'Required parameter "corePaymentGetAvailableGatewaysRequest" was null or undefined when calling corePaymentGetAvailableGateways().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_payment_get_available_gateways`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CorePaymentGetAvailableGatewaysRequestToJSON(requestParameters['corePaymentGetAvailableGatewaysRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the list of payment gateways that support the given component/area
     * Get the list of payment gateways that support the given component/area
     */
    async corePaymentGetAvailableGateways(requestParameters: CorePaymentGetAvailableGatewaysOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.corePaymentGetAvailableGatewaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the random question set for a criteria
     * Get the random question set for a criteria
     */
    async coreQuestionGetRandomQuestionSummariesRaw(requestParameters: CoreQuestionGetRandomQuestionSummariesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreQuestionGetRandomQuestionSummaries200Response>> {
        if (requestParameters['coreQuestionGetRandomQuestionSummariesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreQuestionGetRandomQuestionSummariesRequest',
                'Required parameter "coreQuestionGetRandomQuestionSummariesRequest" was null or undefined when calling coreQuestionGetRandomQuestionSummaries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_question_get_random_question_summaries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreQuestionGetRandomQuestionSummariesRequestToJSON(requestParameters['coreQuestionGetRandomQuestionSummariesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreQuestionGetRandomQuestionSummaries200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the random question set for a criteria
     * Get the random question set for a criteria
     */
    async coreQuestionGetRandomQuestionSummaries(requestParameters: CoreQuestionGetRandomQuestionSummariesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreQuestionGetRandomQuestionSummaries200Response> {
        const response = await this.coreQuestionGetRandomQuestionSummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the question tags.
     * Update the question tags.
     */
    async coreQuestionSubmitTagsFormRaw(requestParameters: CoreQuestionSubmitTagsFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreQuestionSubmitTagsForm200Response>> {
        if (requestParameters['coreQuestionSubmitTagsFormRequest'] == null) {
            throw new runtime.RequiredError(
                'coreQuestionSubmitTagsFormRequest',
                'Required parameter "coreQuestionSubmitTagsFormRequest" was null or undefined when calling coreQuestionSubmitTagsForm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_question_submit_tags_form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreQuestionSubmitTagsFormRequestToJSON(requestParameters['coreQuestionSubmitTagsFormRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreQuestionSubmitTagsForm200ResponseFromJSON(jsonValue));
    }

    /**
     * Update the question tags.
     * Update the question tags.
     */
    async coreQuestionSubmitTagsForm(requestParameters: CoreQuestionSubmitTagsFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreQuestionSubmitTagsForm200Response> {
        const response = await this.coreQuestionSubmitTagsFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the flag state of a question attempt.
     * Update the flag state of a question attempt.
     */
    async coreQuestionUpdateFlagRaw(requestParameters: CoreQuestionUpdateFlagOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['coreQuestionUpdateFlagRequest'] == null) {
            throw new runtime.RequiredError(
                'coreQuestionUpdateFlagRequest',
                'Required parameter "coreQuestionUpdateFlagRequest" was null or undefined when calling coreQuestionUpdateFlag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_question_update_flag`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreQuestionUpdateFlagRequestToJSON(requestParameters['coreQuestionUpdateFlagRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Update the flag state of a question attempt.
     * Update the flag state of a question attempt.
     */
    async coreQuestionUpdateFlag(requestParameters: CoreQuestionUpdateFlagOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.coreQuestionUpdateFlagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rates an item.
     * Rates an item.
     */
    async coreRatingAddRatingRaw(requestParameters: CoreRatingAddRatingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreRatingAddRating200Response>> {
        if (requestParameters['coreRatingAddRatingRequest'] == null) {
            throw new runtime.RequiredError(
                'coreRatingAddRatingRequest',
                'Required parameter "coreRatingAddRatingRequest" was null or undefined when calling coreRatingAddRating().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_rating_add_rating`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreRatingAddRatingRequestToJSON(requestParameters['coreRatingAddRatingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreRatingAddRating200ResponseFromJSON(jsonValue));
    }

    /**
     * Rates an item.
     * Rates an item.
     */
    async coreRatingAddRating(requestParameters: CoreRatingAddRatingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreRatingAddRating200Response> {
        const response = await this.coreRatingAddRatingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all the ratings for an item.
     * Retrieve all the ratings for an item.
     */
    async coreRatingGetItemRatingsRaw(requestParameters: CoreRatingGetItemRatingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreRatingGetItemRatings200Response>> {
        if (requestParameters['coreRatingGetItemRatingsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreRatingGetItemRatingsRequest',
                'Required parameter "coreRatingGetItemRatingsRequest" was null or undefined when calling coreRatingGetItemRatings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_rating_get_item_ratings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreRatingGetItemRatingsRequestToJSON(requestParameters['coreRatingGetItemRatingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreRatingGetItemRatings200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve all the ratings for an item.
     * Retrieve all the ratings for an item.
     */
    async coreRatingGetItemRatings(requestParameters: CoreRatingGetItemRatingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreRatingGetItemRatings200Response> {
        const response = await this.coreRatingGetItemRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete audience from report
     * Delete audience from report
     */
    async coreReportbuilderAudiencesDeleteRaw(requestParameters: CoreReportbuilderAudiencesDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreReportbuilderAudiencesDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderAudiencesDeleteRequest',
                'Required parameter "coreReportbuilderAudiencesDeleteRequest" was null or undefined when calling coreReportbuilderAudiencesDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_audiences_delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderAudiencesDeleteRequestToJSON(requestParameters['coreReportbuilderAudiencesDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete audience from report
     * Delete audience from report
     */
    async coreReportbuilderAudiencesDelete(requestParameters: CoreReportbuilderAudiencesDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreReportbuilderAudiencesDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Determine access to a system report
     * Determine access to a system report
     */
    async coreReportbuilderCanViewSystemReportRaw(requestParameters: CoreReportbuilderCanViewSystemReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreReportbuilderCanViewSystemReportRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderCanViewSystemReportRequest',
                'Required parameter "coreReportbuilderCanViewSystemReportRequest" was null or undefined when calling coreReportbuilderCanViewSystemReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_can_view_system_report`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderCanViewSystemReportRequestToJSON(requestParameters['coreReportbuilderCanViewSystemReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Determine access to a system report
     * Determine access to a system report
     */
    async coreReportbuilderCanViewSystemReport(requestParameters: CoreReportbuilderCanViewSystemReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreReportbuilderCanViewSystemReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add column to report
     * Add column to report
     */
    async coreReportbuilderColumnsAddRaw(requestParameters: CoreReportbuilderColumnsAddOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderColumnsAdd200Response>> {
        if (requestParameters['coreReportbuilderColumnsAddRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderColumnsAddRequest',
                'Required parameter "coreReportbuilderColumnsAddRequest" was null or undefined when calling coreReportbuilderColumnsAdd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_columns_add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderColumnsAddRequestToJSON(requestParameters['coreReportbuilderColumnsAddRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderColumnsAdd200ResponseFromJSON(jsonValue));
    }

    /**
     * Add column to report
     * Add column to report
     */
    async coreReportbuilderColumnsAdd(requestParameters: CoreReportbuilderColumnsAddOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderColumnsAdd200Response> {
        const response = await this.coreReportbuilderColumnsAddRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete column from report
     * Delete column from report
     */
    async coreReportbuilderColumnsDeleteRaw(requestParameters: CoreReportbuilderColumnsDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderColumnsDelete200Response>> {
        if (requestParameters['coreReportbuilderColumnsDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderColumnsDeleteRequest',
                'Required parameter "coreReportbuilderColumnsDeleteRequest" was null or undefined when calling coreReportbuilderColumnsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_columns_delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderColumnsDeleteRequestToJSON(requestParameters['coreReportbuilderColumnsDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderColumnsDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete column from report
     * Delete column from report
     */
    async coreReportbuilderColumnsDelete(requestParameters: CoreReportbuilderColumnsDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderColumnsDelete200Response> {
        const response = await this.coreReportbuilderColumnsDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Re-order column within report
     * Re-order column within report
     */
    async coreReportbuilderColumnsReorderRaw(requestParameters: CoreReportbuilderColumnsReorderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreReportbuilderColumnsReorderRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderColumnsReorderRequest',
                'Required parameter "coreReportbuilderColumnsReorderRequest" was null or undefined when calling coreReportbuilderColumnsReorder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_columns_reorder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderColumnsReorderRequestToJSON(requestParameters['coreReportbuilderColumnsReorderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Re-order column within report
     * Re-order column within report
     */
    async coreReportbuilderColumnsReorder(requestParameters: CoreReportbuilderColumnsReorderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreReportbuilderColumnsReorderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve column sorting for report
     * Retrieve column sorting for report
     */
    async coreReportbuilderColumnsSortGetRaw(requestParameters: CoreReportbuilderColumnsSortGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderColumnsDelete200Response>> {
        if (requestParameters['coreReportbuilderColumnsSortGetRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderColumnsSortGetRequest',
                'Required parameter "coreReportbuilderColumnsSortGetRequest" was null or undefined when calling coreReportbuilderColumnsSortGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_columns_sort_get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderColumnsSortGetRequestToJSON(requestParameters['coreReportbuilderColumnsSortGetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderColumnsDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve column sorting for report
     * Retrieve column sorting for report
     */
    async coreReportbuilderColumnsSortGet(requestParameters: CoreReportbuilderColumnsSortGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderColumnsDelete200Response> {
        const response = await this.coreReportbuilderColumnsSortGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Re-order column sorting within report
     * Re-order column sorting within report
     */
    async coreReportbuilderColumnsSortReorderRaw(requestParameters: CoreReportbuilderColumnsSortReorderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderColumnsDelete200Response>> {
        if (requestParameters['coreReportbuilderColumnsSortReorderRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderColumnsSortReorderRequest',
                'Required parameter "coreReportbuilderColumnsSortReorderRequest" was null or undefined when calling coreReportbuilderColumnsSortReorder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_columns_sort_reorder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderColumnsSortReorderRequestToJSON(requestParameters['coreReportbuilderColumnsSortReorderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderColumnsDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Re-order column sorting within report
     * Re-order column sorting within report
     */
    async coreReportbuilderColumnsSortReorder(requestParameters: CoreReportbuilderColumnsSortReorderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderColumnsDelete200Response> {
        const response = await this.coreReportbuilderColumnsSortReorderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle sorting of column within report
     * Toggle sorting of column within report
     */
    async coreReportbuilderColumnsSortToggleRaw(requestParameters: CoreReportbuilderColumnsSortToggleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderColumnsDelete200Response>> {
        if (requestParameters['coreReportbuilderColumnsSortToggleRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderColumnsSortToggleRequest',
                'Required parameter "coreReportbuilderColumnsSortToggleRequest" was null or undefined when calling coreReportbuilderColumnsSortToggle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_columns_sort_toggle`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderColumnsSortToggleRequestToJSON(requestParameters['coreReportbuilderColumnsSortToggleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderColumnsDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Toggle sorting of column within report
     * Toggle sorting of column within report
     */
    async coreReportbuilderColumnsSortToggle(requestParameters: CoreReportbuilderColumnsSortToggleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderColumnsDelete200Response> {
        const response = await this.coreReportbuilderColumnsSortToggleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add condition to report
     * Add condition to report
     */
    async coreReportbuilderConditionsAddRaw(requestParameters: CoreReportbuilderConditionsAddOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderConditionsAdd200Response>> {
        if (requestParameters['coreReportbuilderConditionsAddRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderConditionsAddRequest',
                'Required parameter "coreReportbuilderConditionsAddRequest" was null or undefined when calling coreReportbuilderConditionsAdd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_conditions_add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderConditionsAddRequestToJSON(requestParameters['coreReportbuilderConditionsAddRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderConditionsAdd200ResponseFromJSON(jsonValue));
    }

    /**
     * Add condition to report
     * Add condition to report
     */
    async coreReportbuilderConditionsAdd(requestParameters: CoreReportbuilderConditionsAddOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderConditionsAdd200Response> {
        const response = await this.coreReportbuilderConditionsAddRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete condition from report
     * Delete condition from report
     */
    async coreReportbuilderConditionsDeleteRaw(requestParameters: CoreReportbuilderConditionsDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderConditionsDelete200Response>> {
        if (requestParameters['coreReportbuilderConditionsDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderConditionsDeleteRequest',
                'Required parameter "coreReportbuilderConditionsDeleteRequest" was null or undefined when calling coreReportbuilderConditionsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_conditions_delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderConditionsDeleteRequestToJSON(requestParameters['coreReportbuilderConditionsDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderConditionsDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete condition from report
     * Delete condition from report
     */
    async coreReportbuilderConditionsDelete(requestParameters: CoreReportbuilderConditionsDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderConditionsDelete200Response> {
        const response = await this.coreReportbuilderConditionsDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Re-order condition within report
     * Re-order condition within report
     */
    async coreReportbuilderConditionsReorderRaw(requestParameters: CoreReportbuilderConditionsReorderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderConditionsDelete200Response>> {
        if (requestParameters['coreReportbuilderConditionsReorderRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderConditionsReorderRequest',
                'Required parameter "coreReportbuilderConditionsReorderRequest" was null or undefined when calling coreReportbuilderConditionsReorder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_conditions_reorder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderConditionsReorderRequestToJSON(requestParameters['coreReportbuilderConditionsReorderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderConditionsDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Re-order condition within report
     * Re-order condition within report
     */
    async coreReportbuilderConditionsReorder(requestParameters: CoreReportbuilderConditionsReorderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderConditionsDelete200Response> {
        const response = await this.coreReportbuilderConditionsReorderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset conditions for given report
     * Reset conditions for given report
     */
    async coreReportbuilderConditionsResetRaw(requestParameters: CoreReportbuilderConditionsResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderConditionsDelete200Response>> {
        if (requestParameters['coreReportbuilderColumnsSortGetRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderColumnsSortGetRequest',
                'Required parameter "coreReportbuilderColumnsSortGetRequest" was null or undefined when calling coreReportbuilderConditionsReset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_conditions_reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderColumnsSortGetRequestToJSON(requestParameters['coreReportbuilderColumnsSortGetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderConditionsDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Reset conditions for given report
     * Reset conditions for given report
     */
    async coreReportbuilderConditionsReset(requestParameters: CoreReportbuilderConditionsResetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderConditionsDelete200Response> {
        const response = await this.coreReportbuilderConditionsResetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add filter to report
     * Add filter to report
     */
    async coreReportbuilderFiltersAddRaw(requestParameters: CoreReportbuilderFiltersAddOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderFiltersAdd200Response>> {
        if (requestParameters['coreReportbuilderFiltersAddRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderFiltersAddRequest',
                'Required parameter "coreReportbuilderFiltersAddRequest" was null or undefined when calling coreReportbuilderFiltersAdd().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_filters_add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderFiltersAddRequestToJSON(requestParameters['coreReportbuilderFiltersAddRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderFiltersAdd200ResponseFromJSON(jsonValue));
    }

    /**
     * Add filter to report
     * Add filter to report
     */
    async coreReportbuilderFiltersAdd(requestParameters: CoreReportbuilderFiltersAddOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderFiltersAdd200Response> {
        const response = await this.coreReportbuilderFiltersAddRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete filter from report
     * Delete filter from report
     */
    async coreReportbuilderFiltersDeleteRaw(requestParameters: CoreReportbuilderFiltersDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderFiltersDelete200Response>> {
        if (requestParameters['coreReportbuilderFiltersDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderFiltersDeleteRequest',
                'Required parameter "coreReportbuilderFiltersDeleteRequest" was null or undefined when calling coreReportbuilderFiltersDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_filters_delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderFiltersDeleteRequestToJSON(requestParameters['coreReportbuilderFiltersDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderFiltersDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete filter from report
     * Delete filter from report
     */
    async coreReportbuilderFiltersDelete(requestParameters: CoreReportbuilderFiltersDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderFiltersDelete200Response> {
        const response = await this.coreReportbuilderFiltersDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Re-order filter within report
     * Re-order filter within report
     */
    async coreReportbuilderFiltersReorderRaw(requestParameters: CoreReportbuilderFiltersReorderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderFiltersDelete200Response>> {
        if (requestParameters['coreReportbuilderFiltersReorderRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderFiltersReorderRequest',
                'Required parameter "coreReportbuilderFiltersReorderRequest" was null or undefined when calling coreReportbuilderFiltersReorder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_filters_reorder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderFiltersReorderRequestToJSON(requestParameters['coreReportbuilderFiltersReorderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderFiltersDelete200ResponseFromJSON(jsonValue));
    }

    /**
     * Re-order filter within report
     * Re-order filter within report
     */
    async coreReportbuilderFiltersReorder(requestParameters: CoreReportbuilderFiltersReorderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderFiltersDelete200Response> {
        const response = await this.coreReportbuilderFiltersReorderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset filters for given report
     * Reset filters for given report
     */
    async coreReportbuilderFiltersResetRaw(requestParameters: CoreReportbuilderFiltersResetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreReportbuilderFiltersResetRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderFiltersResetRequest',
                'Required parameter "coreReportbuilderFiltersResetRequest" was null or undefined when calling coreReportbuilderFiltersReset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_filters_reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderFiltersResetRequestToJSON(requestParameters['coreReportbuilderFiltersResetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Reset filters for given report
     * Reset filters for given report
     */
    async coreReportbuilderFiltersReset(requestParameters: CoreReportbuilderFiltersResetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreReportbuilderFiltersResetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List custom reports for current user
     * List custom reports for current user
     */
    async coreReportbuilderListReportsRaw(requestParameters: CoreReportbuilderListReportsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderListReports200Response>> {
        if (requestParameters['coreReportbuilderListReportsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderListReportsRequest',
                'Required parameter "coreReportbuilderListReportsRequest" was null or undefined when calling coreReportbuilderListReports().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_list_reports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderListReportsRequestToJSON(requestParameters['coreReportbuilderListReportsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderListReports200ResponseFromJSON(jsonValue));
    }

    /**
     * List custom reports for current user
     * List custom reports for current user
     */
    async coreReportbuilderListReports(requestParameters: CoreReportbuilderListReportsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderListReports200Response> {
        const response = await this.coreReportbuilderListReportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete report
     * Delete report
     */
    async coreReportbuilderReportsDeleteRaw(requestParameters: CoreReportbuilderReportsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreReportbuilderColumnsSortGetRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderColumnsSortGetRequest',
                'Required parameter "coreReportbuilderColumnsSortGetRequest" was null or undefined when calling coreReportbuilderReportsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_reports_delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderColumnsSortGetRequestToJSON(requestParameters['coreReportbuilderColumnsSortGetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete report
     * Delete report
     */
    async coreReportbuilderReportsDelete(requestParameters: CoreReportbuilderReportsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreReportbuilderReportsDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get custom report
     * Get custom report
     */
    async coreReportbuilderReportsGetRaw(requestParameters: CoreReportbuilderReportsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderReportsGet200Response>> {
        if (requestParameters['coreReportbuilderReportsGetRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderReportsGetRequest',
                'Required parameter "coreReportbuilderReportsGetRequest" was null or undefined when calling coreReportbuilderReportsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_reports_get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderReportsGetRequestToJSON(requestParameters['coreReportbuilderReportsGetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderReportsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get custom report
     * Get custom report
     */
    async coreReportbuilderReportsGet(requestParameters: CoreReportbuilderReportsGetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderReportsGet200Response> {
        const response = await this.coreReportbuilderReportsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve custom report content
     * Retrieve custom report content
     */
    async coreReportbuilderRetrieveReportRaw(requestParameters: CoreReportbuilderRetrieveReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderRetrieveReport200Response>> {
        if (requestParameters['coreReportbuilderRetrieveReportRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderRetrieveReportRequest',
                'Required parameter "coreReportbuilderRetrieveReportRequest" was null or undefined when calling coreReportbuilderRetrieveReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_retrieve_report`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderRetrieveReportRequestToJSON(requestParameters['coreReportbuilderRetrieveReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderRetrieveReport200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve custom report content
     * Retrieve custom report content
     */
    async coreReportbuilderRetrieveReport(requestParameters: CoreReportbuilderRetrieveReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderRetrieveReport200Response> {
        const response = await this.coreReportbuilderRetrieveReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve system report content
     * Retrieve system report content
     */
    async coreReportbuilderRetrieveSystemReportRaw(requestParameters: CoreReportbuilderRetrieveSystemReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderRetrieveSystemReport200Response>> {
        if (requestParameters['coreReportbuilderRetrieveSystemReportRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderRetrieveSystemReportRequest',
                'Required parameter "coreReportbuilderRetrieveSystemReportRequest" was null or undefined when calling coreReportbuilderRetrieveSystemReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_retrieve_system_report`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderRetrieveSystemReportRequestToJSON(requestParameters['coreReportbuilderRetrieveSystemReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderRetrieveSystemReport200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve system report content
     * Retrieve system report content
     */
    async coreReportbuilderRetrieveSystemReport(requestParameters: CoreReportbuilderRetrieveSystemReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderRetrieveSystemReport200Response> {
        const response = await this.coreReportbuilderRetrieveSystemReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete schedule from report
     * Delete schedule from report
     */
    async coreReportbuilderSchedulesDeleteRaw(requestParameters: CoreReportbuilderSchedulesDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreReportbuilderSchedulesDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderSchedulesDeleteRequest',
                'Required parameter "coreReportbuilderSchedulesDeleteRequest" was null or undefined when calling coreReportbuilderSchedulesDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_schedules_delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderSchedulesDeleteRequestToJSON(requestParameters['coreReportbuilderSchedulesDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete schedule from report
     * Delete schedule from report
     */
    async coreReportbuilderSchedulesDelete(requestParameters: CoreReportbuilderSchedulesDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreReportbuilderSchedulesDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send report schedule
     * Send report schedule
     */
    async coreReportbuilderSchedulesSendRaw(requestParameters: CoreReportbuilderSchedulesSendOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreReportbuilderSchedulesSendRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderSchedulesSendRequest',
                'Required parameter "coreReportbuilderSchedulesSendRequest" was null or undefined when calling coreReportbuilderSchedulesSend().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_schedules_send`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderSchedulesSendRequestToJSON(requestParameters['coreReportbuilderSchedulesSendRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send report schedule
     * Send report schedule
     */
    async coreReportbuilderSchedulesSend(requestParameters: CoreReportbuilderSchedulesSendOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreReportbuilderSchedulesSendRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle state of report schedule
     * Toggle state of report schedule
     */
    async coreReportbuilderSchedulesToggleRaw(requestParameters: CoreReportbuilderSchedulesToggleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreReportbuilderSchedulesToggleRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderSchedulesToggleRequest',
                'Required parameter "coreReportbuilderSchedulesToggleRequest" was null or undefined when calling coreReportbuilderSchedulesToggle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_schedules_toggle`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderSchedulesToggleRequestToJSON(requestParameters['coreReportbuilderSchedulesToggleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Toggle state of report schedule
     * Toggle state of report schedule
     */
    async coreReportbuilderSchedulesToggle(requestParameters: CoreReportbuilderSchedulesToggleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreReportbuilderSchedulesToggleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set filter values for given report
     * Set filter values for given report
     */
    async coreReportbuilderSetFiltersRaw(requestParameters: CoreReportbuilderSetFiltersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreReportbuilderSetFiltersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderSetFiltersRequest',
                'Required parameter "coreReportbuilderSetFiltersRequest" was null or undefined when calling coreReportbuilderSetFilters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_set_filters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderSetFiltersRequestToJSON(requestParameters['coreReportbuilderSetFiltersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set filter values for given report
     * Set filter values for given report
     */
    async coreReportbuilderSetFilters(requestParameters: CoreReportbuilderSetFiltersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreReportbuilderSetFiltersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger custom report viewed
     * Trigger custom report viewed
     */
    async coreReportbuilderViewReportRaw(requestParameters: CoreReportbuilderViewReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreReportbuilderViewReport200Response>> {
        if (requestParameters['coreReportbuilderColumnsSortGetRequest'] == null) {
            throw new runtime.RequiredError(
                'coreReportbuilderColumnsSortGetRequest',
                'Required parameter "coreReportbuilderColumnsSortGetRequest" was null or undefined when calling coreReportbuilderViewReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_reportbuilder_view_report`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreReportbuilderColumnsSortGetRequestToJSON(requestParameters['coreReportbuilderColumnsSortGetRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreReportbuilderViewReport200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger custom report viewed
     * Trigger custom report viewed
     */
    async coreReportbuilderViewReport(requestParameters: CoreReportbuilderViewReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreReportbuilderViewReport200Response> {
        const response = await this.coreReportbuilderViewReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Manual role assignments.
     * Manual role assignments.
     */
    async coreRoleAssignRolesRaw(requestParameters: CoreRoleAssignRolesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreRoleAssignRolesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreRoleAssignRolesRequest',
                'Required parameter "coreRoleAssignRolesRequest" was null or undefined when calling coreRoleAssignRoles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_role_assign_roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreRoleAssignRolesRequestToJSON(requestParameters['coreRoleAssignRolesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Manual role assignments.
     * Manual role assignments.
     */
    async coreRoleAssignRoles(requestParameters: CoreRoleAssignRolesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreRoleAssignRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Manual role unassignments.
     * Manual role unassignments.
     */
    async coreRoleUnassignRolesRaw(requestParameters: CoreRoleUnassignRolesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreRoleUnassignRolesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreRoleUnassignRolesRequest',
                'Required parameter "coreRoleUnassignRolesRequest" was null or undefined when calling coreRoleUnassignRoles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_role_unassign_roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreRoleUnassignRolesRequestToJSON(requestParameters['coreRoleUnassignRolesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Manual role unassignments.
     * Manual role unassignments.
     */
    async coreRoleUnassignRoles(requestParameters: CoreRoleUnassignRolesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreRoleUnassignRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets relevant users for a search request.
     * Gets relevant users for a search request.
     */
    async coreSearchGetRelevantUsersRaw(requestParameters: CoreSearchGetRelevantUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreSearchGetRelevantUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreSearchGetRelevantUsersRequest',
                'Required parameter "coreSearchGetRelevantUsersRequest" was null or undefined when calling coreSearchGetRelevantUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_search_get_relevant_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreSearchGetRelevantUsersRequestToJSON(requestParameters['coreSearchGetRelevantUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets relevant users for a search request.
     * Gets relevant users for a search request.
     */
    async coreSearchGetRelevantUsers(requestParameters: CoreSearchGetRelevantUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreSearchGetRelevantUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get search results.
     * Get search results.
     */
    async coreSearchGetResultsRaw(requestParameters: CoreSearchGetResultsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreSearchGetResults200Response>> {
        if (requestParameters['coreSearchGetResultsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreSearchGetResultsRequest',
                'Required parameter "coreSearchGetResultsRequest" was null or undefined when calling coreSearchGetResults().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_search_get_results`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreSearchGetResultsRequestToJSON(requestParameters['coreSearchGetResultsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreSearchGetResults200ResponseFromJSON(jsonValue));
    }

    /**
     * Get search results.
     * Get search results.
     */
    async coreSearchGetResults(requestParameters: CoreSearchGetResultsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreSearchGetResults200Response> {
        const response = await this.coreSearchGetResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get search areas.
     * Get search areas.
     */
    async coreSearchGetSearchAreasListRaw(requestParameters: CoreSearchGetSearchAreasListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreSearchGetSearchAreasList200Response>> {
        if (requestParameters['coreSearchGetSearchAreasListRequest'] == null) {
            throw new runtime.RequiredError(
                'coreSearchGetSearchAreasListRequest',
                'Required parameter "coreSearchGetSearchAreasListRequest" was null or undefined when calling coreSearchGetSearchAreasList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_search_get_search_areas_list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreSearchGetSearchAreasListRequestToJSON(requestParameters['coreSearchGetSearchAreasListRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreSearchGetSearchAreasList200ResponseFromJSON(jsonValue));
    }

    /**
     * Get search areas.
     * Get search areas.
     */
    async coreSearchGetSearchAreasList(requestParameters: CoreSearchGetSearchAreasListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreSearchGetSearchAreasList200Response> {
        const response = await this.coreSearchGetSearchAreasListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get top search results.
     * Get top search results.
     */
    async coreSearchGetTopResultsRaw(requestParameters: CoreSearchGetTopResultsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreSearchGetTopResults200Response>> {
        if (requestParameters['coreSearchGetTopResultsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreSearchGetTopResultsRequest',
                'Required parameter "coreSearchGetTopResultsRequest" was null or undefined when calling coreSearchGetTopResults().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_search_get_top_results`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreSearchGetTopResultsRequestToJSON(requestParameters['coreSearchGetTopResultsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreSearchGetTopResults200ResponseFromJSON(jsonValue));
    }

    /**
     * Get top search results.
     * Get top search results.
     */
    async coreSearchGetTopResults(requestParameters: CoreSearchGetTopResultsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreSearchGetTopResults200Response> {
        const response = await this.coreSearchGetTopResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger view search results event.
     * Trigger view search results event.
     */
    async coreSearchViewResultsRaw(requestParameters: CoreSearchViewResultsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['coreSearchViewResultsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreSearchViewResultsRequest',
                'Required parameter "coreSearchViewResultsRequest" was null or undefined when calling coreSearchViewResults().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_search_view_results`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreSearchViewResultsRequestToJSON(requestParameters['coreSearchViewResultsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger view search results event.
     * Trigger view search results event.
     */
    async coreSearchViewResults(requestParameters: CoreSearchViewResultsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.coreSearchViewResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count the seconds remaining in this session
     * Count the seconds remaining in this session
     */
    async coreSessionTimeRemainingRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreSessionTimeRemaining200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_session_time_remaining`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreSessionTimeRemaining200ResponseFromJSON(jsonValue));
    }

    /**
     * Count the seconds remaining in this session
     * Count the seconds remaining in this session
     */
    async coreSessionTimeRemaining(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreSessionTimeRemaining200Response> {
        const response = await this.coreSessionTimeRemainingRaw(initOverrides);
        return await response.value();
    }

    /**
     * Keep the users session alive
     * Keep the users session alive
     */
    async coreSessionTouchRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_session_touch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Keep the users session alive
     * Keep the users session alive
     */
    async coreSessionTouch(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreSessionTouchRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the dynamic table content raw html
     * Get the dynamic table content raw html
     */
    async coreTableGetDynamicTableContentRaw(requestParameters: CoreTableGetDynamicTableContentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreTableGetDynamicTableContent200Response>> {
        if (requestParameters['coreTableGetDynamicTableContentRequest'] == null) {
            throw new runtime.RequiredError(
                'coreTableGetDynamicTableContentRequest',
                'Required parameter "coreTableGetDynamicTableContentRequest" was null or undefined when calling coreTableGetDynamicTableContent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_table_get_dynamic_table_content`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreTableGetDynamicTableContentRequestToJSON(requestParameters['coreTableGetDynamicTableContentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreTableGetDynamicTableContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the dynamic table content raw html
     * Get the dynamic table content raw html
     */
    async coreTableGetDynamicTableContent(requestParameters: CoreTableGetDynamicTableContentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreTableGetDynamicTableContent200Response> {
        const response = await this.coreTableGetDynamicTableContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves existing tag areas.
     * Retrieves existing tag areas.
     */
    async coreTagGetTagAreasRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreTagGetTagAreas200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_tag_get_tag_areas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreTagGetTagAreas200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves existing tag areas.
     * Retrieves existing tag areas.
     */
    async coreTagGetTagAreas(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreTagGetTagAreas200Response> {
        const response = await this.coreTagGetTagAreasRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a tag cloud for the given collection and/or query search.
     * Retrieves a tag cloud for the given collection and/or query search.
     */
    async coreTagGetTagCloudRaw(requestParameters: CoreTagGetTagCloudOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreTagGetTagCloud200Response>> {
        if (requestParameters['coreTagGetTagCloudRequest'] == null) {
            throw new runtime.RequiredError(
                'coreTagGetTagCloudRequest',
                'Required parameter "coreTagGetTagCloudRequest" was null or undefined when calling coreTagGetTagCloud().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_tag_get_tag_cloud`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreTagGetTagCloudRequestToJSON(requestParameters['coreTagGetTagCloudRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreTagGetTagCloud200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a tag cloud for the given collection and/or query search.
     * Retrieves a tag cloud for the given collection and/or query search.
     */
    async coreTagGetTagCloud(requestParameters: CoreTagGetTagCloudOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreTagGetTagCloud200Response> {
        const response = await this.coreTagGetTagCloudRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves existing tag collections.
     * Retrieves existing tag collections.
     */
    async coreTagGetTagCollectionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreTagGetTagCollections200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_tag_get_tag_collections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreTagGetTagCollections200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves existing tag collections.
     * Retrieves existing tag collections.
     */
    async coreTagGetTagCollections(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreTagGetTagCollections200Response> {
        const response = await this.coreTagGetTagCollectionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets tag index page for one tag and one tag area
     * Gets tag index page for one tag and one tag area
     */
    async coreTagGetTagindexRaw(requestParameters: CoreTagGetTagindexOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreTagGetTagindex200Response>> {
        if (requestParameters['coreTagGetTagindexRequest'] == null) {
            throw new runtime.RequiredError(
                'coreTagGetTagindexRequest',
                'Required parameter "coreTagGetTagindexRequest" was null or undefined when calling coreTagGetTagindex().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_tag_get_tagindex`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreTagGetTagindexRequestToJSON(requestParameters['coreTagGetTagindexRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreTagGetTagindex200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets tag index page for one tag and one tag area
     * Gets tag index page for one tag and one tag area
     */
    async coreTagGetTagindex(requestParameters: CoreTagGetTagindexOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreTagGetTagindex200Response> {
        const response = await this.coreTagGetTagindexRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets tag index page per different areas.
     * Gets tag index page per different areas.
     */
    async coreTagGetTagindexPerAreaRaw(requestParameters: CoreTagGetTagindexPerAreaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreTagGetTagindexPerAreaRequest'] == null) {
            throw new runtime.RequiredError(
                'coreTagGetTagindexPerAreaRequest',
                'Required parameter "coreTagGetTagindexPerAreaRequest" was null or undefined when calling coreTagGetTagindexPerArea().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_tag_get_tagindex_per_area`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreTagGetTagindexPerAreaRequestToJSON(requestParameters['coreTagGetTagindexPerAreaRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets tag index page per different areas.
     * Gets tag index page per different areas.
     */
    async coreTagGetTagindexPerArea(requestParameters: CoreTagGetTagindexPerAreaOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreTagGetTagindexPerAreaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets tags by their ids
     * Gets tags by their ids
     */
    async coreTagGetTagsRaw(requestParameters: CoreTagGetTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreTagGetTags200Response>> {
        if (requestParameters['coreTagGetTagsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreTagGetTagsRequest',
                'Required parameter "coreTagGetTagsRequest" was null or undefined when calling coreTagGetTags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_tag_get_tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreTagGetTagsRequestToJSON(requestParameters['coreTagGetTagsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreTagGetTags200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets tags by their ids
     * Gets tags by their ids
     */
    async coreTagGetTags(requestParameters: CoreTagGetTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreTagGetTags200Response> {
        const response = await this.coreTagGetTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates tags
     * Updates tags
     */
    async coreTagUpdateTagsRaw(requestParameters: CoreTagUpdateTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCohortAddCohortMembers200Response>> {
        if (requestParameters['coreTagUpdateTagsRequest'] == null) {
            throw new runtime.RequiredError(
                'coreTagUpdateTagsRequest',
                'Required parameter "coreTagUpdateTagsRequest" was null or undefined when calling coreTagUpdateTags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_tag_update_tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreTagUpdateTagsRequestToJSON(requestParameters['coreTagUpdateTagsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCohortAddCohortMembers200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates tags
     * Updates tags
     */
    async coreTagUpdateTags(requestParameters: CoreTagUpdateTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCohortAddCohortMembers200Response> {
        const response = await this.coreTagUpdateTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generic service to update title
     * Generic service to update title
     */
    async coreUpdateInplaceEditableRaw(requestParameters: CoreUpdateInplaceEditableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreUpdateInplaceEditable200Response>> {
        if (requestParameters['coreUpdateInplaceEditableRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUpdateInplaceEditableRequest',
                'Required parameter "coreUpdateInplaceEditableRequest" was null or undefined when calling coreUpdateInplaceEditable().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_update_inplace_editable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUpdateInplaceEditableRequestToJSON(requestParameters['coreUpdateInplaceEditableRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreUpdateInplaceEditable200ResponseFromJSON(jsonValue));
    }

    /**
     * Generic service to update title
     * Generic service to update title
     */
    async coreUpdateInplaceEditable(requestParameters: CoreUpdateInplaceEditableOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreUpdateInplaceEditable200Response> {
        const response = await this.coreUpdateInplaceEditableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store mobile user devices information for PUSH Notifications.
     * Store mobile user devices information for PUSH Notifications.
     */
    async coreUserAddUserDeviceRaw(requestParameters: CoreUserAddUserDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreUserAddUserDeviceRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserAddUserDeviceRequest',
                'Required parameter "coreUserAddUserDeviceRequest" was null or undefined when calling coreUserAddUserDevice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_add_user_device`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserAddUserDeviceRequestToJSON(requestParameters['coreUserAddUserDeviceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Store mobile user devices information for PUSH Notifications.
     * Store mobile user devices information for PUSH Notifications.
     */
    async coreUserAddUserDevice(requestParameters: CoreUserAddUserDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreUserAddUserDeviceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy files from a draft area to users private files area.
     * Copy files from a draft area to users private files area.
     */
    async coreUserAddUserPrivateFilesRaw(requestParameters: CoreUserAddUserPrivateFilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreUserAddUserPrivateFilesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserAddUserPrivateFilesRequest',
                'Required parameter "coreUserAddUserPrivateFilesRequest" was null or undefined when calling coreUserAddUserPrivateFiles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_add_user_private_files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserAddUserPrivateFilesRequestToJSON(requestParameters['coreUserAddUserPrivateFilesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Copy files from a draft area to users private files area.
     * Copy files from a draft area to users private files area.
     */
    async coreUserAddUserPrivateFiles(requestParameters: CoreUserAddUserPrivateFilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreUserAddUserPrivateFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Agree the site policy for the current user.
     * Agree the site policy for the current user.
     */
    async coreUserAgreeSitePolicyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreUserAgreeSitePolicy200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_agree_site_policy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreUserAgreeSitePolicy200ResponseFromJSON(jsonValue));
    }

    /**
     * Agree the site policy for the current user.
     * Agree the site policy for the current user.
     */
    async coreUserAgreeSitePolicy(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreUserAgreeSitePolicy200Response> {
        const response = await this.coreUserAgreeSitePolicyRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create users.
     * Create users.
     */
    async coreUserCreateUsersRaw(requestParameters: CoreUserCreateUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreUserCreateUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserCreateUsersRequest',
                'Required parameter "coreUserCreateUsersRequest" was null or undefined when calling coreUserCreateUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_create_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserCreateUsersRequestToJSON(requestParameters['coreUserCreateUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create users.
     * Create users.
     */
    async coreUserCreateUsers(requestParameters: CoreUserCreateUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreUserCreateUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete users.
     * Delete users.
     */
    async coreUserDeleteUsersRaw(requestParameters: CoreUserDeleteUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreUserDeleteUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserDeleteUsersRequest',
                'Required parameter "coreUserDeleteUsersRequest" was null or undefined when calling coreUserDeleteUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_delete_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserDeleteUsersRequestToJSON(requestParameters['coreUserDeleteUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete users.
     * Delete users.
     */
    async coreUserDeleteUsers(requestParameters: CoreUserDeleteUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreUserDeleteUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get course user profiles (each of the profils matching a course id and a user id),.
     * Get course user profiles (each of the profils matching a course id and a user id),.
     */
    async coreUserGetCourseUserProfilesRaw(requestParameters: CoreUserGetCourseUserProfilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreUserGetCourseUserProfilesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserGetCourseUserProfilesRequest',
                'Required parameter "coreUserGetCourseUserProfilesRequest" was null or undefined when calling coreUserGetCourseUserProfiles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_get_course_user_profiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserGetCourseUserProfilesRequestToJSON(requestParameters['coreUserGetCourseUserProfilesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get course user profiles (each of the profils matching a course id and a user id),.
     * Get course user profiles (each of the profils matching a course id and a user id),.
     */
    async coreUserGetCourseUserProfiles(requestParameters: CoreUserGetCourseUserProfilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreUserGetCourseUserProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns general information about files in the user private files area.
     * Returns general information about files in the user private files area.
     */
    async coreUserGetPrivateFilesInfoRaw(requestParameters: CoreUserGetPrivateFilesInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreUserGetPrivateFilesInfo200Response>> {
        if (requestParameters['coreUserGetPrivateFilesInfoRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserGetPrivateFilesInfoRequest',
                'Required parameter "coreUserGetPrivateFilesInfoRequest" was null or undefined when calling coreUserGetPrivateFilesInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_get_private_files_info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserGetPrivateFilesInfoRequestToJSON(requestParameters['coreUserGetPrivateFilesInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreUserGetPrivateFilesInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns general information about files in the user private files area.
     * Returns general information about files in the user private files area.
     */
    async coreUserGetPrivateFilesInfo(requestParameters: CoreUserGetPrivateFilesInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreUserGetPrivateFilesInfo200Response> {
        const response = await this.coreUserGetPrivateFilesInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return user preferences.
     * Return user preferences.
     */
    async coreUserGetUserPreferencesRaw(requestParameters: CoreUserGetUserPreferencesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreUserGetUserPreferences200Response>> {
        if (requestParameters['coreUserGetUserPreferencesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserGetUserPreferencesRequest',
                'Required parameter "coreUserGetUserPreferencesRequest" was null or undefined when calling coreUserGetUserPreferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_get_user_preferences`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserGetUserPreferencesRequestToJSON(requestParameters['coreUserGetUserPreferencesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreUserGetUserPreferences200ResponseFromJSON(jsonValue));
    }

    /**
     * Return user preferences.
     * Return user preferences.
     */
    async coreUserGetUserPreferences(requestParameters: CoreUserGetUserPreferencesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreUserGetUserPreferences200Response> {
        const response = await this.coreUserGetUserPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * search for users matching the parameters
     * search for users matching the parameters
     */
    async coreUserGetUsersRaw(requestParameters: CoreUserGetUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreUserGetUsers200Response>> {
        if (requestParameters['coreUserGetUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserGetUsersRequest',
                'Required parameter "coreUserGetUsersRequest" was null or undefined when calling coreUserGetUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_get_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserGetUsersRequestToJSON(requestParameters['coreUserGetUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreUserGetUsers200ResponseFromJSON(jsonValue));
    }

    /**
     * search for users matching the parameters
     * search for users matching the parameters
     */
    async coreUserGetUsers(requestParameters: CoreUserGetUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreUserGetUsers200Response> {
        const response = await this.coreUserGetUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve users\' information for a specified unique field - If you want to do a user search, use core_user_get_users() or core_user_search_identity().
     * Retrieve users\' information for a specified unique field - If you want to do a user search, use core_user_get_users() or core_user_search_identity().
     */
    async coreUserGetUsersByFieldRaw(requestParameters: CoreUserGetUsersByFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreUserGetUsersByFieldRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserGetUsersByFieldRequest',
                'Required parameter "coreUserGetUsersByFieldRequest" was null or undefined when calling coreUserGetUsersByField().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_get_users_by_field`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserGetUsersByFieldRequestToJSON(requestParameters['coreUserGetUsersByFieldRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve users\' information for a specified unique field - If you want to do a user search, use core_user_get_users() or core_user_search_identity().
     * Retrieve users\' information for a specified unique field - If you want to do a user search, use core_user_get_users() or core_user_search_identity().
     */
    async coreUserGetUsersByField(requestParameters: CoreUserGetUsersByFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreUserGetUsersByFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a user device from the Moodle database.
     * Remove a user device from the Moodle database.
     */
    async coreUserRemoveUserDeviceRaw(requestParameters: CoreUserRemoveUserDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreUserRemoveUserDevice200Response>> {
        if (requestParameters['coreUserRemoveUserDeviceRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserRemoveUserDeviceRequest',
                'Required parameter "coreUserRemoveUserDeviceRequest" was null or undefined when calling coreUserRemoveUserDevice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_remove_user_device`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserRemoveUserDeviceRequestToJSON(requestParameters['coreUserRemoveUserDeviceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreUserRemoveUserDevice200ResponseFromJSON(jsonValue));
    }

    /**
     * Remove a user device from the Moodle database.
     * Remove a user device from the Moodle database.
     */
    async coreUserRemoveUserDevice(requestParameters: CoreUserRemoveUserDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreUserRemoveUserDevice200Response> {
        const response = await this.coreUserRemoveUserDeviceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return list of users identities matching the given criteria in their name or other identity fields.
     * Return list of users identities matching the given criteria in their name or other identity fields.
     */
    async coreUserSearchIdentityRaw(requestParameters: CoreUserSearchIdentityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreUserSearchIdentity200Response>> {
        if (requestParameters['coreUserSearchIdentityRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserSearchIdentityRequest',
                'Required parameter "coreUserSearchIdentityRequest" was null or undefined when calling coreUserSearchIdentity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_search_identity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserSearchIdentityRequestToJSON(requestParameters['coreUserSearchIdentityRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreUserSearchIdentity200ResponseFromJSON(jsonValue));
    }

    /**
     * Return list of users identities matching the given criteria in their name or other identity fields.
     * Return list of users identities matching the given criteria in their name or other identity fields.
     */
    async coreUserSearchIdentity(requestParameters: CoreUserSearchIdentityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreUserSearchIdentity200Response> {
        const response = await this.coreUserSearchIdentityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set user preferences.
     * Set user preferences.
     */
    async coreUserSetUserPreferencesRaw(requestParameters: CoreUserSetUserPreferencesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreUserSetUserPreferences200Response>> {
        if (requestParameters['coreUserSetUserPreferencesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserSetUserPreferencesRequest',
                'Required parameter "coreUserSetUserPreferencesRequest" was null or undefined when calling coreUserSetUserPreferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_set_user_preferences`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserSetUserPreferencesRequestToJSON(requestParameters['coreUserSetUserPreferencesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreUserSetUserPreferences200ResponseFromJSON(jsonValue));
    }

    /**
     * Set user preferences.
     * Set user preferences.
     */
    async coreUserSetUserPreferences(requestParameters: CoreUserSetUserPreferencesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreUserSetUserPreferences200Response> {
        const response = await this.coreUserSetUserPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update or delete the user picture in the site
     * Update or delete the user picture in the site
     */
    async coreUserUpdatePictureRaw(requestParameters: CoreUserUpdatePictureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreUserUpdatePicture200Response>> {
        if (requestParameters['coreUserUpdatePictureRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserUpdatePictureRequest',
                'Required parameter "coreUserUpdatePictureRequest" was null or undefined when calling coreUserUpdatePicture().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_update_picture`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserUpdatePictureRequestToJSON(requestParameters['coreUserUpdatePictureRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreUserUpdatePicture200ResponseFromJSON(jsonValue));
    }

    /**
     * Update or delete the user picture in the site
     * Update or delete the user picture in the site
     */
    async coreUserUpdatePicture(requestParameters: CoreUserUpdatePictureOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreUserUpdatePicture200Response> {
        const response = await this.coreUserUpdatePictureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store mobile user public key.
     * Store mobile user public key.
     */
    async coreUserUpdateUserDevicePublicKeyRaw(requestParameters: CoreUserUpdateUserDevicePublicKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreUserUpdateUserDevicePublicKey200Response>> {
        if (requestParameters['coreUserUpdateUserDevicePublicKeyRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserUpdateUserDevicePublicKeyRequest',
                'Required parameter "coreUserUpdateUserDevicePublicKeyRequest" was null or undefined when calling coreUserUpdateUserDevicePublicKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_update_user_device_public_key`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserUpdateUserDevicePublicKeyRequestToJSON(requestParameters['coreUserUpdateUserDevicePublicKeyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreUserUpdateUserDevicePublicKey200ResponseFromJSON(jsonValue));
    }

    /**
     * Store mobile user public key.
     * Store mobile user public key.
     */
    async coreUserUpdateUserDevicePublicKey(requestParameters: CoreUserUpdateUserDevicePublicKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreUserUpdateUserDevicePublicKey200Response> {
        const response = await this.coreUserUpdateUserDevicePublicKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a user\'s preferences
     * Update a user\'s preferences
     */
    async coreUserUpdateUserPreferencesRaw(requestParameters: CoreUserUpdateUserPreferencesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreUserUpdateUserPreferencesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserUpdateUserPreferencesRequest',
                'Required parameter "coreUserUpdateUserPreferencesRequest" was null or undefined when calling coreUserUpdateUserPreferences().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_update_user_preferences`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserUpdateUserPreferencesRequestToJSON(requestParameters['coreUserUpdateUserPreferencesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update a user\'s preferences
     * Update a user\'s preferences
     */
    async coreUserUpdateUserPreferences(requestParameters: CoreUserUpdateUserPreferencesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreUserUpdateUserPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update users.
     * Update users.
     */
    async coreUserUpdateUsersRaw(requestParameters: CoreUserUpdateUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCohortAddCohortMembers200Response>> {
        if (requestParameters['coreUserUpdateUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserUpdateUsersRequest',
                'Required parameter "coreUserUpdateUsersRequest" was null or undefined when calling coreUserUpdateUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_update_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserUpdateUsersRequestToJSON(requestParameters['coreUserUpdateUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCohortAddCohortMembers200ResponseFromJSON(jsonValue));
    }

    /**
     * Update users.
     * Update users.
     */
    async coreUserUpdateUsers(requestParameters: CoreUserUpdateUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCohortAddCohortMembers200Response> {
        const response = await this.coreUserUpdateUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Simulates the web-interface view of user/index.php (triggering events),.
     * Simulates the web-interface view of user/index.php (triggering events),.
     */
    async coreUserViewUserListRaw(requestParameters: CoreUserViewUserListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['coreUserViewUserListRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserViewUserListRequest',
                'Required parameter "coreUserViewUserListRequest" was null or undefined when calling coreUserViewUserList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_view_user_list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserViewUserListRequestToJSON(requestParameters['coreUserViewUserListRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Simulates the web-interface view of user/index.php (triggering events),.
     * Simulates the web-interface view of user/index.php (triggering events),.
     */
    async coreUserViewUserList(requestParameters: CoreUserViewUserListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.coreUserViewUserListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Simulates the web-interface view of user/view.php and user/profile.php (triggering events),.
     * Simulates the web-interface view of user/view.php and user/profile.php (triggering events),.
     */
    async coreUserViewUserProfileRaw(requestParameters: CoreUserViewUserProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['coreUserViewUserProfileRequest'] == null) {
            throw new runtime.RequiredError(
                'coreUserViewUserProfileRequest',
                'Required parameter "coreUserViewUserProfileRequest" was null or undefined when calling coreUserViewUserProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_user_view_user_profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreUserViewUserProfileRequestToJSON(requestParameters['coreUserViewUserProfileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Simulates the web-interface view of user/view.php and user/profile.php (triggering events),.
     * Simulates the web-interface view of user/view.php and user/profile.php (triggering events),.
     */
    async coreUserViewUserProfile(requestParameters: CoreUserViewUserProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.coreUserViewUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return some site info / user info / list web service functions
     * Return some site info / user info / list web service functions
     */
    async coreWebserviceGetSiteInfoRaw(requestParameters: CoreWebserviceGetSiteInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreWebserviceGetSiteInfo200Response>> {
        if (requestParameters['coreWebserviceGetSiteInfoRequest'] == null) {
            throw new runtime.RequiredError(
                'coreWebserviceGetSiteInfoRequest',
                'Required parameter "coreWebserviceGetSiteInfoRequest" was null or undefined when calling coreWebserviceGetSiteInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_webservice_get_site_info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreWebserviceGetSiteInfoRequestToJSON(requestParameters['coreWebserviceGetSiteInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreWebserviceGetSiteInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Return some site info / user info / list web service functions
     * Return some site info / user info / list web service functions
     */
    async coreWebserviceGetSiteInfo(requestParameters: CoreWebserviceGetSiteInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreWebserviceGetSiteInfo200Response> {
        const response = await this.coreWebserviceGetSiteInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an xAPI state data from an activityId.
     * Delete an xAPI state data from an activityId.
     */
    async coreXapiDeleteStateRaw(requestParameters: CoreXapiDeleteStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreXapiDeleteStateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreXapiDeleteStateRequest',
                'Required parameter "coreXapiDeleteStateRequest" was null or undefined when calling coreXapiDeleteState().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_xapi_delete_state`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreXapiDeleteStateRequestToJSON(requestParameters['coreXapiDeleteStateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete an xAPI state data from an activityId.
     * Delete an xAPI state data from an activityId.
     */
    async coreXapiDeleteState(requestParameters: CoreXapiDeleteStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreXapiDeleteStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete all xAPI state data from an activityId.
     * Delete all xAPI state data from an activityId.
     */
    async coreXapiDeleteStatesRaw(requestParameters: CoreXapiDeleteStatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreXapiDeleteStatesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreXapiDeleteStatesRequest',
                'Required parameter "coreXapiDeleteStatesRequest" was null or undefined when calling coreXapiDeleteStates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_xapi_delete_states`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreXapiDeleteStatesRequestToJSON(requestParameters['coreXapiDeleteStatesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete all xAPI state data from an activityId.
     * Delete all xAPI state data from an activityId.
     */
    async coreXapiDeleteStates(requestParameters: CoreXapiDeleteStatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreXapiDeleteStatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an xAPI state data from an activityId.
     * Get an xAPI state data from an activityId.
     */
    async coreXapiGetStateRaw(requestParameters: CoreXapiGetStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreXapiGetStateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreXapiGetStateRequest',
                'Required parameter "coreXapiGetStateRequest" was null or undefined when calling coreXapiGetState().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_xapi_get_state`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreXapiGetStateRequestToJSON(requestParameters['coreXapiGetStateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get an xAPI state data from an activityId.
     * Get an xAPI state data from an activityId.
     */
    async coreXapiGetState(requestParameters: CoreXapiGetStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreXapiGetStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all state ID from an activityId.
     * Get all state ID from an activityId.
     */
    async coreXapiGetStatesRaw(requestParameters: CoreXapiGetStatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreXapiGetStatesRequest'] == null) {
            throw new runtime.RequiredError(
                'coreXapiGetStatesRequest',
                'Required parameter "coreXapiGetStatesRequest" was null or undefined when calling coreXapiGetStates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_xapi_get_states`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreXapiGetStatesRequestToJSON(requestParameters['coreXapiGetStatesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all state ID from an activityId.
     * Get all state ID from an activityId.
     */
    async coreXapiGetStates(requestParameters: CoreXapiGetStatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreXapiGetStatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Post an xAPI state into an activityId.
     * Post an xAPI state into an activityId.
     */
    async coreXapiPostStateRaw(requestParameters: CoreXapiPostStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreXapiPostStateRequest'] == null) {
            throw new runtime.RequiredError(
                'coreXapiPostStateRequest',
                'Required parameter "coreXapiPostStateRequest" was null or undefined when calling coreXapiPostState().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_xapi_post_state`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreXapiPostStateRequestToJSON(requestParameters['coreXapiPostStateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Post an xAPI state into an activityId.
     * Post an xAPI state into an activityId.
     */
    async coreXapiPostState(requestParameters: CoreXapiPostStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreXapiPostStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Post an xAPI statement.
     * Post an xAPI statement.
     */
    async coreXapiStatementPostRaw(requestParameters: CoreXapiStatementPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreXapiStatementPostRequest'] == null) {
            throw new runtime.RequiredError(
                'coreXapiStatementPostRequest',
                'Required parameter "coreXapiStatementPostRequest" was null or undefined when calling coreXapiStatementPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/core_xapi_statement_post`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreXapiStatementPostRequestToJSON(requestParameters['coreXapiStatementPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Post an xAPI statement.
     * Post an xAPI statement.
     */
    async coreXapiStatementPost(requestParameters: CoreXapiStatementPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.coreXapiStatementPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
