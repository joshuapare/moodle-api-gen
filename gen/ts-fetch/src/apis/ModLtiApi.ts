/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  ErrorResponse,
  ModChatGetChatsByCoursesRequest,
  ModLtiCreateToolProxy200Response,
  ModLtiCreateToolProxyRequest,
  ModLtiCreateToolType200Response,
  ModLtiCreateToolTypeRequest,
  ModLtiDeleteCourseToolTypeRequest,
  ModLtiDeleteToolProxy200Response,
  ModLtiDeleteToolProxyRequest,
  ModLtiDeleteToolTypeRequest,
  ModLtiGetLtisByCourses200Response,
  ModLtiGetToolLaunchData200Response,
  ModLtiGetToolLaunchDataRequest,
  ModLtiGetToolProxiesRequest,
  ModLtiGetToolProxyRegistrationRequest200Response,
  ModLtiGetToolTypesAndProxies200Response,
  ModLtiGetToolTypesAndProxiesCount200Response,
  ModLtiGetToolTypesAndProxiesCountRequest,
  ModLtiGetToolTypesAndProxiesRequest,
  ModLtiGetToolTypesRequest,
  ModLtiIsCartridge200Response,
  ModLtiIsCartridgeRequest,
  ModLtiToggleShowinactivitychooserRequest,
  ModLtiUpdateToolType200Response,
  ModLtiUpdateToolTypeRequest,
  ModLtiViewLtiRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModChatGetChatsByCoursesRequestFromJSON,
    ModChatGetChatsByCoursesRequestToJSON,
    ModLtiCreateToolProxy200ResponseFromJSON,
    ModLtiCreateToolProxy200ResponseToJSON,
    ModLtiCreateToolProxyRequestFromJSON,
    ModLtiCreateToolProxyRequestToJSON,
    ModLtiCreateToolType200ResponseFromJSON,
    ModLtiCreateToolType200ResponseToJSON,
    ModLtiCreateToolTypeRequestFromJSON,
    ModLtiCreateToolTypeRequestToJSON,
    ModLtiDeleteCourseToolTypeRequestFromJSON,
    ModLtiDeleteCourseToolTypeRequestToJSON,
    ModLtiDeleteToolProxy200ResponseFromJSON,
    ModLtiDeleteToolProxy200ResponseToJSON,
    ModLtiDeleteToolProxyRequestFromJSON,
    ModLtiDeleteToolProxyRequestToJSON,
    ModLtiDeleteToolTypeRequestFromJSON,
    ModLtiDeleteToolTypeRequestToJSON,
    ModLtiGetLtisByCourses200ResponseFromJSON,
    ModLtiGetLtisByCourses200ResponseToJSON,
    ModLtiGetToolLaunchData200ResponseFromJSON,
    ModLtiGetToolLaunchData200ResponseToJSON,
    ModLtiGetToolLaunchDataRequestFromJSON,
    ModLtiGetToolLaunchDataRequestToJSON,
    ModLtiGetToolProxiesRequestFromJSON,
    ModLtiGetToolProxiesRequestToJSON,
    ModLtiGetToolProxyRegistrationRequest200ResponseFromJSON,
    ModLtiGetToolProxyRegistrationRequest200ResponseToJSON,
    ModLtiGetToolTypesAndProxies200ResponseFromJSON,
    ModLtiGetToolTypesAndProxies200ResponseToJSON,
    ModLtiGetToolTypesAndProxiesCount200ResponseFromJSON,
    ModLtiGetToolTypesAndProxiesCount200ResponseToJSON,
    ModLtiGetToolTypesAndProxiesCountRequestFromJSON,
    ModLtiGetToolTypesAndProxiesCountRequestToJSON,
    ModLtiGetToolTypesAndProxiesRequestFromJSON,
    ModLtiGetToolTypesAndProxiesRequestToJSON,
    ModLtiGetToolTypesRequestFromJSON,
    ModLtiGetToolTypesRequestToJSON,
    ModLtiIsCartridge200ResponseFromJSON,
    ModLtiIsCartridge200ResponseToJSON,
    ModLtiIsCartridgeRequestFromJSON,
    ModLtiIsCartridgeRequestToJSON,
    ModLtiToggleShowinactivitychooserRequestFromJSON,
    ModLtiToggleShowinactivitychooserRequestToJSON,
    ModLtiUpdateToolType200ResponseFromJSON,
    ModLtiUpdateToolType200ResponseToJSON,
    ModLtiUpdateToolTypeRequestFromJSON,
    ModLtiUpdateToolTypeRequestToJSON,
    ModLtiViewLtiRequestFromJSON,
    ModLtiViewLtiRequestToJSON,
} from '../models/index';

export interface ModLtiCreateToolProxyOperationRequest {
    modLtiCreateToolProxyRequest: ModLtiCreateToolProxyRequest;
}

export interface ModLtiCreateToolTypeOperationRequest {
    modLtiCreateToolTypeRequest: ModLtiCreateToolTypeRequest;
}

export interface ModLtiDeleteCourseToolTypeOperationRequest {
    modLtiDeleteCourseToolTypeRequest: ModLtiDeleteCourseToolTypeRequest;
}

export interface ModLtiDeleteToolProxyOperationRequest {
    modLtiDeleteToolProxyRequest: ModLtiDeleteToolProxyRequest;
}

export interface ModLtiDeleteToolTypeOperationRequest {
    modLtiDeleteToolTypeRequest: ModLtiDeleteToolTypeRequest;
}

export interface ModLtiGetLtisByCoursesRequest {
    modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest;
}

export interface ModLtiGetToolLaunchDataOperationRequest {
    modLtiGetToolLaunchDataRequest: ModLtiGetToolLaunchDataRequest;
}

export interface ModLtiGetToolProxiesOperationRequest {
    modLtiGetToolProxiesRequest: ModLtiGetToolProxiesRequest;
}

export interface ModLtiGetToolProxyRegistrationRequestRequest {
    modLtiDeleteToolProxyRequest: ModLtiDeleteToolProxyRequest;
}

export interface ModLtiGetToolTypesOperationRequest {
    modLtiGetToolTypesRequest: ModLtiGetToolTypesRequest;
}

export interface ModLtiGetToolTypesAndProxiesOperationRequest {
    modLtiGetToolTypesAndProxiesRequest: ModLtiGetToolTypesAndProxiesRequest;
}

export interface ModLtiGetToolTypesAndProxiesCountOperationRequest {
    modLtiGetToolTypesAndProxiesCountRequest: ModLtiGetToolTypesAndProxiesCountRequest;
}

export interface ModLtiIsCartridgeOperationRequest {
    modLtiIsCartridgeRequest: ModLtiIsCartridgeRequest;
}

export interface ModLtiToggleShowinactivitychooserOperationRequest {
    modLtiToggleShowinactivitychooserRequest: ModLtiToggleShowinactivitychooserRequest;
}

export interface ModLtiUpdateToolTypeOperationRequest {
    modLtiUpdateToolTypeRequest: ModLtiUpdateToolTypeRequest;
}

export interface ModLtiViewLtiOperationRequest {
    modLtiViewLtiRequest: ModLtiViewLtiRequest;
}

/**
 * 
 */
export class ModLtiApi extends runtime.BaseAPI {

    /**
     * Create a tool proxy
     * Create a tool proxy
     */
    async modLtiCreateToolProxyRaw(requestParameters: ModLtiCreateToolProxyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLtiCreateToolProxy200Response>> {
        if (requestParameters['modLtiCreateToolProxyRequest'] == null) {
            throw new runtime.RequiredError(
                'modLtiCreateToolProxyRequest',
                'Required parameter "modLtiCreateToolProxyRequest" was null or undefined when calling modLtiCreateToolProxy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_create_tool_proxy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLtiCreateToolProxyRequestToJSON(requestParameters['modLtiCreateToolProxyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLtiCreateToolProxy200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a tool proxy
     * Create a tool proxy
     */
    async modLtiCreateToolProxy(requestParameters: ModLtiCreateToolProxyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLtiCreateToolProxy200Response> {
        const response = await this.modLtiCreateToolProxyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a tool type
     * Create a tool type
     */
    async modLtiCreateToolTypeRaw(requestParameters: ModLtiCreateToolTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLtiCreateToolType200Response>> {
        if (requestParameters['modLtiCreateToolTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'modLtiCreateToolTypeRequest',
                'Required parameter "modLtiCreateToolTypeRequest" was null or undefined when calling modLtiCreateToolType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_create_tool_type`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLtiCreateToolTypeRequestToJSON(requestParameters['modLtiCreateToolTypeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLtiCreateToolType200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a tool type
     * Create a tool type
     */
    async modLtiCreateToolType(requestParameters: ModLtiCreateToolTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLtiCreateToolType200Response> {
        const response = await this.modLtiCreateToolTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a course tool type
     * Delete a course tool type
     */
    async modLtiDeleteCourseToolTypeRaw(requestParameters: ModLtiDeleteCourseToolTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modLtiDeleteCourseToolTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'modLtiDeleteCourseToolTypeRequest',
                'Required parameter "modLtiDeleteCourseToolTypeRequest" was null or undefined when calling modLtiDeleteCourseToolType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_delete_course_tool_type`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLtiDeleteCourseToolTypeRequestToJSON(requestParameters['modLtiDeleteCourseToolTypeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a course tool type
     * Delete a course tool type
     */
    async modLtiDeleteCourseToolType(requestParameters: ModLtiDeleteCourseToolTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modLtiDeleteCourseToolTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a tool proxy
     * Delete a tool proxy
     */
    async modLtiDeleteToolProxyRaw(requestParameters: ModLtiDeleteToolProxyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLtiDeleteToolProxy200Response>> {
        if (requestParameters['modLtiDeleteToolProxyRequest'] == null) {
            throw new runtime.RequiredError(
                'modLtiDeleteToolProxyRequest',
                'Required parameter "modLtiDeleteToolProxyRequest" was null or undefined when calling modLtiDeleteToolProxy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_delete_tool_proxy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLtiDeleteToolProxyRequestToJSON(requestParameters['modLtiDeleteToolProxyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLtiDeleteToolProxy200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a tool proxy
     * Delete a tool proxy
     */
    async modLtiDeleteToolProxy(requestParameters: ModLtiDeleteToolProxyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLtiDeleteToolProxy200Response> {
        const response = await this.modLtiDeleteToolProxyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a tool type
     * Delete a tool type
     */
    async modLtiDeleteToolTypeRaw(requestParameters: ModLtiDeleteToolTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLtiDeleteToolTypeRequest>> {
        if (requestParameters['modLtiDeleteToolTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'modLtiDeleteToolTypeRequest',
                'Required parameter "modLtiDeleteToolTypeRequest" was null or undefined when calling modLtiDeleteToolType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_delete_tool_type`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLtiDeleteToolTypeRequestToJSON(requestParameters['modLtiDeleteToolTypeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLtiDeleteToolTypeRequestFromJSON(jsonValue));
    }

    /**
     * Delete a tool type
     * Delete a tool type
     */
    async modLtiDeleteToolType(requestParameters: ModLtiDeleteToolTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLtiDeleteToolTypeRequest> {
        const response = await this.modLtiDeleteToolTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
     */
    async modLtiGetLtisByCoursesRaw(requestParameters: ModLtiGetLtisByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLtiGetLtisByCourses200Response>> {
        if (requestParameters['modChatGetChatsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatGetChatsByCoursesRequest',
                'Required parameter "modChatGetChatsByCoursesRequest" was null or undefined when calling modLtiGetLtisByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_get_ltis_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatGetChatsByCoursesRequestToJSON(requestParameters['modChatGetChatsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLtiGetLtisByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
     */
    async modLtiGetLtisByCourses(requestParameters: ModLtiGetLtisByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLtiGetLtisByCourses200Response> {
        const response = await this.modLtiGetLtisByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the launch data for a given external tool.
     * Return the launch data for a given external tool.
     */
    async modLtiGetToolLaunchDataRaw(requestParameters: ModLtiGetToolLaunchDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLtiGetToolLaunchData200Response>> {
        if (requestParameters['modLtiGetToolLaunchDataRequest'] == null) {
            throw new runtime.RequiredError(
                'modLtiGetToolLaunchDataRequest',
                'Required parameter "modLtiGetToolLaunchDataRequest" was null or undefined when calling modLtiGetToolLaunchData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_get_tool_launch_data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLtiGetToolLaunchDataRequestToJSON(requestParameters['modLtiGetToolLaunchDataRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLtiGetToolLaunchData200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the launch data for a given external tool.
     * Return the launch data for a given external tool.
     */
    async modLtiGetToolLaunchData(requestParameters: ModLtiGetToolLaunchDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLtiGetToolLaunchData200Response> {
        const response = await this.modLtiGetToolLaunchDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the tool proxies
     * Get a list of the tool proxies
     */
    async modLtiGetToolProxiesRaw(requestParameters: ModLtiGetToolProxiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modLtiGetToolProxiesRequest'] == null) {
            throw new runtime.RequiredError(
                'modLtiGetToolProxiesRequest',
                'Required parameter "modLtiGetToolProxiesRequest" was null or undefined when calling modLtiGetToolProxies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_get_tool_proxies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLtiGetToolProxiesRequestToJSON(requestParameters['modLtiGetToolProxiesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get a list of the tool proxies
     * Get a list of the tool proxies
     */
    async modLtiGetToolProxies(requestParameters: ModLtiGetToolProxiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modLtiGetToolProxiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a registration request for a tool proxy
     * Get a registration request for a tool proxy
     */
    async modLtiGetToolProxyRegistrationRequestRaw(requestParameters: ModLtiGetToolProxyRegistrationRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLtiGetToolProxyRegistrationRequest200Response>> {
        if (requestParameters['modLtiDeleteToolProxyRequest'] == null) {
            throw new runtime.RequiredError(
                'modLtiDeleteToolProxyRequest',
                'Required parameter "modLtiDeleteToolProxyRequest" was null or undefined when calling modLtiGetToolProxyRegistrationRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_get_tool_proxy_registration_request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLtiDeleteToolProxyRequestToJSON(requestParameters['modLtiDeleteToolProxyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLtiGetToolProxyRegistrationRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a registration request for a tool proxy
     * Get a registration request for a tool proxy
     */
    async modLtiGetToolProxyRegistrationRequest(requestParameters: ModLtiGetToolProxyRegistrationRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLtiGetToolProxyRegistrationRequest200Response> {
        const response = await this.modLtiGetToolProxyRegistrationRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the tool types
     * Get a list of the tool types
     */
    async modLtiGetToolTypesRaw(requestParameters: ModLtiGetToolTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modLtiGetToolTypesRequest'] == null) {
            throw new runtime.RequiredError(
                'modLtiGetToolTypesRequest',
                'Required parameter "modLtiGetToolTypesRequest" was null or undefined when calling modLtiGetToolTypes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_get_tool_types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLtiGetToolTypesRequestToJSON(requestParameters['modLtiGetToolTypesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get a list of the tool types
     * Get a list of the tool types
     */
    async modLtiGetToolTypes(requestParameters: ModLtiGetToolTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modLtiGetToolTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of the tool types and tool proxies
     * Get a list of the tool types and tool proxies
     */
    async modLtiGetToolTypesAndProxiesRaw(requestParameters: ModLtiGetToolTypesAndProxiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLtiGetToolTypesAndProxies200Response>> {
        if (requestParameters['modLtiGetToolTypesAndProxiesRequest'] == null) {
            throw new runtime.RequiredError(
                'modLtiGetToolTypesAndProxiesRequest',
                'Required parameter "modLtiGetToolTypesAndProxiesRequest" was null or undefined when calling modLtiGetToolTypesAndProxies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_get_tool_types_and_proxies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLtiGetToolTypesAndProxiesRequestToJSON(requestParameters['modLtiGetToolTypesAndProxiesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLtiGetToolTypesAndProxies200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of the tool types and tool proxies
     * Get a list of the tool types and tool proxies
     */
    async modLtiGetToolTypesAndProxies(requestParameters: ModLtiGetToolTypesAndProxiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLtiGetToolTypesAndProxies200Response> {
        const response = await this.modLtiGetToolTypesAndProxiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get total number of the tool types and tool proxies
     * Get total number of the tool types and tool proxies
     */
    async modLtiGetToolTypesAndProxiesCountRaw(requestParameters: ModLtiGetToolTypesAndProxiesCountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLtiGetToolTypesAndProxiesCount200Response>> {
        if (requestParameters['modLtiGetToolTypesAndProxiesCountRequest'] == null) {
            throw new runtime.RequiredError(
                'modLtiGetToolTypesAndProxiesCountRequest',
                'Required parameter "modLtiGetToolTypesAndProxiesCountRequest" was null or undefined when calling modLtiGetToolTypesAndProxiesCount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_get_tool_types_and_proxies_count`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLtiGetToolTypesAndProxiesCountRequestToJSON(requestParameters['modLtiGetToolTypesAndProxiesCountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLtiGetToolTypesAndProxiesCount200ResponseFromJSON(jsonValue));
    }

    /**
     * Get total number of the tool types and tool proxies
     * Get total number of the tool types and tool proxies
     */
    async modLtiGetToolTypesAndProxiesCount(requestParameters: ModLtiGetToolTypesAndProxiesCountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLtiGetToolTypesAndProxiesCount200Response> {
        const response = await this.modLtiGetToolTypesAndProxiesCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Determine if the given url is for a cartridge
     * Determine if the given url is for a cartridge
     */
    async modLtiIsCartridgeRaw(requestParameters: ModLtiIsCartridgeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLtiIsCartridge200Response>> {
        if (requestParameters['modLtiIsCartridgeRequest'] == null) {
            throw new runtime.RequiredError(
                'modLtiIsCartridgeRequest',
                'Required parameter "modLtiIsCartridgeRequest" was null or undefined when calling modLtiIsCartridge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_is_cartridge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLtiIsCartridgeRequestToJSON(requestParameters['modLtiIsCartridgeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLtiIsCartridge200ResponseFromJSON(jsonValue));
    }

    /**
     * Determine if the given url is for a cartridge
     * Determine if the given url is for a cartridge
     */
    async modLtiIsCartridge(requestParameters: ModLtiIsCartridgeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLtiIsCartridge200Response> {
        const response = await this.modLtiIsCartridgeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle showinactivitychooser for a tool type in a course
     * Toggle showinactivitychooser for a tool type in a course
     */
    async modLtiToggleShowinactivitychooserRaw(requestParameters: ModLtiToggleShowinactivitychooserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modLtiToggleShowinactivitychooserRequest'] == null) {
            throw new runtime.RequiredError(
                'modLtiToggleShowinactivitychooserRequest',
                'Required parameter "modLtiToggleShowinactivitychooserRequest" was null or undefined when calling modLtiToggleShowinactivitychooser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_toggle_showinactivitychooser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLtiToggleShowinactivitychooserRequestToJSON(requestParameters['modLtiToggleShowinactivitychooserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Toggle showinactivitychooser for a tool type in a course
     * Toggle showinactivitychooser for a tool type in a course
     */
    async modLtiToggleShowinactivitychooser(requestParameters: ModLtiToggleShowinactivitychooserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modLtiToggleShowinactivitychooserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a tool type
     * Update a tool type
     */
    async modLtiUpdateToolTypeRaw(requestParameters: ModLtiUpdateToolTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLtiUpdateToolType200Response>> {
        if (requestParameters['modLtiUpdateToolTypeRequest'] == null) {
            throw new runtime.RequiredError(
                'modLtiUpdateToolTypeRequest',
                'Required parameter "modLtiUpdateToolTypeRequest" was null or undefined when calling modLtiUpdateToolType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_update_tool_type`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLtiUpdateToolTypeRequestToJSON(requestParameters['modLtiUpdateToolTypeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLtiUpdateToolType200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a tool type
     * Update a tool type
     */
    async modLtiUpdateToolType(requestParameters: ModLtiUpdateToolTypeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLtiUpdateToolType200Response> {
        const response = await this.modLtiUpdateToolTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modLtiViewLtiRaw(requestParameters: ModLtiViewLtiOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modLtiViewLtiRequest'] == null) {
            throw new runtime.RequiredError(
                'modLtiViewLtiRequest',
                'Required parameter "modLtiViewLtiRequest" was null or undefined when calling modLtiViewLti().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lti_view_lti`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLtiViewLtiRequestToJSON(requestParameters['modLtiViewLtiRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modLtiViewLti(requestParameters: ModLtiViewLtiOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modLtiViewLtiRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
