/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  CoreCohortAddCohortMembers200Response,
  ErrorResponse,
  ModBigbluebuttonbnCanJoin200Response,
  ModBigbluebuttonbnCanJoinRequest,
  ModBigbluebuttonbnCompletionValidateRequest,
  ModBigbluebuttonbnEndMeetingRequest,
  ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response,
  ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest,
  ModBigbluebuttonbnGetJoinUrl200Response,
  ModBigbluebuttonbnGetRecordings200Response,
  ModBigbluebuttonbnGetRecordingsRequest,
  ModBigbluebuttonbnGetRecordingsToImport200Response,
  ModBigbluebuttonbnGetRecordingsToImportRequest,
  ModBigbluebuttonbnMeetingInfo200Response,
  ModBigbluebuttonbnMeetingInfoRequest,
  ModBigbluebuttonbnUpdateRecordingRequest,
  ModBigbluebuttonbnViewBigbluebuttonbnRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    CoreCohortAddCohortMembers200ResponseFromJSON,
    CoreCohortAddCohortMembers200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModBigbluebuttonbnCanJoin200ResponseFromJSON,
    ModBigbluebuttonbnCanJoin200ResponseToJSON,
    ModBigbluebuttonbnCanJoinRequestFromJSON,
    ModBigbluebuttonbnCanJoinRequestToJSON,
    ModBigbluebuttonbnCompletionValidateRequestFromJSON,
    ModBigbluebuttonbnCompletionValidateRequestToJSON,
    ModBigbluebuttonbnEndMeetingRequestFromJSON,
    ModBigbluebuttonbnEndMeetingRequestToJSON,
    ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200ResponseFromJSON,
    ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200ResponseToJSON,
    ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestFromJSON,
    ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestToJSON,
    ModBigbluebuttonbnGetJoinUrl200ResponseFromJSON,
    ModBigbluebuttonbnGetJoinUrl200ResponseToJSON,
    ModBigbluebuttonbnGetRecordings200ResponseFromJSON,
    ModBigbluebuttonbnGetRecordings200ResponseToJSON,
    ModBigbluebuttonbnGetRecordingsRequestFromJSON,
    ModBigbluebuttonbnGetRecordingsRequestToJSON,
    ModBigbluebuttonbnGetRecordingsToImport200ResponseFromJSON,
    ModBigbluebuttonbnGetRecordingsToImport200ResponseToJSON,
    ModBigbluebuttonbnGetRecordingsToImportRequestFromJSON,
    ModBigbluebuttonbnGetRecordingsToImportRequestToJSON,
    ModBigbluebuttonbnMeetingInfo200ResponseFromJSON,
    ModBigbluebuttonbnMeetingInfo200ResponseToJSON,
    ModBigbluebuttonbnMeetingInfoRequestFromJSON,
    ModBigbluebuttonbnMeetingInfoRequestToJSON,
    ModBigbluebuttonbnUpdateRecordingRequestFromJSON,
    ModBigbluebuttonbnUpdateRecordingRequestToJSON,
    ModBigbluebuttonbnViewBigbluebuttonbnRequestFromJSON,
    ModBigbluebuttonbnViewBigbluebuttonbnRequestToJSON,
} from '../models/index';

export interface ModBigbluebuttonbnCanJoinOperationRequest {
    modBigbluebuttonbnCanJoinRequest: ModBigbluebuttonbnCanJoinRequest;
}

export interface ModBigbluebuttonbnCompletionValidateOperationRequest {
    modBigbluebuttonbnCompletionValidateRequest: ModBigbluebuttonbnCompletionValidateRequest;
}

export interface ModBigbluebuttonbnEndMeetingOperationRequest {
    modBigbluebuttonbnEndMeetingRequest: ModBigbluebuttonbnEndMeetingRequest;
}

export interface ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesOperationRequest {
    modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;
}

export interface ModBigbluebuttonbnGetJoinUrlRequest {
    modBigbluebuttonbnCanJoinRequest: ModBigbluebuttonbnCanJoinRequest;
}

export interface ModBigbluebuttonbnGetRecordingsOperationRequest {
    modBigbluebuttonbnGetRecordingsRequest: ModBigbluebuttonbnGetRecordingsRequest;
}

export interface ModBigbluebuttonbnGetRecordingsToImportOperationRequest {
    modBigbluebuttonbnGetRecordingsToImportRequest: ModBigbluebuttonbnGetRecordingsToImportRequest;
}

export interface ModBigbluebuttonbnMeetingInfoOperationRequest {
    modBigbluebuttonbnMeetingInfoRequest: ModBigbluebuttonbnMeetingInfoRequest;
}

export interface ModBigbluebuttonbnUpdateRecordingOperationRequest {
    modBigbluebuttonbnUpdateRecordingRequest: ModBigbluebuttonbnUpdateRecordingRequest;
}

export interface ModBigbluebuttonbnViewBigbluebuttonbnOperationRequest {
    modBigbluebuttonbnViewBigbluebuttonbnRequest: ModBigbluebuttonbnViewBigbluebuttonbnRequest;
}

/**
 * 
 */
export class ModBigbluebuttonbnApi extends runtime.BaseAPI {

    /**
     * Returns information if the current user can join or not.
     * Returns information if the current user can join or not.
     */
    async modBigbluebuttonbnCanJoinRaw(requestParameters: ModBigbluebuttonbnCanJoinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModBigbluebuttonbnCanJoin200Response>> {
        if (requestParameters['modBigbluebuttonbnCanJoinRequest'] == null) {
            throw new runtime.RequiredError(
                'modBigbluebuttonbnCanJoinRequest',
                'Required parameter "modBigbluebuttonbnCanJoinRequest" was null or undefined when calling modBigbluebuttonbnCanJoin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_bigbluebuttonbn_can_join`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModBigbluebuttonbnCanJoinRequestToJSON(requestParameters['modBigbluebuttonbnCanJoinRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModBigbluebuttonbnCanJoin200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns information if the current user can join or not.
     * Returns information if the current user can join or not.
     */
    async modBigbluebuttonbnCanJoin(requestParameters: ModBigbluebuttonbnCanJoinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModBigbluebuttonbnCanJoin200Response> {
        const response = await this.modBigbluebuttonbnCanJoinRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate completion
     * Validate completion
     */
    async modBigbluebuttonbnCompletionValidateRaw(requestParameters: ModBigbluebuttonbnCompletionValidateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCohortAddCohortMembers200Response>> {
        if (requestParameters['modBigbluebuttonbnCompletionValidateRequest'] == null) {
            throw new runtime.RequiredError(
                'modBigbluebuttonbnCompletionValidateRequest',
                'Required parameter "modBigbluebuttonbnCompletionValidateRequest" was null or undefined when calling modBigbluebuttonbnCompletionValidate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_bigbluebuttonbn_completion_validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModBigbluebuttonbnCompletionValidateRequestToJSON(requestParameters['modBigbluebuttonbnCompletionValidateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCohortAddCohortMembers200ResponseFromJSON(jsonValue));
    }

    /**
     * Validate completion
     * Validate completion
     */
    async modBigbluebuttonbnCompletionValidate(requestParameters: ModBigbluebuttonbnCompletionValidateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCohortAddCohortMembers200Response> {
        const response = await this.modBigbluebuttonbnCompletionValidateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * End a meeting
     * End a meeting
     */
    async modBigbluebuttonbnEndMeetingRaw(requestParameters: ModBigbluebuttonbnEndMeetingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCohortAddCohortMembers200Response>> {
        if (requestParameters['modBigbluebuttonbnEndMeetingRequest'] == null) {
            throw new runtime.RequiredError(
                'modBigbluebuttonbnEndMeetingRequest',
                'Required parameter "modBigbluebuttonbnEndMeetingRequest" was null or undefined when calling modBigbluebuttonbnEndMeeting().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_bigbluebuttonbn_end_meeting`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModBigbluebuttonbnEndMeetingRequestToJSON(requestParameters['modBigbluebuttonbnEndMeetingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCohortAddCohortMembers200ResponseFromJSON(jsonValue));
    }

    /**
     * End a meeting
     * End a meeting
     */
    async modBigbluebuttonbnEndMeeting(requestParameters: ModBigbluebuttonbnEndMeetingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCohortAddCohortMembers200Response> {
        const response = await this.modBigbluebuttonbnEndMeetingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     */
    async modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRaw(requestParameters: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response>> {
        if (requestParameters['modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest',
                'Required parameter "modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest" was null or undefined when calling modBigbluebuttonbnGetBigbluebuttonbnsByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestToJSON(requestParameters['modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     */
    async modBigbluebuttonbnGetBigbluebuttonbnsByCourses(requestParameters: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response> {
        const response = await this.modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the join URL for the meeting and create if it does not exist.
     * Get the join URL for the meeting and create if it does not exist.
     */
    async modBigbluebuttonbnGetJoinUrlRaw(requestParameters: ModBigbluebuttonbnGetJoinUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModBigbluebuttonbnGetJoinUrl200Response>> {
        if (requestParameters['modBigbluebuttonbnCanJoinRequest'] == null) {
            throw new runtime.RequiredError(
                'modBigbluebuttonbnCanJoinRequest',
                'Required parameter "modBigbluebuttonbnCanJoinRequest" was null or undefined when calling modBigbluebuttonbnGetJoinUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_bigbluebuttonbn_get_join_url`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModBigbluebuttonbnCanJoinRequestToJSON(requestParameters['modBigbluebuttonbnCanJoinRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModBigbluebuttonbnGetJoinUrl200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the join URL for the meeting and create if it does not exist.
     * Get the join URL for the meeting and create if it does not exist.
     */
    async modBigbluebuttonbnGetJoinUrl(requestParameters: ModBigbluebuttonbnGetJoinUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModBigbluebuttonbnGetJoinUrl200Response> {
        const response = await this.modBigbluebuttonbnGetJoinUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of recordings ready to be processed by a datatable.
     * Returns a list of recordings ready to be processed by a datatable.
     */
    async modBigbluebuttonbnGetRecordingsRaw(requestParameters: ModBigbluebuttonbnGetRecordingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModBigbluebuttonbnGetRecordings200Response>> {
        if (requestParameters['modBigbluebuttonbnGetRecordingsRequest'] == null) {
            throw new runtime.RequiredError(
                'modBigbluebuttonbnGetRecordingsRequest',
                'Required parameter "modBigbluebuttonbnGetRecordingsRequest" was null or undefined when calling modBigbluebuttonbnGetRecordings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_bigbluebuttonbn_get_recordings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModBigbluebuttonbnGetRecordingsRequestToJSON(requestParameters['modBigbluebuttonbnGetRecordingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModBigbluebuttonbnGetRecordings200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of recordings ready to be processed by a datatable.
     * Returns a list of recordings ready to be processed by a datatable.
     */
    async modBigbluebuttonbnGetRecordings(requestParameters: ModBigbluebuttonbnGetRecordingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModBigbluebuttonbnGetRecordings200Response> {
        const response = await this.modBigbluebuttonbnGetRecordingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of recordings ready to import to be processed by a datatable.
     * Returns a list of recordings ready to import to be processed by a datatable.
     */
    async modBigbluebuttonbnGetRecordingsToImportRaw(requestParameters: ModBigbluebuttonbnGetRecordingsToImportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModBigbluebuttonbnGetRecordingsToImport200Response>> {
        if (requestParameters['modBigbluebuttonbnGetRecordingsToImportRequest'] == null) {
            throw new runtime.RequiredError(
                'modBigbluebuttonbnGetRecordingsToImportRequest',
                'Required parameter "modBigbluebuttonbnGetRecordingsToImportRequest" was null or undefined when calling modBigbluebuttonbnGetRecordingsToImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_bigbluebuttonbn_get_recordings_to_import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModBigbluebuttonbnGetRecordingsToImportRequestToJSON(requestParameters['modBigbluebuttonbnGetRecordingsToImportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModBigbluebuttonbnGetRecordingsToImport200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of recordings ready to import to be processed by a datatable.
     * Returns a list of recordings ready to import to be processed by a datatable.
     */
    async modBigbluebuttonbnGetRecordingsToImport(requestParameters: ModBigbluebuttonbnGetRecordingsToImportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModBigbluebuttonbnGetRecordingsToImport200Response> {
        const response = await this.modBigbluebuttonbnGetRecordingsToImportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get displayable information on the meeting
     * Get displayable information on the meeting
     */
    async modBigbluebuttonbnMeetingInfoRaw(requestParameters: ModBigbluebuttonbnMeetingInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModBigbluebuttonbnMeetingInfo200Response>> {
        if (requestParameters['modBigbluebuttonbnMeetingInfoRequest'] == null) {
            throw new runtime.RequiredError(
                'modBigbluebuttonbnMeetingInfoRequest',
                'Required parameter "modBigbluebuttonbnMeetingInfoRequest" was null or undefined when calling modBigbluebuttonbnMeetingInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_bigbluebuttonbn_meeting_info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModBigbluebuttonbnMeetingInfoRequestToJSON(requestParameters['modBigbluebuttonbnMeetingInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModBigbluebuttonbnMeetingInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Get displayable information on the meeting
     * Get displayable information on the meeting
     */
    async modBigbluebuttonbnMeetingInfo(requestParameters: ModBigbluebuttonbnMeetingInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModBigbluebuttonbnMeetingInfo200Response> {
        const response = await this.modBigbluebuttonbnMeetingInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a single recording
     * Update a single recording
     */
    async modBigbluebuttonbnUpdateRecordingRaw(requestParameters: ModBigbluebuttonbnUpdateRecordingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modBigbluebuttonbnUpdateRecordingRequest'] == null) {
            throw new runtime.RequiredError(
                'modBigbluebuttonbnUpdateRecordingRequest',
                'Required parameter "modBigbluebuttonbnUpdateRecordingRequest" was null or undefined when calling modBigbluebuttonbnUpdateRecording().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_bigbluebuttonbn_update_recording`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModBigbluebuttonbnUpdateRecordingRequestToJSON(requestParameters['modBigbluebuttonbnUpdateRecordingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update a single recording
     * Update a single recording
     */
    async modBigbluebuttonbnUpdateRecording(requestParameters: ModBigbluebuttonbnUpdateRecordingOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modBigbluebuttonbnUpdateRecordingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modBigbluebuttonbnViewBigbluebuttonbnRaw(requestParameters: ModBigbluebuttonbnViewBigbluebuttonbnOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modBigbluebuttonbnViewBigbluebuttonbnRequest'] == null) {
            throw new runtime.RequiredError(
                'modBigbluebuttonbnViewBigbluebuttonbnRequest',
                'Required parameter "modBigbluebuttonbnViewBigbluebuttonbnRequest" was null or undefined when calling modBigbluebuttonbnViewBigbluebuttonbn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_bigbluebuttonbn_view_bigbluebuttonbn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModBigbluebuttonbnViewBigbluebuttonbnRequestToJSON(requestParameters['modBigbluebuttonbnViewBigbluebuttonbnRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modBigbluebuttonbnViewBigbluebuttonbn(requestParameters: ModBigbluebuttonbnViewBigbluebuttonbnOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modBigbluebuttonbnViewBigbluebuttonbnRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
