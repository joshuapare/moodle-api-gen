/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  MessageAirnotifierAreNotificationPreferencesConfigured200Response,
  MessageAirnotifierAreNotificationPreferencesConfiguredRequest,
  MessageAirnotifierEnableDevice200Response,
  MessageAirnotifierEnableDeviceRequest,
  MessageAirnotifierGetUserDevices200Response,
  MessageAirnotifierGetUserDevicesRequest,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MessageAirnotifierAreNotificationPreferencesConfigured200ResponseFromJSON,
    MessageAirnotifierAreNotificationPreferencesConfigured200ResponseToJSON,
    MessageAirnotifierAreNotificationPreferencesConfiguredRequestFromJSON,
    MessageAirnotifierAreNotificationPreferencesConfiguredRequestToJSON,
    MessageAirnotifierEnableDevice200ResponseFromJSON,
    MessageAirnotifierEnableDevice200ResponseToJSON,
    MessageAirnotifierEnableDeviceRequestFromJSON,
    MessageAirnotifierEnableDeviceRequestToJSON,
    MessageAirnotifierGetUserDevices200ResponseFromJSON,
    MessageAirnotifierGetUserDevices200ResponseToJSON,
    MessageAirnotifierGetUserDevicesRequestFromJSON,
    MessageAirnotifierGetUserDevicesRequestToJSON,
} from '../models/index';

export interface MessageAirnotifierAreNotificationPreferencesConfiguredOperationRequest {
    messageAirnotifierAreNotificationPreferencesConfiguredRequest: MessageAirnotifierAreNotificationPreferencesConfiguredRequest;
}

export interface MessageAirnotifierEnableDeviceOperationRequest {
    messageAirnotifierEnableDeviceRequest: MessageAirnotifierEnableDeviceRequest;
}

export interface MessageAirnotifierGetUserDevicesOperationRequest {
    messageAirnotifierGetUserDevicesRequest: MessageAirnotifierGetUserDevicesRequest;
}

/**
 * 
 */
export class MessageAirnotifierApi extends runtime.BaseAPI {

    /**
     * Check if the users have notification preferences configured yet
     * Check if the users have notification preferences configured yet
     */
    async messageAirnotifierAreNotificationPreferencesConfiguredRaw(requestParameters: MessageAirnotifierAreNotificationPreferencesConfiguredOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageAirnotifierAreNotificationPreferencesConfigured200Response>> {
        if (requestParameters['messageAirnotifierAreNotificationPreferencesConfiguredRequest'] == null) {
            throw new runtime.RequiredError(
                'messageAirnotifierAreNotificationPreferencesConfiguredRequest',
                'Required parameter "messageAirnotifierAreNotificationPreferencesConfiguredRequest" was null or undefined when calling messageAirnotifierAreNotificationPreferencesConfigured().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/message_airnotifier_are_notification_preferences_configured`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageAirnotifierAreNotificationPreferencesConfiguredRequestToJSON(requestParameters['messageAirnotifierAreNotificationPreferencesConfiguredRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageAirnotifierAreNotificationPreferencesConfigured200ResponseFromJSON(jsonValue));
    }

    /**
     * Check if the users have notification preferences configured yet
     * Check if the users have notification preferences configured yet
     */
    async messageAirnotifierAreNotificationPreferencesConfigured(requestParameters: MessageAirnotifierAreNotificationPreferencesConfiguredOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageAirnotifierAreNotificationPreferencesConfigured200Response> {
        const response = await this.messageAirnotifierAreNotificationPreferencesConfiguredRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enables or disables a registered user device so it can receive Push notifications
     * Enables or disables a registered user device so it can receive Push notifications
     */
    async messageAirnotifierEnableDeviceRaw(requestParameters: MessageAirnotifierEnableDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageAirnotifierEnableDevice200Response>> {
        if (requestParameters['messageAirnotifierEnableDeviceRequest'] == null) {
            throw new runtime.RequiredError(
                'messageAirnotifierEnableDeviceRequest',
                'Required parameter "messageAirnotifierEnableDeviceRequest" was null or undefined when calling messageAirnotifierEnableDevice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/message_airnotifier_enable_device`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageAirnotifierEnableDeviceRequestToJSON(requestParameters['messageAirnotifierEnableDeviceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageAirnotifierEnableDevice200ResponseFromJSON(jsonValue));
    }

    /**
     * Enables or disables a registered user device so it can receive Push notifications
     * Enables or disables a registered user device so it can receive Push notifications
     */
    async messageAirnotifierEnableDevice(requestParameters: MessageAirnotifierEnableDeviceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageAirnotifierEnableDevice200Response> {
        const response = await this.messageAirnotifierEnableDeviceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the list of mobile devices that are registered in Moodle for the given user
     * Return the list of mobile devices that are registered in Moodle for the given user
     */
    async messageAirnotifierGetUserDevicesRaw(requestParameters: MessageAirnotifierGetUserDevicesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageAirnotifierGetUserDevices200Response>> {
        if (requestParameters['messageAirnotifierGetUserDevicesRequest'] == null) {
            throw new runtime.RequiredError(
                'messageAirnotifierGetUserDevicesRequest',
                'Required parameter "messageAirnotifierGetUserDevicesRequest" was null or undefined when calling messageAirnotifierGetUserDevices().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/message_airnotifier_get_user_devices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageAirnotifierGetUserDevicesRequestToJSON(requestParameters['messageAirnotifierGetUserDevicesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageAirnotifierGetUserDevices200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the list of mobile devices that are registered in Moodle for the given user
     * Return the list of mobile devices that are registered in Moodle for the given user
     */
    async messageAirnotifierGetUserDevices(requestParameters: MessageAirnotifierGetUserDevicesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageAirnotifierGetUserDevices200Response> {
        const response = await this.messageAirnotifierGetUserDevicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check whether the airnotifier settings have been configured
     * Check whether the airnotifier settings have been configured
     */
    async messageAirnotifierIsSystemConfiguredRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/message_airnotifier_is_system_configured`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Check whether the airnotifier settings have been configured
     * Check whether the airnotifier settings have been configured
     */
    async messageAirnotifierIsSystemConfigured(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.messageAirnotifierIsSystemConfiguredRaw(initOverrides);
        return await response.value();
    }

}
