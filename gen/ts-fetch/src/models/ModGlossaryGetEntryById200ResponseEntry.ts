/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner } from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';
import {
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSONTyped,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON,
} from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';
import type { ModDataGetEntries200ResponseEntriesInnerTagsInner } from './ModDataGetEntries200ResponseEntriesInnerTagsInner';
import {
    ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSON,
    ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSONTyped,
    ModDataGetEntries200ResponseEntriesInnerTagsInnerToJSON,
} from './ModDataGetEntries200ResponseEntriesInnerTagsInner';

/**
 * 
 * @export
 * @interface ModGlossaryGetEntryById200ResponseEntry
 */
export interface ModGlossaryGetEntryById200ResponseEntry {
    /**
     * Whether the entry was approved
     * @type {boolean}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Approved: boolean;
    /**
     * Whether or not the entry has attachments
     * @type {boolean}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Attachment: boolean;
    /**
     * 
     * @type {Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Attachments?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>;
    /**
     * When true, the matching is case sensitive
     * @type {boolean}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Casesensitive: boolean;
    /**
     * The concept
     * @type {string}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Concept: string;
    /**
     * The definition
     * @type {string}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Definition: string;
    /**
     * definition format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Definitionformat: number;
    /**
     * 
     * @type {Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Definitioninlinefiles?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>;
    /**
     * The definition trust flag
     * @type {boolean}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Definitiontrust: boolean;
    /**
     * When true, the matching is done on full words only
     * @type {boolean}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Fullmatch: boolean;
    /**
     * The glossary ID
     * @type {number}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Glossaryid: number;
    /**
     * The entry ID
     * @type {number}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Id: number;
    /**
     * The source glossary ID
     * @type {number}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Sourceglossaryid: number;
    /**
     * 
     * @type {Array<ModDataGetEntries200ResponseEntriesInnerTagsInner>}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Tags?: Array<ModDataGetEntries200ResponseEntriesInnerTagsInner>;
    /**
     * The entry was created by a teacher, or equivalent.
     * @type {boolean}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Teacherentry: boolean;
    /**
     * Time created
     * @type {number}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Timecreated: number;
    /**
     * Time modified
     * @type {number}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Timemodified: number;
    /**
     * Whether the concept should be automatically linked
     * @type {boolean}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Usedynalink: boolean;
    /**
     * Author full name
     * @type {string}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Userfullname: string;
    /**
     * Author ID
     * @type {number}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Userid: number;
    /**
     * Author picture
     * @type {string}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    Userpictureurl: string;
}

/**
 * Check if a given object implements the ModGlossaryGetEntryById200ResponseEntry interface.
 */
export function instanceOfModGlossaryGetEntryById200ResponseEntry(value: object): boolean {
    if (!('Approved' in value)) return false;
    if (!('Attachment' in value)) return false;
    if (!('Casesensitive' in value)) return false;
    if (!('Concept' in value)) return false;
    if (!('Definition' in value)) return false;
    if (!('Definitionformat' in value)) return false;
    if (!('Definitiontrust' in value)) return false;
    if (!('Fullmatch' in value)) return false;
    if (!('Glossaryid' in value)) return false;
    if (!('Id' in value)) return false;
    if (!('Sourceglossaryid' in value)) return false;
    if (!('Teacherentry' in value)) return false;
    if (!('Timecreated' in value)) return false;
    if (!('Timemodified' in value)) return false;
    if (!('Usedynalink' in value)) return false;
    if (!('Userfullname' in value)) return false;
    if (!('Userid' in value)) return false;
    if (!('Userpictureurl' in value)) return false;
    return true;
}

export function ModGlossaryGetEntryById200ResponseEntryFromJSON(json: any): ModGlossaryGetEntryById200ResponseEntry {
    return ModGlossaryGetEntryById200ResponseEntryFromJSONTyped(json, false);
}

export function ModGlossaryGetEntryById200ResponseEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModGlossaryGetEntryById200ResponseEntry {
    if (json == null) {
        return json;
    }
    return {
        
        'Approved': json['approved'],
        'Attachment': json['attachment'],
        'Attachments': json['attachments'] == null ? undefined : ((json['attachments'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON)),
        'Casesensitive': json['casesensitive'],
        'Concept': json['concept'],
        'Definition': json['definition'],
        'Definitionformat': json['definitionformat'],
        'Definitioninlinefiles': json['definitioninlinefiles'] == null ? undefined : ((json['definitioninlinefiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON)),
        'Definitiontrust': json['definitiontrust'],
        'Fullmatch': json['fullmatch'],
        'Glossaryid': json['glossaryid'],
        'Id': json['id'],
        'Sourceglossaryid': json['sourceglossaryid'],
        'Tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSON)),
        'Teacherentry': json['teacherentry'],
        'Timecreated': json['timecreated'],
        'Timemodified': json['timemodified'],
        'Usedynalink': json['usedynalink'],
        'Userfullname': json['userfullname'],
        'Userid': json['userid'],
        'Userpictureurl': json['userpictureurl'],
    };
}

export function ModGlossaryGetEntryById200ResponseEntryToJSON(value?: ModGlossaryGetEntryById200ResponseEntry | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'approved': value['Approved'],
        'attachment': value['Attachment'],
        'attachments': value['Attachments'] == null ? undefined : ((value['Attachments'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON)),
        'casesensitive': value['Casesensitive'],
        'concept': value['Concept'],
        'definition': value['Definition'],
        'definitionformat': value['Definitionformat'],
        'definitioninlinefiles': value['Definitioninlinefiles'] == null ? undefined : ((value['Definitioninlinefiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON)),
        'definitiontrust': value['Definitiontrust'],
        'fullmatch': value['Fullmatch'],
        'glossaryid': value['Glossaryid'],
        'id': value['Id'],
        'sourceglossaryid': value['Sourceglossaryid'],
        'tags': value['Tags'] == null ? undefined : ((value['Tags'] as Array<any>).map(ModDataGetEntries200ResponseEntriesInnerTagsInnerToJSON)),
        'teacherentry': value['Teacherentry'],
        'timecreated': value['Timecreated'],
        'timemodified': value['Timemodified'],
        'usedynalink': value['Usedynalink'],
        'userfullname': value['Userfullname'],
        'userid': value['Userid'],
        'userpictureurl': value['Userpictureurl'],
    };
}

