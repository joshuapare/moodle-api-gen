/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ModDataGetEntries200ResponseEntriesInnerTagsInner } from './ModDataGetEntries200ResponseEntriesInnerTagsInner';
import {
    ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSON,
    ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSONTyped,
    ModDataGetEntries200ResponseEntriesInnerTagsInnerToJSON,
} from './ModDataGetEntries200ResponseEntriesInnerTagsInner';

/**
 * 
 * @export
 * @interface ModWikiGetPageContents200ResponsePage
 */
export interface ModWikiGetPageContents200ResponsePage {
    /**
     * Page contents.
     * @type {string}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    Cachedcontent: string;
    /**
     * True if user can edit the page.
     * @type {boolean}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    Caneditpage: boolean;
    /**
     * cachedcontent format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    Contentformat?: number;
    /**
     * Page's group ID.
     * @type {number}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    Groupid: number;
    /**
     * Page ID.
     * @type {number}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    Id: number;
    /**
     * Page's subwiki ID.
     * @type {number}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    Subwikiid: number;
    /**
     * 
     * @type {Array<ModDataGetEntries200ResponseEntriesInnerTagsInner>}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    Tags?: Array<ModDataGetEntries200ResponseEntriesInnerTagsInner>;
    /**
     * Page title.
     * @type {string}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    Title: string;
    /**
     * Page's user ID.
     * @type {number}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    Userid: number;
    /**
     * Latest version of the page.
     * @type {number}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    Version?: number;
    /**
     * Page's wiki ID.
     * @type {number}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    Wikiid: number;
}

/**
 * Check if a given object implements the ModWikiGetPageContents200ResponsePage interface.
 */
export function instanceOfModWikiGetPageContents200ResponsePage(value: object): boolean {
    if (!('Cachedcontent' in value)) return false;
    if (!('Caneditpage' in value)) return false;
    if (!('Groupid' in value)) return false;
    if (!('Id' in value)) return false;
    if (!('Subwikiid' in value)) return false;
    if (!('Title' in value)) return false;
    if (!('Userid' in value)) return false;
    if (!('Wikiid' in value)) return false;
    return true;
}

export function ModWikiGetPageContents200ResponsePageFromJSON(json: any): ModWikiGetPageContents200ResponsePage {
    return ModWikiGetPageContents200ResponsePageFromJSONTyped(json, false);
}

export function ModWikiGetPageContents200ResponsePageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModWikiGetPageContents200ResponsePage {
    if (json == null) {
        return json;
    }
    return {
        
        'Cachedcontent': json['cachedcontent'],
        'Caneditpage': json['caneditpage'],
        'Contentformat': json['contentformat'] == null ? undefined : json['contentformat'],
        'Groupid': json['groupid'],
        'Id': json['id'],
        'Subwikiid': json['subwikiid'],
        'Tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSON)),
        'Title': json['title'],
        'Userid': json['userid'],
        'Version': json['version'] == null ? undefined : json['version'],
        'Wikiid': json['wikiid'],
    };
}

export function ModWikiGetPageContents200ResponsePageToJSON(value?: ModWikiGetPageContents200ResponsePage | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'cachedcontent': value['Cachedcontent'],
        'caneditpage': value['Caneditpage'],
        'contentformat': value['Contentformat'],
        'groupid': value['Groupid'],
        'id': value['Id'],
        'subwikiid': value['Subwikiid'],
        'tags': value['Tags'] == null ? undefined : ((value['Tags'] as Array<any>).map(ModDataGetEntries200ResponseEntriesInnerTagsInnerToJSON)),
        'title': value['Title'],
        'userid': value['Userid'],
        'version': value['Version'],
        'wikiid': value['Wikiid'],
    };
}

