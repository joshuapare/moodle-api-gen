/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ToolLpDataForTemplatesManagePage200ResponseTemplatesInner } from './ToolLpDataForTemplatesManagePage200ResponseTemplatesInner';
import {
    ToolLpDataForTemplatesManagePage200ResponseTemplatesInnerFromJSON,
    ToolLpDataForTemplatesManagePage200ResponseTemplatesInnerFromJSONTyped,
    ToolLpDataForTemplatesManagePage200ResponseTemplatesInnerToJSON,
} from './ToolLpDataForTemplatesManagePage200ResponseTemplatesInner';

/**
 * 
 * @export
 * @interface ToolLpDataForTemplatesManagePage200Response
 */
export interface ToolLpDataForTemplatesManagePage200Response {
    /**
     * Whether the user manage the templates
     * @type {boolean}
     * @memberof ToolLpDataForTemplatesManagePage200Response
     */
    Canmanage: boolean;
    /**
     * 
     * @type {Array<object>}
     * @memberof ToolLpDataForTemplatesManagePage200Response
     */
    Navigation: Array<object>;
    /**
     * The page context id
     * @type {number}
     * @memberof ToolLpDataForTemplatesManagePage200Response
     */
    Pagecontextid: number;
    /**
     * Url to the tool_lp plugin folder on this Moodle site
     * @type {string}
     * @memberof ToolLpDataForTemplatesManagePage200Response
     */
    Pluginbaseurl: string;
    /**
     * 
     * @type {Array<ToolLpDataForTemplatesManagePage200ResponseTemplatesInner>}
     * @memberof ToolLpDataForTemplatesManagePage200Response
     */
    Templates: Array<ToolLpDataForTemplatesManagePage200ResponseTemplatesInner>;
}

/**
 * Check if a given object implements the ToolLpDataForTemplatesManagePage200Response interface.
 */
export function instanceOfToolLpDataForTemplatesManagePage200Response(value: object): boolean {
    if (!('Canmanage' in value)) return false;
    if (!('Navigation' in value)) return false;
    if (!('Pagecontextid' in value)) return false;
    if (!('Pluginbaseurl' in value)) return false;
    if (!('Templates' in value)) return false;
    return true;
}

export function ToolLpDataForTemplatesManagePage200ResponseFromJSON(json: any): ToolLpDataForTemplatesManagePage200Response {
    return ToolLpDataForTemplatesManagePage200ResponseFromJSONTyped(json, false);
}

export function ToolLpDataForTemplatesManagePage200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToolLpDataForTemplatesManagePage200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'Canmanage': json['canmanage'],
        'Navigation': json['navigation'],
        'Pagecontextid': json['pagecontextid'],
        'Pluginbaseurl': json['pluginbaseurl'],
        'Templates': ((json['templates'] as Array<any>).map(ToolLpDataForTemplatesManagePage200ResponseTemplatesInnerFromJSON)),
    };
}

export function ToolLpDataForTemplatesManagePage200ResponseToJSON(value?: ToolLpDataForTemplatesManagePage200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'canmanage': value['Canmanage'],
        'navigation': value['Navigation'],
        'pagecontextid': value['Pagecontextid'],
        'pluginbaseurl': value['Pluginbaseurl'],
        'templates': ((value['Templates'] as Array<any>).map(ToolLpDataForTemplatesManagePage200ResponseTemplatesInnerToJSON)),
    };
}

