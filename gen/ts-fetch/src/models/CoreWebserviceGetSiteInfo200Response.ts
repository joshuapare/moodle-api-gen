/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner } from './CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner';
import {
    CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInnerFromJSON,
    CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInnerFromJSONTyped,
    CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInnerToJSON,
} from './CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner';
import type { CoreWebserviceGetSiteInfo200ResponseFunctionsInner } from './CoreWebserviceGetSiteInfo200ResponseFunctionsInner';
import {
    CoreWebserviceGetSiteInfo200ResponseFunctionsInnerFromJSON,
    CoreWebserviceGetSiteInfo200ResponseFunctionsInnerFromJSONTyped,
    CoreWebserviceGetSiteInfo200ResponseFunctionsInnerToJSON,
} from './CoreWebserviceGetSiteInfo200ResponseFunctionsInner';

/**
 * 
 * @export
 * @interface CoreWebserviceGetSiteInfo200Response
 */
export interface CoreWebserviceGetSiteInfo200Response {
    /**
     * 
     * @type {Array<CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner>}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Advancedfeatures?: Array<CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner>;
    /**
     * 1 if users are allowed to download files, 0 if not
     * @type {number}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Downloadfiles?: number;
    /**
     * first name
     * @type {string}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Firstname: string;
    /**
     * user full name
     * @type {string}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Fullname: string;
    /**
     * 
     * @type {Array<CoreWebserviceGetSiteInfo200ResponseFunctionsInner>}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Functions: Array<CoreWebserviceGetSiteInfo200ResponseFunctionsInner>;
    /**
     * Current language.
     * @type {string}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Lang: string;
    /**
     * last name
     * @type {string}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Lastname: string;
    /**
     * Number of concurrent sessions allowed
     * @type {number}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Limitconcurrentlogins?: number;
    /**
     * Mobile custom CSS theme
     * @type {string}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Mobilecssurl?: string;
    /**
     * Moodle release number
     * @type {string}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Release?: string;
    /**
     * Calendar type set in the site.
     * @type {string}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Sitecalendartype?: string;
    /**
     * Site course ID
     * @type {number}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Siteid?: number;
    /**
     * site name
     * @type {string}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Sitename: string;
    /**
     * site url
     * @type {string}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Siteurl: string;
    /**
     * Current theme for the user.
     * @type {string}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Theme?: string;
    /**
     * 1 if users are allowed to upload files, 0 if not
     * @type {number}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Uploadfiles?: number;
    /**
     * Calendar typed used by the user.
     * @type {string}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Usercalendartype?: string;
    /**
     * true if the user can manage his own files
     * @type {boolean}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Usercanmanageownfiles?: boolean;
    /**
     * the default home page for the user: 0 for the site home, 1 for dashboard
     * @type {number}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Userhomepage?: number;
    /**
     * user id
     * @type {number}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Userid: number;
    /**
     * Whether the user is a site admin or not.
     * @type {boolean}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Userissiteadmin?: boolean;
    /**
     * user max upload file size (bytes). -1 means the user can ignore the upload file size
     * @type {number}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Usermaxuploadfilesize?: number;
    /**
     * username
     * @type {string}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Username: string;
    /**
     * the user profile picture.
     *                     Warning: this url is the public URL that only works when forcelogin is set to NO and guestaccess is set to YES.
     *                     In order to retrieve user profile pictures independently of the Moodle config, replace "pluginfile.php" by
     *                     "webservice/pluginfile.php?token=WSTOKEN&file="
     *                     Of course the user can only see profile picture depending
     *                     on his/her permissions. Moreover it is recommended to use HTTPS too.
     * @type {string}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Userpictureurl: string;
    /**
     * Private user access key for fetching files.
     * @type {string}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Userprivateaccesskey?: string;
    /**
     * user quota (bytes). 0 means user can ignore the quota
     * @type {number}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Userquota?: number;
    /**
     * Number of active sessions for current user.
     *                     Only returned when limitconcurrentlogins is used.
     * @type {number}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Usersessionscount?: number;
    /**
     * Moodle version number
     * @type {string}
     * @memberof CoreWebserviceGetSiteInfo200Response
     */
    Version?: string;
}

/**
 * Check if a given object implements the CoreWebserviceGetSiteInfo200Response interface.
 */
export function instanceOfCoreWebserviceGetSiteInfo200Response(value: object): boolean {
    if (!('Firstname' in value)) return false;
    if (!('Fullname' in value)) return false;
    if (!('Functions' in value)) return false;
    if (!('Lang' in value)) return false;
    if (!('Lastname' in value)) return false;
    if (!('Sitename' in value)) return false;
    if (!('Siteurl' in value)) return false;
    if (!('Userid' in value)) return false;
    if (!('Username' in value)) return false;
    if (!('Userpictureurl' in value)) return false;
    return true;
}

export function CoreWebserviceGetSiteInfo200ResponseFromJSON(json: any): CoreWebserviceGetSiteInfo200Response {
    return CoreWebserviceGetSiteInfo200ResponseFromJSONTyped(json, false);
}

export function CoreWebserviceGetSiteInfo200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreWebserviceGetSiteInfo200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'Advancedfeatures': json['advancedfeatures'] == null ? undefined : ((json['advancedfeatures'] as Array<any>).map(CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInnerFromJSON)),
        'Downloadfiles': json['downloadfiles'] == null ? undefined : json['downloadfiles'],
        'Firstname': json['firstname'],
        'Fullname': json['fullname'],
        'Functions': ((json['functions'] as Array<any>).map(CoreWebserviceGetSiteInfo200ResponseFunctionsInnerFromJSON)),
        'Lang': json['lang'],
        'Lastname': json['lastname'],
        'Limitconcurrentlogins': json['limitconcurrentlogins'] == null ? undefined : json['limitconcurrentlogins'],
        'Mobilecssurl': json['mobilecssurl'] == null ? undefined : json['mobilecssurl'],
        'Release': json['release'] == null ? undefined : json['release'],
        'Sitecalendartype': json['sitecalendartype'] == null ? undefined : json['sitecalendartype'],
        'Siteid': json['siteid'] == null ? undefined : json['siteid'],
        'Sitename': json['sitename'],
        'Siteurl': json['siteurl'],
        'Theme': json['theme'] == null ? undefined : json['theme'],
        'Uploadfiles': json['uploadfiles'] == null ? undefined : json['uploadfiles'],
        'Usercalendartype': json['usercalendartype'] == null ? undefined : json['usercalendartype'],
        'Usercanmanageownfiles': json['usercanmanageownfiles'] == null ? undefined : json['usercanmanageownfiles'],
        'Userhomepage': json['userhomepage'] == null ? undefined : json['userhomepage'],
        'Userid': json['userid'],
        'Userissiteadmin': json['userissiteadmin'] == null ? undefined : json['userissiteadmin'],
        'Usermaxuploadfilesize': json['usermaxuploadfilesize'] == null ? undefined : json['usermaxuploadfilesize'],
        'Username': json['username'],
        'Userpictureurl': json['userpictureurl'],
        'Userprivateaccesskey': json['userprivateaccesskey'] == null ? undefined : json['userprivateaccesskey'],
        'Userquota': json['userquota'] == null ? undefined : json['userquota'],
        'Usersessionscount': json['usersessionscount'] == null ? undefined : json['usersessionscount'],
        'Version': json['version'] == null ? undefined : json['version'],
    };
}

export function CoreWebserviceGetSiteInfo200ResponseToJSON(value?: CoreWebserviceGetSiteInfo200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'advancedfeatures': value['Advancedfeatures'] == null ? undefined : ((value['Advancedfeatures'] as Array<any>).map(CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInnerToJSON)),
        'downloadfiles': value['Downloadfiles'],
        'firstname': value['Firstname'],
        'fullname': value['Fullname'],
        'functions': ((value['Functions'] as Array<any>).map(CoreWebserviceGetSiteInfo200ResponseFunctionsInnerToJSON)),
        'lang': value['Lang'],
        'lastname': value['Lastname'],
        'limitconcurrentlogins': value['Limitconcurrentlogins'],
        'mobilecssurl': value['Mobilecssurl'],
        'release': value['Release'],
        'sitecalendartype': value['Sitecalendartype'],
        'siteid': value['Siteid'],
        'sitename': value['Sitename'],
        'siteurl': value['Siteurl'],
        'theme': value['Theme'],
        'uploadfiles': value['Uploadfiles'],
        'usercalendartype': value['Usercalendartype'],
        'usercanmanageownfiles': value['Usercanmanageownfiles'],
        'userhomepage': value['Userhomepage'],
        'userid': value['Userid'],
        'userissiteadmin': value['Userissiteadmin'],
        'usermaxuploadfilesize': value['Usermaxuploadfilesize'],
        'username': value['Username'],
        'userpictureurl': value['Userpictureurl'],
        'userprivateaccesskey': value['Userprivateaccesskey'],
        'userquota': value['Userquota'],
        'usersessionscount': value['Usersessionscount'],
        'version': value['Version'],
    };
}

