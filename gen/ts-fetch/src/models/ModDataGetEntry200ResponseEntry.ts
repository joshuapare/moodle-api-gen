/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ModDataGetEntries200ResponseEntriesInnerTagsInner } from './ModDataGetEntries200ResponseEntriesInnerTagsInner';
import {
    ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSON,
    ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSONTyped,
    ModDataGetEntries200ResponseEntriesInnerTagsInnerToJSON,
} from './ModDataGetEntries200ResponseEntriesInnerTagsInner';
import type { ModDataGetEntry200ResponseEntryContentsInner } from './ModDataGetEntry200ResponseEntryContentsInner';
import {
    ModDataGetEntry200ResponseEntryContentsInnerFromJSON,
    ModDataGetEntry200ResponseEntryContentsInnerFromJSONTyped,
    ModDataGetEntry200ResponseEntryContentsInnerToJSON,
} from './ModDataGetEntry200ResponseEntryContentsInner';

/**
 * 
 * @export
 * @interface ModDataGetEntry200ResponseEntry
 */
export interface ModDataGetEntry200ResponseEntry {
    /**
     * Whether the entry has been approved (if the database is configured in that way).
     * @type {boolean}
     * @memberof ModDataGetEntry200ResponseEntry
     */
    Approved: boolean;
    /**
     * Whether the current user can manage this entry
     * @type {boolean}
     * @memberof ModDataGetEntry200ResponseEntry
     */
    Canmanageentry: boolean;
    /**
     * 
     * @type {Array<ModDataGetEntry200ResponseEntryContentsInner>}
     * @memberof ModDataGetEntry200ResponseEntry
     */
    Contents?: Array<ModDataGetEntry200ResponseEntryContentsInner>;
    /**
     * The database id this record belongs to.
     * @type {number}
     * @memberof ModDataGetEntry200ResponseEntry
     */
    Dataid: number;
    /**
     * The user who created the entry fullname.
     * @type {string}
     * @memberof ModDataGetEntry200ResponseEntry
     */
    Fullname?: string;
    /**
     * The group id this record belongs to (0 for no groups).
     * @type {number}
     * @memberof ModDataGetEntry200ResponseEntry
     */
    Groupid: number;
    /**
     * Record id.
     * @type {number}
     * @memberof ModDataGetEntry200ResponseEntry
     */
    Id: number;
    /**
     * 
     * @type {Array<ModDataGetEntries200ResponseEntriesInnerTagsInner>}
     * @memberof ModDataGetEntry200ResponseEntry
     */
    Tags?: Array<ModDataGetEntries200ResponseEntriesInnerTagsInner>;
    /**
     * Time the record was created.
     * @type {number}
     * @memberof ModDataGetEntry200ResponseEntry
     */
    Timecreated: number;
    /**
     * Last time the record was modified.
     * @type {number}
     * @memberof ModDataGetEntry200ResponseEntry
     */
    Timemodified: number;
    /**
     * The id of the user who created the record.
     * @type {number}
     * @memberof ModDataGetEntry200ResponseEntry
     */
    Userid: number;
}

/**
 * Check if a given object implements the ModDataGetEntry200ResponseEntry interface.
 */
export function instanceOfModDataGetEntry200ResponseEntry(value: object): boolean {
    if (!('Approved' in value)) return false;
    if (!('Canmanageentry' in value)) return false;
    if (!('Dataid' in value)) return false;
    if (!('Groupid' in value)) return false;
    if (!('Id' in value)) return false;
    if (!('Timecreated' in value)) return false;
    if (!('Timemodified' in value)) return false;
    if (!('Userid' in value)) return false;
    return true;
}

export function ModDataGetEntry200ResponseEntryFromJSON(json: any): ModDataGetEntry200ResponseEntry {
    return ModDataGetEntry200ResponseEntryFromJSONTyped(json, false);
}

export function ModDataGetEntry200ResponseEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModDataGetEntry200ResponseEntry {
    if (json == null) {
        return json;
    }
    return {
        
        'Approved': json['approved'],
        'Canmanageentry': json['canmanageentry'],
        'Contents': json['contents'] == null ? undefined : ((json['contents'] as Array<any>).map(ModDataGetEntry200ResponseEntryContentsInnerFromJSON)),
        'Dataid': json['dataid'],
        'Fullname': json['fullname'] == null ? undefined : json['fullname'],
        'Groupid': json['groupid'],
        'Id': json['id'],
        'Tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSON)),
        'Timecreated': json['timecreated'],
        'Timemodified': json['timemodified'],
        'Userid': json['userid'],
    };
}

export function ModDataGetEntry200ResponseEntryToJSON(value?: ModDataGetEntry200ResponseEntry | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'approved': value['Approved'],
        'canmanageentry': value['Canmanageentry'],
        'contents': value['Contents'] == null ? undefined : ((value['Contents'] as Array<any>).map(ModDataGetEntry200ResponseEntryContentsInnerToJSON)),
        'dataid': value['Dataid'],
        'fullname': value['Fullname'],
        'groupid': value['Groupid'],
        'id': value['Id'],
        'tags': value['Tags'] == null ? undefined : ((value['Tags'] as Array<any>).map(ModDataGetEntries200ResponseEntriesInnerTagsInnerToJSON)),
        'timecreated': value['Timecreated'],
        'timemodified': value['Timemodified'],
        'userid': value['Userid'],
    };
}

