/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner } from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';
import {
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSONTyped,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON,
} from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';
import type { ModDataGetEntries200ResponseEntriesInnerTagsInner } from './ModDataGetEntries200ResponseEntriesInnerTagsInner';
import {
    ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSON,
    ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSONTyped,
    ModDataGetEntries200ResponseEntriesInnerTagsInnerToJSON,
} from './ModDataGetEntries200ResponseEntriesInnerTagsInner';

/**
 * 
 * @export
 * @interface ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
 */
export interface ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner {
    /**
     * Whether the entry was approved
     * @type {boolean}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Approved?: boolean;
    /**
     * Whether or not the entry has attachments
     * @type {boolean}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Attachment?: boolean;
    /**
     * 
     * @type {Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Attachments?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>;
    /**
     * When true, the matching is case sensitive
     * @type {boolean}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Casesensitive?: boolean;
    /**
     * The concept
     * @type {string}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Concept?: string;
    /**
     * The definition
     * @type {string}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Definition?: string;
    /**
     * definition format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Definitionformat?: number;
    /**
     * 
     * @type {Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Definitioninlinefiles?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>;
    /**
     * The definition trust flag
     * @type {boolean}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Definitiontrust?: boolean;
    /**
     * When true, the matching is done on full words only
     * @type {boolean}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Fullmatch?: boolean;
    /**
     * The glossary ID
     * @type {number}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Glossaryid?: number;
    /**
     * The entry ID
     * @type {number}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Id?: number;
    /**
     * The source glossary ID
     * @type {number}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Sourceglossaryid?: number;
    /**
     * 
     * @type {Array<ModDataGetEntries200ResponseEntriesInnerTagsInner>}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Tags?: Array<ModDataGetEntries200ResponseEntriesInnerTagsInner>;
    /**
     * The entry was created by a teacher, or equivalent.
     * @type {boolean}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Teacherentry?: boolean;
    /**
     * Time created
     * @type {number}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Timecreated?: number;
    /**
     * Time modified
     * @type {number}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Timemodified?: number;
    /**
     * Whether the concept should be automatically linked
     * @type {boolean}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Usedynalink?: boolean;
    /**
     * Author full name
     * @type {string}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Userfullname?: string;
    /**
     * Author ID
     * @type {number}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Userid?: number;
    /**
     * Author picture
     * @type {string}
     * @memberof ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner
     */
    Userpictureurl?: string;
}

/**
 * Check if a given object implements the ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner interface.
 */
export function instanceOfModGlossaryGetEntriesByAuthorId200ResponseEntriesInner(value: object): boolean {
    return true;
}

export function ModGlossaryGetEntriesByAuthorId200ResponseEntriesInnerFromJSON(json: any): ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner {
    return ModGlossaryGetEntriesByAuthorId200ResponseEntriesInnerFromJSONTyped(json, false);
}

export function ModGlossaryGetEntriesByAuthorId200ResponseEntriesInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner {
    if (json == null) {
        return json;
    }
    return {
        
        'Approved': json['approved'] == null ? undefined : json['approved'],
        'Attachment': json['attachment'] == null ? undefined : json['attachment'],
        'Attachments': json['attachments'] == null ? undefined : ((json['attachments'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON)),
        'Casesensitive': json['casesensitive'] == null ? undefined : json['casesensitive'],
        'Concept': json['concept'] == null ? undefined : json['concept'],
        'Definition': json['definition'] == null ? undefined : json['definition'],
        'Definitionformat': json['definitionformat'] == null ? undefined : json['definitionformat'],
        'Definitioninlinefiles': json['definitioninlinefiles'] == null ? undefined : ((json['definitioninlinefiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON)),
        'Definitiontrust': json['definitiontrust'] == null ? undefined : json['definitiontrust'],
        'Fullmatch': json['fullmatch'] == null ? undefined : json['fullmatch'],
        'Glossaryid': json['glossaryid'] == null ? undefined : json['glossaryid'],
        'Id': json['id'] == null ? undefined : json['id'],
        'Sourceglossaryid': json['sourceglossaryid'] == null ? undefined : json['sourceglossaryid'],
        'Tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSON)),
        'Teacherentry': json['teacherentry'] == null ? undefined : json['teacherentry'],
        'Timecreated': json['timecreated'] == null ? undefined : json['timecreated'],
        'Timemodified': json['timemodified'] == null ? undefined : json['timemodified'],
        'Usedynalink': json['usedynalink'] == null ? undefined : json['usedynalink'],
        'Userfullname': json['userfullname'] == null ? undefined : json['userfullname'],
        'Userid': json['userid'] == null ? undefined : json['userid'],
        'Userpictureurl': json['userpictureurl'] == null ? undefined : json['userpictureurl'],
    };
}

export function ModGlossaryGetEntriesByAuthorId200ResponseEntriesInnerToJSON(value?: ModGlossaryGetEntriesByAuthorId200ResponseEntriesInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'approved': value['Approved'],
        'attachment': value['Attachment'],
        'attachments': value['Attachments'] == null ? undefined : ((value['Attachments'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON)),
        'casesensitive': value['Casesensitive'],
        'concept': value['Concept'],
        'definition': value['Definition'],
        'definitionformat': value['Definitionformat'],
        'definitioninlinefiles': value['Definitioninlinefiles'] == null ? undefined : ((value['Definitioninlinefiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON)),
        'definitiontrust': value['Definitiontrust'],
        'fullmatch': value['Fullmatch'],
        'glossaryid': value['Glossaryid'],
        'id': value['Id'],
        'sourceglossaryid': value['Sourceglossaryid'],
        'tags': value['Tags'] == null ? undefined : ((value['Tags'] as Array<any>).map(ModDataGetEntries200ResponseEntriesInnerTagsInnerToJSON)),
        'teacherentry': value['Teacherentry'],
        'timecreated': value['Timecreated'],
        'timemodified': value['Timemodified'],
        'usedynalink': value['Usedynalink'],
        'userfullname': value['Userfullname'],
        'userid': value['Userid'],
        'userpictureurl': value['Userpictureurl'],
    };
}

