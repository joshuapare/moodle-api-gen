/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInner } from './ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInner';
import {
    ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInnerFromJSON,
    ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInnerFromJSONTyped,
    ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInnerToJSON,
} from './ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInner';

/**
 * The question data. Some fields may not be returned depending on the quiz display settings.
 * @export
 * @interface ModQuizGetAttemptReview200ResponseQuestionsInner
 */
export interface ModQuizGetAttemptReview200ResponseQuestionsInner {
    /**
     * whether the question is blocked by the previous question
     * @type {boolean}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Blockedbyprevious?: boolean;
    /**
     * whether the question is flagged or not
     * @type {boolean}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Flagged?: boolean;
    /**
     * whether this question attempt has autosaved data
     * @type {boolean}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Hasautosavedstep?: boolean;
    /**
     * the question rendered
     * @type {string}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Html?: string;
    /**
     * the timestamp of the most recent step in this question attempt
     * @type {number}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Lastactiontime?: number;
    /**
     * the mark awarded.
     *                     It will be returned only if the user is allowed to see it.
     * @type {string}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Mark?: string;
    /**
     * the maximum mark possible for this question attempt.
     *                     It will be returned only if the user is allowed to see it.
     * @type {number}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Maxmark?: number;
    /**
     * DO NOT USE. Use questionnumber. Only retained for backwards compatibility.
     * @type {number}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Number?: number;
    /**
     * page of the quiz this question appears on
     * @type {number}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Page?: number;
    /**
     * The question number to display for this question, e.g. "7", "i" or "Custom-B)".
     * @type {string}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Questionnumber?: string;
    /**
     * 
     * @type {Array<ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInner>}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Responsefileareas?: Array<ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInner>;
    /**
     * the number of real steps in this attempt
     * @type {number}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Sequencecheck?: number;
    /**
     * Question settings (JSON encoded).
     * @type {string}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Settings?: string;
    /**
     * slot number
     * @type {number}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Slot?: number;
    /**
     * the state where the question is in.
     *                     It will not be returned if the user cannot see it due to the quiz display correctness settings.
     * @type {string}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    State?: string;
    /**
     * current formatted state of the question
     * @type {string}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Status?: string;
    /**
     * question type, i.e: multichoice
     * @type {string}
     * @memberof ModQuizGetAttemptReview200ResponseQuestionsInner
     */
    Type?: string;
}

/**
 * Check if a given object implements the ModQuizGetAttemptReview200ResponseQuestionsInner interface.
 */
export function instanceOfModQuizGetAttemptReview200ResponseQuestionsInner(value: object): boolean {
    return true;
}

export function ModQuizGetAttemptReview200ResponseQuestionsInnerFromJSON(json: any): ModQuizGetAttemptReview200ResponseQuestionsInner {
    return ModQuizGetAttemptReview200ResponseQuestionsInnerFromJSONTyped(json, false);
}

export function ModQuizGetAttemptReview200ResponseQuestionsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModQuizGetAttemptReview200ResponseQuestionsInner {
    if (json == null) {
        return json;
    }
    return {
        
        'Blockedbyprevious': json['blockedbyprevious'] == null ? undefined : json['blockedbyprevious'],
        'Flagged': json['flagged'] == null ? undefined : json['flagged'],
        'Hasautosavedstep': json['hasautosavedstep'] == null ? undefined : json['hasautosavedstep'],
        'Html': json['html'] == null ? undefined : json['html'],
        'Lastactiontime': json['lastactiontime'] == null ? undefined : json['lastactiontime'],
        'Mark': json['mark'] == null ? undefined : json['mark'],
        'Maxmark': json['maxmark'] == null ? undefined : json['maxmark'],
        'Number': json['number'] == null ? undefined : json['number'],
        'Page': json['page'] == null ? undefined : json['page'],
        'Questionnumber': json['questionnumber'] == null ? undefined : json['questionnumber'],
        'Responsefileareas': json['responsefileareas'] == null ? undefined : ((json['responsefileareas'] as Array<any>).map(ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInnerFromJSON)),
        'Sequencecheck': json['sequencecheck'] == null ? undefined : json['sequencecheck'],
        'Settings': json['settings'] == null ? undefined : json['settings'],
        'Slot': json['slot'] == null ? undefined : json['slot'],
        'State': json['state'] == null ? undefined : json['state'],
        'Status': json['status'] == null ? undefined : json['status'],
        'Type': json['type'] == null ? undefined : json['type'],
    };
}

export function ModQuizGetAttemptReview200ResponseQuestionsInnerToJSON(value?: ModQuizGetAttemptReview200ResponseQuestionsInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'blockedbyprevious': value['Blockedbyprevious'],
        'flagged': value['Flagged'],
        'hasautosavedstep': value['Hasautosavedstep'],
        'html': value['Html'],
        'lastactiontime': value['Lastactiontime'],
        'mark': value['Mark'],
        'maxmark': value['Maxmark'],
        'number': value['Number'],
        'page': value['Page'],
        'questionnumber': value['Questionnumber'],
        'responsefileareas': value['Responsefileareas'] == null ? undefined : ((value['Responsefileareas'] as Array<any>).map(ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInnerToJSON)),
        'sequencecheck': value['Sequencecheck'],
        'settings': value['Settings'],
        'slot': value['Slot'],
        'state': value['State'],
        'status': value['Status'],
        'type': value['Type'],
    };
}

