/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthEmailSignupUser200ResponseWarningsInner } from './AuthEmailSignupUser200ResponseWarningsInner';
import {
    AuthEmailSignupUser200ResponseWarningsInnerFromJSON,
    AuthEmailSignupUser200ResponseWarningsInnerFromJSONTyped,
    AuthEmailSignupUser200ResponseWarningsInnerToJSON,
} from './AuthEmailSignupUser200ResponseWarningsInner';
import type { ToolMobileGetPublicConfig200ResponseIdentityprovidersInner } from './ToolMobileGetPublicConfig200ResponseIdentityprovidersInner';
import {
    ToolMobileGetPublicConfig200ResponseIdentityprovidersInnerFromJSON,
    ToolMobileGetPublicConfig200ResponseIdentityprovidersInnerFromJSONTyped,
    ToolMobileGetPublicConfig200ResponseIdentityprovidersInnerToJSON,
} from './ToolMobileGetPublicConfig200ResponseIdentityprovidersInner';

/**
 * 
 * @export
 * @interface ToolMobileGetPublicConfig200Response
 */
export interface ToolMobileGetPublicConfig200Response {
    /**
     * Whether age digital consent verification
     *                     is enabled.
     * @type {boolean}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Agedigitalconsentverification?: boolean;
    /**
     * Authentication instructions.
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Authinstructions: string;
    /**
     * Whether log in via email is enabled.
     * @type {number}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Authloginviaemail: number;
    /**
     * Whether auth none is enabled.
     * @type {number}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Authnoneenabled: number;
    /**
     * Whether to detect default language
     *                     from browser setting.
     * @type {number}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Autolang?: number;
    /**
     * The site compact logo URL
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Compactlogourl?: string;
    /**
     * Default site country
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Country?: string;
    /**
     * Whether the Mobile service is enabled.
     * @type {number}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Enablemobilewebservice: number;
    /**
     * Whether Web Services are enabled.
     * @type {number}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Enablewebservices: number;
    /**
     * Forgotten password URL.
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Forgottenpasswordurl: string;
    /**
     * Whether guest login is enabled.
     * @type {number}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Guestlogin: number;
    /**
     * Site https URL (if httpslogin is enabled).
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Httpswwwroot: string;
    /**
     * 
     * @type {Array<ToolMobileGetPublicConfig200ResponseIdentityprovidersInner>}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Identityproviders?: Array<ToolMobileGetPublicConfig200ResponseIdentityprovidersInner>;
    /**
     * Default language for the site.
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Lang?: string;
    /**
     * Languages on language menu.
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Langlist?: string;
    /**
     * Whether the language menu should be displayed.
     * @type {number}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Langmenu?: number;
    /**
     * SSO login launch URL.
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Launchurl?: string;
    /**
     * Sitewide locale.
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Locale?: string;
    /**
     * The site logo URL
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Logourl?: string;
    /**
     * Whether site maintenance is enabled.
     * @type {number}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Maintenanceenabled: number;
    /**
     * Maintenance message.
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Maintenancemessage: string;
    /**
     * Mobile custom CSS theme
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Mobilecssurl?: string;
    /**
     * Authentication method for user registration.
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Registerauth: string;
    /**
     * Values: 0 for No, 1 for Yes, 2 for optional.
     * @type {number}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Rememberusername: number;
    /**
     * Site name.
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Sitename: string;
    /**
     * Determines who has access to contact site support.
     * @type {number}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Supportavailability?: number;
    /**
     * Site support contact email
     *                     (only if age verification is enabled).
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Supportemail?: string;
    /**
     * Site support contact name
     *                     (only if age verification is enabled).
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Supportname?: string;
    /**
     * Site support page link.
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Supportpage?: string;
    /**
     * Android app's unique identifier.
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    ToolMobileAndroidappid?: string;
    /**
     * Disabled features in the app
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    ToolMobileDisabledfeatures?: string;
    /**
     * iOS app's unique identifier.
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    ToolMobileIosappid?: string;
    /**
     * Minimum required version to access.
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    ToolMobileMinimumversion?: string;
    /**
     * QR login configuration.
     * @type {number}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    ToolMobileQrcodetype?: number;
    /**
     * App download page.
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    ToolMobileSetuplink?: string;
    /**
     * The type of login. 1 for app, 2 for browser, 3 for embedded.
     * @type {number}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Typeoflogin: number;
    /**
     * 
     * @type {Array<AuthEmailSignupUser200ResponseWarningsInner>}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Warnings?: Array<AuthEmailSignupUser200ResponseWarningsInner>;
    /**
     * Site URL.
     * @type {string}
     * @memberof ToolMobileGetPublicConfig200Response
     */
    Wwwroot: string;
}

/**
 * Check if a given object implements the ToolMobileGetPublicConfig200Response interface.
 */
export function instanceOfToolMobileGetPublicConfig200Response(value: object): boolean {
    if (!('Authinstructions' in value)) return false;
    if (!('Authloginviaemail' in value)) return false;
    if (!('Authnoneenabled' in value)) return false;
    if (!('Enablemobilewebservice' in value)) return false;
    if (!('Enablewebservices' in value)) return false;
    if (!('Forgottenpasswordurl' in value)) return false;
    if (!('Guestlogin' in value)) return false;
    if (!('Httpswwwroot' in value)) return false;
    if (!('Maintenanceenabled' in value)) return false;
    if (!('Maintenancemessage' in value)) return false;
    if (!('Registerauth' in value)) return false;
    if (!('Rememberusername' in value)) return false;
    if (!('Sitename' in value)) return false;
    if (!('Typeoflogin' in value)) return false;
    if (!('Wwwroot' in value)) return false;
    return true;
}

export function ToolMobileGetPublicConfig200ResponseFromJSON(json: any): ToolMobileGetPublicConfig200Response {
    return ToolMobileGetPublicConfig200ResponseFromJSONTyped(json, false);
}

export function ToolMobileGetPublicConfig200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToolMobileGetPublicConfig200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'Agedigitalconsentverification': json['agedigitalconsentverification'] == null ? undefined : json['agedigitalconsentverification'],
        'Authinstructions': json['authinstructions'],
        'Authloginviaemail': json['authloginviaemail'],
        'Authnoneenabled': json['authnoneenabled'],
        'Autolang': json['autolang'] == null ? undefined : json['autolang'],
        'Compactlogourl': json['compactlogourl'] == null ? undefined : json['compactlogourl'],
        'Country': json['country'] == null ? undefined : json['country'],
        'Enablemobilewebservice': json['enablemobilewebservice'],
        'Enablewebservices': json['enablewebservices'],
        'Forgottenpasswordurl': json['forgottenpasswordurl'],
        'Guestlogin': json['guestlogin'],
        'Httpswwwroot': json['httpswwwroot'],
        'Identityproviders': json['identityproviders'] == null ? undefined : ((json['identityproviders'] as Array<any>).map(ToolMobileGetPublicConfig200ResponseIdentityprovidersInnerFromJSON)),
        'Lang': json['lang'] == null ? undefined : json['lang'],
        'Langlist': json['langlist'] == null ? undefined : json['langlist'],
        'Langmenu': json['langmenu'] == null ? undefined : json['langmenu'],
        'Launchurl': json['launchurl'] == null ? undefined : json['launchurl'],
        'Locale': json['locale'] == null ? undefined : json['locale'],
        'Logourl': json['logourl'] == null ? undefined : json['logourl'],
        'Maintenanceenabled': json['maintenanceenabled'],
        'Maintenancemessage': json['maintenancemessage'],
        'Mobilecssurl': json['mobilecssurl'] == null ? undefined : json['mobilecssurl'],
        'Registerauth': json['registerauth'],
        'Rememberusername': json['rememberusername'],
        'Sitename': json['sitename'],
        'Supportavailability': json['supportavailability'] == null ? undefined : json['supportavailability'],
        'Supportemail': json['supportemail'] == null ? undefined : json['supportemail'],
        'Supportname': json['supportname'] == null ? undefined : json['supportname'],
        'Supportpage': json['supportpage'] == null ? undefined : json['supportpage'],
        'ToolMobileAndroidappid': json['tool_mobile_androidappid'] == null ? undefined : json['tool_mobile_androidappid'],
        'ToolMobileDisabledfeatures': json['tool_mobile_disabledfeatures'] == null ? undefined : json['tool_mobile_disabledfeatures'],
        'ToolMobileIosappid': json['tool_mobile_iosappid'] == null ? undefined : json['tool_mobile_iosappid'],
        'ToolMobileMinimumversion': json['tool_mobile_minimumversion'] == null ? undefined : json['tool_mobile_minimumversion'],
        'ToolMobileQrcodetype': json['tool_mobile_qrcodetype'] == null ? undefined : json['tool_mobile_qrcodetype'],
        'ToolMobileSetuplink': json['tool_mobile_setuplink'] == null ? undefined : json['tool_mobile_setuplink'],
        'Typeoflogin': json['typeoflogin'],
        'Warnings': json['warnings'] == null ? undefined : ((json['warnings'] as Array<any>).map(AuthEmailSignupUser200ResponseWarningsInnerFromJSON)),
        'Wwwroot': json['wwwroot'],
    };
}

export function ToolMobileGetPublicConfig200ResponseToJSON(value?: ToolMobileGetPublicConfig200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'agedigitalconsentverification': value['Agedigitalconsentverification'],
        'authinstructions': value['Authinstructions'],
        'authloginviaemail': value['Authloginviaemail'],
        'authnoneenabled': value['Authnoneenabled'],
        'autolang': value['Autolang'],
        'compactlogourl': value['Compactlogourl'],
        'country': value['Country'],
        'enablemobilewebservice': value['Enablemobilewebservice'],
        'enablewebservices': value['Enablewebservices'],
        'forgottenpasswordurl': value['Forgottenpasswordurl'],
        'guestlogin': value['Guestlogin'],
        'httpswwwroot': value['Httpswwwroot'],
        'identityproviders': value['Identityproviders'] == null ? undefined : ((value['Identityproviders'] as Array<any>).map(ToolMobileGetPublicConfig200ResponseIdentityprovidersInnerToJSON)),
        'lang': value['Lang'],
        'langlist': value['Langlist'],
        'langmenu': value['Langmenu'],
        'launchurl': value['Launchurl'],
        'locale': value['Locale'],
        'logourl': value['Logourl'],
        'maintenanceenabled': value['Maintenanceenabled'],
        'maintenancemessage': value['Maintenancemessage'],
        'mobilecssurl': value['Mobilecssurl'],
        'registerauth': value['Registerauth'],
        'rememberusername': value['Rememberusername'],
        'sitename': value['Sitename'],
        'supportavailability': value['Supportavailability'],
        'supportemail': value['Supportemail'],
        'supportname': value['Supportname'],
        'supportpage': value['Supportpage'],
        'tool_mobile_androidappid': value['ToolMobileAndroidappid'],
        'tool_mobile_disabledfeatures': value['ToolMobileDisabledfeatures'],
        'tool_mobile_iosappid': value['ToolMobileIosappid'],
        'tool_mobile_minimumversion': value['ToolMobileMinimumversion'],
        'tool_mobile_qrcodetype': value['ToolMobileQrcodetype'],
        'tool_mobile_setuplink': value['ToolMobileSetuplink'],
        'typeoflogin': value['Typeoflogin'],
        'warnings': value['Warnings'] == null ? undefined : ((value['Warnings'] as Array<any>).map(AuthEmailSignupUser200ResponseWarningsInnerToJSON)),
        'wwwroot': value['Wwwroot'],
    };
}

