/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner } from './CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner';
import {
    CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInnerFromJSON,
    CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInnerFromJSONTyped,
    CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInnerToJSON,
} from './CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner';

/**
 * 
 * @export
 * @interface CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
 */
export interface CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner {
    /**
     * 
     * @type {Array<object>}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Calendareventtypes?: Array<object>;
    /**
     * daytitle
     * @type {string}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Daytitle?: string;
    /**
     * 
     * @type {Array<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner>}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Events?: Array<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner>;
    /**
     * hasevents
     * @type {boolean}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Hasevents?: boolean;
    /**
     * haslastdayofevent
     * @type {boolean}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Haslastdayofevent?: boolean;
    /**
     * hours
     * @type {number}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Hours?: number;
    /**
     * istoday
     * @type {boolean}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Istoday?: boolean;
    /**
     * isweekend
     * @type {boolean}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Isweekend?: boolean;
    /**
     * mday
     * @type {number}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Mday?: number;
    /**
     * minutes
     * @type {number}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Minutes?: number;
    /**
     * neweventtimestamp
     * @type {number}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Neweventtimestamp?: number;
    /**
     * nextperiod
     * @type {number}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Nextperiod?: number;
    /**
     * popovertitle
     * @type {string}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Popovertitle?: string;
    /**
     * previousperiod
     * @type {number}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Previousperiod?: number;
    /**
     * seconds
     * @type {number}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Seconds?: number;
    /**
     * timestamp
     * @type {number}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Timestamp?: number;
    /**
     * viewdaylink
     * @type {string}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Viewdaylink?: string;
    /**
     * viewdaylinktitle
     * @type {string}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Viewdaylinktitle?: string;
    /**
     * wday
     * @type {number}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Wday?: number;
    /**
     * yday
     * @type {number}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Yday?: number;
    /**
     * year
     * @type {number}
     * @memberof CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
     */
    Year?: number;
}

/**
 * Check if a given object implements the CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner interface.
 */
export function instanceOfCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner(value: object): boolean {
    return true;
}

export function CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerFromJSON(json: any): CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner {
    return CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerFromJSONTyped(json, false);
}

export function CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner {
    if (json == null) {
        return json;
    }
    return {
        
        'Calendareventtypes': json['calendareventtypes'] == null ? undefined : json['calendareventtypes'],
        'Daytitle': json['daytitle'] == null ? undefined : json['daytitle'],
        'Events': json['events'] == null ? undefined : ((json['events'] as Array<any>).map(CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInnerFromJSON)),
        'Hasevents': json['hasevents'] == null ? undefined : json['hasevents'],
        'Haslastdayofevent': json['haslastdayofevent'] == null ? undefined : json['haslastdayofevent'],
        'Hours': json['hours'] == null ? undefined : json['hours'],
        'Istoday': json['istoday'] == null ? undefined : json['istoday'],
        'Isweekend': json['isweekend'] == null ? undefined : json['isweekend'],
        'Mday': json['mday'] == null ? undefined : json['mday'],
        'Minutes': json['minutes'] == null ? undefined : json['minutes'],
        'Neweventtimestamp': json['neweventtimestamp'] == null ? undefined : json['neweventtimestamp'],
        'Nextperiod': json['nextperiod'] == null ? undefined : json['nextperiod'],
        'Popovertitle': json['popovertitle'] == null ? undefined : json['popovertitle'],
        'Previousperiod': json['previousperiod'] == null ? undefined : json['previousperiod'],
        'Seconds': json['seconds'] == null ? undefined : json['seconds'],
        'Timestamp': json['timestamp'] == null ? undefined : json['timestamp'],
        'Viewdaylink': json['viewdaylink'] == null ? undefined : json['viewdaylink'],
        'Viewdaylinktitle': json['viewdaylinktitle'] == null ? undefined : json['viewdaylinktitle'],
        'Wday': json['wday'] == null ? undefined : json['wday'],
        'Yday': json['yday'] == null ? undefined : json['yday'],
        'Year': json['year'] == null ? undefined : json['year'],
    };
}

export function CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerToJSON(value?: CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'calendareventtypes': value['Calendareventtypes'],
        'daytitle': value['Daytitle'],
        'events': value['Events'] == null ? undefined : ((value['Events'] as Array<any>).map(CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInnerToJSON)),
        'hasevents': value['Hasevents'],
        'haslastdayofevent': value['Haslastdayofevent'],
        'hours': value['Hours'],
        'istoday': value['Istoday'],
        'isweekend': value['Isweekend'],
        'mday': value['Mday'],
        'minutes': value['Minutes'],
        'neweventtimestamp': value['Neweventtimestamp'],
        'nextperiod': value['Nextperiod'],
        'popovertitle': value['Popovertitle'],
        'previousperiod': value['Previousperiod'],
        'seconds': value['Seconds'],
        'timestamp': value['Timestamp'],
        'viewdaylink': value['Viewdaylink'],
        'viewdaylinktitle': value['Viewdaylinktitle'],
        'wday': value['Wday'],
        'yday': value['Yday'],
        'year': value['Year'],
    };
}

