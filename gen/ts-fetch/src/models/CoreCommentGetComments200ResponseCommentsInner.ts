/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * comment
 * @export
 * @interface CoreCommentGetComments200ResponseCommentsInner
 */
export interface CoreCommentGetComments200ResponseCommentsInner {
    /**
     * HTML user picture
     * @type {string}
     * @memberof CoreCommentGetComments200ResponseCommentsInner
     */
    Avatar?: string;
    /**
     * The content text formatted
     * @type {string}
     * @memberof CoreCommentGetComments200ResponseCommentsInner
     */
    Content?: string;
    /**
     * Permission to delete=true/false
     * @type {boolean}
     * @memberof CoreCommentGetComments200ResponseCommentsInner
     */
    Delete?: boolean;
    /**
     * content format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof CoreCommentGetComments200ResponseCommentsInner
     */
    Format?: number;
    /**
     * fullname
     * @type {string}
     * @memberof CoreCommentGetComments200ResponseCommentsInner
     */
    Fullname?: string;
    /**
     * Comment ID
     * @type {number}
     * @memberof CoreCommentGetComments200ResponseCommentsInner
     */
    Id?: number;
    /**
     * URL profile
     * @type {string}
     * @memberof CoreCommentGetComments200ResponseCommentsInner
     */
    Profileurl?: string;
    /**
     * Time format
     * @type {string}
     * @memberof CoreCommentGetComments200ResponseCommentsInner
     */
    Strftimeformat?: string;
    /**
     * Time in human format
     * @type {string}
     * @memberof CoreCommentGetComments200ResponseCommentsInner
     */
    Time?: string;
    /**
     * Time created (timestamp)
     * @type {number}
     * @memberof CoreCommentGetComments200ResponseCommentsInner
     */
    Timecreated?: number;
    /**
     * User ID
     * @type {number}
     * @memberof CoreCommentGetComments200ResponseCommentsInner
     */
    Userid?: number;
}

/**
 * Check if a given object implements the CoreCommentGetComments200ResponseCommentsInner interface.
 */
export function instanceOfCoreCommentGetComments200ResponseCommentsInner(value: object): boolean {
    return true;
}

export function CoreCommentGetComments200ResponseCommentsInnerFromJSON(json: any): CoreCommentGetComments200ResponseCommentsInner {
    return CoreCommentGetComments200ResponseCommentsInnerFromJSONTyped(json, false);
}

export function CoreCommentGetComments200ResponseCommentsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreCommentGetComments200ResponseCommentsInner {
    if (json == null) {
        return json;
    }
    return {
        
        'Avatar': json['avatar'] == null ? undefined : json['avatar'],
        'Content': json['content'] == null ? undefined : json['content'],
        'Delete': json['delete'] == null ? undefined : json['delete'],
        'Format': json['format'] == null ? undefined : json['format'],
        'Fullname': json['fullname'] == null ? undefined : json['fullname'],
        'Id': json['id'] == null ? undefined : json['id'],
        'Profileurl': json['profileurl'] == null ? undefined : json['profileurl'],
        'Strftimeformat': json['strftimeformat'] == null ? undefined : json['strftimeformat'],
        'Time': json['time'] == null ? undefined : json['time'],
        'Timecreated': json['timecreated'] == null ? undefined : json['timecreated'],
        'Userid': json['userid'] == null ? undefined : json['userid'],
    };
}

export function CoreCommentGetComments200ResponseCommentsInnerToJSON(value?: CoreCommentGetComments200ResponseCommentsInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'avatar': value['Avatar'],
        'content': value['Content'],
        'delete': value['Delete'],
        'format': value['Format'],
        'fullname': value['Fullname'],
        'id': value['Id'],
        'profileurl': value['Profileurl'],
        'strftimeformat': value['Strftimeformat'],
        'time': value['Time'],
        'timecreated': value['Timecreated'],
        'userid': value['Userid'],
    };
}

