/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreCommentAddCommentsRequestCommentsInner } from './CoreCommentAddCommentsRequestCommentsInner';
import {
    CoreCommentAddCommentsRequestCommentsInnerFromJSON,
    CoreCommentAddCommentsRequestCommentsInnerFromJSONTyped,
    CoreCommentAddCommentsRequestCommentsInnerToJSON,
} from './CoreCommentAddCommentsRequestCommentsInner';

/**
 * 
 * @export
 * @interface CoreCommentAddCommentsRequest
 */
export interface CoreCommentAddCommentsRequest {
    /**
     * 
     * @type {Array<CoreCommentAddCommentsRequestCommentsInner>}
     * @memberof CoreCommentAddCommentsRequest
     */
    Comments: Array<CoreCommentAddCommentsRequestCommentsInner>;
}

/**
 * Check if a given object implements the CoreCommentAddCommentsRequest interface.
 */
export function instanceOfCoreCommentAddCommentsRequest(value: object): boolean {
    if (!('Comments' in value)) return false;
    return true;
}

export function CoreCommentAddCommentsRequestFromJSON(json: any): CoreCommentAddCommentsRequest {
    return CoreCommentAddCommentsRequestFromJSONTyped(json, false);
}

export function CoreCommentAddCommentsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreCommentAddCommentsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'Comments': ((json['comments'] as Array<any>).map(CoreCommentAddCommentsRequestCommentsInnerFromJSON)),
    };
}

export function CoreCommentAddCommentsRequestToJSON(value?: CoreCommentAddCommentsRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'comments': ((value['Comments'] as Array<any>).map(CoreCommentAddCommentsRequestCommentsInnerToJSON)),
    };
}

