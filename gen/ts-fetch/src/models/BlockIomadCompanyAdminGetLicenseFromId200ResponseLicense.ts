/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
 */
export interface BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense {
    /**
     * All licenses allocated
     * @type {boolean}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    Allallocated: boolean;
    /**
     * Allocation
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    Allocation: number;
    /**
     * Company ID
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    Companyid: number;
    /**
     * Expiry date
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    Expirydate: number;
    /**
     * License ID
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    Id: number;
    /**
     * Instant
     * @type {boolean}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    Instant: boolean;
    /**
     * License name
     * @type {string}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    Name: string;
    /**
     * Parent ID
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    Parentid: number;
    /**
     * Program
     * @type {boolean}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    Program: boolean;
    /**
     * Reference
     * @type {string}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    Reference: string;
    /**
     * Start date
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    Startdate: number;
    /**
     * License type - 0 = standard, 1 = reusable, 2 = standard educator, 3 = reusable educator
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    Type: number;
    /**
     * Used
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    Used: number;
    /**
     * Valid length
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    Validlength: number;
}

/**
 * Check if a given object implements the BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense interface.
 */
export function instanceOfBlockIomadCompanyAdminGetLicenseFromId200ResponseLicense(value: object): boolean {
    if (!('Allallocated' in value)) return false;
    if (!('Allocation' in value)) return false;
    if (!('Companyid' in value)) return false;
    if (!('Expirydate' in value)) return false;
    if (!('Id' in value)) return false;
    if (!('Instant' in value)) return false;
    if (!('Name' in value)) return false;
    if (!('Parentid' in value)) return false;
    if (!('Program' in value)) return false;
    if (!('Reference' in value)) return false;
    if (!('Startdate' in value)) return false;
    if (!('Type' in value)) return false;
    if (!('Used' in value)) return false;
    if (!('Validlength' in value)) return false;
    return true;
}

export function BlockIomadCompanyAdminGetLicenseFromId200ResponseLicenseFromJSON(json: any): BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense {
    return BlockIomadCompanyAdminGetLicenseFromId200ResponseLicenseFromJSONTyped(json, false);
}

export function BlockIomadCompanyAdminGetLicenseFromId200ResponseLicenseFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense {
    if (json == null) {
        return json;
    }
    return {
        
        'Allallocated': json['allallocated'],
        'Allocation': json['allocation'],
        'Companyid': json['companyid'],
        'Expirydate': json['expirydate'],
        'Id': json['id'],
        'Instant': json['instant'],
        'Name': json['name'],
        'Parentid': json['parentid'],
        'Program': json['program'],
        'Reference': json['reference'],
        'Startdate': json['startdate'],
        'Type': json['type'],
        'Used': json['used'],
        'Validlength': json['validlength'],
    };
}

export function BlockIomadCompanyAdminGetLicenseFromId200ResponseLicenseToJSON(value?: BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'allallocated': value['Allallocated'],
        'allocation': value['Allocation'],
        'companyid': value['Companyid'],
        'expirydate': value['Expirydate'],
        'id': value['Id'],
        'instant': value['Instant'],
        'name': value['Name'],
        'parentid': value['Parentid'],
        'program': value['Program'],
        'reference': value['Reference'],
        'startdate': value['Startdate'],
        'type': value['Type'],
        'used': value['Used'],
        'validlength': value['Validlength'],
    };
}

