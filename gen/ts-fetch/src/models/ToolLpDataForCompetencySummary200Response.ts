/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreCompetencyCreateCompetency200Response } from './CoreCompetencyCreateCompetency200Response';
import {
    CoreCompetencyCreateCompetency200ResponseFromJSON,
    CoreCompetencyCreateCompetency200ResponseFromJSONTyped,
    CoreCompetencyCreateCompetency200ResponseToJSON,
} from './CoreCompetencyCreateCompetency200Response';
import type { CoreCompetencyDuplicateCompetencyFramework200Response } from './CoreCompetencyDuplicateCompetencyFramework200Response';
import {
    CoreCompetencyDuplicateCompetencyFramework200ResponseFromJSON,
    CoreCompetencyDuplicateCompetencyFramework200ResponseFromJSONTyped,
    CoreCompetencyDuplicateCompetencyFramework200ResponseToJSON,
} from './CoreCompetencyDuplicateCompetencyFramework200Response';
import type { CoreCompetencyReadUserEvidence200ResponseCompetenciesInner } from './CoreCompetencyReadUserEvidence200ResponseCompetenciesInner';
import {
    CoreCompetencyReadUserEvidence200ResponseCompetenciesInnerFromJSON,
    CoreCompetencyReadUserEvidence200ResponseCompetenciesInnerFromJSONTyped,
    CoreCompetencyReadUserEvidence200ResponseCompetenciesInnerToJSON,
} from './CoreCompetencyReadUserEvidence200ResponseCompetenciesInner';
import type { CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner } from './CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner';
import {
    CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInnerFromJSON,
    CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInnerFromJSONTyped,
    CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInnerToJSON,
} from './CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner';
import type { ToolLpDataForCompetencySummary200ResponseComppath } from './ToolLpDataForCompetencySummary200ResponseComppath';
import {
    ToolLpDataForCompetencySummary200ResponseComppathFromJSON,
    ToolLpDataForCompetencySummary200ResponseComppathFromJSONTyped,
    ToolLpDataForCompetencySummary200ResponseComppathToJSON,
} from './ToolLpDataForCompetencySummary200ResponseComppath';

/**
 * 
 * @export
 * @interface ToolLpDataForCompetencySummary200Response
 */
export interface ToolLpDataForCompetencySummary200Response {
    /**
     * 
     * @type {CoreCompetencyCreateCompetency200Response}
     * @memberof ToolLpDataForCompetencySummary200Response
     */
    Competency: CoreCompetencyCreateCompetency200Response;
    /**
     * 
     * @type {ToolLpDataForCompetencySummary200ResponseComppath}
     * @memberof ToolLpDataForCompetencySummary200Response
     */
    Comppath: ToolLpDataForCompetencySummary200ResponseComppath;
    /**
     * 
     * @type {CoreCompetencyDuplicateCompetencyFramework200Response}
     * @memberof ToolLpDataForCompetencySummary200Response
     */
    Framework: CoreCompetencyDuplicateCompetencyFramework200Response;
    /**
     * hascourses
     * @type {boolean}
     * @memberof ToolLpDataForCompetencySummary200Response
     */
    Hascourses: boolean;
    /**
     * hasrelatedcompetencies
     * @type {boolean}
     * @memberof ToolLpDataForCompetencySummary200Response
     */
    Hasrelatedcompetencies: boolean;
    /**
     * 
     * @type {Array<CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner>}
     * @memberof ToolLpDataForCompetencySummary200Response
     */
    Linkedcourses: Array<CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner>;
    /**
     * pluginbaseurl
     * @type {string}
     * @memberof ToolLpDataForCompetencySummary200Response
     */
    Pluginbaseurl: string;
    /**
     * 
     * @type {Array<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner>}
     * @memberof ToolLpDataForCompetencySummary200Response
     */
    Relatedcompetencies: Array<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner>;
    /**
     * scaleconfiguration
     * @type {string}
     * @memberof ToolLpDataForCompetencySummary200Response
     */
    Scaleconfiguration: string;
    /**
     * scaleid
     * @type {number}
     * @memberof ToolLpDataForCompetencySummary200Response
     */
    Scaleid: number;
    /**
     * taxonomyterm
     * @type {string}
     * @memberof ToolLpDataForCompetencySummary200Response
     */
    Taxonomyterm: string;
}

/**
 * Check if a given object implements the ToolLpDataForCompetencySummary200Response interface.
 */
export function instanceOfToolLpDataForCompetencySummary200Response(value: object): boolean {
    if (!('Competency' in value)) return false;
    if (!('Comppath' in value)) return false;
    if (!('Framework' in value)) return false;
    if (!('Hascourses' in value)) return false;
    if (!('Hasrelatedcompetencies' in value)) return false;
    if (!('Linkedcourses' in value)) return false;
    if (!('Pluginbaseurl' in value)) return false;
    if (!('Relatedcompetencies' in value)) return false;
    if (!('Scaleconfiguration' in value)) return false;
    if (!('Scaleid' in value)) return false;
    if (!('Taxonomyterm' in value)) return false;
    return true;
}

export function ToolLpDataForCompetencySummary200ResponseFromJSON(json: any): ToolLpDataForCompetencySummary200Response {
    return ToolLpDataForCompetencySummary200ResponseFromJSONTyped(json, false);
}

export function ToolLpDataForCompetencySummary200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToolLpDataForCompetencySummary200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'Competency': CoreCompetencyCreateCompetency200ResponseFromJSON(json['competency']),
        'Comppath': ToolLpDataForCompetencySummary200ResponseComppathFromJSON(json['comppath']),
        'Framework': CoreCompetencyDuplicateCompetencyFramework200ResponseFromJSON(json['framework']),
        'Hascourses': json['hascourses'],
        'Hasrelatedcompetencies': json['hasrelatedcompetencies'],
        'Linkedcourses': ((json['linkedcourses'] as Array<any>).map(CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInnerFromJSON)),
        'Pluginbaseurl': json['pluginbaseurl'],
        'Relatedcompetencies': ((json['relatedcompetencies'] as Array<any>).map(CoreCompetencyReadUserEvidence200ResponseCompetenciesInnerFromJSON)),
        'Scaleconfiguration': json['scaleconfiguration'],
        'Scaleid': json['scaleid'],
        'Taxonomyterm': json['taxonomyterm'],
    };
}

export function ToolLpDataForCompetencySummary200ResponseToJSON(value?: ToolLpDataForCompetencySummary200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'competency': CoreCompetencyCreateCompetency200ResponseToJSON(value['Competency']),
        'comppath': ToolLpDataForCompetencySummary200ResponseComppathToJSON(value['Comppath']),
        'framework': CoreCompetencyDuplicateCompetencyFramework200ResponseToJSON(value['Framework']),
        'hascourses': value['Hascourses'],
        'hasrelatedcompetencies': value['Hasrelatedcompetencies'],
        'linkedcourses': ((value['Linkedcourses'] as Array<any>).map(CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInnerToJSON)),
        'pluginbaseurl': value['Pluginbaseurl'],
        'relatedcompetencies': ((value['Relatedcompetencies'] as Array<any>).map(CoreCompetencyReadUserEvidence200ResponseCompetenciesInnerToJSON)),
        'scaleconfiguration': value['Scaleconfiguration'],
        'scaleid': value['Scaleid'],
        'taxonomyterm': value['Taxonomyterm'],
    };
}

