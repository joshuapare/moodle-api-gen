/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner } from './CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner';
import {
    CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSON,
    CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSONTyped,
    CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerToJSON,
} from './CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner';

/**
 * 
 * @export
 * @interface ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
 */
export interface ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner {
    /**
     * 0 = will be closed manually, greater than 0 the timestamp of the end of the assessment phase.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Assessmentend?: number;
    /**
     * 0 = will be started manually, greater than 0 the timestamp of the start of the assessment phase.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Assessmentstart?: number;
    /**
     * A text to be displayed at the end of the workshop.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Conclusion?: string;
    /**
     * 
     * @type {Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Conclusionfiles?: Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>;
    /**
     * conclusion format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Conclusionformat?: number;
    /**
     * Course id this workshop is part of.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Course?: number;
    /**
     * coursemodule
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Coursemodule?: number;
    /**
     * The recently used grading evaluation method.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Evaluation?: string;
    /**
     * 0 = example assessments are voluntary, 1 = examples must be assessed before submission,
     *                     2 = examples are available after own submission and must be assessed before peer/self assessment phase.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Examplesmode?: number;
    /**
     * The maximum grade for submission.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Grade?: number;
    /**
     * Number of digits that should be shown after the decimal point when displaying grades.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Gradedecimals?: number;
    /**
     * The maximum grade for assessment.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Gradinggrade?: number;
    /**
     * The primary key of the record.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Id?: number;
    /**
     * Instructions for the submission phase.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Instructauthors?: string;
    /**
     * 
     * @type {Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Instructauthorsfiles?: Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>;
    /**
     * instructauthors format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Instructauthorsformat?: number;
    /**
     * Instructions for the assessment phase.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Instructreviewers?: string;
    /**
     * 
     * @type {Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Instructreviewersfiles?: Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>;
    /**
     * instructreviewers format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Instructreviewersformat?: number;
    /**
     * Workshop introduction text.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Intro?: string;
    /**
     * 
     * @type {Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Introfiles?: Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>;
    /**
     * intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Introformat?: number;
    /**
     * Forced activity language
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Lang?: string;
    /**
     * Allow submitting the work after the deadline.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Latesubmissions?: boolean;
    /**
     * Maximum size of the one attached file.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Maxbytes?: number;
    /**
     * Workshop name.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Name?: string;
    /**
     * Maximum number of submission attachments.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Nattachments?: number;
    /**
     * Number of allowed attachments to the overall feedback.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Overallfeedbackfiles?: number;
    /**
     * Comma separated list of file extensions.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Overallfeedbackfiletypes?: string;
    /**
     * Maximum size of one file attached to the overall feedback.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Overallfeedbackmaxbytes?: number;
    /**
     * Mode of the overall feedback support.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Overallfeedbackmode?: number;
    /**
     * The current phase of workshop (0 = not available, 1 = submission, 2 = assessment, 3 = closed).
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Phase?: number;
    /**
     * Automatically switch to the assessment phase after the submissions deadline.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Phaseswitchassessment?: boolean;
    /**
     * The type of the current grading strategy used in this workshop.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Strategy?: string;
    /**
     * 0 = will be closed manually, greater than 0 the timestamp of the end of the submission phase.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Submissionend?: number;
    /**
     * Comma separated list of file extensions.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Submissionfiletypes?: string;
    /**
     * 0 = will be started manually, greater than 0 the timestamp of the start of the submission phase.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Submissionstart?: number;
    /**
     * Indicates whether a file upload is required as part of each submission. 0 for no, 1 for optional, 2 for required.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Submissiontypefile?: number;
    /**
     * Indicates whether text is required as part of each submission. 0 for no, 1 for optional, 2 for required.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Submissiontypetext?: number;
    /**
     * The timestamp when the module was modified.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Timemodified?: number;
    /**
     * Optional feature: students practise evaluating on example submissions from teacher.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Useexamples?: boolean;
    /**
     * Optional feature: students perform peer assessment of others' work.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Usepeerassessment?: boolean;
    /**
     * Optional feature: students perform self assessment of their own work.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    Useselfassessment?: boolean;
}

/**
 * Check if a given object implements the ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner interface.
 */
export function instanceOfModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner(value: object): boolean {
    return true;
}

export function ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInnerFromJSON(json: any): ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner {
    return ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInnerFromJSONTyped(json, false);
}

export function ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner {
    if (json == null) {
        return json;
    }
    return {
        
        'Assessmentend': json['assessmentend'] == null ? undefined : json['assessmentend'],
        'Assessmentstart': json['assessmentstart'] == null ? undefined : json['assessmentstart'],
        'Conclusion': json['conclusion'] == null ? undefined : json['conclusion'],
        'Conclusionfiles': json['conclusionfiles'] == null ? undefined : ((json['conclusionfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSON)),
        'Conclusionformat': json['conclusionformat'] == null ? undefined : json['conclusionformat'],
        'Course': json['course'] == null ? undefined : json['course'],
        'Coursemodule': json['coursemodule'] == null ? undefined : json['coursemodule'],
        'Evaluation': json['evaluation'] == null ? undefined : json['evaluation'],
        'Examplesmode': json['examplesmode'] == null ? undefined : json['examplesmode'],
        'Grade': json['grade'] == null ? undefined : json['grade'],
        'Gradedecimals': json['gradedecimals'] == null ? undefined : json['gradedecimals'],
        'Gradinggrade': json['gradinggrade'] == null ? undefined : json['gradinggrade'],
        'Id': json['id'] == null ? undefined : json['id'],
        'Instructauthors': json['instructauthors'] == null ? undefined : json['instructauthors'],
        'Instructauthorsfiles': json['instructauthorsfiles'] == null ? undefined : ((json['instructauthorsfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSON)),
        'Instructauthorsformat': json['instructauthorsformat'] == null ? undefined : json['instructauthorsformat'],
        'Instructreviewers': json['instructreviewers'] == null ? undefined : json['instructreviewers'],
        'Instructreviewersfiles': json['instructreviewersfiles'] == null ? undefined : ((json['instructreviewersfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSON)),
        'Instructreviewersformat': json['instructreviewersformat'] == null ? undefined : json['instructreviewersformat'],
        'Intro': json['intro'] == null ? undefined : json['intro'],
        'Introfiles': json['introfiles'] == null ? undefined : ((json['introfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSON)),
        'Introformat': json['introformat'] == null ? undefined : json['introformat'],
        'Lang': json['lang'] == null ? undefined : json['lang'],
        'Latesubmissions': json['latesubmissions'] == null ? undefined : json['latesubmissions'],
        'Maxbytes': json['maxbytes'] == null ? undefined : json['maxbytes'],
        'Name': json['name'] == null ? undefined : json['name'],
        'Nattachments': json['nattachments'] == null ? undefined : json['nattachments'],
        'Overallfeedbackfiles': json['overallfeedbackfiles'] == null ? undefined : json['overallfeedbackfiles'],
        'Overallfeedbackfiletypes': json['overallfeedbackfiletypes'] == null ? undefined : json['overallfeedbackfiletypes'],
        'Overallfeedbackmaxbytes': json['overallfeedbackmaxbytes'] == null ? undefined : json['overallfeedbackmaxbytes'],
        'Overallfeedbackmode': json['overallfeedbackmode'] == null ? undefined : json['overallfeedbackmode'],
        'Phase': json['phase'] == null ? undefined : json['phase'],
        'Phaseswitchassessment': json['phaseswitchassessment'] == null ? undefined : json['phaseswitchassessment'],
        'Strategy': json['strategy'] == null ? undefined : json['strategy'],
        'Submissionend': json['submissionend'] == null ? undefined : json['submissionend'],
        'Submissionfiletypes': json['submissionfiletypes'] == null ? undefined : json['submissionfiletypes'],
        'Submissionstart': json['submissionstart'] == null ? undefined : json['submissionstart'],
        'Submissiontypefile': json['submissiontypefile'] == null ? undefined : json['submissiontypefile'],
        'Submissiontypetext': json['submissiontypetext'] == null ? undefined : json['submissiontypetext'],
        'Timemodified': json['timemodified'] == null ? undefined : json['timemodified'],
        'Useexamples': json['useexamples'] == null ? undefined : json['useexamples'],
        'Usepeerassessment': json['usepeerassessment'] == null ? undefined : json['usepeerassessment'],
        'Useselfassessment': json['useselfassessment'] == null ? undefined : json['useselfassessment'],
    };
}

export function ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInnerToJSON(value?: ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'assessmentend': value['Assessmentend'],
        'assessmentstart': value['Assessmentstart'],
        'conclusion': value['Conclusion'],
        'conclusionfiles': value['Conclusionfiles'] == null ? undefined : ((value['Conclusionfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerToJSON)),
        'conclusionformat': value['Conclusionformat'],
        'course': value['Course'],
        'coursemodule': value['Coursemodule'],
        'evaluation': value['Evaluation'],
        'examplesmode': value['Examplesmode'],
        'grade': value['Grade'],
        'gradedecimals': value['Gradedecimals'],
        'gradinggrade': value['Gradinggrade'],
        'id': value['Id'],
        'instructauthors': value['Instructauthors'],
        'instructauthorsfiles': value['Instructauthorsfiles'] == null ? undefined : ((value['Instructauthorsfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerToJSON)),
        'instructauthorsformat': value['Instructauthorsformat'],
        'instructreviewers': value['Instructreviewers'],
        'instructreviewersfiles': value['Instructreviewersfiles'] == null ? undefined : ((value['Instructreviewersfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerToJSON)),
        'instructreviewersformat': value['Instructreviewersformat'],
        'intro': value['Intro'],
        'introfiles': value['Introfiles'] == null ? undefined : ((value['Introfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerToJSON)),
        'introformat': value['Introformat'],
        'lang': value['Lang'],
        'latesubmissions': value['Latesubmissions'],
        'maxbytes': value['Maxbytes'],
        'name': value['Name'],
        'nattachments': value['Nattachments'],
        'overallfeedbackfiles': value['Overallfeedbackfiles'],
        'overallfeedbackfiletypes': value['Overallfeedbackfiletypes'],
        'overallfeedbackmaxbytes': value['Overallfeedbackmaxbytes'],
        'overallfeedbackmode': value['Overallfeedbackmode'],
        'phase': value['Phase'],
        'phaseswitchassessment': value['Phaseswitchassessment'],
        'strategy': value['Strategy'],
        'submissionend': value['Submissionend'],
        'submissionfiletypes': value['Submissionfiletypes'],
        'submissionstart': value['Submissionstart'],
        'submissiontypefile': value['Submissiontypefile'],
        'submissiontypetext': value['Submissiontypetext'],
        'timemodified': value['Timemodified'],
        'useexamples': value['Useexamples'],
        'usepeerassessment': value['Usepeerassessment'],
        'useselfassessment': value['Useselfassessment'],
    };
}

