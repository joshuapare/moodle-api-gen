/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreCompetencyReadPlan200Response } from './CoreCompetencyReadPlan200Response';
import {
    CoreCompetencyReadPlan200ResponseFromJSON,
    CoreCompetencyReadPlan200ResponseFromJSONTyped,
    CoreCompetencyReadPlan200ResponseToJSON,
} from './CoreCompetencyReadPlan200Response';
import type { ToolLpDataForPlanPage200ResponseCompetenciesInner } from './ToolLpDataForPlanPage200ResponseCompetenciesInner';
import {
    ToolLpDataForPlanPage200ResponseCompetenciesInnerFromJSON,
    ToolLpDataForPlanPage200ResponseCompetenciesInnerFromJSONTyped,
    ToolLpDataForPlanPage200ResponseCompetenciesInnerToJSON,
} from './ToolLpDataForPlanPage200ResponseCompetenciesInner';

/**
 * 
 * @export
 * @interface ToolLpDataForPlanPage200Response
 */
export interface ToolLpDataForPlanPage200Response {
    /**
     * 
     * @type {Array<ToolLpDataForPlanPage200ResponseCompetenciesInner>}
     * @memberof ToolLpDataForPlanPage200Response
     */
    Competencies: Array<ToolLpDataForPlanPage200ResponseCompetenciesInner>;
    /**
     * Count of competencies
     * @type {number}
     * @memberof ToolLpDataForPlanPage200Response
     */
    Competencycount: number;
    /**
     * Context ID.
     * @type {number}
     * @memberof ToolLpDataForPlanPage200Response
     */
    Contextid: number;
    /**
     * 
     * @type {CoreCompetencyReadPlan200Response}
     * @memberof ToolLpDataForPlanPage200Response
     */
    Plan: CoreCompetencyReadPlan200Response;
    /**
     * Plugin base URL.
     * @type {string}
     * @memberof ToolLpDataForPlanPage200Response
     */
    Pluginbaseurl: string;
    /**
     * Count of proficientcompetencies
     * @type {number}
     * @memberof ToolLpDataForPlanPage200Response
     */
    Proficientcompetencycount: number;
    /**
     * Percentage of competencies proficient
     * @type {number}
     * @memberof ToolLpDataForPlanPage200Response
     */
    Proficientcompetencypercentage: number;
    /**
     * Displayable percentage
     * @type {string}
     * @memberof ToolLpDataForPlanPage200Response
     */
    Proficientcompetencypercentageformatted: string;
}

/**
 * Check if a given object implements the ToolLpDataForPlanPage200Response interface.
 */
export function instanceOfToolLpDataForPlanPage200Response(value: object): boolean {
    if (!('Competencies' in value)) return false;
    if (!('Competencycount' in value)) return false;
    if (!('Contextid' in value)) return false;
    if (!('Plan' in value)) return false;
    if (!('Pluginbaseurl' in value)) return false;
    if (!('Proficientcompetencycount' in value)) return false;
    if (!('Proficientcompetencypercentage' in value)) return false;
    if (!('Proficientcompetencypercentageformatted' in value)) return false;
    return true;
}

export function ToolLpDataForPlanPage200ResponseFromJSON(json: any): ToolLpDataForPlanPage200Response {
    return ToolLpDataForPlanPage200ResponseFromJSONTyped(json, false);
}

export function ToolLpDataForPlanPage200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToolLpDataForPlanPage200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'Competencies': ((json['competencies'] as Array<any>).map(ToolLpDataForPlanPage200ResponseCompetenciesInnerFromJSON)),
        'Competencycount': json['competencycount'],
        'Contextid': json['contextid'],
        'Plan': CoreCompetencyReadPlan200ResponseFromJSON(json['plan']),
        'Pluginbaseurl': json['pluginbaseurl'],
        'Proficientcompetencycount': json['proficientcompetencycount'],
        'Proficientcompetencypercentage': json['proficientcompetencypercentage'],
        'Proficientcompetencypercentageformatted': json['proficientcompetencypercentageformatted'],
    };
}

export function ToolLpDataForPlanPage200ResponseToJSON(value?: ToolLpDataForPlanPage200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'competencies': ((value['Competencies'] as Array<any>).map(ToolLpDataForPlanPage200ResponseCompetenciesInnerToJSON)),
        'competencycount': value['Competencycount'],
        'contextid': value['Contextid'],
        'plan': CoreCompetencyReadPlan200ResponseToJSON(value['Plan']),
        'pluginbaseurl': value['Pluginbaseurl'],
        'proficientcompetencycount': value['Proficientcompetencycount'],
        'proficientcompetencypercentage': value['Proficientcompetencypercentage'],
        'proficientcompetencypercentageformatted': value['Proficientcompetencypercentageformatted'],
    };
}

