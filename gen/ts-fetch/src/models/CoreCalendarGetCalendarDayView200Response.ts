/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreCalendarGetCalendarDayView200ResponseDate } from './CoreCalendarGetCalendarDayView200ResponseDate';
import {
    CoreCalendarGetCalendarDayView200ResponseDateFromJSON,
    CoreCalendarGetCalendarDayView200ResponseDateFromJSONTyped,
    CoreCalendarGetCalendarDayView200ResponseDateToJSON,
} from './CoreCalendarGetCalendarDayView200ResponseDate';
import type { CoreCalendarGetCalendarDayView200ResponseEventsInner } from './CoreCalendarGetCalendarDayView200ResponseEventsInner';
import {
    CoreCalendarGetCalendarDayView200ResponseEventsInnerFromJSON,
    CoreCalendarGetCalendarDayView200ResponseEventsInnerFromJSONTyped,
    CoreCalendarGetCalendarDayView200ResponseEventsInnerToJSON,
} from './CoreCalendarGetCalendarDayView200ResponseEventsInner';
import type { CoreCalendarGetCalendarDayView200ResponseNextperiod } from './CoreCalendarGetCalendarDayView200ResponseNextperiod';
import {
    CoreCalendarGetCalendarDayView200ResponseNextperiodFromJSON,
    CoreCalendarGetCalendarDayView200ResponseNextperiodFromJSONTyped,
    CoreCalendarGetCalendarDayView200ResponseNextperiodToJSON,
} from './CoreCalendarGetCalendarDayView200ResponseNextperiod';

/**
 * 
 * @export
 * @interface CoreCalendarGetCalendarDayView200Response
 */
export interface CoreCalendarGetCalendarDayView200Response {
    /**
     * categoryid
     * @type {number}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    Categoryid?: number;
    /**
     * courseid
     * @type {number}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    Courseid: number;
    /**
     * 
     * @type {CoreCalendarGetCalendarDayView200ResponseDate}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    Date: CoreCalendarGetCalendarDayView200ResponseDate;
    /**
     * defaulteventcontext
     * @type {number}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    Defaulteventcontext: number;
    /**
     * 
     * @type {Array<CoreCalendarGetCalendarDayView200ResponseEventsInner>}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    Events: Array<CoreCalendarGetCalendarDayView200ResponseEventsInner>;
    /**
     * filter_selector
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    FilterSelector: string;
    /**
     * larrow
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    Larrow: string;
    /**
     * neweventtimestamp
     * @type {number}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    Neweventtimestamp: number;
    /**
     * 
     * @type {CoreCalendarGetCalendarDayView200ResponseNextperiod}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    Nextperiod: CoreCalendarGetCalendarDayView200ResponseNextperiod;
    /**
     * nextperiodlink
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    Nextperiodlink: string;
    /**
     * nextperiodname
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    Nextperiodname: string;
    /**
     * periodname
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    Periodname: string;
    /**
     * 
     * @type {CoreCalendarGetCalendarDayView200ResponseNextperiod}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    Previousperiod: CoreCalendarGetCalendarDayView200ResponseNextperiod;
    /**
     * previousperiodlink
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    Previousperiodlink: string;
    /**
     * previousperiodname
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    Previousperiodname: string;
    /**
     * rarrow
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    Rarrow: string;
}

/**
 * Check if a given object implements the CoreCalendarGetCalendarDayView200Response interface.
 */
export function instanceOfCoreCalendarGetCalendarDayView200Response(value: object): boolean {
    if (!('Courseid' in value)) return false;
    if (!('Date' in value)) return false;
    if (!('Defaulteventcontext' in value)) return false;
    if (!('Events' in value)) return false;
    if (!('FilterSelector' in value)) return false;
    if (!('Larrow' in value)) return false;
    if (!('Neweventtimestamp' in value)) return false;
    if (!('Nextperiod' in value)) return false;
    if (!('Nextperiodlink' in value)) return false;
    if (!('Nextperiodname' in value)) return false;
    if (!('Periodname' in value)) return false;
    if (!('Previousperiod' in value)) return false;
    if (!('Previousperiodlink' in value)) return false;
    if (!('Previousperiodname' in value)) return false;
    if (!('Rarrow' in value)) return false;
    return true;
}

export function CoreCalendarGetCalendarDayView200ResponseFromJSON(json: any): CoreCalendarGetCalendarDayView200Response {
    return CoreCalendarGetCalendarDayView200ResponseFromJSONTyped(json, false);
}

export function CoreCalendarGetCalendarDayView200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreCalendarGetCalendarDayView200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'Categoryid': json['categoryid'] == null ? undefined : json['categoryid'],
        'Courseid': json['courseid'],
        'Date': CoreCalendarGetCalendarDayView200ResponseDateFromJSON(json['date']),
        'Defaulteventcontext': json['defaulteventcontext'],
        'Events': ((json['events'] as Array<any>).map(CoreCalendarGetCalendarDayView200ResponseEventsInnerFromJSON)),
        'FilterSelector': json['filter_selector'],
        'Larrow': json['larrow'],
        'Neweventtimestamp': json['neweventtimestamp'],
        'Nextperiod': CoreCalendarGetCalendarDayView200ResponseNextperiodFromJSON(json['nextperiod']),
        'Nextperiodlink': json['nextperiodlink'],
        'Nextperiodname': json['nextperiodname'],
        'Periodname': json['periodname'],
        'Previousperiod': CoreCalendarGetCalendarDayView200ResponseNextperiodFromJSON(json['previousperiod']),
        'Previousperiodlink': json['previousperiodlink'],
        'Previousperiodname': json['previousperiodname'],
        'Rarrow': json['rarrow'],
    };
}

export function CoreCalendarGetCalendarDayView200ResponseToJSON(value?: CoreCalendarGetCalendarDayView200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'categoryid': value['Categoryid'],
        'courseid': value['Courseid'],
        'date': CoreCalendarGetCalendarDayView200ResponseDateToJSON(value['Date']),
        'defaulteventcontext': value['Defaulteventcontext'],
        'events': ((value['Events'] as Array<any>).map(CoreCalendarGetCalendarDayView200ResponseEventsInnerToJSON)),
        'filter_selector': value['FilterSelector'],
        'larrow': value['Larrow'],
        'neweventtimestamp': value['Neweventtimestamp'],
        'nextperiod': CoreCalendarGetCalendarDayView200ResponseNextperiodToJSON(value['Nextperiod']),
        'nextperiodlink': value['Nextperiodlink'],
        'nextperiodname': value['Nextperiodname'],
        'periodname': value['Periodname'],
        'previousperiod': CoreCalendarGetCalendarDayView200ResponseNextperiodToJSON(value['Previousperiod']),
        'previousperiodlink': value['Previousperiodlink'],
        'previousperiodname': value['Previousperiodname'],
        'rarrow': value['Rarrow'],
    };
}

