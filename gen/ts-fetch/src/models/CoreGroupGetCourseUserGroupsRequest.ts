/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CoreGroupGetCourseUserGroupsRequest
 */
export interface CoreGroupGetCourseUserGroupsRequest {
    /**
     * Id of course (empty or 0 for all the courses where the user is enrolled).
     * @type {number}
     * @memberof CoreGroupGetCourseUserGroupsRequest
     */
    Courseid?: number;
    /**
     * returns only groups in the specified grouping
     * @type {number}
     * @memberof CoreGroupGetCourseUserGroupsRequest
     */
    Groupingid?: number;
    /**
     * Id of user (empty or 0 for current user).
     * @type {number}
     * @memberof CoreGroupGetCourseUserGroupsRequest
     */
    Userid?: number;
}

/**
 * Check if a given object implements the CoreGroupGetCourseUserGroupsRequest interface.
 */
export function instanceOfCoreGroupGetCourseUserGroupsRequest(value: object): boolean {
    return true;
}

export function CoreGroupGetCourseUserGroupsRequestFromJSON(json: any): CoreGroupGetCourseUserGroupsRequest {
    return CoreGroupGetCourseUserGroupsRequestFromJSONTyped(json, false);
}

export function CoreGroupGetCourseUserGroupsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreGroupGetCourseUserGroupsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'Courseid': json['courseid'] == null ? undefined : json['courseid'],
        'Groupingid': json['groupingid'] == null ? undefined : json['groupingid'],
        'Userid': json['userid'] == null ? undefined : json['userid'],
    };
}

export function CoreGroupGetCourseUserGroupsRequestToJSON(value?: CoreGroupGetCourseUserGroupsRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'courseid': value['Courseid'],
        'groupingid': value['Groupingid'],
        'userid': value['Userid'],
    };
}

