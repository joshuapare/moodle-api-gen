/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner } from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';
import {
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSONTyped,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON,
} from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';

/**
 * 
 * @export
 * @interface ModQuizGetQuizzesByCourses200ResponseQuizzesInner
 */
export interface ModQuizGetQuizzesByCourses200ResponseQuizzesInner {
    /**
     * Whether to allow the quiz to be attempted
     *                                                                             offline in the mobile app
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Allowofflineattempts?: number;
    /**
     * Whether subsequent attempts start from the answer
     *                                                                     to the previous attempt (1) or start blank (0).
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Attemptonlast?: number;
    /**
     * The maximum number of attempts a student is allowed.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Attempts?: number;
    /**
     * Auto-save delay
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Autosaveperiod?: number;
    /**
     * Restriciton on the browser the student must
     *                                                                     use. E.g. 'securewindow'.
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Browsersecurity?: string;
    /**
     * Allows students to redo any completed question
     *                                                                         within a quiz attempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Canredoquestions?: number;
    /**
     * Mark quiz complete when the student has
     *                                                                                 exhausted the maximum number of attempts
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Completionattemptsexhausted?: number;
    /**
     * Whether to require passing grade
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Completionpass?: number;
    /**
     * Course id
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Course?: number;
    /**
     * Course module id
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Coursemodule?: number;
    /**
     * Number of decimal points to use when displaying
     *                                                                     grades.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Decimalpoints?: number;
    /**
     * Delay that must be left between the first and second attempt,
     *                                                             in seconds.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Delay1?: number;
    /**
     * Delay that must be left between the second and subsequent
     *                                                             attempt, in seconds.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Delay2?: number;
    /**
     * The amount of time (in seconds) after the time limit
     *                                                                 runs out during which attempts can still be submitted,
     *                                                                 if overduehandling is set to allow it.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Graceperiod?: number;
    /**
     * The total that the quiz overall grade is scaled to be
     *                                                             out of.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Grade?: number;
    /**
     * One of the values QUIZ_GRADEHIGHEST, QUIZ_GRADEAVERAGE,
     *                                                                     QUIZ_ATTEMPTFIRST or QUIZ_ATTEMPTLAST.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Grademethod?: number;
    /**
     * Group id
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Groupingid?: number;
    /**
     * Group mode
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Groupmode?: number;
    /**
     * Whether the quiz has any non-blank feedback text
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Hasfeedback?: number;
    /**
     * Whether the quiz has questions
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Hasquestions?: number;
    /**
     * Activity instance id
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Id?: number;
    /**
     * Activity introduction
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Intro?: string;
    /**
     * 
     * @type {Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Introfiles?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>;
    /**
     * intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Introformat?: number;
    /**
     * Forced activity language
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Lang?: string;
    /**
     * Activity name
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Name?: string;
    /**
     * Any constraints on how the user is allowed to navigate
     *                                                                 around the quiz. Currently recognised values are
     *                                                                 'free' and 'seq'.
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Navmethod?: string;
    /**
     * The method used to handle overdue attempts.
     *                                                                     'autosubmit', 'graceperiod' or 'autoabandon'.
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Overduehandling?: string;
    /**
     * A password that the student must enter before starting or
     *                                                                 continuing a quiz attempt.
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Password?: string;
    /**
     * The behaviour to ask questions to use.
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Preferredbehaviour?: string;
    /**
     * Number of decimal points to use when
     *                                                                             displaying question grades.
     *                                                                             (-1 means use decimalpoints.)
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Questiondecimalpoints?: number;
    /**
     * How often to insert a page break when editing
     *                                                                         the quiz, or when shuffling the question order.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Questionsperpage?: number;
    /**
     * Whether users are allowed to review their quiz
     *                                                                     attempts at various times. This is a bit field, decoded by the
     *                                                                     \mod_quiz\question\display_options class. It is formed by ORing
     *                                                                     together the constants defined there.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Reviewattempt?: number;
    /**
     * Whether users are allowed to review their quiz
     *                                                        attempts at various times.A bit field, like reviewattempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Reviewcorrectness?: number;
    /**
     * Whether users are allowed to review their
     *                                                                             quiz attempts at various times. A bit field, like
     *                                                                             reviewattempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Reviewgeneralfeedback?: number;
    /**
     * Whether users are allowed to review their quiz attempts
     *                                                                 at various times. A bit field, like reviewattempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Reviewmarks?: number;
    /**
     * Whether users are allowed to review their quiz
     *                                                   attempts at various times. A bit field, like reviewattempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Reviewmaxmarks?: number;
    /**
     * Whether users are allowed to review their quiz
     *                                                                             attempts at various times. A bit field, like
     *                                                                             reviewattempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Reviewoverallfeedback?: number;
    /**
     * Whether users are allowed to review their quiz
     *                                                                         attempts at various times. A bit field, like
     *                                                                         reviewattempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Reviewrightanswer?: number;
    /**
     * Whether users are allowed to review their
     *                                                                             quiz attempts at various times. A bit field, like
     *                                                                             reviewattempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Reviewspecificfeedback?: number;
    /**
     * Course section id
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Section?: number;
    /**
     * Whether blocks should be shown on the attempt.php and
     *                                                                 review.php pages.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Showblocks?: number;
    /**
     * Option to show the user's picture during the
     *                                                                     attempt and on the review page.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Showuserpicture?: number;
    /**
     * Whether the parts of the question should be shuffled,
     *                                                                     in those question types that support it.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Shuffleanswers?: number;
    /**
     * Used to restrict the IP addresses from which this quiz can
     *                                                             be attempted. The format is as requried by the address_in_subnet
     *                                                             function.
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Subnet?: string;
    /**
     * The total of all the question instance maxmarks.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Sumgrades?: number;
    /**
     * The time when this quiz closes. (0 = no restriction.)
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Timeclose?: number;
    /**
     * The time when the quiz was added to the course.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Timecreated?: number;
    /**
     * The time limit for quiz attempts, in seconds.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Timelimit?: number;
    /**
     * Last modified time.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Timemodified?: number;
    /**
     * The time when this quiz opens. (0 = no restriction.)
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Timeopen?: number;
    /**
     * Visible
     * @type {boolean}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    Visible?: boolean;
}

/**
 * Check if a given object implements the ModQuizGetQuizzesByCourses200ResponseQuizzesInner interface.
 */
export function instanceOfModQuizGetQuizzesByCourses200ResponseQuizzesInner(value: object): boolean {
    return true;
}

export function ModQuizGetQuizzesByCourses200ResponseQuizzesInnerFromJSON(json: any): ModQuizGetQuizzesByCourses200ResponseQuizzesInner {
    return ModQuizGetQuizzesByCourses200ResponseQuizzesInnerFromJSONTyped(json, false);
}

export function ModQuizGetQuizzesByCourses200ResponseQuizzesInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModQuizGetQuizzesByCourses200ResponseQuizzesInner {
    if (json == null) {
        return json;
    }
    return {
        
        'Allowofflineattempts': json['allowofflineattempts'] == null ? undefined : json['allowofflineattempts'],
        'Attemptonlast': json['attemptonlast'] == null ? undefined : json['attemptonlast'],
        'Attempts': json['attempts'] == null ? undefined : json['attempts'],
        'Autosaveperiod': json['autosaveperiod'] == null ? undefined : json['autosaveperiod'],
        'Browsersecurity': json['browsersecurity'] == null ? undefined : json['browsersecurity'],
        'Canredoquestions': json['canredoquestions'] == null ? undefined : json['canredoquestions'],
        'Completionattemptsexhausted': json['completionattemptsexhausted'] == null ? undefined : json['completionattemptsexhausted'],
        'Completionpass': json['completionpass'] == null ? undefined : json['completionpass'],
        'Course': json['course'] == null ? undefined : json['course'],
        'Coursemodule': json['coursemodule'] == null ? undefined : json['coursemodule'],
        'Decimalpoints': json['decimalpoints'] == null ? undefined : json['decimalpoints'],
        'Delay1': json['delay1'] == null ? undefined : json['delay1'],
        'Delay2': json['delay2'] == null ? undefined : json['delay2'],
        'Graceperiod': json['graceperiod'] == null ? undefined : json['graceperiod'],
        'Grade': json['grade'] == null ? undefined : json['grade'],
        'Grademethod': json['grademethod'] == null ? undefined : json['grademethod'],
        'Groupingid': json['groupingid'] == null ? undefined : json['groupingid'],
        'Groupmode': json['groupmode'] == null ? undefined : json['groupmode'],
        'Hasfeedback': json['hasfeedback'] == null ? undefined : json['hasfeedback'],
        'Hasquestions': json['hasquestions'] == null ? undefined : json['hasquestions'],
        'Id': json['id'] == null ? undefined : json['id'],
        'Intro': json['intro'] == null ? undefined : json['intro'],
        'Introfiles': json['introfiles'] == null ? undefined : ((json['introfiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON)),
        'Introformat': json['introformat'] == null ? undefined : json['introformat'],
        'Lang': json['lang'] == null ? undefined : json['lang'],
        'Name': json['name'] == null ? undefined : json['name'],
        'Navmethod': json['navmethod'] == null ? undefined : json['navmethod'],
        'Overduehandling': json['overduehandling'] == null ? undefined : json['overduehandling'],
        'Password': json['password'] == null ? undefined : json['password'],
        'Preferredbehaviour': json['preferredbehaviour'] == null ? undefined : json['preferredbehaviour'],
        'Questiondecimalpoints': json['questiondecimalpoints'] == null ? undefined : json['questiondecimalpoints'],
        'Questionsperpage': json['questionsperpage'] == null ? undefined : json['questionsperpage'],
        'Reviewattempt': json['reviewattempt'] == null ? undefined : json['reviewattempt'],
        'Reviewcorrectness': json['reviewcorrectness'] == null ? undefined : json['reviewcorrectness'],
        'Reviewgeneralfeedback': json['reviewgeneralfeedback'] == null ? undefined : json['reviewgeneralfeedback'],
        'Reviewmarks': json['reviewmarks'] == null ? undefined : json['reviewmarks'],
        'Reviewmaxmarks': json['reviewmaxmarks'] == null ? undefined : json['reviewmaxmarks'],
        'Reviewoverallfeedback': json['reviewoverallfeedback'] == null ? undefined : json['reviewoverallfeedback'],
        'Reviewrightanswer': json['reviewrightanswer'] == null ? undefined : json['reviewrightanswer'],
        'Reviewspecificfeedback': json['reviewspecificfeedback'] == null ? undefined : json['reviewspecificfeedback'],
        'Section': json['section'] == null ? undefined : json['section'],
        'Showblocks': json['showblocks'] == null ? undefined : json['showblocks'],
        'Showuserpicture': json['showuserpicture'] == null ? undefined : json['showuserpicture'],
        'Shuffleanswers': json['shuffleanswers'] == null ? undefined : json['shuffleanswers'],
        'Subnet': json['subnet'] == null ? undefined : json['subnet'],
        'Sumgrades': json['sumgrades'] == null ? undefined : json['sumgrades'],
        'Timeclose': json['timeclose'] == null ? undefined : json['timeclose'],
        'Timecreated': json['timecreated'] == null ? undefined : json['timecreated'],
        'Timelimit': json['timelimit'] == null ? undefined : json['timelimit'],
        'Timemodified': json['timemodified'] == null ? undefined : json['timemodified'],
        'Timeopen': json['timeopen'] == null ? undefined : json['timeopen'],
        'Visible': json['visible'] == null ? undefined : json['visible'],
    };
}

export function ModQuizGetQuizzesByCourses200ResponseQuizzesInnerToJSON(value?: ModQuizGetQuizzesByCourses200ResponseQuizzesInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'allowofflineattempts': value['Allowofflineattempts'],
        'attemptonlast': value['Attemptonlast'],
        'attempts': value['Attempts'],
        'autosaveperiod': value['Autosaveperiod'],
        'browsersecurity': value['Browsersecurity'],
        'canredoquestions': value['Canredoquestions'],
        'completionattemptsexhausted': value['Completionattemptsexhausted'],
        'completionpass': value['Completionpass'],
        'course': value['Course'],
        'coursemodule': value['Coursemodule'],
        'decimalpoints': value['Decimalpoints'],
        'delay1': value['Delay1'],
        'delay2': value['Delay2'],
        'graceperiod': value['Graceperiod'],
        'grade': value['Grade'],
        'grademethod': value['Grademethod'],
        'groupingid': value['Groupingid'],
        'groupmode': value['Groupmode'],
        'hasfeedback': value['Hasfeedback'],
        'hasquestions': value['Hasquestions'],
        'id': value['Id'],
        'intro': value['Intro'],
        'introfiles': value['Introfiles'] == null ? undefined : ((value['Introfiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON)),
        'introformat': value['Introformat'],
        'lang': value['Lang'],
        'name': value['Name'],
        'navmethod': value['Navmethod'],
        'overduehandling': value['Overduehandling'],
        'password': value['Password'],
        'preferredbehaviour': value['Preferredbehaviour'],
        'questiondecimalpoints': value['Questiondecimalpoints'],
        'questionsperpage': value['Questionsperpage'],
        'reviewattempt': value['Reviewattempt'],
        'reviewcorrectness': value['Reviewcorrectness'],
        'reviewgeneralfeedback': value['Reviewgeneralfeedback'],
        'reviewmarks': value['Reviewmarks'],
        'reviewmaxmarks': value['Reviewmaxmarks'],
        'reviewoverallfeedback': value['Reviewoverallfeedback'],
        'reviewrightanswer': value['Reviewrightanswer'],
        'reviewspecificfeedback': value['Reviewspecificfeedback'],
        'section': value['Section'],
        'showblocks': value['Showblocks'],
        'showuserpicture': value['Showuserpicture'],
        'shuffleanswers': value['Shuffleanswers'],
        'subnet': value['Subnet'],
        'sumgrades': value['Sumgrades'],
        'timeclose': value['Timeclose'],
        'timecreated': value['Timecreated'],
        'timelimit': value['Timelimit'],
        'timemodified': value['Timemodified'],
        'timeopen': value['Timeopen'],
        'visible': value['Visible'],
    };
}

