/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreUserCreateUsersRequestUsersInnerCustomfieldsInner } from './CoreUserCreateUsersRequestUsersInnerCustomfieldsInner';
import {
    CoreUserCreateUsersRequestUsersInnerCustomfieldsInnerFromJSON,
    CoreUserCreateUsersRequestUsersInnerCustomfieldsInnerFromJSONTyped,
    CoreUserCreateUsersRequestUsersInnerCustomfieldsInnerToJSON,
} from './CoreUserCreateUsersRequestUsersInnerCustomfieldsInner';
import type { CoreUserUpdateUsersRequestUsersInnerPreferencesInner } from './CoreUserUpdateUsersRequestUsersInnerPreferencesInner';
import {
    CoreUserUpdateUsersRequestUsersInnerPreferencesInnerFromJSON,
    CoreUserUpdateUsersRequestUsersInnerPreferencesInnerFromJSONTyped,
    CoreUserUpdateUsersRequestUsersInnerPreferencesInnerToJSON,
} from './CoreUserUpdateUsersRequestUsersInnerPreferencesInner';

/**
 * 
 * @export
 * @interface CoreUserUpdateUsersRequestUsersInner
 */
export interface CoreUserUpdateUsersRequestUsersInner {
    /**
     * Postal address
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Address?: string;
    /**
     * The alternate name of the user
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Alternatename?: string;
    /**
     * Auth plugins include manual, ldap, etc
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Auth?: string;
    /**
     * Calendar type such as "gregorian", must exist on server
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Calendartype?: string;
    /**
     * Home city of the user
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    City?: string;
    /**
     * Home country code of the user, such as AU or CZ
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Country?: string;
    /**
     * 
     * @type {Array<CoreUserCreateUsersRequestUsersInnerCustomfieldsInner>}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Customfields?: Array<CoreUserCreateUsersRequestUsersInnerCustomfieldsInner>;
    /**
     * Department
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Department?: string;
    /**
     * User profile description, no HTML
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Description?: string;
    /**
     * A valid and unique email address
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Email?: string;
    /**
     * The first name(s) of the user
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Firstname?: string;
    /**
     * The first name(s) phonetically of the user
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Firstnamephonetic?: string;
    /**
     * ID of the user
     * @type {number}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Id?: number;
    /**
     * An arbitrary ID code number perhaps from the institution
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Idnumber?: string;
    /**
     * Institution
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Institution?: string;
    /**
     * User interests (separated by commas)
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Interests?: string;
    /**
     * Language code such as "en", must exist on server
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Lang?: string;
    /**
     * The family name of the user
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Lastname?: string;
    /**
     * The family name phonetically of the user
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Lastnamephonetic?: string;
    /**
     * Email visibility
     * @type {number}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Maildisplay?: number;
    /**
     * Mail format code is 0 for plain text, 1 for HTML etc
     * @type {number}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Mailformat?: number;
    /**
     * The middle name of the user
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Middlename?: string;
    /**
     * Plain text password consisting of any characters
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Password?: string;
    /**
     * Phone
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Phone1?: string;
    /**
     * Mobile phone
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Phone2?: string;
    /**
     * 
     * @type {Array<CoreUserUpdateUsersRequestUsersInnerPreferencesInner>}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Preferences?: Array<CoreUserUpdateUsersRequestUsersInnerPreferencesInner>;
    /**
     * Suspend user account, either false to enable user login or true to disable it
     * @type {boolean}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Suspended?: boolean;
    /**
     * Theme name such as "standard", must exist on server
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Theme?: string;
    /**
     * Timezone code such as Australia/Perth, or 99 for default
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Timezone?: string;
    /**
     * Username policy is defined in Moodle security config.
     * @type {string}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Username?: string;
    /**
     * The itemid where the new user picture has been uploaded to, 0 to delete
     * @type {number}
     * @memberof CoreUserUpdateUsersRequestUsersInner
     */
    Userpicture?: number;
}

/**
 * Check if a given object implements the CoreUserUpdateUsersRequestUsersInner interface.
 */
export function instanceOfCoreUserUpdateUsersRequestUsersInner(value: object): boolean {
    return true;
}

export function CoreUserUpdateUsersRequestUsersInnerFromJSON(json: any): CoreUserUpdateUsersRequestUsersInner {
    return CoreUserUpdateUsersRequestUsersInnerFromJSONTyped(json, false);
}

export function CoreUserUpdateUsersRequestUsersInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreUserUpdateUsersRequestUsersInner {
    if (json == null) {
        return json;
    }
    return {
        
        'Address': json['address'] == null ? undefined : json['address'],
        'Alternatename': json['alternatename'] == null ? undefined : json['alternatename'],
        'Auth': json['auth'] == null ? undefined : json['auth'],
        'Calendartype': json['calendartype'] == null ? undefined : json['calendartype'],
        'City': json['city'] == null ? undefined : json['city'],
        'Country': json['country'] == null ? undefined : json['country'],
        'Customfields': json['customfields'] == null ? undefined : ((json['customfields'] as Array<any>).map(CoreUserCreateUsersRequestUsersInnerCustomfieldsInnerFromJSON)),
        'Department': json['department'] == null ? undefined : json['department'],
        'Description': json['description'] == null ? undefined : json['description'],
        'Email': json['email'] == null ? undefined : json['email'],
        'Firstname': json['firstname'] == null ? undefined : json['firstname'],
        'Firstnamephonetic': json['firstnamephonetic'] == null ? undefined : json['firstnamephonetic'],
        'Id': json['id'] == null ? undefined : json['id'],
        'Idnumber': json['idnumber'] == null ? undefined : json['idnumber'],
        'Institution': json['institution'] == null ? undefined : json['institution'],
        'Interests': json['interests'] == null ? undefined : json['interests'],
        'Lang': json['lang'] == null ? undefined : json['lang'],
        'Lastname': json['lastname'] == null ? undefined : json['lastname'],
        'Lastnamephonetic': json['lastnamephonetic'] == null ? undefined : json['lastnamephonetic'],
        'Maildisplay': json['maildisplay'] == null ? undefined : json['maildisplay'],
        'Mailformat': json['mailformat'] == null ? undefined : json['mailformat'],
        'Middlename': json['middlename'] == null ? undefined : json['middlename'],
        'Password': json['password'] == null ? undefined : json['password'],
        'Phone1': json['phone1'] == null ? undefined : json['phone1'],
        'Phone2': json['phone2'] == null ? undefined : json['phone2'],
        'Preferences': json['preferences'] == null ? undefined : ((json['preferences'] as Array<any>).map(CoreUserUpdateUsersRequestUsersInnerPreferencesInnerFromJSON)),
        'Suspended': json['suspended'] == null ? undefined : json['suspended'],
        'Theme': json['theme'] == null ? undefined : json['theme'],
        'Timezone': json['timezone'] == null ? undefined : json['timezone'],
        'Username': json['username'] == null ? undefined : json['username'],
        'Userpicture': json['userpicture'] == null ? undefined : json['userpicture'],
    };
}

export function CoreUserUpdateUsersRequestUsersInnerToJSON(value?: CoreUserUpdateUsersRequestUsersInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'address': value['Address'],
        'alternatename': value['Alternatename'],
        'auth': value['Auth'],
        'calendartype': value['Calendartype'],
        'city': value['City'],
        'country': value['Country'],
        'customfields': value['Customfields'] == null ? undefined : ((value['Customfields'] as Array<any>).map(CoreUserCreateUsersRequestUsersInnerCustomfieldsInnerToJSON)),
        'department': value['Department'],
        'description': value['Description'],
        'email': value['Email'],
        'firstname': value['Firstname'],
        'firstnamephonetic': value['Firstnamephonetic'],
        'id': value['Id'],
        'idnumber': value['Idnumber'],
        'institution': value['Institution'],
        'interests': value['Interests'],
        'lang': value['Lang'],
        'lastname': value['Lastname'],
        'lastnamephonetic': value['Lastnamephonetic'],
        'maildisplay': value['Maildisplay'],
        'mailformat': value['Mailformat'],
        'middlename': value['Middlename'],
        'password': value['Password'],
        'phone1': value['Phone1'],
        'phone2': value['Phone2'],
        'preferences': value['Preferences'] == null ? undefined : ((value['Preferences'] as Array<any>).map(CoreUserUpdateUsersRequestUsersInnerPreferencesInnerToJSON)),
        'suspended': value['Suspended'],
        'theme': value['Theme'],
        'timezone': value['Timezone'],
        'username': value['Username'],
        'userpicture': value['Userpicture'],
    };
}

