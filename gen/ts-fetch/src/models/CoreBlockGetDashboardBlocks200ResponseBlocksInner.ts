/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInner } from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInner';
import {
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInnerFromJSON,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInnerFromJSONTyped,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInnerToJSON,
} from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInner';
import type { CoreBlockGetDashboardBlocks200ResponseBlocksInnerContents } from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContents';
import {
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFromJSON,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFromJSONTyped,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsToJSON,
} from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContents';

/**
 * Block information.
 * @export
 * @interface CoreBlockGetDashboardBlocks200ResponseBlocksInner
 */
export interface CoreBlockGetDashboardBlocks200ResponseBlocksInner {
    /**
     * Whether the block is collapsible.
     * @type {boolean}
     * @memberof CoreBlockGetDashboardBlocks200ResponseBlocksInner
     */
    Collapsible?: boolean;
    /**
     * 
     * @type {Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInner>}
     * @memberof CoreBlockGetDashboardBlocks200ResponseBlocksInner
     */
    Configs?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInner>;
    /**
     * 
     * @type {CoreBlockGetDashboardBlocks200ResponseBlocksInnerContents}
     * @memberof CoreBlockGetDashboardBlocks200ResponseBlocksInner
     */
    Contents?: CoreBlockGetDashboardBlocks200ResponseBlocksInnerContents;
    /**
     * Whether the block is dockable.
     * @type {boolean}
     * @memberof CoreBlockGetDashboardBlocks200ResponseBlocksInner
     */
    Dockable?: boolean;
    /**
     * Block instance id.
     * @type {number}
     * @memberof CoreBlockGetDashboardBlocks200ResponseBlocksInner
     */
    Instanceid?: number;
    /**
     * Block name.
     * @type {string}
     * @memberof CoreBlockGetDashboardBlocks200ResponseBlocksInner
     */
    Name?: string;
    /**
     * Position id.
     * @type {number}
     * @memberof CoreBlockGetDashboardBlocks200ResponseBlocksInner
     */
    Positionid?: number;
    /**
     * Block region.
     * @type {string}
     * @memberof CoreBlockGetDashboardBlocks200ResponseBlocksInner
     */
    Region?: string;
    /**
     * Whether the block is visible.
     * @type {boolean}
     * @memberof CoreBlockGetDashboardBlocks200ResponseBlocksInner
     */
    Visible?: boolean;
    /**
     * Used to order blocks within a region.
     * @type {number}
     * @memberof CoreBlockGetDashboardBlocks200ResponseBlocksInner
     */
    Weight?: number;
}

/**
 * Check if a given object implements the CoreBlockGetDashboardBlocks200ResponseBlocksInner interface.
 */
export function instanceOfCoreBlockGetDashboardBlocks200ResponseBlocksInner(value: object): boolean {
    return true;
}

export function CoreBlockGetDashboardBlocks200ResponseBlocksInnerFromJSON(json: any): CoreBlockGetDashboardBlocks200ResponseBlocksInner {
    return CoreBlockGetDashboardBlocks200ResponseBlocksInnerFromJSONTyped(json, false);
}

export function CoreBlockGetDashboardBlocks200ResponseBlocksInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreBlockGetDashboardBlocks200ResponseBlocksInner {
    if (json == null) {
        return json;
    }
    return {
        
        'Collapsible': json['collapsible'] == null ? undefined : json['collapsible'],
        'Configs': json['configs'] == null ? undefined : ((json['configs'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInnerFromJSON)),
        'Contents': json['contents'] == null ? undefined : CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFromJSON(json['contents']),
        'Dockable': json['dockable'] == null ? undefined : json['dockable'],
        'Instanceid': json['instanceid'] == null ? undefined : json['instanceid'],
        'Name': json['name'] == null ? undefined : json['name'],
        'Positionid': json['positionid'] == null ? undefined : json['positionid'],
        'Region': json['region'] == null ? undefined : json['region'],
        'Visible': json['visible'] == null ? undefined : json['visible'],
        'Weight': json['weight'] == null ? undefined : json['weight'],
    };
}

export function CoreBlockGetDashboardBlocks200ResponseBlocksInnerToJSON(value?: CoreBlockGetDashboardBlocks200ResponseBlocksInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'collapsible': value['Collapsible'],
        'configs': value['Configs'] == null ? undefined : ((value['Configs'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInnerToJSON)),
        'contents': CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsToJSON(value['Contents']),
        'dockable': value['Dockable'],
        'instanceid': value['Instanceid'],
        'name': value['Name'],
        'positionid': value['Positionid'],
        'region': value['Region'],
        'visible': value['Visible'],
        'weight': value['Weight'],
    };
}

