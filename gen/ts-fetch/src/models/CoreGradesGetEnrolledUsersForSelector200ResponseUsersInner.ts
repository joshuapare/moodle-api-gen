/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerCustomfieldsInner } from './CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerCustomfieldsInner';
import {
    CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerCustomfieldsInnerFromJSON,
    CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerCustomfieldsInnerFromJSONTyped,
    CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerCustomfieldsInnerToJSON,
} from './CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerCustomfieldsInner';
import type { CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerPreferencesInner } from './CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerPreferencesInner';
import {
    CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerPreferencesInnerFromJSON,
    CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerPreferencesInnerFromJSONTyped,
    CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerPreferencesInnerToJSON,
} from './CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerPreferencesInner';

/**
 * 
 * @export
 * @interface CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
 */
export interface CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner {
    /**
     * Postal address
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Address?: string;
    /**
     * Auth plugins include manual, ldap, etc
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Auth?: string;
    /**
     * Calendar type such as "gregorian", must exist on server
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Calendartype?: string;
    /**
     * Home city of the user
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    City?: string;
    /**
     * Active user: 1 if confirmed, 0 otherwise
     * @type {boolean}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Confirmed?: boolean;
    /**
     * Home country code of the user, such as AU or CZ
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Country?: string;
    /**
     * 
     * @type {Array<CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerCustomfieldsInner>}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Customfields?: Array<CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerCustomfieldsInner>;
    /**
     * department
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Department?: string;
    /**
     * User profile description
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Description?: string;
    /**
     * int format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Descriptionformat?: number;
    /**
     * An email address - allow email as root@localhost
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Email?: string;
    /**
     * first access to the site (0 if never)
     * @type {number}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Firstaccess?: number;
    /**
     * The first name(s) of the user
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Firstname?: string;
    /**
     * The fullname of the user
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Fullname?: string;
    /**
     * ID of the user
     * @type {number}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Id?: number;
    /**
     * An arbitrary ID code number perhaps from the institution
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Idnumber?: string;
    /**
     * institution
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Institution?: string;
    /**
     * user interests (separated by commas)
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Interests?: string;
    /**
     * Language code such as "en", must exist on server
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Lang?: string;
    /**
     * last access to the site (0 if never)
     * @type {number}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Lastaccess?: number;
    /**
     * The family name of the user
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Lastname?: string;
    /**
     * Mail format code is 0 for plain text, 1 for HTML etc
     * @type {number}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Mailformat?: number;
    /**
     * Phone 1
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Phone1?: string;
    /**
     * Phone 2
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Phone2?: string;
    /**
     * 
     * @type {Array<CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerPreferencesInner>}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Preferences?: Array<CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerPreferencesInner>;
    /**
     * User image profile URL - big version
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Profileimageurl?: string;
    /**
     * User image profile URL - small version
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Profileimageurlsmall?: string;
    /**
     * Suspend user account, either false to enable user login or true to disable it
     * @type {boolean}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Suspended?: boolean;
    /**
     * Theme name such as "standard", must exist on server
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Theme?: string;
    /**
     * Timezone code such as Australia/Perth, or 99 for default
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Timezone?: string;
    /**
     * The username
     * @type {string}
     * @memberof CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
     */
    Username?: string;
}

/**
 * Check if a given object implements the CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner interface.
 */
export function instanceOfCoreGradesGetEnrolledUsersForSelector200ResponseUsersInner(value: object): boolean {
    return true;
}

export function CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerFromJSON(json: any): CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner {
    return CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerFromJSONTyped(json, false);
}

export function CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner {
    if (json == null) {
        return json;
    }
    return {
        
        'Address': json['address'] == null ? undefined : json['address'],
        'Auth': json['auth'] == null ? undefined : json['auth'],
        'Calendartype': json['calendartype'] == null ? undefined : json['calendartype'],
        'City': json['city'] == null ? undefined : json['city'],
        'Confirmed': json['confirmed'] == null ? undefined : json['confirmed'],
        'Country': json['country'] == null ? undefined : json['country'],
        'Customfields': json['customfields'] == null ? undefined : ((json['customfields'] as Array<any>).map(CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerCustomfieldsInnerFromJSON)),
        'Department': json['department'] == null ? undefined : json['department'],
        'Description': json['description'] == null ? undefined : json['description'],
        'Descriptionformat': json['descriptionformat'] == null ? undefined : json['descriptionformat'],
        'Email': json['email'] == null ? undefined : json['email'],
        'Firstaccess': json['firstaccess'] == null ? undefined : json['firstaccess'],
        'Firstname': json['firstname'] == null ? undefined : json['firstname'],
        'Fullname': json['fullname'] == null ? undefined : json['fullname'],
        'Id': json['id'] == null ? undefined : json['id'],
        'Idnumber': json['idnumber'] == null ? undefined : json['idnumber'],
        'Institution': json['institution'] == null ? undefined : json['institution'],
        'Interests': json['interests'] == null ? undefined : json['interests'],
        'Lang': json['lang'] == null ? undefined : json['lang'],
        'Lastaccess': json['lastaccess'] == null ? undefined : json['lastaccess'],
        'Lastname': json['lastname'] == null ? undefined : json['lastname'],
        'Mailformat': json['mailformat'] == null ? undefined : json['mailformat'],
        'Phone1': json['phone1'] == null ? undefined : json['phone1'],
        'Phone2': json['phone2'] == null ? undefined : json['phone2'],
        'Preferences': json['preferences'] == null ? undefined : ((json['preferences'] as Array<any>).map(CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerPreferencesInnerFromJSON)),
        'Profileimageurl': json['profileimageurl'] == null ? undefined : json['profileimageurl'],
        'Profileimageurlsmall': json['profileimageurlsmall'] == null ? undefined : json['profileimageurlsmall'],
        'Suspended': json['suspended'] == null ? undefined : json['suspended'],
        'Theme': json['theme'] == null ? undefined : json['theme'],
        'Timezone': json['timezone'] == null ? undefined : json['timezone'],
        'Username': json['username'] == null ? undefined : json['username'],
    };
}

export function CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerToJSON(value?: CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'address': value['Address'],
        'auth': value['Auth'],
        'calendartype': value['Calendartype'],
        'city': value['City'],
        'confirmed': value['Confirmed'],
        'country': value['Country'],
        'customfields': value['Customfields'] == null ? undefined : ((value['Customfields'] as Array<any>).map(CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerCustomfieldsInnerToJSON)),
        'department': value['Department'],
        'description': value['Description'],
        'descriptionformat': value['Descriptionformat'],
        'email': value['Email'],
        'firstaccess': value['Firstaccess'],
        'firstname': value['Firstname'],
        'fullname': value['Fullname'],
        'id': value['Id'],
        'idnumber': value['Idnumber'],
        'institution': value['Institution'],
        'interests': value['Interests'],
        'lang': value['Lang'],
        'lastaccess': value['Lastaccess'],
        'lastname': value['Lastname'],
        'mailformat': value['Mailformat'],
        'phone1': value['Phone1'],
        'phone2': value['Phone2'],
        'preferences': value['Preferences'] == null ? undefined : ((value['Preferences'] as Array<any>).map(CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerPreferencesInnerToJSON)),
        'profileimageurl': value['Profileimageurl'],
        'profileimageurlsmall': value['Profileimageurlsmall'],
        'suspended': value['Suspended'],
        'theme': value['Theme'],
        'timezone': value['Timezone'],
        'username': value['Username'],
    };
}

