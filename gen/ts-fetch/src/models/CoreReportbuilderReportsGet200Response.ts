/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreReportbuilderColumnsDelete200Response } from './CoreReportbuilderColumnsDelete200Response';
import {
    CoreReportbuilderColumnsDelete200ResponseFromJSON,
    CoreReportbuilderColumnsDelete200ResponseFromJSONTyped,
    CoreReportbuilderColumnsDelete200ResponseToJSON,
} from './CoreReportbuilderColumnsDelete200Response';
import type { CoreReportbuilderConditionsDelete200Response } from './CoreReportbuilderConditionsDelete200Response';
import {
    CoreReportbuilderConditionsDelete200ResponseFromJSON,
    CoreReportbuilderConditionsDelete200ResponseFromJSONTyped,
    CoreReportbuilderConditionsDelete200ResponseToJSON,
} from './CoreReportbuilderConditionsDelete200Response';
import type { CoreReportbuilderFiltersDelete200Response } from './CoreReportbuilderFiltersDelete200Response';
import {
    CoreReportbuilderFiltersDelete200ResponseFromJSON,
    CoreReportbuilderFiltersDelete200ResponseFromJSONTyped,
    CoreReportbuilderFiltersDelete200ResponseToJSON,
} from './CoreReportbuilderFiltersDelete200Response';
import type { CoreReportbuilderReportsGet200ResponseAttributesInner } from './CoreReportbuilderReportsGet200ResponseAttributesInner';
import {
    CoreReportbuilderReportsGet200ResponseAttributesInnerFromJSON,
    CoreReportbuilderReportsGet200ResponseAttributesInnerFromJSONTyped,
    CoreReportbuilderReportsGet200ResponseAttributesInnerToJSON,
} from './CoreReportbuilderReportsGet200ResponseAttributesInner';
import type { CoreReportbuilderReportsGet200ResponseCardview } from './CoreReportbuilderReportsGet200ResponseCardview';
import {
    CoreReportbuilderReportsGet200ResponseCardviewFromJSON,
    CoreReportbuilderReportsGet200ResponseCardviewFromJSONTyped,
    CoreReportbuilderReportsGet200ResponseCardviewToJSON,
} from './CoreReportbuilderReportsGet200ResponseCardview';
import type { CoreReportbuilderReportsGet200ResponseSidebarmenucards } from './CoreReportbuilderReportsGet200ResponseSidebarmenucards';
import {
    CoreReportbuilderReportsGet200ResponseSidebarmenucardsFromJSON,
    CoreReportbuilderReportsGet200ResponseSidebarmenucardsFromJSONTyped,
    CoreReportbuilderReportsGet200ResponseSidebarmenucardsToJSON,
} from './CoreReportbuilderReportsGet200ResponseSidebarmenucards';

/**
 * 
 * @export
 * @interface CoreReportbuilderReportsGet200Response
 */
export interface CoreReportbuilderReportsGet200Response {
    /**
     * area
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Area: string;
    /**
     * 
     * @type {Array<CoreReportbuilderReportsGet200ResponseAttributesInner>}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Attributes: Array<CoreReportbuilderReportsGet200ResponseAttributesInner>;
    /**
     * 
     * @type {CoreReportbuilderReportsGet200ResponseCardview}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Cardview?: CoreReportbuilderReportsGet200ResponseCardview;
    /**
     * classes
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Classes: string;
    /**
     * component
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Component: string;
    /**
     * conditiondata
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Conditiondata: string;
    /**
     * 
     * @type {CoreReportbuilderConditionsDelete200Response}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Conditions?: CoreReportbuilderConditionsDelete200Response;
    /**
     * contextid
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Contextid: number;
    /**
     * editmode
     * @type {boolean}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Editmode: boolean;
    /**
     * 
     * @type {CoreReportbuilderFiltersDelete200Response}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Filters?: CoreReportbuilderFiltersDelete200Response;
    /**
     * filtersapplied
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Filtersapplied: number;
    /**
     * filtersform
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Filtersform: string;
    /**
     * filterspresent
     * @type {boolean}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Filterspresent: boolean;
    /**
     * id
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Id: number;
    /**
     * itemid
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Itemid: number;
    /**
     * javascript
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Javascript: string;
    /**
     * name
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Name: string;
    /**
     * settingsdata
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Settingsdata: string;
    /**
     * 
     * @type {CoreReportbuilderReportsGet200ResponseSidebarmenucards}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Sidebarmenucards?: CoreReportbuilderReportsGet200ResponseSidebarmenucards;
    /**
     * 
     * @type {CoreReportbuilderColumnsDelete200Response}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Sorting?: CoreReportbuilderColumnsDelete200Response;
    /**
     * source
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Source: string;
    /**
     * table
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Table: string;
    /**
     * timecreated
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Timecreated: number;
    /**
     * timemodified
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Timemodified: number;
    /**
     * type
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Type: number;
    /**
     * uniquerows
     * @type {boolean}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Uniquerows: boolean;
    /**
     * usercreated
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Usercreated: number;
    /**
     * usermodified
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    Usermodified: number;
}

/**
 * Check if a given object implements the CoreReportbuilderReportsGet200Response interface.
 */
export function instanceOfCoreReportbuilderReportsGet200Response(value: object): boolean {
    if (!('Area' in value)) return false;
    if (!('Attributes' in value)) return false;
    if (!('Classes' in value)) return false;
    if (!('Component' in value)) return false;
    if (!('Conditiondata' in value)) return false;
    if (!('Contextid' in value)) return false;
    if (!('Editmode' in value)) return false;
    if (!('Filtersapplied' in value)) return false;
    if (!('Filtersform' in value)) return false;
    if (!('Filterspresent' in value)) return false;
    if (!('Id' in value)) return false;
    if (!('Itemid' in value)) return false;
    if (!('Javascript' in value)) return false;
    if (!('Name' in value)) return false;
    if (!('Settingsdata' in value)) return false;
    if (!('Source' in value)) return false;
    if (!('Table' in value)) return false;
    if (!('Timecreated' in value)) return false;
    if (!('Timemodified' in value)) return false;
    if (!('Type' in value)) return false;
    if (!('Uniquerows' in value)) return false;
    if (!('Usercreated' in value)) return false;
    if (!('Usermodified' in value)) return false;
    return true;
}

export function CoreReportbuilderReportsGet200ResponseFromJSON(json: any): CoreReportbuilderReportsGet200Response {
    return CoreReportbuilderReportsGet200ResponseFromJSONTyped(json, false);
}

export function CoreReportbuilderReportsGet200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreReportbuilderReportsGet200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'Area': json['area'],
        'Attributes': ((json['attributes'] as Array<any>).map(CoreReportbuilderReportsGet200ResponseAttributesInnerFromJSON)),
        'Cardview': json['cardview'] == null ? undefined : CoreReportbuilderReportsGet200ResponseCardviewFromJSON(json['cardview']),
        'Classes': json['classes'],
        'Component': json['component'],
        'Conditiondata': json['conditiondata'],
        'Conditions': json['conditions'] == null ? undefined : CoreReportbuilderConditionsDelete200ResponseFromJSON(json['conditions']),
        'Contextid': json['contextid'],
        'Editmode': json['editmode'],
        'Filters': json['filters'] == null ? undefined : CoreReportbuilderFiltersDelete200ResponseFromJSON(json['filters']),
        'Filtersapplied': json['filtersapplied'],
        'Filtersform': json['filtersform'],
        'Filterspresent': json['filterspresent'],
        'Id': json['id'],
        'Itemid': json['itemid'],
        'Javascript': json['javascript'],
        'Name': json['name'],
        'Settingsdata': json['settingsdata'],
        'Sidebarmenucards': json['sidebarmenucards'] == null ? undefined : CoreReportbuilderReportsGet200ResponseSidebarmenucardsFromJSON(json['sidebarmenucards']),
        'Sorting': json['sorting'] == null ? undefined : CoreReportbuilderColumnsDelete200ResponseFromJSON(json['sorting']),
        'Source': json['source'],
        'Table': json['table'],
        'Timecreated': json['timecreated'],
        'Timemodified': json['timemodified'],
        'Type': json['type'],
        'Uniquerows': json['uniquerows'],
        'Usercreated': json['usercreated'],
        'Usermodified': json['usermodified'],
    };
}

export function CoreReportbuilderReportsGet200ResponseToJSON(value?: CoreReportbuilderReportsGet200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'area': value['Area'],
        'attributes': ((value['Attributes'] as Array<any>).map(CoreReportbuilderReportsGet200ResponseAttributesInnerToJSON)),
        'cardview': CoreReportbuilderReportsGet200ResponseCardviewToJSON(value['Cardview']),
        'classes': value['Classes'],
        'component': value['Component'],
        'conditiondata': value['Conditiondata'],
        'conditions': CoreReportbuilderConditionsDelete200ResponseToJSON(value['Conditions']),
        'contextid': value['Contextid'],
        'editmode': value['Editmode'],
        'filters': CoreReportbuilderFiltersDelete200ResponseToJSON(value['Filters']),
        'filtersapplied': value['Filtersapplied'],
        'filtersform': value['Filtersform'],
        'filterspresent': value['Filterspresent'],
        'id': value['Id'],
        'itemid': value['Itemid'],
        'javascript': value['Javascript'],
        'name': value['Name'],
        'settingsdata': value['Settingsdata'],
        'sidebarmenucards': CoreReportbuilderReportsGet200ResponseSidebarmenucardsToJSON(value['Sidebarmenucards']),
        'sorting': CoreReportbuilderColumnsDelete200ResponseToJSON(value['Sorting']),
        'source': value['Source'],
        'table': value['Table'],
        'timecreated': value['Timecreated'],
        'timemodified': value['Timemodified'],
        'type': value['Type'],
        'uniquerows': value['Uniquerows'],
        'usercreated': value['Usercreated'],
        'usermodified': value['Usermodified'],
    };
}

