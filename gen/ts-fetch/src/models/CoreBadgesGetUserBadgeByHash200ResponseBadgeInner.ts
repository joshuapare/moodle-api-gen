/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner } from './CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner';
import {
    CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInnerFromJSON,
    CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInnerFromJSONTyped,
    CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInnerToJSON,
} from './CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner';
import type { CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement } from './CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement';
import {
    CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsementFromJSON,
    CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsementFromJSONTyped,
    CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsementToJSON,
} from './CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement';
import type { CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInner } from './CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInner';
import {
    CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInnerFromJSON,
    CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInnerFromJSONTyped,
    CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInnerToJSON,
} from './CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInner';

/**
 * 
 * @export
 * @interface CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
 */
export interface CoreBadgesGetUserBadgeByHash200ResponseBadgeInner {
    /**
     * 
     * @type {Array<CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner>}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Alignment?: Array<CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner>;
    /**
     * Attachment
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Attachment?: number;
    /**
     * Badge URL
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Badgeurl?: string;
    /**
     * Course id
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Courseid?: number;
    /**
     * Date expire
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Dateexpire?: number;
    /**
     * Date issued
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Dateissued?: number;
    /**
     * Badge description
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Description?: string;
    /**
     * User email
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Email?: string;
    /**
     * 
     * @type {CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Endorsement?: CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement;
    /**
     * Expire date
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Expiredate?: number;
    /**
     * Expire period
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Expireperiod?: number;
    /**
     * Badge id
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Id?: number;
    /**
     * Email of the image author
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Imageauthoremail?: string;
    /**
     * Name of the image author
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Imageauthorname?: string;
    /**
     * URL of the image author
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Imageauthorurl?: string;
    /**
     * Caption of the image
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Imagecaption?: string;
    /**
     * Issued id
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Issuedid?: number;
    /**
     * Issuer contact
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Issuercontact?: string;
    /**
     * Issuer name
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Issuername?: string;
    /**
     * Issuer URL
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Issuerurl?: string;
    /**
     * Language
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Language?: string;
    /**
     * Message
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Message?: string;
    /**
     * Message subject
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Messagesubject?: string;
    /**
     * Badge name
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Name?: string;
    /**
     * Next cron
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Nextcron?: number;
    /**
     * Whether to notify when badge is awarded
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Notification?: number;
    /**
     * 
     * @type {Array<CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInner>}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Relatedbadges?: Array<CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInner>;
    /**
     * Status
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Status?: number;
    /**
     * Time created
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Timecreated?: number;
    /**
     * Time modified
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Timemodified?: number;
    /**
     * Type
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Type?: number;
    /**
     * Unique hash
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Uniquehash?: string;
    /**
     * User created
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Usercreated?: number;
    /**
     * User modified
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Usermodified?: number;
    /**
     * Version
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Version?: string;
    /**
     * Visible
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
     */
    Visible?: number;
}

/**
 * Check if a given object implements the CoreBadgesGetUserBadgeByHash200ResponseBadgeInner interface.
 */
export function instanceOfCoreBadgesGetUserBadgeByHash200ResponseBadgeInner(value: object): boolean {
    return true;
}

export function CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerFromJSON(json: any): CoreBadgesGetUserBadgeByHash200ResponseBadgeInner {
    return CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerFromJSONTyped(json, false);
}

export function CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreBadgesGetUserBadgeByHash200ResponseBadgeInner {
    if (json == null) {
        return json;
    }
    return {
        
        'Alignment': json['alignment'] == null ? undefined : ((json['alignment'] as Array<any>).map(CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInnerFromJSON)),
        'Attachment': json['attachment'] == null ? undefined : json['attachment'],
        'Badgeurl': json['badgeurl'] == null ? undefined : json['badgeurl'],
        'Courseid': json['courseid'] == null ? undefined : json['courseid'],
        'Dateexpire': json['dateexpire'] == null ? undefined : json['dateexpire'],
        'Dateissued': json['dateissued'] == null ? undefined : json['dateissued'],
        'Description': json['description'] == null ? undefined : json['description'],
        'Email': json['email'] == null ? undefined : json['email'],
        'Endorsement': json['endorsement'] == null ? undefined : CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsementFromJSON(json['endorsement']),
        'Expiredate': json['expiredate'] == null ? undefined : json['expiredate'],
        'Expireperiod': json['expireperiod'] == null ? undefined : json['expireperiod'],
        'Id': json['id'] == null ? undefined : json['id'],
        'Imageauthoremail': json['imageauthoremail'] == null ? undefined : json['imageauthoremail'],
        'Imageauthorname': json['imageauthorname'] == null ? undefined : json['imageauthorname'],
        'Imageauthorurl': json['imageauthorurl'] == null ? undefined : json['imageauthorurl'],
        'Imagecaption': json['imagecaption'] == null ? undefined : json['imagecaption'],
        'Issuedid': json['issuedid'] == null ? undefined : json['issuedid'],
        'Issuercontact': json['issuercontact'] == null ? undefined : json['issuercontact'],
        'Issuername': json['issuername'] == null ? undefined : json['issuername'],
        'Issuerurl': json['issuerurl'] == null ? undefined : json['issuerurl'],
        'Language': json['language'] == null ? undefined : json['language'],
        'Message': json['message'] == null ? undefined : json['message'],
        'Messagesubject': json['messagesubject'] == null ? undefined : json['messagesubject'],
        'Name': json['name'] == null ? undefined : json['name'],
        'Nextcron': json['nextcron'] == null ? undefined : json['nextcron'],
        'Notification': json['notification'] == null ? undefined : json['notification'],
        'Relatedbadges': json['relatedbadges'] == null ? undefined : ((json['relatedbadges'] as Array<any>).map(CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInnerFromJSON)),
        'Status': json['status'] == null ? undefined : json['status'],
        'Timecreated': json['timecreated'] == null ? undefined : json['timecreated'],
        'Timemodified': json['timemodified'] == null ? undefined : json['timemodified'],
        'Type': json['type'] == null ? undefined : json['type'],
        'Uniquehash': json['uniquehash'] == null ? undefined : json['uniquehash'],
        'Usercreated': json['usercreated'] == null ? undefined : json['usercreated'],
        'Usermodified': json['usermodified'] == null ? undefined : json['usermodified'],
        'Version': json['version'] == null ? undefined : json['version'],
        'Visible': json['visible'] == null ? undefined : json['visible'],
    };
}

export function CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerToJSON(value?: CoreBadgesGetUserBadgeByHash200ResponseBadgeInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'alignment': value['Alignment'] == null ? undefined : ((value['Alignment'] as Array<any>).map(CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInnerToJSON)),
        'attachment': value['Attachment'],
        'badgeurl': value['Badgeurl'],
        'courseid': value['Courseid'],
        'dateexpire': value['Dateexpire'],
        'dateissued': value['Dateissued'],
        'description': value['Description'],
        'email': value['Email'],
        'endorsement': CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsementToJSON(value['Endorsement']),
        'expiredate': value['Expiredate'],
        'expireperiod': value['Expireperiod'],
        'id': value['Id'],
        'imageauthoremail': value['Imageauthoremail'],
        'imageauthorname': value['Imageauthorname'],
        'imageauthorurl': value['Imageauthorurl'],
        'imagecaption': value['Imagecaption'],
        'issuedid': value['Issuedid'],
        'issuercontact': value['Issuercontact'],
        'issuername': value['Issuername'],
        'issuerurl': value['Issuerurl'],
        'language': value['Language'],
        'message': value['Message'],
        'messagesubject': value['Messagesubject'],
        'name': value['Name'],
        'nextcron': value['Nextcron'],
        'notification': value['Notification'],
        'relatedbadges': value['Relatedbadges'] == null ? undefined : ((value['Relatedbadges'] as Array<any>).map(CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInnerToJSON)),
        'status': value['Status'],
        'timecreated': value['Timecreated'],
        'timemodified': value['Timemodified'],
        'type': value['Type'],
        'uniquehash': value['Uniquehash'],
        'usercreated': value['Usercreated'],
        'usermodified': value['Usermodified'],
        'version': value['Version'],
        'visible': value['Visible'],
    };
}

