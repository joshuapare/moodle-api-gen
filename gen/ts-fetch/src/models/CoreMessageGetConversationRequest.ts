/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CoreMessageGetConversationRequest
 */
export interface CoreMessageGetConversationRequest {
    /**
     * The id of the conversation to fetch
     * @type {number}
     * @memberof CoreMessageGetConversationRequest
     */
    Conversationid: number;
    /**
     * Include contact requests in the members
     * @type {boolean}
     * @memberof CoreMessageGetConversationRequest
     */
    Includecontactrequests: boolean;
    /**
     * Include privacy info in the members
     * @type {boolean}
     * @memberof CoreMessageGetConversationRequest
     */
    Includeprivacyinfo: boolean;
    /**
     * Limit for number of members
     * @type {number}
     * @memberof CoreMessageGetConversationRequest
     */
    Memberlimit?: number;
    /**
     * Offset for member list
     * @type {number}
     * @memberof CoreMessageGetConversationRequest
     */
    Memberoffset?: number;
    /**
     * Limit for number of messages
     * @type {number}
     * @memberof CoreMessageGetConversationRequest
     */
    Messagelimit?: number;
    /**
     * Offset for messages list
     * @type {number}
     * @memberof CoreMessageGetConversationRequest
     */
    Messageoffset?: number;
    /**
     * Order messages by newest first
     * @type {boolean}
     * @memberof CoreMessageGetConversationRequest
     */
    Newestmessagesfirst?: boolean;
    /**
     * The id of the user who we are viewing conversations for
     * @type {number}
     * @memberof CoreMessageGetConversationRequest
     */
    Userid: number;
}

/**
 * Check if a given object implements the CoreMessageGetConversationRequest interface.
 */
export function instanceOfCoreMessageGetConversationRequest(value: object): boolean {
    if (!('Conversationid' in value)) return false;
    if (!('Includecontactrequests' in value)) return false;
    if (!('Includeprivacyinfo' in value)) return false;
    if (!('Userid' in value)) return false;
    return true;
}

export function CoreMessageGetConversationRequestFromJSON(json: any): CoreMessageGetConversationRequest {
    return CoreMessageGetConversationRequestFromJSONTyped(json, false);
}

export function CoreMessageGetConversationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreMessageGetConversationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'Conversationid': json['conversationid'],
        'Includecontactrequests': json['includecontactrequests'],
        'Includeprivacyinfo': json['includeprivacyinfo'],
        'Memberlimit': json['memberlimit'] == null ? undefined : json['memberlimit'],
        'Memberoffset': json['memberoffset'] == null ? undefined : json['memberoffset'],
        'Messagelimit': json['messagelimit'] == null ? undefined : json['messagelimit'],
        'Messageoffset': json['messageoffset'] == null ? undefined : json['messageoffset'],
        'Newestmessagesfirst': json['newestmessagesfirst'] == null ? undefined : json['newestmessagesfirst'],
        'Userid': json['userid'],
    };
}

export function CoreMessageGetConversationRequestToJSON(value?: CoreMessageGetConversationRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'conversationid': value['Conversationid'],
        'includecontactrequests': value['Includecontactrequests'],
        'includeprivacyinfo': value['Includeprivacyinfo'],
        'memberlimit': value['Memberlimit'],
        'memberoffset': value['Memberoffset'],
        'messagelimit': value['Messagelimit'],
        'messageoffset': value['Messageoffset'],
        'newestmessagesfirst': value['Newestmessagesfirst'],
        'userid': value['Userid'],
    };
}

