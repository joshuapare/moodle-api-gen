/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreSearchGetTopResultsRequestFilters } from './CoreSearchGetTopResultsRequestFilters';
import {
    CoreSearchGetTopResultsRequestFiltersFromJSON,
    CoreSearchGetTopResultsRequestFiltersFromJSONTyped,
    CoreSearchGetTopResultsRequestFiltersToJSON,
} from './CoreSearchGetTopResultsRequestFilters';

/**
 * 
 * @export
 * @interface CoreSearchGetTopResultsRequest
 */
export interface CoreSearchGetTopResultsRequest {
    /**
     * 
     * @type {CoreSearchGetTopResultsRequestFilters}
     * @memberof CoreSearchGetTopResultsRequest
     */
    Filters?: CoreSearchGetTopResultsRequestFilters;
    /**
     * the search query
     * @type {string}
     * @memberof CoreSearchGetTopResultsRequest
     */
    Query: string;
}

/**
 * Check if a given object implements the CoreSearchGetTopResultsRequest interface.
 */
export function instanceOfCoreSearchGetTopResultsRequest(value: object): boolean {
    if (!('Query' in value)) return false;
    return true;
}

export function CoreSearchGetTopResultsRequestFromJSON(json: any): CoreSearchGetTopResultsRequest {
    return CoreSearchGetTopResultsRequestFromJSONTyped(json, false);
}

export function CoreSearchGetTopResultsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreSearchGetTopResultsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'Filters': json['filters'] == null ? undefined : CoreSearchGetTopResultsRequestFiltersFromJSON(json['filters']),
        'Query': json['query'],
    };
}

export function CoreSearchGetTopResultsRequestToJSON(value?: CoreSearchGetTopResultsRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'filters': CoreSearchGetTopResultsRequestFiltersToJSON(value['Filters']),
        'query': value['Query'],
    };
}

