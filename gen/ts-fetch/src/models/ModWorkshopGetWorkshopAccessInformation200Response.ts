/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthEmailSignupUser200ResponseWarningsInner } from './AuthEmailSignupUser200ResponseWarningsInner';
import {
    AuthEmailSignupUser200ResponseWarningsInnerFromJSON,
    AuthEmailSignupUser200ResponseWarningsInnerFromJSONTyped,
    AuthEmailSignupUser200ResponseWarningsInnerToJSON,
} from './AuthEmailSignupUser200ResponseWarningsInner';

/**
 * 
 * @export
 * @interface ModWorkshopGetWorkshopAccessInformation200Response
 */
export interface ModWorkshopGetWorkshopAccessInformation200Response {
    /**
     * Is the user allowed to create/edit his assessments?
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Assessingallowed: boolean;
    /**
     * Are reviewers allowed to create/edit their assessments of the example submissions?.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Assessingexamplesallowed: boolean;
    /**
     * Whether the user has the capability mod/workshop:addinstance allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canaddinstance: boolean;
    /**
     * Whether the user has the capability mod/workshop:allocate allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canallocate: boolean;
    /**
     * Whether the user has the capability mod/workshop:deletesubmissions allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Candeletesubmissions: boolean;
    /**
     * Whether the user has the capability mod/workshop:editdimensions allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Caneditdimensions: boolean;
    /**
     * Whether the user has the capability mod/workshop:exportsubmissions allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canexportsubmissions: boolean;
    /**
     * Whether the user has the capability mod/workshop:ignoredeadlines allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canignoredeadlines: boolean;
    /**
     * Whether the user has the capability mod/workshop:manageexamples allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canmanageexamples: boolean;
    /**
     * Whether the user has the capability mod/workshop:overridegrades allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canoverridegrades: boolean;
    /**
     * Whether the user has the capability mod/workshop:peerassess allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canpeerassess: boolean;
    /**
     * Whether the user has the capability mod/workshop:publishsubmissions allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canpublishsubmissions: boolean;
    /**
     * Whether the user has the capability mod/workshop:submit allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Cansubmit: boolean;
    /**
     * Whether the user has the capability mod/workshop:switchphase allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canswitchphase: boolean;
    /**
     * Whether the user has the capability mod/workshop:view allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canview: boolean;
    /**
     * Whether the user has the capability mod/workshop:viewallassessments allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canviewallassessments: boolean;
    /**
     * Whether the user has the capability mod/workshop:viewallsubmissions allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canviewallsubmissions: boolean;
    /**
     * Whether the user has the capability mod/workshop:viewauthornames allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canviewauthornames: boolean;
    /**
     * Whether the user has the capability mod/workshop:viewauthorpublished allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canviewauthorpublished: boolean;
    /**
     * Whether the user has the capability mod/workshop:viewpublishedsubmissions allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canviewpublishedsubmissions: boolean;
    /**
     * Whether the user has the capability mod/workshop:viewreviewernames allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Canviewreviewernames: boolean;
    /**
     * Is the given user allowed to create their submission?
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Creatingsubmissionallowed: boolean;
    /**
     * Whether the given user has assessed all his required examples before assessment
     *                 (always true if there are not examples to assessor not configured to check before assessment).
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Examplesassessedbeforeassessment: boolean;
    /**
     * Whether the given user has assessed all his required examples before submission
     *                 (always true if there are not examples to assess or not configured to check before submission).
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Examplesassessedbeforesubmission: boolean;
    /**
     * Is the user allowed to modify his existing submission?
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Modifyingsubmissionallowed: boolean;
    /**
     * 
     * @type {Array<AuthEmailSignupUser200ResponseWarningsInner>}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    Warnings?: Array<AuthEmailSignupUser200ResponseWarningsInner>;
}

/**
 * Check if a given object implements the ModWorkshopGetWorkshopAccessInformation200Response interface.
 */
export function instanceOfModWorkshopGetWorkshopAccessInformation200Response(value: object): boolean {
    if (!('Assessingallowed' in value)) return false;
    if (!('Assessingexamplesallowed' in value)) return false;
    if (!('Canaddinstance' in value)) return false;
    if (!('Canallocate' in value)) return false;
    if (!('Candeletesubmissions' in value)) return false;
    if (!('Caneditdimensions' in value)) return false;
    if (!('Canexportsubmissions' in value)) return false;
    if (!('Canignoredeadlines' in value)) return false;
    if (!('Canmanageexamples' in value)) return false;
    if (!('Canoverridegrades' in value)) return false;
    if (!('Canpeerassess' in value)) return false;
    if (!('Canpublishsubmissions' in value)) return false;
    if (!('Cansubmit' in value)) return false;
    if (!('Canswitchphase' in value)) return false;
    if (!('Canview' in value)) return false;
    if (!('Canviewallassessments' in value)) return false;
    if (!('Canviewallsubmissions' in value)) return false;
    if (!('Canviewauthornames' in value)) return false;
    if (!('Canviewauthorpublished' in value)) return false;
    if (!('Canviewpublishedsubmissions' in value)) return false;
    if (!('Canviewreviewernames' in value)) return false;
    if (!('Creatingsubmissionallowed' in value)) return false;
    if (!('Examplesassessedbeforeassessment' in value)) return false;
    if (!('Examplesassessedbeforesubmission' in value)) return false;
    if (!('Modifyingsubmissionallowed' in value)) return false;
    return true;
}

export function ModWorkshopGetWorkshopAccessInformation200ResponseFromJSON(json: any): ModWorkshopGetWorkshopAccessInformation200Response {
    return ModWorkshopGetWorkshopAccessInformation200ResponseFromJSONTyped(json, false);
}

export function ModWorkshopGetWorkshopAccessInformation200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModWorkshopGetWorkshopAccessInformation200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'Assessingallowed': json['assessingallowed'],
        'Assessingexamplesallowed': json['assessingexamplesallowed'],
        'Canaddinstance': json['canaddinstance'],
        'Canallocate': json['canallocate'],
        'Candeletesubmissions': json['candeletesubmissions'],
        'Caneditdimensions': json['caneditdimensions'],
        'Canexportsubmissions': json['canexportsubmissions'],
        'Canignoredeadlines': json['canignoredeadlines'],
        'Canmanageexamples': json['canmanageexamples'],
        'Canoverridegrades': json['canoverridegrades'],
        'Canpeerassess': json['canpeerassess'],
        'Canpublishsubmissions': json['canpublishsubmissions'],
        'Cansubmit': json['cansubmit'],
        'Canswitchphase': json['canswitchphase'],
        'Canview': json['canview'],
        'Canviewallassessments': json['canviewallassessments'],
        'Canviewallsubmissions': json['canviewallsubmissions'],
        'Canviewauthornames': json['canviewauthornames'],
        'Canviewauthorpublished': json['canviewauthorpublished'],
        'Canviewpublishedsubmissions': json['canviewpublishedsubmissions'],
        'Canviewreviewernames': json['canviewreviewernames'],
        'Creatingsubmissionallowed': json['creatingsubmissionallowed'],
        'Examplesassessedbeforeassessment': json['examplesassessedbeforeassessment'],
        'Examplesassessedbeforesubmission': json['examplesassessedbeforesubmission'],
        'Modifyingsubmissionallowed': json['modifyingsubmissionallowed'],
        'Warnings': json['warnings'] == null ? undefined : ((json['warnings'] as Array<any>).map(AuthEmailSignupUser200ResponseWarningsInnerFromJSON)),
    };
}

export function ModWorkshopGetWorkshopAccessInformation200ResponseToJSON(value?: ModWorkshopGetWorkshopAccessInformation200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'assessingallowed': value['Assessingallowed'],
        'assessingexamplesallowed': value['Assessingexamplesallowed'],
        'canaddinstance': value['Canaddinstance'],
        'canallocate': value['Canallocate'],
        'candeletesubmissions': value['Candeletesubmissions'],
        'caneditdimensions': value['Caneditdimensions'],
        'canexportsubmissions': value['Canexportsubmissions'],
        'canignoredeadlines': value['Canignoredeadlines'],
        'canmanageexamples': value['Canmanageexamples'],
        'canoverridegrades': value['Canoverridegrades'],
        'canpeerassess': value['Canpeerassess'],
        'canpublishsubmissions': value['Canpublishsubmissions'],
        'cansubmit': value['Cansubmit'],
        'canswitchphase': value['Canswitchphase'],
        'canview': value['Canview'],
        'canviewallassessments': value['Canviewallassessments'],
        'canviewallsubmissions': value['Canviewallsubmissions'],
        'canviewauthornames': value['Canviewauthornames'],
        'canviewauthorpublished': value['Canviewauthorpublished'],
        'canviewpublishedsubmissions': value['Canviewpublishedsubmissions'],
        'canviewreviewernames': value['Canviewreviewernames'],
        'creatingsubmissionallowed': value['Creatingsubmissionallowed'],
        'examplesassessedbeforeassessment': value['Examplesassessedbeforeassessment'],
        'examplesassessedbeforesubmission': value['Examplesassessedbeforesubmission'],
        'modifyingsubmissionallowed': value['Modifyingsubmissionallowed'],
        'warnings': value['Warnings'] == null ? undefined : ((value['Warnings'] as Array<any>).map(AuthEmailSignupUser200ResponseWarningsInnerToJSON)),
    };
}

