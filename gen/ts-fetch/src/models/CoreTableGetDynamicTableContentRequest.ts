/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreTableGetDynamicTableContentRequestFiltersInner } from './CoreTableGetDynamicTableContentRequestFiltersInner';
import {
    CoreTableGetDynamicTableContentRequestFiltersInnerFromJSON,
    CoreTableGetDynamicTableContentRequestFiltersInnerFromJSONTyped,
    CoreTableGetDynamicTableContentRequestFiltersInnerToJSON,
} from './CoreTableGetDynamicTableContentRequestFiltersInner';
import type { CoreTableGetDynamicTableContentRequestSortdataInner } from './CoreTableGetDynamicTableContentRequestSortdataInner';
import {
    CoreTableGetDynamicTableContentRequestSortdataInnerFromJSON,
    CoreTableGetDynamicTableContentRequestSortdataInnerFromJSONTyped,
    CoreTableGetDynamicTableContentRequestSortdataInnerToJSON,
} from './CoreTableGetDynamicTableContentRequestSortdataInner';

/**
 * 
 * @export
 * @interface CoreTableGetDynamicTableContentRequest
 */
export interface CoreTableGetDynamicTableContentRequest {
    /**
     * Component
     * @type {string}
     * @memberof CoreTableGetDynamicTableContentRequest
     */
    Component: string;
    /**
     * 
     * @type {Array<CoreTableGetDynamicTableContentRequestFiltersInner>}
     * @memberof CoreTableGetDynamicTableContentRequest
     */
    Filters?: Array<CoreTableGetDynamicTableContentRequestFiltersInner>;
    /**
     * The first initial to sort filter on
     * @type {string}
     * @memberof CoreTableGetDynamicTableContentRequest
     */
    Firstinitial: string;
    /**
     * Handler
     * @type {string}
     * @memberof CoreTableGetDynamicTableContentRequest
     */
    Handler: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof CoreTableGetDynamicTableContentRequest
     */
    Hiddencolumns: Array<object>;
    /**
     * Type of join to join all filters together
     * @type {number}
     * @memberof CoreTableGetDynamicTableContentRequest
     */
    Jointype: number;
    /**
     * The last initial to sort filter on
     * @type {string}
     * @memberof CoreTableGetDynamicTableContentRequest
     */
    Lastinitial: string;
    /**
     * The page number
     * @type {number}
     * @memberof CoreTableGetDynamicTableContentRequest
     */
    Pagenumber: number;
    /**
     * The number of records per page
     * @type {number}
     * @memberof CoreTableGetDynamicTableContentRequest
     */
    Pagesize: number;
    /**
     * Whether the table preferences should be reset
     * @type {boolean}
     * @memberof CoreTableGetDynamicTableContentRequest
     */
    Resetpreferences: boolean;
    /**
     * 
     * @type {Array<CoreTableGetDynamicTableContentRequestSortdataInner>}
     * @memberof CoreTableGetDynamicTableContentRequest
     */
    Sortdata?: Array<CoreTableGetDynamicTableContentRequestSortdataInner>;
    /**
     * Unique ID for the container
     * @type {string}
     * @memberof CoreTableGetDynamicTableContentRequest
     */
    Uniqueid: string;
}

/**
 * Check if a given object implements the CoreTableGetDynamicTableContentRequest interface.
 */
export function instanceOfCoreTableGetDynamicTableContentRequest(value: object): boolean {
    if (!('Component' in value)) return false;
    if (!('Firstinitial' in value)) return false;
    if (!('Handler' in value)) return false;
    if (!('Hiddencolumns' in value)) return false;
    if (!('Jointype' in value)) return false;
    if (!('Lastinitial' in value)) return false;
    if (!('Pagenumber' in value)) return false;
    if (!('Pagesize' in value)) return false;
    if (!('Resetpreferences' in value)) return false;
    if (!('Uniqueid' in value)) return false;
    return true;
}

export function CoreTableGetDynamicTableContentRequestFromJSON(json: any): CoreTableGetDynamicTableContentRequest {
    return CoreTableGetDynamicTableContentRequestFromJSONTyped(json, false);
}

export function CoreTableGetDynamicTableContentRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreTableGetDynamicTableContentRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'Component': json['component'],
        'Filters': json['filters'] == null ? undefined : ((json['filters'] as Array<any>).map(CoreTableGetDynamicTableContentRequestFiltersInnerFromJSON)),
        'Firstinitial': json['firstinitial'],
        'Handler': json['handler'],
        'Hiddencolumns': json['hiddencolumns'],
        'Jointype': json['jointype'],
        'Lastinitial': json['lastinitial'],
        'Pagenumber': json['pagenumber'],
        'Pagesize': json['pagesize'],
        'Resetpreferences': json['resetpreferences'],
        'Sortdata': json['sortdata'] == null ? undefined : ((json['sortdata'] as Array<any>).map(CoreTableGetDynamicTableContentRequestSortdataInnerFromJSON)),
        'Uniqueid': json['uniqueid'],
    };
}

export function CoreTableGetDynamicTableContentRequestToJSON(value?: CoreTableGetDynamicTableContentRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'component': value['Component'],
        'filters': value['Filters'] == null ? undefined : ((value['Filters'] as Array<any>).map(CoreTableGetDynamicTableContentRequestFiltersInnerToJSON)),
        'firstinitial': value['Firstinitial'],
        'handler': value['Handler'],
        'hiddencolumns': value['Hiddencolumns'],
        'jointype': value['Jointype'],
        'lastinitial': value['Lastinitial'],
        'pagenumber': value['Pagenumber'],
        'pagesize': value['Pagesize'],
        'resetpreferences': value['Resetpreferences'],
        'sortdata': value['Sortdata'] == null ? undefined : ((value['Sortdata'] as Array<any>).map(CoreTableGetDynamicTableContentRequestSortdataInnerToJSON)),
        'uniqueid': value['Uniqueid'],
    };
}

