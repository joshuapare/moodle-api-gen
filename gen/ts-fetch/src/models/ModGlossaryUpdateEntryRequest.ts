/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ModGlossaryUpdateEntryRequestOptionsInner } from './ModGlossaryUpdateEntryRequestOptionsInner';
import {
    ModGlossaryUpdateEntryRequestOptionsInnerFromJSON,
    ModGlossaryUpdateEntryRequestOptionsInnerFromJSONTyped,
    ModGlossaryUpdateEntryRequestOptionsInnerToJSON,
} from './ModGlossaryUpdateEntryRequestOptionsInner';

/**
 * 
 * @export
 * @interface ModGlossaryUpdateEntryRequest
 */
export interface ModGlossaryUpdateEntryRequest {
    /**
     * Glossary concept
     * @type {string}
     * @memberof ModGlossaryUpdateEntryRequest
     */
    Concept: string;
    /**
     * Glossary concept definition
     * @type {string}
     * @memberof ModGlossaryUpdateEntryRequest
     */
    Definition: string;
    /**
     * definition format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModGlossaryUpdateEntryRequest
     */
    Definitionformat: number;
    /**
     * Glossary entry id to update
     * @type {number}
     * @memberof ModGlossaryUpdateEntryRequest
     */
    Entryid: number;
    /**
     * 
     * @type {Array<ModGlossaryUpdateEntryRequestOptionsInner>}
     * @memberof ModGlossaryUpdateEntryRequest
     */
    Options?: Array<ModGlossaryUpdateEntryRequestOptionsInner>;
}

/**
 * Check if a given object implements the ModGlossaryUpdateEntryRequest interface.
 */
export function instanceOfModGlossaryUpdateEntryRequest(value: object): boolean {
    if (!('Concept' in value)) return false;
    if (!('Definition' in value)) return false;
    if (!('Definitionformat' in value)) return false;
    if (!('Entryid' in value)) return false;
    return true;
}

export function ModGlossaryUpdateEntryRequestFromJSON(json: any): ModGlossaryUpdateEntryRequest {
    return ModGlossaryUpdateEntryRequestFromJSONTyped(json, false);
}

export function ModGlossaryUpdateEntryRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModGlossaryUpdateEntryRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'Concept': json['concept'],
        'Definition': json['definition'],
        'Definitionformat': json['definitionformat'],
        'Entryid': json['entryid'],
        'Options': json['options'] == null ? undefined : ((json['options'] as Array<any>).map(ModGlossaryUpdateEntryRequestOptionsInnerFromJSON)),
    };
}

export function ModGlossaryUpdateEntryRequestToJSON(value?: ModGlossaryUpdateEntryRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'concept': value['Concept'],
        'definition': value['Definition'],
        'definitionformat': value['Definitionformat'],
        'entryid': value['Entryid'],
        'options': value['Options'] == null ? undefined : ((value['Options'] as Array<any>).map(ModGlossaryUpdateEntryRequestOptionsInnerToJSON)),
    };
}

