/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ModDataAddEntryRequestDataInner } from './ModDataAddEntryRequestDataInner';
import {
    ModDataAddEntryRequestDataInnerFromJSON,
    ModDataAddEntryRequestDataInnerFromJSONTyped,
    ModDataAddEntryRequestDataInnerToJSON,
} from './ModDataAddEntryRequestDataInner';

/**
 * 
 * @export
 * @interface ModDataAddEntryRequest
 */
export interface ModDataAddEntryRequest {
    /**
     * 
     * @type {Array<ModDataAddEntryRequestDataInner>}
     * @memberof ModDataAddEntryRequest
     */
    Data: Array<ModDataAddEntryRequestDataInner>;
    /**
     * data instance id
     * @type {number}
     * @memberof ModDataAddEntryRequest
     */
    Databaseid: number;
    /**
     * Group id, 0 means that the function will determine the user group
     * @type {number}
     * @memberof ModDataAddEntryRequest
     */
    Groupid?: number;
}

/**
 * Check if a given object implements the ModDataAddEntryRequest interface.
 */
export function instanceOfModDataAddEntryRequest(value: object): boolean {
    if (!('Data' in value)) return false;
    if (!('Databaseid' in value)) return false;
    return true;
}

export function ModDataAddEntryRequestFromJSON(json: any): ModDataAddEntryRequest {
    return ModDataAddEntryRequestFromJSONTyped(json, false);
}

export function ModDataAddEntryRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModDataAddEntryRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'Data': ((json['data'] as Array<any>).map(ModDataAddEntryRequestDataInnerFromJSON)),
        'Databaseid': json['databaseid'],
        'Groupid': json['groupid'] == null ? undefined : json['groupid'],
    };
}

export function ModDataAddEntryRequestToJSON(value?: ModDataAddEntryRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'data': ((value['Data'] as Array<any>).map(ModDataAddEntryRequestDataInnerToJSON)),
        'databaseid': value['Databaseid'],
        'groupid': value['Groupid'],
    };
}

