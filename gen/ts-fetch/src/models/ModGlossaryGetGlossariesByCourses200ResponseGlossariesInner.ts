/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner } from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';
import {
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSONTyped,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON,
} from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';

/**
 * Glossaries
 * @export
 * @interface ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
 */
export interface ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner {
    /**
     * If enabled, all participants with permission to create comments will be able to add comments to glossary entries
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Allowcomments?: number;
    /**
     * If enabled, multiple entries can have the same concept name
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Allowduplicatedentries?: number;
    /**
     * If enabled, students are provided with a link to a printer-friendly version of the glossary. The link is always available to teachers
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Allowprintview?: number;
    /**
     * When approving glossary items you may wish to use a different display format
     * @type {string}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Approvaldisplayformat?: string;
    /**
     * Aggregate type
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Assessed?: number;
    /**
     * Restrict rating to items created before this
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Assesstimefinish?: number;
    /**
     * Restrict rating to items created after this
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Assesstimestart?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Browsemodes?: Array<object>;
    /**
     * Whether the user can add a new entry
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Canaddentry?: number;
    /**
     * Number of entries to complete
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Completionentries?: number;
    /**
     * Course id
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Course?: number;
    /**
     * Course module id
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Coursemodule?: number;
    /**
     * If set to no, entries require approving by a teacher before they are viewable by everyone.
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Defaultapproval?: number;
    /**
     * Display format type
     * @type {string}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Displayformat?: string;
    /**
     * Always allow editing
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Editalways?: number;
    /**
     * Entries shown per page
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Entbypage?: number;
    /**
     * 
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Globalglossary?: number;
    /**
     * Group id
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Groupingid?: number;
    /**
     * Group mode
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Groupmode?: number;
    /**
     * Activity instance id
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Id?: number;
    /**
     * Activity introduction
     * @type {string}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Intro?: string;
    /**
     * 
     * @type {Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Introfiles?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>;
    /**
     * intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Introformat?: number;
    /**
     * Forced activity language
     * @type {string}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Lang?: string;
    /**
     * If enabled this glossary is a main glossary.
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Mainglossary?: number;
    /**
     * Activity name
     * @type {string}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Name?: string;
    /**
     * This setting specifies the number of glossary entry concepts to include in the RSS feed. Between 5 and 20 generally acceptable
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Rssarticles?: number;
    /**
     * To enable the RSS feed for this activity, select either concepts with author or concepts without author to be included in the feed
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Rsstype?: number;
    /**
     * Scale ID
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Scale?: number;
    /**
     * Course section id
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Section?: number;
    /**
     * If enabled, participants can browse all entries at once
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Showall?: number;
    /**
     * If enabled, participants can browse the glossary by letters of the alphabet
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Showalphabet?: number;
    /**
     * If enabled, participants can browse the glossary by special characters, such as @ and #
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Showspecial?: number;
    /**
     * Time created
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Timecreated?: number;
    /**
     * Time modified
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Timemodified?: number;
    /**
     * If site-wide glossary auto-linking has been enabled by an administrator and this checkbox is ticked, the entry will be automatically linked wherever the concept words and phrases appear throughout the rest of the course.
     * @type {number}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Usedynalink?: number;
    /**
     * Visible
     * @type {boolean}
     * @memberof ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
     */
    Visible?: boolean;
}

/**
 * Check if a given object implements the ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner interface.
 */
export function instanceOfModGlossaryGetGlossariesByCourses200ResponseGlossariesInner(value: object): boolean {
    return true;
}

export function ModGlossaryGetGlossariesByCourses200ResponseGlossariesInnerFromJSON(json: any): ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner {
    return ModGlossaryGetGlossariesByCourses200ResponseGlossariesInnerFromJSONTyped(json, false);
}

export function ModGlossaryGetGlossariesByCourses200ResponseGlossariesInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner {
    if (json == null) {
        return json;
    }
    return {
        
        'Allowcomments': json['allowcomments'] == null ? undefined : json['allowcomments'],
        'Allowduplicatedentries': json['allowduplicatedentries'] == null ? undefined : json['allowduplicatedentries'],
        'Allowprintview': json['allowprintview'] == null ? undefined : json['allowprintview'],
        'Approvaldisplayformat': json['approvaldisplayformat'] == null ? undefined : json['approvaldisplayformat'],
        'Assessed': json['assessed'] == null ? undefined : json['assessed'],
        'Assesstimefinish': json['assesstimefinish'] == null ? undefined : json['assesstimefinish'],
        'Assesstimestart': json['assesstimestart'] == null ? undefined : json['assesstimestart'],
        'Browsemodes': json['browsemodes'] == null ? undefined : json['browsemodes'],
        'Canaddentry': json['canaddentry'] == null ? undefined : json['canaddentry'],
        'Completionentries': json['completionentries'] == null ? undefined : json['completionentries'],
        'Course': json['course'] == null ? undefined : json['course'],
        'Coursemodule': json['coursemodule'] == null ? undefined : json['coursemodule'],
        'Defaultapproval': json['defaultapproval'] == null ? undefined : json['defaultapproval'],
        'Displayformat': json['displayformat'] == null ? undefined : json['displayformat'],
        'Editalways': json['editalways'] == null ? undefined : json['editalways'],
        'Entbypage': json['entbypage'] == null ? undefined : json['entbypage'],
        'Globalglossary': json['globalglossary'] == null ? undefined : json['globalglossary'],
        'Groupingid': json['groupingid'] == null ? undefined : json['groupingid'],
        'Groupmode': json['groupmode'] == null ? undefined : json['groupmode'],
        'Id': json['id'] == null ? undefined : json['id'],
        'Intro': json['intro'] == null ? undefined : json['intro'],
        'Introfiles': json['introfiles'] == null ? undefined : ((json['introfiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON)),
        'Introformat': json['introformat'] == null ? undefined : json['introformat'],
        'Lang': json['lang'] == null ? undefined : json['lang'],
        'Mainglossary': json['mainglossary'] == null ? undefined : json['mainglossary'],
        'Name': json['name'] == null ? undefined : json['name'],
        'Rssarticles': json['rssarticles'] == null ? undefined : json['rssarticles'],
        'Rsstype': json['rsstype'] == null ? undefined : json['rsstype'],
        'Scale': json['scale'] == null ? undefined : json['scale'],
        'Section': json['section'] == null ? undefined : json['section'],
        'Showall': json['showall'] == null ? undefined : json['showall'],
        'Showalphabet': json['showalphabet'] == null ? undefined : json['showalphabet'],
        'Showspecial': json['showspecial'] == null ? undefined : json['showspecial'],
        'Timecreated': json['timecreated'] == null ? undefined : json['timecreated'],
        'Timemodified': json['timemodified'] == null ? undefined : json['timemodified'],
        'Usedynalink': json['usedynalink'] == null ? undefined : json['usedynalink'],
        'Visible': json['visible'] == null ? undefined : json['visible'],
    };
}

export function ModGlossaryGetGlossariesByCourses200ResponseGlossariesInnerToJSON(value?: ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'allowcomments': value['Allowcomments'],
        'allowduplicatedentries': value['Allowduplicatedentries'],
        'allowprintview': value['Allowprintview'],
        'approvaldisplayformat': value['Approvaldisplayformat'],
        'assessed': value['Assessed'],
        'assesstimefinish': value['Assesstimefinish'],
        'assesstimestart': value['Assesstimestart'],
        'browsemodes': value['Browsemodes'],
        'canaddentry': value['Canaddentry'],
        'completionentries': value['Completionentries'],
        'course': value['Course'],
        'coursemodule': value['Coursemodule'],
        'defaultapproval': value['Defaultapproval'],
        'displayformat': value['Displayformat'],
        'editalways': value['Editalways'],
        'entbypage': value['Entbypage'],
        'globalglossary': value['Globalglossary'],
        'groupingid': value['Groupingid'],
        'groupmode': value['Groupmode'],
        'id': value['Id'],
        'intro': value['Intro'],
        'introfiles': value['Introfiles'] == null ? undefined : ((value['Introfiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON)),
        'introformat': value['Introformat'],
        'lang': value['Lang'],
        'mainglossary': value['Mainglossary'],
        'name': value['Name'],
        'rssarticles': value['Rssarticles'],
        'rsstype': value['Rsstype'],
        'scale': value['Scale'],
        'section': value['Section'],
        'showall': value['Showall'],
        'showalphabet': value['Showalphabet'],
        'showspecial': value['Showspecial'],
        'timecreated': value['Timecreated'],
        'timemodified': value['Timemodified'],
        'usedynalink': value['Usedynalink'],
        'visible': value['Visible'],
    };
}

