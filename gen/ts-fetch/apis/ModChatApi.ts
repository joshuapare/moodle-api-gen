/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  ErrorResponse,
  ModChatGetChatLatestMessages200Response,
  ModChatGetChatLatestMessagesRequest,
  ModChatGetChatUsers200Response,
  ModChatGetChatUsersRequest,
  ModChatGetChatsByCourses200Response,
  ModChatGetChatsByCoursesRequest,
  ModChatGetSessionMessages200Response,
  ModChatGetSessionMessagesRequest,
  ModChatGetSessions200Response,
  ModChatGetSessionsRequest,
  ModChatLoginUser200Response,
  ModChatLoginUserRequest,
  ModChatSendChatMessage200Response,
  ModChatSendChatMessageRequest,
  ModChatViewChatRequest,
  ModChatViewSessionsRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModChatGetChatLatestMessages200ResponseFromJSON,
    ModChatGetChatLatestMessages200ResponseToJSON,
    ModChatGetChatLatestMessagesRequestFromJSON,
    ModChatGetChatLatestMessagesRequestToJSON,
    ModChatGetChatUsers200ResponseFromJSON,
    ModChatGetChatUsers200ResponseToJSON,
    ModChatGetChatUsersRequestFromJSON,
    ModChatGetChatUsersRequestToJSON,
    ModChatGetChatsByCourses200ResponseFromJSON,
    ModChatGetChatsByCourses200ResponseToJSON,
    ModChatGetChatsByCoursesRequestFromJSON,
    ModChatGetChatsByCoursesRequestToJSON,
    ModChatGetSessionMessages200ResponseFromJSON,
    ModChatGetSessionMessages200ResponseToJSON,
    ModChatGetSessionMessagesRequestFromJSON,
    ModChatGetSessionMessagesRequestToJSON,
    ModChatGetSessions200ResponseFromJSON,
    ModChatGetSessions200ResponseToJSON,
    ModChatGetSessionsRequestFromJSON,
    ModChatGetSessionsRequestToJSON,
    ModChatLoginUser200ResponseFromJSON,
    ModChatLoginUser200ResponseToJSON,
    ModChatLoginUserRequestFromJSON,
    ModChatLoginUserRequestToJSON,
    ModChatSendChatMessage200ResponseFromJSON,
    ModChatSendChatMessage200ResponseToJSON,
    ModChatSendChatMessageRequestFromJSON,
    ModChatSendChatMessageRequestToJSON,
    ModChatViewChatRequestFromJSON,
    ModChatViewChatRequestToJSON,
    ModChatViewSessionsRequestFromJSON,
    ModChatViewSessionsRequestToJSON,
} from '../models/index';

export interface ModChatGetChatLatestMessagesOperationRequest {
    modChatGetChatLatestMessagesRequest: ModChatGetChatLatestMessagesRequest;
}

export interface ModChatGetChatUsersOperationRequest {
    modChatGetChatUsersRequest: ModChatGetChatUsersRequest;
}

export interface ModChatGetChatsByCoursesOperationRequest {
    modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest;
}

export interface ModChatGetSessionMessagesOperationRequest {
    modChatGetSessionMessagesRequest: ModChatGetSessionMessagesRequest;
}

export interface ModChatGetSessionsOperationRequest {
    modChatGetSessionsRequest: ModChatGetSessionsRequest;
}

export interface ModChatLoginUserOperationRequest {
    modChatLoginUserRequest: ModChatLoginUserRequest;
}

export interface ModChatSendChatMessageOperationRequest {
    modChatSendChatMessageRequest: ModChatSendChatMessageRequest;
}

export interface ModChatViewChatOperationRequest {
    modChatViewChatRequest: ModChatViewChatRequest;
}

export interface ModChatViewSessionsOperationRequest {
    modChatViewSessionsRequest: ModChatViewSessionsRequest;
}

/**
 * 
 */
export class ModChatApi extends runtime.BaseAPI {

    /**
     * Get the latest messages from the given chat session.
     * Get the latest messages from the given chat session.
     */
    async modChatGetChatLatestMessagesRaw(requestParameters: ModChatGetChatLatestMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModChatGetChatLatestMessages200Response>> {
        if (requestParameters['modChatGetChatLatestMessagesRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatGetChatLatestMessagesRequest',
                'Required parameter "modChatGetChatLatestMessagesRequest" was null or undefined when calling modChatGetChatLatestMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_chat_get_chat_latest_messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatGetChatLatestMessagesRequestToJSON(requestParameters['modChatGetChatLatestMessagesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModChatGetChatLatestMessages200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the latest messages from the given chat session.
     * Get the latest messages from the given chat session.
     */
    async modChatGetChatLatestMessages(requestParameters: ModChatGetChatLatestMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModChatGetChatLatestMessages200Response> {
        const response = await this.modChatGetChatLatestMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of users in the given chat session.
     * Get the list of users in the given chat session.
     */
    async modChatGetChatUsersRaw(requestParameters: ModChatGetChatUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModChatGetChatUsers200Response>> {
        if (requestParameters['modChatGetChatUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatGetChatUsersRequest',
                'Required parameter "modChatGetChatUsersRequest" was null or undefined when calling modChatGetChatUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_chat_get_chat_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatGetChatUsersRequestToJSON(requestParameters['modChatGetChatUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModChatGetChatUsers200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the list of users in the given chat session.
     * Get the list of users in the given chat session.
     */
    async modChatGetChatUsers(requestParameters: ModChatGetChatUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModChatGetChatUsers200Response> {
        const response = await this.modChatGetChatUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of chat instances in a provided set of courses,                             if no courses are provided then all the chat instances the user has access to will be returned.
     * Returns a list of chat instances in a provided set of courses,                             if no courses are provided then all the chat instances the user has access to will be returned.
     */
    async modChatGetChatsByCoursesRaw(requestParameters: ModChatGetChatsByCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModChatGetChatsByCourses200Response>> {
        if (requestParameters['modChatGetChatsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatGetChatsByCoursesRequest',
                'Required parameter "modChatGetChatsByCoursesRequest" was null or undefined when calling modChatGetChatsByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_chat_get_chats_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatGetChatsByCoursesRequestToJSON(requestParameters['modChatGetChatsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModChatGetChatsByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of chat instances in a provided set of courses,                             if no courses are provided then all the chat instances the user has access to will be returned.
     * Returns a list of chat instances in a provided set of courses,                             if no courses are provided then all the chat instances the user has access to will be returned.
     */
    async modChatGetChatsByCourses(requestParameters: ModChatGetChatsByCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModChatGetChatsByCourses200Response> {
        const response = await this.modChatGetChatsByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves messages of the given chat session.
     * Retrieves messages of the given chat session.
     */
    async modChatGetSessionMessagesRaw(requestParameters: ModChatGetSessionMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModChatGetSessionMessages200Response>> {
        if (requestParameters['modChatGetSessionMessagesRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatGetSessionMessagesRequest',
                'Required parameter "modChatGetSessionMessagesRequest" was null or undefined when calling modChatGetSessionMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_chat_get_session_messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatGetSessionMessagesRequestToJSON(requestParameters['modChatGetSessionMessagesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModChatGetSessionMessages200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves messages of the given chat session.
     * Retrieves messages of the given chat session.
     */
    async modChatGetSessionMessages(requestParameters: ModChatGetSessionMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModChatGetSessionMessages200Response> {
        const response = await this.modChatGetSessionMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves chat sessions for a given chat.
     * Retrieves chat sessions for a given chat.
     */
    async modChatGetSessionsRaw(requestParameters: ModChatGetSessionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModChatGetSessions200Response>> {
        if (requestParameters['modChatGetSessionsRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatGetSessionsRequest',
                'Required parameter "modChatGetSessionsRequest" was null or undefined when calling modChatGetSessions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_chat_get_sessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatGetSessionsRequestToJSON(requestParameters['modChatGetSessionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModChatGetSessions200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves chat sessions for a given chat.
     * Retrieves chat sessions for a given chat.
     */
    async modChatGetSessions(requestParameters: ModChatGetSessionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModChatGetSessions200Response> {
        const response = await this.modChatGetSessionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log a user into a chat room in the given chat.
     * Log a user into a chat room in the given chat.
     */
    async modChatLoginUserRaw(requestParameters: ModChatLoginUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModChatLoginUser200Response>> {
        if (requestParameters['modChatLoginUserRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatLoginUserRequest',
                'Required parameter "modChatLoginUserRequest" was null or undefined when calling modChatLoginUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_chat_login_user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatLoginUserRequestToJSON(requestParameters['modChatLoginUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModChatLoginUser200ResponseFromJSON(jsonValue));
    }

    /**
     * Log a user into a chat room in the given chat.
     * Log a user into a chat room in the given chat.
     */
    async modChatLoginUser(requestParameters: ModChatLoginUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModChatLoginUser200Response> {
        const response = await this.modChatLoginUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a message on the given chat session.
     * Send a message on the given chat session.
     */
    async modChatSendChatMessageRaw(requestParameters: ModChatSendChatMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModChatSendChatMessage200Response>> {
        if (requestParameters['modChatSendChatMessageRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatSendChatMessageRequest',
                'Required parameter "modChatSendChatMessageRequest" was null or undefined when calling modChatSendChatMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_chat_send_chat_message`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatSendChatMessageRequestToJSON(requestParameters['modChatSendChatMessageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModChatSendChatMessage200ResponseFromJSON(jsonValue));
    }

    /**
     * Send a message on the given chat session.
     * Send a message on the given chat session.
     */
    async modChatSendChatMessage(requestParameters: ModChatSendChatMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModChatSendChatMessage200Response> {
        const response = await this.modChatSendChatMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modChatViewChatRaw(requestParameters: ModChatViewChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modChatViewChatRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatViewChatRequest',
                'Required parameter "modChatViewChatRequest" was null or undefined when calling modChatViewChat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_chat_view_chat`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatViewChatRequestToJSON(requestParameters['modChatViewChatRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modChatViewChat(requestParameters: ModChatViewChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modChatViewChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the chat session viewed event.
     * Trigger the chat session viewed event.
     */
    async modChatViewSessionsRaw(requestParameters: ModChatViewSessionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modChatViewSessionsRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatViewSessionsRequest',
                'Required parameter "modChatViewSessionsRequest" was null or undefined when calling modChatViewSessions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_chat_view_sessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatViewSessionsRequestToJSON(requestParameters['modChatViewSessionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the chat session viewed event.
     * Trigger the chat session viewed event.
     */
    async modChatViewSessions(requestParameters: ModChatViewSessionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modChatViewSessionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
