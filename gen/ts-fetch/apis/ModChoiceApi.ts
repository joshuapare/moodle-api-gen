/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  ErrorResponse,
  ModChatGetChatsByCoursesRequest,
  ModChoiceDeleteChoiceResponses200Response,
  ModChoiceDeleteChoiceResponsesRequest,
  ModChoiceGetChoiceOptions200Response,
  ModChoiceGetChoiceOptionsRequest,
  ModChoiceGetChoiceResults200Response,
  ModChoiceGetChoicesByCourses200Response,
  ModChoiceSubmitChoiceResponse200Response,
  ModChoiceSubmitChoiceResponseRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModChatGetChatsByCoursesRequestFromJSON,
    ModChatGetChatsByCoursesRequestToJSON,
    ModChoiceDeleteChoiceResponses200ResponseFromJSON,
    ModChoiceDeleteChoiceResponses200ResponseToJSON,
    ModChoiceDeleteChoiceResponsesRequestFromJSON,
    ModChoiceDeleteChoiceResponsesRequestToJSON,
    ModChoiceGetChoiceOptions200ResponseFromJSON,
    ModChoiceGetChoiceOptions200ResponseToJSON,
    ModChoiceGetChoiceOptionsRequestFromJSON,
    ModChoiceGetChoiceOptionsRequestToJSON,
    ModChoiceGetChoiceResults200ResponseFromJSON,
    ModChoiceGetChoiceResults200ResponseToJSON,
    ModChoiceGetChoicesByCourses200ResponseFromJSON,
    ModChoiceGetChoicesByCourses200ResponseToJSON,
    ModChoiceSubmitChoiceResponse200ResponseFromJSON,
    ModChoiceSubmitChoiceResponse200ResponseToJSON,
    ModChoiceSubmitChoiceResponseRequestFromJSON,
    ModChoiceSubmitChoiceResponseRequestToJSON,
} from '../models/index';

export interface ModChoiceDeleteChoiceResponsesOperationRequest {
    modChoiceDeleteChoiceResponsesRequest: ModChoiceDeleteChoiceResponsesRequest;
}

export interface ModChoiceGetChoiceOptionsOperationRequest {
    modChoiceGetChoiceOptionsRequest: ModChoiceGetChoiceOptionsRequest;
}

export interface ModChoiceGetChoiceResultsRequest {
    modChoiceGetChoiceOptionsRequest: ModChoiceGetChoiceOptionsRequest;
}

export interface ModChoiceGetChoicesByCoursesRequest {
    modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest;
}

export interface ModChoiceSubmitChoiceResponseOperationRequest {
    modChoiceSubmitChoiceResponseRequest: ModChoiceSubmitChoiceResponseRequest;
}

export interface ModChoiceViewChoiceRequest {
    modChoiceGetChoiceOptionsRequest: ModChoiceGetChoiceOptionsRequest;
}

/**
 * 
 */
export class ModChoiceApi extends runtime.BaseAPI {

    /**
     * Delete the given submitted responses in a choice
     * Delete the given submitted responses in a choice
     */
    async modChoiceDeleteChoiceResponsesRaw(requestParameters: ModChoiceDeleteChoiceResponsesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModChoiceDeleteChoiceResponses200Response>> {
        if (requestParameters['modChoiceDeleteChoiceResponsesRequest'] == null) {
            throw new runtime.RequiredError(
                'modChoiceDeleteChoiceResponsesRequest',
                'Required parameter "modChoiceDeleteChoiceResponsesRequest" was null or undefined when calling modChoiceDeleteChoiceResponses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_choice_delete_choice_responses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChoiceDeleteChoiceResponsesRequestToJSON(requestParameters['modChoiceDeleteChoiceResponsesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModChoiceDeleteChoiceResponses200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete the given submitted responses in a choice
     * Delete the given submitted responses in a choice
     */
    async modChoiceDeleteChoiceResponses(requestParameters: ModChoiceDeleteChoiceResponsesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModChoiceDeleteChoiceResponses200Response> {
        const response = await this.modChoiceDeleteChoiceResponsesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve options for a specific choice.
     * Retrieve options for a specific choice.
     */
    async modChoiceGetChoiceOptionsRaw(requestParameters: ModChoiceGetChoiceOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModChoiceGetChoiceOptions200Response>> {
        if (requestParameters['modChoiceGetChoiceOptionsRequest'] == null) {
            throw new runtime.RequiredError(
                'modChoiceGetChoiceOptionsRequest',
                'Required parameter "modChoiceGetChoiceOptionsRequest" was null or undefined when calling modChoiceGetChoiceOptions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_choice_get_choice_options`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChoiceGetChoiceOptionsRequestToJSON(requestParameters['modChoiceGetChoiceOptionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModChoiceGetChoiceOptions200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve options for a specific choice.
     * Retrieve options for a specific choice.
     */
    async modChoiceGetChoiceOptions(requestParameters: ModChoiceGetChoiceOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModChoiceGetChoiceOptions200Response> {
        const response = await this.modChoiceGetChoiceOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve users results for a given choice.
     * Retrieve users results for a given choice.
     */
    async modChoiceGetChoiceResultsRaw(requestParameters: ModChoiceGetChoiceResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModChoiceGetChoiceResults200Response>> {
        if (requestParameters['modChoiceGetChoiceOptionsRequest'] == null) {
            throw new runtime.RequiredError(
                'modChoiceGetChoiceOptionsRequest',
                'Required parameter "modChoiceGetChoiceOptionsRequest" was null or undefined when calling modChoiceGetChoiceResults().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_choice_get_choice_results`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChoiceGetChoiceOptionsRequestToJSON(requestParameters['modChoiceGetChoiceOptionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModChoiceGetChoiceResults200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve users results for a given choice.
     * Retrieve users results for a given choice.
     */
    async modChoiceGetChoiceResults(requestParameters: ModChoiceGetChoiceResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModChoiceGetChoiceResults200Response> {
        const response = await this.modChoiceGetChoiceResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
     * Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
     */
    async modChoiceGetChoicesByCoursesRaw(requestParameters: ModChoiceGetChoicesByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModChoiceGetChoicesByCourses200Response>> {
        if (requestParameters['modChatGetChatsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatGetChatsByCoursesRequest',
                'Required parameter "modChatGetChatsByCoursesRequest" was null or undefined when calling modChoiceGetChoicesByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_choice_get_choices_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatGetChatsByCoursesRequestToJSON(requestParameters['modChatGetChatsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModChoiceGetChoicesByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
     * Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
     */
    async modChoiceGetChoicesByCourses(requestParameters: ModChoiceGetChoicesByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModChoiceGetChoicesByCourses200Response> {
        const response = await this.modChoiceGetChoicesByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit responses to a specific choice item.
     * Submit responses to a specific choice item.
     */
    async modChoiceSubmitChoiceResponseRaw(requestParameters: ModChoiceSubmitChoiceResponseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModChoiceSubmitChoiceResponse200Response>> {
        if (requestParameters['modChoiceSubmitChoiceResponseRequest'] == null) {
            throw new runtime.RequiredError(
                'modChoiceSubmitChoiceResponseRequest',
                'Required parameter "modChoiceSubmitChoiceResponseRequest" was null or undefined when calling modChoiceSubmitChoiceResponse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_choice_submit_choice_response`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChoiceSubmitChoiceResponseRequestToJSON(requestParameters['modChoiceSubmitChoiceResponseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModChoiceSubmitChoiceResponse200ResponseFromJSON(jsonValue));
    }

    /**
     * Submit responses to a specific choice item.
     * Submit responses to a specific choice item.
     */
    async modChoiceSubmitChoiceResponse(requestParameters: ModChoiceSubmitChoiceResponseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModChoiceSubmitChoiceResponse200Response> {
        const response = await this.modChoiceSubmitChoiceResponseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modChoiceViewChoiceRaw(requestParameters: ModChoiceViewChoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modChoiceGetChoiceOptionsRequest'] == null) {
            throw new runtime.RequiredError(
                'modChoiceGetChoiceOptionsRequest',
                'Required parameter "modChoiceGetChoiceOptionsRequest" was null or undefined when calling modChoiceViewChoice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_choice_view_choice`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChoiceGetChoiceOptionsRequestToJSON(requestParameters['modChoiceGetChoiceOptionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modChoiceViewChoice(requestParameters: ModChoiceViewChoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modChoiceViewChoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
