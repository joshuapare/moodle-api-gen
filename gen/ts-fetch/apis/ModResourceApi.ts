/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  ErrorResponse,
  ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest,
  ModResourceGetResourcesByCourses200Response,
  ModResourceViewResourceRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestFromJSON,
    ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestToJSON,
    ModResourceGetResourcesByCourses200ResponseFromJSON,
    ModResourceGetResourcesByCourses200ResponseToJSON,
    ModResourceViewResourceRequestFromJSON,
    ModResourceViewResourceRequestToJSON,
} from '../models/index';

export interface ModResourceGetResourcesByCoursesRequest {
    modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;
}

export interface ModResourceViewResourceOperationRequest {
    modResourceViewResourceRequest: ModResourceViewResourceRequest;
}

/**
 * 
 */
export class ModResourceApi extends runtime.BaseAPI {

    /**
     * Returns a list of files in a provided list of courses, if no list is provided all files that                             the user can view will be returned.
     * Returns a list of files in a provided list of courses, if no list is provided all files that                             the user can view will be returned.
     */
    async modResourceGetResourcesByCoursesRaw(requestParameters: ModResourceGetResourcesByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModResourceGetResourcesByCourses200Response>> {
        if (requestParameters['modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest',
                'Required parameter "modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest" was null or undefined when calling modResourceGetResourcesByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_resource_get_resources_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestToJSON(requestParameters['modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModResourceGetResourcesByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of files in a provided list of courses, if no list is provided all files that                             the user can view will be returned.
     * Returns a list of files in a provided list of courses, if no list is provided all files that                             the user can view will be returned.
     */
    async modResourceGetResourcesByCourses(requestParameters: ModResourceGetResourcesByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModResourceGetResourcesByCourses200Response> {
        const response = await this.modResourceGetResourcesByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Simulate the view.php web interface resource: trigger events, completion, etc...
     * Simulate the view.php web interface resource: trigger events, completion, etc...
     */
    async modResourceViewResourceRaw(requestParameters: ModResourceViewResourceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modResourceViewResourceRequest'] == null) {
            throw new runtime.RequiredError(
                'modResourceViewResourceRequest',
                'Required parameter "modResourceViewResourceRequest" was null or undefined when calling modResourceViewResource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_resource_view_resource`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModResourceViewResourceRequestToJSON(requestParameters['modResourceViewResourceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Simulate the view.php web interface resource: trigger events, completion, etc...
     * Simulate the view.php web interface resource: trigger events, completion, etc...
     */
    async modResourceViewResource(requestParameters: ModResourceViewResourceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modResourceViewResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
