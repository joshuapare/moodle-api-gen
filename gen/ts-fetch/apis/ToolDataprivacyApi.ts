/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreContentbankRenameContent200Response,
  ErrorResponse,
  ToolDataprivacyApproveDataRequestRequest,
  ToolDataprivacyBulkApproveDataRequestsRequest,
  ToolDataprivacyBulkDenyDataRequestsRequest,
  ToolDataprivacyCancelDataRequestRequest,
  ToolDataprivacyConfirmContextsForDeletion200Response,
  ToolDataprivacyConfirmContextsForDeletionRequest,
  ToolDataprivacyContactDpoRequest,
  ToolDataprivacyCreateCategoryForm200Response,
  ToolDataprivacyCreateCategoryFormRequest,
  ToolDataprivacyCreatePurposeForm200Response,
  ToolDataprivacyCreatePurposeFormRequest,
  ToolDataprivacyDeleteCategoryRequest,
  ToolDataprivacyDeletePurposeRequest,
  ToolDataprivacyGetActivityOptions200Response,
  ToolDataprivacyGetActivityOptionsRequest,
  ToolDataprivacyGetCategoryOptions200Response,
  ToolDataprivacyGetCategoryOptionsRequest,
  ToolDataprivacyGetDataRequest200Response,
  ToolDataprivacyGetPurposeOptions200Response,
  ToolDataprivacyGetUsersRequest,
  ToolDataprivacySetContextDefaults200Response,
  ToolDataprivacySetContextDefaultsRequest,
  ToolDataprivacySetContextForm200Response,
  ToolDataprivacySetContextFormRequest,
  ToolDataprivacySetContextlevelForm200Response,
  ToolDataprivacySetContextlevelFormRequest,
  ToolDataprivacySubmitSelectedCoursesFormRequest,
  ToolDataprivacyTreeExtraBranches200Response,
  ToolDataprivacyTreeExtraBranchesRequest,
} from '../models/index';
import {
    CoreContentbankRenameContent200ResponseFromJSON,
    CoreContentbankRenameContent200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ToolDataprivacyApproveDataRequestRequestFromJSON,
    ToolDataprivacyApproveDataRequestRequestToJSON,
    ToolDataprivacyBulkApproveDataRequestsRequestFromJSON,
    ToolDataprivacyBulkApproveDataRequestsRequestToJSON,
    ToolDataprivacyBulkDenyDataRequestsRequestFromJSON,
    ToolDataprivacyBulkDenyDataRequestsRequestToJSON,
    ToolDataprivacyCancelDataRequestRequestFromJSON,
    ToolDataprivacyCancelDataRequestRequestToJSON,
    ToolDataprivacyConfirmContextsForDeletion200ResponseFromJSON,
    ToolDataprivacyConfirmContextsForDeletion200ResponseToJSON,
    ToolDataprivacyConfirmContextsForDeletionRequestFromJSON,
    ToolDataprivacyConfirmContextsForDeletionRequestToJSON,
    ToolDataprivacyContactDpoRequestFromJSON,
    ToolDataprivacyContactDpoRequestToJSON,
    ToolDataprivacyCreateCategoryForm200ResponseFromJSON,
    ToolDataprivacyCreateCategoryForm200ResponseToJSON,
    ToolDataprivacyCreateCategoryFormRequestFromJSON,
    ToolDataprivacyCreateCategoryFormRequestToJSON,
    ToolDataprivacyCreatePurposeForm200ResponseFromJSON,
    ToolDataprivacyCreatePurposeForm200ResponseToJSON,
    ToolDataprivacyCreatePurposeFormRequestFromJSON,
    ToolDataprivacyCreatePurposeFormRequestToJSON,
    ToolDataprivacyDeleteCategoryRequestFromJSON,
    ToolDataprivacyDeleteCategoryRequestToJSON,
    ToolDataprivacyDeletePurposeRequestFromJSON,
    ToolDataprivacyDeletePurposeRequestToJSON,
    ToolDataprivacyGetActivityOptions200ResponseFromJSON,
    ToolDataprivacyGetActivityOptions200ResponseToJSON,
    ToolDataprivacyGetActivityOptionsRequestFromJSON,
    ToolDataprivacyGetActivityOptionsRequestToJSON,
    ToolDataprivacyGetCategoryOptions200ResponseFromJSON,
    ToolDataprivacyGetCategoryOptions200ResponseToJSON,
    ToolDataprivacyGetCategoryOptionsRequestFromJSON,
    ToolDataprivacyGetCategoryOptionsRequestToJSON,
    ToolDataprivacyGetDataRequest200ResponseFromJSON,
    ToolDataprivacyGetDataRequest200ResponseToJSON,
    ToolDataprivacyGetPurposeOptions200ResponseFromJSON,
    ToolDataprivacyGetPurposeOptions200ResponseToJSON,
    ToolDataprivacyGetUsersRequestFromJSON,
    ToolDataprivacyGetUsersRequestToJSON,
    ToolDataprivacySetContextDefaults200ResponseFromJSON,
    ToolDataprivacySetContextDefaults200ResponseToJSON,
    ToolDataprivacySetContextDefaultsRequestFromJSON,
    ToolDataprivacySetContextDefaultsRequestToJSON,
    ToolDataprivacySetContextForm200ResponseFromJSON,
    ToolDataprivacySetContextForm200ResponseToJSON,
    ToolDataprivacySetContextFormRequestFromJSON,
    ToolDataprivacySetContextFormRequestToJSON,
    ToolDataprivacySetContextlevelForm200ResponseFromJSON,
    ToolDataprivacySetContextlevelForm200ResponseToJSON,
    ToolDataprivacySetContextlevelFormRequestFromJSON,
    ToolDataprivacySetContextlevelFormRequestToJSON,
    ToolDataprivacySubmitSelectedCoursesFormRequestFromJSON,
    ToolDataprivacySubmitSelectedCoursesFormRequestToJSON,
    ToolDataprivacyTreeExtraBranches200ResponseFromJSON,
    ToolDataprivacyTreeExtraBranches200ResponseToJSON,
    ToolDataprivacyTreeExtraBranchesRequestFromJSON,
    ToolDataprivacyTreeExtraBranchesRequestToJSON,
} from '../models/index';

export interface ToolDataprivacyApproveDataRequestOperationRequest {
    toolDataprivacyApproveDataRequestRequest: ToolDataprivacyApproveDataRequestRequest;
}

export interface ToolDataprivacyBulkApproveDataRequestsOperationRequest {
    toolDataprivacyBulkApproveDataRequestsRequest: ToolDataprivacyBulkApproveDataRequestsRequest;
}

export interface ToolDataprivacyBulkDenyDataRequestsOperationRequest {
    toolDataprivacyBulkDenyDataRequestsRequest: ToolDataprivacyBulkDenyDataRequestsRequest;
}

export interface ToolDataprivacyCancelDataRequestOperationRequest {
    toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest;
}

export interface ToolDataprivacyConfirmContextsForDeletionOperationRequest {
    toolDataprivacyConfirmContextsForDeletionRequest: ToolDataprivacyConfirmContextsForDeletionRequest;
}

export interface ToolDataprivacyContactDpoOperationRequest {
    toolDataprivacyContactDpoRequest: ToolDataprivacyContactDpoRequest;
}

export interface ToolDataprivacyCreateCategoryFormOperationRequest {
    toolDataprivacyCreateCategoryFormRequest: ToolDataprivacyCreateCategoryFormRequest;
}

export interface ToolDataprivacyCreatePurposeFormOperationRequest {
    toolDataprivacyCreatePurposeFormRequest: ToolDataprivacyCreatePurposeFormRequest;
}

export interface ToolDataprivacyDeleteCategoryOperationRequest {
    toolDataprivacyDeleteCategoryRequest: ToolDataprivacyDeleteCategoryRequest;
}

export interface ToolDataprivacyDeletePurposeOperationRequest {
    toolDataprivacyDeletePurposeRequest: ToolDataprivacyDeletePurposeRequest;
}

export interface ToolDataprivacyDenyDataRequestRequest {
    toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest;
}

export interface ToolDataprivacyGetActivityOptionsOperationRequest {
    toolDataprivacyGetActivityOptionsRequest: ToolDataprivacyGetActivityOptionsRequest;
}

export interface ToolDataprivacyGetCategoryOptionsOperationRequest {
    toolDataprivacyGetCategoryOptionsRequest: ToolDataprivacyGetCategoryOptionsRequest;
}

export interface ToolDataprivacyGetDataRequestRequest {
    toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest;
}

export interface ToolDataprivacyGetPurposeOptionsRequest {
    toolDataprivacyGetCategoryOptionsRequest: ToolDataprivacyGetCategoryOptionsRequest;
}

export interface ToolDataprivacyGetUsersOperationRequest {
    toolDataprivacyGetUsersRequest: ToolDataprivacyGetUsersRequest;
}

export interface ToolDataprivacyMarkCompleteRequest {
    toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest;
}

export interface ToolDataprivacySetContextDefaultsOperationRequest {
    toolDataprivacySetContextDefaultsRequest: ToolDataprivacySetContextDefaultsRequest;
}

export interface ToolDataprivacySetContextFormOperationRequest {
    toolDataprivacySetContextFormRequest: ToolDataprivacySetContextFormRequest;
}

export interface ToolDataprivacySetContextlevelFormOperationRequest {
    toolDataprivacySetContextlevelFormRequest: ToolDataprivacySetContextlevelFormRequest;
}

export interface ToolDataprivacySubmitSelectedCoursesFormOperationRequest {
    toolDataprivacySubmitSelectedCoursesFormRequest: ToolDataprivacySubmitSelectedCoursesFormRequest;
}

export interface ToolDataprivacyTreeExtraBranchesOperationRequest {
    toolDataprivacyTreeExtraBranchesRequest: ToolDataprivacyTreeExtraBranchesRequest;
}

/**
 * 
 */
export class ToolDataprivacyApi extends runtime.BaseAPI {

    /**
     * Approve a data request
     * Approve a data request
     */
    async toolDataprivacyApproveDataRequestRaw(requestParameters: ToolDataprivacyApproveDataRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankRenameContent200Response>> {
        if (requestParameters['toolDataprivacyApproveDataRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyApproveDataRequestRequest',
                'Required parameter "toolDataprivacyApproveDataRequestRequest" was null or undefined when calling toolDataprivacyApproveDataRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_approve_data_request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyApproveDataRequestRequestToJSON(requestParameters['toolDataprivacyApproveDataRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankRenameContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Approve a data request
     * Approve a data request
     */
    async toolDataprivacyApproveDataRequest(requestParameters: ToolDataprivacyApproveDataRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankRenameContent200Response> {
        const response = await this.toolDataprivacyApproveDataRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bulk approve data requests
     * Bulk approve data requests
     */
    async toolDataprivacyBulkApproveDataRequestsRaw(requestParameters: ToolDataprivacyBulkApproveDataRequestsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankRenameContent200Response>> {
        if (requestParameters['toolDataprivacyBulkApproveDataRequestsRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyBulkApproveDataRequestsRequest',
                'Required parameter "toolDataprivacyBulkApproveDataRequestsRequest" was null or undefined when calling toolDataprivacyBulkApproveDataRequests().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_bulk_approve_data_requests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyBulkApproveDataRequestsRequestToJSON(requestParameters['toolDataprivacyBulkApproveDataRequestsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankRenameContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Bulk approve data requests
     * Bulk approve data requests
     */
    async toolDataprivacyBulkApproveDataRequests(requestParameters: ToolDataprivacyBulkApproveDataRequestsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankRenameContent200Response> {
        const response = await this.toolDataprivacyBulkApproveDataRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bulk deny data requests
     * Bulk deny data requests
     */
    async toolDataprivacyBulkDenyDataRequestsRaw(requestParameters: ToolDataprivacyBulkDenyDataRequestsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankRenameContent200Response>> {
        if (requestParameters['toolDataprivacyBulkDenyDataRequestsRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyBulkDenyDataRequestsRequest',
                'Required parameter "toolDataprivacyBulkDenyDataRequestsRequest" was null or undefined when calling toolDataprivacyBulkDenyDataRequests().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_bulk_deny_data_requests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyBulkDenyDataRequestsRequestToJSON(requestParameters['toolDataprivacyBulkDenyDataRequestsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankRenameContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Bulk deny data requests
     * Bulk deny data requests
     */
    async toolDataprivacyBulkDenyDataRequests(requestParameters: ToolDataprivacyBulkDenyDataRequestsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankRenameContent200Response> {
        const response = await this.toolDataprivacyBulkDenyDataRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel the data request made by the user
     * Cancel the data request made by the user
     */
    async toolDataprivacyCancelDataRequestRaw(requestParameters: ToolDataprivacyCancelDataRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankRenameContent200Response>> {
        if (requestParameters['toolDataprivacyCancelDataRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyCancelDataRequestRequest',
                'Required parameter "toolDataprivacyCancelDataRequestRequest" was null or undefined when calling toolDataprivacyCancelDataRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_cancel_data_request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyCancelDataRequestRequestToJSON(requestParameters['toolDataprivacyCancelDataRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankRenameContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Cancel the data request made by the user
     * Cancel the data request made by the user
     */
    async toolDataprivacyCancelDataRequest(requestParameters: ToolDataprivacyCancelDataRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankRenameContent200Response> {
        const response = await this.toolDataprivacyCancelDataRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark the selected expired contexts as confirmed for deletion
     * Mark the selected expired contexts as confirmed for deletion
     */
    async toolDataprivacyConfirmContextsForDeletionRaw(requestParameters: ToolDataprivacyConfirmContextsForDeletionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolDataprivacyConfirmContextsForDeletion200Response>> {
        if (requestParameters['toolDataprivacyConfirmContextsForDeletionRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyConfirmContextsForDeletionRequest',
                'Required parameter "toolDataprivacyConfirmContextsForDeletionRequest" was null or undefined when calling toolDataprivacyConfirmContextsForDeletion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_confirm_contexts_for_deletion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyConfirmContextsForDeletionRequestToJSON(requestParameters['toolDataprivacyConfirmContextsForDeletionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolDataprivacyConfirmContextsForDeletion200ResponseFromJSON(jsonValue));
    }

    /**
     * Mark the selected expired contexts as confirmed for deletion
     * Mark the selected expired contexts as confirmed for deletion
     */
    async toolDataprivacyConfirmContextsForDeletion(requestParameters: ToolDataprivacyConfirmContextsForDeletionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolDataprivacyConfirmContextsForDeletion200Response> {
        const response = await this.toolDataprivacyConfirmContextsForDeletionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Contact the site Data Protection Officer(s)
     * Contact the site Data Protection Officer(s)
     */
    async toolDataprivacyContactDpoRaw(requestParameters: ToolDataprivacyContactDpoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankRenameContent200Response>> {
        if (requestParameters['toolDataprivacyContactDpoRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyContactDpoRequest',
                'Required parameter "toolDataprivacyContactDpoRequest" was null or undefined when calling toolDataprivacyContactDpo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_contact_dpo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyContactDpoRequestToJSON(requestParameters['toolDataprivacyContactDpoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankRenameContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Contact the site Data Protection Officer(s)
     * Contact the site Data Protection Officer(s)
     */
    async toolDataprivacyContactDpo(requestParameters: ToolDataprivacyContactDpoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankRenameContent200Response> {
        const response = await this.toolDataprivacyContactDpoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a data category
     * Adds a data category
     */
    async toolDataprivacyCreateCategoryFormRaw(requestParameters: ToolDataprivacyCreateCategoryFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolDataprivacyCreateCategoryForm200Response>> {
        if (requestParameters['toolDataprivacyCreateCategoryFormRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyCreateCategoryFormRequest',
                'Required parameter "toolDataprivacyCreateCategoryFormRequest" was null or undefined when calling toolDataprivacyCreateCategoryForm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_create_category_form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyCreateCategoryFormRequestToJSON(requestParameters['toolDataprivacyCreateCategoryFormRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolDataprivacyCreateCategoryForm200ResponseFromJSON(jsonValue));
    }

    /**
     * Adds a data category
     * Adds a data category
     */
    async toolDataprivacyCreateCategoryForm(requestParameters: ToolDataprivacyCreateCategoryFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolDataprivacyCreateCategoryForm200Response> {
        const response = await this.toolDataprivacyCreateCategoryFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a data purpose
     * Adds a data purpose
     */
    async toolDataprivacyCreatePurposeFormRaw(requestParameters: ToolDataprivacyCreatePurposeFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolDataprivacyCreatePurposeForm200Response>> {
        if (requestParameters['toolDataprivacyCreatePurposeFormRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyCreatePurposeFormRequest',
                'Required parameter "toolDataprivacyCreatePurposeFormRequest" was null or undefined when calling toolDataprivacyCreatePurposeForm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_create_purpose_form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyCreatePurposeFormRequestToJSON(requestParameters['toolDataprivacyCreatePurposeFormRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolDataprivacyCreatePurposeForm200ResponseFromJSON(jsonValue));
    }

    /**
     * Adds a data purpose
     * Adds a data purpose
     */
    async toolDataprivacyCreatePurposeForm(requestParameters: ToolDataprivacyCreatePurposeFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolDataprivacyCreatePurposeForm200Response> {
        const response = await this.toolDataprivacyCreatePurposeFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an existing data category
     * Deletes an existing data category
     */
    async toolDataprivacyDeleteCategoryRaw(requestParameters: ToolDataprivacyDeleteCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankRenameContent200Response>> {
        if (requestParameters['toolDataprivacyDeleteCategoryRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyDeleteCategoryRequest',
                'Required parameter "toolDataprivacyDeleteCategoryRequest" was null or undefined when calling toolDataprivacyDeleteCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_delete_category`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyDeleteCategoryRequestToJSON(requestParameters['toolDataprivacyDeleteCategoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankRenameContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an existing data category
     * Deletes an existing data category
     */
    async toolDataprivacyDeleteCategory(requestParameters: ToolDataprivacyDeleteCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankRenameContent200Response> {
        const response = await this.toolDataprivacyDeleteCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an existing data purpose
     * Deletes an existing data purpose
     */
    async toolDataprivacyDeletePurposeRaw(requestParameters: ToolDataprivacyDeletePurposeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankRenameContent200Response>> {
        if (requestParameters['toolDataprivacyDeletePurposeRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyDeletePurposeRequest',
                'Required parameter "toolDataprivacyDeletePurposeRequest" was null or undefined when calling toolDataprivacyDeletePurpose().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_delete_purpose`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyDeletePurposeRequestToJSON(requestParameters['toolDataprivacyDeletePurposeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankRenameContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an existing data purpose
     * Deletes an existing data purpose
     */
    async toolDataprivacyDeletePurpose(requestParameters: ToolDataprivacyDeletePurposeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankRenameContent200Response> {
        const response = await this.toolDataprivacyDeletePurposeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deny a data request
     * Deny a data request
     */
    async toolDataprivacyDenyDataRequestRaw(requestParameters: ToolDataprivacyDenyDataRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankRenameContent200Response>> {
        if (requestParameters['toolDataprivacyCancelDataRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyCancelDataRequestRequest',
                'Required parameter "toolDataprivacyCancelDataRequestRequest" was null or undefined when calling toolDataprivacyDenyDataRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_deny_data_request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyCancelDataRequestRequestToJSON(requestParameters['toolDataprivacyCancelDataRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankRenameContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Deny a data request
     * Deny a data request
     */
    async toolDataprivacyDenyDataRequest(requestParameters: ToolDataprivacyDenyDataRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankRenameContent200Response> {
        const response = await this.toolDataprivacyDenyDataRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches a list of activity options
     * Fetches a list of activity options
     */
    async toolDataprivacyGetActivityOptionsRaw(requestParameters: ToolDataprivacyGetActivityOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolDataprivacyGetActivityOptions200Response>> {
        if (requestParameters['toolDataprivacyGetActivityOptionsRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyGetActivityOptionsRequest',
                'Required parameter "toolDataprivacyGetActivityOptionsRequest" was null or undefined when calling toolDataprivacyGetActivityOptions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_get_activity_options`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyGetActivityOptionsRequestToJSON(requestParameters['toolDataprivacyGetActivityOptionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolDataprivacyGetActivityOptions200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetches a list of activity options
     * Fetches a list of activity options
     */
    async toolDataprivacyGetActivityOptions(requestParameters: ToolDataprivacyGetActivityOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolDataprivacyGetActivityOptions200Response> {
        const response = await this.toolDataprivacyGetActivityOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches a list of data category options
     * Fetches a list of data category options
     */
    async toolDataprivacyGetCategoryOptionsRaw(requestParameters: ToolDataprivacyGetCategoryOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolDataprivacyGetCategoryOptions200Response>> {
        if (requestParameters['toolDataprivacyGetCategoryOptionsRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyGetCategoryOptionsRequest',
                'Required parameter "toolDataprivacyGetCategoryOptionsRequest" was null or undefined when calling toolDataprivacyGetCategoryOptions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_get_category_options`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyGetCategoryOptionsRequestToJSON(requestParameters['toolDataprivacyGetCategoryOptionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolDataprivacyGetCategoryOptions200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetches a list of data category options
     * Fetches a list of data category options
     */
    async toolDataprivacyGetCategoryOptions(requestParameters: ToolDataprivacyGetCategoryOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolDataprivacyGetCategoryOptions200Response> {
        const response = await this.toolDataprivacyGetCategoryOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the details of a user\'s data request
     * Fetch the details of a user\'s data request
     */
    async toolDataprivacyGetDataRequestRaw(requestParameters: ToolDataprivacyGetDataRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolDataprivacyGetDataRequest200Response>> {
        if (requestParameters['toolDataprivacyCancelDataRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyCancelDataRequestRequest',
                'Required parameter "toolDataprivacyCancelDataRequestRequest" was null or undefined when calling toolDataprivacyGetDataRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_get_data_request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyCancelDataRequestRequestToJSON(requestParameters['toolDataprivacyCancelDataRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolDataprivacyGetDataRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetch the details of a user\'s data request
     * Fetch the details of a user\'s data request
     */
    async toolDataprivacyGetDataRequest(requestParameters: ToolDataprivacyGetDataRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolDataprivacyGetDataRequest200Response> {
        const response = await this.toolDataprivacyGetDataRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches a list of data storage purpose options
     * Fetches a list of data storage purpose options
     */
    async toolDataprivacyGetPurposeOptionsRaw(requestParameters: ToolDataprivacyGetPurposeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolDataprivacyGetPurposeOptions200Response>> {
        if (requestParameters['toolDataprivacyGetCategoryOptionsRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyGetCategoryOptionsRequest',
                'Required parameter "toolDataprivacyGetCategoryOptionsRequest" was null or undefined when calling toolDataprivacyGetPurposeOptions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_get_purpose_options`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyGetCategoryOptionsRequestToJSON(requestParameters['toolDataprivacyGetCategoryOptionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolDataprivacyGetPurposeOptions200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetches a list of data storage purpose options
     * Fetches a list of data storage purpose options
     */
    async toolDataprivacyGetPurposeOptions(requestParameters: ToolDataprivacyGetPurposeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolDataprivacyGetPurposeOptions200Response> {
        const response = await this.toolDataprivacyGetPurposeOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches a list of users
     * Fetches a list of users
     */
    async toolDataprivacyGetUsersRaw(requestParameters: ToolDataprivacyGetUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['toolDataprivacyGetUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyGetUsersRequest',
                'Required parameter "toolDataprivacyGetUsersRequest" was null or undefined when calling toolDataprivacyGetUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_get_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyGetUsersRequestToJSON(requestParameters['toolDataprivacyGetUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Fetches a list of users
     * Fetches a list of users
     */
    async toolDataprivacyGetUsers(requestParameters: ToolDataprivacyGetUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.toolDataprivacyGetUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark a user\'s general enquiry as complete
     * Mark a user\'s general enquiry as complete
     */
    async toolDataprivacyMarkCompleteRaw(requestParameters: ToolDataprivacyMarkCompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankRenameContent200Response>> {
        if (requestParameters['toolDataprivacyCancelDataRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyCancelDataRequestRequest',
                'Required parameter "toolDataprivacyCancelDataRequestRequest" was null or undefined when calling toolDataprivacyMarkComplete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_mark_complete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyCancelDataRequestRequestToJSON(requestParameters['toolDataprivacyCancelDataRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankRenameContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Mark a user\'s general enquiry as complete
     * Mark a user\'s general enquiry as complete
     */
    async toolDataprivacyMarkComplete(requestParameters: ToolDataprivacyMarkCompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankRenameContent200Response> {
        const response = await this.toolDataprivacyMarkCompleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     */
    async toolDataprivacySetContextDefaultsRaw(requestParameters: ToolDataprivacySetContextDefaultsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolDataprivacySetContextDefaults200Response>> {
        if (requestParameters['toolDataprivacySetContextDefaultsRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacySetContextDefaultsRequest',
                'Required parameter "toolDataprivacySetContextDefaultsRequest" was null or undefined when calling toolDataprivacySetContextDefaults().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_set_context_defaults`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacySetContextDefaultsRequestToJSON(requestParameters['toolDataprivacySetContextDefaultsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolDataprivacySetContextDefaults200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     */
    async toolDataprivacySetContextDefaults(requestParameters: ToolDataprivacySetContextDefaultsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolDataprivacySetContextDefaults200Response> {
        const response = await this.toolDataprivacySetContextDefaultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets purpose and category for a specific context
     * Sets purpose and category for a specific context
     */
    async toolDataprivacySetContextFormRaw(requestParameters: ToolDataprivacySetContextFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolDataprivacySetContextForm200Response>> {
        if (requestParameters['toolDataprivacySetContextFormRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacySetContextFormRequest',
                'Required parameter "toolDataprivacySetContextFormRequest" was null or undefined when calling toolDataprivacySetContextForm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_set_context_form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacySetContextFormRequestToJSON(requestParameters['toolDataprivacySetContextFormRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolDataprivacySetContextForm200ResponseFromJSON(jsonValue));
    }

    /**
     * Sets purpose and category for a specific context
     * Sets purpose and category for a specific context
     */
    async toolDataprivacySetContextForm(requestParameters: ToolDataprivacySetContextFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolDataprivacySetContextForm200Response> {
        const response = await this.toolDataprivacySetContextFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets purpose and category across a context level
     * Sets purpose and category across a context level
     */
    async toolDataprivacySetContextlevelFormRaw(requestParameters: ToolDataprivacySetContextlevelFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolDataprivacySetContextlevelForm200Response>> {
        if (requestParameters['toolDataprivacySetContextlevelFormRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacySetContextlevelFormRequest',
                'Required parameter "toolDataprivacySetContextlevelFormRequest" was null or undefined when calling toolDataprivacySetContextlevelForm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_set_contextlevel_form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacySetContextlevelFormRequestToJSON(requestParameters['toolDataprivacySetContextlevelFormRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolDataprivacySetContextlevelForm200ResponseFromJSON(jsonValue));
    }

    /**
     * Sets purpose and category across a context level
     * Sets purpose and category across a context level
     */
    async toolDataprivacySetContextlevelForm(requestParameters: ToolDataprivacySetContextlevelFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolDataprivacySetContextlevelForm200Response> {
        const response = await this.toolDataprivacySetContextlevelFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save list of selected courses for export
     * Save list of selected courses for export
     */
    async toolDataprivacySubmitSelectedCoursesFormRaw(requestParameters: ToolDataprivacySubmitSelectedCoursesFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankRenameContent200Response>> {
        if (requestParameters['toolDataprivacySubmitSelectedCoursesFormRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacySubmitSelectedCoursesFormRequest',
                'Required parameter "toolDataprivacySubmitSelectedCoursesFormRequest" was null or undefined when calling toolDataprivacySubmitSelectedCoursesForm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_submit_selected_courses_form`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacySubmitSelectedCoursesFormRequestToJSON(requestParameters['toolDataprivacySubmitSelectedCoursesFormRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankRenameContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Save list of selected courses for export
     * Save list of selected courses for export
     */
    async toolDataprivacySubmitSelectedCoursesForm(requestParameters: ToolDataprivacySubmitSelectedCoursesFormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankRenameContent200Response> {
        const response = await this.toolDataprivacySubmitSelectedCoursesFormRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return branches for the context tree
     * Return branches for the context tree
     */
    async toolDataprivacyTreeExtraBranchesRaw(requestParameters: ToolDataprivacyTreeExtraBranchesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolDataprivacyTreeExtraBranches200Response>> {
        if (requestParameters['toolDataprivacyTreeExtraBranchesRequest'] == null) {
            throw new runtime.RequiredError(
                'toolDataprivacyTreeExtraBranchesRequest',
                'Required parameter "toolDataprivacyTreeExtraBranchesRequest" was null or undefined when calling toolDataprivacyTreeExtraBranches().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_dataprivacy_tree_extra_branches`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolDataprivacyTreeExtraBranchesRequestToJSON(requestParameters['toolDataprivacyTreeExtraBranchesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolDataprivacyTreeExtraBranches200ResponseFromJSON(jsonValue));
    }

    /**
     * Return branches for the context tree
     * Return branches for the context tree
     */
    async toolDataprivacyTreeExtraBranches(requestParameters: ToolDataprivacyTreeExtraBranchesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolDataprivacyTreeExtraBranches200Response> {
        const response = await this.toolDataprivacyTreeExtraBranchesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
