/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ToolIomadpolicyGetIomadpolicyVersion200Response,
  ToolIomadpolicyGetIomadpolicyVersionRequest,
  ToolIomadpolicySubmitAcceptOnBehalfRequest,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ToolIomadpolicyGetIomadpolicyVersion200ResponseFromJSON,
    ToolIomadpolicyGetIomadpolicyVersion200ResponseToJSON,
    ToolIomadpolicyGetIomadpolicyVersionRequestFromJSON,
    ToolIomadpolicyGetIomadpolicyVersionRequestToJSON,
    ToolIomadpolicySubmitAcceptOnBehalfRequestFromJSON,
    ToolIomadpolicySubmitAcceptOnBehalfRequestToJSON,
} from '../models/index';

export interface ToolIomadpolicyGetIomadpolicyVersionOperationRequest {
    toolIomadpolicyGetIomadpolicyVersionRequest: ToolIomadpolicyGetIomadpolicyVersionRequest;
}

export interface ToolIomadpolicySubmitAcceptOnBehalfOperationRequest {
    toolIomadpolicySubmitAcceptOnBehalfRequest: ToolIomadpolicySubmitAcceptOnBehalfRequest;
}

/**
 * 
 */
export class ToolIomadpolicyApi extends runtime.BaseAPI {

    /**
     * Fetch the details of a iomadpolicy version
     * Fetch the details of a iomadpolicy version
     */
    async toolIomadpolicyGetIomadpolicyVersionRaw(requestParameters: ToolIomadpolicyGetIomadpolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolIomadpolicyGetIomadpolicyVersion200Response>> {
        if (requestParameters['toolIomadpolicyGetIomadpolicyVersionRequest'] == null) {
            throw new runtime.RequiredError(
                'toolIomadpolicyGetIomadpolicyVersionRequest',
                'Required parameter "toolIomadpolicyGetIomadpolicyVersionRequest" was null or undefined when calling toolIomadpolicyGetIomadpolicyVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_iomadpolicy_get_iomadpolicy_version`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolIomadpolicyGetIomadpolicyVersionRequestToJSON(requestParameters['toolIomadpolicyGetIomadpolicyVersionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolIomadpolicyGetIomadpolicyVersion200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetch the details of a iomadpolicy version
     * Fetch the details of a iomadpolicy version
     */
    async toolIomadpolicyGetIomadpolicyVersion(requestParameters: ToolIomadpolicyGetIomadpolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolIomadpolicyGetIomadpolicyVersion200Response> {
        const response = await this.toolIomadpolicyGetIomadpolicyVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Accept policies on behalf of other users
     * Accept policies on behalf of other users
     */
    async toolIomadpolicySubmitAcceptOnBehalfRaw(requestParameters: ToolIomadpolicySubmitAcceptOnBehalfOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['toolIomadpolicySubmitAcceptOnBehalfRequest'] == null) {
            throw new runtime.RequiredError(
                'toolIomadpolicySubmitAcceptOnBehalfRequest',
                'Required parameter "toolIomadpolicySubmitAcceptOnBehalfRequest" was null or undefined when calling toolIomadpolicySubmitAcceptOnBehalf().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_iomadpolicy_submit_accept_on_behalf`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolIomadpolicySubmitAcceptOnBehalfRequestToJSON(requestParameters['toolIomadpolicySubmitAcceptOnBehalfRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Accept policies on behalf of other users
     * Accept policies on behalf of other users
     */
    async toolIomadpolicySubmitAcceptOnBehalf(requestParameters: ToolIomadpolicySubmitAcceptOnBehalfOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.toolIomadpolicySubmitAcceptOnBehalfRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
