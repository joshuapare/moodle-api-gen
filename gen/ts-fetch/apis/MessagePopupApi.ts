/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreMessageGetUnreadConversationsCountRequest,
  ErrorResponse,
  MessagePopupGetPopupNotifications200Response,
  MessagePopupGetPopupNotificationsRequest,
} from '../models/index';
import {
    CoreMessageGetUnreadConversationsCountRequestFromJSON,
    CoreMessageGetUnreadConversationsCountRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MessagePopupGetPopupNotifications200ResponseFromJSON,
    MessagePopupGetPopupNotifications200ResponseToJSON,
    MessagePopupGetPopupNotificationsRequestFromJSON,
    MessagePopupGetPopupNotificationsRequestToJSON,
} from '../models/index';

export interface MessagePopupGetPopupNotificationsOperationRequest {
    messagePopupGetPopupNotificationsRequest: MessagePopupGetPopupNotificationsRequest;
}

export interface MessagePopupGetUnreadPopupNotificationCountRequest {
    coreMessageGetUnreadConversationsCountRequest: CoreMessageGetUnreadConversationsCountRequest;
}

/**
 * 
 */
export class MessagePopupApi extends runtime.BaseAPI {

    /**
     * Retrieve a list of popup notifications for a user
     * Retrieve a list of popup notifications for a user
     */
    async messagePopupGetPopupNotificationsRaw(requestParameters: MessagePopupGetPopupNotificationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagePopupGetPopupNotifications200Response>> {
        if (requestParameters['messagePopupGetPopupNotificationsRequest'] == null) {
            throw new runtime.RequiredError(
                'messagePopupGetPopupNotificationsRequest',
                'Required parameter "messagePopupGetPopupNotificationsRequest" was null or undefined when calling messagePopupGetPopupNotifications().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/message_popup_get_popup_notifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessagePopupGetPopupNotificationsRequestToJSON(requestParameters['messagePopupGetPopupNotificationsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagePopupGetPopupNotifications200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of popup notifications for a user
     * Retrieve a list of popup notifications for a user
     */
    async messagePopupGetPopupNotifications(requestParameters: MessagePopupGetPopupNotificationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagePopupGetPopupNotifications200Response> {
        const response = await this.messagePopupGetPopupNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the count of unread popup notifications for a given user
     * Retrieve the count of unread popup notifications for a given user
     */
    async messagePopupGetUnreadPopupNotificationCountRaw(requestParameters: MessagePopupGetUnreadPopupNotificationCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreMessageGetUnreadConversationsCountRequest'] == null) {
            throw new runtime.RequiredError(
                'coreMessageGetUnreadConversationsCountRequest',
                'Required parameter "coreMessageGetUnreadConversationsCountRequest" was null or undefined when calling messagePopupGetUnreadPopupNotificationCount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/message_popup_get_unread_popup_notification_count`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreMessageGetUnreadConversationsCountRequestToJSON(requestParameters['coreMessageGetUnreadConversationsCountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve the count of unread popup notifications for a given user
     * Retrieve the count of unread popup notifications for a given user
     */
    async messagePopupGetUnreadPopupNotificationCount(requestParameters: MessagePopupGetUnreadPopupNotificationCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.messagePopupGetUnreadPopupNotificationCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
