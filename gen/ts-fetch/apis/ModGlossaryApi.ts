/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreContentbankRenameContent200Response,
  ErrorResponse,
  ModChatGetChatsByCoursesRequest,
  ModGlossaryAddEntry200Response,
  ModGlossaryAddEntryRequest,
  ModGlossaryDeleteEntryRequest,
  ModGlossaryGetAuthors200Response,
  ModGlossaryGetAuthorsRequest,
  ModGlossaryGetCategories200Response,
  ModGlossaryGetCategoriesRequest,
  ModGlossaryGetEntriesByAuthor200Response,
  ModGlossaryGetEntriesByAuthorId200Response,
  ModGlossaryGetEntriesByAuthorIdRequest,
  ModGlossaryGetEntriesByAuthorRequest,
  ModGlossaryGetEntriesByCategory200Response,
  ModGlossaryGetEntriesByCategoryRequest,
  ModGlossaryGetEntriesByDateRequest,
  ModGlossaryGetEntriesByLetterRequest,
  ModGlossaryGetEntriesBySearchRequest,
  ModGlossaryGetEntriesByTermRequest,
  ModGlossaryGetEntriesToApproveRequest,
  ModGlossaryGetEntryById200Response,
  ModGlossaryGetEntryByIdRequest,
  ModGlossaryGetGlossariesByCourses200Response,
  ModGlossaryPrepareEntryForEdition200Response,
  ModGlossaryPrepareEntryForEditionRequest,
  ModGlossaryUpdateEntry200Response,
  ModGlossaryUpdateEntryRequest,
  ModGlossaryViewEntry200Response,
  ModGlossaryViewGlossary200Response,
  ModGlossaryViewGlossaryRequest,
} from '../models/index';
import {
    CoreContentbankRenameContent200ResponseFromJSON,
    CoreContentbankRenameContent200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModChatGetChatsByCoursesRequestFromJSON,
    ModChatGetChatsByCoursesRequestToJSON,
    ModGlossaryAddEntry200ResponseFromJSON,
    ModGlossaryAddEntry200ResponseToJSON,
    ModGlossaryAddEntryRequestFromJSON,
    ModGlossaryAddEntryRequestToJSON,
    ModGlossaryDeleteEntryRequestFromJSON,
    ModGlossaryDeleteEntryRequestToJSON,
    ModGlossaryGetAuthors200ResponseFromJSON,
    ModGlossaryGetAuthors200ResponseToJSON,
    ModGlossaryGetAuthorsRequestFromJSON,
    ModGlossaryGetAuthorsRequestToJSON,
    ModGlossaryGetCategories200ResponseFromJSON,
    ModGlossaryGetCategories200ResponseToJSON,
    ModGlossaryGetCategoriesRequestFromJSON,
    ModGlossaryGetCategoriesRequestToJSON,
    ModGlossaryGetEntriesByAuthor200ResponseFromJSON,
    ModGlossaryGetEntriesByAuthor200ResponseToJSON,
    ModGlossaryGetEntriesByAuthorId200ResponseFromJSON,
    ModGlossaryGetEntriesByAuthorId200ResponseToJSON,
    ModGlossaryGetEntriesByAuthorIdRequestFromJSON,
    ModGlossaryGetEntriesByAuthorIdRequestToJSON,
    ModGlossaryGetEntriesByAuthorRequestFromJSON,
    ModGlossaryGetEntriesByAuthorRequestToJSON,
    ModGlossaryGetEntriesByCategory200ResponseFromJSON,
    ModGlossaryGetEntriesByCategory200ResponseToJSON,
    ModGlossaryGetEntriesByCategoryRequestFromJSON,
    ModGlossaryGetEntriesByCategoryRequestToJSON,
    ModGlossaryGetEntriesByDateRequestFromJSON,
    ModGlossaryGetEntriesByDateRequestToJSON,
    ModGlossaryGetEntriesByLetterRequestFromJSON,
    ModGlossaryGetEntriesByLetterRequestToJSON,
    ModGlossaryGetEntriesBySearchRequestFromJSON,
    ModGlossaryGetEntriesBySearchRequestToJSON,
    ModGlossaryGetEntriesByTermRequestFromJSON,
    ModGlossaryGetEntriesByTermRequestToJSON,
    ModGlossaryGetEntriesToApproveRequestFromJSON,
    ModGlossaryGetEntriesToApproveRequestToJSON,
    ModGlossaryGetEntryById200ResponseFromJSON,
    ModGlossaryGetEntryById200ResponseToJSON,
    ModGlossaryGetEntryByIdRequestFromJSON,
    ModGlossaryGetEntryByIdRequestToJSON,
    ModGlossaryGetGlossariesByCourses200ResponseFromJSON,
    ModGlossaryGetGlossariesByCourses200ResponseToJSON,
    ModGlossaryPrepareEntryForEdition200ResponseFromJSON,
    ModGlossaryPrepareEntryForEdition200ResponseToJSON,
    ModGlossaryPrepareEntryForEditionRequestFromJSON,
    ModGlossaryPrepareEntryForEditionRequestToJSON,
    ModGlossaryUpdateEntry200ResponseFromJSON,
    ModGlossaryUpdateEntry200ResponseToJSON,
    ModGlossaryUpdateEntryRequestFromJSON,
    ModGlossaryUpdateEntryRequestToJSON,
    ModGlossaryViewEntry200ResponseFromJSON,
    ModGlossaryViewEntry200ResponseToJSON,
    ModGlossaryViewGlossary200ResponseFromJSON,
    ModGlossaryViewGlossary200ResponseToJSON,
    ModGlossaryViewGlossaryRequestFromJSON,
    ModGlossaryViewGlossaryRequestToJSON,
} from '../models/index';

export interface ModGlossaryAddEntryOperationRequest {
    modGlossaryAddEntryRequest: ModGlossaryAddEntryRequest;
}

export interface ModGlossaryDeleteEntryOperationRequest {
    modGlossaryDeleteEntryRequest: ModGlossaryDeleteEntryRequest;
}

export interface ModGlossaryGetAuthorsOperationRequest {
    modGlossaryGetAuthorsRequest: ModGlossaryGetAuthorsRequest;
}

export interface ModGlossaryGetCategoriesOperationRequest {
    modGlossaryGetCategoriesRequest: ModGlossaryGetCategoriesRequest;
}

export interface ModGlossaryGetEntriesByAuthorOperationRequest {
    modGlossaryGetEntriesByAuthorRequest: ModGlossaryGetEntriesByAuthorRequest;
}

export interface ModGlossaryGetEntriesByAuthorIdOperationRequest {
    modGlossaryGetEntriesByAuthorIdRequest: ModGlossaryGetEntriesByAuthorIdRequest;
}

export interface ModGlossaryGetEntriesByCategoryOperationRequest {
    modGlossaryGetEntriesByCategoryRequest: ModGlossaryGetEntriesByCategoryRequest;
}

export interface ModGlossaryGetEntriesByDateOperationRequest {
    modGlossaryGetEntriesByDateRequest: ModGlossaryGetEntriesByDateRequest;
}

export interface ModGlossaryGetEntriesByLetterOperationRequest {
    modGlossaryGetEntriesByLetterRequest: ModGlossaryGetEntriesByLetterRequest;
}

export interface ModGlossaryGetEntriesBySearchOperationRequest {
    modGlossaryGetEntriesBySearchRequest: ModGlossaryGetEntriesBySearchRequest;
}

export interface ModGlossaryGetEntriesByTermOperationRequest {
    modGlossaryGetEntriesByTermRequest: ModGlossaryGetEntriesByTermRequest;
}

export interface ModGlossaryGetEntriesToApproveOperationRequest {
    modGlossaryGetEntriesToApproveRequest: ModGlossaryGetEntriesToApproveRequest;
}

export interface ModGlossaryGetEntryByIdOperationRequest {
    modGlossaryGetEntryByIdRequest: ModGlossaryGetEntryByIdRequest;
}

export interface ModGlossaryGetGlossariesByCoursesRequest {
    modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest;
}

export interface ModGlossaryPrepareEntryForEditionOperationRequest {
    modGlossaryPrepareEntryForEditionRequest: ModGlossaryPrepareEntryForEditionRequest;
}

export interface ModGlossaryUpdateEntryOperationRequest {
    modGlossaryUpdateEntryRequest: ModGlossaryUpdateEntryRequest;
}

export interface ModGlossaryViewEntryRequest {
    modGlossaryGetEntryByIdRequest: ModGlossaryGetEntryByIdRequest;
}

export interface ModGlossaryViewGlossaryOperationRequest {
    modGlossaryViewGlossaryRequest: ModGlossaryViewGlossaryRequest;
}

/**
 * 
 */
export class ModGlossaryApi extends runtime.BaseAPI {

    /**
     * Add a new entry to a given glossary
     * Add a new entry to a given glossary
     */
    async modGlossaryAddEntryRaw(requestParameters: ModGlossaryAddEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryAddEntry200Response>> {
        if (requestParameters['modGlossaryAddEntryRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryAddEntryRequest',
                'Required parameter "modGlossaryAddEntryRequest" was null or undefined when calling modGlossaryAddEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_add_entry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryAddEntryRequestToJSON(requestParameters['modGlossaryAddEntryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryAddEntry200ResponseFromJSON(jsonValue));
    }

    /**
     * Add a new entry to a given glossary
     * Add a new entry to a given glossary
     */
    async modGlossaryAddEntry(requestParameters: ModGlossaryAddEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryAddEntry200Response> {
        const response = await this.modGlossaryAddEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the given entry from the glossary.
     * Delete the given entry from the glossary.
     */
    async modGlossaryDeleteEntryRaw(requestParameters: ModGlossaryDeleteEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreContentbankRenameContent200Response>> {
        if (requestParameters['modGlossaryDeleteEntryRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryDeleteEntryRequest',
                'Required parameter "modGlossaryDeleteEntryRequest" was null or undefined when calling modGlossaryDeleteEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_delete_entry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryDeleteEntryRequestToJSON(requestParameters['modGlossaryDeleteEntryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreContentbankRenameContent200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete the given entry from the glossary.
     * Delete the given entry from the glossary.
     */
    async modGlossaryDeleteEntry(requestParameters: ModGlossaryDeleteEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreContentbankRenameContent200Response> {
        const response = await this.modGlossaryDeleteEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the authors.
     * Get the authors.
     */
    async modGlossaryGetAuthorsRaw(requestParameters: ModGlossaryGetAuthorsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryGetAuthors200Response>> {
        if (requestParameters['modGlossaryGetAuthorsRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryGetAuthorsRequest',
                'Required parameter "modGlossaryGetAuthorsRequest" was null or undefined when calling modGlossaryGetAuthors().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_get_authors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryGetAuthorsRequestToJSON(requestParameters['modGlossaryGetAuthorsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryGetAuthors200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the authors.
     * Get the authors.
     */
    async modGlossaryGetAuthors(requestParameters: ModGlossaryGetAuthorsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryGetAuthors200Response> {
        const response = await this.modGlossaryGetAuthorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the categories.
     * Get the categories.
     */
    async modGlossaryGetCategoriesRaw(requestParameters: ModGlossaryGetCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryGetCategories200Response>> {
        if (requestParameters['modGlossaryGetCategoriesRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryGetCategoriesRequest',
                'Required parameter "modGlossaryGetCategoriesRequest" was null or undefined when calling modGlossaryGetCategories().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_get_categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryGetCategoriesRequestToJSON(requestParameters['modGlossaryGetCategoriesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryGetCategories200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the categories.
     * Get the categories.
     */
    async modGlossaryGetCategories(requestParameters: ModGlossaryGetCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryGetCategories200Response> {
        const response = await this.modGlossaryGetCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Browse entries by author.
     * Browse entries by author.
     */
    async modGlossaryGetEntriesByAuthorRaw(requestParameters: ModGlossaryGetEntriesByAuthorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryGetEntriesByAuthor200Response>> {
        if (requestParameters['modGlossaryGetEntriesByAuthorRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryGetEntriesByAuthorRequest',
                'Required parameter "modGlossaryGetEntriesByAuthorRequest" was null or undefined when calling modGlossaryGetEntriesByAuthor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_get_entries_by_author`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryGetEntriesByAuthorRequestToJSON(requestParameters['modGlossaryGetEntriesByAuthorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryGetEntriesByAuthor200ResponseFromJSON(jsonValue));
    }

    /**
     * Browse entries by author.
     * Browse entries by author.
     */
    async modGlossaryGetEntriesByAuthor(requestParameters: ModGlossaryGetEntriesByAuthorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryGetEntriesByAuthor200Response> {
        const response = await this.modGlossaryGetEntriesByAuthorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Browse entries by author ID.
     * Browse entries by author ID.
     */
    async modGlossaryGetEntriesByAuthorIdRaw(requestParameters: ModGlossaryGetEntriesByAuthorIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> {
        if (requestParameters['modGlossaryGetEntriesByAuthorIdRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryGetEntriesByAuthorIdRequest',
                'Required parameter "modGlossaryGetEntriesByAuthorIdRequest" was null or undefined when calling modGlossaryGetEntriesByAuthorId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_get_entries_by_author_id`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryGetEntriesByAuthorIdRequestToJSON(requestParameters['modGlossaryGetEntriesByAuthorIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryGetEntriesByAuthorId200ResponseFromJSON(jsonValue));
    }

    /**
     * Browse entries by author ID.
     * Browse entries by author ID.
     */
    async modGlossaryGetEntriesByAuthorId(requestParameters: ModGlossaryGetEntriesByAuthorIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryGetEntriesByAuthorId200Response> {
        const response = await this.modGlossaryGetEntriesByAuthorIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Browse entries by category.
     * Browse entries by category.
     */
    async modGlossaryGetEntriesByCategoryRaw(requestParameters: ModGlossaryGetEntriesByCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryGetEntriesByCategory200Response>> {
        if (requestParameters['modGlossaryGetEntriesByCategoryRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryGetEntriesByCategoryRequest',
                'Required parameter "modGlossaryGetEntriesByCategoryRequest" was null or undefined when calling modGlossaryGetEntriesByCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_get_entries_by_category`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryGetEntriesByCategoryRequestToJSON(requestParameters['modGlossaryGetEntriesByCategoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryGetEntriesByCategory200ResponseFromJSON(jsonValue));
    }

    /**
     * Browse entries by category.
     * Browse entries by category.
     */
    async modGlossaryGetEntriesByCategory(requestParameters: ModGlossaryGetEntriesByCategoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryGetEntriesByCategory200Response> {
        const response = await this.modGlossaryGetEntriesByCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Browse entries by date.
     * Browse entries by date.
     */
    async modGlossaryGetEntriesByDateRaw(requestParameters: ModGlossaryGetEntriesByDateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> {
        if (requestParameters['modGlossaryGetEntriesByDateRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryGetEntriesByDateRequest',
                'Required parameter "modGlossaryGetEntriesByDateRequest" was null or undefined when calling modGlossaryGetEntriesByDate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_get_entries_by_date`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryGetEntriesByDateRequestToJSON(requestParameters['modGlossaryGetEntriesByDateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryGetEntriesByAuthorId200ResponseFromJSON(jsonValue));
    }

    /**
     * Browse entries by date.
     * Browse entries by date.
     */
    async modGlossaryGetEntriesByDate(requestParameters: ModGlossaryGetEntriesByDateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryGetEntriesByAuthorId200Response> {
        const response = await this.modGlossaryGetEntriesByDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Browse entries by letter.
     * Browse entries by letter.
     */
    async modGlossaryGetEntriesByLetterRaw(requestParameters: ModGlossaryGetEntriesByLetterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> {
        if (requestParameters['modGlossaryGetEntriesByLetterRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryGetEntriesByLetterRequest',
                'Required parameter "modGlossaryGetEntriesByLetterRequest" was null or undefined when calling modGlossaryGetEntriesByLetter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_get_entries_by_letter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryGetEntriesByLetterRequestToJSON(requestParameters['modGlossaryGetEntriesByLetterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryGetEntriesByAuthorId200ResponseFromJSON(jsonValue));
    }

    /**
     * Browse entries by letter.
     * Browse entries by letter.
     */
    async modGlossaryGetEntriesByLetter(requestParameters: ModGlossaryGetEntriesByLetterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryGetEntriesByAuthorId200Response> {
        const response = await this.modGlossaryGetEntriesByLetterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Browse entries by search query.
     * Browse entries by search query.
     */
    async modGlossaryGetEntriesBySearchRaw(requestParameters: ModGlossaryGetEntriesBySearchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> {
        if (requestParameters['modGlossaryGetEntriesBySearchRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryGetEntriesBySearchRequest',
                'Required parameter "modGlossaryGetEntriesBySearchRequest" was null or undefined when calling modGlossaryGetEntriesBySearch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_get_entries_by_search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryGetEntriesBySearchRequestToJSON(requestParameters['modGlossaryGetEntriesBySearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryGetEntriesByAuthorId200ResponseFromJSON(jsonValue));
    }

    /**
     * Browse entries by search query.
     * Browse entries by search query.
     */
    async modGlossaryGetEntriesBySearch(requestParameters: ModGlossaryGetEntriesBySearchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryGetEntriesByAuthorId200Response> {
        const response = await this.modGlossaryGetEntriesBySearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Browse entries by term (concept or alias).
     * Browse entries by term (concept or alias).
     */
    async modGlossaryGetEntriesByTermRaw(requestParameters: ModGlossaryGetEntriesByTermOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> {
        if (requestParameters['modGlossaryGetEntriesByTermRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryGetEntriesByTermRequest',
                'Required parameter "modGlossaryGetEntriesByTermRequest" was null or undefined when calling modGlossaryGetEntriesByTerm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_get_entries_by_term`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryGetEntriesByTermRequestToJSON(requestParameters['modGlossaryGetEntriesByTermRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryGetEntriesByAuthorId200ResponseFromJSON(jsonValue));
    }

    /**
     * Browse entries by term (concept or alias).
     * Browse entries by term (concept or alias).
     */
    async modGlossaryGetEntriesByTerm(requestParameters: ModGlossaryGetEntriesByTermOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryGetEntriesByAuthorId200Response> {
        const response = await this.modGlossaryGetEntriesByTermRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Browse entries to be approved.
     * Browse entries to be approved.
     */
    async modGlossaryGetEntriesToApproveRaw(requestParameters: ModGlossaryGetEntriesToApproveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> {
        if (requestParameters['modGlossaryGetEntriesToApproveRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryGetEntriesToApproveRequest',
                'Required parameter "modGlossaryGetEntriesToApproveRequest" was null or undefined when calling modGlossaryGetEntriesToApprove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_get_entries_to_approve`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryGetEntriesToApproveRequestToJSON(requestParameters['modGlossaryGetEntriesToApproveRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryGetEntriesByAuthorId200ResponseFromJSON(jsonValue));
    }

    /**
     * Browse entries to be approved.
     * Browse entries to be approved.
     */
    async modGlossaryGetEntriesToApprove(requestParameters: ModGlossaryGetEntriesToApproveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryGetEntriesByAuthorId200Response> {
        const response = await this.modGlossaryGetEntriesToApproveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an entry by ID
     * Get an entry by ID
     */
    async modGlossaryGetEntryByIdRaw(requestParameters: ModGlossaryGetEntryByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryGetEntryById200Response>> {
        if (requestParameters['modGlossaryGetEntryByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryGetEntryByIdRequest',
                'Required parameter "modGlossaryGetEntryByIdRequest" was null or undefined when calling modGlossaryGetEntryById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_get_entry_by_id`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryGetEntryByIdRequestToJSON(requestParameters['modGlossaryGetEntryByIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryGetEntryById200ResponseFromJSON(jsonValue));
    }

    /**
     * Get an entry by ID
     * Get an entry by ID
     */
    async modGlossaryGetEntryById(requestParameters: ModGlossaryGetEntryByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryGetEntryById200Response> {
        const response = await this.modGlossaryGetEntryByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of glossaries from several courses.
     * Retrieve a list of glossaries from several courses.
     */
    async modGlossaryGetGlossariesByCoursesRaw(requestParameters: ModGlossaryGetGlossariesByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryGetGlossariesByCourses200Response>> {
        if (requestParameters['modChatGetChatsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatGetChatsByCoursesRequest',
                'Required parameter "modChatGetChatsByCoursesRequest" was null or undefined when calling modGlossaryGetGlossariesByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_get_glossaries_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatGetChatsByCoursesRequestToJSON(requestParameters['modChatGetChatsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryGetGlossariesByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of glossaries from several courses.
     * Retrieve a list of glossaries from several courses.
     */
    async modGlossaryGetGlossariesByCourses(requestParameters: ModGlossaryGetGlossariesByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryGetGlossariesByCourses200Response> {
        const response = await this.modGlossaryGetGlossariesByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prepares the given entry for edition returning draft item areas and file areas information.
     * Prepares the given entry for edition returning draft item areas and file areas information.
     */
    async modGlossaryPrepareEntryForEditionRaw(requestParameters: ModGlossaryPrepareEntryForEditionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryPrepareEntryForEdition200Response>> {
        if (requestParameters['modGlossaryPrepareEntryForEditionRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryPrepareEntryForEditionRequest',
                'Required parameter "modGlossaryPrepareEntryForEditionRequest" was null or undefined when calling modGlossaryPrepareEntryForEdition().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_prepare_entry_for_edition`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryPrepareEntryForEditionRequestToJSON(requestParameters['modGlossaryPrepareEntryForEditionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryPrepareEntryForEdition200ResponseFromJSON(jsonValue));
    }

    /**
     * Prepares the given entry for edition returning draft item areas and file areas information.
     * Prepares the given entry for edition returning draft item areas and file areas information.
     */
    async modGlossaryPrepareEntryForEdition(requestParameters: ModGlossaryPrepareEntryForEditionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryPrepareEntryForEdition200Response> {
        const response = await this.modGlossaryPrepareEntryForEditionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the given glossary entry.
     * Updates the given glossary entry.
     */
    async modGlossaryUpdateEntryRaw(requestParameters: ModGlossaryUpdateEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryUpdateEntry200Response>> {
        if (requestParameters['modGlossaryUpdateEntryRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryUpdateEntryRequest',
                'Required parameter "modGlossaryUpdateEntryRequest" was null or undefined when calling modGlossaryUpdateEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_update_entry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryUpdateEntryRequestToJSON(requestParameters['modGlossaryUpdateEntryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryUpdateEntry200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates the given glossary entry.
     * Updates the given glossary entry.
     */
    async modGlossaryUpdateEntry(requestParameters: ModGlossaryUpdateEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryUpdateEntry200Response> {
        const response = await this.modGlossaryUpdateEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Notify a glossary entry as being viewed.
     * Notify a glossary entry as being viewed.
     */
    async modGlossaryViewEntryRaw(requestParameters: ModGlossaryViewEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryViewEntry200Response>> {
        if (requestParameters['modGlossaryGetEntryByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryGetEntryByIdRequest',
                'Required parameter "modGlossaryGetEntryByIdRequest" was null or undefined when calling modGlossaryViewEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_view_entry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryGetEntryByIdRequestToJSON(requestParameters['modGlossaryGetEntryByIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryViewEntry200ResponseFromJSON(jsonValue));
    }

    /**
     * Notify a glossary entry as being viewed.
     * Notify a glossary entry as being viewed.
     */
    async modGlossaryViewEntry(requestParameters: ModGlossaryViewEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryViewEntry200Response> {
        const response = await this.modGlossaryViewEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Notify the glossary as being viewed.
     * Notify the glossary as being viewed.
     */
    async modGlossaryViewGlossaryRaw(requestParameters: ModGlossaryViewGlossaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModGlossaryViewGlossary200Response>> {
        if (requestParameters['modGlossaryViewGlossaryRequest'] == null) {
            throw new runtime.RequiredError(
                'modGlossaryViewGlossaryRequest',
                'Required parameter "modGlossaryViewGlossaryRequest" was null or undefined when calling modGlossaryViewGlossary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_glossary_view_glossary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModGlossaryViewGlossaryRequestToJSON(requestParameters['modGlossaryViewGlossaryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModGlossaryViewGlossary200ResponseFromJSON(jsonValue));
    }

    /**
     * Notify the glossary as being viewed.
     * Notify the glossary as being viewed.
     */
    async modGlossaryViewGlossary(requestParameters: ModGlossaryViewGlossaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModGlossaryViewGlossary200Response> {
        const response = await this.modGlossaryViewGlossaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
