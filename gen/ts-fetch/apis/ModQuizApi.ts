/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  ErrorResponse,
  ModChatGetChatsByCoursesRequest,
  ModQuizAddRandomQuestions200Response,
  ModQuizAddRandomQuestionsRequest,
  ModQuizGetAttemptAccessInformation200Response,
  ModQuizGetAttemptAccessInformationRequest,
  ModQuizGetAttemptData200Response,
  ModQuizGetAttemptDataRequest,
  ModQuizGetAttemptReview200Response,
  ModQuizGetAttemptReviewRequest,
  ModQuizGetAttemptSummary200Response,
  ModQuizGetAttemptSummaryRequest,
  ModQuizGetCombinedReviewOptions200Response,
  ModQuizGetCombinedReviewOptionsRequest,
  ModQuizGetQuizAccessInformation200Response,
  ModQuizGetQuizAccessInformationRequest,
  ModQuizGetQuizFeedbackForGrade200Response,
  ModQuizGetQuizFeedbackForGradeRequest,
  ModQuizGetQuizRequiredQtypes200Response,
  ModQuizGetQuizzesByCourses200Response,
  ModQuizGetReopenAttemptConfirmationRequest,
  ModQuizGetUserAttempts200Response,
  ModQuizGetUserAttemptsRequest,
  ModQuizGetUserBestGrade200Response,
  ModQuizGetUserBestGradeRequest,
  ModQuizProcessAttempt200Response,
  ModQuizProcessAttemptRequest,
  ModQuizReopenAttemptRequest,
  ModQuizSaveAttemptRequest,
  ModQuizSetQuestionVersion200Response,
  ModQuizSetQuestionVersionRequest,
  ModQuizStartAttempt200Response,
  ModQuizStartAttemptRequest,
  ModQuizUpdateFilterConditionRequest,
  ModQuizViewAttemptRequest,
  ModQuizViewAttemptReviewRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModChatGetChatsByCoursesRequestFromJSON,
    ModChatGetChatsByCoursesRequestToJSON,
    ModQuizAddRandomQuestions200ResponseFromJSON,
    ModQuizAddRandomQuestions200ResponseToJSON,
    ModQuizAddRandomQuestionsRequestFromJSON,
    ModQuizAddRandomQuestionsRequestToJSON,
    ModQuizGetAttemptAccessInformation200ResponseFromJSON,
    ModQuizGetAttemptAccessInformation200ResponseToJSON,
    ModQuizGetAttemptAccessInformationRequestFromJSON,
    ModQuizGetAttemptAccessInformationRequestToJSON,
    ModQuizGetAttemptData200ResponseFromJSON,
    ModQuizGetAttemptData200ResponseToJSON,
    ModQuizGetAttemptDataRequestFromJSON,
    ModQuizGetAttemptDataRequestToJSON,
    ModQuizGetAttemptReview200ResponseFromJSON,
    ModQuizGetAttemptReview200ResponseToJSON,
    ModQuizGetAttemptReviewRequestFromJSON,
    ModQuizGetAttemptReviewRequestToJSON,
    ModQuizGetAttemptSummary200ResponseFromJSON,
    ModQuizGetAttemptSummary200ResponseToJSON,
    ModQuizGetAttemptSummaryRequestFromJSON,
    ModQuizGetAttemptSummaryRequestToJSON,
    ModQuizGetCombinedReviewOptions200ResponseFromJSON,
    ModQuizGetCombinedReviewOptions200ResponseToJSON,
    ModQuizGetCombinedReviewOptionsRequestFromJSON,
    ModQuizGetCombinedReviewOptionsRequestToJSON,
    ModQuizGetQuizAccessInformation200ResponseFromJSON,
    ModQuizGetQuizAccessInformation200ResponseToJSON,
    ModQuizGetQuizAccessInformationRequestFromJSON,
    ModQuizGetQuizAccessInformationRequestToJSON,
    ModQuizGetQuizFeedbackForGrade200ResponseFromJSON,
    ModQuizGetQuizFeedbackForGrade200ResponseToJSON,
    ModQuizGetQuizFeedbackForGradeRequestFromJSON,
    ModQuizGetQuizFeedbackForGradeRequestToJSON,
    ModQuizGetQuizRequiredQtypes200ResponseFromJSON,
    ModQuizGetQuizRequiredQtypes200ResponseToJSON,
    ModQuizGetQuizzesByCourses200ResponseFromJSON,
    ModQuizGetQuizzesByCourses200ResponseToJSON,
    ModQuizGetReopenAttemptConfirmationRequestFromJSON,
    ModQuizGetReopenAttemptConfirmationRequestToJSON,
    ModQuizGetUserAttempts200ResponseFromJSON,
    ModQuizGetUserAttempts200ResponseToJSON,
    ModQuizGetUserAttemptsRequestFromJSON,
    ModQuizGetUserAttemptsRequestToJSON,
    ModQuizGetUserBestGrade200ResponseFromJSON,
    ModQuizGetUserBestGrade200ResponseToJSON,
    ModQuizGetUserBestGradeRequestFromJSON,
    ModQuizGetUserBestGradeRequestToJSON,
    ModQuizProcessAttempt200ResponseFromJSON,
    ModQuizProcessAttempt200ResponseToJSON,
    ModQuizProcessAttemptRequestFromJSON,
    ModQuizProcessAttemptRequestToJSON,
    ModQuizReopenAttemptRequestFromJSON,
    ModQuizReopenAttemptRequestToJSON,
    ModQuizSaveAttemptRequestFromJSON,
    ModQuizSaveAttemptRequestToJSON,
    ModQuizSetQuestionVersion200ResponseFromJSON,
    ModQuizSetQuestionVersion200ResponseToJSON,
    ModQuizSetQuestionVersionRequestFromJSON,
    ModQuizSetQuestionVersionRequestToJSON,
    ModQuizStartAttempt200ResponseFromJSON,
    ModQuizStartAttempt200ResponseToJSON,
    ModQuizStartAttemptRequestFromJSON,
    ModQuizStartAttemptRequestToJSON,
    ModQuizUpdateFilterConditionRequestFromJSON,
    ModQuizUpdateFilterConditionRequestToJSON,
    ModQuizViewAttemptRequestFromJSON,
    ModQuizViewAttemptRequestToJSON,
    ModQuizViewAttemptReviewRequestFromJSON,
    ModQuizViewAttemptReviewRequestToJSON,
} from '../models/index';

export interface ModQuizAddRandomQuestionsOperationRequest {
    modQuizAddRandomQuestionsRequest: ModQuizAddRandomQuestionsRequest;
}

export interface ModQuizGetAttemptAccessInformationOperationRequest {
    modQuizGetAttemptAccessInformationRequest: ModQuizGetAttemptAccessInformationRequest;
}

export interface ModQuizGetAttemptDataOperationRequest {
    modQuizGetAttemptDataRequest: ModQuizGetAttemptDataRequest;
}

export interface ModQuizGetAttemptReviewOperationRequest {
    modQuizGetAttemptReviewRequest: ModQuizGetAttemptReviewRequest;
}

export interface ModQuizGetAttemptSummaryOperationRequest {
    modQuizGetAttemptSummaryRequest: ModQuizGetAttemptSummaryRequest;
}

export interface ModQuizGetCombinedReviewOptionsOperationRequest {
    modQuizGetCombinedReviewOptionsRequest: ModQuizGetCombinedReviewOptionsRequest;
}

export interface ModQuizGetQuizAccessInformationOperationRequest {
    modQuizGetQuizAccessInformationRequest: ModQuizGetQuizAccessInformationRequest;
}

export interface ModQuizGetQuizFeedbackForGradeOperationRequest {
    modQuizGetQuizFeedbackForGradeRequest: ModQuizGetQuizFeedbackForGradeRequest;
}

export interface ModQuizGetQuizRequiredQtypesRequest {
    modQuizGetQuizAccessInformationRequest: ModQuizGetQuizAccessInformationRequest;
}

export interface ModQuizGetQuizzesByCoursesRequest {
    modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest;
}

export interface ModQuizGetReopenAttemptConfirmationOperationRequest {
    modQuizGetReopenAttemptConfirmationRequest: ModQuizGetReopenAttemptConfirmationRequest;
}

export interface ModQuizGetUserAttemptsOperationRequest {
    modQuizGetUserAttemptsRequest: ModQuizGetUserAttemptsRequest;
}

export interface ModQuizGetUserBestGradeOperationRequest {
    modQuizGetUserBestGradeRequest: ModQuizGetUserBestGradeRequest;
}

export interface ModQuizProcessAttemptOperationRequest {
    modQuizProcessAttemptRequest: ModQuizProcessAttemptRequest;
}

export interface ModQuizReopenAttemptOperationRequest {
    modQuizReopenAttemptRequest: ModQuizReopenAttemptRequest;
}

export interface ModQuizSaveAttemptOperationRequest {
    modQuizSaveAttemptRequest: ModQuizSaveAttemptRequest;
}

export interface ModQuizSetQuestionVersionOperationRequest {
    modQuizSetQuestionVersionRequest: ModQuizSetQuestionVersionRequest;
}

export interface ModQuizStartAttemptOperationRequest {
    modQuizStartAttemptRequest: ModQuizStartAttemptRequest;
}

export interface ModQuizUpdateFilterConditionOperationRequest {
    modQuizUpdateFilterConditionRequest: ModQuizUpdateFilterConditionRequest;
}

export interface ModQuizViewAttemptOperationRequest {
    modQuizViewAttemptRequest: ModQuizViewAttemptRequest;
}

export interface ModQuizViewAttemptReviewOperationRequest {
    modQuizViewAttemptReviewRequest: ModQuizViewAttemptReviewRequest;
}

export interface ModQuizViewAttemptSummaryRequest {
    modQuizGetAttemptSummaryRequest: ModQuizGetAttemptSummaryRequest;
}

export interface ModQuizViewQuizRequest {
    modQuizGetQuizAccessInformationRequest: ModQuizGetQuizAccessInformationRequest;
}

/**
 * 
 */
export class ModQuizApi extends runtime.BaseAPI {

    /**
     * Add a number of random questions to a quiz.
     * Add a number of random questions to a quiz.
     */
    async modQuizAddRandomQuestionsRaw(requestParameters: ModQuizAddRandomQuestionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizAddRandomQuestions200Response>> {
        if (requestParameters['modQuizAddRandomQuestionsRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizAddRandomQuestionsRequest',
                'Required parameter "modQuizAddRandomQuestionsRequest" was null or undefined when calling modQuizAddRandomQuestions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_add_random_questions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizAddRandomQuestionsRequestToJSON(requestParameters['modQuizAddRandomQuestionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizAddRandomQuestions200ResponseFromJSON(jsonValue));
    }

    /**
     * Add a number of random questions to a quiz.
     * Add a number of random questions to a quiz.
     */
    async modQuizAddRandomQuestions(requestParameters: ModQuizAddRandomQuestionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizAddRandomQuestions200Response> {
        const response = await this.modQuizAddRandomQuestionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return access information for a given attempt in a quiz.
     * Return access information for a given attempt in a quiz.
     */
    async modQuizGetAttemptAccessInformationRaw(requestParameters: ModQuizGetAttemptAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizGetAttemptAccessInformation200Response>> {
        if (requestParameters['modQuizGetAttemptAccessInformationRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizGetAttemptAccessInformationRequest',
                'Required parameter "modQuizGetAttemptAccessInformationRequest" was null or undefined when calling modQuizGetAttemptAccessInformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_get_attempt_access_information`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizGetAttemptAccessInformationRequestToJSON(requestParameters['modQuizGetAttemptAccessInformationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizGetAttemptAccessInformation200ResponseFromJSON(jsonValue));
    }

    /**
     * Return access information for a given attempt in a quiz.
     * Return access information for a given attempt in a quiz.
     */
    async modQuizGetAttemptAccessInformation(requestParameters: ModQuizGetAttemptAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizGetAttemptAccessInformation200Response> {
        const response = await this.modQuizGetAttemptAccessInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns information for the given attempt page for a quiz attempt in progress.
     * Returns information for the given attempt page for a quiz attempt in progress.
     */
    async modQuizGetAttemptDataRaw(requestParameters: ModQuizGetAttemptDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizGetAttemptData200Response>> {
        if (requestParameters['modQuizGetAttemptDataRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizGetAttemptDataRequest',
                'Required parameter "modQuizGetAttemptDataRequest" was null or undefined when calling modQuizGetAttemptData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_get_attempt_data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizGetAttemptDataRequestToJSON(requestParameters['modQuizGetAttemptDataRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizGetAttemptData200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns information for the given attempt page for a quiz attempt in progress.
     * Returns information for the given attempt page for a quiz attempt in progress.
     */
    async modQuizGetAttemptData(requestParameters: ModQuizGetAttemptDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizGetAttemptData200Response> {
        const response = await this.modQuizGetAttemptDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns review information for the given finished attempt, can be used by users or teachers.
     * Returns review information for the given finished attempt, can be used by users or teachers.
     */
    async modQuizGetAttemptReviewRaw(requestParameters: ModQuizGetAttemptReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizGetAttemptReview200Response>> {
        if (requestParameters['modQuizGetAttemptReviewRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizGetAttemptReviewRequest',
                'Required parameter "modQuizGetAttemptReviewRequest" was null or undefined when calling modQuizGetAttemptReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_get_attempt_review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizGetAttemptReviewRequestToJSON(requestParameters['modQuizGetAttemptReviewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizGetAttemptReview200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns review information for the given finished attempt, can be used by users or teachers.
     * Returns review information for the given finished attempt, can be used by users or teachers.
     */
    async modQuizGetAttemptReview(requestParameters: ModQuizGetAttemptReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizGetAttemptReview200Response> {
        const response = await this.modQuizGetAttemptReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a summary of a quiz attempt before it is submitted.
     * Returns a summary of a quiz attempt before it is submitted.
     */
    async modQuizGetAttemptSummaryRaw(requestParameters: ModQuizGetAttemptSummaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizGetAttemptSummary200Response>> {
        if (requestParameters['modQuizGetAttemptSummaryRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizGetAttemptSummaryRequest',
                'Required parameter "modQuizGetAttemptSummaryRequest" was null or undefined when calling modQuizGetAttemptSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_get_attempt_summary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizGetAttemptSummaryRequestToJSON(requestParameters['modQuizGetAttemptSummaryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizGetAttemptSummary200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a summary of a quiz attempt before it is submitted.
     * Returns a summary of a quiz attempt before it is submitted.
     */
    async modQuizGetAttemptSummary(requestParameters: ModQuizGetAttemptSummaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizGetAttemptSummary200Response> {
        const response = await this.modQuizGetAttemptSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Combines the review options from a number of different quiz attempts.
     * Combines the review options from a number of different quiz attempts.
     */
    async modQuizGetCombinedReviewOptionsRaw(requestParameters: ModQuizGetCombinedReviewOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizGetCombinedReviewOptions200Response>> {
        if (requestParameters['modQuizGetCombinedReviewOptionsRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizGetCombinedReviewOptionsRequest',
                'Required parameter "modQuizGetCombinedReviewOptionsRequest" was null or undefined when calling modQuizGetCombinedReviewOptions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_get_combined_review_options`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizGetCombinedReviewOptionsRequestToJSON(requestParameters['modQuizGetCombinedReviewOptionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizGetCombinedReviewOptions200ResponseFromJSON(jsonValue));
    }

    /**
     * Combines the review options from a number of different quiz attempts.
     * Combines the review options from a number of different quiz attempts.
     */
    async modQuizGetCombinedReviewOptions(requestParameters: ModQuizGetCombinedReviewOptionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizGetCombinedReviewOptions200Response> {
        const response = await this.modQuizGetCombinedReviewOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return access information for a given quiz.
     * Return access information for a given quiz.
     */
    async modQuizGetQuizAccessInformationRaw(requestParameters: ModQuizGetQuizAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizGetQuizAccessInformation200Response>> {
        if (requestParameters['modQuizGetQuizAccessInformationRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizGetQuizAccessInformationRequest',
                'Required parameter "modQuizGetQuizAccessInformationRequest" was null or undefined when calling modQuizGetQuizAccessInformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_get_quiz_access_information`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizGetQuizAccessInformationRequestToJSON(requestParameters['modQuizGetQuizAccessInformationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizGetQuizAccessInformation200ResponseFromJSON(jsonValue));
    }

    /**
     * Return access information for a given quiz.
     * Return access information for a given quiz.
     */
    async modQuizGetQuizAccessInformation(requestParameters: ModQuizGetQuizAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizGetQuizAccessInformation200Response> {
        const response = await this.modQuizGetQuizAccessInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     */
    async modQuizGetQuizFeedbackForGradeRaw(requestParameters: ModQuizGetQuizFeedbackForGradeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizGetQuizFeedbackForGrade200Response>> {
        if (requestParameters['modQuizGetQuizFeedbackForGradeRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizGetQuizFeedbackForGradeRequest',
                'Required parameter "modQuizGetQuizFeedbackForGradeRequest" was null or undefined when calling modQuizGetQuizFeedbackForGrade().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_get_quiz_feedback_for_grade`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizGetQuizFeedbackForGradeRequestToJSON(requestParameters['modQuizGetQuizFeedbackForGradeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizGetQuizFeedbackForGrade200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     */
    async modQuizGetQuizFeedbackForGrade(requestParameters: ModQuizGetQuizFeedbackForGradeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizGetQuizFeedbackForGrade200Response> {
        const response = await this.modQuizGetQuizFeedbackForGradeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the potential question types that would be required for a given quiz.
     * Return the potential question types that would be required for a given quiz.
     */
    async modQuizGetQuizRequiredQtypesRaw(requestParameters: ModQuizGetQuizRequiredQtypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizGetQuizRequiredQtypes200Response>> {
        if (requestParameters['modQuizGetQuizAccessInformationRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizGetQuizAccessInformationRequest',
                'Required parameter "modQuizGetQuizAccessInformationRequest" was null or undefined when calling modQuizGetQuizRequiredQtypes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_get_quiz_required_qtypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizGetQuizAccessInformationRequestToJSON(requestParameters['modQuizGetQuizAccessInformationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizGetQuizRequiredQtypes200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the potential question types that would be required for a given quiz.
     * Return the potential question types that would be required for a given quiz.
     */
    async modQuizGetQuizRequiredQtypes(requestParameters: ModQuizGetQuizRequiredQtypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizGetQuizRequiredQtypes200Response> {
        const response = await this.modQuizGetQuizRequiredQtypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     */
    async modQuizGetQuizzesByCoursesRaw(requestParameters: ModQuizGetQuizzesByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizGetQuizzesByCourses200Response>> {
        if (requestParameters['modChatGetChatsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatGetChatsByCoursesRequest',
                'Required parameter "modChatGetChatsByCoursesRequest" was null or undefined when calling modQuizGetQuizzesByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_get_quizzes_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatGetChatsByCoursesRequestToJSON(requestParameters['modChatGetChatsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizGetQuizzesByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     */
    async modQuizGetQuizzesByCourses(requestParameters: ModQuizGetQuizzesByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizGetQuizzesByCourses200Response> {
        const response = await this.modQuizGetQuizzesByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     */
    async modQuizGetReopenAttemptConfirmationRaw(requestParameters: ModQuizGetReopenAttemptConfirmationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modQuizGetReopenAttemptConfirmationRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizGetReopenAttemptConfirmationRequest',
                'Required parameter "modQuizGetReopenAttemptConfirmationRequest" was null or undefined when calling modQuizGetReopenAttemptConfirmation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_get_reopen_attempt_confirmation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizGetReopenAttemptConfirmationRequestToJSON(requestParameters['modQuizGetReopenAttemptConfirmationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     */
    async modQuizGetReopenAttemptConfirmation(requestParameters: ModQuizGetReopenAttemptConfirmationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modQuizGetReopenAttemptConfirmationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a list of attempts for the given quiz and user.
     * Return a list of attempts for the given quiz and user.
     */
    async modQuizGetUserAttemptsRaw(requestParameters: ModQuizGetUserAttemptsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizGetUserAttempts200Response>> {
        if (requestParameters['modQuizGetUserAttemptsRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizGetUserAttemptsRequest',
                'Required parameter "modQuizGetUserAttemptsRequest" was null or undefined when calling modQuizGetUserAttempts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_get_user_attempts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizGetUserAttemptsRequestToJSON(requestParameters['modQuizGetUserAttemptsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizGetUserAttempts200ResponseFromJSON(jsonValue));
    }

    /**
     * Return a list of attempts for the given quiz and user.
     * Return a list of attempts for the given quiz and user.
     */
    async modQuizGetUserAttempts(requestParameters: ModQuizGetUserAttemptsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizGetUserAttempts200Response> {
        const response = await this.modQuizGetUserAttemptsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the best current grade for the given user on a quiz.
     * Get the best current grade for the given user on a quiz.
     */
    async modQuizGetUserBestGradeRaw(requestParameters: ModQuizGetUserBestGradeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizGetUserBestGrade200Response>> {
        if (requestParameters['modQuizGetUserBestGradeRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizGetUserBestGradeRequest',
                'Required parameter "modQuizGetUserBestGradeRequest" was null or undefined when calling modQuizGetUserBestGrade().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_get_user_best_grade`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizGetUserBestGradeRequestToJSON(requestParameters['modQuizGetUserBestGradeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizGetUserBestGrade200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the best current grade for the given user on a quiz.
     * Get the best current grade for the given user on a quiz.
     */
    async modQuizGetUserBestGrade(requestParameters: ModQuizGetUserBestGradeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizGetUserBestGrade200Response> {
        const response = await this.modQuizGetUserBestGradeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     */
    async modQuizProcessAttemptRaw(requestParameters: ModQuizProcessAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizProcessAttempt200Response>> {
        if (requestParameters['modQuizProcessAttemptRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizProcessAttemptRequest',
                'Required parameter "modQuizProcessAttemptRequest" was null or undefined when calling modQuizProcessAttempt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_process_attempt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizProcessAttemptRequestToJSON(requestParameters['modQuizProcessAttemptRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizProcessAttempt200ResponseFromJSON(jsonValue));
    }

    /**
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     */
    async modQuizProcessAttempt(requestParameters: ModQuizProcessAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizProcessAttempt200Response> {
        const response = await this.modQuizProcessAttemptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Re-open an attempt that is currently in the never submitted state.
     * Re-open an attempt that is currently in the never submitted state.
     */
    async modQuizReopenAttemptRaw(requestParameters: ModQuizReopenAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modQuizReopenAttemptRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizReopenAttemptRequest',
                'Required parameter "modQuizReopenAttemptRequest" was null or undefined when calling modQuizReopenAttempt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_reopen_attempt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizReopenAttemptRequestToJSON(requestParameters['modQuizReopenAttemptRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Re-open an attempt that is currently in the never submitted state.
     * Re-open an attempt that is currently in the never submitted state.
     */
    async modQuizReopenAttempt(requestParameters: ModQuizReopenAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modQuizReopenAttemptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     */
    async modQuizSaveAttemptRaw(requestParameters: ModQuizSaveAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modQuizSaveAttemptRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizSaveAttemptRequest',
                'Required parameter "modQuizSaveAttemptRequest" was null or undefined when calling modQuizSaveAttempt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_save_attempt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizSaveAttemptRequestToJSON(requestParameters['modQuizSaveAttemptRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     */
    async modQuizSaveAttempt(requestParameters: ModQuizSaveAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modQuizSaveAttemptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the version of question that would be required for a given quiz.
     * Set the version of question that would be required for a given quiz.
     */
    async modQuizSetQuestionVersionRaw(requestParameters: ModQuizSetQuestionVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizSetQuestionVersion200Response>> {
        if (requestParameters['modQuizSetQuestionVersionRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizSetQuestionVersionRequest',
                'Required parameter "modQuizSetQuestionVersionRequest" was null or undefined when calling modQuizSetQuestionVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_set_question_version`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizSetQuestionVersionRequestToJSON(requestParameters['modQuizSetQuestionVersionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizSetQuestionVersion200ResponseFromJSON(jsonValue));
    }

    /**
     * Set the version of question that would be required for a given quiz.
     * Set the version of question that would be required for a given quiz.
     */
    async modQuizSetQuestionVersion(requestParameters: ModQuizSetQuestionVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizSetQuestionVersion200Response> {
        const response = await this.modQuizSetQuestionVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Starts a new attempt at a quiz.
     * Starts a new attempt at a quiz.
     */
    async modQuizStartAttemptRaw(requestParameters: ModQuizStartAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizStartAttempt200Response>> {
        if (requestParameters['modQuizStartAttemptRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizStartAttemptRequest',
                'Required parameter "modQuizStartAttemptRequest" was null or undefined when calling modQuizStartAttempt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_start_attempt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizStartAttemptRequestToJSON(requestParameters['modQuizStartAttemptRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizStartAttempt200ResponseFromJSON(jsonValue));
    }

    /**
     * Starts a new attempt at a quiz.
     * Starts a new attempt at a quiz.
     */
    async modQuizStartAttempt(requestParameters: ModQuizStartAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizStartAttempt200Response> {
        const response = await this.modQuizStartAttemptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update filter condition for a random question slot.
     * Update filter condition for a random question slot.
     */
    async modQuizUpdateFilterConditionRaw(requestParameters: ModQuizUpdateFilterConditionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModQuizAddRandomQuestions200Response>> {
        if (requestParameters['modQuizUpdateFilterConditionRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizUpdateFilterConditionRequest',
                'Required parameter "modQuizUpdateFilterConditionRequest" was null or undefined when calling modQuizUpdateFilterCondition().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_update_filter_condition`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizUpdateFilterConditionRequestToJSON(requestParameters['modQuizUpdateFilterConditionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModQuizAddRandomQuestions200ResponseFromJSON(jsonValue));
    }

    /**
     * Update filter condition for a random question slot.
     * Update filter condition for a random question slot.
     */
    async modQuizUpdateFilterCondition(requestParameters: ModQuizUpdateFilterConditionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModQuizAddRandomQuestions200Response> {
        const response = await this.modQuizUpdateFilterConditionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the attempt viewed event.
     * Trigger the attempt viewed event.
     */
    async modQuizViewAttemptRaw(requestParameters: ModQuizViewAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modQuizViewAttemptRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizViewAttemptRequest',
                'Required parameter "modQuizViewAttemptRequest" was null or undefined when calling modQuizViewAttempt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_view_attempt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizViewAttemptRequestToJSON(requestParameters['modQuizViewAttemptRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the attempt viewed event.
     * Trigger the attempt viewed event.
     */
    async modQuizViewAttempt(requestParameters: ModQuizViewAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modQuizViewAttemptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the attempt reviewed event.
     * Trigger the attempt reviewed event.
     */
    async modQuizViewAttemptReviewRaw(requestParameters: ModQuizViewAttemptReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modQuizViewAttemptReviewRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizViewAttemptReviewRequest',
                'Required parameter "modQuizViewAttemptReviewRequest" was null or undefined when calling modQuizViewAttemptReview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_view_attempt_review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizViewAttemptReviewRequestToJSON(requestParameters['modQuizViewAttemptReviewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the attempt reviewed event.
     * Trigger the attempt reviewed event.
     */
    async modQuizViewAttemptReview(requestParameters: ModQuizViewAttemptReviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modQuizViewAttemptReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the attempt summary viewed event.
     * Trigger the attempt summary viewed event.
     */
    async modQuizViewAttemptSummaryRaw(requestParameters: ModQuizViewAttemptSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modQuizGetAttemptSummaryRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizGetAttemptSummaryRequest',
                'Required parameter "modQuizGetAttemptSummaryRequest" was null or undefined when calling modQuizViewAttemptSummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_view_attempt_summary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizGetAttemptSummaryRequestToJSON(requestParameters['modQuizGetAttemptSummaryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the attempt summary viewed event.
     * Trigger the attempt summary viewed event.
     */
    async modQuizViewAttemptSummary(requestParameters: ModQuizViewAttemptSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modQuizViewAttemptSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modQuizViewQuizRaw(requestParameters: ModQuizViewQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modQuizGetQuizAccessInformationRequest'] == null) {
            throw new runtime.RequiredError(
                'modQuizGetQuizAccessInformationRequest',
                'Required parameter "modQuizGetQuizAccessInformationRequest" was null or undefined when calling modQuizViewQuiz().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_quiz_view_quiz`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModQuizGetQuizAccessInformationRequestToJSON(requestParameters['modQuizGetQuizAccessInformationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modQuizViewQuiz(requestParameters: ModQuizViewQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modQuizViewQuizRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
