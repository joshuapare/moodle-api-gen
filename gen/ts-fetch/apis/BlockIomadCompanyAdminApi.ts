/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlockIomadCompanyAdminAllocateLicensesRequest,
  BlockIomadCompanyAdminAssignCoursesRequest,
  BlockIomadCompanyAdminAssignUsers200Response,
  BlockIomadCompanyAdminAssignUsersRequest,
  BlockIomadCompanyAdminCapabilityDeleteTemplateRequest,
  BlockIomadCompanyAdminCheckToken200Response,
  BlockIomadCompanyAdminCheckTokenRequest,
  BlockIomadCompanyAdminCreateCompaniesRequest,
  BlockIomadCompanyAdminCreateLicensesRequest,
  BlockIomadCompanyAdminDeleteLicensesRequest,
  BlockIomadCompanyAdminEditCompaniesRequest,
  BlockIomadCompanyAdminEditLicensesRequest,
  BlockIomadCompanyAdminEnrolUsersRequest,
  BlockIomadCompanyAdminGetCompanies200Response,
  BlockIomadCompanyAdminGetCompaniesRequest,
  BlockIomadCompanyAdminGetCompanyCourses200Response,
  BlockIomadCompanyAdminGetCompanyCoursesRequest,
  BlockIomadCompanyAdminGetCourseInfoRequest,
  BlockIomadCompanyAdminGetDepartmentUsers200Response,
  BlockIomadCompanyAdminGetDepartmentUsersRequest,
  BlockIomadCompanyAdminGetDepartments200Response,
  BlockIomadCompanyAdminGetDepartmentsRequest,
  BlockIomadCompanyAdminGetLicenseFromId200Response,
  BlockIomadCompanyAdminGetLicenseFromIdRequest,
  BlockIomadCompanyAdminGetLicenseInfo200Response,
  BlockIomadCompanyAdminGetLicenseInfoRequest,
  BlockIomadCompanyAdminMoveUsersRequest,
  BlockIomadCompanyAdminRestrictCapabilityRequest,
  BlockIomadCompanyAdminSyncUsers200Response,
  BlockIomadCompanyAdminSyncUsersRequest,
  BlockIomadCompanyAdminUnallocateLicensesRequest,
  BlockIomadCompanyAdminUnassignCoursesRequest,
  BlockIomadCompanyAdminUnassignUsersRequest,
  BlockIomadCompanyAdminUpdateCoursesRequest,
  ErrorResponse,
} from '../models/index';
import {
    BlockIomadCompanyAdminAllocateLicensesRequestFromJSON,
    BlockIomadCompanyAdminAllocateLicensesRequestToJSON,
    BlockIomadCompanyAdminAssignCoursesRequestFromJSON,
    BlockIomadCompanyAdminAssignCoursesRequestToJSON,
    BlockIomadCompanyAdminAssignUsers200ResponseFromJSON,
    BlockIomadCompanyAdminAssignUsers200ResponseToJSON,
    BlockIomadCompanyAdminAssignUsersRequestFromJSON,
    BlockIomadCompanyAdminAssignUsersRequestToJSON,
    BlockIomadCompanyAdminCapabilityDeleteTemplateRequestFromJSON,
    BlockIomadCompanyAdminCapabilityDeleteTemplateRequestToJSON,
    BlockIomadCompanyAdminCheckToken200ResponseFromJSON,
    BlockIomadCompanyAdminCheckToken200ResponseToJSON,
    BlockIomadCompanyAdminCheckTokenRequestFromJSON,
    BlockIomadCompanyAdminCheckTokenRequestToJSON,
    BlockIomadCompanyAdminCreateCompaniesRequestFromJSON,
    BlockIomadCompanyAdminCreateCompaniesRequestToJSON,
    BlockIomadCompanyAdminCreateLicensesRequestFromJSON,
    BlockIomadCompanyAdminCreateLicensesRequestToJSON,
    BlockIomadCompanyAdminDeleteLicensesRequestFromJSON,
    BlockIomadCompanyAdminDeleteLicensesRequestToJSON,
    BlockIomadCompanyAdminEditCompaniesRequestFromJSON,
    BlockIomadCompanyAdminEditCompaniesRequestToJSON,
    BlockIomadCompanyAdminEditLicensesRequestFromJSON,
    BlockIomadCompanyAdminEditLicensesRequestToJSON,
    BlockIomadCompanyAdminEnrolUsersRequestFromJSON,
    BlockIomadCompanyAdminEnrolUsersRequestToJSON,
    BlockIomadCompanyAdminGetCompanies200ResponseFromJSON,
    BlockIomadCompanyAdminGetCompanies200ResponseToJSON,
    BlockIomadCompanyAdminGetCompaniesRequestFromJSON,
    BlockIomadCompanyAdminGetCompaniesRequestToJSON,
    BlockIomadCompanyAdminGetCompanyCourses200ResponseFromJSON,
    BlockIomadCompanyAdminGetCompanyCourses200ResponseToJSON,
    BlockIomadCompanyAdminGetCompanyCoursesRequestFromJSON,
    BlockIomadCompanyAdminGetCompanyCoursesRequestToJSON,
    BlockIomadCompanyAdminGetCourseInfoRequestFromJSON,
    BlockIomadCompanyAdminGetCourseInfoRequestToJSON,
    BlockIomadCompanyAdminGetDepartmentUsers200ResponseFromJSON,
    BlockIomadCompanyAdminGetDepartmentUsers200ResponseToJSON,
    BlockIomadCompanyAdminGetDepartmentUsersRequestFromJSON,
    BlockIomadCompanyAdminGetDepartmentUsersRequestToJSON,
    BlockIomadCompanyAdminGetDepartments200ResponseFromJSON,
    BlockIomadCompanyAdminGetDepartments200ResponseToJSON,
    BlockIomadCompanyAdminGetDepartmentsRequestFromJSON,
    BlockIomadCompanyAdminGetDepartmentsRequestToJSON,
    BlockIomadCompanyAdminGetLicenseFromId200ResponseFromJSON,
    BlockIomadCompanyAdminGetLicenseFromId200ResponseToJSON,
    BlockIomadCompanyAdminGetLicenseFromIdRequestFromJSON,
    BlockIomadCompanyAdminGetLicenseFromIdRequestToJSON,
    BlockIomadCompanyAdminGetLicenseInfo200ResponseFromJSON,
    BlockIomadCompanyAdminGetLicenseInfo200ResponseToJSON,
    BlockIomadCompanyAdminGetLicenseInfoRequestFromJSON,
    BlockIomadCompanyAdminGetLicenseInfoRequestToJSON,
    BlockIomadCompanyAdminMoveUsersRequestFromJSON,
    BlockIomadCompanyAdminMoveUsersRequestToJSON,
    BlockIomadCompanyAdminRestrictCapabilityRequestFromJSON,
    BlockIomadCompanyAdminRestrictCapabilityRequestToJSON,
    BlockIomadCompanyAdminSyncUsers200ResponseFromJSON,
    BlockIomadCompanyAdminSyncUsers200ResponseToJSON,
    BlockIomadCompanyAdminSyncUsersRequestFromJSON,
    BlockIomadCompanyAdminSyncUsersRequestToJSON,
    BlockIomadCompanyAdminUnallocateLicensesRequestFromJSON,
    BlockIomadCompanyAdminUnallocateLicensesRequestToJSON,
    BlockIomadCompanyAdminUnassignCoursesRequestFromJSON,
    BlockIomadCompanyAdminUnassignCoursesRequestToJSON,
    BlockIomadCompanyAdminUnassignUsersRequestFromJSON,
    BlockIomadCompanyAdminUnassignUsersRequestToJSON,
    BlockIomadCompanyAdminUpdateCoursesRequestFromJSON,
    BlockIomadCompanyAdminUpdateCoursesRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface BlockIomadCompanyAdminAllocateLicensesOperationRequest {
    blockIomadCompanyAdminAllocateLicensesRequest: BlockIomadCompanyAdminAllocateLicensesRequest;
}

export interface BlockIomadCompanyAdminAssignCoursesOperationRequest {
    blockIomadCompanyAdminAssignCoursesRequest: BlockIomadCompanyAdminAssignCoursesRequest;
}

export interface BlockIomadCompanyAdminAssignUsersOperationRequest {
    blockIomadCompanyAdminAssignUsersRequest: BlockIomadCompanyAdminAssignUsersRequest;
}

export interface BlockIomadCompanyAdminCapabilityDeleteTemplateOperationRequest {
    blockIomadCompanyAdminCapabilityDeleteTemplateRequest: BlockIomadCompanyAdminCapabilityDeleteTemplateRequest;
}

export interface BlockIomadCompanyAdminCheckTokenOperationRequest {
    blockIomadCompanyAdminCheckTokenRequest: BlockIomadCompanyAdminCheckTokenRequest;
}

export interface BlockIomadCompanyAdminCreateCompaniesOperationRequest {
    blockIomadCompanyAdminCreateCompaniesRequest: BlockIomadCompanyAdminCreateCompaniesRequest;
}

export interface BlockIomadCompanyAdminCreateLicensesOperationRequest {
    blockIomadCompanyAdminCreateLicensesRequest: BlockIomadCompanyAdminCreateLicensesRequest;
}

export interface BlockIomadCompanyAdminDeleteLicensesOperationRequest {
    blockIomadCompanyAdminDeleteLicensesRequest: BlockIomadCompanyAdminDeleteLicensesRequest;
}

export interface BlockIomadCompanyAdminEditCompaniesOperationRequest {
    blockIomadCompanyAdminEditCompaniesRequest: BlockIomadCompanyAdminEditCompaniesRequest;
}

export interface BlockIomadCompanyAdminEditLicensesOperationRequest {
    blockIomadCompanyAdminEditLicensesRequest: BlockIomadCompanyAdminEditLicensesRequest;
}

export interface BlockIomadCompanyAdminEnrolUsersOperationRequest {
    blockIomadCompanyAdminEnrolUsersRequest: BlockIomadCompanyAdminEnrolUsersRequest;
}

export interface BlockIomadCompanyAdminGetCompaniesOperationRequest {
    blockIomadCompanyAdminGetCompaniesRequest: BlockIomadCompanyAdminGetCompaniesRequest;
}

export interface BlockIomadCompanyAdminGetCompanyCoursesOperationRequest {
    blockIomadCompanyAdminGetCompanyCoursesRequest: BlockIomadCompanyAdminGetCompanyCoursesRequest;
}

export interface BlockIomadCompanyAdminGetCourseInfoOperationRequest {
    blockIomadCompanyAdminGetCourseInfoRequest: BlockIomadCompanyAdminGetCourseInfoRequest;
}

export interface BlockIomadCompanyAdminGetDepartmentUsersOperationRequest {
    blockIomadCompanyAdminGetDepartmentUsersRequest: BlockIomadCompanyAdminGetDepartmentUsersRequest;
}

export interface BlockIomadCompanyAdminGetDepartmentsOperationRequest {
    blockIomadCompanyAdminGetDepartmentsRequest: BlockIomadCompanyAdminGetDepartmentsRequest;
}

export interface BlockIomadCompanyAdminGetLicenseFromIdOperationRequest {
    blockIomadCompanyAdminGetLicenseFromIdRequest: BlockIomadCompanyAdminGetLicenseFromIdRequest;
}

export interface BlockIomadCompanyAdminGetLicenseInfoOperationRequest {
    blockIomadCompanyAdminGetLicenseInfoRequest: BlockIomadCompanyAdminGetLicenseInfoRequest;
}

export interface BlockIomadCompanyAdminMoveUsersOperationRequest {
    blockIomadCompanyAdminMoveUsersRequest: BlockIomadCompanyAdminMoveUsersRequest;
}

export interface BlockIomadCompanyAdminRestrictCapabilityOperationRequest {
    blockIomadCompanyAdminRestrictCapabilityRequest: BlockIomadCompanyAdminRestrictCapabilityRequest;
}

export interface BlockIomadCompanyAdminSyncUsersOperationRequest {
    blockIomadCompanyAdminSyncUsersRequest: BlockIomadCompanyAdminSyncUsersRequest;
}

export interface BlockIomadCompanyAdminUnallocateLicensesOperationRequest {
    blockIomadCompanyAdminUnallocateLicensesRequest: BlockIomadCompanyAdminUnallocateLicensesRequest;
}

export interface BlockIomadCompanyAdminUnassignCoursesOperationRequest {
    blockIomadCompanyAdminUnassignCoursesRequest: BlockIomadCompanyAdminUnassignCoursesRequest;
}

export interface BlockIomadCompanyAdminUnassignUsersOperationRequest {
    blockIomadCompanyAdminUnassignUsersRequest: BlockIomadCompanyAdminUnassignUsersRequest;
}

export interface BlockIomadCompanyAdminUpdateCoursesOperationRequest {
    blockIomadCompanyAdminUpdateCoursesRequest: BlockIomadCompanyAdminUpdateCoursesRequest;
}

/**
 * 
 */
export class BlockIomadCompanyAdminApi extends runtime.BaseAPI {

    /**
     * Allocate course licenses to a user
     * Allocate course licenses to a user
     */
    async blockIomadCompanyAdminAllocateLicensesRaw(requestParameters: BlockIomadCompanyAdminAllocateLicensesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminAllocateLicensesRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminAllocateLicensesRequest',
                'Required parameter "blockIomadCompanyAdminAllocateLicensesRequest" was null or undefined when calling blockIomadCompanyAdminAllocateLicenses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_allocate_licenses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminAllocateLicensesRequestToJSON(requestParameters['blockIomadCompanyAdminAllocateLicensesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Allocate course licenses to a user
     * Allocate course licenses to a user
     */
    async blockIomadCompanyAdminAllocateLicenses(requestParameters: BlockIomadCompanyAdminAllocateLicensesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminAllocateLicensesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign a course to a company
     * Assign a course to a company
     */
    async blockIomadCompanyAdminAssignCoursesRaw(requestParameters: BlockIomadCompanyAdminAssignCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminAssignCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminAssignCoursesRequest',
                'Required parameter "blockIomadCompanyAdminAssignCoursesRequest" was null or undefined when calling blockIomadCompanyAdminAssignCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_assign_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminAssignCoursesRequestToJSON(requestParameters['blockIomadCompanyAdminAssignCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Assign a course to a company
     * Assign a course to a company
     */
    async blockIomadCompanyAdminAssignCourses(requestParameters: BlockIomadCompanyAdminAssignCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminAssignCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign users to a company
     * Assign users to a company
     */
    async blockIomadCompanyAdminAssignUsersRaw(requestParameters: BlockIomadCompanyAdminAssignUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockIomadCompanyAdminAssignUsers200Response>> {
        if (requestParameters['blockIomadCompanyAdminAssignUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminAssignUsersRequest',
                'Required parameter "blockIomadCompanyAdminAssignUsersRequest" was null or undefined when calling blockIomadCompanyAdminAssignUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_assign_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminAssignUsersRequestToJSON(requestParameters['blockIomadCompanyAdminAssignUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockIomadCompanyAdminAssignUsers200ResponseFromJSON(jsonValue));
    }

    /**
     * Assign users to a company
     * Assign users to a company
     */
    async blockIomadCompanyAdminAssignUsers(requestParameters: BlockIomadCompanyAdminAssignUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockIomadCompanyAdminAssignUsers200Response> {
        const response = await this.blockIomadCompanyAdminAssignUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Iomad capabilities template
     * Delete Iomad capabilities template
     */
    async blockIomadCompanyAdminCapabilityDeleteTemplateRaw(requestParameters: BlockIomadCompanyAdminCapabilityDeleteTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminCapabilityDeleteTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminCapabilityDeleteTemplateRequest',
                'Required parameter "blockIomadCompanyAdminCapabilityDeleteTemplateRequest" was null or undefined when calling blockIomadCompanyAdminCapabilityDeleteTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_capability_delete_template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminCapabilityDeleteTemplateRequestToJSON(requestParameters['blockIomadCompanyAdminCapabilityDeleteTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete Iomad capabilities template
     * Delete Iomad capabilities template
     */
    async blockIomadCompanyAdminCapabilityDeleteTemplate(requestParameters: BlockIomadCompanyAdminCapabilityDeleteTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminCapabilityDeleteTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check SSO token
     * Check SSO token
     */
    async blockIomadCompanyAdminCheckTokenRaw(requestParameters: BlockIomadCompanyAdminCheckTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockIomadCompanyAdminCheckToken200Response>> {
        if (requestParameters['blockIomadCompanyAdminCheckTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminCheckTokenRequest',
                'Required parameter "blockIomadCompanyAdminCheckTokenRequest" was null or undefined when calling blockIomadCompanyAdminCheckToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_check_token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminCheckTokenRequestToJSON(requestParameters['blockIomadCompanyAdminCheckTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockIomadCompanyAdminCheckToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Check SSO token
     * Check SSO token
     */
    async blockIomadCompanyAdminCheckToken(requestParameters: BlockIomadCompanyAdminCheckTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockIomadCompanyAdminCheckToken200Response> {
        const response = await this.blockIomadCompanyAdminCheckTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new Iomad companies
     * Create new Iomad companies
     */
    async blockIomadCompanyAdminCreateCompaniesRaw(requestParameters: BlockIomadCompanyAdminCreateCompaniesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminCreateCompaniesRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminCreateCompaniesRequest',
                'Required parameter "blockIomadCompanyAdminCreateCompaniesRequest" was null or undefined when calling blockIomadCompanyAdminCreateCompanies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_create_companies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminCreateCompaniesRequestToJSON(requestParameters['blockIomadCompanyAdminCreateCompaniesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create new Iomad companies
     * Create new Iomad companies
     */
    async blockIomadCompanyAdminCreateCompanies(requestParameters: BlockIomadCompanyAdminCreateCompaniesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminCreateCompaniesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create company licenses
     * Create company licenses
     */
    async blockIomadCompanyAdminCreateLicensesRaw(requestParameters: BlockIomadCompanyAdminCreateLicensesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminCreateLicensesRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminCreateLicensesRequest',
                'Required parameter "blockIomadCompanyAdminCreateLicensesRequest" was null or undefined when calling blockIomadCompanyAdminCreateLicenses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_create_licenses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminCreateLicensesRequestToJSON(requestParameters['blockIomadCompanyAdminCreateLicensesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create company licenses
     * Create company licenses
     */
    async blockIomadCompanyAdminCreateLicenses(requestParameters: BlockIomadCompanyAdminCreateLicensesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminCreateLicensesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete company licenses
     * Delete company licenses
     */
    async blockIomadCompanyAdminDeleteLicensesRaw(requestParameters: BlockIomadCompanyAdminDeleteLicensesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminDeleteLicensesRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminDeleteLicensesRequest',
                'Required parameter "blockIomadCompanyAdminDeleteLicensesRequest" was null or undefined when calling blockIomadCompanyAdminDeleteLicenses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_delete_licenses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminDeleteLicensesRequestToJSON(requestParameters['blockIomadCompanyAdminDeleteLicensesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete company licenses
     * Delete company licenses
     */
    async blockIomadCompanyAdminDeleteLicenses(requestParameters: BlockIomadCompanyAdminDeleteLicensesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminDeleteLicensesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit Iomad companies
     * Edit Iomad companies
     */
    async blockIomadCompanyAdminEditCompaniesRaw(requestParameters: BlockIomadCompanyAdminEditCompaniesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminEditCompaniesRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminEditCompaniesRequest',
                'Required parameter "blockIomadCompanyAdminEditCompaniesRequest" was null or undefined when calling blockIomadCompanyAdminEditCompanies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_edit_companies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminEditCompaniesRequestToJSON(requestParameters['blockIomadCompanyAdminEditCompaniesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Edit Iomad companies
     * Edit Iomad companies
     */
    async blockIomadCompanyAdminEditCompanies(requestParameters: BlockIomadCompanyAdminEditCompaniesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminEditCompaniesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit company license settings
     * Edit company license settings
     */
    async blockIomadCompanyAdminEditLicensesRaw(requestParameters: BlockIomadCompanyAdminEditLicensesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminEditLicensesRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminEditLicensesRequest',
                'Required parameter "blockIomadCompanyAdminEditLicensesRequest" was null or undefined when calling blockIomadCompanyAdminEditLicenses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_edit_licenses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminEditLicensesRequestToJSON(requestParameters['blockIomadCompanyAdminEditLicensesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Edit company license settings
     * Edit company license settings
     */
    async blockIomadCompanyAdminEditLicenses(requestParameters: BlockIomadCompanyAdminEditLicensesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminEditLicensesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign users onto courses
     * Assign users onto courses
     */
    async blockIomadCompanyAdminEnrolUsersRaw(requestParameters: BlockIomadCompanyAdminEnrolUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminEnrolUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminEnrolUsersRequest',
                'Required parameter "blockIomadCompanyAdminEnrolUsersRequest" was null or undefined when calling blockIomadCompanyAdminEnrolUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_enrol_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminEnrolUsersRequestToJSON(requestParameters['blockIomadCompanyAdminEnrolUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Assign users onto courses
     * Assign users onto courses
     */
    async blockIomadCompanyAdminEnrolUsers(requestParameters: BlockIomadCompanyAdminEnrolUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminEnrolUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all Iomad companies
     * Get all Iomad companies
     */
    async blockIomadCompanyAdminGetCompaniesRaw(requestParameters: BlockIomadCompanyAdminGetCompaniesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockIomadCompanyAdminGetCompanies200Response>> {
        if (requestParameters['blockIomadCompanyAdminGetCompaniesRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminGetCompaniesRequest',
                'Required parameter "blockIomadCompanyAdminGetCompaniesRequest" was null or undefined when calling blockIomadCompanyAdminGetCompanies().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_get_companies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminGetCompaniesRequestToJSON(requestParameters['blockIomadCompanyAdminGetCompaniesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockIomadCompanyAdminGetCompanies200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all Iomad companies
     * Get all Iomad companies
     */
    async blockIomadCompanyAdminGetCompanies(requestParameters: BlockIomadCompanyAdminGetCompaniesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockIomadCompanyAdminGetCompanies200Response> {
        const response = await this.blockIomadCompanyAdminGetCompaniesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Iomad company course allocations
     * Get Iomad company course allocations
     */
    async blockIomadCompanyAdminGetCompanyCoursesRaw(requestParameters: BlockIomadCompanyAdminGetCompanyCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockIomadCompanyAdminGetCompanyCourses200Response>> {
        if (requestParameters['blockIomadCompanyAdminGetCompanyCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminGetCompanyCoursesRequest',
                'Required parameter "blockIomadCompanyAdminGetCompanyCoursesRequest" was null or undefined when calling blockIomadCompanyAdminGetCompanyCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_get_company_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminGetCompanyCoursesRequestToJSON(requestParameters['blockIomadCompanyAdminGetCompanyCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockIomadCompanyAdminGetCompanyCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Get Iomad company course allocations
     * Get Iomad company course allocations
     */
    async blockIomadCompanyAdminGetCompanyCourses(requestParameters: BlockIomadCompanyAdminGetCompanyCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockIomadCompanyAdminGetCompanyCourses200Response> {
        const response = await this.blockIomadCompanyAdminGetCompanyCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Iomad course settings
     * Get Iomad course settings
     */
    async blockIomadCompanyAdminGetCourseInfoRaw(requestParameters: BlockIomadCompanyAdminGetCourseInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminGetCourseInfoRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminGetCourseInfoRequest',
                'Required parameter "blockIomadCompanyAdminGetCourseInfoRequest" was null or undefined when calling blockIomadCompanyAdminGetCourseInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_get_course_info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminGetCourseInfoRequestToJSON(requestParameters['blockIomadCompanyAdminGetCourseInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Iomad course settings
     * Get Iomad course settings
     */
    async blockIomadCompanyAdminGetCourseInfo(requestParameters: BlockIomadCompanyAdminGetCourseInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminGetCourseInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get users within a department
     * Get users within a department
     */
    async blockIomadCompanyAdminGetDepartmentUsersRaw(requestParameters: BlockIomadCompanyAdminGetDepartmentUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockIomadCompanyAdminGetDepartmentUsers200Response>> {
        if (requestParameters['blockIomadCompanyAdminGetDepartmentUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminGetDepartmentUsersRequest',
                'Required parameter "blockIomadCompanyAdminGetDepartmentUsersRequest" was null or undefined when calling blockIomadCompanyAdminGetDepartmentUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_get_department_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminGetDepartmentUsersRequestToJSON(requestParameters['blockIomadCompanyAdminGetDepartmentUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockIomadCompanyAdminGetDepartmentUsers200ResponseFromJSON(jsonValue));
    }

    /**
     * Get users within a department
     * Get users within a department
     */
    async blockIomadCompanyAdminGetDepartmentUsers(requestParameters: BlockIomadCompanyAdminGetDepartmentUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockIomadCompanyAdminGetDepartmentUsers200Response> {
        const response = await this.blockIomadCompanyAdminGetDepartmentUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all company departments
     * Get all company departments
     */
    async blockIomadCompanyAdminGetDepartmentsRaw(requestParameters: BlockIomadCompanyAdminGetDepartmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockIomadCompanyAdminGetDepartments200Response>> {
        if (requestParameters['blockIomadCompanyAdminGetDepartmentsRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminGetDepartmentsRequest',
                'Required parameter "blockIomadCompanyAdminGetDepartmentsRequest" was null or undefined when calling blockIomadCompanyAdminGetDepartments().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_get_departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminGetDepartmentsRequestToJSON(requestParameters['blockIomadCompanyAdminGetDepartmentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockIomadCompanyAdminGetDepartments200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all company departments
     * Get all company departments
     */
    async blockIomadCompanyAdminGetDepartments(requestParameters: BlockIomadCompanyAdminGetDepartmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockIomadCompanyAdminGetDepartments200Response> {
        const response = await this.blockIomadCompanyAdminGetDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get licence data give the ID
     * Get licence data give the ID
     */
    async blockIomadCompanyAdminGetLicenseFromIdRaw(requestParameters: BlockIomadCompanyAdminGetLicenseFromIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockIomadCompanyAdminGetLicenseFromId200Response>> {
        if (requestParameters['blockIomadCompanyAdminGetLicenseFromIdRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminGetLicenseFromIdRequest',
                'Required parameter "blockIomadCompanyAdminGetLicenseFromIdRequest" was null or undefined when calling blockIomadCompanyAdminGetLicenseFromId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_get_license_from_id`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminGetLicenseFromIdRequestToJSON(requestParameters['blockIomadCompanyAdminGetLicenseFromIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockIomadCompanyAdminGetLicenseFromId200ResponseFromJSON(jsonValue));
    }

    /**
     * Get licence data give the ID
     * Get licence data give the ID
     */
    async blockIomadCompanyAdminGetLicenseFromId(requestParameters: BlockIomadCompanyAdminGetLicenseFromIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockIomadCompanyAdminGetLicenseFromId200Response> {
        const response = await this.blockIomadCompanyAdminGetLicenseFromIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get company license information
     * Get company license information
     */
    async blockIomadCompanyAdminGetLicenseInfoRaw(requestParameters: BlockIomadCompanyAdminGetLicenseInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockIomadCompanyAdminGetLicenseInfo200Response>> {
        if (requestParameters['blockIomadCompanyAdminGetLicenseInfoRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminGetLicenseInfoRequest',
                'Required parameter "blockIomadCompanyAdminGetLicenseInfoRequest" was null or undefined when calling blockIomadCompanyAdminGetLicenseInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_get_license_info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminGetLicenseInfoRequestToJSON(requestParameters['blockIomadCompanyAdminGetLicenseInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockIomadCompanyAdminGetLicenseInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Get company license information
     * Get company license information
     */
    async blockIomadCompanyAdminGetLicenseInfo(requestParameters: BlockIomadCompanyAdminGetLicenseInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockIomadCompanyAdminGetLicenseInfo200Response> {
        const response = await this.blockIomadCompanyAdminGetLicenseInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Move users between departments
     * Move users between departments
     */
    async blockIomadCompanyAdminMoveUsersRaw(requestParameters: BlockIomadCompanyAdminMoveUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminMoveUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminMoveUsersRequest',
                'Required parameter "blockIomadCompanyAdminMoveUsersRequest" was null or undefined when calling blockIomadCompanyAdminMoveUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_move_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminMoveUsersRequestToJSON(requestParameters['blockIomadCompanyAdminMoveUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Move users between departments
     * Move users between departments
     */
    async blockIomadCompanyAdminMoveUsers(requestParameters: BlockIomadCompanyAdminMoveUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminMoveUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * set/reset Iomad capability
     * set/reset Iomad capability
     */
    async blockIomadCompanyAdminRestrictCapabilityRaw(requestParameters: BlockIomadCompanyAdminRestrictCapabilityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminRestrictCapabilityRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminRestrictCapabilityRequest',
                'Required parameter "blockIomadCompanyAdminRestrictCapabilityRequest" was null or undefined when calling blockIomadCompanyAdminRestrictCapability().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_restrict_capability`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminRestrictCapabilityRequestToJSON(requestParameters['blockIomadCompanyAdminRestrictCapabilityRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * set/reset Iomad capability
     * set/reset Iomad capability
     */
    async blockIomadCompanyAdminRestrictCapability(requestParameters: BlockIomadCompanyAdminRestrictCapabilityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminRestrictCapabilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Call update users to sync to external system
     * Call update users to sync to external system
     */
    async blockIomadCompanyAdminSyncUsersRaw(requestParameters: BlockIomadCompanyAdminSyncUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockIomadCompanyAdminSyncUsers200Response>> {
        if (requestParameters['blockIomadCompanyAdminSyncUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminSyncUsersRequest',
                'Required parameter "blockIomadCompanyAdminSyncUsersRequest" was null or undefined when calling blockIomadCompanyAdminSyncUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_sync_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminSyncUsersRequestToJSON(requestParameters['blockIomadCompanyAdminSyncUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockIomadCompanyAdminSyncUsers200ResponseFromJSON(jsonValue));
    }

    /**
     * Call update users to sync to external system
     * Call update users to sync to external system
     */
    async blockIomadCompanyAdminSyncUsers(requestParameters: BlockIomadCompanyAdminSyncUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockIomadCompanyAdminSyncUsers200Response> {
        const response = await this.blockIomadCompanyAdminSyncUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove course licenses from users
     * Remove course licenses from users
     */
    async blockIomadCompanyAdminUnallocateLicensesRaw(requestParameters: BlockIomadCompanyAdminUnallocateLicensesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminUnallocateLicensesRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminUnallocateLicensesRequest',
                'Required parameter "blockIomadCompanyAdminUnallocateLicensesRequest" was null or undefined when calling blockIomadCompanyAdminUnallocateLicenses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_unallocate_licenses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminUnallocateLicensesRequestToJSON(requestParameters['blockIomadCompanyAdminUnallocateLicensesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove course licenses from users
     * Remove course licenses from users
     */
    async blockIomadCompanyAdminUnallocateLicenses(requestParameters: BlockIomadCompanyAdminUnallocateLicensesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminUnallocateLicensesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unassign a course from a company
     * Unassign a course from a company
     */
    async blockIomadCompanyAdminUnassignCoursesRaw(requestParameters: BlockIomadCompanyAdminUnassignCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminUnassignCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminUnassignCoursesRequest',
                'Required parameter "blockIomadCompanyAdminUnassignCoursesRequest" was null or undefined when calling blockIomadCompanyAdminUnassignCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_unassign_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminUnassignCoursesRequestToJSON(requestParameters['blockIomadCompanyAdminUnassignCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Unassign a course from a company
     * Unassign a course from a company
     */
    async blockIomadCompanyAdminUnassignCourses(requestParameters: BlockIomadCompanyAdminUnassignCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminUnassignCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unassign users from a company
     * Unassign users from a company
     */
    async blockIomadCompanyAdminUnassignUsersRaw(requestParameters: BlockIomadCompanyAdminUnassignUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminUnassignUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminUnassignUsersRequest',
                'Required parameter "blockIomadCompanyAdminUnassignUsersRequest" was null or undefined when calling blockIomadCompanyAdminUnassignUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_unassign_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminUnassignUsersRequestToJSON(requestParameters['blockIomadCompanyAdminUnassignUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Unassign users from a company
     * Unassign users from a company
     */
    async blockIomadCompanyAdminUnassignUsers(requestParameters: BlockIomadCompanyAdminUnassignUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminUnassignUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Iomad course settings
     * Update Iomad course settings
     */
    async blockIomadCompanyAdminUpdateCoursesRaw(requestParameters: BlockIomadCompanyAdminUpdateCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockIomadCompanyAdminUpdateCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'blockIomadCompanyAdminUpdateCoursesRequest',
                'Required parameter "blockIomadCompanyAdminUpdateCoursesRequest" was null or undefined when calling blockIomadCompanyAdminUpdateCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/block_iomad_company_admin_update_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockIomadCompanyAdminUpdateCoursesRequestToJSON(requestParameters['blockIomadCompanyAdminUpdateCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update Iomad course settings
     * Update Iomad course settings
     */
    async blockIomadCompanyAdminUpdateCourses(requestParameters: BlockIomadCompanyAdminUpdateCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blockIomadCompanyAdminUpdateCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
