/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EnrolMetaAddInstancesRequest,
  EnrolMetaDeleteInstancesRequest,
  ErrorResponse,
} from '../models/index';
import {
    EnrolMetaAddInstancesRequestFromJSON,
    EnrolMetaAddInstancesRequestToJSON,
    EnrolMetaDeleteInstancesRequestFromJSON,
    EnrolMetaDeleteInstancesRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface EnrolMetaAddInstancesOperationRequest {
    enrolMetaAddInstancesRequest: EnrolMetaAddInstancesRequest;
}

export interface EnrolMetaDeleteInstancesOperationRequest {
    enrolMetaDeleteInstancesRequest: EnrolMetaDeleteInstancesRequest;
}

/**
 * 
 */
export class EnrolMetaApi extends runtime.BaseAPI {

    /**
     * Add meta enrolment instances
     * Add meta enrolment instances
     */
    async enrolMetaAddInstancesRaw(requestParameters: EnrolMetaAddInstancesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['enrolMetaAddInstancesRequest'] == null) {
            throw new runtime.RequiredError(
                'enrolMetaAddInstancesRequest',
                'Required parameter "enrolMetaAddInstancesRequest" was null or undefined when calling enrolMetaAddInstances().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/enrol_meta_add_instances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnrolMetaAddInstancesRequestToJSON(requestParameters['enrolMetaAddInstancesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Add meta enrolment instances
     * Add meta enrolment instances
     */
    async enrolMetaAddInstances(requestParameters: EnrolMetaAddInstancesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.enrolMetaAddInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete meta enrolment instances
     * Delete meta enrolment instances
     */
    async enrolMetaDeleteInstancesRaw(requestParameters: EnrolMetaDeleteInstancesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['enrolMetaDeleteInstancesRequest'] == null) {
            throw new runtime.RequiredError(
                'enrolMetaDeleteInstancesRequest',
                'Required parameter "enrolMetaDeleteInstancesRequest" was null or undefined when calling enrolMetaDeleteInstances().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/enrol_meta_delete_instances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnrolMetaDeleteInstancesRequestToJSON(requestParameters['enrolMetaDeleteInstancesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete meta enrolment instances
     * Delete meta enrolment instances
     */
    async enrolMetaDeleteInstances(requestParameters: EnrolMetaDeleteInstancesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.enrolMetaDeleteInstancesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
