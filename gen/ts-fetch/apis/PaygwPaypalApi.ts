/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PaygwPaypalCreateTransactionComplete200Response,
  PaygwPaypalCreateTransactionCompleteRequest,
  PaygwPaypalGetConfigForJs200Response,
  PaygwPaypalGetConfigForJsRequest,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PaygwPaypalCreateTransactionComplete200ResponseFromJSON,
    PaygwPaypalCreateTransactionComplete200ResponseToJSON,
    PaygwPaypalCreateTransactionCompleteRequestFromJSON,
    PaygwPaypalCreateTransactionCompleteRequestToJSON,
    PaygwPaypalGetConfigForJs200ResponseFromJSON,
    PaygwPaypalGetConfigForJs200ResponseToJSON,
    PaygwPaypalGetConfigForJsRequestFromJSON,
    PaygwPaypalGetConfigForJsRequestToJSON,
} from '../models/index';

export interface PaygwPaypalCreateTransactionCompleteOperationRequest {
    paygwPaypalCreateTransactionCompleteRequest: PaygwPaypalCreateTransactionCompleteRequest;
}

export interface PaygwPaypalGetConfigForJsOperationRequest {
    paygwPaypalGetConfigForJsRequest: PaygwPaypalGetConfigForJsRequest;
}

/**
 * 
 */
export class PaygwPaypalApi extends runtime.BaseAPI {

    /**
     * Takes care of what needs to be done when a PayPal transaction comes back as complete.
     * Takes care of what needs to be done when a PayPal transaction comes back as complete.
     */
    async paygwPaypalCreateTransactionCompleteRaw(requestParameters: PaygwPaypalCreateTransactionCompleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaygwPaypalCreateTransactionComplete200Response>> {
        if (requestParameters['paygwPaypalCreateTransactionCompleteRequest'] == null) {
            throw new runtime.RequiredError(
                'paygwPaypalCreateTransactionCompleteRequest',
                'Required parameter "paygwPaypalCreateTransactionCompleteRequest" was null or undefined when calling paygwPaypalCreateTransactionComplete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/paygw_paypal_create_transaction_complete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaygwPaypalCreateTransactionCompleteRequestToJSON(requestParameters['paygwPaypalCreateTransactionCompleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaygwPaypalCreateTransactionComplete200ResponseFromJSON(jsonValue));
    }

    /**
     * Takes care of what needs to be done when a PayPal transaction comes back as complete.
     * Takes care of what needs to be done when a PayPal transaction comes back as complete.
     */
    async paygwPaypalCreateTransactionComplete(requestParameters: PaygwPaypalCreateTransactionCompleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaygwPaypalCreateTransactionComplete200Response> {
        const response = await this.paygwPaypalCreateTransactionCompleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the configuration settings to be used in js
     * Returns the configuration settings to be used in js
     */
    async paygwPaypalGetConfigForJsRaw(requestParameters: PaygwPaypalGetConfigForJsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaygwPaypalGetConfigForJs200Response>> {
        if (requestParameters['paygwPaypalGetConfigForJsRequest'] == null) {
            throw new runtime.RequiredError(
                'paygwPaypalGetConfigForJsRequest',
                'Required parameter "paygwPaypalGetConfigForJsRequest" was null or undefined when calling paygwPaypalGetConfigForJs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/paygw_paypal_get_config_for_js`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaygwPaypalGetConfigForJsRequestToJSON(requestParameters['paygwPaypalGetConfigForJsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaygwPaypalGetConfigForJs200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the configuration settings to be used in js
     * Returns the configuration settings to be used in js
     */
    async paygwPaypalGetConfigForJs(requestParameters: PaygwPaypalGetConfigForJsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaygwPaypalGetConfigForJs200Response> {
        const response = await this.paygwPaypalGetConfigForJsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
