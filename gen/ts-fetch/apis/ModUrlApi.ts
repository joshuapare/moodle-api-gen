/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  ErrorResponse,
  ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest,
  ModUrlGetUrlsByCourses200Response,
  ModUrlViewUrlRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestFromJSON,
    ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestToJSON,
    ModUrlGetUrlsByCourses200ResponseFromJSON,
    ModUrlGetUrlsByCourses200ResponseToJSON,
    ModUrlViewUrlRequestFromJSON,
    ModUrlViewUrlRequestToJSON,
} from '../models/index';

export interface ModUrlGetUrlsByCoursesRequest {
    modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;
}

export interface ModUrlViewUrlOperationRequest {
    modUrlViewUrlRequest: ModUrlViewUrlRequest;
}

/**
 * 
 */
export class ModUrlApi extends runtime.BaseAPI {

    /**
     * Returns a list of urls in a provided list of courses, if no list is provided all urls that the user                             can view will be returned.
     * Returns a list of urls in a provided list of courses, if no list is provided all urls that the user                             can view will be returned.
     */
    async modUrlGetUrlsByCoursesRaw(requestParameters: ModUrlGetUrlsByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModUrlGetUrlsByCourses200Response>> {
        if (requestParameters['modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest',
                'Required parameter "modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest" was null or undefined when calling modUrlGetUrlsByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_url_get_urls_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequestToJSON(requestParameters['modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModUrlGetUrlsByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of urls in a provided list of courses, if no list is provided all urls that the user                             can view will be returned.
     * Returns a list of urls in a provided list of courses, if no list is provided all urls that the user                             can view will be returned.
     */
    async modUrlGetUrlsByCourses(requestParameters: ModUrlGetUrlsByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModUrlGetUrlsByCourses200Response> {
        const response = await this.modUrlGetUrlsByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modUrlViewUrlRaw(requestParameters: ModUrlViewUrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modUrlViewUrlRequest'] == null) {
            throw new runtime.RequiredError(
                'modUrlViewUrlRequest',
                'Required parameter "modUrlViewUrlRequest" was null or undefined when calling modUrlViewUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_url_view_url`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModUrlViewUrlRequestToJSON(requestParameters['modUrlViewUrlRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modUrlViewUrl(requestParameters: ModUrlViewUrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modUrlViewUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
