/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EnrolLicenseEnrolUser200Response,
  EnrolLicenseEnrolUserRequest,
  EnrolLicenseGetInstanceInfo200Response,
  EnrolLicenseGetInstanceInfoRequest,
  ErrorResponse,
} from '../models/index';
import {
    EnrolLicenseEnrolUser200ResponseFromJSON,
    EnrolLicenseEnrolUser200ResponseToJSON,
    EnrolLicenseEnrolUserRequestFromJSON,
    EnrolLicenseEnrolUserRequestToJSON,
    EnrolLicenseGetInstanceInfo200ResponseFromJSON,
    EnrolLicenseGetInstanceInfo200ResponseToJSON,
    EnrolLicenseGetInstanceInfoRequestFromJSON,
    EnrolLicenseGetInstanceInfoRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface EnrolLicenseEnrolUserOperationRequest {
    enrolLicenseEnrolUserRequest: EnrolLicenseEnrolUserRequest;
}

export interface EnrolLicenseGetInstanceInfoOperationRequest {
    enrolLicenseGetInstanceInfoRequest: EnrolLicenseGetInstanceInfoRequest;
}

/**
 * 
 */
export class EnrolLicenseApi extends runtime.BaseAPI {

    /**
     * License enrol the current user in the given course.
     * License enrol the current user in the given course.
     */
    async enrolLicenseEnrolUserRaw(requestParameters: EnrolLicenseEnrolUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnrolLicenseEnrolUser200Response>> {
        if (requestParameters['enrolLicenseEnrolUserRequest'] == null) {
            throw new runtime.RequiredError(
                'enrolLicenseEnrolUserRequest',
                'Required parameter "enrolLicenseEnrolUserRequest" was null or undefined when calling enrolLicenseEnrolUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/enrol_license_enrol_user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnrolLicenseEnrolUserRequestToJSON(requestParameters['enrolLicenseEnrolUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrolLicenseEnrolUser200ResponseFromJSON(jsonValue));
    }

    /**
     * License enrol the current user in the given course.
     * License enrol the current user in the given course.
     */
    async enrolLicenseEnrolUser(requestParameters: EnrolLicenseEnrolUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnrolLicenseEnrolUser200Response> {
        const response = await this.enrolLicenseEnrolUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * License enrolment instance information.
     * License enrolment instance information.
     */
    async enrolLicenseGetInstanceInfoRaw(requestParameters: EnrolLicenseGetInstanceInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnrolLicenseGetInstanceInfo200Response>> {
        if (requestParameters['enrolLicenseGetInstanceInfoRequest'] == null) {
            throw new runtime.RequiredError(
                'enrolLicenseGetInstanceInfoRequest',
                'Required parameter "enrolLicenseGetInstanceInfoRequest" was null or undefined when calling enrolLicenseGetInstanceInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/enrol_license_get_instance_info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EnrolLicenseGetInstanceInfoRequestToJSON(requestParameters['enrolLicenseGetInstanceInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrolLicenseGetInstanceInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * License enrolment instance information.
     * License enrolment instance information.
     */
    async enrolLicenseGetInstanceInfo(requestParameters: EnrolLicenseGetInstanceInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnrolLicenseGetInstanceInfo200Response> {
        const response = await this.enrolLicenseGetInstanceInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
