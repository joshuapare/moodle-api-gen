/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  ErrorResponse,
  ModForumAddDiscussion200Response,
  ModForumAddDiscussionPost200Response,
  ModForumAddDiscussionPostRequest,
  ModForumAddDiscussionRequest,
  ModForumCanAddDiscussion200Response,
  ModForumCanAddDiscussionRequest,
  ModForumDeletePost200Response,
  ModForumDeletePostRequest,
  ModForumGetDiscussionPost200Response,
  ModForumGetDiscussionPostRequest,
  ModForumGetDiscussionPosts200Response,
  ModForumGetDiscussionPostsByUserid200Response,
  ModForumGetDiscussionPostsByUseridRequest,
  ModForumGetDiscussionPostsRequest,
  ModForumGetForumAccessInformation200Response,
  ModForumGetForumAccessInformationRequest,
  ModForumGetForumDiscussions200Response,
  ModForumGetForumDiscussionsPaginated200Response,
  ModForumGetForumDiscussionsPaginatedRequest,
  ModForumGetForumDiscussionsRequest,
  ModForumGetForumsByCoursesRequest,
  ModForumPrepareDraftAreaForPost200Response,
  ModForumPrepareDraftAreaForPostRequest,
  ModForumSetLockState200Response,
  ModForumSetLockStateRequest,
  ModForumSetPinState200Response,
  ModForumSetPinStateRequest,
  ModForumSetSubscriptionState200Response,
  ModForumSetSubscriptionStateRequest,
  ModForumToggleFavouriteStateRequest,
  ModForumUpdateDiscussionPost200Response,
  ModForumUpdateDiscussionPostRequest,
  ModForumViewForumDiscussionRequest,
  ModForumViewForumRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModForumAddDiscussion200ResponseFromJSON,
    ModForumAddDiscussion200ResponseToJSON,
    ModForumAddDiscussionPost200ResponseFromJSON,
    ModForumAddDiscussionPost200ResponseToJSON,
    ModForumAddDiscussionPostRequestFromJSON,
    ModForumAddDiscussionPostRequestToJSON,
    ModForumAddDiscussionRequestFromJSON,
    ModForumAddDiscussionRequestToJSON,
    ModForumCanAddDiscussion200ResponseFromJSON,
    ModForumCanAddDiscussion200ResponseToJSON,
    ModForumCanAddDiscussionRequestFromJSON,
    ModForumCanAddDiscussionRequestToJSON,
    ModForumDeletePost200ResponseFromJSON,
    ModForumDeletePost200ResponseToJSON,
    ModForumDeletePostRequestFromJSON,
    ModForumDeletePostRequestToJSON,
    ModForumGetDiscussionPost200ResponseFromJSON,
    ModForumGetDiscussionPost200ResponseToJSON,
    ModForumGetDiscussionPostRequestFromJSON,
    ModForumGetDiscussionPostRequestToJSON,
    ModForumGetDiscussionPosts200ResponseFromJSON,
    ModForumGetDiscussionPosts200ResponseToJSON,
    ModForumGetDiscussionPostsByUserid200ResponseFromJSON,
    ModForumGetDiscussionPostsByUserid200ResponseToJSON,
    ModForumGetDiscussionPostsByUseridRequestFromJSON,
    ModForumGetDiscussionPostsByUseridRequestToJSON,
    ModForumGetDiscussionPostsRequestFromJSON,
    ModForumGetDiscussionPostsRequestToJSON,
    ModForumGetForumAccessInformation200ResponseFromJSON,
    ModForumGetForumAccessInformation200ResponseToJSON,
    ModForumGetForumAccessInformationRequestFromJSON,
    ModForumGetForumAccessInformationRequestToJSON,
    ModForumGetForumDiscussions200ResponseFromJSON,
    ModForumGetForumDiscussions200ResponseToJSON,
    ModForumGetForumDiscussionsPaginated200ResponseFromJSON,
    ModForumGetForumDiscussionsPaginated200ResponseToJSON,
    ModForumGetForumDiscussionsPaginatedRequestFromJSON,
    ModForumGetForumDiscussionsPaginatedRequestToJSON,
    ModForumGetForumDiscussionsRequestFromJSON,
    ModForumGetForumDiscussionsRequestToJSON,
    ModForumGetForumsByCoursesRequestFromJSON,
    ModForumGetForumsByCoursesRequestToJSON,
    ModForumPrepareDraftAreaForPost200ResponseFromJSON,
    ModForumPrepareDraftAreaForPost200ResponseToJSON,
    ModForumPrepareDraftAreaForPostRequestFromJSON,
    ModForumPrepareDraftAreaForPostRequestToJSON,
    ModForumSetLockState200ResponseFromJSON,
    ModForumSetLockState200ResponseToJSON,
    ModForumSetLockStateRequestFromJSON,
    ModForumSetLockStateRequestToJSON,
    ModForumSetPinState200ResponseFromJSON,
    ModForumSetPinState200ResponseToJSON,
    ModForumSetPinStateRequestFromJSON,
    ModForumSetPinStateRequestToJSON,
    ModForumSetSubscriptionState200ResponseFromJSON,
    ModForumSetSubscriptionState200ResponseToJSON,
    ModForumSetSubscriptionStateRequestFromJSON,
    ModForumSetSubscriptionStateRequestToJSON,
    ModForumToggleFavouriteStateRequestFromJSON,
    ModForumToggleFavouriteStateRequestToJSON,
    ModForumUpdateDiscussionPost200ResponseFromJSON,
    ModForumUpdateDiscussionPost200ResponseToJSON,
    ModForumUpdateDiscussionPostRequestFromJSON,
    ModForumUpdateDiscussionPostRequestToJSON,
    ModForumViewForumDiscussionRequestFromJSON,
    ModForumViewForumDiscussionRequestToJSON,
    ModForumViewForumRequestFromJSON,
    ModForumViewForumRequestToJSON,
} from '../models/index';

export interface ModForumAddDiscussionOperationRequest {
    modForumAddDiscussionRequest: ModForumAddDiscussionRequest;
}

export interface ModForumAddDiscussionPostOperationRequest {
    modForumAddDiscussionPostRequest: ModForumAddDiscussionPostRequest;
}

export interface ModForumCanAddDiscussionOperationRequest {
    modForumCanAddDiscussionRequest: ModForumCanAddDiscussionRequest;
}

export interface ModForumDeletePostOperationRequest {
    modForumDeletePostRequest: ModForumDeletePostRequest;
}

export interface ModForumGetDiscussionPostOperationRequest {
    modForumGetDiscussionPostRequest: ModForumGetDiscussionPostRequest;
}

export interface ModForumGetDiscussionPostsOperationRequest {
    modForumGetDiscussionPostsRequest: ModForumGetDiscussionPostsRequest;
}

export interface ModForumGetDiscussionPostsByUseridOperationRequest {
    modForumGetDiscussionPostsByUseridRequest: ModForumGetDiscussionPostsByUseridRequest;
}

export interface ModForumGetForumAccessInformationOperationRequest {
    modForumGetForumAccessInformationRequest: ModForumGetForumAccessInformationRequest;
}

export interface ModForumGetForumDiscussionsOperationRequest {
    modForumGetForumDiscussionsRequest: ModForumGetForumDiscussionsRequest;
}

export interface ModForumGetForumDiscussionsPaginatedOperationRequest {
    modForumGetForumDiscussionsPaginatedRequest: ModForumGetForumDiscussionsPaginatedRequest;
}

export interface ModForumGetForumsByCoursesOperationRequest {
    modForumGetForumsByCoursesRequest: ModForumGetForumsByCoursesRequest;
}

export interface ModForumPrepareDraftAreaForPostOperationRequest {
    modForumPrepareDraftAreaForPostRequest: ModForumPrepareDraftAreaForPostRequest;
}

export interface ModForumSetLockStateOperationRequest {
    modForumSetLockStateRequest: ModForumSetLockStateRequest;
}

export interface ModForumSetPinStateOperationRequest {
    modForumSetPinStateRequest: ModForumSetPinStateRequest;
}

export interface ModForumSetSubscriptionStateOperationRequest {
    modForumSetSubscriptionStateRequest: ModForumSetSubscriptionStateRequest;
}

export interface ModForumToggleFavouriteStateOperationRequest {
    modForumToggleFavouriteStateRequest: ModForumToggleFavouriteStateRequest;
}

export interface ModForumUpdateDiscussionPostOperationRequest {
    modForumUpdateDiscussionPostRequest: ModForumUpdateDiscussionPostRequest;
}

export interface ModForumViewForumOperationRequest {
    modForumViewForumRequest: ModForumViewForumRequest;
}

export interface ModForumViewForumDiscussionOperationRequest {
    modForumViewForumDiscussionRequest: ModForumViewForumDiscussionRequest;
}

/**
 * 
 */
export class ModForumApi extends runtime.BaseAPI {

    /**
     * Add a new discussion into an existing forum.
     * Add a new discussion into an existing forum.
     */
    async modForumAddDiscussionRaw(requestParameters: ModForumAddDiscussionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumAddDiscussion200Response>> {
        if (requestParameters['modForumAddDiscussionRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumAddDiscussionRequest',
                'Required parameter "modForumAddDiscussionRequest" was null or undefined when calling modForumAddDiscussion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_add_discussion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumAddDiscussionRequestToJSON(requestParameters['modForumAddDiscussionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumAddDiscussion200ResponseFromJSON(jsonValue));
    }

    /**
     * Add a new discussion into an existing forum.
     * Add a new discussion into an existing forum.
     */
    async modForumAddDiscussion(requestParameters: ModForumAddDiscussionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumAddDiscussion200Response> {
        const response = await this.modForumAddDiscussionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new posts into an existing discussion.
     * Create new posts into an existing discussion.
     */
    async modForumAddDiscussionPostRaw(requestParameters: ModForumAddDiscussionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumAddDiscussionPost200Response>> {
        if (requestParameters['modForumAddDiscussionPostRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumAddDiscussionPostRequest',
                'Required parameter "modForumAddDiscussionPostRequest" was null or undefined when calling modForumAddDiscussionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_add_discussion_post`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumAddDiscussionPostRequestToJSON(requestParameters['modForumAddDiscussionPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumAddDiscussionPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create new posts into an existing discussion.
     * Create new posts into an existing discussion.
     */
    async modForumAddDiscussionPost(requestParameters: ModForumAddDiscussionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumAddDiscussionPost200Response> {
        const response = await this.modForumAddDiscussionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if the current user can add discussions in the given forum (and optionally for the given group).
     * Check if the current user can add discussions in the given forum (and optionally for the given group).
     */
    async modForumCanAddDiscussionRaw(requestParameters: ModForumCanAddDiscussionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumCanAddDiscussion200Response>> {
        if (requestParameters['modForumCanAddDiscussionRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumCanAddDiscussionRequest',
                'Required parameter "modForumCanAddDiscussionRequest" was null or undefined when calling modForumCanAddDiscussion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_can_add_discussion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumCanAddDiscussionRequestToJSON(requestParameters['modForumCanAddDiscussionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumCanAddDiscussion200ResponseFromJSON(jsonValue));
    }

    /**
     * Check if the current user can add discussions in the given forum (and optionally for the given group).
     * Check if the current user can add discussions in the given forum (and optionally for the given group).
     */
    async modForumCanAddDiscussion(requestParameters: ModForumCanAddDiscussionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumCanAddDiscussion200Response> {
        const response = await this.modForumCanAddDiscussionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a post or a discussion completely when the post is the discussion topic.
     * Deletes a post or a discussion completely when the post is the discussion topic.
     */
    async modForumDeletePostRaw(requestParameters: ModForumDeletePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumDeletePost200Response>> {
        if (requestParameters['modForumDeletePostRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumDeletePostRequest',
                'Required parameter "modForumDeletePostRequest" was null or undefined when calling modForumDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_delete_post`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumDeletePostRequestToJSON(requestParameters['modForumDeletePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumDeletePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a post or a discussion completely when the post is the discussion topic.
     * Deletes a post or a discussion completely when the post is the discussion topic.
     */
    async modForumDeletePost(requestParameters: ModForumDeletePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumDeletePost200Response> {
        const response = await this.modForumDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a particular discussion post.
     * Get a particular discussion post.
     */
    async modForumGetDiscussionPostRaw(requestParameters: ModForumGetDiscussionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumGetDiscussionPost200Response>> {
        if (requestParameters['modForumGetDiscussionPostRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumGetDiscussionPostRequest',
                'Required parameter "modForumGetDiscussionPostRequest" was null or undefined when calling modForumGetDiscussionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_get_discussion_post`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumGetDiscussionPostRequestToJSON(requestParameters['modForumGetDiscussionPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumGetDiscussionPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a particular discussion post.
     * Get a particular discussion post.
     */
    async modForumGetDiscussionPost(requestParameters: ModForumGetDiscussionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumGetDiscussionPost200Response> {
        const response = await this.modForumGetDiscussionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of forum posts for a discussion.
     * Returns a list of forum posts for a discussion.
     */
    async modForumGetDiscussionPostsRaw(requestParameters: ModForumGetDiscussionPostsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumGetDiscussionPosts200Response>> {
        if (requestParameters['modForumGetDiscussionPostsRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumGetDiscussionPostsRequest',
                'Required parameter "modForumGetDiscussionPostsRequest" was null or undefined when calling modForumGetDiscussionPosts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_get_discussion_posts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumGetDiscussionPostsRequestToJSON(requestParameters['modForumGetDiscussionPostsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumGetDiscussionPosts200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of forum posts for a discussion.
     * Returns a list of forum posts for a discussion.
     */
    async modForumGetDiscussionPosts(requestParameters: ModForumGetDiscussionPostsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumGetDiscussionPosts200Response> {
        const response = await this.modForumGetDiscussionPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of forum posts for a discussion for a user.
     * Returns a list of forum posts for a discussion for a user.
     */
    async modForumGetDiscussionPostsByUseridRaw(requestParameters: ModForumGetDiscussionPostsByUseridOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumGetDiscussionPostsByUserid200Response>> {
        if (requestParameters['modForumGetDiscussionPostsByUseridRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumGetDiscussionPostsByUseridRequest',
                'Required parameter "modForumGetDiscussionPostsByUseridRequest" was null or undefined when calling modForumGetDiscussionPostsByUserid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_get_discussion_posts_by_userid`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumGetDiscussionPostsByUseridRequestToJSON(requestParameters['modForumGetDiscussionPostsByUseridRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumGetDiscussionPostsByUserid200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of forum posts for a discussion for a user.
     * Returns a list of forum posts for a discussion for a user.
     */
    async modForumGetDiscussionPostsByUserid(requestParameters: ModForumGetDiscussionPostsByUseridOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumGetDiscussionPostsByUserid200Response> {
        const response = await this.modForumGetDiscussionPostsByUseridRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return capabilities information for a given forum.
     * Return capabilities information for a given forum.
     */
    async modForumGetForumAccessInformationRaw(requestParameters: ModForumGetForumAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumGetForumAccessInformation200Response>> {
        if (requestParameters['modForumGetForumAccessInformationRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumGetForumAccessInformationRequest',
                'Required parameter "modForumGetForumAccessInformationRequest" was null or undefined when calling modForumGetForumAccessInformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_get_forum_access_information`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumGetForumAccessInformationRequestToJSON(requestParameters['modForumGetForumAccessInformationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumGetForumAccessInformation200ResponseFromJSON(jsonValue));
    }

    /**
     * Return capabilities information for a given forum.
     * Return capabilities information for a given forum.
     */
    async modForumGetForumAccessInformation(requestParameters: ModForumGetForumAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumGetForumAccessInformation200Response> {
        const response = await this.modForumGetForumAccessInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of forum discussions optionally sorted and paginated.
     * Returns a list of forum discussions optionally sorted and paginated.
     */
    async modForumGetForumDiscussionsRaw(requestParameters: ModForumGetForumDiscussionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumGetForumDiscussions200Response>> {
        if (requestParameters['modForumGetForumDiscussionsRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumGetForumDiscussionsRequest',
                'Required parameter "modForumGetForumDiscussionsRequest" was null or undefined when calling modForumGetForumDiscussions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_get_forum_discussions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumGetForumDiscussionsRequestToJSON(requestParameters['modForumGetForumDiscussionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumGetForumDiscussions200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of forum discussions optionally sorted and paginated.
     * Returns a list of forum discussions optionally sorted and paginated.
     */
    async modForumGetForumDiscussions(requestParameters: ModForumGetForumDiscussionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumGetForumDiscussions200Response> {
        const response = await this.modForumGetForumDiscussionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
     */
    async modForumGetForumDiscussionsPaginatedRaw(requestParameters: ModForumGetForumDiscussionsPaginatedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumGetForumDiscussionsPaginated200Response>> {
        if (requestParameters['modForumGetForumDiscussionsPaginatedRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumGetForumDiscussionsPaginatedRequest',
                'Required parameter "modForumGetForumDiscussionsPaginatedRequest" was null or undefined when calling modForumGetForumDiscussionsPaginated().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_get_forum_discussions_paginated`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumGetForumDiscussionsPaginatedRequestToJSON(requestParameters['modForumGetForumDiscussionsPaginatedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumGetForumDiscussionsPaginated200ResponseFromJSON(jsonValue));
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
     */
    async modForumGetForumDiscussionsPaginated(requestParameters: ModForumGetForumDiscussionsPaginatedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumGetForumDiscussionsPaginated200Response> {
        const response = await this.modForumGetForumDiscussionsPaginatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
     */
    async modForumGetForumsByCoursesRaw(requestParameters: ModForumGetForumsByCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['modForumGetForumsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumGetForumsByCoursesRequest',
                'Required parameter "modForumGetForumsByCoursesRequest" was null or undefined when calling modForumGetForumsByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_get_forums_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumGetForumsByCoursesRequestToJSON(requestParameters['modForumGetForumsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
     */
    async modForumGetForumsByCourses(requestParameters: ModForumGetForumsByCoursesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.modForumGetForumsByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prepares a draft area for editing a post.
     * Prepares a draft area for editing a post.
     */
    async modForumPrepareDraftAreaForPostRaw(requestParameters: ModForumPrepareDraftAreaForPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumPrepareDraftAreaForPost200Response>> {
        if (requestParameters['modForumPrepareDraftAreaForPostRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumPrepareDraftAreaForPostRequest',
                'Required parameter "modForumPrepareDraftAreaForPostRequest" was null or undefined when calling modForumPrepareDraftAreaForPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_prepare_draft_area_for_post`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumPrepareDraftAreaForPostRequestToJSON(requestParameters['modForumPrepareDraftAreaForPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumPrepareDraftAreaForPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Prepares a draft area for editing a post.
     * Prepares a draft area for editing a post.
     */
    async modForumPrepareDraftAreaForPost(requestParameters: ModForumPrepareDraftAreaForPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumPrepareDraftAreaForPost200Response> {
        const response = await this.modForumPrepareDraftAreaForPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the lock state for the discussion
     * Set the lock state for the discussion
     */
    async modForumSetLockStateRaw(requestParameters: ModForumSetLockStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumSetLockState200Response>> {
        if (requestParameters['modForumSetLockStateRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumSetLockStateRequest',
                'Required parameter "modForumSetLockStateRequest" was null or undefined when calling modForumSetLockState().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_set_lock_state`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumSetLockStateRequestToJSON(requestParameters['modForumSetLockStateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumSetLockState200ResponseFromJSON(jsonValue));
    }

    /**
     * Set the lock state for the discussion
     * Set the lock state for the discussion
     */
    async modForumSetLockState(requestParameters: ModForumSetLockStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumSetLockState200Response> {
        const response = await this.modForumSetLockStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the pin state
     * Set the pin state
     */
    async modForumSetPinStateRaw(requestParameters: ModForumSetPinStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumSetPinState200Response>> {
        if (requestParameters['modForumSetPinStateRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumSetPinStateRequest',
                'Required parameter "modForumSetPinStateRequest" was null or undefined when calling modForumSetPinState().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_set_pin_state`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumSetPinStateRequestToJSON(requestParameters['modForumSetPinStateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumSetPinState200ResponseFromJSON(jsonValue));
    }

    /**
     * Set the pin state
     * Set the pin state
     */
    async modForumSetPinState(requestParameters: ModForumSetPinStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumSetPinState200Response> {
        const response = await this.modForumSetPinStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the subscription state
     * Set the subscription state
     */
    async modForumSetSubscriptionStateRaw(requestParameters: ModForumSetSubscriptionStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumSetSubscriptionState200Response>> {
        if (requestParameters['modForumSetSubscriptionStateRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumSetSubscriptionStateRequest',
                'Required parameter "modForumSetSubscriptionStateRequest" was null or undefined when calling modForumSetSubscriptionState().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_set_subscription_state`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumSetSubscriptionStateRequestToJSON(requestParameters['modForumSetSubscriptionStateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumSetSubscriptionState200ResponseFromJSON(jsonValue));
    }

    /**
     * Set the subscription state
     * Set the subscription state
     */
    async modForumSetSubscriptionState(requestParameters: ModForumSetSubscriptionStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumSetSubscriptionState200Response> {
        const response = await this.modForumSetSubscriptionStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle the favourite state
     * Toggle the favourite state
     */
    async modForumToggleFavouriteStateRaw(requestParameters: ModForumToggleFavouriteStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumSetSubscriptionState200Response>> {
        if (requestParameters['modForumToggleFavouriteStateRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumToggleFavouriteStateRequest',
                'Required parameter "modForumToggleFavouriteStateRequest" was null or undefined when calling modForumToggleFavouriteState().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_toggle_favourite_state`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumToggleFavouriteStateRequestToJSON(requestParameters['modForumToggleFavouriteStateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumSetSubscriptionState200ResponseFromJSON(jsonValue));
    }

    /**
     * Toggle the favourite state
     * Toggle the favourite state
     */
    async modForumToggleFavouriteState(requestParameters: ModForumToggleFavouriteStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumSetSubscriptionState200Response> {
        const response = await this.modForumToggleFavouriteStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a post or a discussion topic post.
     * Updates a post or a discussion topic post.
     */
    async modForumUpdateDiscussionPostRaw(requestParameters: ModForumUpdateDiscussionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModForumUpdateDiscussionPost200Response>> {
        if (requestParameters['modForumUpdateDiscussionPostRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumUpdateDiscussionPostRequest',
                'Required parameter "modForumUpdateDiscussionPostRequest" was null or undefined when calling modForumUpdateDiscussionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_update_discussion_post`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumUpdateDiscussionPostRequestToJSON(requestParameters['modForumUpdateDiscussionPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModForumUpdateDiscussionPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a post or a discussion topic post.
     * Updates a post or a discussion topic post.
     */
    async modForumUpdateDiscussionPost(requestParameters: ModForumUpdateDiscussionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModForumUpdateDiscussionPost200Response> {
        const response = await this.modForumUpdateDiscussionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modForumViewForumRaw(requestParameters: ModForumViewForumOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modForumViewForumRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumViewForumRequest',
                'Required parameter "modForumViewForumRequest" was null or undefined when calling modForumViewForum().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_view_forum`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumViewForumRequestToJSON(requestParameters['modForumViewForumRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modForumViewForum(requestParameters: ModForumViewForumOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modForumViewForumRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the forum discussion viewed event.
     * Trigger the forum discussion viewed event.
     */
    async modForumViewForumDiscussionRaw(requestParameters: ModForumViewForumDiscussionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modForumViewForumDiscussionRequest'] == null) {
            throw new runtime.RequiredError(
                'modForumViewForumDiscussionRequest',
                'Required parameter "modForumViewForumDiscussionRequest" was null or undefined when calling modForumViewForumDiscussion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_forum_view_forum_discussion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModForumViewForumDiscussionRequestToJSON(requestParameters['modForumViewForumDiscussionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the forum discussion viewed event.
     * Trigger the forum discussion viewed event.
     */
    async modForumViewForumDiscussion(requestParameters: ModForumViewForumDiscussionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modForumViewForumDiscussionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
