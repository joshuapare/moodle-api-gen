/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCompetencyCompetencyViewedRequest,
  CoreCompetencyCompletePlanRequest,
  ErrorResponse,
  ToolLpDataForCompetenciesManagePage200Response,
  ToolLpDataForCompetenciesManagePageRequest,
  ToolLpDataForCompetencyFrameworksManagePage200Response,
  ToolLpDataForCompetencyFrameworksManagePageRequest,
  ToolLpDataForCompetencySummary200Response,
  ToolLpDataForCompetencySummaryRequest,
  ToolLpDataForCourseCompetenciesPage200Response,
  ToolLpDataForCourseCompetenciesPageRequest,
  ToolLpDataForPlanPage200Response,
  ToolLpDataForPlansPage200Response,
  ToolLpDataForPlansPageRequest,
  ToolLpDataForRelatedCompetenciesSection200Response,
  ToolLpDataForRelatedCompetenciesSectionRequest,
  ToolLpDataForTemplateCompetenciesPage200Response,
  ToolLpDataForTemplateCompetenciesPageRequest,
  ToolLpDataForTemplatesManagePage200Response,
  ToolLpDataForUserCompetencySummary200Response,
  ToolLpDataForUserCompetencySummaryInCourse200Response,
  ToolLpDataForUserCompetencySummaryInCourseRequest,
  ToolLpDataForUserCompetencySummaryInPlan200Response,
  ToolLpDataForUserCompetencySummaryInPlanRequest,
  ToolLpDataForUserCompetencySummaryRequest,
  ToolLpDataForUserEvidenceListPage200Response,
  ToolLpDataForUserEvidenceListPageRequest,
  ToolLpDataForUserEvidencePage200Response,
  ToolLpDataForUserEvidencePageRequest,
  ToolLpSearchCohorts200Response,
  ToolLpSearchCohortsRequest,
  ToolLpSearchUsers200Response,
  ToolLpSearchUsersRequest,
} from '../models/index';
import {
    CoreCompetencyCompetencyViewedRequestFromJSON,
    CoreCompetencyCompetencyViewedRequestToJSON,
    CoreCompetencyCompletePlanRequestFromJSON,
    CoreCompetencyCompletePlanRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ToolLpDataForCompetenciesManagePage200ResponseFromJSON,
    ToolLpDataForCompetenciesManagePage200ResponseToJSON,
    ToolLpDataForCompetenciesManagePageRequestFromJSON,
    ToolLpDataForCompetenciesManagePageRequestToJSON,
    ToolLpDataForCompetencyFrameworksManagePage200ResponseFromJSON,
    ToolLpDataForCompetencyFrameworksManagePage200ResponseToJSON,
    ToolLpDataForCompetencyFrameworksManagePageRequestFromJSON,
    ToolLpDataForCompetencyFrameworksManagePageRequestToJSON,
    ToolLpDataForCompetencySummary200ResponseFromJSON,
    ToolLpDataForCompetencySummary200ResponseToJSON,
    ToolLpDataForCompetencySummaryRequestFromJSON,
    ToolLpDataForCompetencySummaryRequestToJSON,
    ToolLpDataForCourseCompetenciesPage200ResponseFromJSON,
    ToolLpDataForCourseCompetenciesPage200ResponseToJSON,
    ToolLpDataForCourseCompetenciesPageRequestFromJSON,
    ToolLpDataForCourseCompetenciesPageRequestToJSON,
    ToolLpDataForPlanPage200ResponseFromJSON,
    ToolLpDataForPlanPage200ResponseToJSON,
    ToolLpDataForPlansPage200ResponseFromJSON,
    ToolLpDataForPlansPage200ResponseToJSON,
    ToolLpDataForPlansPageRequestFromJSON,
    ToolLpDataForPlansPageRequestToJSON,
    ToolLpDataForRelatedCompetenciesSection200ResponseFromJSON,
    ToolLpDataForRelatedCompetenciesSection200ResponseToJSON,
    ToolLpDataForRelatedCompetenciesSectionRequestFromJSON,
    ToolLpDataForRelatedCompetenciesSectionRequestToJSON,
    ToolLpDataForTemplateCompetenciesPage200ResponseFromJSON,
    ToolLpDataForTemplateCompetenciesPage200ResponseToJSON,
    ToolLpDataForTemplateCompetenciesPageRequestFromJSON,
    ToolLpDataForTemplateCompetenciesPageRequestToJSON,
    ToolLpDataForTemplatesManagePage200ResponseFromJSON,
    ToolLpDataForTemplatesManagePage200ResponseToJSON,
    ToolLpDataForUserCompetencySummary200ResponseFromJSON,
    ToolLpDataForUserCompetencySummary200ResponseToJSON,
    ToolLpDataForUserCompetencySummaryInCourse200ResponseFromJSON,
    ToolLpDataForUserCompetencySummaryInCourse200ResponseToJSON,
    ToolLpDataForUserCompetencySummaryInCourseRequestFromJSON,
    ToolLpDataForUserCompetencySummaryInCourseRequestToJSON,
    ToolLpDataForUserCompetencySummaryInPlan200ResponseFromJSON,
    ToolLpDataForUserCompetencySummaryInPlan200ResponseToJSON,
    ToolLpDataForUserCompetencySummaryInPlanRequestFromJSON,
    ToolLpDataForUserCompetencySummaryInPlanRequestToJSON,
    ToolLpDataForUserCompetencySummaryRequestFromJSON,
    ToolLpDataForUserCompetencySummaryRequestToJSON,
    ToolLpDataForUserEvidenceListPage200ResponseFromJSON,
    ToolLpDataForUserEvidenceListPage200ResponseToJSON,
    ToolLpDataForUserEvidenceListPageRequestFromJSON,
    ToolLpDataForUserEvidenceListPageRequestToJSON,
    ToolLpDataForUserEvidencePage200ResponseFromJSON,
    ToolLpDataForUserEvidencePage200ResponseToJSON,
    ToolLpDataForUserEvidencePageRequestFromJSON,
    ToolLpDataForUserEvidencePageRequestToJSON,
    ToolLpSearchCohorts200ResponseFromJSON,
    ToolLpSearchCohorts200ResponseToJSON,
    ToolLpSearchCohortsRequestFromJSON,
    ToolLpSearchCohortsRequestToJSON,
    ToolLpSearchUsers200ResponseFromJSON,
    ToolLpSearchUsers200ResponseToJSON,
    ToolLpSearchUsersRequestFromJSON,
    ToolLpSearchUsersRequestToJSON,
} from '../models/index';

export interface ToolLpDataForCompetenciesManagePageOperationRequest {
    toolLpDataForCompetenciesManagePageRequest: ToolLpDataForCompetenciesManagePageRequest;
}

export interface ToolLpDataForCompetencyFrameworksManagePageOperationRequest {
    toolLpDataForCompetencyFrameworksManagePageRequest: ToolLpDataForCompetencyFrameworksManagePageRequest;
}

export interface ToolLpDataForCompetencySummaryOperationRequest {
    toolLpDataForCompetencySummaryRequest: ToolLpDataForCompetencySummaryRequest;
}

export interface ToolLpDataForCourseCompetenciesPageOperationRequest {
    toolLpDataForCourseCompetenciesPageRequest: ToolLpDataForCourseCompetenciesPageRequest;
}

export interface ToolLpDataForPlanPageRequest {
    coreCompetencyCompletePlanRequest: CoreCompetencyCompletePlanRequest;
}

export interface ToolLpDataForPlansPageOperationRequest {
    toolLpDataForPlansPageRequest: ToolLpDataForPlansPageRequest;
}

export interface ToolLpDataForRelatedCompetenciesSectionOperationRequest {
    toolLpDataForRelatedCompetenciesSectionRequest: ToolLpDataForRelatedCompetenciesSectionRequest;
}

export interface ToolLpDataForTemplateCompetenciesPageOperationRequest {
    toolLpDataForTemplateCompetenciesPageRequest: ToolLpDataForTemplateCompetenciesPageRequest;
}

export interface ToolLpDataForTemplatesManagePageRequest {
    toolLpDataForCompetencyFrameworksManagePageRequest: ToolLpDataForCompetencyFrameworksManagePageRequest;
}

export interface ToolLpDataForUserCompetencySummaryOperationRequest {
    toolLpDataForUserCompetencySummaryRequest: ToolLpDataForUserCompetencySummaryRequest;
}

export interface ToolLpDataForUserCompetencySummaryInCourseOperationRequest {
    toolLpDataForUserCompetencySummaryInCourseRequest: ToolLpDataForUserCompetencySummaryInCourseRequest;
}

export interface ToolLpDataForUserCompetencySummaryInPlanOperationRequest {
    toolLpDataForUserCompetencySummaryInPlanRequest: ToolLpDataForUserCompetencySummaryInPlanRequest;
}

export interface ToolLpDataForUserEvidenceListPageOperationRequest {
    toolLpDataForUserEvidenceListPageRequest: ToolLpDataForUserEvidenceListPageRequest;
}

export interface ToolLpDataForUserEvidencePageOperationRequest {
    toolLpDataForUserEvidencePageRequest: ToolLpDataForUserEvidencePageRequest;
}

export interface ToolLpListCoursesUsingCompetencyRequest {
    coreCompetencyCompetencyViewedRequest: CoreCompetencyCompetencyViewedRequest;
}

export interface ToolLpSearchCohortsOperationRequest {
    toolLpSearchCohortsRequest: ToolLpSearchCohortsRequest;
}

export interface ToolLpSearchUsersOperationRequest {
    toolLpSearchUsersRequest: ToolLpSearchUsersRequest;
}

/**
 * 
 */
export class ToolLpApi extends runtime.BaseAPI {

    /**
     * Load the data for the competencies manage page template
     * Load the data for the competencies manage page template
     */
    async toolLpDataForCompetenciesManagePageRaw(requestParameters: ToolLpDataForCompetenciesManagePageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpDataForCompetenciesManagePage200Response>> {
        if (requestParameters['toolLpDataForCompetenciesManagePageRequest'] == null) {
            throw new runtime.RequiredError(
                'toolLpDataForCompetenciesManagePageRequest',
                'Required parameter "toolLpDataForCompetenciesManagePageRequest" was null or undefined when calling toolLpDataForCompetenciesManagePage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_data_for_competencies_manage_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolLpDataForCompetenciesManagePageRequestToJSON(requestParameters['toolLpDataForCompetenciesManagePageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpDataForCompetenciesManagePage200ResponseFromJSON(jsonValue));
    }

    /**
     * Load the data for the competencies manage page template
     * Load the data for the competencies manage page template
     */
    async toolLpDataForCompetenciesManagePage(requestParameters: ToolLpDataForCompetenciesManagePageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpDataForCompetenciesManagePage200Response> {
        const response = await this.toolLpDataForCompetenciesManagePageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load the data for the competency frameworks manage page template
     * Load the data for the competency frameworks manage page template
     */
    async toolLpDataForCompetencyFrameworksManagePageRaw(requestParameters: ToolLpDataForCompetencyFrameworksManagePageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpDataForCompetencyFrameworksManagePage200Response>> {
        if (requestParameters['toolLpDataForCompetencyFrameworksManagePageRequest'] == null) {
            throw new runtime.RequiredError(
                'toolLpDataForCompetencyFrameworksManagePageRequest',
                'Required parameter "toolLpDataForCompetencyFrameworksManagePageRequest" was null or undefined when calling toolLpDataForCompetencyFrameworksManagePage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_data_for_competency_frameworks_manage_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolLpDataForCompetencyFrameworksManagePageRequestToJSON(requestParameters['toolLpDataForCompetencyFrameworksManagePageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpDataForCompetencyFrameworksManagePage200ResponseFromJSON(jsonValue));
    }

    /**
     * Load the data for the competency frameworks manage page template
     * Load the data for the competency frameworks manage page template
     */
    async toolLpDataForCompetencyFrameworksManagePage(requestParameters: ToolLpDataForCompetencyFrameworksManagePageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpDataForCompetencyFrameworksManagePage200Response> {
        const response = await this.toolLpDataForCompetencyFrameworksManagePageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load competency data for summary template.
     * Load competency data for summary template.
     */
    async toolLpDataForCompetencySummaryRaw(requestParameters: ToolLpDataForCompetencySummaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpDataForCompetencySummary200Response>> {
        if (requestParameters['toolLpDataForCompetencySummaryRequest'] == null) {
            throw new runtime.RequiredError(
                'toolLpDataForCompetencySummaryRequest',
                'Required parameter "toolLpDataForCompetencySummaryRequest" was null or undefined when calling toolLpDataForCompetencySummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_data_for_competency_summary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolLpDataForCompetencySummaryRequestToJSON(requestParameters['toolLpDataForCompetencySummaryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpDataForCompetencySummary200ResponseFromJSON(jsonValue));
    }

    /**
     * Load competency data for summary template.
     * Load competency data for summary template.
     */
    async toolLpDataForCompetencySummary(requestParameters: ToolLpDataForCompetencySummaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpDataForCompetencySummary200Response> {
        const response = await this.toolLpDataForCompetencySummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load the data for the course competencies page template.
     * Load the data for the course competencies page template.
     */
    async toolLpDataForCourseCompetenciesPageRaw(requestParameters: ToolLpDataForCourseCompetenciesPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpDataForCourseCompetenciesPage200Response>> {
        if (requestParameters['toolLpDataForCourseCompetenciesPageRequest'] == null) {
            throw new runtime.RequiredError(
                'toolLpDataForCourseCompetenciesPageRequest',
                'Required parameter "toolLpDataForCourseCompetenciesPageRequest" was null or undefined when calling toolLpDataForCourseCompetenciesPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_data_for_course_competencies_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolLpDataForCourseCompetenciesPageRequestToJSON(requestParameters['toolLpDataForCourseCompetenciesPageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpDataForCourseCompetenciesPage200ResponseFromJSON(jsonValue));
    }

    /**
     * Load the data for the course competencies page template.
     * Load the data for the course competencies page template.
     */
    async toolLpDataForCourseCompetenciesPage(requestParameters: ToolLpDataForCourseCompetenciesPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpDataForCourseCompetenciesPage200Response> {
        const response = await this.toolLpDataForCourseCompetenciesPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load the data for the plan page template.
     * Load the data for the plan page template.
     */
    async toolLpDataForPlanPageRaw(requestParameters: ToolLpDataForPlanPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpDataForPlanPage200Response>> {
        if (requestParameters['coreCompetencyCompletePlanRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCompletePlanRequest',
                'Required parameter "coreCompetencyCompletePlanRequest" was null or undefined when calling toolLpDataForPlanPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_data_for_plan_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCompletePlanRequestToJSON(requestParameters['coreCompetencyCompletePlanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpDataForPlanPage200ResponseFromJSON(jsonValue));
    }

    /**
     * Load the data for the plan page template.
     * Load the data for the plan page template.
     */
    async toolLpDataForPlanPage(requestParameters: ToolLpDataForPlanPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpDataForPlanPage200Response> {
        const response = await this.toolLpDataForPlanPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load the data for the plans page template
     * Load the data for the plans page template
     */
    async toolLpDataForPlansPageRaw(requestParameters: ToolLpDataForPlansPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpDataForPlansPage200Response>> {
        if (requestParameters['toolLpDataForPlansPageRequest'] == null) {
            throw new runtime.RequiredError(
                'toolLpDataForPlansPageRequest',
                'Required parameter "toolLpDataForPlansPageRequest" was null or undefined when calling toolLpDataForPlansPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_data_for_plans_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolLpDataForPlansPageRequestToJSON(requestParameters['toolLpDataForPlansPageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpDataForPlansPage200ResponseFromJSON(jsonValue));
    }

    /**
     * Load the data for the plans page template
     * Load the data for the plans page template
     */
    async toolLpDataForPlansPage(requestParameters: ToolLpDataForPlansPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpDataForPlansPage200Response> {
        const response = await this.toolLpDataForPlansPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load the data for the related competencies template.
     * Load the data for the related competencies template.
     */
    async toolLpDataForRelatedCompetenciesSectionRaw(requestParameters: ToolLpDataForRelatedCompetenciesSectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpDataForRelatedCompetenciesSection200Response>> {
        if (requestParameters['toolLpDataForRelatedCompetenciesSectionRequest'] == null) {
            throw new runtime.RequiredError(
                'toolLpDataForRelatedCompetenciesSectionRequest',
                'Required parameter "toolLpDataForRelatedCompetenciesSectionRequest" was null or undefined when calling toolLpDataForRelatedCompetenciesSection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_data_for_related_competencies_section`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolLpDataForRelatedCompetenciesSectionRequestToJSON(requestParameters['toolLpDataForRelatedCompetenciesSectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpDataForRelatedCompetenciesSection200ResponseFromJSON(jsonValue));
    }

    /**
     * Load the data for the related competencies template.
     * Load the data for the related competencies template.
     */
    async toolLpDataForRelatedCompetenciesSection(requestParameters: ToolLpDataForRelatedCompetenciesSectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpDataForRelatedCompetenciesSection200Response> {
        const response = await this.toolLpDataForRelatedCompetenciesSectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load the data for the template competencies page template.
     * Load the data for the template competencies page template.
     */
    async toolLpDataForTemplateCompetenciesPageRaw(requestParameters: ToolLpDataForTemplateCompetenciesPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpDataForTemplateCompetenciesPage200Response>> {
        if (requestParameters['toolLpDataForTemplateCompetenciesPageRequest'] == null) {
            throw new runtime.RequiredError(
                'toolLpDataForTemplateCompetenciesPageRequest',
                'Required parameter "toolLpDataForTemplateCompetenciesPageRequest" was null or undefined when calling toolLpDataForTemplateCompetenciesPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_data_for_template_competencies_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolLpDataForTemplateCompetenciesPageRequestToJSON(requestParameters['toolLpDataForTemplateCompetenciesPageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpDataForTemplateCompetenciesPage200ResponseFromJSON(jsonValue));
    }

    /**
     * Load the data for the template competencies page template.
     * Load the data for the template competencies page template.
     */
    async toolLpDataForTemplateCompetenciesPage(requestParameters: ToolLpDataForTemplateCompetenciesPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpDataForTemplateCompetenciesPage200Response> {
        const response = await this.toolLpDataForTemplateCompetenciesPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load the data for the learning plan templates manage page template
     * Load the data for the learning plan templates manage page template
     */
    async toolLpDataForTemplatesManagePageRaw(requestParameters: ToolLpDataForTemplatesManagePageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpDataForTemplatesManagePage200Response>> {
        if (requestParameters['toolLpDataForCompetencyFrameworksManagePageRequest'] == null) {
            throw new runtime.RequiredError(
                'toolLpDataForCompetencyFrameworksManagePageRequest',
                'Required parameter "toolLpDataForCompetencyFrameworksManagePageRequest" was null or undefined when calling toolLpDataForTemplatesManagePage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_data_for_templates_manage_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolLpDataForCompetencyFrameworksManagePageRequestToJSON(requestParameters['toolLpDataForCompetencyFrameworksManagePageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpDataForTemplatesManagePage200ResponseFromJSON(jsonValue));
    }

    /**
     * Load the data for the learning plan templates manage page template
     * Load the data for the learning plan templates manage page template
     */
    async toolLpDataForTemplatesManagePage(requestParameters: ToolLpDataForTemplatesManagePageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpDataForTemplatesManagePage200Response> {
        const response = await this.toolLpDataForTemplatesManagePageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load a summary of a user competency.
     * Load a summary of a user competency.
     */
    async toolLpDataForUserCompetencySummaryRaw(requestParameters: ToolLpDataForUserCompetencySummaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpDataForUserCompetencySummary200Response>> {
        if (requestParameters['toolLpDataForUserCompetencySummaryRequest'] == null) {
            throw new runtime.RequiredError(
                'toolLpDataForUserCompetencySummaryRequest',
                'Required parameter "toolLpDataForUserCompetencySummaryRequest" was null or undefined when calling toolLpDataForUserCompetencySummary().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_data_for_user_competency_summary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolLpDataForUserCompetencySummaryRequestToJSON(requestParameters['toolLpDataForUserCompetencySummaryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpDataForUserCompetencySummary200ResponseFromJSON(jsonValue));
    }

    /**
     * Load a summary of a user competency.
     * Load a summary of a user competency.
     */
    async toolLpDataForUserCompetencySummary(requestParameters: ToolLpDataForUserCompetencySummaryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpDataForUserCompetencySummary200Response> {
        const response = await this.toolLpDataForUserCompetencySummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load a summary of a user competency.
     * Load a summary of a user competency.
     */
    async toolLpDataForUserCompetencySummaryInCourseRaw(requestParameters: ToolLpDataForUserCompetencySummaryInCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpDataForUserCompetencySummaryInCourse200Response>> {
        if (requestParameters['toolLpDataForUserCompetencySummaryInCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'toolLpDataForUserCompetencySummaryInCourseRequest',
                'Required parameter "toolLpDataForUserCompetencySummaryInCourseRequest" was null or undefined when calling toolLpDataForUserCompetencySummaryInCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_data_for_user_competency_summary_in_course`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolLpDataForUserCompetencySummaryInCourseRequestToJSON(requestParameters['toolLpDataForUserCompetencySummaryInCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpDataForUserCompetencySummaryInCourse200ResponseFromJSON(jsonValue));
    }

    /**
     * Load a summary of a user competency.
     * Load a summary of a user competency.
     */
    async toolLpDataForUserCompetencySummaryInCourse(requestParameters: ToolLpDataForUserCompetencySummaryInCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpDataForUserCompetencySummaryInCourse200Response> {
        const response = await this.toolLpDataForUserCompetencySummaryInCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load a summary of a user competency.
     * Load a summary of a user competency.
     */
    async toolLpDataForUserCompetencySummaryInPlanRaw(requestParameters: ToolLpDataForUserCompetencySummaryInPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpDataForUserCompetencySummaryInPlan200Response>> {
        if (requestParameters['toolLpDataForUserCompetencySummaryInPlanRequest'] == null) {
            throw new runtime.RequiredError(
                'toolLpDataForUserCompetencySummaryInPlanRequest',
                'Required parameter "toolLpDataForUserCompetencySummaryInPlanRequest" was null or undefined when calling toolLpDataForUserCompetencySummaryInPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_data_for_user_competency_summary_in_plan`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolLpDataForUserCompetencySummaryInPlanRequestToJSON(requestParameters['toolLpDataForUserCompetencySummaryInPlanRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpDataForUserCompetencySummaryInPlan200ResponseFromJSON(jsonValue));
    }

    /**
     * Load a summary of a user competency.
     * Load a summary of a user competency.
     */
    async toolLpDataForUserCompetencySummaryInPlan(requestParameters: ToolLpDataForUserCompetencySummaryInPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpDataForUserCompetencySummaryInPlan200Response> {
        const response = await this.toolLpDataForUserCompetencySummaryInPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load the data for the user evidence list page template
     * Load the data for the user evidence list page template
     */
    async toolLpDataForUserEvidenceListPageRaw(requestParameters: ToolLpDataForUserEvidenceListPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpDataForUserEvidenceListPage200Response>> {
        if (requestParameters['toolLpDataForUserEvidenceListPageRequest'] == null) {
            throw new runtime.RequiredError(
                'toolLpDataForUserEvidenceListPageRequest',
                'Required parameter "toolLpDataForUserEvidenceListPageRequest" was null or undefined when calling toolLpDataForUserEvidenceListPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_data_for_user_evidence_list_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolLpDataForUserEvidenceListPageRequestToJSON(requestParameters['toolLpDataForUserEvidenceListPageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpDataForUserEvidenceListPage200ResponseFromJSON(jsonValue));
    }

    /**
     * Load the data for the user evidence list page template
     * Load the data for the user evidence list page template
     */
    async toolLpDataForUserEvidenceListPage(requestParameters: ToolLpDataForUserEvidenceListPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpDataForUserEvidenceListPage200Response> {
        const response = await this.toolLpDataForUserEvidenceListPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Load the data for the user evidence page template
     * Load the data for the user evidence page template
     */
    async toolLpDataForUserEvidencePageRaw(requestParameters: ToolLpDataForUserEvidencePageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpDataForUserEvidencePage200Response>> {
        if (requestParameters['toolLpDataForUserEvidencePageRequest'] == null) {
            throw new runtime.RequiredError(
                'toolLpDataForUserEvidencePageRequest',
                'Required parameter "toolLpDataForUserEvidencePageRequest" was null or undefined when calling toolLpDataForUserEvidencePage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_data_for_user_evidence_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolLpDataForUserEvidencePageRequestToJSON(requestParameters['toolLpDataForUserEvidencePageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpDataForUserEvidencePage200ResponseFromJSON(jsonValue));
    }

    /**
     * Load the data for the user evidence page template
     * Load the data for the user evidence page template
     */
    async toolLpDataForUserEvidencePage(requestParameters: ToolLpDataForUserEvidencePageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpDataForUserEvidencePage200Response> {
        const response = await this.toolLpDataForUserEvidencePageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List the courses using a competency
     * List the courses using a competency
     */
    async toolLpListCoursesUsingCompetencyRaw(requestParameters: ToolLpListCoursesUsingCompetencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['coreCompetencyCompetencyViewedRequest'] == null) {
            throw new runtime.RequiredError(
                'coreCompetencyCompetencyViewedRequest',
                'Required parameter "coreCompetencyCompetencyViewedRequest" was null or undefined when calling toolLpListCoursesUsingCompetency().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_list_courses_using_competency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoreCompetencyCompetencyViewedRequestToJSON(requestParameters['coreCompetencyCompetencyViewedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List the courses using a competency
     * List the courses using a competency
     */
    async toolLpListCoursesUsingCompetency(requestParameters: ToolLpListCoursesUsingCompetencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.toolLpListCoursesUsingCompetencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for cohorts. This method is deprecated, please call \'core_cohort_search_cohorts\' instead
     * Search for cohorts. This method is deprecated, please call \'core_cohort_search_cohorts\' instead
     */
    async toolLpSearchCohortsRaw(requestParameters: ToolLpSearchCohortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpSearchCohorts200Response>> {
        if (requestParameters['toolLpSearchCohortsRequest'] == null) {
            throw new runtime.RequiredError(
                'toolLpSearchCohortsRequest',
                'Required parameter "toolLpSearchCohortsRequest" was null or undefined when calling toolLpSearchCohorts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_search_cohorts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolLpSearchCohortsRequestToJSON(requestParameters['toolLpSearchCohortsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpSearchCohorts200ResponseFromJSON(jsonValue));
    }

    /**
     * Search for cohorts. This method is deprecated, please call \'core_cohort_search_cohorts\' instead
     * Search for cohorts. This method is deprecated, please call \'core_cohort_search_cohorts\' instead
     */
    async toolLpSearchCohorts(requestParameters: ToolLpSearchCohortsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpSearchCohorts200Response> {
        const response = await this.toolLpSearchCohortsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for users.
     * Search for users.
     */
    async toolLpSearchUsersRaw(requestParameters: ToolLpSearchUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolLpSearchUsers200Response>> {
        if (requestParameters['toolLpSearchUsersRequest'] == null) {
            throw new runtime.RequiredError(
                'toolLpSearchUsersRequest',
                'Required parameter "toolLpSearchUsersRequest" was null or undefined when calling toolLpSearchUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/tool_lp_search_users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolLpSearchUsersRequestToJSON(requestParameters['toolLpSearchUsersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolLpSearchUsers200ResponseFromJSON(jsonValue));
    }

    /**
     * Search for users.
     * Search for users.
     */
    async toolLpSearchUsers(requestParameters: ToolLpSearchUsersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolLpSearchUsers200Response> {
        const response = await this.toolLpSearchUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
