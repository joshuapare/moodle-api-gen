/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  ErrorResponse,
  ModChatGetChatsByCoursesRequest,
  ModLessonFinishAttempt200Response,
  ModLessonFinishAttemptRequest,
  ModLessonGetAttemptsOverview200Response,
  ModLessonGetAttemptsOverviewRequest,
  ModLessonGetContentPagesViewed200Response,
  ModLessonGetContentPagesViewedRequest,
  ModLessonGetLesson200Response,
  ModLessonGetLessonAccessInformation200Response,
  ModLessonGetLessonAccessInformationRequest,
  ModLessonGetLessonRequest,
  ModLessonGetLessonsByCourses200Response,
  ModLessonGetPageData200Response,
  ModLessonGetPageDataRequest,
  ModLessonGetPages200Response,
  ModLessonGetPagesPossibleJumps200Response,
  ModLessonGetPagesRequest,
  ModLessonGetQuestionsAttempts200Response,
  ModLessonGetQuestionsAttemptsRequest,
  ModLessonGetUserAttempt200Response,
  ModLessonGetUserAttemptGrade200Response,
  ModLessonGetUserAttemptGradeRequest,
  ModLessonGetUserAttemptRequest,
  ModLessonGetUserGrade200Response,
  ModLessonGetUserGradeRequest,
  ModLessonGetUserTimers200Response,
  ModLessonLaunchAttempt200Response,
  ModLessonLaunchAttemptRequest,
  ModLessonProcessPage200Response,
  ModLessonProcessPageRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModChatGetChatsByCoursesRequestFromJSON,
    ModChatGetChatsByCoursesRequestToJSON,
    ModLessonFinishAttempt200ResponseFromJSON,
    ModLessonFinishAttempt200ResponseToJSON,
    ModLessonFinishAttemptRequestFromJSON,
    ModLessonFinishAttemptRequestToJSON,
    ModLessonGetAttemptsOverview200ResponseFromJSON,
    ModLessonGetAttemptsOverview200ResponseToJSON,
    ModLessonGetAttemptsOverviewRequestFromJSON,
    ModLessonGetAttemptsOverviewRequestToJSON,
    ModLessonGetContentPagesViewed200ResponseFromJSON,
    ModLessonGetContentPagesViewed200ResponseToJSON,
    ModLessonGetContentPagesViewedRequestFromJSON,
    ModLessonGetContentPagesViewedRequestToJSON,
    ModLessonGetLesson200ResponseFromJSON,
    ModLessonGetLesson200ResponseToJSON,
    ModLessonGetLessonAccessInformation200ResponseFromJSON,
    ModLessonGetLessonAccessInformation200ResponseToJSON,
    ModLessonGetLessonAccessInformationRequestFromJSON,
    ModLessonGetLessonAccessInformationRequestToJSON,
    ModLessonGetLessonRequestFromJSON,
    ModLessonGetLessonRequestToJSON,
    ModLessonGetLessonsByCourses200ResponseFromJSON,
    ModLessonGetLessonsByCourses200ResponseToJSON,
    ModLessonGetPageData200ResponseFromJSON,
    ModLessonGetPageData200ResponseToJSON,
    ModLessonGetPageDataRequestFromJSON,
    ModLessonGetPageDataRequestToJSON,
    ModLessonGetPages200ResponseFromJSON,
    ModLessonGetPages200ResponseToJSON,
    ModLessonGetPagesPossibleJumps200ResponseFromJSON,
    ModLessonGetPagesPossibleJumps200ResponseToJSON,
    ModLessonGetPagesRequestFromJSON,
    ModLessonGetPagesRequestToJSON,
    ModLessonGetQuestionsAttempts200ResponseFromJSON,
    ModLessonGetQuestionsAttempts200ResponseToJSON,
    ModLessonGetQuestionsAttemptsRequestFromJSON,
    ModLessonGetQuestionsAttemptsRequestToJSON,
    ModLessonGetUserAttempt200ResponseFromJSON,
    ModLessonGetUserAttempt200ResponseToJSON,
    ModLessonGetUserAttemptGrade200ResponseFromJSON,
    ModLessonGetUserAttemptGrade200ResponseToJSON,
    ModLessonGetUserAttemptGradeRequestFromJSON,
    ModLessonGetUserAttemptGradeRequestToJSON,
    ModLessonGetUserAttemptRequestFromJSON,
    ModLessonGetUserAttemptRequestToJSON,
    ModLessonGetUserGrade200ResponseFromJSON,
    ModLessonGetUserGrade200ResponseToJSON,
    ModLessonGetUserGradeRequestFromJSON,
    ModLessonGetUserGradeRequestToJSON,
    ModLessonGetUserTimers200ResponseFromJSON,
    ModLessonGetUserTimers200ResponseToJSON,
    ModLessonLaunchAttempt200ResponseFromJSON,
    ModLessonLaunchAttempt200ResponseToJSON,
    ModLessonLaunchAttemptRequestFromJSON,
    ModLessonLaunchAttemptRequestToJSON,
    ModLessonProcessPage200ResponseFromJSON,
    ModLessonProcessPage200ResponseToJSON,
    ModLessonProcessPageRequestFromJSON,
    ModLessonProcessPageRequestToJSON,
} from '../models/index';

export interface ModLessonFinishAttemptOperationRequest {
    modLessonFinishAttemptRequest: ModLessonFinishAttemptRequest;
}

export interface ModLessonGetAttemptsOverviewOperationRequest {
    modLessonGetAttemptsOverviewRequest: ModLessonGetAttemptsOverviewRequest;
}

export interface ModLessonGetContentPagesViewedOperationRequest {
    modLessonGetContentPagesViewedRequest: ModLessonGetContentPagesViewedRequest;
}

export interface ModLessonGetLessonOperationRequest {
    modLessonGetLessonRequest: ModLessonGetLessonRequest;
}

export interface ModLessonGetLessonAccessInformationOperationRequest {
    modLessonGetLessonAccessInformationRequest: ModLessonGetLessonAccessInformationRequest;
}

export interface ModLessonGetLessonsByCoursesRequest {
    modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest;
}

export interface ModLessonGetPageDataOperationRequest {
    modLessonGetPageDataRequest: ModLessonGetPageDataRequest;
}

export interface ModLessonGetPagesOperationRequest {
    modLessonGetPagesRequest: ModLessonGetPagesRequest;
}

export interface ModLessonGetPagesPossibleJumpsRequest {
    modLessonGetLessonAccessInformationRequest: ModLessonGetLessonAccessInformationRequest;
}

export interface ModLessonGetQuestionsAttemptsOperationRequest {
    modLessonGetQuestionsAttemptsRequest: ModLessonGetQuestionsAttemptsRequest;
}

export interface ModLessonGetUserAttemptOperationRequest {
    modLessonGetUserAttemptRequest: ModLessonGetUserAttemptRequest;
}

export interface ModLessonGetUserAttemptGradeOperationRequest {
    modLessonGetUserAttemptGradeRequest: ModLessonGetUserAttemptGradeRequest;
}

export interface ModLessonGetUserGradeOperationRequest {
    modLessonGetUserGradeRequest: ModLessonGetUserGradeRequest;
}

export interface ModLessonGetUserTimersRequest {
    modLessonGetUserGradeRequest: ModLessonGetUserGradeRequest;
}

export interface ModLessonLaunchAttemptOperationRequest {
    modLessonLaunchAttemptRequest: ModLessonLaunchAttemptRequest;
}

export interface ModLessonProcessPageOperationRequest {
    modLessonProcessPageRequest: ModLessonProcessPageRequest;
}

export interface ModLessonViewLessonRequest {
    modLessonGetLessonRequest: ModLessonGetLessonRequest;
}

/**
 * 
 */
export class ModLessonApi extends runtime.BaseAPI {

    /**
     * Finishes the current attempt.
     * Finishes the current attempt.
     */
    async modLessonFinishAttemptRaw(requestParameters: ModLessonFinishAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonFinishAttempt200Response>> {
        if (requestParameters['modLessonFinishAttemptRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonFinishAttemptRequest',
                'Required parameter "modLessonFinishAttemptRequest" was null or undefined when calling modLessonFinishAttempt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_finish_attempt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonFinishAttemptRequestToJSON(requestParameters['modLessonFinishAttemptRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonFinishAttempt200ResponseFromJSON(jsonValue));
    }

    /**
     * Finishes the current attempt.
     * Finishes the current attempt.
     */
    async modLessonFinishAttempt(requestParameters: ModLessonFinishAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonFinishAttempt200Response> {
        const response = await this.modLessonFinishAttemptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all the attempts made by users in a lesson.
     * Get a list of all the attempts made by users in a lesson.
     */
    async modLessonGetAttemptsOverviewRaw(requestParameters: ModLessonGetAttemptsOverviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonGetAttemptsOverview200Response>> {
        if (requestParameters['modLessonGetAttemptsOverviewRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonGetAttemptsOverviewRequest',
                'Required parameter "modLessonGetAttemptsOverviewRequest" was null or undefined when calling modLessonGetAttemptsOverview().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_get_attempts_overview`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonGetAttemptsOverviewRequestToJSON(requestParameters['modLessonGetAttemptsOverviewRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonGetAttemptsOverview200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all the attempts made by users in a lesson.
     * Get a list of all the attempts made by users in a lesson.
     */
    async modLessonGetAttemptsOverview(requestParameters: ModLessonGetAttemptsOverviewOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonGetAttemptsOverview200Response> {
        const response = await this.modLessonGetAttemptsOverviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the list of content pages viewed by a user during a lesson attempt.
     * Return the list of content pages viewed by a user during a lesson attempt.
     */
    async modLessonGetContentPagesViewedRaw(requestParameters: ModLessonGetContentPagesViewedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonGetContentPagesViewed200Response>> {
        if (requestParameters['modLessonGetContentPagesViewedRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonGetContentPagesViewedRequest',
                'Required parameter "modLessonGetContentPagesViewedRequest" was null or undefined when calling modLessonGetContentPagesViewed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_get_content_pages_viewed`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonGetContentPagesViewedRequestToJSON(requestParameters['modLessonGetContentPagesViewedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonGetContentPagesViewed200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the list of content pages viewed by a user during a lesson attempt.
     * Return the list of content pages viewed by a user during a lesson attempt.
     */
    async modLessonGetContentPagesViewed(requestParameters: ModLessonGetContentPagesViewedOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonGetContentPagesViewed200Response> {
        const response = await this.modLessonGetContentPagesViewedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return information of a given lesson.
     * Return information of a given lesson.
     */
    async modLessonGetLessonRaw(requestParameters: ModLessonGetLessonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonGetLesson200Response>> {
        if (requestParameters['modLessonGetLessonRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonGetLessonRequest',
                'Required parameter "modLessonGetLessonRequest" was null or undefined when calling modLessonGetLesson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_get_lesson`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonGetLessonRequestToJSON(requestParameters['modLessonGetLessonRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonGetLesson200ResponseFromJSON(jsonValue));
    }

    /**
     * Return information of a given lesson.
     * Return information of a given lesson.
     */
    async modLessonGetLesson(requestParameters: ModLessonGetLessonOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonGetLesson200Response> {
        const response = await this.modLessonGetLessonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return access information for a given lesson.
     * Return access information for a given lesson.
     */
    async modLessonGetLessonAccessInformationRaw(requestParameters: ModLessonGetLessonAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonGetLessonAccessInformation200Response>> {
        if (requestParameters['modLessonGetLessonAccessInformationRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonGetLessonAccessInformationRequest',
                'Required parameter "modLessonGetLessonAccessInformationRequest" was null or undefined when calling modLessonGetLessonAccessInformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_get_lesson_access_information`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonGetLessonAccessInformationRequestToJSON(requestParameters['modLessonGetLessonAccessInformationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonGetLessonAccessInformation200ResponseFromJSON(jsonValue));
    }

    /**
     * Return access information for a given lesson.
     * Return access information for a given lesson.
     */
    async modLessonGetLessonAccessInformation(requestParameters: ModLessonGetLessonAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonGetLessonAccessInformation200Response> {
        const response = await this.modLessonGetLessonAccessInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     */
    async modLessonGetLessonsByCoursesRaw(requestParameters: ModLessonGetLessonsByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonGetLessonsByCourses200Response>> {
        if (requestParameters['modChatGetChatsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatGetChatsByCoursesRequest',
                'Required parameter "modChatGetChatsByCoursesRequest" was null or undefined when calling modLessonGetLessonsByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_get_lessons_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatGetChatsByCoursesRequestToJSON(requestParameters['modChatGetChatsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonGetLessonsByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     * Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
     */
    async modLessonGetLessonsByCourses(requestParameters: ModLessonGetLessonsByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonGetLessonsByCourses200Response> {
        const response = await this.modLessonGetLessonsByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return information of a given page, including its contents.
     * Return information of a given page, including its contents.
     */
    async modLessonGetPageDataRaw(requestParameters: ModLessonGetPageDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonGetPageData200Response>> {
        if (requestParameters['modLessonGetPageDataRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonGetPageDataRequest',
                'Required parameter "modLessonGetPageDataRequest" was null or undefined when calling modLessonGetPageData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_get_page_data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonGetPageDataRequestToJSON(requestParameters['modLessonGetPageDataRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonGetPageData200ResponseFromJSON(jsonValue));
    }

    /**
     * Return information of a given page, including its contents.
     * Return information of a given page, including its contents.
     */
    async modLessonGetPageData(requestParameters: ModLessonGetPageDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonGetPageData200Response> {
        const response = await this.modLessonGetPageDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the list of pages in a lesson (based on the user permissions).
     * Return the list of pages in a lesson (based on the user permissions).
     */
    async modLessonGetPagesRaw(requestParameters: ModLessonGetPagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonGetPages200Response>> {
        if (requestParameters['modLessonGetPagesRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonGetPagesRequest',
                'Required parameter "modLessonGetPagesRequest" was null or undefined when calling modLessonGetPages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_get_pages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonGetPagesRequestToJSON(requestParameters['modLessonGetPagesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonGetPages200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the list of pages in a lesson (based on the user permissions).
     * Return the list of pages in a lesson (based on the user permissions).
     */
    async modLessonGetPages(requestParameters: ModLessonGetPagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonGetPages200Response> {
        const response = await this.modLessonGetPagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return all the possible jumps for the pages in a given lesson.
     * Return all the possible jumps for the pages in a given lesson.
     */
    async modLessonGetPagesPossibleJumpsRaw(requestParameters: ModLessonGetPagesPossibleJumpsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonGetPagesPossibleJumps200Response>> {
        if (requestParameters['modLessonGetLessonAccessInformationRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonGetLessonAccessInformationRequest',
                'Required parameter "modLessonGetLessonAccessInformationRequest" was null or undefined when calling modLessonGetPagesPossibleJumps().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_get_pages_possible_jumps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonGetLessonAccessInformationRequestToJSON(requestParameters['modLessonGetLessonAccessInformationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonGetPagesPossibleJumps200ResponseFromJSON(jsonValue));
    }

    /**
     * Return all the possible jumps for the pages in a given lesson.
     * Return all the possible jumps for the pages in a given lesson.
     */
    async modLessonGetPagesPossibleJumps(requestParameters: ModLessonGetPagesPossibleJumpsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonGetPagesPossibleJumps200Response> {
        const response = await this.modLessonGetPagesPossibleJumpsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the list of questions attempts in a given lesson.
     * Return the list of questions attempts in a given lesson.
     */
    async modLessonGetQuestionsAttemptsRaw(requestParameters: ModLessonGetQuestionsAttemptsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonGetQuestionsAttempts200Response>> {
        if (requestParameters['modLessonGetQuestionsAttemptsRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonGetQuestionsAttemptsRequest',
                'Required parameter "modLessonGetQuestionsAttemptsRequest" was null or undefined when calling modLessonGetQuestionsAttempts().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_get_questions_attempts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonGetQuestionsAttemptsRequestToJSON(requestParameters['modLessonGetQuestionsAttemptsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonGetQuestionsAttempts200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the list of questions attempts in a given lesson.
     * Return the list of questions attempts in a given lesson.
     */
    async modLessonGetQuestionsAttempts(requestParameters: ModLessonGetQuestionsAttemptsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonGetQuestionsAttempts200Response> {
        const response = await this.modLessonGetQuestionsAttemptsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return information about the given user attempt (including answers).
     * Return information about the given user attempt (including answers).
     */
    async modLessonGetUserAttemptRaw(requestParameters: ModLessonGetUserAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonGetUserAttempt200Response>> {
        if (requestParameters['modLessonGetUserAttemptRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonGetUserAttemptRequest',
                'Required parameter "modLessonGetUserAttemptRequest" was null or undefined when calling modLessonGetUserAttempt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_get_user_attempt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonGetUserAttemptRequestToJSON(requestParameters['modLessonGetUserAttemptRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonGetUserAttempt200ResponseFromJSON(jsonValue));
    }

    /**
     * Return information about the given user attempt (including answers).
     * Return information about the given user attempt (including answers).
     */
    async modLessonGetUserAttempt(requestParameters: ModLessonGetUserAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonGetUserAttempt200Response> {
        const response = await this.modLessonGetUserAttemptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return grade information in the attempt for a given user.
     * Return grade information in the attempt for a given user.
     */
    async modLessonGetUserAttemptGradeRaw(requestParameters: ModLessonGetUserAttemptGradeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonGetUserAttemptGrade200Response>> {
        if (requestParameters['modLessonGetUserAttemptGradeRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonGetUserAttemptGradeRequest',
                'Required parameter "modLessonGetUserAttemptGradeRequest" was null or undefined when calling modLessonGetUserAttemptGrade().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_get_user_attempt_grade`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonGetUserAttemptGradeRequestToJSON(requestParameters['modLessonGetUserAttemptGradeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonGetUserAttemptGrade200ResponseFromJSON(jsonValue));
    }

    /**
     * Return grade information in the attempt for a given user.
     * Return grade information in the attempt for a given user.
     */
    async modLessonGetUserAttemptGrade(requestParameters: ModLessonGetUserAttemptGradeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonGetUserAttemptGrade200Response> {
        const response = await this.modLessonGetUserAttemptGradeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the final grade in the lesson for the given user.
     * Return the final grade in the lesson for the given user.
     */
    async modLessonGetUserGradeRaw(requestParameters: ModLessonGetUserGradeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonGetUserGrade200Response>> {
        if (requestParameters['modLessonGetUserGradeRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonGetUserGradeRequest',
                'Required parameter "modLessonGetUserGradeRequest" was null or undefined when calling modLessonGetUserGrade().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_get_user_grade`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonGetUserGradeRequestToJSON(requestParameters['modLessonGetUserGradeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonGetUserGrade200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the final grade in the lesson for the given user.
     * Return the final grade in the lesson for the given user.
     */
    async modLessonGetUserGrade(requestParameters: ModLessonGetUserGradeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonGetUserGrade200Response> {
        const response = await this.modLessonGetUserGradeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the timers in the current lesson for the given user.
     * Return the timers in the current lesson for the given user.
     */
    async modLessonGetUserTimersRaw(requestParameters: ModLessonGetUserTimersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonGetUserTimers200Response>> {
        if (requestParameters['modLessonGetUserGradeRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonGetUserGradeRequest',
                'Required parameter "modLessonGetUserGradeRequest" was null or undefined when calling modLessonGetUserTimers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_get_user_timers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonGetUserGradeRequestToJSON(requestParameters['modLessonGetUserGradeRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonGetUserTimers200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the timers in the current lesson for the given user.
     * Return the timers in the current lesson for the given user.
     */
    async modLessonGetUserTimers(requestParameters: ModLessonGetUserTimersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonGetUserTimers200Response> {
        const response = await this.modLessonGetUserTimersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Starts a new attempt or continues an existing one.
     * Starts a new attempt or continues an existing one.
     */
    async modLessonLaunchAttemptRaw(requestParameters: ModLessonLaunchAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonLaunchAttempt200Response>> {
        if (requestParameters['modLessonLaunchAttemptRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonLaunchAttemptRequest',
                'Required parameter "modLessonLaunchAttemptRequest" was null or undefined when calling modLessonLaunchAttempt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_launch_attempt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonLaunchAttemptRequestToJSON(requestParameters['modLessonLaunchAttemptRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonLaunchAttempt200ResponseFromJSON(jsonValue));
    }

    /**
     * Starts a new attempt or continues an existing one.
     * Starts a new attempt or continues an existing one.
     */
    async modLessonLaunchAttempt(requestParameters: ModLessonLaunchAttemptOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonLaunchAttempt200Response> {
        const response = await this.modLessonLaunchAttemptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Processes page responses.
     * Processes page responses.
     */
    async modLessonProcessPageRaw(requestParameters: ModLessonProcessPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModLessonProcessPage200Response>> {
        if (requestParameters['modLessonProcessPageRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonProcessPageRequest',
                'Required parameter "modLessonProcessPageRequest" was null or undefined when calling modLessonProcessPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_process_page`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonProcessPageRequestToJSON(requestParameters['modLessonProcessPageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModLessonProcessPage200ResponseFromJSON(jsonValue));
    }

    /**
     * Processes page responses.
     * Processes page responses.
     */
    async modLessonProcessPage(requestParameters: ModLessonProcessPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModLessonProcessPage200Response> {
        const response = await this.modLessonProcessPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modLessonViewLessonRaw(requestParameters: ModLessonViewLessonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modLessonGetLessonRequest'] == null) {
            throw new runtime.RequiredError(
                'modLessonGetLessonRequest',
                'Required parameter "modLessonGetLessonRequest" was null or undefined when calling modLessonViewLesson().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_lesson_view_lesson`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModLessonGetLessonRequestToJSON(requestParameters['modLessonGetLessonRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     */
    async modLessonViewLesson(requestParameters: ModLessonViewLessonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modLessonViewLessonRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
