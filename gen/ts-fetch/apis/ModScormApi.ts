/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoreCalendarDeleteSubscription200Response,
  ErrorResponse,
  ModChatGetChatsByCoursesRequest,
  ModScormGetScormAccessInformation200Response,
  ModScormGetScormAccessInformationRequest,
  ModScormGetScormAttemptCount200Response,
  ModScormGetScormAttemptCountRequest,
  ModScormGetScormScoTracks200Response,
  ModScormGetScormScoTracksRequest,
  ModScormGetScormScoes200Response,
  ModScormGetScormScoesRequest,
  ModScormGetScormUserData200Response,
  ModScormGetScormUserDataRequest,
  ModScormGetScormsByCourses200Response,
  ModScormInsertScormTracks200Response,
  ModScormInsertScormTracksRequest,
  ModScormLaunchScoRequest,
  ModScormViewScormRequest,
} from '../models/index';
import {
    CoreCalendarDeleteSubscription200ResponseFromJSON,
    CoreCalendarDeleteSubscription200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ModChatGetChatsByCoursesRequestFromJSON,
    ModChatGetChatsByCoursesRequestToJSON,
    ModScormGetScormAccessInformation200ResponseFromJSON,
    ModScormGetScormAccessInformation200ResponseToJSON,
    ModScormGetScormAccessInformationRequestFromJSON,
    ModScormGetScormAccessInformationRequestToJSON,
    ModScormGetScormAttemptCount200ResponseFromJSON,
    ModScormGetScormAttemptCount200ResponseToJSON,
    ModScormGetScormAttemptCountRequestFromJSON,
    ModScormGetScormAttemptCountRequestToJSON,
    ModScormGetScormScoTracks200ResponseFromJSON,
    ModScormGetScormScoTracks200ResponseToJSON,
    ModScormGetScormScoTracksRequestFromJSON,
    ModScormGetScormScoTracksRequestToJSON,
    ModScormGetScormScoes200ResponseFromJSON,
    ModScormGetScormScoes200ResponseToJSON,
    ModScormGetScormScoesRequestFromJSON,
    ModScormGetScormScoesRequestToJSON,
    ModScormGetScormUserData200ResponseFromJSON,
    ModScormGetScormUserData200ResponseToJSON,
    ModScormGetScormUserDataRequestFromJSON,
    ModScormGetScormUserDataRequestToJSON,
    ModScormGetScormsByCourses200ResponseFromJSON,
    ModScormGetScormsByCourses200ResponseToJSON,
    ModScormInsertScormTracks200ResponseFromJSON,
    ModScormInsertScormTracks200ResponseToJSON,
    ModScormInsertScormTracksRequestFromJSON,
    ModScormInsertScormTracksRequestToJSON,
    ModScormLaunchScoRequestFromJSON,
    ModScormLaunchScoRequestToJSON,
    ModScormViewScormRequestFromJSON,
    ModScormViewScormRequestToJSON,
} from '../models/index';

export interface ModScormGetScormAccessInformationOperationRequest {
    modScormGetScormAccessInformationRequest: ModScormGetScormAccessInformationRequest;
}

export interface ModScormGetScormAttemptCountOperationRequest {
    modScormGetScormAttemptCountRequest: ModScormGetScormAttemptCountRequest;
}

export interface ModScormGetScormScoTracksOperationRequest {
    modScormGetScormScoTracksRequest: ModScormGetScormScoTracksRequest;
}

export interface ModScormGetScormScoesOperationRequest {
    modScormGetScormScoesRequest: ModScormGetScormScoesRequest;
}

export interface ModScormGetScormUserDataOperationRequest {
    modScormGetScormUserDataRequest: ModScormGetScormUserDataRequest;
}

export interface ModScormGetScormsByCoursesRequest {
    modChatGetChatsByCoursesRequest: ModChatGetChatsByCoursesRequest;
}

export interface ModScormInsertScormTracksOperationRequest {
    modScormInsertScormTracksRequest: ModScormInsertScormTracksRequest;
}

export interface ModScormLaunchScoOperationRequest {
    modScormLaunchScoRequest: ModScormLaunchScoRequest;
}

export interface ModScormViewScormOperationRequest {
    modScormViewScormRequest: ModScormViewScormRequest;
}

/**
 * 
 */
export class ModScormApi extends runtime.BaseAPI {

    /**
     * Return capabilities information for a given scorm.
     * Return capabilities information for a given scorm.
     */
    async modScormGetScormAccessInformationRaw(requestParameters: ModScormGetScormAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModScormGetScormAccessInformation200Response>> {
        if (requestParameters['modScormGetScormAccessInformationRequest'] == null) {
            throw new runtime.RequiredError(
                'modScormGetScormAccessInformationRequest',
                'Required parameter "modScormGetScormAccessInformationRequest" was null or undefined when calling modScormGetScormAccessInformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_scorm_get_scorm_access_information`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModScormGetScormAccessInformationRequestToJSON(requestParameters['modScormGetScormAccessInformationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModScormGetScormAccessInformation200ResponseFromJSON(jsonValue));
    }

    /**
     * Return capabilities information for a given scorm.
     * Return capabilities information for a given scorm.
     */
    async modScormGetScormAccessInformation(requestParameters: ModScormGetScormAccessInformationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModScormGetScormAccessInformation200Response> {
        const response = await this.modScormGetScormAccessInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return the number of attempts done by a user in the given SCORM.
     * Return the number of attempts done by a user in the given SCORM.
     */
    async modScormGetScormAttemptCountRaw(requestParameters: ModScormGetScormAttemptCountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModScormGetScormAttemptCount200Response>> {
        if (requestParameters['modScormGetScormAttemptCountRequest'] == null) {
            throw new runtime.RequiredError(
                'modScormGetScormAttemptCountRequest',
                'Required parameter "modScormGetScormAttemptCountRequest" was null or undefined when calling modScormGetScormAttemptCount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_scorm_get_scorm_attempt_count`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModScormGetScormAttemptCountRequestToJSON(requestParameters['modScormGetScormAttemptCountRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModScormGetScormAttemptCount200ResponseFromJSON(jsonValue));
    }

    /**
     * Return the number of attempts done by a user in the given SCORM.
     * Return the number of attempts done by a user in the given SCORM.
     */
    async modScormGetScormAttemptCount(requestParameters: ModScormGetScormAttemptCountOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModScormGetScormAttemptCount200Response> {
        const response = await this.modScormGetScormAttemptCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves SCO tracking data for the given user id and attempt number
     * Retrieves SCO tracking data for the given user id and attempt number
     */
    async modScormGetScormScoTracksRaw(requestParameters: ModScormGetScormScoTracksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModScormGetScormScoTracks200Response>> {
        if (requestParameters['modScormGetScormScoTracksRequest'] == null) {
            throw new runtime.RequiredError(
                'modScormGetScormScoTracksRequest',
                'Required parameter "modScormGetScormScoTracksRequest" was null or undefined when calling modScormGetScormScoTracks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_scorm_get_scorm_sco_tracks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModScormGetScormScoTracksRequestToJSON(requestParameters['modScormGetScormScoTracksRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModScormGetScormScoTracks200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves SCO tracking data for the given user id and attempt number
     * Retrieves SCO tracking data for the given user id and attempt number
     */
    async modScormGetScormScoTracks(requestParameters: ModScormGetScormScoTracksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModScormGetScormScoTracks200Response> {
        const response = await this.modScormGetScormScoTracksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list containing all the scoes data related to the given scorm id
     * Returns a list containing all the scoes data related to the given scorm id
     */
    async modScormGetScormScoesRaw(requestParameters: ModScormGetScormScoesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModScormGetScormScoes200Response>> {
        if (requestParameters['modScormGetScormScoesRequest'] == null) {
            throw new runtime.RequiredError(
                'modScormGetScormScoesRequest',
                'Required parameter "modScormGetScormScoesRequest" was null or undefined when calling modScormGetScormScoes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_scorm_get_scorm_scoes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModScormGetScormScoesRequestToJSON(requestParameters['modScormGetScormScoesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModScormGetScormScoes200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list containing all the scoes data related to the given scorm id
     * Returns a list containing all the scoes data related to the given scorm id
     */
    async modScormGetScormScoes(requestParameters: ModScormGetScormScoesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModScormGetScormScoes200Response> {
        const response = await this.modScormGetScormScoesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves user tracking and SCO data and default SCORM values
     * Retrieves user tracking and SCO data and default SCORM values
     */
    async modScormGetScormUserDataRaw(requestParameters: ModScormGetScormUserDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModScormGetScormUserData200Response>> {
        if (requestParameters['modScormGetScormUserDataRequest'] == null) {
            throw new runtime.RequiredError(
                'modScormGetScormUserDataRequest',
                'Required parameter "modScormGetScormUserDataRequest" was null or undefined when calling modScormGetScormUserData().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_scorm_get_scorm_user_data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModScormGetScormUserDataRequestToJSON(requestParameters['modScormGetScormUserDataRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModScormGetScormUserData200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves user tracking and SCO data and default SCORM values
     * Retrieves user tracking and SCO data and default SCORM values
     */
    async modScormGetScormUserData(requestParameters: ModScormGetScormUserDataOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModScormGetScormUserData200Response> {
        const response = await this.modScormGetScormUserDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
     * Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
     */
    async modScormGetScormsByCoursesRaw(requestParameters: ModScormGetScormsByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModScormGetScormsByCourses200Response>> {
        if (requestParameters['modChatGetChatsByCoursesRequest'] == null) {
            throw new runtime.RequiredError(
                'modChatGetChatsByCoursesRequest',
                'Required parameter "modChatGetChatsByCoursesRequest" was null or undefined when calling modScormGetScormsByCourses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_scorm_get_scorms_by_courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModChatGetChatsByCoursesRequestToJSON(requestParameters['modChatGetChatsByCoursesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModScormGetScormsByCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
     * Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
     */
    async modScormGetScormsByCourses(requestParameters: ModScormGetScormsByCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModScormGetScormsByCourses200Response> {
        const response = await this.modScormGetScormsByCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
     * Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
     */
    async modScormInsertScormTracksRaw(requestParameters: ModScormInsertScormTracksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModScormInsertScormTracks200Response>> {
        if (requestParameters['modScormInsertScormTracksRequest'] == null) {
            throw new runtime.RequiredError(
                'modScormInsertScormTracksRequest',
                'Required parameter "modScormInsertScormTracksRequest" was null or undefined when calling modScormInsertScormTracks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_scorm_insert_scorm_tracks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModScormInsertScormTracksRequestToJSON(requestParameters['modScormInsertScormTracksRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModScormInsertScormTracks200ResponseFromJSON(jsonValue));
    }

    /**
     * Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
     * Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
     */
    async modScormInsertScormTracks(requestParameters: ModScormInsertScormTracksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModScormInsertScormTracks200Response> {
        const response = await this.modScormInsertScormTracksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the SCO launched event.
     * Trigger the SCO launched event.
     */
    async modScormLaunchScoRaw(requestParameters: ModScormLaunchScoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modScormLaunchScoRequest'] == null) {
            throw new runtime.RequiredError(
                'modScormLaunchScoRequest',
                'Required parameter "modScormLaunchScoRequest" was null or undefined when calling modScormLaunchSco().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_scorm_launch_sco`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModScormLaunchScoRequestToJSON(requestParameters['modScormLaunchScoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the SCO launched event.
     * Trigger the SCO launched event.
     */
    async modScormLaunchSco(requestParameters: ModScormLaunchScoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modScormLaunchScoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger the course module viewed event.
     * Trigger the course module viewed event.
     */
    async modScormViewScormRaw(requestParameters: ModScormViewScormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoreCalendarDeleteSubscription200Response>> {
        if (requestParameters['modScormViewScormRequest'] == null) {
            throw new runtime.RequiredError(
                'modScormViewScormRequest',
                'Required parameter "modScormViewScormRequest" was null or undefined when calling modScormViewScorm().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/mod_scorm_view_scorm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModScormViewScormRequestToJSON(requestParameters['modScormViewScormRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoreCalendarDeleteSubscription200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger the course module viewed event.
     * Trigger the course module viewed event.
     */
    async modScormViewScorm(requestParameters: ModScormViewScormOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoreCalendarDeleteSubscription200Response> {
        const response = await this.modScormViewScormRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
