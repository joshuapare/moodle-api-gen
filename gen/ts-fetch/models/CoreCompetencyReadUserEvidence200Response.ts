/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreCompetencyReadUserEvidence200ResponseCompetenciesInner } from './CoreCompetencyReadUserEvidence200ResponseCompetenciesInner';
import {
    CoreCompetencyReadUserEvidence200ResponseCompetenciesInnerFromJSON,
    CoreCompetencyReadUserEvidence200ResponseCompetenciesInnerFromJSONTyped,
    CoreCompetencyReadUserEvidence200ResponseCompetenciesInnerToJSON,
} from './CoreCompetencyReadUserEvidence200ResponseCompetenciesInner';
import type { CoreCompetencyReadUserEvidence200ResponseFilesInner } from './CoreCompetencyReadUserEvidence200ResponseFilesInner';
import {
    CoreCompetencyReadUserEvidence200ResponseFilesInnerFromJSON,
    CoreCompetencyReadUserEvidence200ResponseFilesInnerFromJSONTyped,
    CoreCompetencyReadUserEvidence200ResponseFilesInnerToJSON,
} from './CoreCompetencyReadUserEvidence200ResponseFilesInner';

/**
 * 
 * @export
 * @interface CoreCompetencyReadUserEvidence200Response
 */
export interface CoreCompetencyReadUserEvidence200Response {
    /**
     * canmanage
     * @type {boolean}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    canmanage: boolean;
    /**
     * 
     * @type {Array<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner>}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    competencies: Array<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner>;
    /**
     * competencycount
     * @type {number}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    competencycount: number;
    /**
     * description
     * @type {string}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    description: string;
    /**
     * description format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    descriptionformat?: number;
    /**
     * filecount
     * @type {number}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    filecount: number;
    /**
     * 
     * @type {Array<CoreCompetencyReadUserEvidence200ResponseFilesInner>}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    files: Array<CoreCompetencyReadUserEvidence200ResponseFilesInner>;
    /**
     * hasurlorfiles
     * @type {boolean}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    hasurlorfiles: boolean;
    /**
     * id
     * @type {number}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    id: number;
    /**
     * name
     * @type {string}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    name: string;
    /**
     * timecreated
     * @type {number}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    timecreated: number;
    /**
     * timemodified
     * @type {number}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    timemodified: number;
    /**
     * url
     * @type {string}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    url: string;
    /**
     * urlshort
     * @type {string}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    urlshort: string;
    /**
     * userid
     * @type {number}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    userid: number;
    /**
     * usermodified
     * @type {number}
     * @memberof CoreCompetencyReadUserEvidence200Response
     */
    usermodified: number;
}

/**
 * Check if a given object implements the CoreCompetencyReadUserEvidence200Response interface.
 */
export function instanceOfCoreCompetencyReadUserEvidence200Response(value: object): boolean {
    if (!('canmanage' in value)) return false;
    if (!('competencies' in value)) return false;
    if (!('competencycount' in value)) return false;
    if (!('description' in value)) return false;
    if (!('filecount' in value)) return false;
    if (!('files' in value)) return false;
    if (!('hasurlorfiles' in value)) return false;
    if (!('id' in value)) return false;
    if (!('name' in value)) return false;
    if (!('timecreated' in value)) return false;
    if (!('timemodified' in value)) return false;
    if (!('url' in value)) return false;
    if (!('urlshort' in value)) return false;
    if (!('userid' in value)) return false;
    if (!('usermodified' in value)) return false;
    return true;
}

export function CoreCompetencyReadUserEvidence200ResponseFromJSON(json: any): CoreCompetencyReadUserEvidence200Response {
    return CoreCompetencyReadUserEvidence200ResponseFromJSONTyped(json, false);
}

export function CoreCompetencyReadUserEvidence200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreCompetencyReadUserEvidence200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'canmanage': json['canmanage'],
        'competencies': ((json['competencies'] as Array<any>).map(CoreCompetencyReadUserEvidence200ResponseCompetenciesInnerFromJSON)),
        'competencycount': json['competencycount'],
        'description': json['description'],
        'descriptionformat': json['descriptionformat'] == null ? undefined : json['descriptionformat'],
        'filecount': json['filecount'],
        'files': ((json['files'] as Array<any>).map(CoreCompetencyReadUserEvidence200ResponseFilesInnerFromJSON)),
        'hasurlorfiles': json['hasurlorfiles'],
        'id': json['id'],
        'name': json['name'],
        'timecreated': json['timecreated'],
        'timemodified': json['timemodified'],
        'url': json['url'],
        'urlshort': json['urlshort'],
        'userid': json['userid'],
        'usermodified': json['usermodified'],
    };
}

export function CoreCompetencyReadUserEvidence200ResponseToJSON(value?: CoreCompetencyReadUserEvidence200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'canmanage': value['canmanage'],
        'competencies': ((value['competencies'] as Array<any>).map(CoreCompetencyReadUserEvidence200ResponseCompetenciesInnerToJSON)),
        'competencycount': value['competencycount'],
        'description': value['description'],
        'descriptionformat': value['descriptionformat'],
        'filecount': value['filecount'],
        'files': ((value['files'] as Array<any>).map(CoreCompetencyReadUserEvidence200ResponseFilesInnerToJSON)),
        'hasurlorfiles': value['hasurlorfiles'],
        'id': value['id'],
        'name': value['name'],
        'timecreated': value['timecreated'],
        'timemodified': value['timemodified'],
        'url': value['url'],
        'urlshort': value['urlshort'],
        'userid': value['userid'],
        'usermodified': value['usermodified'],
    };
}

