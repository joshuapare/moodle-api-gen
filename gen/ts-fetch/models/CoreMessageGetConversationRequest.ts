/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CoreMessageGetConversationRequest
 */
export interface CoreMessageGetConversationRequest {
    /**
     * The id of the conversation to fetch
     * @type {number}
     * @memberof CoreMessageGetConversationRequest
     */
    conversationid: number;
    /**
     * Include contact requests in the members
     * @type {boolean}
     * @memberof CoreMessageGetConversationRequest
     */
    includecontactrequests: boolean;
    /**
     * Include privacy info in the members
     * @type {boolean}
     * @memberof CoreMessageGetConversationRequest
     */
    includeprivacyinfo: boolean;
    /**
     * Limit for number of members
     * @type {number}
     * @memberof CoreMessageGetConversationRequest
     */
    memberlimit?: number;
    /**
     * Offset for member list
     * @type {number}
     * @memberof CoreMessageGetConversationRequest
     */
    memberoffset?: number;
    /**
     * Limit for number of messages
     * @type {number}
     * @memberof CoreMessageGetConversationRequest
     */
    messagelimit?: number;
    /**
     * Offset for messages list
     * @type {number}
     * @memberof CoreMessageGetConversationRequest
     */
    messageoffset?: number;
    /**
     * Order messages by newest first
     * @type {boolean}
     * @memberof CoreMessageGetConversationRequest
     */
    newestmessagesfirst?: boolean;
    /**
     * The id of the user who we are viewing conversations for
     * @type {number}
     * @memberof CoreMessageGetConversationRequest
     */
    userid: number;
}

/**
 * Check if a given object implements the CoreMessageGetConversationRequest interface.
 */
export function instanceOfCoreMessageGetConversationRequest(value: object): boolean {
    if (!('conversationid' in value)) return false;
    if (!('includecontactrequests' in value)) return false;
    if (!('includeprivacyinfo' in value)) return false;
    if (!('userid' in value)) return false;
    return true;
}

export function CoreMessageGetConversationRequestFromJSON(json: any): CoreMessageGetConversationRequest {
    return CoreMessageGetConversationRequestFromJSONTyped(json, false);
}

export function CoreMessageGetConversationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreMessageGetConversationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'conversationid': json['conversationid'],
        'includecontactrequests': json['includecontactrequests'],
        'includeprivacyinfo': json['includeprivacyinfo'],
        'memberlimit': json['memberlimit'] == null ? undefined : json['memberlimit'],
        'memberoffset': json['memberoffset'] == null ? undefined : json['memberoffset'],
        'messagelimit': json['messagelimit'] == null ? undefined : json['messagelimit'],
        'messageoffset': json['messageoffset'] == null ? undefined : json['messageoffset'],
        'newestmessagesfirst': json['newestmessagesfirst'] == null ? undefined : json['newestmessagesfirst'],
        'userid': json['userid'],
    };
}

export function CoreMessageGetConversationRequestToJSON(value?: CoreMessageGetConversationRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'conversationid': value['conversationid'],
        'includecontactrequests': value['includecontactrequests'],
        'includeprivacyinfo': value['includeprivacyinfo'],
        'memberlimit': value['memberlimit'],
        'memberoffset': value['memberoffset'],
        'messagelimit': value['messagelimit'],
        'messageoffset': value['messageoffset'],
        'newestmessagesfirst': value['newestmessagesfirst'],
        'userid': value['userid'],
    };
}

