/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner } from './CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner';
import {
    CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSON,
    CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSONTyped,
    CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerToJSON,
} from './CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner';

/**
 * 
 * @export
 * @interface ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
 */
export interface ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner {
    /**
     * 0 = will be closed manually, greater than 0 the timestamp of the end of the assessment phase.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    assessmentend?: number;
    /**
     * 0 = will be started manually, greater than 0 the timestamp of the start of the assessment phase.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    assessmentstart?: number;
    /**
     * A text to be displayed at the end of the workshop.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    conclusion?: string;
    /**
     * 
     * @type {Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    conclusionfiles?: Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>;
    /**
     * conclusion format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    conclusionformat?: number;
    /**
     * Course id this workshop is part of.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    course?: number;
    /**
     * coursemodule
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    coursemodule?: number;
    /**
     * The recently used grading evaluation method.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    evaluation?: string;
    /**
     * 0 = example assessments are voluntary, 1 = examples must be assessed before submission,
     *                     2 = examples are available after own submission and must be assessed before peer/self assessment phase.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    examplesmode?: number;
    /**
     * The maximum grade for submission.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    grade?: number;
    /**
     * Number of digits that should be shown after the decimal point when displaying grades.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    gradedecimals?: number;
    /**
     * The maximum grade for assessment.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    gradinggrade?: number;
    /**
     * The primary key of the record.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    id?: number;
    /**
     * Instructions for the submission phase.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    instructauthors?: string;
    /**
     * 
     * @type {Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    instructauthorsfiles?: Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>;
    /**
     * instructauthors format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    instructauthorsformat?: number;
    /**
     * Instructions for the assessment phase.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    instructreviewers?: string;
    /**
     * 
     * @type {Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    instructreviewersfiles?: Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>;
    /**
     * instructreviewers format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    instructreviewersformat?: number;
    /**
     * Workshop introduction text.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    intro?: string;
    /**
     * 
     * @type {Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    introfiles?: Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>;
    /**
     * intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    introformat?: number;
    /**
     * Forced activity language
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    lang?: string;
    /**
     * Allow submitting the work after the deadline.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    latesubmissions?: boolean;
    /**
     * Maximum size of the one attached file.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    maxbytes?: number;
    /**
     * Workshop name.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    name?: string;
    /**
     * Maximum number of submission attachments.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    nattachments?: number;
    /**
     * Number of allowed attachments to the overall feedback.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    overallfeedbackfiles?: number;
    /**
     * Comma separated list of file extensions.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    overallfeedbackfiletypes?: string;
    /**
     * Maximum size of one file attached to the overall feedback.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    overallfeedbackmaxbytes?: number;
    /**
     * Mode of the overall feedback support.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    overallfeedbackmode?: number;
    /**
     * The current phase of workshop (0 = not available, 1 = submission, 2 = assessment, 3 = closed).
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    phase?: number;
    /**
     * Automatically switch to the assessment phase after the submissions deadline.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    phaseswitchassessment?: boolean;
    /**
     * The type of the current grading strategy used in this workshop.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    strategy?: string;
    /**
     * 0 = will be closed manually, greater than 0 the timestamp of the end of the submission phase.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    submissionend?: number;
    /**
     * Comma separated list of file extensions.
     * @type {string}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    submissionfiletypes?: string;
    /**
     * 0 = will be started manually, greater than 0 the timestamp of the start of the submission phase.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    submissionstart?: number;
    /**
     * Indicates whether a file upload is required as part of each submission. 0 for no, 1 for optional, 2 for required.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    submissiontypefile?: number;
    /**
     * Indicates whether text is required as part of each submission. 0 for no, 1 for optional, 2 for required.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    submissiontypetext?: number;
    /**
     * The timestamp when the module was modified.
     * @type {number}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    timemodified?: number;
    /**
     * Optional feature: students practise evaluating on example submissions from teacher.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    useexamples?: boolean;
    /**
     * Optional feature: students perform peer assessment of others' work.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    usepeerassessment?: boolean;
    /**
     * Optional feature: students perform self assessment of their own work.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
     */
    useselfassessment?: boolean;
}

/**
 * Check if a given object implements the ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner interface.
 */
export function instanceOfModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner(value: object): boolean {
    return true;
}

export function ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInnerFromJSON(json: any): ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner {
    return ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInnerFromJSONTyped(json, false);
}

export function ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner {
    if (json == null) {
        return json;
    }
    return {
        
        'assessmentend': json['assessmentend'] == null ? undefined : json['assessmentend'],
        'assessmentstart': json['assessmentstart'] == null ? undefined : json['assessmentstart'],
        'conclusion': json['conclusion'] == null ? undefined : json['conclusion'],
        'conclusionfiles': json['conclusionfiles'] == null ? undefined : ((json['conclusionfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSON)),
        'conclusionformat': json['conclusionformat'] == null ? undefined : json['conclusionformat'],
        'course': json['course'] == null ? undefined : json['course'],
        'coursemodule': json['coursemodule'] == null ? undefined : json['coursemodule'],
        'evaluation': json['evaluation'] == null ? undefined : json['evaluation'],
        'examplesmode': json['examplesmode'] == null ? undefined : json['examplesmode'],
        'grade': json['grade'] == null ? undefined : json['grade'],
        'gradedecimals': json['gradedecimals'] == null ? undefined : json['gradedecimals'],
        'gradinggrade': json['gradinggrade'] == null ? undefined : json['gradinggrade'],
        'id': json['id'] == null ? undefined : json['id'],
        'instructauthors': json['instructauthors'] == null ? undefined : json['instructauthors'],
        'instructauthorsfiles': json['instructauthorsfiles'] == null ? undefined : ((json['instructauthorsfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSON)),
        'instructauthorsformat': json['instructauthorsformat'] == null ? undefined : json['instructauthorsformat'],
        'instructreviewers': json['instructreviewers'] == null ? undefined : json['instructreviewers'],
        'instructreviewersfiles': json['instructreviewersfiles'] == null ? undefined : ((json['instructreviewersfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSON)),
        'instructreviewersformat': json['instructreviewersformat'] == null ? undefined : json['instructreviewersformat'],
        'intro': json['intro'] == null ? undefined : json['intro'],
        'introfiles': json['introfiles'] == null ? undefined : ((json['introfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSON)),
        'introformat': json['introformat'] == null ? undefined : json['introformat'],
        'lang': json['lang'] == null ? undefined : json['lang'],
        'latesubmissions': json['latesubmissions'] == null ? undefined : json['latesubmissions'],
        'maxbytes': json['maxbytes'] == null ? undefined : json['maxbytes'],
        'name': json['name'] == null ? undefined : json['name'],
        'nattachments': json['nattachments'] == null ? undefined : json['nattachments'],
        'overallfeedbackfiles': json['overallfeedbackfiles'] == null ? undefined : json['overallfeedbackfiles'],
        'overallfeedbackfiletypes': json['overallfeedbackfiletypes'] == null ? undefined : json['overallfeedbackfiletypes'],
        'overallfeedbackmaxbytes': json['overallfeedbackmaxbytes'] == null ? undefined : json['overallfeedbackmaxbytes'],
        'overallfeedbackmode': json['overallfeedbackmode'] == null ? undefined : json['overallfeedbackmode'],
        'phase': json['phase'] == null ? undefined : json['phase'],
        'phaseswitchassessment': json['phaseswitchassessment'] == null ? undefined : json['phaseswitchassessment'],
        'strategy': json['strategy'] == null ? undefined : json['strategy'],
        'submissionend': json['submissionend'] == null ? undefined : json['submissionend'],
        'submissionfiletypes': json['submissionfiletypes'] == null ? undefined : json['submissionfiletypes'],
        'submissionstart': json['submissionstart'] == null ? undefined : json['submissionstart'],
        'submissiontypefile': json['submissiontypefile'] == null ? undefined : json['submissiontypefile'],
        'submissiontypetext': json['submissiontypetext'] == null ? undefined : json['submissiontypetext'],
        'timemodified': json['timemodified'] == null ? undefined : json['timemodified'],
        'useexamples': json['useexamples'] == null ? undefined : json['useexamples'],
        'usepeerassessment': json['usepeerassessment'] == null ? undefined : json['usepeerassessment'],
        'useselfassessment': json['useselfassessment'] == null ? undefined : json['useselfassessment'],
    };
}

export function ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInnerToJSON(value?: ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'assessmentend': value['assessmentend'],
        'assessmentstart': value['assessmentstart'],
        'conclusion': value['conclusion'],
        'conclusionfiles': value['conclusionfiles'] == null ? undefined : ((value['conclusionfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerToJSON)),
        'conclusionformat': value['conclusionformat'],
        'course': value['course'],
        'coursemodule': value['coursemodule'],
        'evaluation': value['evaluation'],
        'examplesmode': value['examplesmode'],
        'grade': value['grade'],
        'gradedecimals': value['gradedecimals'],
        'gradinggrade': value['gradinggrade'],
        'id': value['id'],
        'instructauthors': value['instructauthors'],
        'instructauthorsfiles': value['instructauthorsfiles'] == null ? undefined : ((value['instructauthorsfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerToJSON)),
        'instructauthorsformat': value['instructauthorsformat'],
        'instructreviewers': value['instructreviewers'],
        'instructreviewersfiles': value['instructreviewersfiles'] == null ? undefined : ((value['instructreviewersfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerToJSON)),
        'instructreviewersformat': value['instructreviewersformat'],
        'intro': value['intro'],
        'introfiles': value['introfiles'] == null ? undefined : ((value['introfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerToJSON)),
        'introformat': value['introformat'],
        'lang': value['lang'],
        'latesubmissions': value['latesubmissions'],
        'maxbytes': value['maxbytes'],
        'name': value['name'],
        'nattachments': value['nattachments'],
        'overallfeedbackfiles': value['overallfeedbackfiles'],
        'overallfeedbackfiletypes': value['overallfeedbackfiletypes'],
        'overallfeedbackmaxbytes': value['overallfeedbackmaxbytes'],
        'overallfeedbackmode': value['overallfeedbackmode'],
        'phase': value['phase'],
        'phaseswitchassessment': value['phaseswitchassessment'],
        'strategy': value['strategy'],
        'submissionend': value['submissionend'],
        'submissionfiletypes': value['submissionfiletypes'],
        'submissionstart': value['submissionstart'],
        'submissiontypefile': value['submissiontypefile'],
        'submissiontypetext': value['submissiontypetext'],
        'timemodified': value['timemodified'],
        'useexamples': value['useexamples'],
        'usepeerassessment': value['usepeerassessment'],
        'useselfassessment': value['useselfassessment'],
    };
}

