/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner } from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';
import {
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSONTyped,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON,
} from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';
import type { ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner } from './ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner';
import {
    ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInnerFromJSON,
    ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInnerFromJSONTyped,
    ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInnerToJSON,
} from './ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner';

/**
 * assignment information object
 * @export
 * @interface ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
 */
export interface ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner {
    /**
     * Description of activity
     * @type {string}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    activity?: string;
    /**
     * 
     * @type {Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    activityattachments?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>;
    /**
     * activity format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    activityformat?: number;
    /**
     * allow submissions from date
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    allowsubmissionsfromdate?: number;
    /**
     * method used to control opening new attempts
     * @type {string}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    attemptreopenmethod?: string;
    /**
     * if enabled, hide identities until reveal identities actioned
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    blindmarking?: number;
    /**
     * course module id
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    cmid?: number;
    /**
     * if enabled, set activity as complete following submission
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    completionsubmit?: number;
    /**
     * 
     * @type {Array<ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner>}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    configs?: Array<ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner>;
    /**
     * course id
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    course?: number;
    /**
     * date after which submission is not accepted without an extension
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    cutoffdate?: number;
    /**
     * assignment due date
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    duedate?: number;
    /**
     * grade type
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    grade?: number;
    /**
     * the expected date for marking the submissions
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    gradingduedate?: number;
    /**
     * If enabled, hide grader to student
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    hidegrader?: number;
    /**
     * assignment id
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    id?: number;
    /**
     * assignment intro, not allways returned because it deppends on the activity configuration
     * @type {string}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    intro?: string;
    /**
     * 
     * @type {Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    introattachments?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>;
    /**
     * 
     * @type {Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    introfiles?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>;
    /**
     * intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    introformat?: number;
    /**
     * enable marking allocation
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    markingallocation?: number;
    /**
     * enable marking workflow
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    markingworkflow?: number;
    /**
     * maximum number of attempts allowed
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    maxattempts?: number;
    /**
     * assignment name
     * @type {string}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    name?: string;
    /**
     * no submissions
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    nosubmissions?: number;
    /**
     * Prevent submission not in group
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    preventsubmissionnotingroup?: number;
    /**
     * if enabled, all team members must submit
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    requireallteammemberssubmit?: number;
    /**
     * student must accept submission statement
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    requiresubmissionstatement?: number;
    /**
     * show identities for a blind marking assignment
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    revealidentities?: number;
    /**
     * send notifications
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    sendlatenotifications?: number;
    /**
     * send notifications
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    sendnotifications?: number;
    /**
     * send student notifications (default)
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    sendstudentnotifications?: number;
    /**
     * Flag to only show files during submission
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    submissionattachments?: number;
    /**
     * submissions drafts
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    submissiondrafts?: number;
    /**
     * Submission statement formatted.
     * @type {string}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    submissionstatement?: string;
    /**
     * submissionstatement format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    submissionstatementformat?: number;
    /**
     * if enabled, students submit as a team
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    teamsubmission?: number;
    /**
     * the grouping id for the team submission groups
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    teamsubmissiongroupingid?: number;
    /**
     * Time limit to complete assigment
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    timelimit?: number;
    /**
     * last time assignment was modified
     * @type {number}
     * @memberof ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
     */
    timemodified?: number;
}

/**
 * Check if a given object implements the ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner interface.
 */
export function instanceOfModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner(value: object): boolean {
    return true;
}

export function ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerFromJSON(json: any): ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner {
    return ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerFromJSONTyped(json, false);
}

export function ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner {
    if (json == null) {
        return json;
    }
    return {
        
        'activity': json['activity'] == null ? undefined : json['activity'],
        'activityattachments': json['activityattachments'] == null ? undefined : ((json['activityattachments'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON)),
        'activityformat': json['activityformat'] == null ? undefined : json['activityformat'],
        'allowsubmissionsfromdate': json['allowsubmissionsfromdate'] == null ? undefined : json['allowsubmissionsfromdate'],
        'attemptreopenmethod': json['attemptreopenmethod'] == null ? undefined : json['attemptreopenmethod'],
        'blindmarking': json['blindmarking'] == null ? undefined : json['blindmarking'],
        'cmid': json['cmid'] == null ? undefined : json['cmid'],
        'completionsubmit': json['completionsubmit'] == null ? undefined : json['completionsubmit'],
        'configs': json['configs'] == null ? undefined : ((json['configs'] as Array<any>).map(ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInnerFromJSON)),
        'course': json['course'] == null ? undefined : json['course'],
        'cutoffdate': json['cutoffdate'] == null ? undefined : json['cutoffdate'],
        'duedate': json['duedate'] == null ? undefined : json['duedate'],
        'grade': json['grade'] == null ? undefined : json['grade'],
        'gradingduedate': json['gradingduedate'] == null ? undefined : json['gradingduedate'],
        'hidegrader': json['hidegrader'] == null ? undefined : json['hidegrader'],
        'id': json['id'] == null ? undefined : json['id'],
        'intro': json['intro'] == null ? undefined : json['intro'],
        'introattachments': json['introattachments'] == null ? undefined : ((json['introattachments'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON)),
        'introfiles': json['introfiles'] == null ? undefined : ((json['introfiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON)),
        'introformat': json['introformat'] == null ? undefined : json['introformat'],
        'markingallocation': json['markingallocation'] == null ? undefined : json['markingallocation'],
        'markingworkflow': json['markingworkflow'] == null ? undefined : json['markingworkflow'],
        'maxattempts': json['maxattempts'] == null ? undefined : json['maxattempts'],
        'name': json['name'] == null ? undefined : json['name'],
        'nosubmissions': json['nosubmissions'] == null ? undefined : json['nosubmissions'],
        'preventsubmissionnotingroup': json['preventsubmissionnotingroup'] == null ? undefined : json['preventsubmissionnotingroup'],
        'requireallteammemberssubmit': json['requireallteammemberssubmit'] == null ? undefined : json['requireallteammemberssubmit'],
        'requiresubmissionstatement': json['requiresubmissionstatement'] == null ? undefined : json['requiresubmissionstatement'],
        'revealidentities': json['revealidentities'] == null ? undefined : json['revealidentities'],
        'sendlatenotifications': json['sendlatenotifications'] == null ? undefined : json['sendlatenotifications'],
        'sendnotifications': json['sendnotifications'] == null ? undefined : json['sendnotifications'],
        'sendstudentnotifications': json['sendstudentnotifications'] == null ? undefined : json['sendstudentnotifications'],
        'submissionattachments': json['submissionattachments'] == null ? undefined : json['submissionattachments'],
        'submissiondrafts': json['submissiondrafts'] == null ? undefined : json['submissiondrafts'],
        'submissionstatement': json['submissionstatement'] == null ? undefined : json['submissionstatement'],
        'submissionstatementformat': json['submissionstatementformat'] == null ? undefined : json['submissionstatementformat'],
        'teamsubmission': json['teamsubmission'] == null ? undefined : json['teamsubmission'],
        'teamsubmissiongroupingid': json['teamsubmissiongroupingid'] == null ? undefined : json['teamsubmissiongroupingid'],
        'timelimit': json['timelimit'] == null ? undefined : json['timelimit'],
        'timemodified': json['timemodified'] == null ? undefined : json['timemodified'],
    };
}

export function ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerToJSON(value?: ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'activity': value['activity'],
        'activityattachments': value['activityattachments'] == null ? undefined : ((value['activityattachments'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON)),
        'activityformat': value['activityformat'],
        'allowsubmissionsfromdate': value['allowsubmissionsfromdate'],
        'attemptreopenmethod': value['attemptreopenmethod'],
        'blindmarking': value['blindmarking'],
        'cmid': value['cmid'],
        'completionsubmit': value['completionsubmit'],
        'configs': value['configs'] == null ? undefined : ((value['configs'] as Array<any>).map(ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInnerToJSON)),
        'course': value['course'],
        'cutoffdate': value['cutoffdate'],
        'duedate': value['duedate'],
        'grade': value['grade'],
        'gradingduedate': value['gradingduedate'],
        'hidegrader': value['hidegrader'],
        'id': value['id'],
        'intro': value['intro'],
        'introattachments': value['introattachments'] == null ? undefined : ((value['introattachments'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON)),
        'introfiles': value['introfiles'] == null ? undefined : ((value['introfiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON)),
        'introformat': value['introformat'],
        'markingallocation': value['markingallocation'],
        'markingworkflow': value['markingworkflow'],
        'maxattempts': value['maxattempts'],
        'name': value['name'],
        'nosubmissions': value['nosubmissions'],
        'preventsubmissionnotingroup': value['preventsubmissionnotingroup'],
        'requireallteammemberssubmit': value['requireallteammemberssubmit'],
        'requiresubmissionstatement': value['requiresubmissionstatement'],
        'revealidentities': value['revealidentities'],
        'sendlatenotifications': value['sendlatenotifications'],
        'sendnotifications': value['sendnotifications'],
        'sendstudentnotifications': value['sendstudentnotifications'],
        'submissionattachments': value['submissionattachments'],
        'submissiondrafts': value['submissiondrafts'],
        'submissionstatement': value['submissionstatement'],
        'submissionstatementformat': value['submissionstatementformat'],
        'teamsubmission': value['teamsubmission'],
        'teamsubmissiongroupingid': value['teamsubmissiongroupingid'],
        'timelimit': value['timelimit'],
        'timemodified': value['timemodified'],
    };
}

