/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CoreMessageGetConversationsRequest
 */
export interface CoreMessageGetConversationsRequest {
    /**
     * Whether to restrict the results to contain NO favourite
     *                 conversations (false), ONLY favourite conversation (true), or ignore any restriction altogether (null)
     * @type {boolean}
     * @memberof CoreMessageGetConversationsRequest
     */
    favourites?: boolean;
    /**
     * The offset to start at
     * @type {number}
     * @memberof CoreMessageGetConversationsRequest
     */
    limitfrom?: number;
    /**
     * Limit number of conversations to this
     * @type {number}
     * @memberof CoreMessageGetConversationsRequest
     */
    limitnum?: number;
    /**
     * Whether to include self-conversations (true) or ONLY private
     *                     conversations (false) when private conversations are requested.
     * @type {boolean}
     * @memberof CoreMessageGetConversationsRequest
     */
    mergeself?: boolean;
    /**
     * Filter by type
     * @type {number}
     * @memberof CoreMessageGetConversationsRequest
     */
    type?: number;
    /**
     * The id of the user who we are viewing conversations for
     * @type {number}
     * @memberof CoreMessageGetConversationsRequest
     */
    userid: number;
}

/**
 * Check if a given object implements the CoreMessageGetConversationsRequest interface.
 */
export function instanceOfCoreMessageGetConversationsRequest(value: object): boolean {
    if (!('userid' in value)) return false;
    return true;
}

export function CoreMessageGetConversationsRequestFromJSON(json: any): CoreMessageGetConversationsRequest {
    return CoreMessageGetConversationsRequestFromJSONTyped(json, false);
}

export function CoreMessageGetConversationsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreMessageGetConversationsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'favourites': json['favourites'] == null ? undefined : json['favourites'],
        'limitfrom': json['limitfrom'] == null ? undefined : json['limitfrom'],
        'limitnum': json['limitnum'] == null ? undefined : json['limitnum'],
        'mergeself': json['mergeself'] == null ? undefined : json['mergeself'],
        'type': json['type'] == null ? undefined : json['type'],
        'userid': json['userid'],
    };
}

export function CoreMessageGetConversationsRequestToJSON(value?: CoreMessageGetConversationsRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'favourites': value['favourites'],
        'limitfrom': value['limitfrom'],
        'limitnum': value['limitnum'],
        'mergeself': value['mergeself'],
        'type': value['type'],
        'userid': value['userid'],
    };
}

