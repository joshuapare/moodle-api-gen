/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CoreTagGetTagindexRequestTagindex
 */
export interface CoreTagGetTagindexRequestTagindex {
    /**
     * context id where to search for items
     * @type {number}
     * @memberof CoreTagGetTagindexRequestTagindex
     */
    ctx?: number;
    /**
     * exlusive mode for this tag area
     * @type {boolean}
     * @memberof CoreTagGetTagindexRequestTagindex
     */
    excl?: boolean;
    /**
     * context id where the link was displayed
     * @type {number}
     * @memberof CoreTagGetTagindexRequestTagindex
     */
    from?: number;
    /**
     * page number (0-based)
     * @type {number}
     * @memberof CoreTagGetTagindexRequestTagindex
     */
    page?: number;
    /**
     * search in the context recursive
     * @type {number}
     * @memberof CoreTagGetTagindexRequestTagindex
     */
    rec?: number;
    /**
     * tag area id
     * @type {number}
     * @memberof CoreTagGetTagindexRequestTagindex
     */
    ta: number;
    /**
     * tag name
     * @type {string}
     * @memberof CoreTagGetTagindexRequestTagindex
     */
    tag: string;
    /**
     * tag collection id
     * @type {number}
     * @memberof CoreTagGetTagindexRequestTagindex
     */
    tc: number;
}

/**
 * Check if a given object implements the CoreTagGetTagindexRequestTagindex interface.
 */
export function instanceOfCoreTagGetTagindexRequestTagindex(value: object): boolean {
    if (!('ta' in value)) return false;
    if (!('tag' in value)) return false;
    if (!('tc' in value)) return false;
    return true;
}

export function CoreTagGetTagindexRequestTagindexFromJSON(json: any): CoreTagGetTagindexRequestTagindex {
    return CoreTagGetTagindexRequestTagindexFromJSONTyped(json, false);
}

export function CoreTagGetTagindexRequestTagindexFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreTagGetTagindexRequestTagindex {
    if (json == null) {
        return json;
    }
    return {
        
        'ctx': json['ctx'] == null ? undefined : json['ctx'],
        'excl': json['excl'] == null ? undefined : json['excl'],
        'from': json['from'] == null ? undefined : json['from'],
        'page': json['page'] == null ? undefined : json['page'],
        'rec': json['rec'] == null ? undefined : json['rec'],
        'ta': json['ta'],
        'tag': json['tag'],
        'tc': json['tc'],
    };
}

export function CoreTagGetTagindexRequestTagindexToJSON(value?: CoreTagGetTagindexRequestTagindex | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'ctx': value['ctx'],
        'excl': value['excl'],
        'from': value['from'],
        'page': value['page'],
        'rec': value['rec'],
        'ta': value['ta'],
        'tag': value['tag'],
        'tc': value['tc'],
    };
}

