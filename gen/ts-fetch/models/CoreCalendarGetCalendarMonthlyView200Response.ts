/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreCalendarGetCalendarDayView200ResponseNextperiod } from './CoreCalendarGetCalendarDayView200ResponseNextperiod';
import {
    CoreCalendarGetCalendarDayView200ResponseNextperiodFromJSON,
    CoreCalendarGetCalendarDayView200ResponseNextperiodFromJSONTyped,
    CoreCalendarGetCalendarDayView200ResponseNextperiodToJSON,
} from './CoreCalendarGetCalendarDayView200ResponseNextperiod';
import type { CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInner } from './CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInner';
import {
    CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInnerFromJSON,
    CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInnerFromJSONTyped,
    CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInnerToJSON,
} from './CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInner';
import type { CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner } from './CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner';
import {
    CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerFromJSON,
    CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerFromJSONTyped,
    CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerToJSON,
} from './CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner';

/**
 * 
 * @export
 * @interface CoreCalendarGetCalendarMonthlyView200Response
 */
export interface CoreCalendarGetCalendarMonthlyView200Response {
    /**
     * calendarinstanceid
     * @type {number}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    calendarinstanceid: number;
    /**
     * categoryid
     * @type {number}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    categoryid?: number;
    /**
     * courseid
     * @type {number}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    courseid: number;
    /**
     * 
     * @type {CoreCalendarGetCalendarDayView200ResponseNextperiod}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    date: CoreCalendarGetCalendarDayView200ResponseNextperiod;
    /**
     * 
     * @type {Array<CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInner>}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    daynames: Array<CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInner>;
    /**
     * defaulteventcontext
     * @type {number}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    defaulteventcontext: number;
    /**
     * filter_selector
     * @type {string}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    filterSelector?: string;
    /**
     * includenavigation
     * @type {boolean}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    includenavigation: boolean;
    /**
     * initialeventsloaded
     * @type {boolean}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    initialeventsloaded: boolean;
    /**
     * larrow
     * @type {string}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    larrow: string;
    /**
     * 
     * @type {CoreCalendarGetCalendarDayView200ResponseNextperiod}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    nextperiod: CoreCalendarGetCalendarDayView200ResponseNextperiod;
    /**
     * nextperiodlink
     * @type {string}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    nextperiodlink: string;
    /**
     * nextperiodname
     * @type {string}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    nextperiodname: string;
    /**
     * periodname
     * @type {string}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    periodname: string;
    /**
     * 
     * @type {CoreCalendarGetCalendarDayView200ResponseNextperiod}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    previousperiod: CoreCalendarGetCalendarDayView200ResponseNextperiod;
    /**
     * previousperiodlink
     * @type {string}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    previousperiodlink: string;
    /**
     * previousperiodname
     * @type {string}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    previousperiodname: string;
    /**
     * rarrow
     * @type {string}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    rarrow: string;
    /**
     * showviewselector
     * @type {boolean}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    showviewselector: boolean;
    /**
     * url
     * @type {string}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    url: string;
    /**
     * view
     * @type {string}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    view: string;
    /**
     * viewinginblock
     * @type {boolean}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    viewinginblock: boolean;
    /**
     * viewingmonth
     * @type {boolean}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    viewingmonth: boolean;
    /**
     * 
     * @type {Array<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner>}
     * @memberof CoreCalendarGetCalendarMonthlyView200Response
     */
    weeks: Array<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner>;
}

/**
 * Check if a given object implements the CoreCalendarGetCalendarMonthlyView200Response interface.
 */
export function instanceOfCoreCalendarGetCalendarMonthlyView200Response(value: object): boolean {
    if (!('calendarinstanceid' in value)) return false;
    if (!('courseid' in value)) return false;
    if (!('date' in value)) return false;
    if (!('daynames' in value)) return false;
    if (!('defaulteventcontext' in value)) return false;
    if (!('includenavigation' in value)) return false;
    if (!('initialeventsloaded' in value)) return false;
    if (!('larrow' in value)) return false;
    if (!('nextperiod' in value)) return false;
    if (!('nextperiodlink' in value)) return false;
    if (!('nextperiodname' in value)) return false;
    if (!('periodname' in value)) return false;
    if (!('previousperiod' in value)) return false;
    if (!('previousperiodlink' in value)) return false;
    if (!('previousperiodname' in value)) return false;
    if (!('rarrow' in value)) return false;
    if (!('showviewselector' in value)) return false;
    if (!('url' in value)) return false;
    if (!('view' in value)) return false;
    if (!('viewinginblock' in value)) return false;
    if (!('viewingmonth' in value)) return false;
    if (!('weeks' in value)) return false;
    return true;
}

export function CoreCalendarGetCalendarMonthlyView200ResponseFromJSON(json: any): CoreCalendarGetCalendarMonthlyView200Response {
    return CoreCalendarGetCalendarMonthlyView200ResponseFromJSONTyped(json, false);
}

export function CoreCalendarGetCalendarMonthlyView200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreCalendarGetCalendarMonthlyView200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'calendarinstanceid': json['calendarinstanceid'],
        'categoryid': json['categoryid'] == null ? undefined : json['categoryid'],
        'courseid': json['courseid'],
        'date': CoreCalendarGetCalendarDayView200ResponseNextperiodFromJSON(json['date']),
        'daynames': ((json['daynames'] as Array<any>).map(CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInnerFromJSON)),
        'defaulteventcontext': json['defaulteventcontext'],
        'filterSelector': json['filter_selector'] == null ? undefined : json['filter_selector'],
        'includenavigation': json['includenavigation'],
        'initialeventsloaded': json['initialeventsloaded'],
        'larrow': json['larrow'],
        'nextperiod': CoreCalendarGetCalendarDayView200ResponseNextperiodFromJSON(json['nextperiod']),
        'nextperiodlink': json['nextperiodlink'],
        'nextperiodname': json['nextperiodname'],
        'periodname': json['periodname'],
        'previousperiod': CoreCalendarGetCalendarDayView200ResponseNextperiodFromJSON(json['previousperiod']),
        'previousperiodlink': json['previousperiodlink'],
        'previousperiodname': json['previousperiodname'],
        'rarrow': json['rarrow'],
        'showviewselector': json['showviewselector'],
        'url': json['url'],
        'view': json['view'],
        'viewinginblock': json['viewinginblock'],
        'viewingmonth': json['viewingmonth'],
        'weeks': ((json['weeks'] as Array<any>).map(CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerFromJSON)),
    };
}

export function CoreCalendarGetCalendarMonthlyView200ResponseToJSON(value?: CoreCalendarGetCalendarMonthlyView200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'calendarinstanceid': value['calendarinstanceid'],
        'categoryid': value['categoryid'],
        'courseid': value['courseid'],
        'date': CoreCalendarGetCalendarDayView200ResponseNextperiodToJSON(value['date']),
        'daynames': ((value['daynames'] as Array<any>).map(CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInnerToJSON)),
        'defaulteventcontext': value['defaulteventcontext'],
        'filter_selector': value['filterSelector'],
        'includenavigation': value['includenavigation'],
        'initialeventsloaded': value['initialeventsloaded'],
        'larrow': value['larrow'],
        'nextperiod': CoreCalendarGetCalendarDayView200ResponseNextperiodToJSON(value['nextperiod']),
        'nextperiodlink': value['nextperiodlink'],
        'nextperiodname': value['nextperiodname'],
        'periodname': value['periodname'],
        'previousperiod': CoreCalendarGetCalendarDayView200ResponseNextperiodToJSON(value['previousperiod']),
        'previousperiodlink': value['previousperiodlink'],
        'previousperiodname': value['previousperiodname'],
        'rarrow': value['rarrow'],
        'showviewselector': value['showviewselector'],
        'url': value['url'],
        'view': value['view'],
        'viewinginblock': value['viewinginblock'],
        'viewingmonth': value['viewingmonth'],
        'weeks': ((value['weeks'] as Array<any>).map(CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerToJSON)),
    };
}

