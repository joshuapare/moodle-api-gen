/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModQuizGetUserAttempts200ResponseAttemptsInner
 */
export interface ModQuizGetUserAttempts200ResponseAttemptsInner {
    /**
     * Sequentially numbers this students attempts at this quiz.
     * @type {number}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    attempt?: number;
    /**
     * Attempt current page.
     * @type {number}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    currentpage?: number;
    /**
     * Time when the student was notified that manual grading of their attempt was complete.
     * @type {number}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    gradednotificationsenttime?: number;
    /**
     * Attempt id.
     * @type {number}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    id?: number;
    /**
     * Attempt layout.
     * @type {string}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    layout?: string;
    /**
     * Whether is a preview attempt or not.
     * @type {number}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    preview?: number;
    /**
     * Foreign key reference to the quiz that was attempted.
     * @type {number}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    quiz?: number;
    /**
     * The current state of the attempts. 'inprogress',
     *                                                 'overdue', 'finished' or 'abandoned'.
     * @type {string}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    state?: string;
    /**
     * Total marks for this attempt.
     * @type {number}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    sumgrades?: number;
    /**
     * Next time quiz cron should check attempt for
     *                                                         state changes.  NULL means never check.
     * @type {number}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    timecheckstate?: number;
    /**
     * Time when the attempt was submitted.
     *                                                     0 if the attempt has not been submitted yet.
     * @type {number}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    timefinish?: number;
    /**
     * Last modified time.
     * @type {number}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    timemodified?: number;
    /**
     * Last modified time via webservices.
     * @type {number}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    timemodifiedoffline?: number;
    /**
     * Time when the attempt was started.
     * @type {number}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    timestart?: number;
    /**
     * Foreign key reference to the question_usage that holds the
     *                                                     details of the the question_attempts that make up this quiz
     *                                                     attempt.
     * @type {number}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    uniqueid?: number;
    /**
     * Foreign key reference to the user whose attempt this is.
     * @type {number}
     * @memberof ModQuizGetUserAttempts200ResponseAttemptsInner
     */
    userid?: number;
}

/**
 * Check if a given object implements the ModQuizGetUserAttempts200ResponseAttemptsInner interface.
 */
export function instanceOfModQuizGetUserAttempts200ResponseAttemptsInner(value: object): boolean {
    return true;
}

export function ModQuizGetUserAttempts200ResponseAttemptsInnerFromJSON(json: any): ModQuizGetUserAttempts200ResponseAttemptsInner {
    return ModQuizGetUserAttempts200ResponseAttemptsInnerFromJSONTyped(json, false);
}

export function ModQuizGetUserAttempts200ResponseAttemptsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModQuizGetUserAttempts200ResponseAttemptsInner {
    if (json == null) {
        return json;
    }
    return {
        
        'attempt': json['attempt'] == null ? undefined : json['attempt'],
        'currentpage': json['currentpage'] == null ? undefined : json['currentpage'],
        'gradednotificationsenttime': json['gradednotificationsenttime'] == null ? undefined : json['gradednotificationsenttime'],
        'id': json['id'] == null ? undefined : json['id'],
        'layout': json['layout'] == null ? undefined : json['layout'],
        'preview': json['preview'] == null ? undefined : json['preview'],
        'quiz': json['quiz'] == null ? undefined : json['quiz'],
        'state': json['state'] == null ? undefined : json['state'],
        'sumgrades': json['sumgrades'] == null ? undefined : json['sumgrades'],
        'timecheckstate': json['timecheckstate'] == null ? undefined : json['timecheckstate'],
        'timefinish': json['timefinish'] == null ? undefined : json['timefinish'],
        'timemodified': json['timemodified'] == null ? undefined : json['timemodified'],
        'timemodifiedoffline': json['timemodifiedoffline'] == null ? undefined : json['timemodifiedoffline'],
        'timestart': json['timestart'] == null ? undefined : json['timestart'],
        'uniqueid': json['uniqueid'] == null ? undefined : json['uniqueid'],
        'userid': json['userid'] == null ? undefined : json['userid'],
    };
}

export function ModQuizGetUserAttempts200ResponseAttemptsInnerToJSON(value?: ModQuizGetUserAttempts200ResponseAttemptsInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'attempt': value['attempt'],
        'currentpage': value['currentpage'],
        'gradednotificationsenttime': value['gradednotificationsenttime'],
        'id': value['id'],
        'layout': value['layout'],
        'preview': value['preview'],
        'quiz': value['quiz'],
        'state': value['state'],
        'sumgrades': value['sumgrades'],
        'timecheckstate': value['timecheckstate'],
        'timefinish': value['timefinish'],
        'timemodified': value['timemodified'],
        'timemodifiedoffline': value['timemodifiedoffline'],
        'timestart': value['timestart'],
        'uniqueid': value['uniqueid'],
        'userid': value['userid'],
    };
}

