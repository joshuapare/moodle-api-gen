/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ModGlossaryAddEntryRequestOptionsInner } from './ModGlossaryAddEntryRequestOptionsInner';
import {
    ModGlossaryAddEntryRequestOptionsInnerFromJSON,
    ModGlossaryAddEntryRequestOptionsInnerFromJSONTyped,
    ModGlossaryAddEntryRequestOptionsInnerToJSON,
} from './ModGlossaryAddEntryRequestOptionsInner';

/**
 * 
 * @export
 * @interface ModGlossaryAddEntryRequest
 */
export interface ModGlossaryAddEntryRequest {
    /**
     * Glossary concept
     * @type {string}
     * @memberof ModGlossaryAddEntryRequest
     */
    concept: string;
    /**
     * Glossary concept definition
     * @type {string}
     * @memberof ModGlossaryAddEntryRequest
     */
    definition: string;
    /**
     * definition format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModGlossaryAddEntryRequest
     */
    definitionformat: number;
    /**
     * Glossary id
     * @type {number}
     * @memberof ModGlossaryAddEntryRequest
     */
    glossaryid: number;
    /**
     * 
     * @type {Array<ModGlossaryAddEntryRequestOptionsInner>}
     * @memberof ModGlossaryAddEntryRequest
     */
    options?: Array<ModGlossaryAddEntryRequestOptionsInner>;
}

/**
 * Check if a given object implements the ModGlossaryAddEntryRequest interface.
 */
export function instanceOfModGlossaryAddEntryRequest(value: object): boolean {
    if (!('concept' in value)) return false;
    if (!('definition' in value)) return false;
    if (!('definitionformat' in value)) return false;
    if (!('glossaryid' in value)) return false;
    return true;
}

export function ModGlossaryAddEntryRequestFromJSON(json: any): ModGlossaryAddEntryRequest {
    return ModGlossaryAddEntryRequestFromJSONTyped(json, false);
}

export function ModGlossaryAddEntryRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModGlossaryAddEntryRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'concept': json['concept'],
        'definition': json['definition'],
        'definitionformat': json['definitionformat'],
        'glossaryid': json['glossaryid'],
        'options': json['options'] == null ? undefined : ((json['options'] as Array<any>).map(ModGlossaryAddEntryRequestOptionsInnerFromJSON)),
    };
}

export function ModGlossaryAddEntryRequestToJSON(value?: ModGlossaryAddEntryRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'concept': value['concept'],
        'definition': value['definition'],
        'definitionformat': value['definitionformat'],
        'glossaryid': value['glossaryid'],
        'options': value['options'] == null ? undefined : ((value['options'] as Array<any>).map(ModGlossaryAddEntryRequestOptionsInnerToJSON)),
    };
}

