/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner } from './CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner';
import {
    CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSON,
    CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSONTyped,
    CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerToJSON,
} from './CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner';

/**
 * 
 * @export
 * @interface ModWorkshopGetAssessment200ResponseAssessment
 */
export interface ModWorkshopGetAssessment200ResponseAssessment {
    /**
     * 
     * @type {Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    feedbackattachmentfiles: Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>;
    /**
     * The comment/feedback from the reviewer for the author.
     * @type {string}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    feedbackauthor: string;
    /**
     * Are there some files attached to the feedbackauthor field?
     *                     Sets to 1 by file_postupdate_standard_filemanager().
     * @type {number}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    feedbackauthorattachment: number;
    /**
     * feedbackauthor format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    feedbackauthorformat?: number;
    /**
     * 
     * @type {Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    feedbackcontentfiles: Array<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>;
    /**
     * The comment/feedback from the teacher for the reviewer.
     *                     For example the reason why the grade for assessment was overridden
     * @type {string}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    feedbackreviewer?: string;
    /**
     * feedbackreviewer format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    feedbackreviewerformat?: number;
    /**
     * The aggregated grade for submission suggested by the reviewer.
     *                     The grade 0..100 is computed from the values assigned to the assessment dimensions fields. If NULL then it has not been aggregated yet.
     * @type {number}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    grade: number;
    /**
     * The computed grade 0..100 for this assessment. If NULL then it has not been computed yet.
     * @type {number}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    gradinggrade: number;
    /**
     * Grade for the assessment manually overridden by a teacher.
     *                     Grade is always from interval 0..100. If NULL then the grade is not overriden.
     * @type {number}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    gradinggradeover: number;
    /**
     * The id of the user who has overridden the grade for submission.
     * @type {number}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    gradinggradeoverby: number;
    /**
     * The primary key of the record.
     * @type {number}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    id: number;
    /**
     * The id of the reviewer who makes this assessment
     * @type {number}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    reviewerid: number;
    /**
     * The id of the assessed submission
     * @type {number}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    submissionid: number;
    /**
     * If 0 then the assessment was allocated but the reviewer has not assessed yet.
     *                     If greater than 0 then the timestamp of when the reviewer assessed for the first time
     * @type {number}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    timecreated: number;
    /**
     * If 0 then the assessment was allocated but the reviewer has not assessed yet.
     *                     If greater than 0 then the timestamp of when the reviewer assessed for the last time
     * @type {number}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    timemodified: number;
    /**
     * The weight of the assessment for the purposes of aggregation
     * @type {number}
     * @memberof ModWorkshopGetAssessment200ResponseAssessment
     */
    weight: number;
}

/**
 * Check if a given object implements the ModWorkshopGetAssessment200ResponseAssessment interface.
 */
export function instanceOfModWorkshopGetAssessment200ResponseAssessment(value: object): boolean {
    if (!('feedbackattachmentfiles' in value)) return false;
    if (!('feedbackauthor' in value)) return false;
    if (!('feedbackauthorattachment' in value)) return false;
    if (!('feedbackcontentfiles' in value)) return false;
    if (!('grade' in value)) return false;
    if (!('gradinggrade' in value)) return false;
    if (!('gradinggradeover' in value)) return false;
    if (!('gradinggradeoverby' in value)) return false;
    if (!('id' in value)) return false;
    if (!('reviewerid' in value)) return false;
    if (!('submissionid' in value)) return false;
    if (!('timecreated' in value)) return false;
    if (!('timemodified' in value)) return false;
    if (!('weight' in value)) return false;
    return true;
}

export function ModWorkshopGetAssessment200ResponseAssessmentFromJSON(json: any): ModWorkshopGetAssessment200ResponseAssessment {
    return ModWorkshopGetAssessment200ResponseAssessmentFromJSONTyped(json, false);
}

export function ModWorkshopGetAssessment200ResponseAssessmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModWorkshopGetAssessment200ResponseAssessment {
    if (json == null) {
        return json;
    }
    return {
        
        'feedbackattachmentfiles': ((json['feedbackattachmentfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSON)),
        'feedbackauthor': json['feedbackauthor'],
        'feedbackauthorattachment': json['feedbackauthorattachment'],
        'feedbackauthorformat': json['feedbackauthorformat'] == null ? undefined : json['feedbackauthorformat'],
        'feedbackcontentfiles': ((json['feedbackcontentfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerFromJSON)),
        'feedbackreviewer': json['feedbackreviewer'] == null ? undefined : json['feedbackreviewer'],
        'feedbackreviewerformat': json['feedbackreviewerformat'] == null ? undefined : json['feedbackreviewerformat'],
        'grade': json['grade'],
        'gradinggrade': json['gradinggrade'],
        'gradinggradeover': json['gradinggradeover'],
        'gradinggradeoverby': json['gradinggradeoverby'],
        'id': json['id'],
        'reviewerid': json['reviewerid'],
        'submissionid': json['submissionid'],
        'timecreated': json['timecreated'],
        'timemodified': json['timemodified'],
        'weight': json['weight'],
    };
}

export function ModWorkshopGetAssessment200ResponseAssessmentToJSON(value?: ModWorkshopGetAssessment200ResponseAssessment | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'feedbackattachmentfiles': ((value['feedbackattachmentfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerToJSON)),
        'feedbackauthor': value['feedbackauthor'],
        'feedbackauthorattachment': value['feedbackauthorattachment'],
        'feedbackauthorformat': value['feedbackauthorformat'],
        'feedbackcontentfiles': ((value['feedbackcontentfiles'] as Array<any>).map(CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInnerToJSON)),
        'feedbackreviewer': value['feedbackreviewer'],
        'feedbackreviewerformat': value['feedbackreviewerformat'],
        'grade': value['grade'],
        'gradinggrade': value['gradinggrade'],
        'gradinggradeover': value['gradinggradeover'],
        'gradinggradeoverby': value['gradinggradeoverby'],
        'id': value['id'],
        'reviewerid': value['reviewerid'],
        'submissionid': value['submissionid'],
        'timecreated': value['timecreated'],
        'timemodified': value['timemodified'],
        'weight': value['weight'],
    };
}

