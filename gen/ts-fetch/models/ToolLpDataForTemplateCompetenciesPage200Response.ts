/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreCompetencyCreateTemplate200Response } from './CoreCompetencyCreateTemplate200Response';
import {
    CoreCompetencyCreateTemplate200ResponseFromJSON,
    CoreCompetencyCreateTemplate200ResponseFromJSONTyped,
    CoreCompetencyCreateTemplate200ResponseToJSON,
} from './CoreCompetencyCreateTemplate200Response';
import type { ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner } from './ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner';
import {
    ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInnerFromJSON,
    ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInnerFromJSONTyped,
    ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInnerToJSON,
} from './ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner';
import type { ToolLpDataForTemplateCompetenciesPage200ResponseStatistics } from './ToolLpDataForTemplateCompetenciesPage200ResponseStatistics';
import {
    ToolLpDataForTemplateCompetenciesPage200ResponseStatisticsFromJSON,
    ToolLpDataForTemplateCompetenciesPage200ResponseStatisticsFromJSONTyped,
    ToolLpDataForTemplateCompetenciesPage200ResponseStatisticsToJSON,
} from './ToolLpDataForTemplateCompetenciesPage200ResponseStatistics';

/**
 * 
 * @export
 * @interface ToolLpDataForTemplateCompetenciesPage200Response
 */
export interface ToolLpDataForTemplateCompetenciesPage200Response {
    /**
     * User can manage competency frameworks
     * @type {boolean}
     * @memberof ToolLpDataForTemplateCompetenciesPage200Response
     */
    canmanagecompetencyframeworks: boolean;
    /**
     * User can manage learning plan templates
     * @type {boolean}
     * @memberof ToolLpDataForTemplateCompetenciesPage200Response
     */
    canmanagetemplatecompetencies: boolean;
    /**
     * 
     * @type {Array<ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner>}
     * @memberof ToolLpDataForTemplateCompetenciesPage200Response
     */
    competencies: Array<ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner>;
    /**
     * Url to the manage competencies page.
     * @type {string}
     * @memberof ToolLpDataForTemplateCompetenciesPage200Response
     */
    manageurl: string;
    /**
     * Context ID
     * @type {number}
     * @memberof ToolLpDataForTemplateCompetenciesPage200Response
     */
    pagecontextid: number;
    /**
     * Base URL of the plugin.
     * @type {string}
     * @memberof ToolLpDataForTemplateCompetenciesPage200Response
     */
    pluginbaseurl: string;
    /**
     * 
     * @type {ToolLpDataForTemplateCompetenciesPage200ResponseStatistics}
     * @memberof ToolLpDataForTemplateCompetenciesPage200Response
     */
    statistics: ToolLpDataForTemplateCompetenciesPage200ResponseStatistics;
    /**
     * 
     * @type {CoreCompetencyCreateTemplate200Response}
     * @memberof ToolLpDataForTemplateCompetenciesPage200Response
     */
    template: CoreCompetencyCreateTemplate200Response;
}

/**
 * Check if a given object implements the ToolLpDataForTemplateCompetenciesPage200Response interface.
 */
export function instanceOfToolLpDataForTemplateCompetenciesPage200Response(value: object): boolean {
    if (!('canmanagecompetencyframeworks' in value)) return false;
    if (!('canmanagetemplatecompetencies' in value)) return false;
    if (!('competencies' in value)) return false;
    if (!('manageurl' in value)) return false;
    if (!('pagecontextid' in value)) return false;
    if (!('pluginbaseurl' in value)) return false;
    if (!('statistics' in value)) return false;
    if (!('template' in value)) return false;
    return true;
}

export function ToolLpDataForTemplateCompetenciesPage200ResponseFromJSON(json: any): ToolLpDataForTemplateCompetenciesPage200Response {
    return ToolLpDataForTemplateCompetenciesPage200ResponseFromJSONTyped(json, false);
}

export function ToolLpDataForTemplateCompetenciesPage200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToolLpDataForTemplateCompetenciesPage200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'canmanagecompetencyframeworks': json['canmanagecompetencyframeworks'],
        'canmanagetemplatecompetencies': json['canmanagetemplatecompetencies'],
        'competencies': ((json['competencies'] as Array<any>).map(ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInnerFromJSON)),
        'manageurl': json['manageurl'],
        'pagecontextid': json['pagecontextid'],
        'pluginbaseurl': json['pluginbaseurl'],
        'statistics': ToolLpDataForTemplateCompetenciesPage200ResponseStatisticsFromJSON(json['statistics']),
        'template': CoreCompetencyCreateTemplate200ResponseFromJSON(json['template']),
    };
}

export function ToolLpDataForTemplateCompetenciesPage200ResponseToJSON(value?: ToolLpDataForTemplateCompetenciesPage200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'canmanagecompetencyframeworks': value['canmanagecompetencyframeworks'],
        'canmanagetemplatecompetencies': value['canmanagetemplatecompetencies'],
        'competencies': ((value['competencies'] as Array<any>).map(ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInnerToJSON)),
        'manageurl': value['manageurl'],
        'pagecontextid': value['pagecontextid'],
        'pluginbaseurl': value['pluginbaseurl'],
        'statistics': ToolLpDataForTemplateCompetenciesPage200ResponseStatisticsToJSON(value['statistics']),
        'template': CoreCompetencyCreateTemplate200ResponseToJSON(value['template']),
    };
}

