/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreReportbuilderColumnsDelete200Response } from './CoreReportbuilderColumnsDelete200Response';
import {
    CoreReportbuilderColumnsDelete200ResponseFromJSON,
    CoreReportbuilderColumnsDelete200ResponseFromJSONTyped,
    CoreReportbuilderColumnsDelete200ResponseToJSON,
} from './CoreReportbuilderColumnsDelete200Response';
import type { CoreReportbuilderConditionsDelete200Response } from './CoreReportbuilderConditionsDelete200Response';
import {
    CoreReportbuilderConditionsDelete200ResponseFromJSON,
    CoreReportbuilderConditionsDelete200ResponseFromJSONTyped,
    CoreReportbuilderConditionsDelete200ResponseToJSON,
} from './CoreReportbuilderConditionsDelete200Response';
import type { CoreReportbuilderFiltersDelete200Response } from './CoreReportbuilderFiltersDelete200Response';
import {
    CoreReportbuilderFiltersDelete200ResponseFromJSON,
    CoreReportbuilderFiltersDelete200ResponseFromJSONTyped,
    CoreReportbuilderFiltersDelete200ResponseToJSON,
} from './CoreReportbuilderFiltersDelete200Response';
import type { CoreReportbuilderReportsGet200ResponseAttributesInner } from './CoreReportbuilderReportsGet200ResponseAttributesInner';
import {
    CoreReportbuilderReportsGet200ResponseAttributesInnerFromJSON,
    CoreReportbuilderReportsGet200ResponseAttributesInnerFromJSONTyped,
    CoreReportbuilderReportsGet200ResponseAttributesInnerToJSON,
} from './CoreReportbuilderReportsGet200ResponseAttributesInner';
import type { CoreReportbuilderReportsGet200ResponseCardview } from './CoreReportbuilderReportsGet200ResponseCardview';
import {
    CoreReportbuilderReportsGet200ResponseCardviewFromJSON,
    CoreReportbuilderReportsGet200ResponseCardviewFromJSONTyped,
    CoreReportbuilderReportsGet200ResponseCardviewToJSON,
} from './CoreReportbuilderReportsGet200ResponseCardview';
import type { CoreReportbuilderReportsGet200ResponseSidebarmenucards } from './CoreReportbuilderReportsGet200ResponseSidebarmenucards';
import {
    CoreReportbuilderReportsGet200ResponseSidebarmenucardsFromJSON,
    CoreReportbuilderReportsGet200ResponseSidebarmenucardsFromJSONTyped,
    CoreReportbuilderReportsGet200ResponseSidebarmenucardsToJSON,
} from './CoreReportbuilderReportsGet200ResponseSidebarmenucards';

/**
 * 
 * @export
 * @interface CoreReportbuilderReportsGet200Response
 */
export interface CoreReportbuilderReportsGet200Response {
    /**
     * area
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    area: string;
    /**
     * 
     * @type {Array<CoreReportbuilderReportsGet200ResponseAttributesInner>}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    attributes: Array<CoreReportbuilderReportsGet200ResponseAttributesInner>;
    /**
     * 
     * @type {CoreReportbuilderReportsGet200ResponseCardview}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    cardview?: CoreReportbuilderReportsGet200ResponseCardview;
    /**
     * classes
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    classes: string;
    /**
     * component
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    component: string;
    /**
     * conditiondata
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    conditiondata: string;
    /**
     * 
     * @type {CoreReportbuilderConditionsDelete200Response}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    conditions?: CoreReportbuilderConditionsDelete200Response;
    /**
     * contextid
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    contextid: number;
    /**
     * editmode
     * @type {boolean}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    editmode: boolean;
    /**
     * 
     * @type {CoreReportbuilderFiltersDelete200Response}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    filters?: CoreReportbuilderFiltersDelete200Response;
    /**
     * filtersapplied
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    filtersapplied: number;
    /**
     * filtersform
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    filtersform: string;
    /**
     * filterspresent
     * @type {boolean}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    filterspresent: boolean;
    /**
     * id
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    id: number;
    /**
     * itemid
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    itemid: number;
    /**
     * javascript
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    javascript: string;
    /**
     * name
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    name: string;
    /**
     * settingsdata
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    settingsdata: string;
    /**
     * 
     * @type {CoreReportbuilderReportsGet200ResponseSidebarmenucards}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    sidebarmenucards?: CoreReportbuilderReportsGet200ResponseSidebarmenucards;
    /**
     * 
     * @type {CoreReportbuilderColumnsDelete200Response}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    sorting?: CoreReportbuilderColumnsDelete200Response;
    /**
     * source
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    source: string;
    /**
     * table
     * @type {string}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    table: string;
    /**
     * timecreated
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    timecreated: number;
    /**
     * timemodified
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    timemodified: number;
    /**
     * type
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    type: number;
    /**
     * uniquerows
     * @type {boolean}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    uniquerows: boolean;
    /**
     * usercreated
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    usercreated: number;
    /**
     * usermodified
     * @type {number}
     * @memberof CoreReportbuilderReportsGet200Response
     */
    usermodified: number;
}

/**
 * Check if a given object implements the CoreReportbuilderReportsGet200Response interface.
 */
export function instanceOfCoreReportbuilderReportsGet200Response(value: object): boolean {
    if (!('area' in value)) return false;
    if (!('attributes' in value)) return false;
    if (!('classes' in value)) return false;
    if (!('component' in value)) return false;
    if (!('conditiondata' in value)) return false;
    if (!('contextid' in value)) return false;
    if (!('editmode' in value)) return false;
    if (!('filtersapplied' in value)) return false;
    if (!('filtersform' in value)) return false;
    if (!('filterspresent' in value)) return false;
    if (!('id' in value)) return false;
    if (!('itemid' in value)) return false;
    if (!('javascript' in value)) return false;
    if (!('name' in value)) return false;
    if (!('settingsdata' in value)) return false;
    if (!('source' in value)) return false;
    if (!('table' in value)) return false;
    if (!('timecreated' in value)) return false;
    if (!('timemodified' in value)) return false;
    if (!('type' in value)) return false;
    if (!('uniquerows' in value)) return false;
    if (!('usercreated' in value)) return false;
    if (!('usermodified' in value)) return false;
    return true;
}

export function CoreReportbuilderReportsGet200ResponseFromJSON(json: any): CoreReportbuilderReportsGet200Response {
    return CoreReportbuilderReportsGet200ResponseFromJSONTyped(json, false);
}

export function CoreReportbuilderReportsGet200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreReportbuilderReportsGet200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'area': json['area'],
        'attributes': ((json['attributes'] as Array<any>).map(CoreReportbuilderReportsGet200ResponseAttributesInnerFromJSON)),
        'cardview': json['cardview'] == null ? undefined : CoreReportbuilderReportsGet200ResponseCardviewFromJSON(json['cardview']),
        'classes': json['classes'],
        'component': json['component'],
        'conditiondata': json['conditiondata'],
        'conditions': json['conditions'] == null ? undefined : CoreReportbuilderConditionsDelete200ResponseFromJSON(json['conditions']),
        'contextid': json['contextid'],
        'editmode': json['editmode'],
        'filters': json['filters'] == null ? undefined : CoreReportbuilderFiltersDelete200ResponseFromJSON(json['filters']),
        'filtersapplied': json['filtersapplied'],
        'filtersform': json['filtersform'],
        'filterspresent': json['filterspresent'],
        'id': json['id'],
        'itemid': json['itemid'],
        'javascript': json['javascript'],
        'name': json['name'],
        'settingsdata': json['settingsdata'],
        'sidebarmenucards': json['sidebarmenucards'] == null ? undefined : CoreReportbuilderReportsGet200ResponseSidebarmenucardsFromJSON(json['sidebarmenucards']),
        'sorting': json['sorting'] == null ? undefined : CoreReportbuilderColumnsDelete200ResponseFromJSON(json['sorting']),
        'source': json['source'],
        'table': json['table'],
        'timecreated': json['timecreated'],
        'timemodified': json['timemodified'],
        'type': json['type'],
        'uniquerows': json['uniquerows'],
        'usercreated': json['usercreated'],
        'usermodified': json['usermodified'],
    };
}

export function CoreReportbuilderReportsGet200ResponseToJSON(value?: CoreReportbuilderReportsGet200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'area': value['area'],
        'attributes': ((value['attributes'] as Array<any>).map(CoreReportbuilderReportsGet200ResponseAttributesInnerToJSON)),
        'cardview': CoreReportbuilderReportsGet200ResponseCardviewToJSON(value['cardview']),
        'classes': value['classes'],
        'component': value['component'],
        'conditiondata': value['conditiondata'],
        'conditions': CoreReportbuilderConditionsDelete200ResponseToJSON(value['conditions']),
        'contextid': value['contextid'],
        'editmode': value['editmode'],
        'filters': CoreReportbuilderFiltersDelete200ResponseToJSON(value['filters']),
        'filtersapplied': value['filtersapplied'],
        'filtersform': value['filtersform'],
        'filterspresent': value['filterspresent'],
        'id': value['id'],
        'itemid': value['itemid'],
        'javascript': value['javascript'],
        'name': value['name'],
        'settingsdata': value['settingsdata'],
        'sidebarmenucards': CoreReportbuilderReportsGet200ResponseSidebarmenucardsToJSON(value['sidebarmenucards']),
        'sorting': CoreReportbuilderColumnsDelete200ResponseToJSON(value['sorting']),
        'source': value['source'],
        'table': value['table'],
        'timecreated': value['timecreated'],
        'timemodified': value['timemodified'],
        'type': value['type'],
        'uniquerows': value['uniquerows'],
        'usercreated': value['usercreated'],
        'usermodified': value['usermodified'],
    };
}

