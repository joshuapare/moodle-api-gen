/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthEmailSignupUser200ResponseWarningsInner } from './AuthEmailSignupUser200ResponseWarningsInner';
import {
    AuthEmailSignupUser200ResponseWarningsInnerFromJSON,
    AuthEmailSignupUser200ResponseWarningsInnerFromJSONTyped,
    AuthEmailSignupUser200ResponseWarningsInnerToJSON,
} from './AuthEmailSignupUser200ResponseWarningsInner';

/**
 * 
 * @export
 * @interface ModWorkshopGetWorkshopAccessInformation200Response
 */
export interface ModWorkshopGetWorkshopAccessInformation200Response {
    /**
     * Is the user allowed to create/edit his assessments?
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    assessingallowed: boolean;
    /**
     * Are reviewers allowed to create/edit their assessments of the example submissions?.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    assessingexamplesallowed: boolean;
    /**
     * Whether the user has the capability mod/workshop:addinstance allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canaddinstance: boolean;
    /**
     * Whether the user has the capability mod/workshop:allocate allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canallocate: boolean;
    /**
     * Whether the user has the capability mod/workshop:deletesubmissions allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    candeletesubmissions: boolean;
    /**
     * Whether the user has the capability mod/workshop:editdimensions allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    caneditdimensions: boolean;
    /**
     * Whether the user has the capability mod/workshop:exportsubmissions allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canexportsubmissions: boolean;
    /**
     * Whether the user has the capability mod/workshop:ignoredeadlines allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canignoredeadlines: boolean;
    /**
     * Whether the user has the capability mod/workshop:manageexamples allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canmanageexamples: boolean;
    /**
     * Whether the user has the capability mod/workshop:overridegrades allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canoverridegrades: boolean;
    /**
     * Whether the user has the capability mod/workshop:peerassess allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canpeerassess: boolean;
    /**
     * Whether the user has the capability mod/workshop:publishsubmissions allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canpublishsubmissions: boolean;
    /**
     * Whether the user has the capability mod/workshop:submit allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    cansubmit: boolean;
    /**
     * Whether the user has the capability mod/workshop:switchphase allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canswitchphase: boolean;
    /**
     * Whether the user has the capability mod/workshop:view allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canview: boolean;
    /**
     * Whether the user has the capability mod/workshop:viewallassessments allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canviewallassessments: boolean;
    /**
     * Whether the user has the capability mod/workshop:viewallsubmissions allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canviewallsubmissions: boolean;
    /**
     * Whether the user has the capability mod/workshop:viewauthornames allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canviewauthornames: boolean;
    /**
     * Whether the user has the capability mod/workshop:viewauthorpublished allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canviewauthorpublished: boolean;
    /**
     * Whether the user has the capability mod/workshop:viewpublishedsubmissions allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canviewpublishedsubmissions: boolean;
    /**
     * Whether the user has the capability mod/workshop:viewreviewernames allowed.
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    canviewreviewernames: boolean;
    /**
     * Is the given user allowed to create their submission?
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    creatingsubmissionallowed: boolean;
    /**
     * Whether the given user has assessed all his required examples before assessment
     *                 (always true if there are not examples to assessor not configured to check before assessment).
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    examplesassessedbeforeassessment: boolean;
    /**
     * Whether the given user has assessed all his required examples before submission
     *                 (always true if there are not examples to assess or not configured to check before submission).
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    examplesassessedbeforesubmission: boolean;
    /**
     * Is the user allowed to modify his existing submission?
     * @type {boolean}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    modifyingsubmissionallowed: boolean;
    /**
     * 
     * @type {Array<AuthEmailSignupUser200ResponseWarningsInner>}
     * @memberof ModWorkshopGetWorkshopAccessInformation200Response
     */
    warnings?: Array<AuthEmailSignupUser200ResponseWarningsInner>;
}

/**
 * Check if a given object implements the ModWorkshopGetWorkshopAccessInformation200Response interface.
 */
export function instanceOfModWorkshopGetWorkshopAccessInformation200Response(value: object): boolean {
    if (!('assessingallowed' in value)) return false;
    if (!('assessingexamplesallowed' in value)) return false;
    if (!('canaddinstance' in value)) return false;
    if (!('canallocate' in value)) return false;
    if (!('candeletesubmissions' in value)) return false;
    if (!('caneditdimensions' in value)) return false;
    if (!('canexportsubmissions' in value)) return false;
    if (!('canignoredeadlines' in value)) return false;
    if (!('canmanageexamples' in value)) return false;
    if (!('canoverridegrades' in value)) return false;
    if (!('canpeerassess' in value)) return false;
    if (!('canpublishsubmissions' in value)) return false;
    if (!('cansubmit' in value)) return false;
    if (!('canswitchphase' in value)) return false;
    if (!('canview' in value)) return false;
    if (!('canviewallassessments' in value)) return false;
    if (!('canviewallsubmissions' in value)) return false;
    if (!('canviewauthornames' in value)) return false;
    if (!('canviewauthorpublished' in value)) return false;
    if (!('canviewpublishedsubmissions' in value)) return false;
    if (!('canviewreviewernames' in value)) return false;
    if (!('creatingsubmissionallowed' in value)) return false;
    if (!('examplesassessedbeforeassessment' in value)) return false;
    if (!('examplesassessedbeforesubmission' in value)) return false;
    if (!('modifyingsubmissionallowed' in value)) return false;
    return true;
}

export function ModWorkshopGetWorkshopAccessInformation200ResponseFromJSON(json: any): ModWorkshopGetWorkshopAccessInformation200Response {
    return ModWorkshopGetWorkshopAccessInformation200ResponseFromJSONTyped(json, false);
}

export function ModWorkshopGetWorkshopAccessInformation200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModWorkshopGetWorkshopAccessInformation200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'assessingallowed': json['assessingallowed'],
        'assessingexamplesallowed': json['assessingexamplesallowed'],
        'canaddinstance': json['canaddinstance'],
        'canallocate': json['canallocate'],
        'candeletesubmissions': json['candeletesubmissions'],
        'caneditdimensions': json['caneditdimensions'],
        'canexportsubmissions': json['canexportsubmissions'],
        'canignoredeadlines': json['canignoredeadlines'],
        'canmanageexamples': json['canmanageexamples'],
        'canoverridegrades': json['canoverridegrades'],
        'canpeerassess': json['canpeerassess'],
        'canpublishsubmissions': json['canpublishsubmissions'],
        'cansubmit': json['cansubmit'],
        'canswitchphase': json['canswitchphase'],
        'canview': json['canview'],
        'canviewallassessments': json['canviewallassessments'],
        'canviewallsubmissions': json['canviewallsubmissions'],
        'canviewauthornames': json['canviewauthornames'],
        'canviewauthorpublished': json['canviewauthorpublished'],
        'canviewpublishedsubmissions': json['canviewpublishedsubmissions'],
        'canviewreviewernames': json['canviewreviewernames'],
        'creatingsubmissionallowed': json['creatingsubmissionallowed'],
        'examplesassessedbeforeassessment': json['examplesassessedbeforeassessment'],
        'examplesassessedbeforesubmission': json['examplesassessedbeforesubmission'],
        'modifyingsubmissionallowed': json['modifyingsubmissionallowed'],
        'warnings': json['warnings'] == null ? undefined : ((json['warnings'] as Array<any>).map(AuthEmailSignupUser200ResponseWarningsInnerFromJSON)),
    };
}

export function ModWorkshopGetWorkshopAccessInformation200ResponseToJSON(value?: ModWorkshopGetWorkshopAccessInformation200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'assessingallowed': value['assessingallowed'],
        'assessingexamplesallowed': value['assessingexamplesallowed'],
        'canaddinstance': value['canaddinstance'],
        'canallocate': value['canallocate'],
        'candeletesubmissions': value['candeletesubmissions'],
        'caneditdimensions': value['caneditdimensions'],
        'canexportsubmissions': value['canexportsubmissions'],
        'canignoredeadlines': value['canignoredeadlines'],
        'canmanageexamples': value['canmanageexamples'],
        'canoverridegrades': value['canoverridegrades'],
        'canpeerassess': value['canpeerassess'],
        'canpublishsubmissions': value['canpublishsubmissions'],
        'cansubmit': value['cansubmit'],
        'canswitchphase': value['canswitchphase'],
        'canview': value['canview'],
        'canviewallassessments': value['canviewallassessments'],
        'canviewallsubmissions': value['canviewallsubmissions'],
        'canviewauthornames': value['canviewauthornames'],
        'canviewauthorpublished': value['canviewauthorpublished'],
        'canviewpublishedsubmissions': value['canviewpublishedsubmissions'],
        'canviewreviewernames': value['canviewreviewernames'],
        'creatingsubmissionallowed': value['creatingsubmissionallowed'],
        'examplesassessedbeforeassessment': value['examplesassessedbeforeassessment'],
        'examplesassessedbeforesubmission': value['examplesassessedbeforesubmission'],
        'modifyingsubmissionallowed': value['modifyingsubmissionallowed'],
        'warnings': value['warnings'] == null ? undefined : ((value['warnings'] as Array<any>).map(AuthEmailSignupUser200ResponseWarningsInnerToJSON)),
    };
}

