/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner } from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';
import {
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSONTyped,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON,
} from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';
import type { ModDataGetEntries200ResponseEntriesInnerTagsInner } from './ModDataGetEntries200ResponseEntriesInnerTagsInner';
import {
    ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSON,
    ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSONTyped,
    ModDataGetEntries200ResponseEntriesInnerTagsInnerToJSON,
} from './ModDataGetEntries200ResponseEntriesInnerTagsInner';

/**
 * 
 * @export
 * @interface ModGlossaryGetEntryById200ResponseEntry
 */
export interface ModGlossaryGetEntryById200ResponseEntry {
    /**
     * Whether the entry was approved
     * @type {boolean}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    approved: boolean;
    /**
     * Whether or not the entry has attachments
     * @type {boolean}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    attachment: boolean;
    /**
     * 
     * @type {Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    attachments?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>;
    /**
     * When true, the matching is case sensitive
     * @type {boolean}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    casesensitive: boolean;
    /**
     * The concept
     * @type {string}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    concept: string;
    /**
     * The definition
     * @type {string}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    definition: string;
    /**
     * definition format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    definitionformat: number;
    /**
     * 
     * @type {Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    definitioninlinefiles?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>;
    /**
     * The definition trust flag
     * @type {boolean}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    definitiontrust: boolean;
    /**
     * When true, the matching is done on full words only
     * @type {boolean}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    fullmatch: boolean;
    /**
     * The glossary ID
     * @type {number}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    glossaryid: number;
    /**
     * The entry ID
     * @type {number}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    id: number;
    /**
     * The source glossary ID
     * @type {number}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    sourceglossaryid: number;
    /**
     * 
     * @type {Array<ModDataGetEntries200ResponseEntriesInnerTagsInner>}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    tags?: Array<ModDataGetEntries200ResponseEntriesInnerTagsInner>;
    /**
     * The entry was created by a teacher, or equivalent.
     * @type {boolean}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    teacherentry: boolean;
    /**
     * Time created
     * @type {number}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    timecreated: number;
    /**
     * Time modified
     * @type {number}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    timemodified: number;
    /**
     * Whether the concept should be automatically linked
     * @type {boolean}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    usedynalink: boolean;
    /**
     * Author full name
     * @type {string}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    userfullname: string;
    /**
     * Author ID
     * @type {number}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    userid: number;
    /**
     * Author picture
     * @type {string}
     * @memberof ModGlossaryGetEntryById200ResponseEntry
     */
    userpictureurl: string;
}

/**
 * Check if a given object implements the ModGlossaryGetEntryById200ResponseEntry interface.
 */
export function instanceOfModGlossaryGetEntryById200ResponseEntry(value: object): boolean {
    if (!('approved' in value)) return false;
    if (!('attachment' in value)) return false;
    if (!('casesensitive' in value)) return false;
    if (!('concept' in value)) return false;
    if (!('definition' in value)) return false;
    if (!('definitionformat' in value)) return false;
    if (!('definitiontrust' in value)) return false;
    if (!('fullmatch' in value)) return false;
    if (!('glossaryid' in value)) return false;
    if (!('id' in value)) return false;
    if (!('sourceglossaryid' in value)) return false;
    if (!('teacherentry' in value)) return false;
    if (!('timecreated' in value)) return false;
    if (!('timemodified' in value)) return false;
    if (!('usedynalink' in value)) return false;
    if (!('userfullname' in value)) return false;
    if (!('userid' in value)) return false;
    if (!('userpictureurl' in value)) return false;
    return true;
}

export function ModGlossaryGetEntryById200ResponseEntryFromJSON(json: any): ModGlossaryGetEntryById200ResponseEntry {
    return ModGlossaryGetEntryById200ResponseEntryFromJSONTyped(json, false);
}

export function ModGlossaryGetEntryById200ResponseEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModGlossaryGetEntryById200ResponseEntry {
    if (json == null) {
        return json;
    }
    return {
        
        'approved': json['approved'],
        'attachment': json['attachment'],
        'attachments': json['attachments'] == null ? undefined : ((json['attachments'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON)),
        'casesensitive': json['casesensitive'],
        'concept': json['concept'],
        'definition': json['definition'],
        'definitionformat': json['definitionformat'],
        'definitioninlinefiles': json['definitioninlinefiles'] == null ? undefined : ((json['definitioninlinefiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON)),
        'definitiontrust': json['definitiontrust'],
        'fullmatch': json['fullmatch'],
        'glossaryid': json['glossaryid'],
        'id': json['id'],
        'sourceglossaryid': json['sourceglossaryid'],
        'tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSON)),
        'teacherentry': json['teacherentry'],
        'timecreated': json['timecreated'],
        'timemodified': json['timemodified'],
        'usedynalink': json['usedynalink'],
        'userfullname': json['userfullname'],
        'userid': json['userid'],
        'userpictureurl': json['userpictureurl'],
    };
}

export function ModGlossaryGetEntryById200ResponseEntryToJSON(value?: ModGlossaryGetEntryById200ResponseEntry | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'approved': value['approved'],
        'attachment': value['attachment'],
        'attachments': value['attachments'] == null ? undefined : ((value['attachments'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON)),
        'casesensitive': value['casesensitive'],
        'concept': value['concept'],
        'definition': value['definition'],
        'definitionformat': value['definitionformat'],
        'definitioninlinefiles': value['definitioninlinefiles'] == null ? undefined : ((value['definitioninlinefiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON)),
        'definitiontrust': value['definitiontrust'],
        'fullmatch': value['fullmatch'],
        'glossaryid': value['glossaryid'],
        'id': value['id'],
        'sourceglossaryid': value['sourceglossaryid'],
        'tags': value['tags'] == null ? undefined : ((value['tags'] as Array<any>).map(ModDataGetEntries200ResponseEntriesInnerTagsInnerToJSON)),
        'teacherentry': value['teacherentry'],
        'timecreated': value['timecreated'],
        'timemodified': value['timemodified'],
        'usedynalink': value['usedynalink'],
        'userfullname': value['userfullname'],
        'userid': value['userid'],
        'userpictureurl': value['userpictureurl'],
    };
}

