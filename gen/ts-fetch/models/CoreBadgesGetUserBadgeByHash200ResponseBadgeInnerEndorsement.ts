/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement
 */
export interface CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement {
    /**
     * Badge id
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement
     */
    badgeid: number;
    /**
     * Claim comment
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement
     */
    claimcomment: string;
    /**
     * Claim URL
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement
     */
    claimid: string;
    /**
     * Date issued
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement
     */
    dateissued: number;
    /**
     * Endorsement id
     * @type {number}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement
     */
    id: number;
    /**
     * Endorsement issuer email
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement
     */
    issueremail: string;
    /**
     * Endorsement issuer name
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement
     */
    issuername: string;
    /**
     * Endorsement issuer URL
     * @type {string}
     * @memberof CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement
     */
    issuerurl: string;
}

/**
 * Check if a given object implements the CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement interface.
 */
export function instanceOfCoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement(value: object): boolean {
    if (!('badgeid' in value)) return false;
    if (!('claimcomment' in value)) return false;
    if (!('claimid' in value)) return false;
    if (!('dateissued' in value)) return false;
    if (!('id' in value)) return false;
    if (!('issueremail' in value)) return false;
    if (!('issuername' in value)) return false;
    if (!('issuerurl' in value)) return false;
    return true;
}

export function CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsementFromJSON(json: any): CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement {
    return CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsementFromJSONTyped(json, false);
}

export function CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsementFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement {
    if (json == null) {
        return json;
    }
    return {
        
        'badgeid': json['badgeid'],
        'claimcomment': json['claimcomment'],
        'claimid': json['claimid'],
        'dateissued': json['dateissued'],
        'id': json['id'],
        'issueremail': json['issueremail'],
        'issuername': json['issuername'],
        'issuerurl': json['issuerurl'],
    };
}

export function CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsementToJSON(value?: CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'badgeid': value['badgeid'],
        'claimcomment': value['claimcomment'],
        'claimid': value['claimid'],
        'dateissued': value['dateissued'],
        'id': value['id'],
        'issueremail': value['issueremail'],
        'issuername': value['issuername'],
        'issuerurl': value['issuerurl'],
    };
}

