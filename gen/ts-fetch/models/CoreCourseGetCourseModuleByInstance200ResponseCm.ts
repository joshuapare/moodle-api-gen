/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreCourseGetCourseModuleByInstance200ResponseCmAdvancedgradingInner } from './CoreCourseGetCourseModuleByInstance200ResponseCmAdvancedgradingInner';
import {
    CoreCourseGetCourseModuleByInstance200ResponseCmAdvancedgradingInnerFromJSON,
    CoreCourseGetCourseModuleByInstance200ResponseCmAdvancedgradingInnerFromJSONTyped,
    CoreCourseGetCourseModuleByInstance200ResponseCmAdvancedgradingInnerToJSON,
} from './CoreCourseGetCourseModuleByInstance200ResponseCmAdvancedgradingInner';
import type { CoreCourseGetCourseModuleByInstance200ResponseCmOutcomesInner } from './CoreCourseGetCourseModuleByInstance200ResponseCmOutcomesInner';
import {
    CoreCourseGetCourseModuleByInstance200ResponseCmOutcomesInnerFromJSON,
    CoreCourseGetCourseModuleByInstance200ResponseCmOutcomesInnerFromJSONTyped,
    CoreCourseGetCourseModuleByInstance200ResponseCmOutcomesInnerToJSON,
} from './CoreCourseGetCourseModuleByInstance200ResponseCmOutcomesInner';

/**
 * 
 * @export
 * @interface CoreCourseGetCourseModuleByInstance200ResponseCm
 */
export interface CoreCourseGetCourseModuleByInstance200ResponseCm {
    /**
     * Time added
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    added?: number;
    /**
     * 
     * @type {Array<CoreCourseGetCourseModuleByInstance200ResponseCmAdvancedgradingInner>}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    advancedgrading?: Array<CoreCourseGetCourseModuleByInstance200ResponseCmAdvancedgradingInner>;
    /**
     * Availability settings
     * @type {string}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    availability?: string;
    /**
     * If completion is enabled
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    completion: number;
    /**
     * Completion time expected
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    completionexpected?: number;
    /**
     * Completion grade item
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    completiongradeitemnumber?: number;
    /**
     * Completion pass grade setting
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    completionpassgrade?: number;
    /**
     * Completion view setting
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    completionview?: number;
    /**
     * The course id
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    course: number;
    /**
     * The download content value
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    downloadcontent?: number;
    /**
     * Grade (max value or scale id)
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    grade?: number;
    /**
     * Grade category
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    gradecat?: number;
    /**
     * Grade to pass (float)
     * @type {string}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    gradepass?: string;
    /**
     * Grouping id
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    groupingid: number;
    /**
     * Group mode
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    groupmode: number;
    /**
     * The course module id
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    id: number;
    /**
     * Module id number
     * @type {string}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    idnumber?: string;
    /**
     * Indentation
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    indent?: number;
    /**
     * The activity instance id
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    instance: number;
    /**
     * The module component name (forum, assign, etc..)
     * @type {string}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    modname: string;
    /**
     * The module type id
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    module: number;
    /**
     * The activity name
     * @type {string}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    name: string;
    /**
     * 
     * @type {Array<CoreCourseGetCourseModuleByInstance200ResponseCmOutcomesInner>}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    outcomes?: Array<CoreCourseGetCourseModuleByInstance200ResponseCmOutcomesInner>;
    /**
     * Scale items (if used)
     * @type {string}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    scale?: string;
    /**
     * Score
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    score?: number;
    /**
     * The module section id
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    section: number;
    /**
     * The module section number
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    sectionnum: number;
    /**
     * If the description is showed
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    showdescription?: number;
    /**
     * If visible
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    visible?: number;
    /**
     * Visible old
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    visibleold?: number;
    /**
     * If visible on course page
     * @type {number}
     * @memberof CoreCourseGetCourseModuleByInstance200ResponseCm
     */
    visibleoncoursepage?: number;
}

/**
 * Check if a given object implements the CoreCourseGetCourseModuleByInstance200ResponseCm interface.
 */
export function instanceOfCoreCourseGetCourseModuleByInstance200ResponseCm(value: object): boolean {
    if (!('completion' in value)) return false;
    if (!('course' in value)) return false;
    if (!('groupingid' in value)) return false;
    if (!('groupmode' in value)) return false;
    if (!('id' in value)) return false;
    if (!('instance' in value)) return false;
    if (!('modname' in value)) return false;
    if (!('module' in value)) return false;
    if (!('name' in value)) return false;
    if (!('section' in value)) return false;
    if (!('sectionnum' in value)) return false;
    return true;
}

export function CoreCourseGetCourseModuleByInstance200ResponseCmFromJSON(json: any): CoreCourseGetCourseModuleByInstance200ResponseCm {
    return CoreCourseGetCourseModuleByInstance200ResponseCmFromJSONTyped(json, false);
}

export function CoreCourseGetCourseModuleByInstance200ResponseCmFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreCourseGetCourseModuleByInstance200ResponseCm {
    if (json == null) {
        return json;
    }
    return {
        
        'added': json['added'] == null ? undefined : json['added'],
        'advancedgrading': json['advancedgrading'] == null ? undefined : ((json['advancedgrading'] as Array<any>).map(CoreCourseGetCourseModuleByInstance200ResponseCmAdvancedgradingInnerFromJSON)),
        'availability': json['availability'] == null ? undefined : json['availability'],
        'completion': json['completion'],
        'completionexpected': json['completionexpected'] == null ? undefined : json['completionexpected'],
        'completiongradeitemnumber': json['completiongradeitemnumber'] == null ? undefined : json['completiongradeitemnumber'],
        'completionpassgrade': json['completionpassgrade'] == null ? undefined : json['completionpassgrade'],
        'completionview': json['completionview'] == null ? undefined : json['completionview'],
        'course': json['course'],
        'downloadcontent': json['downloadcontent'] == null ? undefined : json['downloadcontent'],
        'grade': json['grade'] == null ? undefined : json['grade'],
        'gradecat': json['gradecat'] == null ? undefined : json['gradecat'],
        'gradepass': json['gradepass'] == null ? undefined : json['gradepass'],
        'groupingid': json['groupingid'],
        'groupmode': json['groupmode'],
        'id': json['id'],
        'idnumber': json['idnumber'] == null ? undefined : json['idnumber'],
        'indent': json['indent'] == null ? undefined : json['indent'],
        'instance': json['instance'],
        'modname': json['modname'],
        'module': json['module'],
        'name': json['name'],
        'outcomes': json['outcomes'] == null ? undefined : ((json['outcomes'] as Array<any>).map(CoreCourseGetCourseModuleByInstance200ResponseCmOutcomesInnerFromJSON)),
        'scale': json['scale'] == null ? undefined : json['scale'],
        'score': json['score'] == null ? undefined : json['score'],
        'section': json['section'],
        'sectionnum': json['sectionnum'],
        'showdescription': json['showdescription'] == null ? undefined : json['showdescription'],
        'visible': json['visible'] == null ? undefined : json['visible'],
        'visibleold': json['visibleold'] == null ? undefined : json['visibleold'],
        'visibleoncoursepage': json['visibleoncoursepage'] == null ? undefined : json['visibleoncoursepage'],
    };
}

export function CoreCourseGetCourseModuleByInstance200ResponseCmToJSON(value?: CoreCourseGetCourseModuleByInstance200ResponseCm | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'added': value['added'],
        'advancedgrading': value['advancedgrading'] == null ? undefined : ((value['advancedgrading'] as Array<any>).map(CoreCourseGetCourseModuleByInstance200ResponseCmAdvancedgradingInnerToJSON)),
        'availability': value['availability'],
        'completion': value['completion'],
        'completionexpected': value['completionexpected'],
        'completiongradeitemnumber': value['completiongradeitemnumber'],
        'completionpassgrade': value['completionpassgrade'],
        'completionview': value['completionview'],
        'course': value['course'],
        'downloadcontent': value['downloadcontent'],
        'grade': value['grade'],
        'gradecat': value['gradecat'],
        'gradepass': value['gradepass'],
        'groupingid': value['groupingid'],
        'groupmode': value['groupmode'],
        'id': value['id'],
        'idnumber': value['idnumber'],
        'indent': value['indent'],
        'instance': value['instance'],
        'modname': value['modname'],
        'module': value['module'],
        'name': value['name'],
        'outcomes': value['outcomes'] == null ? undefined : ((value['outcomes'] as Array<any>).map(CoreCourseGetCourseModuleByInstance200ResponseCmOutcomesInnerToJSON)),
        'scale': value['scale'],
        'score': value['score'],
        'section': value['section'],
        'sectionnum': value['sectionnum'],
        'showdescription': value['showdescription'],
        'visible': value['visible'],
        'visibleold': value['visibleold'],
        'visibleoncoursepage': value['visibleoncoursepage'],
    };
}

