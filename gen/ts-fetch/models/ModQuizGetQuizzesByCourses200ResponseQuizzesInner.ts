/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner } from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';
import {
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSONTyped,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON,
} from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';

/**
 * 
 * @export
 * @interface ModQuizGetQuizzesByCourses200ResponseQuizzesInner
 */
export interface ModQuizGetQuizzesByCourses200ResponseQuizzesInner {
    /**
     * Whether to allow the quiz to be attempted
     *                                                                             offline in the mobile app
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    allowofflineattempts?: number;
    /**
     * Whether subsequent attempts start from the answer
     *                                                                     to the previous attempt (1) or start blank (0).
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    attemptonlast?: number;
    /**
     * The maximum number of attempts a student is allowed.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    attempts?: number;
    /**
     * Auto-save delay
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    autosaveperiod?: number;
    /**
     * Restriciton on the browser the student must
     *                                                                     use. E.g. 'securewindow'.
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    browsersecurity?: string;
    /**
     * Allows students to redo any completed question
     *                                                                         within a quiz attempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    canredoquestions?: number;
    /**
     * Mark quiz complete when the student has
     *                                                                                 exhausted the maximum number of attempts
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    completionattemptsexhausted?: number;
    /**
     * Whether to require passing grade
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    completionpass?: number;
    /**
     * Course id
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    course?: number;
    /**
     * Course module id
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    coursemodule?: number;
    /**
     * Number of decimal points to use when displaying
     *                                                                     grades.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    decimalpoints?: number;
    /**
     * Delay that must be left between the first and second attempt,
     *                                                             in seconds.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    delay1?: number;
    /**
     * Delay that must be left between the second and subsequent
     *                                                             attempt, in seconds.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    delay2?: number;
    /**
     * The amount of time (in seconds) after the time limit
     *                                                                 runs out during which attempts can still be submitted,
     *                                                                 if overduehandling is set to allow it.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    graceperiod?: number;
    /**
     * The total that the quiz overall grade is scaled to be
     *                                                             out of.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    grade?: number;
    /**
     * One of the values QUIZ_GRADEHIGHEST, QUIZ_GRADEAVERAGE,
     *                                                                     QUIZ_ATTEMPTFIRST or QUIZ_ATTEMPTLAST.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    grademethod?: number;
    /**
     * Group id
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    groupingid?: number;
    /**
     * Group mode
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    groupmode?: number;
    /**
     * Whether the quiz has any non-blank feedback text
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    hasfeedback?: number;
    /**
     * Whether the quiz has questions
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    hasquestions?: number;
    /**
     * Activity instance id
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    id?: number;
    /**
     * Activity introduction
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    intro?: string;
    /**
     * 
     * @type {Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    introfiles?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>;
    /**
     * intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    introformat?: number;
    /**
     * Forced activity language
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    lang?: string;
    /**
     * Activity name
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    name?: string;
    /**
     * Any constraints on how the user is allowed to navigate
     *                                                                 around the quiz. Currently recognised values are
     *                                                                 'free' and 'seq'.
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    navmethod?: string;
    /**
     * The method used to handle overdue attempts.
     *                                                                     'autosubmit', 'graceperiod' or 'autoabandon'.
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    overduehandling?: string;
    /**
     * A password that the student must enter before starting or
     *                                                                 continuing a quiz attempt.
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    password?: string;
    /**
     * The behaviour to ask questions to use.
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    preferredbehaviour?: string;
    /**
     * Number of decimal points to use when
     *                                                                             displaying question grades.
     *                                                                             (-1 means use decimalpoints.)
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    questiondecimalpoints?: number;
    /**
     * How often to insert a page break when editing
     *                                                                         the quiz, or when shuffling the question order.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    questionsperpage?: number;
    /**
     * Whether users are allowed to review their quiz
     *                                                                     attempts at various times. This is a bit field, decoded by the
     *                                                                     \mod_quiz\question\display_options class. It is formed by ORing
     *                                                                     together the constants defined there.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    reviewattempt?: number;
    /**
     * Whether users are allowed to review their quiz
     *                                                        attempts at various times.A bit field, like reviewattempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    reviewcorrectness?: number;
    /**
     * Whether users are allowed to review their
     *                                                                             quiz attempts at various times. A bit field, like
     *                                                                             reviewattempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    reviewgeneralfeedback?: number;
    /**
     * Whether users are allowed to review their quiz attempts
     *                                                                 at various times. A bit field, like reviewattempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    reviewmarks?: number;
    /**
     * Whether users are allowed to review their quiz
     *                                                   attempts at various times. A bit field, like reviewattempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    reviewmaxmarks?: number;
    /**
     * Whether users are allowed to review their quiz
     *                                                                             attempts at various times. A bit field, like
     *                                                                             reviewattempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    reviewoverallfeedback?: number;
    /**
     * Whether users are allowed to review their quiz
     *                                                                         attempts at various times. A bit field, like
     *                                                                         reviewattempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    reviewrightanswer?: number;
    /**
     * Whether users are allowed to review their
     *                                                                             quiz attempts at various times. A bit field, like
     *                                                                             reviewattempt.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    reviewspecificfeedback?: number;
    /**
     * Course section id
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    section?: number;
    /**
     * Whether blocks should be shown on the attempt.php and
     *                                                                 review.php pages.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    showblocks?: number;
    /**
     * Option to show the user's picture during the
     *                                                                     attempt and on the review page.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    showuserpicture?: number;
    /**
     * Whether the parts of the question should be shuffled,
     *                                                                     in those question types that support it.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    shuffleanswers?: number;
    /**
     * Used to restrict the IP addresses from which this quiz can
     *                                                             be attempted. The format is as requried by the address_in_subnet
     *                                                             function.
     * @type {string}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    subnet?: string;
    /**
     * The total of all the question instance maxmarks.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    sumgrades?: number;
    /**
     * The time when this quiz closes. (0 = no restriction.)
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    timeclose?: number;
    /**
     * The time when the quiz was added to the course.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    timecreated?: number;
    /**
     * The time limit for quiz attempts, in seconds.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    timelimit?: number;
    /**
     * Last modified time.
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    timemodified?: number;
    /**
     * The time when this quiz opens. (0 = no restriction.)
     * @type {number}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    timeopen?: number;
    /**
     * Visible
     * @type {boolean}
     * @memberof ModQuizGetQuizzesByCourses200ResponseQuizzesInner
     */
    visible?: boolean;
}

/**
 * Check if a given object implements the ModQuizGetQuizzesByCourses200ResponseQuizzesInner interface.
 */
export function instanceOfModQuizGetQuizzesByCourses200ResponseQuizzesInner(value: object): boolean {
    return true;
}

export function ModQuizGetQuizzesByCourses200ResponseQuizzesInnerFromJSON(json: any): ModQuizGetQuizzesByCourses200ResponseQuizzesInner {
    return ModQuizGetQuizzesByCourses200ResponseQuizzesInnerFromJSONTyped(json, false);
}

export function ModQuizGetQuizzesByCourses200ResponseQuizzesInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModQuizGetQuizzesByCourses200ResponseQuizzesInner {
    if (json == null) {
        return json;
    }
    return {
        
        'allowofflineattempts': json['allowofflineattempts'] == null ? undefined : json['allowofflineattempts'],
        'attemptonlast': json['attemptonlast'] == null ? undefined : json['attemptonlast'],
        'attempts': json['attempts'] == null ? undefined : json['attempts'],
        'autosaveperiod': json['autosaveperiod'] == null ? undefined : json['autosaveperiod'],
        'browsersecurity': json['browsersecurity'] == null ? undefined : json['browsersecurity'],
        'canredoquestions': json['canredoquestions'] == null ? undefined : json['canredoquestions'],
        'completionattemptsexhausted': json['completionattemptsexhausted'] == null ? undefined : json['completionattemptsexhausted'],
        'completionpass': json['completionpass'] == null ? undefined : json['completionpass'],
        'course': json['course'] == null ? undefined : json['course'],
        'coursemodule': json['coursemodule'] == null ? undefined : json['coursemodule'],
        'decimalpoints': json['decimalpoints'] == null ? undefined : json['decimalpoints'],
        'delay1': json['delay1'] == null ? undefined : json['delay1'],
        'delay2': json['delay2'] == null ? undefined : json['delay2'],
        'graceperiod': json['graceperiod'] == null ? undefined : json['graceperiod'],
        'grade': json['grade'] == null ? undefined : json['grade'],
        'grademethod': json['grademethod'] == null ? undefined : json['grademethod'],
        'groupingid': json['groupingid'] == null ? undefined : json['groupingid'],
        'groupmode': json['groupmode'] == null ? undefined : json['groupmode'],
        'hasfeedback': json['hasfeedback'] == null ? undefined : json['hasfeedback'],
        'hasquestions': json['hasquestions'] == null ? undefined : json['hasquestions'],
        'id': json['id'] == null ? undefined : json['id'],
        'intro': json['intro'] == null ? undefined : json['intro'],
        'introfiles': json['introfiles'] == null ? undefined : ((json['introfiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON)),
        'introformat': json['introformat'] == null ? undefined : json['introformat'],
        'lang': json['lang'] == null ? undefined : json['lang'],
        'name': json['name'] == null ? undefined : json['name'],
        'navmethod': json['navmethod'] == null ? undefined : json['navmethod'],
        'overduehandling': json['overduehandling'] == null ? undefined : json['overduehandling'],
        'password': json['password'] == null ? undefined : json['password'],
        'preferredbehaviour': json['preferredbehaviour'] == null ? undefined : json['preferredbehaviour'],
        'questiondecimalpoints': json['questiondecimalpoints'] == null ? undefined : json['questiondecimalpoints'],
        'questionsperpage': json['questionsperpage'] == null ? undefined : json['questionsperpage'],
        'reviewattempt': json['reviewattempt'] == null ? undefined : json['reviewattempt'],
        'reviewcorrectness': json['reviewcorrectness'] == null ? undefined : json['reviewcorrectness'],
        'reviewgeneralfeedback': json['reviewgeneralfeedback'] == null ? undefined : json['reviewgeneralfeedback'],
        'reviewmarks': json['reviewmarks'] == null ? undefined : json['reviewmarks'],
        'reviewmaxmarks': json['reviewmaxmarks'] == null ? undefined : json['reviewmaxmarks'],
        'reviewoverallfeedback': json['reviewoverallfeedback'] == null ? undefined : json['reviewoverallfeedback'],
        'reviewrightanswer': json['reviewrightanswer'] == null ? undefined : json['reviewrightanswer'],
        'reviewspecificfeedback': json['reviewspecificfeedback'] == null ? undefined : json['reviewspecificfeedback'],
        'section': json['section'] == null ? undefined : json['section'],
        'showblocks': json['showblocks'] == null ? undefined : json['showblocks'],
        'showuserpicture': json['showuserpicture'] == null ? undefined : json['showuserpicture'],
        'shuffleanswers': json['shuffleanswers'] == null ? undefined : json['shuffleanswers'],
        'subnet': json['subnet'] == null ? undefined : json['subnet'],
        'sumgrades': json['sumgrades'] == null ? undefined : json['sumgrades'],
        'timeclose': json['timeclose'] == null ? undefined : json['timeclose'],
        'timecreated': json['timecreated'] == null ? undefined : json['timecreated'],
        'timelimit': json['timelimit'] == null ? undefined : json['timelimit'],
        'timemodified': json['timemodified'] == null ? undefined : json['timemodified'],
        'timeopen': json['timeopen'] == null ? undefined : json['timeopen'],
        'visible': json['visible'] == null ? undefined : json['visible'],
    };
}

export function ModQuizGetQuizzesByCourses200ResponseQuizzesInnerToJSON(value?: ModQuizGetQuizzesByCourses200ResponseQuizzesInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'allowofflineattempts': value['allowofflineattempts'],
        'attemptonlast': value['attemptonlast'],
        'attempts': value['attempts'],
        'autosaveperiod': value['autosaveperiod'],
        'browsersecurity': value['browsersecurity'],
        'canredoquestions': value['canredoquestions'],
        'completionattemptsexhausted': value['completionattemptsexhausted'],
        'completionpass': value['completionpass'],
        'course': value['course'],
        'coursemodule': value['coursemodule'],
        'decimalpoints': value['decimalpoints'],
        'delay1': value['delay1'],
        'delay2': value['delay2'],
        'graceperiod': value['graceperiod'],
        'grade': value['grade'],
        'grademethod': value['grademethod'],
        'groupingid': value['groupingid'],
        'groupmode': value['groupmode'],
        'hasfeedback': value['hasfeedback'],
        'hasquestions': value['hasquestions'],
        'id': value['id'],
        'intro': value['intro'],
        'introfiles': value['introfiles'] == null ? undefined : ((value['introfiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON)),
        'introformat': value['introformat'],
        'lang': value['lang'],
        'name': value['name'],
        'navmethod': value['navmethod'],
        'overduehandling': value['overduehandling'],
        'password': value['password'],
        'preferredbehaviour': value['preferredbehaviour'],
        'questiondecimalpoints': value['questiondecimalpoints'],
        'questionsperpage': value['questionsperpage'],
        'reviewattempt': value['reviewattempt'],
        'reviewcorrectness': value['reviewcorrectness'],
        'reviewgeneralfeedback': value['reviewgeneralfeedback'],
        'reviewmarks': value['reviewmarks'],
        'reviewmaxmarks': value['reviewmaxmarks'],
        'reviewoverallfeedback': value['reviewoverallfeedback'],
        'reviewrightanswer': value['reviewrightanswer'],
        'reviewspecificfeedback': value['reviewspecificfeedback'],
        'section': value['section'],
        'showblocks': value['showblocks'],
        'showuserpicture': value['showuserpicture'],
        'shuffleanswers': value['shuffleanswers'],
        'subnet': value['subnet'],
        'sumgrades': value['sumgrades'],
        'timeclose': value['timeclose'],
        'timecreated': value['timecreated'],
        'timelimit': value['timelimit'],
        'timemodified': value['timemodified'],
        'timeopen': value['timeopen'],
        'visible': value['visible'],
    };
}

