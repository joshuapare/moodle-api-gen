/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner } from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';
import {
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSONTyped,
    CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON,
} from './CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner';
import type { ModDataGetEntries200ResponseEntriesInnerTagsInner } from './ModDataGetEntries200ResponseEntriesInnerTagsInner';
import {
    ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSON,
    ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSONTyped,
    ModDataGetEntries200ResponseEntriesInnerTagsInnerToJSON,
} from './ModDataGetEntries200ResponseEntriesInnerTagsInner';

/**
 * 
 * @export
 * @interface ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
 */
export interface ModGlossaryGetEntriesByAuthor200ResponseEntriesInner {
    /**
     * Whether the entry was approved
     * @type {boolean}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    approved?: boolean;
    /**
     * Whether or not the entry has attachments
     * @type {boolean}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    attachment?: boolean;
    /**
     * 
     * @type {Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    attachments?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>;
    /**
     * When true, the matching is case sensitive
     * @type {boolean}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    casesensitive?: boolean;
    /**
     * The concept
     * @type {string}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    concept?: string;
    /**
     * The definition
     * @type {string}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    definition?: string;
    /**
     * definition format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    definitionformat?: number;
    /**
     * 
     * @type {Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    definitioninlinefiles?: Array<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>;
    /**
     * The definition trust flag
     * @type {boolean}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    definitiontrust?: boolean;
    /**
     * When true, the matching is done on full words only
     * @type {boolean}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    fullmatch?: boolean;
    /**
     * The glossary ID
     * @type {number}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    glossaryid?: number;
    /**
     * The entry ID
     * @type {number}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    id?: number;
    /**
     * The source glossary ID
     * @type {number}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    sourceglossaryid?: number;
    /**
     * 
     * @type {Array<ModDataGetEntries200ResponseEntriesInnerTagsInner>}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    tags?: Array<ModDataGetEntries200ResponseEntriesInnerTagsInner>;
    /**
     * The entry was created by a teacher, or equivalent.
     * @type {boolean}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    teacherentry?: boolean;
    /**
     * Time created
     * @type {number}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    timecreated?: number;
    /**
     * Time modified
     * @type {number}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    timemodified?: number;
    /**
     * Whether the concept should be automatically linked
     * @type {boolean}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    usedynalink?: boolean;
    /**
     * Author full name
     * @type {string}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    userfullname?: string;
    /**
     * Author ID
     * @type {number}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    userid?: number;
    /**
     * Author picture
     * @type {string}
     * @memberof ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
     */
    userpictureurl?: string;
}

/**
 * Check if a given object implements the ModGlossaryGetEntriesByAuthor200ResponseEntriesInner interface.
 */
export function instanceOfModGlossaryGetEntriesByAuthor200ResponseEntriesInner(value: object): boolean {
    return true;
}

export function ModGlossaryGetEntriesByAuthor200ResponseEntriesInnerFromJSON(json: any): ModGlossaryGetEntriesByAuthor200ResponseEntriesInner {
    return ModGlossaryGetEntriesByAuthor200ResponseEntriesInnerFromJSONTyped(json, false);
}

export function ModGlossaryGetEntriesByAuthor200ResponseEntriesInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModGlossaryGetEntriesByAuthor200ResponseEntriesInner {
    if (json == null) {
        return json;
    }
    return {
        
        'approved': json['approved'] == null ? undefined : json['approved'],
        'attachment': json['attachment'] == null ? undefined : json['attachment'],
        'attachments': json['attachments'] == null ? undefined : ((json['attachments'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON)),
        'casesensitive': json['casesensitive'] == null ? undefined : json['casesensitive'],
        'concept': json['concept'] == null ? undefined : json['concept'],
        'definition': json['definition'] == null ? undefined : json['definition'],
        'definitionformat': json['definitionformat'] == null ? undefined : json['definitionformat'],
        'definitioninlinefiles': json['definitioninlinefiles'] == null ? undefined : ((json['definitioninlinefiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerFromJSON)),
        'definitiontrust': json['definitiontrust'] == null ? undefined : json['definitiontrust'],
        'fullmatch': json['fullmatch'] == null ? undefined : json['fullmatch'],
        'glossaryid': json['glossaryid'] == null ? undefined : json['glossaryid'],
        'id': json['id'] == null ? undefined : json['id'],
        'sourceglossaryid': json['sourceglossaryid'] == null ? undefined : json['sourceglossaryid'],
        'tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSON)),
        'teacherentry': json['teacherentry'] == null ? undefined : json['teacherentry'],
        'timecreated': json['timecreated'] == null ? undefined : json['timecreated'],
        'timemodified': json['timemodified'] == null ? undefined : json['timemodified'],
        'usedynalink': json['usedynalink'] == null ? undefined : json['usedynalink'],
        'userfullname': json['userfullname'] == null ? undefined : json['userfullname'],
        'userid': json['userid'] == null ? undefined : json['userid'],
        'userpictureurl': json['userpictureurl'] == null ? undefined : json['userpictureurl'],
    };
}

export function ModGlossaryGetEntriesByAuthor200ResponseEntriesInnerToJSON(value?: ModGlossaryGetEntriesByAuthor200ResponseEntriesInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'approved': value['approved'],
        'attachment': value['attachment'],
        'attachments': value['attachments'] == null ? undefined : ((value['attachments'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON)),
        'casesensitive': value['casesensitive'],
        'concept': value['concept'],
        'definition': value['definition'],
        'definitionformat': value['definitionformat'],
        'definitioninlinefiles': value['definitioninlinefiles'] == null ? undefined : ((value['definitioninlinefiles'] as Array<any>).map(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInnerToJSON)),
        'definitiontrust': value['definitiontrust'],
        'fullmatch': value['fullmatch'],
        'glossaryid': value['glossaryid'],
        'id': value['id'],
        'sourceglossaryid': value['sourceglossaryid'],
        'tags': value['tags'] == null ? undefined : ((value['tags'] as Array<any>).map(ModDataGetEntries200ResponseEntriesInnerTagsInnerToJSON)),
        'teacherentry': value['teacherentry'],
        'timecreated': value['timecreated'],
        'timemodified': value['timemodified'],
        'usedynalink': value['usedynalink'],
        'userfullname': value['userfullname'],
        'userid': value['userid'],
        'userpictureurl': value['userpictureurl'],
    };
}

