/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ModDataGetEntries200ResponseEntriesInnerTagsInner } from './ModDataGetEntries200ResponseEntriesInnerTagsInner';
import {
    ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSON,
    ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSONTyped,
    ModDataGetEntries200ResponseEntriesInnerTagsInnerToJSON,
} from './ModDataGetEntries200ResponseEntriesInnerTagsInner';

/**
 * 
 * @export
 * @interface ModWikiGetPageContents200ResponsePage
 */
export interface ModWikiGetPageContents200ResponsePage {
    /**
     * Page contents.
     * @type {string}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    cachedcontent: string;
    /**
     * True if user can edit the page.
     * @type {boolean}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    caneditpage: boolean;
    /**
     * cachedcontent format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    contentformat?: number;
    /**
     * Page's group ID.
     * @type {number}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    groupid: number;
    /**
     * Page ID.
     * @type {number}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    id: number;
    /**
     * Page's subwiki ID.
     * @type {number}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    subwikiid: number;
    /**
     * 
     * @type {Array<ModDataGetEntries200ResponseEntriesInnerTagsInner>}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    tags?: Array<ModDataGetEntries200ResponseEntriesInnerTagsInner>;
    /**
     * Page title.
     * @type {string}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    title: string;
    /**
     * Page's user ID.
     * @type {number}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    userid: number;
    /**
     * Latest version of the page.
     * @type {number}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    version?: number;
    /**
     * Page's wiki ID.
     * @type {number}
     * @memberof ModWikiGetPageContents200ResponsePage
     */
    wikiid: number;
}

/**
 * Check if a given object implements the ModWikiGetPageContents200ResponsePage interface.
 */
export function instanceOfModWikiGetPageContents200ResponsePage(value: object): boolean {
    if (!('cachedcontent' in value)) return false;
    if (!('caneditpage' in value)) return false;
    if (!('groupid' in value)) return false;
    if (!('id' in value)) return false;
    if (!('subwikiid' in value)) return false;
    if (!('title' in value)) return false;
    if (!('userid' in value)) return false;
    if (!('wikiid' in value)) return false;
    return true;
}

export function ModWikiGetPageContents200ResponsePageFromJSON(json: any): ModWikiGetPageContents200ResponsePage {
    return ModWikiGetPageContents200ResponsePageFromJSONTyped(json, false);
}

export function ModWikiGetPageContents200ResponsePageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModWikiGetPageContents200ResponsePage {
    if (json == null) {
        return json;
    }
    return {
        
        'cachedcontent': json['cachedcontent'],
        'caneditpage': json['caneditpage'],
        'contentformat': json['contentformat'] == null ? undefined : json['contentformat'],
        'groupid': json['groupid'],
        'id': json['id'],
        'subwikiid': json['subwikiid'],
        'tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(ModDataGetEntries200ResponseEntriesInnerTagsInnerFromJSON)),
        'title': json['title'],
        'userid': json['userid'],
        'version': json['version'] == null ? undefined : json['version'],
        'wikiid': json['wikiid'],
    };
}

export function ModWikiGetPageContents200ResponsePageToJSON(value?: ModWikiGetPageContents200ResponsePage | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'cachedcontent': value['cachedcontent'],
        'caneditpage': value['caneditpage'],
        'contentformat': value['contentformat'],
        'groupid': value['groupid'],
        'id': value['id'],
        'subwikiid': value['subwikiid'],
        'tags': value['tags'] == null ? undefined : ((value['tags'] as Array<any>).map(ModDataGetEntries200ResponseEntriesInnerTagsInnerToJSON)),
        'title': value['title'],
        'userid': value['userid'],
        'version': value['version'],
        'wikiid': value['wikiid'],
    };
}

