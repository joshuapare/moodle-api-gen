/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreMessageGetConversationBetweenUsers200ResponseMembersInner } from './CoreMessageGetConversationBetweenUsers200ResponseMembersInner';
import {
    CoreMessageGetConversationBetweenUsers200ResponseMembersInnerFromJSON,
    CoreMessageGetConversationBetweenUsers200ResponseMembersInnerFromJSONTyped,
    CoreMessageGetConversationBetweenUsers200ResponseMembersInnerToJSON,
} from './CoreMessageGetConversationBetweenUsers200ResponseMembersInner';
import type { CoreMessageGetConversationBetweenUsers200ResponseMessagesInner } from './CoreMessageGetConversationBetweenUsers200ResponseMessagesInner';
import {
    CoreMessageGetConversationBetweenUsers200ResponseMessagesInnerFromJSON,
    CoreMessageGetConversationBetweenUsers200ResponseMessagesInnerFromJSONTyped,
    CoreMessageGetConversationBetweenUsers200ResponseMessagesInnerToJSON,
} from './CoreMessageGetConversationBetweenUsers200ResponseMessagesInner';

/**
 * 
 * @export
 * @interface CoreMessageGetConversations200ResponseConversationsInner
 */
export interface CoreMessageGetConversations200ResponseConversationsInner {
    /**
     * If the user can delete messages in the conversation for all users
     * @type {boolean}
     * @memberof CoreMessageGetConversations200ResponseConversationsInner
     */
    candeletemessagesforallusers?: boolean;
    /**
     * The conversation id
     * @type {number}
     * @memberof CoreMessageGetConversations200ResponseConversationsInner
     */
    id?: number;
    /**
     * A link to the conversation picture, if set
     * @type {string}
     * @memberof CoreMessageGetConversations200ResponseConversationsInner
     */
    imageurl?: string;
    /**
     * If the user marked this conversation as a favourite
     * @type {boolean}
     * @memberof CoreMessageGetConversations200ResponseConversationsInner
     */
    isfavourite?: boolean;
    /**
     * If the user muted this conversation
     * @type {boolean}
     * @memberof CoreMessageGetConversations200ResponseConversationsInner
     */
    ismuted?: boolean;
    /**
     * If the user has read all messages in the conversation
     * @type {boolean}
     * @memberof CoreMessageGetConversations200ResponseConversationsInner
     */
    isread?: boolean;
    /**
     * Total number of conversation members
     * @type {number}
     * @memberof CoreMessageGetConversations200ResponseConversationsInner
     */
    membercount?: number;
    /**
     * 
     * @type {Array<CoreMessageGetConversationBetweenUsers200ResponseMembersInner>}
     * @memberof CoreMessageGetConversations200ResponseConversationsInner
     */
    members?: Array<CoreMessageGetConversationBetweenUsers200ResponseMembersInner>;
    /**
     * 
     * @type {Array<CoreMessageGetConversationBetweenUsers200ResponseMessagesInner>}
     * @memberof CoreMessageGetConversations200ResponseConversationsInner
     */
    messages?: Array<CoreMessageGetConversationBetweenUsers200ResponseMessagesInner>;
    /**
     * The conversation name, if set
     * @type {string}
     * @memberof CoreMessageGetConversations200ResponseConversationsInner
     */
    name?: string;
    /**
     * A subtitle for the conversation name, if set
     * @type {string}
     * @memberof CoreMessageGetConversations200ResponseConversationsInner
     */
    subname?: string;
    /**
     * The type of the conversation (1=individual,2=group,3=self)
     * @type {number}
     * @memberof CoreMessageGetConversations200ResponseConversationsInner
     */
    type?: number;
    /**
     * The number of unread messages in this conversation
     * @type {number}
     * @memberof CoreMessageGetConversations200ResponseConversationsInner
     */
    unreadcount?: number;
}

/**
 * Check if a given object implements the CoreMessageGetConversations200ResponseConversationsInner interface.
 */
export function instanceOfCoreMessageGetConversations200ResponseConversationsInner(value: object): boolean {
    return true;
}

export function CoreMessageGetConversations200ResponseConversationsInnerFromJSON(json: any): CoreMessageGetConversations200ResponseConversationsInner {
    return CoreMessageGetConversations200ResponseConversationsInnerFromJSONTyped(json, false);
}

export function CoreMessageGetConversations200ResponseConversationsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreMessageGetConversations200ResponseConversationsInner {
    if (json == null) {
        return json;
    }
    return {
        
        'candeletemessagesforallusers': json['candeletemessagesforallusers'] == null ? undefined : json['candeletemessagesforallusers'],
        'id': json['id'] == null ? undefined : json['id'],
        'imageurl': json['imageurl'] == null ? undefined : json['imageurl'],
        'isfavourite': json['isfavourite'] == null ? undefined : json['isfavourite'],
        'ismuted': json['ismuted'] == null ? undefined : json['ismuted'],
        'isread': json['isread'] == null ? undefined : json['isread'],
        'membercount': json['membercount'] == null ? undefined : json['membercount'],
        'members': json['members'] == null ? undefined : ((json['members'] as Array<any>).map(CoreMessageGetConversationBetweenUsers200ResponseMembersInnerFromJSON)),
        'messages': json['messages'] == null ? undefined : ((json['messages'] as Array<any>).map(CoreMessageGetConversationBetweenUsers200ResponseMessagesInnerFromJSON)),
        'name': json['name'] == null ? undefined : json['name'],
        'subname': json['subname'] == null ? undefined : json['subname'],
        'type': json['type'] == null ? undefined : json['type'],
        'unreadcount': json['unreadcount'] == null ? undefined : json['unreadcount'],
    };
}

export function CoreMessageGetConversations200ResponseConversationsInnerToJSON(value?: CoreMessageGetConversations200ResponseConversationsInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'candeletemessagesforallusers': value['candeletemessagesforallusers'],
        'id': value['id'],
        'imageurl': value['imageurl'],
        'isfavourite': value['isfavourite'],
        'ismuted': value['ismuted'],
        'isread': value['isread'],
        'membercount': value['membercount'],
        'members': value['members'] == null ? undefined : ((value['members'] as Array<any>).map(CoreMessageGetConversationBetweenUsers200ResponseMembersInnerToJSON)),
        'messages': value['messages'] == null ? undefined : ((value['messages'] as Array<any>).map(CoreMessageGetConversationBetweenUsers200ResponseMessagesInnerToJSON)),
        'name': value['name'],
        'subname': value['subname'],
        'type': value['type'],
        'unreadcount': value['unreadcount'],
    };
}

