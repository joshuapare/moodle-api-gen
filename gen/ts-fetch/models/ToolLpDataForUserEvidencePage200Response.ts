/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ToolLpDataForUserEvidencePage200ResponseUserevidence } from './ToolLpDataForUserEvidencePage200ResponseUserevidence';
import {
    ToolLpDataForUserEvidencePage200ResponseUserevidenceFromJSON,
    ToolLpDataForUserEvidencePage200ResponseUserevidenceFromJSONTyped,
    ToolLpDataForUserEvidencePage200ResponseUserevidenceToJSON,
} from './ToolLpDataForUserEvidencePage200ResponseUserevidence';

/**
 * 
 * @export
 * @interface ToolLpDataForUserEvidencePage200Response
 */
export interface ToolLpDataForUserEvidencePage200Response {
    /**
     * Url to the tool_lp plugin folder on this Moodle site
     * @type {string}
     * @memberof ToolLpDataForUserEvidencePage200Response
     */
    pluginbaseurl: string;
    /**
     * 
     * @type {ToolLpDataForUserEvidencePage200ResponseUserevidence}
     * @memberof ToolLpDataForUserEvidencePage200Response
     */
    userevidence: ToolLpDataForUserEvidencePage200ResponseUserevidence;
}

/**
 * Check if a given object implements the ToolLpDataForUserEvidencePage200Response interface.
 */
export function instanceOfToolLpDataForUserEvidencePage200Response(value: object): boolean {
    if (!('pluginbaseurl' in value)) return false;
    if (!('userevidence' in value)) return false;
    return true;
}

export function ToolLpDataForUserEvidencePage200ResponseFromJSON(json: any): ToolLpDataForUserEvidencePage200Response {
    return ToolLpDataForUserEvidencePage200ResponseFromJSONTyped(json, false);
}

export function ToolLpDataForUserEvidencePage200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToolLpDataForUserEvidencePage200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'pluginbaseurl': json['pluginbaseurl'],
        'userevidence': ToolLpDataForUserEvidencePage200ResponseUserevidenceFromJSON(json['userevidence']),
    };
}

export function ToolLpDataForUserEvidencePage200ResponseToJSON(value?: ToolLpDataForUserEvidencePage200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'pluginbaseurl': value['pluginbaseurl'],
        'userevidence': ToolLpDataForUserEvidencePage200ResponseUserevidenceToJSON(value['userevidence']),
    };
}

