/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
 */
export interface BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense {
    /**
     * All licenses allocated
     * @type {boolean}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    allallocated: boolean;
    /**
     * Allocation
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    allocation: number;
    /**
     * Company ID
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    companyid: number;
    /**
     * Expiry date
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    expirydate: number;
    /**
     * License ID
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    id: number;
    /**
     * Instant
     * @type {boolean}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    instant: boolean;
    /**
     * License name
     * @type {string}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    name: string;
    /**
     * Parent ID
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    parentid: number;
    /**
     * Program
     * @type {boolean}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    program: boolean;
    /**
     * Reference
     * @type {string}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    reference: string;
    /**
     * Start date
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    startdate: number;
    /**
     * License type - 0 = standard, 1 = reusable, 2 = standard educator, 3 = reusable educator
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    type: number;
    /**
     * Used
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    used: number;
    /**
     * Valid length
     * @type {number}
     * @memberof BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
     */
    validlength: number;
}

/**
 * Check if a given object implements the BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense interface.
 */
export function instanceOfBlockIomadCompanyAdminGetLicenseFromId200ResponseLicense(value: object): boolean {
    if (!('allallocated' in value)) return false;
    if (!('allocation' in value)) return false;
    if (!('companyid' in value)) return false;
    if (!('expirydate' in value)) return false;
    if (!('id' in value)) return false;
    if (!('instant' in value)) return false;
    if (!('name' in value)) return false;
    if (!('parentid' in value)) return false;
    if (!('program' in value)) return false;
    if (!('reference' in value)) return false;
    if (!('startdate' in value)) return false;
    if (!('type' in value)) return false;
    if (!('used' in value)) return false;
    if (!('validlength' in value)) return false;
    return true;
}

export function BlockIomadCompanyAdminGetLicenseFromId200ResponseLicenseFromJSON(json: any): BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense {
    return BlockIomadCompanyAdminGetLicenseFromId200ResponseLicenseFromJSONTyped(json, false);
}

export function BlockIomadCompanyAdminGetLicenseFromId200ResponseLicenseFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense {
    if (json == null) {
        return json;
    }
    return {
        
        'allallocated': json['allallocated'],
        'allocation': json['allocation'],
        'companyid': json['companyid'],
        'expirydate': json['expirydate'],
        'id': json['id'],
        'instant': json['instant'],
        'name': json['name'],
        'parentid': json['parentid'],
        'program': json['program'],
        'reference': json['reference'],
        'startdate': json['startdate'],
        'type': json['type'],
        'used': json['used'],
        'validlength': json['validlength'],
    };
}

export function BlockIomadCompanyAdminGetLicenseFromId200ResponseLicenseToJSON(value?: BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'allallocated': value['allallocated'],
        'allocation': value['allocation'],
        'companyid': value['companyid'],
        'expirydate': value['expirydate'],
        'id': value['id'],
        'instant': value['instant'],
        'name': value['name'],
        'parentid': value['parentid'],
        'program': value['program'],
        'reference': value['reference'],
        'startdate': value['startdate'],
        'type': value['type'],
        'used': value['used'],
        'validlength': value['validlength'],
    };
}

