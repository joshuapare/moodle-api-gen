/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreCalendarGetCalendarDayView200ResponseDate } from './CoreCalendarGetCalendarDayView200ResponseDate';
import {
    CoreCalendarGetCalendarDayView200ResponseDateFromJSON,
    CoreCalendarGetCalendarDayView200ResponseDateFromJSONTyped,
    CoreCalendarGetCalendarDayView200ResponseDateToJSON,
} from './CoreCalendarGetCalendarDayView200ResponseDate';
import type { CoreCalendarGetCalendarDayView200ResponseEventsInner } from './CoreCalendarGetCalendarDayView200ResponseEventsInner';
import {
    CoreCalendarGetCalendarDayView200ResponseEventsInnerFromJSON,
    CoreCalendarGetCalendarDayView200ResponseEventsInnerFromJSONTyped,
    CoreCalendarGetCalendarDayView200ResponseEventsInnerToJSON,
} from './CoreCalendarGetCalendarDayView200ResponseEventsInner';
import type { CoreCalendarGetCalendarDayView200ResponseNextperiod } from './CoreCalendarGetCalendarDayView200ResponseNextperiod';
import {
    CoreCalendarGetCalendarDayView200ResponseNextperiodFromJSON,
    CoreCalendarGetCalendarDayView200ResponseNextperiodFromJSONTyped,
    CoreCalendarGetCalendarDayView200ResponseNextperiodToJSON,
} from './CoreCalendarGetCalendarDayView200ResponseNextperiod';

/**
 * 
 * @export
 * @interface CoreCalendarGetCalendarDayView200Response
 */
export interface CoreCalendarGetCalendarDayView200Response {
    /**
     * categoryid
     * @type {number}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    categoryid?: number;
    /**
     * courseid
     * @type {number}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    courseid: number;
    /**
     * 
     * @type {CoreCalendarGetCalendarDayView200ResponseDate}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    date: CoreCalendarGetCalendarDayView200ResponseDate;
    /**
     * defaulteventcontext
     * @type {number}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    defaulteventcontext: number;
    /**
     * 
     * @type {Array<CoreCalendarGetCalendarDayView200ResponseEventsInner>}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    events: Array<CoreCalendarGetCalendarDayView200ResponseEventsInner>;
    /**
     * filter_selector
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    filterSelector: string;
    /**
     * larrow
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    larrow: string;
    /**
     * neweventtimestamp
     * @type {number}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    neweventtimestamp: number;
    /**
     * 
     * @type {CoreCalendarGetCalendarDayView200ResponseNextperiod}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    nextperiod: CoreCalendarGetCalendarDayView200ResponseNextperiod;
    /**
     * nextperiodlink
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    nextperiodlink: string;
    /**
     * nextperiodname
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    nextperiodname: string;
    /**
     * periodname
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    periodname: string;
    /**
     * 
     * @type {CoreCalendarGetCalendarDayView200ResponseNextperiod}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    previousperiod: CoreCalendarGetCalendarDayView200ResponseNextperiod;
    /**
     * previousperiodlink
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    previousperiodlink: string;
    /**
     * previousperiodname
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    previousperiodname: string;
    /**
     * rarrow
     * @type {string}
     * @memberof CoreCalendarGetCalendarDayView200Response
     */
    rarrow: string;
}

/**
 * Check if a given object implements the CoreCalendarGetCalendarDayView200Response interface.
 */
export function instanceOfCoreCalendarGetCalendarDayView200Response(value: object): boolean {
    if (!('courseid' in value)) return false;
    if (!('date' in value)) return false;
    if (!('defaulteventcontext' in value)) return false;
    if (!('events' in value)) return false;
    if (!('filterSelector' in value)) return false;
    if (!('larrow' in value)) return false;
    if (!('neweventtimestamp' in value)) return false;
    if (!('nextperiod' in value)) return false;
    if (!('nextperiodlink' in value)) return false;
    if (!('nextperiodname' in value)) return false;
    if (!('periodname' in value)) return false;
    if (!('previousperiod' in value)) return false;
    if (!('previousperiodlink' in value)) return false;
    if (!('previousperiodname' in value)) return false;
    if (!('rarrow' in value)) return false;
    return true;
}

export function CoreCalendarGetCalendarDayView200ResponseFromJSON(json: any): CoreCalendarGetCalendarDayView200Response {
    return CoreCalendarGetCalendarDayView200ResponseFromJSONTyped(json, false);
}

export function CoreCalendarGetCalendarDayView200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoreCalendarGetCalendarDayView200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'categoryid': json['categoryid'] == null ? undefined : json['categoryid'],
        'courseid': json['courseid'],
        'date': CoreCalendarGetCalendarDayView200ResponseDateFromJSON(json['date']),
        'defaulteventcontext': json['defaulteventcontext'],
        'events': ((json['events'] as Array<any>).map(CoreCalendarGetCalendarDayView200ResponseEventsInnerFromJSON)),
        'filterSelector': json['filter_selector'],
        'larrow': json['larrow'],
        'neweventtimestamp': json['neweventtimestamp'],
        'nextperiod': CoreCalendarGetCalendarDayView200ResponseNextperiodFromJSON(json['nextperiod']),
        'nextperiodlink': json['nextperiodlink'],
        'nextperiodname': json['nextperiodname'],
        'periodname': json['periodname'],
        'previousperiod': CoreCalendarGetCalendarDayView200ResponseNextperiodFromJSON(json['previousperiod']),
        'previousperiodlink': json['previousperiodlink'],
        'previousperiodname': json['previousperiodname'],
        'rarrow': json['rarrow'],
    };
}

export function CoreCalendarGetCalendarDayView200ResponseToJSON(value?: CoreCalendarGetCalendarDayView200Response | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'categoryid': value['categoryid'],
        'courseid': value['courseid'],
        'date': CoreCalendarGetCalendarDayView200ResponseDateToJSON(value['date']),
        'defaulteventcontext': value['defaulteventcontext'],
        'events': ((value['events'] as Array<any>).map(CoreCalendarGetCalendarDayView200ResponseEventsInnerToJSON)),
        'filter_selector': value['filterSelector'],
        'larrow': value['larrow'],
        'neweventtimestamp': value['neweventtimestamp'],
        'nextperiod': CoreCalendarGetCalendarDayView200ResponseNextperiodToJSON(value['nextperiod']),
        'nextperiodlink': value['nextperiodlink'],
        'nextperiodname': value['nextperiodname'],
        'periodname': value['periodname'],
        'previousperiod': CoreCalendarGetCalendarDayView200ResponseNextperiodToJSON(value['previousperiod']),
        'previousperiodlink': value['previousperiodlink'],
        'previousperiodname': value['previousperiodname'],
        'rarrow': value['rarrow'],
    };
}

