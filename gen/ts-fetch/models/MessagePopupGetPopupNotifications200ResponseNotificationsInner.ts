/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * message
 * @export
 * @interface MessagePopupGetPopupNotifications200ResponseNotificationsInner
 */
export interface MessagePopupGetPopupNotifications200ResponseNotificationsInner {
    /**
     * The component that generated the notification
     * @type {string}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    component?: string;
    /**
     * Context URL
     * @type {string}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    contexturl?: string;
    /**
     * Context URL link name
     * @type {string}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    contexturlname?: string;
    /**
     * Custom data to be passed to the message processor.
     *                                 The data here is serialised using json_encode().
     * @type {string}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    customdata?: string;
    /**
     * notification deletion status
     * @type {boolean}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    deleted?: boolean;
    /**
     * The type of notification
     * @type {string}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    eventtype?: string;
    /**
     * The message
     * @type {string}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    fullmessage?: string;
    /**
     * fullmessage format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     * @type {number}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    fullmessageformat?: number;
    /**
     * The message in html
     * @type {string}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    fullmessagehtml?: string;
    /**
     * URL for notification icon
     * @type {string}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    iconurl?: string;
    /**
     * Notification id (this is not guaranteed to be unique
     *                                 within this result set)
     * @type {number}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    id?: number;
    /**
     * notification read status
     * @type {boolean}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    read?: boolean;
    /**
     * The notification subject shortened
     *                                 with ellipsis
     * @type {string}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    shortenedsubject?: string;
    /**
     * The shorten message
     * @type {string}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    smallmessage?: string;
    /**
     * The notification subject
     * @type {string}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    subject?: string;
    /**
     * The message text formated
     * @type {string}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    text?: string;
    /**
     * Time created
     * @type {number}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    timecreated?: number;
    /**
     * Time created in a pretty format
     * @type {string}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    timecreatedpretty?: string;
    /**
     * Time read
     * @type {number}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    timeread?: number;
    /**
     * User from id
     * @type {number}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    useridfrom?: number;
    /**
     * User to id
     * @type {number}
     * @memberof MessagePopupGetPopupNotifications200ResponseNotificationsInner
     */
    useridto?: number;
}

/**
 * Check if a given object implements the MessagePopupGetPopupNotifications200ResponseNotificationsInner interface.
 */
export function instanceOfMessagePopupGetPopupNotifications200ResponseNotificationsInner(value: object): boolean {
    return true;
}

export function MessagePopupGetPopupNotifications200ResponseNotificationsInnerFromJSON(json: any): MessagePopupGetPopupNotifications200ResponseNotificationsInner {
    return MessagePopupGetPopupNotifications200ResponseNotificationsInnerFromJSONTyped(json, false);
}

export function MessagePopupGetPopupNotifications200ResponseNotificationsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessagePopupGetPopupNotifications200ResponseNotificationsInner {
    if (json == null) {
        return json;
    }
    return {
        
        'component': json['component'] == null ? undefined : json['component'],
        'contexturl': json['contexturl'] == null ? undefined : json['contexturl'],
        'contexturlname': json['contexturlname'] == null ? undefined : json['contexturlname'],
        'customdata': json['customdata'] == null ? undefined : json['customdata'],
        'deleted': json['deleted'] == null ? undefined : json['deleted'],
        'eventtype': json['eventtype'] == null ? undefined : json['eventtype'],
        'fullmessage': json['fullmessage'] == null ? undefined : json['fullmessage'],
        'fullmessageformat': json['fullmessageformat'] == null ? undefined : json['fullmessageformat'],
        'fullmessagehtml': json['fullmessagehtml'] == null ? undefined : json['fullmessagehtml'],
        'iconurl': json['iconurl'] == null ? undefined : json['iconurl'],
        'id': json['id'] == null ? undefined : json['id'],
        'read': json['read'] == null ? undefined : json['read'],
        'shortenedsubject': json['shortenedsubject'] == null ? undefined : json['shortenedsubject'],
        'smallmessage': json['smallmessage'] == null ? undefined : json['smallmessage'],
        'subject': json['subject'] == null ? undefined : json['subject'],
        'text': json['text'] == null ? undefined : json['text'],
        'timecreated': json['timecreated'] == null ? undefined : json['timecreated'],
        'timecreatedpretty': json['timecreatedpretty'] == null ? undefined : json['timecreatedpretty'],
        'timeread': json['timeread'] == null ? undefined : json['timeread'],
        'useridfrom': json['useridfrom'] == null ? undefined : json['useridfrom'],
        'useridto': json['useridto'] == null ? undefined : json['useridto'],
    };
}

export function MessagePopupGetPopupNotifications200ResponseNotificationsInnerToJSON(value?: MessagePopupGetPopupNotifications200ResponseNotificationsInner | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'component': value['component'],
        'contexturl': value['contexturl'],
        'contexturlname': value['contexturlname'],
        'customdata': value['customdata'],
        'deleted': value['deleted'],
        'eventtype': value['eventtype'],
        'fullmessage': value['fullmessage'],
        'fullmessageformat': value['fullmessageformat'],
        'fullmessagehtml': value['fullmessagehtml'],
        'iconurl': value['iconurl'],
        'id': value['id'],
        'read': value['read'],
        'shortenedsubject': value['shortenedsubject'],
        'smallmessage': value['smallmessage'],
        'subject': value['subject'],
        'text': value['text'],
        'timecreated': value['timecreated'],
        'timecreatedpretty': value['timecreatedpretty'],
        'timeread': value['timeread'],
        'useridfrom': value['useridfrom'],
        'useridto': value['useridto'],
    };
}

