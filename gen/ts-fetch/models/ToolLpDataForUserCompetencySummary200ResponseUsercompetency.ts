/* tslint:disable */
/* eslint-disable */
/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreCompetencyGradeCompetency200ResponseActionuser } from './CoreCompetencyGradeCompetency200ResponseActionuser';
import {
    CoreCompetencyGradeCompetency200ResponseActionuserFromJSON,
    CoreCompetencyGradeCompetency200ResponseActionuserFromJSONTyped,
    CoreCompetencyGradeCompetency200ResponseActionuserToJSON,
} from './CoreCompetencyGradeCompetency200ResponseActionuser';

/**
 * 
 * @export
 * @interface ToolLpDataForUserCompetencySummary200ResponseUsercompetency
 */
export interface ToolLpDataForUserCompetencySummary200ResponseUsercompetency {
    /**
     * canrequestreview
     * @type {boolean}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    canrequestreview: boolean;
    /**
     * canreview
     * @type {boolean}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    canreview: boolean;
    /**
     * competencyid
     * @type {number}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    competencyid: number;
    /**
     * grade
     * @type {number}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    grade: number;
    /**
     * gradename
     * @type {string}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    gradename: string;
    /**
     * id
     * @type {number}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    id: number;
    /**
     * iscancelreviewrequestallowed
     * @type {boolean}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    iscancelreviewrequestallowed: boolean;
    /**
     * isrequestreviewallowed
     * @type {boolean}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    isrequestreviewallowed: boolean;
    /**
     * isstartreviewallowed
     * @type {boolean}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    isstartreviewallowed: boolean;
    /**
     * isstatusidle
     * @type {boolean}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    isstatusidle: boolean;
    /**
     * isstatusinreview
     * @type {boolean}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    isstatusinreview: boolean;
    /**
     * isstatuswaitingforreview
     * @type {boolean}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    isstatuswaitingforreview: boolean;
    /**
     * isstopreviewallowed
     * @type {boolean}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    isstopreviewallowed: boolean;
    /**
     * proficiency
     * @type {boolean}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    proficiency: boolean;
    /**
     * proficiencyname
     * @type {string}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    proficiencyname: string;
    /**
     * 
     * @type {CoreCompetencyGradeCompetency200ResponseActionuser}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    reviewer?: CoreCompetencyGradeCompetency200ResponseActionuser;
    /**
     * reviewerid
     * @type {number}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    reviewerid: number;
    /**
     * status
     * @type {number}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    status: number;
    /**
     * statusname
     * @type {string}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    statusname: string;
    /**
     * timecreated
     * @type {number}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    timecreated: number;
    /**
     * timemodified
     * @type {number}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    timemodified: number;
    /**
     * url
     * @type {string}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    url: string;
    /**
     * userid
     * @type {number}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    userid: number;
    /**
     * usermodified
     * @type {number}
     * @memberof ToolLpDataForUserCompetencySummary200ResponseUsercompetency
     */
    usermodified: number;
}

/**
 * Check if a given object implements the ToolLpDataForUserCompetencySummary200ResponseUsercompetency interface.
 */
export function instanceOfToolLpDataForUserCompetencySummary200ResponseUsercompetency(value: object): boolean {
    if (!('canrequestreview' in value)) return false;
    if (!('canreview' in value)) return false;
    if (!('competencyid' in value)) return false;
    if (!('grade' in value)) return false;
    if (!('gradename' in value)) return false;
    if (!('id' in value)) return false;
    if (!('iscancelreviewrequestallowed' in value)) return false;
    if (!('isrequestreviewallowed' in value)) return false;
    if (!('isstartreviewallowed' in value)) return false;
    if (!('isstatusidle' in value)) return false;
    if (!('isstatusinreview' in value)) return false;
    if (!('isstatuswaitingforreview' in value)) return false;
    if (!('isstopreviewallowed' in value)) return false;
    if (!('proficiency' in value)) return false;
    if (!('proficiencyname' in value)) return false;
    if (!('reviewerid' in value)) return false;
    if (!('status' in value)) return false;
    if (!('statusname' in value)) return false;
    if (!('timecreated' in value)) return false;
    if (!('timemodified' in value)) return false;
    if (!('url' in value)) return false;
    if (!('userid' in value)) return false;
    if (!('usermodified' in value)) return false;
    return true;
}

export function ToolLpDataForUserCompetencySummary200ResponseUsercompetencyFromJSON(json: any): ToolLpDataForUserCompetencySummary200ResponseUsercompetency {
    return ToolLpDataForUserCompetencySummary200ResponseUsercompetencyFromJSONTyped(json, false);
}

export function ToolLpDataForUserCompetencySummary200ResponseUsercompetencyFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToolLpDataForUserCompetencySummary200ResponseUsercompetency {
    if (json == null) {
        return json;
    }
    return {
        
        'canrequestreview': json['canrequestreview'],
        'canreview': json['canreview'],
        'competencyid': json['competencyid'],
        'grade': json['grade'],
        'gradename': json['gradename'],
        'id': json['id'],
        'iscancelreviewrequestallowed': json['iscancelreviewrequestallowed'],
        'isrequestreviewallowed': json['isrequestreviewallowed'],
        'isstartreviewallowed': json['isstartreviewallowed'],
        'isstatusidle': json['isstatusidle'],
        'isstatusinreview': json['isstatusinreview'],
        'isstatuswaitingforreview': json['isstatuswaitingforreview'],
        'isstopreviewallowed': json['isstopreviewallowed'],
        'proficiency': json['proficiency'],
        'proficiencyname': json['proficiencyname'],
        'reviewer': json['reviewer'] == null ? undefined : CoreCompetencyGradeCompetency200ResponseActionuserFromJSON(json['reviewer']),
        'reviewerid': json['reviewerid'],
        'status': json['status'],
        'statusname': json['statusname'],
        'timecreated': json['timecreated'],
        'timemodified': json['timemodified'],
        'url': json['url'],
        'userid': json['userid'],
        'usermodified': json['usermodified'],
    };
}

export function ToolLpDataForUserCompetencySummary200ResponseUsercompetencyToJSON(value?: ToolLpDataForUserCompetencySummary200ResponseUsercompetency | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'canrequestreview': value['canrequestreview'],
        'canreview': value['canreview'],
        'competencyid': value['competencyid'],
        'grade': value['grade'],
        'gradename': value['gradename'],
        'id': value['id'],
        'iscancelreviewrequestallowed': value['iscancelreviewrequestallowed'],
        'isrequestreviewallowed': value['isrequestreviewallowed'],
        'isstartreviewallowed': value['isstartreviewallowed'],
        'isstatusidle': value['isstatusidle'],
        'isstatusinreview': value['isstatusinreview'],
        'isstatuswaitingforreview': value['isstatuswaitingforreview'],
        'isstopreviewallowed': value['isstopreviewallowed'],
        'proficiency': value['proficiency'],
        'proficiencyname': value['proficiencyname'],
        'reviewer': CoreCompetencyGradeCompetency200ResponseActionuserToJSON(value['reviewer']),
        'reviewerid': value['reviewerid'],
        'status': value['status'],
        'statusname': value['statusname'],
        'timecreated': value['timecreated'],
        'timemodified': value['timemodified'],
        'url': value['url'],
        'userid': value['userid'],
        'usermodified': value['usermodified'],
    };
}

