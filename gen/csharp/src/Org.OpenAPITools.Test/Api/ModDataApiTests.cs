/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ModDataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ModDataApiTests : IDisposable
    {
        private ModDataApi instance;

        public ModDataApiTests()
        {
            instance = new ModDataApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ModDataApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ModDataApi
            //Assert.IsType<ModDataApi>(instance);
        }

        /// <summary>
        /// Test ModDataAddEntry
        /// </summary>
        [Fact]
        public void ModDataAddEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModDataAddEntryRequest modDataAddEntryRequest = null;
            //var response = instance.ModDataAddEntry(modDataAddEntryRequest);
            //Assert.IsType<ModDataAddEntry200Response>(response);
        }

        /// <summary>
        /// Test ModDataApproveEntry
        /// </summary>
        [Fact]
        public void ModDataApproveEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModDataApproveEntryRequest modDataApproveEntryRequest = null;
            //var response = instance.ModDataApproveEntry(modDataApproveEntryRequest);
            //Assert.IsType<CoreCalendarDeleteSubscription200Response>(response);
        }

        /// <summary>
        /// Test ModDataDeleteEntry
        /// </summary>
        [Fact]
        public void ModDataDeleteEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModDataDeleteEntryRequest modDataDeleteEntryRequest = null;
            //var response = instance.ModDataDeleteEntry(modDataDeleteEntryRequest);
            //Assert.IsType<ModDataDeleteEntry200Response>(response);
        }

        /// <summary>
        /// Test ModDataDeleteSavedPreset
        /// </summary>
        [Fact]
        public void ModDataDeleteSavedPresetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModDataDeleteSavedPresetRequest modDataDeleteSavedPresetRequest = null;
            //var response = instance.ModDataDeleteSavedPreset(modDataDeleteSavedPresetRequest);
            //Assert.IsType<CoreContentbankRenameContent200Response>(response);
        }

        /// <summary>
        /// Test ModDataGetDataAccessInformation
        /// </summary>
        [Fact]
        public void ModDataGetDataAccessInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModDataGetDataAccessInformationRequest modDataGetDataAccessInformationRequest = null;
            //var response = instance.ModDataGetDataAccessInformation(modDataGetDataAccessInformationRequest);
            //Assert.IsType<ModDataGetDataAccessInformation200Response>(response);
        }

        /// <summary>
        /// Test ModDataGetDatabasesByCourses
        /// </summary>
        [Fact]
        public void ModDataGetDatabasesByCoursesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest = null;
            //var response = instance.ModDataGetDatabasesByCourses(modChatGetChatsByCoursesRequest);
            //Assert.IsType<ModDataGetDatabasesByCourses200Response>(response);
        }

        /// <summary>
        /// Test ModDataGetEntries
        /// </summary>
        [Fact]
        public void ModDataGetEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModDataGetEntriesRequest modDataGetEntriesRequest = null;
            //var response = instance.ModDataGetEntries(modDataGetEntriesRequest);
            //Assert.IsType<ModDataGetEntries200Response>(response);
        }

        /// <summary>
        /// Test ModDataGetEntry
        /// </summary>
        [Fact]
        public void ModDataGetEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModDataGetEntryRequest modDataGetEntryRequest = null;
            //var response = instance.ModDataGetEntry(modDataGetEntryRequest);
            //Assert.IsType<ModDataGetEntry200Response>(response);
        }

        /// <summary>
        /// Test ModDataGetFields
        /// </summary>
        [Fact]
        public void ModDataGetFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModDataGetFieldsRequest modDataGetFieldsRequest = null;
            //var response = instance.ModDataGetFields(modDataGetFieldsRequest);
            //Assert.IsType<ModDataGetFields200Response>(response);
        }

        /// <summary>
        /// Test ModDataGetMappingInformation
        /// </summary>
        [Fact]
        public void ModDataGetMappingInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModDataGetMappingInformationRequest modDataGetMappingInformationRequest = null;
            //var response = instance.ModDataGetMappingInformation(modDataGetMappingInformationRequest);
            //Assert.IsType<ModDataGetMappingInformation200Response>(response);
        }

        /// <summary>
        /// Test ModDataSearchEntries
        /// </summary>
        [Fact]
        public void ModDataSearchEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModDataSearchEntriesRequest modDataSearchEntriesRequest = null;
            //var response = instance.ModDataSearchEntries(modDataSearchEntriesRequest);
            //Assert.IsType<ModDataSearchEntries200Response>(response);
        }

        /// <summary>
        /// Test ModDataUpdateEntry
        /// </summary>
        [Fact]
        public void ModDataUpdateEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModDataUpdateEntryRequest modDataUpdateEntryRequest = null;
            //var response = instance.ModDataUpdateEntry(modDataUpdateEntryRequest);
            //Assert.IsType<ModDataUpdateEntry200Response>(response);
        }

        /// <summary>
        /// Test ModDataViewDatabase
        /// </summary>
        [Fact]
        public void ModDataViewDatabaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModDataViewDatabaseRequest modDataViewDatabaseRequest = null;
            //var response = instance.ModDataViewDatabase(modDataViewDatabaseRequest);
            //Assert.IsType<CoreCalendarDeleteSubscription200Response>(response);
        }
    }
}
