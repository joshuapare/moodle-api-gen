/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreCompetencyReadPlan200Response
    /// </summary>
    [DataContract(Name = "core_competency_read_plan_200_response")]
    public partial class CoreCompetencyReadPlan200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCompetencyReadPlan200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreCompetencyReadPlan200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCompetencyReadPlan200Response" /> class.
        /// </summary>
        /// <param name="canbeedited">canbeedited (required).</param>
        /// <param name="canmanage">canmanage (required).</param>
        /// <param name="canrequestreview">canrequestreview (required).</param>
        /// <param name="canreview">canreview (required).</param>
        /// <param name="commentarea">commentarea (required).</param>
        /// <param name="description">description (required) (default to &quot;&quot;).</param>
        /// <param name="descriptionformat">description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 1).</param>
        /// <param name="duedate">duedate (required) (default to 0).</param>
        /// <param name="duedateformatted">duedateformatted (required).</param>
        /// <param name="id">id (required) (default to 0).</param>
        /// <param name="isactive">isactive (required).</param>
        /// <param name="isapproveallowed">isapproveallowed (required).</param>
        /// <param name="isbasedontemplate">isbasedontemplate (required).</param>
        /// <param name="iscancelreviewrequestallowed">iscancelreviewrequestallowed (required).</param>
        /// <param name="iscompleteallowed">iscompleteallowed (required).</param>
        /// <param name="iscompleted">iscompleted (required).</param>
        /// <param name="isdraft">isdraft (required).</param>
        /// <param name="isinreview">isinreview (required).</param>
        /// <param name="isreopenallowed">isreopenallowed (required).</param>
        /// <param name="isrequestreviewallowed">isrequestreviewallowed (required).</param>
        /// <param name="isstartreviewallowed">isstartreviewallowed (required).</param>
        /// <param name="isstopreviewallowed">isstopreviewallowed (required).</param>
        /// <param name="isunapproveallowed">isunapproveallowed (required).</param>
        /// <param name="isunlinkallowed">isunlinkallowed (required).</param>
        /// <param name="iswaitingforreview">iswaitingforreview (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="origtemplateid">origtemplateid (required).</param>
        /// <param name="reviewer">reviewer.</param>
        /// <param name="reviewerid">reviewerid (required).</param>
        /// <param name="status">status (required) (default to 0).</param>
        /// <param name="statusname">statusname (required).</param>
        /// <param name="template">template.</param>
        /// <param name="templateid">templateid (required).</param>
        /// <param name="timecreated">timecreated (required) (default to 0).</param>
        /// <param name="timemodified">timemodified (required) (default to 0).</param>
        /// <param name="url">url (required).</param>
        /// <param name="userid">userid (required).</param>
        /// <param name="usermodified">usermodified (required) (default to 0).</param>
        public CoreCompetencyReadPlan200Response(bool canbeedited = default(bool), bool canmanage = default(bool), bool canrequestreview = default(bool), bool canreview = default(bool), CoreCompetencyReadPlan200ResponseCommentarea commentarea = default(CoreCompetencyReadPlan200ResponseCommentarea), string description = @"", int descriptionformat = 1, int duedate = 0, string duedateformatted = default(string), int id = 0, bool isactive = default(bool), bool isapproveallowed = default(bool), bool isbasedontemplate = default(bool), bool iscancelreviewrequestallowed = default(bool), bool iscompleteallowed = default(bool), bool iscompleted = default(bool), bool isdraft = default(bool), bool isinreview = default(bool), bool isreopenallowed = default(bool), bool isrequestreviewallowed = default(bool), bool isstartreviewallowed = default(bool), bool isstopreviewallowed = default(bool), bool isunapproveallowed = default(bool), bool isunlinkallowed = default(bool), bool iswaitingforreview = default(bool), string name = default(string), int origtemplateid = default(int), CoreCompetencyGradeCompetency200ResponseActionuser reviewer = default(CoreCompetencyGradeCompetency200ResponseActionuser), int reviewerid = default(int), int status = 0, string statusname = default(string), CoreCompetencyCreateTemplate200Response template = default(CoreCompetencyCreateTemplate200Response), int templateid = default(int), int timecreated = 0, int timemodified = 0, string url = default(string), int userid = default(int), int usermodified = 0)
        {
            this.Canbeedited = canbeedited;
            this.Canmanage = canmanage;
            this.Canrequestreview = canrequestreview;
            this.Canreview = canreview;
            // to ensure "commentarea" is required (not null)
            if (commentarea == null)
            {
                throw new ArgumentNullException("commentarea is a required property for CoreCompetencyReadPlan200Response and cannot be null");
            }
            this.Commentarea = commentarea;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for CoreCompetencyReadPlan200Response and cannot be null");
            }
            this.Description = description;
            this.Duedate = duedate;
            // to ensure "duedateformatted" is required (not null)
            if (duedateformatted == null)
            {
                throw new ArgumentNullException("duedateformatted is a required property for CoreCompetencyReadPlan200Response and cannot be null");
            }
            this.Duedateformatted = duedateformatted;
            this.Id = id;
            this.Isactive = isactive;
            this.Isapproveallowed = isapproveallowed;
            this.Isbasedontemplate = isbasedontemplate;
            this.Iscancelreviewrequestallowed = iscancelreviewrequestallowed;
            this.Iscompleteallowed = iscompleteallowed;
            this.Iscompleted = iscompleted;
            this.Isdraft = isdraft;
            this.Isinreview = isinreview;
            this.Isreopenallowed = isreopenallowed;
            this.Isrequestreviewallowed = isrequestreviewallowed;
            this.Isstartreviewallowed = isstartreviewallowed;
            this.Isstopreviewallowed = isstopreviewallowed;
            this.Isunapproveallowed = isunapproveallowed;
            this.Isunlinkallowed = isunlinkallowed;
            this.Iswaitingforreview = iswaitingforreview;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CoreCompetencyReadPlan200Response and cannot be null");
            }
            this.Name = name;
            this.Origtemplateid = origtemplateid;
            this.Reviewerid = reviewerid;
            this.Status = status;
            // to ensure "statusname" is required (not null)
            if (statusname == null)
            {
                throw new ArgumentNullException("statusname is a required property for CoreCompetencyReadPlan200Response and cannot be null");
            }
            this.Statusname = statusname;
            this.Templateid = templateid;
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for CoreCompetencyReadPlan200Response and cannot be null");
            }
            this.Url = url;
            this.Userid = userid;
            this.Usermodified = usermodified;
            this.Descriptionformat = descriptionformat;
            this.Reviewer = reviewer;
            this.Template = template;
        }

        /// <summary>
        /// canbeedited
        /// </summary>
        /// <value>canbeedited</value>
        [DataMember(Name = "canbeedited", IsRequired = true, EmitDefaultValue = true)]
        public bool Canbeedited { get; set; }

        /// <summary>
        /// canmanage
        /// </summary>
        /// <value>canmanage</value>
        [DataMember(Name = "canmanage", IsRequired = true, EmitDefaultValue = true)]
        public bool Canmanage { get; set; }

        /// <summary>
        /// canrequestreview
        /// </summary>
        /// <value>canrequestreview</value>
        [DataMember(Name = "canrequestreview", IsRequired = true, EmitDefaultValue = true)]
        public bool Canrequestreview { get; set; }

        /// <summary>
        /// canreview
        /// </summary>
        /// <value>canreview</value>
        [DataMember(Name = "canreview", IsRequired = true, EmitDefaultValue = true)]
        public bool Canreview { get; set; }

        /// <summary>
        /// Gets or Sets Commentarea
        /// </summary>
        [DataMember(Name = "commentarea", IsRequired = true, EmitDefaultValue = true)]
        public CoreCompetencyReadPlan200ResponseCommentarea Commentarea { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "descriptionformat", EmitDefaultValue = false)]
        public int Descriptionformat { get; set; }

        /// <summary>
        /// duedate
        /// </summary>
        /// <value>duedate</value>
        [DataMember(Name = "duedate", IsRequired = true, EmitDefaultValue = true)]
        public int Duedate { get; set; }

        /// <summary>
        /// duedateformatted
        /// </summary>
        /// <value>duedateformatted</value>
        [DataMember(Name = "duedateformatted", IsRequired = true, EmitDefaultValue = true)]
        public string Duedateformatted { get; set; }

        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// isactive
        /// </summary>
        /// <value>isactive</value>
        [DataMember(Name = "isactive", IsRequired = true, EmitDefaultValue = true)]
        public bool Isactive { get; set; }

        /// <summary>
        /// isapproveallowed
        /// </summary>
        /// <value>isapproveallowed</value>
        [DataMember(Name = "isapproveallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Isapproveallowed { get; set; }

        /// <summary>
        /// isbasedontemplate
        /// </summary>
        /// <value>isbasedontemplate</value>
        [DataMember(Name = "isbasedontemplate", IsRequired = true, EmitDefaultValue = true)]
        public bool Isbasedontemplate { get; set; }

        /// <summary>
        /// iscancelreviewrequestallowed
        /// </summary>
        /// <value>iscancelreviewrequestallowed</value>
        [DataMember(Name = "iscancelreviewrequestallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Iscancelreviewrequestallowed { get; set; }

        /// <summary>
        /// iscompleteallowed
        /// </summary>
        /// <value>iscompleteallowed</value>
        [DataMember(Name = "iscompleteallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Iscompleteallowed { get; set; }

        /// <summary>
        /// iscompleted
        /// </summary>
        /// <value>iscompleted</value>
        [DataMember(Name = "iscompleted", IsRequired = true, EmitDefaultValue = true)]
        public bool Iscompleted { get; set; }

        /// <summary>
        /// isdraft
        /// </summary>
        /// <value>isdraft</value>
        [DataMember(Name = "isdraft", IsRequired = true, EmitDefaultValue = true)]
        public bool Isdraft { get; set; }

        /// <summary>
        /// isinreview
        /// </summary>
        /// <value>isinreview</value>
        [DataMember(Name = "isinreview", IsRequired = true, EmitDefaultValue = true)]
        public bool Isinreview { get; set; }

        /// <summary>
        /// isreopenallowed
        /// </summary>
        /// <value>isreopenallowed</value>
        [DataMember(Name = "isreopenallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Isreopenallowed { get; set; }

        /// <summary>
        /// isrequestreviewallowed
        /// </summary>
        /// <value>isrequestreviewallowed</value>
        [DataMember(Name = "isrequestreviewallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Isrequestreviewallowed { get; set; }

        /// <summary>
        /// isstartreviewallowed
        /// </summary>
        /// <value>isstartreviewallowed</value>
        [DataMember(Name = "isstartreviewallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Isstartreviewallowed { get; set; }

        /// <summary>
        /// isstopreviewallowed
        /// </summary>
        /// <value>isstopreviewallowed</value>
        [DataMember(Name = "isstopreviewallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Isstopreviewallowed { get; set; }

        /// <summary>
        /// isunapproveallowed
        /// </summary>
        /// <value>isunapproveallowed</value>
        [DataMember(Name = "isunapproveallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Isunapproveallowed { get; set; }

        /// <summary>
        /// isunlinkallowed
        /// </summary>
        /// <value>isunlinkallowed</value>
        [DataMember(Name = "isunlinkallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Isunlinkallowed { get; set; }

        /// <summary>
        /// iswaitingforreview
        /// </summary>
        /// <value>iswaitingforreview</value>
        [DataMember(Name = "iswaitingforreview", IsRequired = true, EmitDefaultValue = true)]
        public bool Iswaitingforreview { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// origtemplateid
        /// </summary>
        /// <value>origtemplateid</value>
        [DataMember(Name = "origtemplateid", IsRequired = true, EmitDefaultValue = true)]
        public int Origtemplateid { get; set; }

        /// <summary>
        /// Gets or Sets Reviewer
        /// </summary>
        [DataMember(Name = "reviewer", EmitDefaultValue = false)]
        public CoreCompetencyGradeCompetency200ResponseActionuser Reviewer { get; set; }

        /// <summary>
        /// reviewerid
        /// </summary>
        /// <value>reviewerid</value>
        [DataMember(Name = "reviewerid", IsRequired = true, EmitDefaultValue = true)]
        public int Reviewerid { get; set; }

        /// <summary>
        /// status
        /// </summary>
        /// <value>status</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public int Status { get; set; }

        /// <summary>
        /// statusname
        /// </summary>
        /// <value>statusname</value>
        [DataMember(Name = "statusname", IsRequired = true, EmitDefaultValue = true)]
        public string Statusname { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public CoreCompetencyCreateTemplate200Response Template { get; set; }

        /// <summary>
        /// templateid
        /// </summary>
        /// <value>templateid</value>
        [DataMember(Name = "templateid", IsRequired = true, EmitDefaultValue = true)]
        public int Templateid { get; set; }

        /// <summary>
        /// timecreated
        /// </summary>
        /// <value>timecreated</value>
        [DataMember(Name = "timecreated", IsRequired = true, EmitDefaultValue = true)]
        public int Timecreated { get; set; }

        /// <summary>
        /// timemodified
        /// </summary>
        /// <value>timemodified</value>
        [DataMember(Name = "timemodified", IsRequired = true, EmitDefaultValue = true)]
        public int Timemodified { get; set; }

        /// <summary>
        /// url
        /// </summary>
        /// <value>url</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// userid
        /// </summary>
        /// <value>userid</value>
        [DataMember(Name = "userid", IsRequired = true, EmitDefaultValue = true)]
        public int Userid { get; set; }

        /// <summary>
        /// usermodified
        /// </summary>
        /// <value>usermodified</value>
        [DataMember(Name = "usermodified", IsRequired = true, EmitDefaultValue = true)]
        public int Usermodified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCompetencyReadPlan200Response {\n");
            sb.Append("  Canbeedited: ").Append(Canbeedited).Append("\n");
            sb.Append("  Canmanage: ").Append(Canmanage).Append("\n");
            sb.Append("  Canrequestreview: ").Append(Canrequestreview).Append("\n");
            sb.Append("  Canreview: ").Append(Canreview).Append("\n");
            sb.Append("  Commentarea: ").Append(Commentarea).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Descriptionformat: ").Append(Descriptionformat).Append("\n");
            sb.Append("  Duedate: ").Append(Duedate).Append("\n");
            sb.Append("  Duedateformatted: ").Append(Duedateformatted).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Isactive: ").Append(Isactive).Append("\n");
            sb.Append("  Isapproveallowed: ").Append(Isapproveallowed).Append("\n");
            sb.Append("  Isbasedontemplate: ").Append(Isbasedontemplate).Append("\n");
            sb.Append("  Iscancelreviewrequestallowed: ").Append(Iscancelreviewrequestallowed).Append("\n");
            sb.Append("  Iscompleteallowed: ").Append(Iscompleteallowed).Append("\n");
            sb.Append("  Iscompleted: ").Append(Iscompleted).Append("\n");
            sb.Append("  Isdraft: ").Append(Isdraft).Append("\n");
            sb.Append("  Isinreview: ").Append(Isinreview).Append("\n");
            sb.Append("  Isreopenallowed: ").Append(Isreopenallowed).Append("\n");
            sb.Append("  Isrequestreviewallowed: ").Append(Isrequestreviewallowed).Append("\n");
            sb.Append("  Isstartreviewallowed: ").Append(Isstartreviewallowed).Append("\n");
            sb.Append("  Isstopreviewallowed: ").Append(Isstopreviewallowed).Append("\n");
            sb.Append("  Isunapproveallowed: ").Append(Isunapproveallowed).Append("\n");
            sb.Append("  Isunlinkallowed: ").Append(Isunlinkallowed).Append("\n");
            sb.Append("  Iswaitingforreview: ").Append(Iswaitingforreview).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Origtemplateid: ").Append(Origtemplateid).Append("\n");
            sb.Append("  Reviewer: ").Append(Reviewer).Append("\n");
            sb.Append("  Reviewerid: ").Append(Reviewerid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Statusname: ").Append(Statusname).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Templateid: ").Append(Templateid).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("  Usermodified: ").Append(Usermodified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
