/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModLessonGetPageData200ResponsePage
    /// </summary>
    [DataContract(Name = "mod_lesson_get_page_data_200_response_page")]
    public partial class ModLessonGetPageData200ResponsePage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetPageData200ResponsePage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModLessonGetPageData200ResponsePage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetPageData200ResponsePage" /> class.
        /// </summary>
        /// <param name="contents">The contents of this page (default to &quot;null&quot;).</param>
        /// <param name="contentsformat">contents format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to null).</param>
        /// <param name="display">Used to record page specific display selections (required) (default to null).</param>
        /// <param name="displayinmenublock">Toggles display in the left menu block (required) (default to null).</param>
        /// <param name="id">The id of this lesson page (required) (default to null).</param>
        /// <param name="layout">Used to record page specific layout selections (required) (default to null).</param>
        /// <param name="lessonid">The id of the lesson this page belongs to (required) (default to null).</param>
        /// <param name="nextpageid">The id of the next page in the page sequence (required) (default to null).</param>
        /// <param name="prevpageid">The id of the page before this one (required) (default to null).</param>
        /// <param name="qoption">Used to record page type specific options (required) (default to null).</param>
        /// <param name="qtype">Identifies the page type of this page (required) (default to null).</param>
        /// <param name="timecreated">Timestamp for when the page was created (required) (default to null).</param>
        /// <param name="timemodified">Timestamp for when the page was last modified (required) (default to null).</param>
        /// <param name="title">The title of this page (default to &quot;null&quot;).</param>
        /// <param name="type">The type of the page [question | structure] (required) (default to null).</param>
        /// <param name="typeid">The unique identifier for the page type (required) (default to null).</param>
        /// <param name="typestring">The string that describes this page type (required) (default to &quot;null&quot;).</param>
        public ModLessonGetPageData200ResponsePage(string contents = @"null", int contentsformat = null, int display = null, bool displayinmenublock = null, int id = null, int layout = null, int lessonid = null, int nextpageid = null, int prevpageid = null, int qoption = null, int qtype = null, int timecreated = null, int timemodified = null, string title = @"null", int type = null, int typeid = null, string typestring = @"null")
        {
            this.Display = display;
            this.Displayinmenublock = displayinmenublock;
            this.Id = id;
            this.Layout = layout;
            this.Lessonid = lessonid;
            this.Nextpageid = nextpageid;
            this.Prevpageid = prevpageid;
            this.Qoption = qoption;
            this.Qtype = qtype;
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
            this.Type = type;
            this.Typeid = typeid;
            // to ensure "typestring" is required (not null)
            if (typestring == null)
            {
                throw new ArgumentNullException("typestring is a required property for ModLessonGetPageData200ResponsePage and cannot be null");
            }
            this.Typestring = typestring;
            // use default value if no "contents" provided
            this.Contents = contents ?? @"null";
            this.Contentsformat = contentsformat;
            // use default value if no "title" provided
            this.Title = title ?? @"null";
        }

        /// <summary>
        /// The contents of this page
        /// </summary>
        /// <value>The contents of this page</value>
        [DataMember(Name = "contents", EmitDefaultValue = false)]
        public string Contents { get; set; }

        /// <summary>
        /// contents format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>contents format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "contentsformat", EmitDefaultValue = false)]
        public int Contentsformat { get; set; }

        /// <summary>
        /// Used to record page specific display selections
        /// </summary>
        /// <value>Used to record page specific display selections</value>
        [DataMember(Name = "display", IsRequired = true, EmitDefaultValue = true)]
        public int Display { get; set; }

        /// <summary>
        /// Toggles display in the left menu block
        /// </summary>
        /// <value>Toggles display in the left menu block</value>
        [DataMember(Name = "displayinmenublock", IsRequired = true, EmitDefaultValue = true)]
        public bool Displayinmenublock { get; set; }

        /// <summary>
        /// The id of this lesson page
        /// </summary>
        /// <value>The id of this lesson page</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Used to record page specific layout selections
        /// </summary>
        /// <value>Used to record page specific layout selections</value>
        [DataMember(Name = "layout", IsRequired = true, EmitDefaultValue = true)]
        public int Layout { get; set; }

        /// <summary>
        /// The id of the lesson this page belongs to
        /// </summary>
        /// <value>The id of the lesson this page belongs to</value>
        [DataMember(Name = "lessonid", IsRequired = true, EmitDefaultValue = true)]
        public int Lessonid { get; set; }

        /// <summary>
        /// The id of the next page in the page sequence
        /// </summary>
        /// <value>The id of the next page in the page sequence</value>
        [DataMember(Name = "nextpageid", IsRequired = true, EmitDefaultValue = true)]
        public int Nextpageid { get; set; }

        /// <summary>
        /// The id of the page before this one
        /// </summary>
        /// <value>The id of the page before this one</value>
        [DataMember(Name = "prevpageid", IsRequired = true, EmitDefaultValue = true)]
        public int Prevpageid { get; set; }

        /// <summary>
        /// Used to record page type specific options
        /// </summary>
        /// <value>Used to record page type specific options</value>
        [DataMember(Name = "qoption", IsRequired = true, EmitDefaultValue = true)]
        public int Qoption { get; set; }

        /// <summary>
        /// Identifies the page type of this page
        /// </summary>
        /// <value>Identifies the page type of this page</value>
        [DataMember(Name = "qtype", IsRequired = true, EmitDefaultValue = true)]
        public int Qtype { get; set; }

        /// <summary>
        /// Timestamp for when the page was created
        /// </summary>
        /// <value>Timestamp for when the page was created</value>
        [DataMember(Name = "timecreated", IsRequired = true, EmitDefaultValue = true)]
        public int Timecreated { get; set; }

        /// <summary>
        /// Timestamp for when the page was last modified
        /// </summary>
        /// <value>Timestamp for when the page was last modified</value>
        [DataMember(Name = "timemodified", IsRequired = true, EmitDefaultValue = true)]
        public int Timemodified { get; set; }

        /// <summary>
        /// The title of this page
        /// </summary>
        /// <value>The title of this page</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The type of the page [question | structure]
        /// </summary>
        /// <value>The type of the page [question | structure]</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public int Type { get; set; }

        /// <summary>
        /// The unique identifier for the page type
        /// </summary>
        /// <value>The unique identifier for the page type</value>
        [DataMember(Name = "typeid", IsRequired = true, EmitDefaultValue = true)]
        public int Typeid { get; set; }

        /// <summary>
        /// The string that describes this page type
        /// </summary>
        /// <value>The string that describes this page type</value>
        [DataMember(Name = "typestring", IsRequired = true, EmitDefaultValue = true)]
        public string Typestring { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModLessonGetPageData200ResponsePage {\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  Contentsformat: ").Append(Contentsformat).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  Displayinmenublock: ").Append(Displayinmenublock).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Layout: ").Append(Layout).Append("\n");
            sb.Append("  Lessonid: ").Append(Lessonid).Append("\n");
            sb.Append("  Nextpageid: ").Append(Nextpageid).Append("\n");
            sb.Append("  Prevpageid: ").Append(Prevpageid).Append("\n");
            sb.Append("  Qoption: ").Append(Qoption).Append("\n");
            sb.Append("  Qtype: ").Append(Qtype).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Typeid: ").Append(Typeid).Append("\n");
            sb.Append("  Typestring: ").Append(Typestring).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
