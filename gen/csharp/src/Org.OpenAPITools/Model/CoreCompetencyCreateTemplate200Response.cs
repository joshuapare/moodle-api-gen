/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreCompetencyCreateTemplate200Response
    /// </summary>
    [DataContract(Name = "core_competency_create_template_200_response")]
    public partial class CoreCompetencyCreateTemplate200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCompetencyCreateTemplate200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreCompetencyCreateTemplate200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCompetencyCreateTemplate200Response" /> class.
        /// </summary>
        /// <param name="canmanage">canmanage (required).</param>
        /// <param name="canread">canread (required).</param>
        /// <param name="cohortscount">cohortscount (required).</param>
        /// <param name="contextid">contextid (required).</param>
        /// <param name="contextname">contextname (required).</param>
        /// <param name="contextnamenoprefix">contextnamenoprefix (required).</param>
        /// <param name="description">description (required) (default to &quot;&quot;).</param>
        /// <param name="descriptionformat">description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 1).</param>
        /// <param name="duedate">duedate (required) (default to 0).</param>
        /// <param name="duedateformatted">duedateformatted (required).</param>
        /// <param name="id">id (required) (default to 0).</param>
        /// <param name="planscount">planscount (required).</param>
        /// <param name="shortname">shortname (required).</param>
        /// <param name="timecreated">timecreated (required) (default to 0).</param>
        /// <param name="timemodified">timemodified (required) (default to 0).</param>
        /// <param name="usermodified">usermodified (required) (default to 0).</param>
        /// <param name="visible">visible (required) (default to 1).</param>
        public CoreCompetencyCreateTemplate200Response(bool canmanage = default(bool), bool canread = default(bool), int cohortscount = default(int), int contextid = default(int), string contextname = default(string), string contextnamenoprefix = default(string), string description = @"", int descriptionformat = 1, int duedate = 0, string duedateformatted = default(string), int id = 0, int planscount = default(int), string shortname = default(string), int timecreated = 0, int timemodified = 0, int usermodified = 0, bool visible = 1)
        {
            this.Canmanage = canmanage;
            this.Canread = canread;
            this.Cohortscount = cohortscount;
            this.Contextid = contextid;
            // to ensure "contextname" is required (not null)
            if (contextname == null)
            {
                throw new ArgumentNullException("contextname is a required property for CoreCompetencyCreateTemplate200Response and cannot be null");
            }
            this.Contextname = contextname;
            // to ensure "contextnamenoprefix" is required (not null)
            if (contextnamenoprefix == null)
            {
                throw new ArgumentNullException("contextnamenoprefix is a required property for CoreCompetencyCreateTemplate200Response and cannot be null");
            }
            this.Contextnamenoprefix = contextnamenoprefix;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for CoreCompetencyCreateTemplate200Response and cannot be null");
            }
            this.Description = description;
            this.Duedate = duedate;
            // to ensure "duedateformatted" is required (not null)
            if (duedateformatted == null)
            {
                throw new ArgumentNullException("duedateformatted is a required property for CoreCompetencyCreateTemplate200Response and cannot be null");
            }
            this.Duedateformatted = duedateformatted;
            this.Id = id;
            this.Planscount = planscount;
            // to ensure "shortname" is required (not null)
            if (shortname == null)
            {
                throw new ArgumentNullException("shortname is a required property for CoreCompetencyCreateTemplate200Response and cannot be null");
            }
            this.Shortname = shortname;
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
            this.Usermodified = usermodified;
            this.Visible = visible;
            this.Descriptionformat = descriptionformat;
        }

        /// <summary>
        /// canmanage
        /// </summary>
        /// <value>canmanage</value>
        [DataMember(Name = "canmanage", IsRequired = true, EmitDefaultValue = true)]
        public bool Canmanage { get; set; }

        /// <summary>
        /// canread
        /// </summary>
        /// <value>canread</value>
        [DataMember(Name = "canread", IsRequired = true, EmitDefaultValue = true)]
        public bool Canread { get; set; }

        /// <summary>
        /// cohortscount
        /// </summary>
        /// <value>cohortscount</value>
        [DataMember(Name = "cohortscount", IsRequired = true, EmitDefaultValue = true)]
        public int Cohortscount { get; set; }

        /// <summary>
        /// contextid
        /// </summary>
        /// <value>contextid</value>
        [DataMember(Name = "contextid", IsRequired = true, EmitDefaultValue = true)]
        public int Contextid { get; set; }

        /// <summary>
        /// contextname
        /// </summary>
        /// <value>contextname</value>
        [DataMember(Name = "contextname", IsRequired = true, EmitDefaultValue = true)]
        public string Contextname { get; set; }

        /// <summary>
        /// contextnamenoprefix
        /// </summary>
        /// <value>contextnamenoprefix</value>
        [DataMember(Name = "contextnamenoprefix", IsRequired = true, EmitDefaultValue = true)]
        public string Contextnamenoprefix { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "descriptionformat", EmitDefaultValue = false)]
        public int Descriptionformat { get; set; }

        /// <summary>
        /// duedate
        /// </summary>
        /// <value>duedate</value>
        [DataMember(Name = "duedate", IsRequired = true, EmitDefaultValue = true)]
        public int Duedate { get; set; }

        /// <summary>
        /// duedateformatted
        /// </summary>
        /// <value>duedateformatted</value>
        [DataMember(Name = "duedateformatted", IsRequired = true, EmitDefaultValue = true)]
        public string Duedateformatted { get; set; }

        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// planscount
        /// </summary>
        /// <value>planscount</value>
        [DataMember(Name = "planscount", IsRequired = true, EmitDefaultValue = true)]
        public int Planscount { get; set; }

        /// <summary>
        /// shortname
        /// </summary>
        /// <value>shortname</value>
        [DataMember(Name = "shortname", IsRequired = true, EmitDefaultValue = true)]
        public string Shortname { get; set; }

        /// <summary>
        /// timecreated
        /// </summary>
        /// <value>timecreated</value>
        [DataMember(Name = "timecreated", IsRequired = true, EmitDefaultValue = true)]
        public int Timecreated { get; set; }

        /// <summary>
        /// timemodified
        /// </summary>
        /// <value>timemodified</value>
        [DataMember(Name = "timemodified", IsRequired = true, EmitDefaultValue = true)]
        public int Timemodified { get; set; }

        /// <summary>
        /// usermodified
        /// </summary>
        /// <value>usermodified</value>
        [DataMember(Name = "usermodified", IsRequired = true, EmitDefaultValue = true)]
        public int Usermodified { get; set; }

        /// <summary>
        /// visible
        /// </summary>
        /// <value>visible</value>
        [DataMember(Name = "visible", IsRequired = true, EmitDefaultValue = true)]
        public bool Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCompetencyCreateTemplate200Response {\n");
            sb.Append("  Canmanage: ").Append(Canmanage).Append("\n");
            sb.Append("  Canread: ").Append(Canread).Append("\n");
            sb.Append("  Cohortscount: ").Append(Cohortscount).Append("\n");
            sb.Append("  Contextid: ").Append(Contextid).Append("\n");
            sb.Append("  Contextname: ").Append(Contextname).Append("\n");
            sb.Append("  Contextnamenoprefix: ").Append(Contextnamenoprefix).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Descriptionformat: ").Append(Descriptionformat).Append("\n");
            sb.Append("  Duedate: ").Append(Duedate).Append("\n");
            sb.Append("  Duedateformatted: ").Append(Duedateformatted).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Planscount: ").Append(Planscount).Append("\n");
            sb.Append("  Shortname: ").Append(Shortname).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Usermodified: ").Append(Usermodified).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
