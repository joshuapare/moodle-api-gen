/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModAssignGetSubmissionStatus200ResponseAssignmentdata
    /// </summary>
    [DataContract(Name = "mod_assign_get_submission_status_200_response_assignmentdata")]
    public partial class ModAssignGetSubmissionStatus200ResponseAssignmentdata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignGetSubmissionStatus200ResponseAssignmentdata" /> class.
        /// </summary>
        /// <param name="activity">Text of activity (default to &quot;null&quot;).</param>
        /// <param name="activityformat">activity format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN).</param>
        /// <param name="attachments">attachments.</param>
        public ModAssignGetSubmissionStatus200ResponseAssignmentdata(string activity = @"null", int activityformat = default(int), ModAssignGetSubmissionStatus200ResponseAssignmentdataAttachments attachments = default(ModAssignGetSubmissionStatus200ResponseAssignmentdataAttachments))
        {
            // use default value if no "activity" provided
            this.Activity = activity ?? @"null";
            this.Activityformat = activityformat;
            this.Attachments = attachments;
        }

        /// <summary>
        /// Text of activity
        /// </summary>
        /// <value>Text of activity</value>
        [DataMember(Name = "activity", EmitDefaultValue = false)]
        public string Activity { get; set; }

        /// <summary>
        /// activity format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>activity format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "activityformat", EmitDefaultValue = false)]
        public int Activityformat { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "attachments", EmitDefaultValue = false)]
        public ModAssignGetSubmissionStatus200ResponseAssignmentdataAttachments Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModAssignGetSubmissionStatus200ResponseAssignmentdata {\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  Activityformat: ").Append(Activityformat).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
