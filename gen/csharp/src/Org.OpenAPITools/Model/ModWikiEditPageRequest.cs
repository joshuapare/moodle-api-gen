/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModWikiEditPageRequest
    /// </summary>
    [DataContract(Name = "mod_wiki_edit_page_request")]
    public partial class ModWikiEditPageRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModWikiEditPageRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModWikiEditPageRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModWikiEditPageRequest" /> class.
        /// </summary>
        /// <param name="content">Page contents. (required).</param>
        /// <param name="pageid">Page ID. (required) (default to null).</param>
        /// <param name="section">Section page title. (default to &quot;null&quot;).</param>
        public ModWikiEditPageRequest(string content = default(string), int pageid = null, string section = @"null")
        {
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new ArgumentNullException("content is a required property for ModWikiEditPageRequest and cannot be null");
            }
            this.Content = content;
            this.Pageid = pageid;
            // use default value if no "section" provided
            this.Section = section ?? @"null";
        }

        /// <summary>
        /// Page contents.
        /// </summary>
        /// <value>Page contents.</value>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = true)]
        public string Content { get; set; }

        /// <summary>
        /// Page ID.
        /// </summary>
        /// <value>Page ID.</value>
        [DataMember(Name = "pageid", IsRequired = true, EmitDefaultValue = true)]
        public int Pageid { get; set; }

        /// <summary>
        /// Section page title.
        /// </summary>
        /// <value>Section page title.</value>
        [DataMember(Name = "section", EmitDefaultValue = false)]
        public string Section { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModWikiEditPageRequest {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Pageid: ").Append(Pageid).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
