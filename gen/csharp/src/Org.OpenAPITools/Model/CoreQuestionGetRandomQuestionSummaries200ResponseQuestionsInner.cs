/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreQuestionGetRandomQuestionSummaries200ResponseQuestionsInner
    /// </summary>
    [DataContract(Name = "core_question_get_random_question_summaries_200_response_questions_inner")]
    public partial class CoreQuestionGetRandomQuestionSummaries200ResponseQuestionsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreQuestionGetRandomQuestionSummaries200ResponseQuestionsInner" /> class.
        /// </summary>
        /// <param name="category">category (default to null).</param>
        /// <param name="icon">icon.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="parent">parent.</param>
        /// <param name="qtype">qtype (default to &quot;null&quot;).</param>
        public CoreQuestionGetRandomQuestionSummaries200ResponseQuestionsInner(int category = null, CoreQuestionGetRandomQuestionSummaries200ResponseQuestionsInnerIcon icon = default(CoreQuestionGetRandomQuestionSummaries200ResponseQuestionsInnerIcon), int id = default(int), string name = default(string), int parent = default(int), string qtype = @"null")
        {
            this.Category = category;
            this.Icon = icon;
            this.Id = id;
            this.Name = name;
            this.Parent = parent;
            // use default value if no "qtype" provided
            this.Qtype = qtype ?? @"null";
        }

        /// <summary>
        /// category
        /// </summary>
        /// <value>category</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public int Category { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = false)]
        public CoreQuestionGetRandomQuestionSummaries200ResponseQuestionsInnerIcon Icon { get; set; }

        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// parent
        /// </summary>
        /// <value>parent</value>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public int Parent { get; set; }

        /// <summary>
        /// qtype
        /// </summary>
        /// <value>qtype</value>
        [DataMember(Name = "qtype", EmitDefaultValue = false)]
        public string Qtype { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreQuestionGetRandomQuestionSummaries200ResponseQuestionsInner {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Qtype: ").Append(Qtype).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
