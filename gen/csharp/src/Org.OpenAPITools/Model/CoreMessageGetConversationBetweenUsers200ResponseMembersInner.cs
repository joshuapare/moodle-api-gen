/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreMessageGetConversationBetweenUsers200ResponseMembersInner
    /// </summary>
    [DataContract(Name = "core_message_get_conversation_between_users_200_response_members_inner")]
    public partial class CoreMessageGetConversationBetweenUsers200ResponseMembersInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreMessageGetConversationBetweenUsers200ResponseMembersInner" /> class.
        /// </summary>
        /// <param name="canmessage">If the user can be messaged.</param>
        /// <param name="canmessageevenifblocked">If the user can still message even if they get blocked.</param>
        /// <param name="contactrequests">contactrequests.</param>
        /// <param name="conversations">conversations.</param>
        /// <param name="fullname">The user&#39;s name.</param>
        /// <param name="id">The user id.</param>
        /// <param name="isblocked">If the user has been blocked.</param>
        /// <param name="iscontact">Is the user a contact?.</param>
        /// <param name="isdeleted">Is the user deleted?.</param>
        /// <param name="isonline">The user&#39;s online status.</param>
        /// <param name="profileimageurl">User picture URL.</param>
        /// <param name="profileimageurlsmall">Small user picture URL.</param>
        /// <param name="profileurl">The link to the user&#39;s profile page.</param>
        /// <param name="requirescontact">If the user requires to be contacts.</param>
        /// <param name="showonlinestatus">Show the user&#39;s online status?.</param>
        public CoreMessageGetConversationBetweenUsers200ResponseMembersInner(bool canmessage = default(bool), bool canmessageevenifblocked = default(bool), List<CoreMessageGetConversationBetweenUsers200ResponseMembersInnerContactrequestsInner> contactrequests = default(List<CoreMessageGetConversationBetweenUsers200ResponseMembersInnerContactrequestsInner>), List<CoreMessageGetConversationBetweenUsers200ResponseMembersInnerConversationsInner> conversations = default(List<CoreMessageGetConversationBetweenUsers200ResponseMembersInnerConversationsInner>), string fullname = default(string), int id = default(int), bool isblocked = default(bool), bool iscontact = default(bool), bool isdeleted = default(bool), bool isonline = default(bool), string profileimageurl = default(string), string profileimageurlsmall = default(string), string profileurl = default(string), bool requirescontact = default(bool), bool showonlinestatus = default(bool))
        {
            this.Canmessage = canmessage;
            this.Canmessageevenifblocked = canmessageevenifblocked;
            this.Contactrequests = contactrequests;
            this.Conversations = conversations;
            this.Fullname = fullname;
            this.Id = id;
            this.Isblocked = isblocked;
            this.Iscontact = iscontact;
            this.Isdeleted = isdeleted;
            this.Isonline = isonline;
            this.Profileimageurl = profileimageurl;
            this.Profileimageurlsmall = profileimageurlsmall;
            this.Profileurl = profileurl;
            this.Requirescontact = requirescontact;
            this.Showonlinestatus = showonlinestatus;
        }

        /// <summary>
        /// If the user can be messaged
        /// </summary>
        /// <value>If the user can be messaged</value>
        [DataMember(Name = "canmessage", EmitDefaultValue = true)]
        public bool Canmessage { get; set; }

        /// <summary>
        /// If the user can still message even if they get blocked
        /// </summary>
        /// <value>If the user can still message even if they get blocked</value>
        [DataMember(Name = "canmessageevenifblocked", EmitDefaultValue = true)]
        public bool Canmessageevenifblocked { get; set; }

        /// <summary>
        /// Gets or Sets Contactrequests
        /// </summary>
        [DataMember(Name = "contactrequests", EmitDefaultValue = false)]
        public List<CoreMessageGetConversationBetweenUsers200ResponseMembersInnerContactrequestsInner> Contactrequests { get; set; }

        /// <summary>
        /// Gets or Sets Conversations
        /// </summary>
        [DataMember(Name = "conversations", EmitDefaultValue = false)]
        public List<CoreMessageGetConversationBetweenUsers200ResponseMembersInnerConversationsInner> Conversations { get; set; }

        /// <summary>
        /// The user&#39;s name
        /// </summary>
        /// <value>The user&#39;s name</value>
        [DataMember(Name = "fullname", EmitDefaultValue = false)]
        public string Fullname { get; set; }

        /// <summary>
        /// The user id
        /// </summary>
        /// <value>The user id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// If the user has been blocked
        /// </summary>
        /// <value>If the user has been blocked</value>
        [DataMember(Name = "isblocked", EmitDefaultValue = true)]
        public bool Isblocked { get; set; }

        /// <summary>
        /// Is the user a contact?
        /// </summary>
        /// <value>Is the user a contact?</value>
        [DataMember(Name = "iscontact", EmitDefaultValue = true)]
        public bool Iscontact { get; set; }

        /// <summary>
        /// Is the user deleted?
        /// </summary>
        /// <value>Is the user deleted?</value>
        [DataMember(Name = "isdeleted", EmitDefaultValue = true)]
        public bool Isdeleted { get; set; }

        /// <summary>
        /// The user&#39;s online status
        /// </summary>
        /// <value>The user&#39;s online status</value>
        [DataMember(Name = "isonline", EmitDefaultValue = true)]
        public bool Isonline { get; set; }

        /// <summary>
        /// User picture URL
        /// </summary>
        /// <value>User picture URL</value>
        [DataMember(Name = "profileimageurl", EmitDefaultValue = false)]
        public string Profileimageurl { get; set; }

        /// <summary>
        /// Small user picture URL
        /// </summary>
        /// <value>Small user picture URL</value>
        [DataMember(Name = "profileimageurlsmall", EmitDefaultValue = false)]
        public string Profileimageurlsmall { get; set; }

        /// <summary>
        /// The link to the user&#39;s profile page
        /// </summary>
        /// <value>The link to the user&#39;s profile page</value>
        [DataMember(Name = "profileurl", EmitDefaultValue = false)]
        public string Profileurl { get; set; }

        /// <summary>
        /// If the user requires to be contacts
        /// </summary>
        /// <value>If the user requires to be contacts</value>
        [DataMember(Name = "requirescontact", EmitDefaultValue = true)]
        public bool Requirescontact { get; set; }

        /// <summary>
        /// Show the user&#39;s online status?
        /// </summary>
        /// <value>Show the user&#39;s online status?</value>
        [DataMember(Name = "showonlinestatus", EmitDefaultValue = true)]
        public bool Showonlinestatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreMessageGetConversationBetweenUsers200ResponseMembersInner {\n");
            sb.Append("  Canmessage: ").Append(Canmessage).Append("\n");
            sb.Append("  Canmessageevenifblocked: ").Append(Canmessageevenifblocked).Append("\n");
            sb.Append("  Contactrequests: ").Append(Contactrequests).Append("\n");
            sb.Append("  Conversations: ").Append(Conversations).Append("\n");
            sb.Append("  Fullname: ").Append(Fullname).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Isblocked: ").Append(Isblocked).Append("\n");
            sb.Append("  Iscontact: ").Append(Iscontact).Append("\n");
            sb.Append("  Isdeleted: ").Append(Isdeleted).Append("\n");
            sb.Append("  Isonline: ").Append(Isonline).Append("\n");
            sb.Append("  Profileimageurl: ").Append(Profileimageurl).Append("\n");
            sb.Append("  Profileimageurlsmall: ").Append(Profileimageurlsmall).Append("\n");
            sb.Append("  Profileurl: ").Append(Profileurl).Append("\n");
            sb.Append("  Requirescontact: ").Append(Requirescontact).Append("\n");
            sb.Append("  Showonlinestatus: ").Append(Showonlinestatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
