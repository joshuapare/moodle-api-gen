/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ToolLpDataForCompetenciesManagePage200Response
    /// </summary>
    [DataContract(Name = "tool_lp_data_for_competencies_manage_page_200_response")]
    public partial class ToolLpDataForCompetenciesManagePage200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForCompetenciesManagePage200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolLpDataForCompetenciesManagePage200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForCompetenciesManagePage200Response" /> class.
        /// </summary>
        /// <param name="canmanage">True if this user has permission to manage competency frameworks (required) (default to null).</param>
        /// <param name="framework">framework (required).</param>
        /// <param name="pagecontextid">Context id for the framework (required) (default to null).</param>
        /// <param name="pluginbaseurl">Plugin base url (required) (default to &quot;null&quot;).</param>
        /// <param name="rulesmodules">JSON encoded data for rules (required) (default to &quot;null&quot;).</param>
        /// <param name="search">Current search string (required) (default to &quot;null&quot;).</param>
        public ToolLpDataForCompetenciesManagePage200Response(bool canmanage = null, CoreCompetencyDuplicateCompetencyFramework200Response framework = default(CoreCompetencyDuplicateCompetencyFramework200Response), int pagecontextid = null, string pluginbaseurl = @"null", string rulesmodules = @"null", string search = @"null")
        {
            this.Canmanage = canmanage;
            // to ensure "framework" is required (not null)
            if (framework == null)
            {
                throw new ArgumentNullException("framework is a required property for ToolLpDataForCompetenciesManagePage200Response and cannot be null");
            }
            this.Framework = framework;
            this.Pagecontextid = pagecontextid;
            // to ensure "pluginbaseurl" is required (not null)
            if (pluginbaseurl == null)
            {
                throw new ArgumentNullException("pluginbaseurl is a required property for ToolLpDataForCompetenciesManagePage200Response and cannot be null");
            }
            this.Pluginbaseurl = pluginbaseurl;
            // to ensure "rulesmodules" is required (not null)
            if (rulesmodules == null)
            {
                throw new ArgumentNullException("rulesmodules is a required property for ToolLpDataForCompetenciesManagePage200Response and cannot be null");
            }
            this.Rulesmodules = rulesmodules;
            // to ensure "search" is required (not null)
            if (search == null)
            {
                throw new ArgumentNullException("search is a required property for ToolLpDataForCompetenciesManagePage200Response and cannot be null");
            }
            this.Search = search;
        }

        /// <summary>
        /// True if this user has permission to manage competency frameworks
        /// </summary>
        /// <value>True if this user has permission to manage competency frameworks</value>
        [DataMember(Name = "canmanage", IsRequired = true, EmitDefaultValue = true)]
        public bool Canmanage { get; set; }

        /// <summary>
        /// Gets or Sets Framework
        /// </summary>
        [DataMember(Name = "framework", IsRequired = true, EmitDefaultValue = true)]
        public CoreCompetencyDuplicateCompetencyFramework200Response Framework { get; set; }

        /// <summary>
        /// Context id for the framework
        /// </summary>
        /// <value>Context id for the framework</value>
        [DataMember(Name = "pagecontextid", IsRequired = true, EmitDefaultValue = true)]
        public int Pagecontextid { get; set; }

        /// <summary>
        /// Plugin base url
        /// </summary>
        /// <value>Plugin base url</value>
        [DataMember(Name = "pluginbaseurl", IsRequired = true, EmitDefaultValue = true)]
        public string Pluginbaseurl { get; set; }

        /// <summary>
        /// JSON encoded data for rules
        /// </summary>
        /// <value>JSON encoded data for rules</value>
        [DataMember(Name = "rulesmodules", IsRequired = true, EmitDefaultValue = true)]
        public string Rulesmodules { get; set; }

        /// <summary>
        /// Current search string
        /// </summary>
        /// <value>Current search string</value>
        [DataMember(Name = "search", IsRequired = true, EmitDefaultValue = true)]
        public string Search { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolLpDataForCompetenciesManagePage200Response {\n");
            sb.Append("  Canmanage: ").Append(Canmanage).Append("\n");
            sb.Append("  Framework: ").Append(Framework).Append("\n");
            sb.Append("  Pagecontextid: ").Append(Pagecontextid).Append("\n");
            sb.Append("  Pluginbaseurl: ").Append(Pluginbaseurl).Append("\n");
            sb.Append("  Rulesmodules: ").Append(Rulesmodules).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
