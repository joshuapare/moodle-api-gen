/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreUserUpdateUserDevicePublicKeyRequest
    /// </summary>
    [DataContract(Name = "core_user_update_user_device_public_key_request")]
    public partial class CoreUserUpdateUserDevicePublicKeyRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreUserUpdateUserDevicePublicKeyRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreUserUpdateUserDevicePublicKeyRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreUserUpdateUserDevicePublicKeyRequest" /> class.
        /// </summary>
        /// <param name="appid">The app id, something like com.moodle.moodlemobile (required) (default to &quot;null&quot;).</param>
        /// <param name="publickey">the app generated public key (required).</param>
        /// <param name="uuid">the device UUID (required).</param>
        public CoreUserUpdateUserDevicePublicKeyRequest(string appid = @"null", string publickey = default(string), string uuid = default(string))
        {
            // to ensure "appid" is required (not null)
            if (appid == null)
            {
                throw new ArgumentNullException("appid is a required property for CoreUserUpdateUserDevicePublicKeyRequest and cannot be null");
            }
            this.Appid = appid;
            // to ensure "publickey" is required (not null)
            if (publickey == null)
            {
                throw new ArgumentNullException("publickey is a required property for CoreUserUpdateUserDevicePublicKeyRequest and cannot be null");
            }
            this.Publickey = publickey;
            // to ensure "uuid" is required (not null)
            if (uuid == null)
            {
                throw new ArgumentNullException("uuid is a required property for CoreUserUpdateUserDevicePublicKeyRequest and cannot be null");
            }
            this.Uuid = uuid;
        }

        /// <summary>
        /// The app id, something like com.moodle.moodlemobile
        /// </summary>
        /// <value>The app id, something like com.moodle.moodlemobile</value>
        [DataMember(Name = "appid", IsRequired = true, EmitDefaultValue = true)]
        public string Appid { get; set; }

        /// <summary>
        /// the app generated public key
        /// </summary>
        /// <value>the app generated public key</value>
        [DataMember(Name = "publickey", IsRequired = true, EmitDefaultValue = true)]
        public string Publickey { get; set; }

        /// <summary>
        /// the device UUID
        /// </summary>
        /// <value>the device UUID</value>
        [DataMember(Name = "uuid", IsRequired = true, EmitDefaultValue = true)]
        public string Uuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreUserUpdateUserDevicePublicKeyRequest {\n");
            sb.Append("  Appid: ").Append(Appid).Append("\n");
            sb.Append("  Publickey: ").Append(Publickey).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
