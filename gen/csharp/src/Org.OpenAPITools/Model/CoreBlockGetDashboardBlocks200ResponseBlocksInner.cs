/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Block information.
    /// </summary>
    [DataContract(Name = "core_block_get_dashboard_blocks_200_response_blocks_inner")]
    public partial class CoreBlockGetDashboardBlocks200ResponseBlocksInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreBlockGetDashboardBlocks200ResponseBlocksInner" /> class.
        /// </summary>
        /// <param name="collapsible">Whether the block is collapsible..</param>
        /// <param name="configs">configs.</param>
        /// <param name="contents">contents.</param>
        /// <param name="dockable">Whether the block is dockable..</param>
        /// <param name="instanceid">Block instance id..</param>
        /// <param name="name">Block name..</param>
        /// <param name="positionid">Position id..</param>
        /// <param name="region">Block region..</param>
        /// <param name="visible">Whether the block is visible..</param>
        /// <param name="weight">Used to order blocks within a region..</param>
        public CoreBlockGetDashboardBlocks200ResponseBlocksInner(bool collapsible = default(bool), List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInner> configs = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInner>), CoreBlockGetDashboardBlocks200ResponseBlocksInnerContents contents = default(CoreBlockGetDashboardBlocks200ResponseBlocksInnerContents), bool dockable = default(bool), int instanceid = default(int), string name = default(string), int positionid = default(int), string region = default(string), bool visible = default(bool), int weight = default(int))
        {
            this.Collapsible = collapsible;
            this.Configs = configs;
            this.Contents = contents;
            this.Dockable = dockable;
            this.Instanceid = instanceid;
            this.Name = name;
            this.Positionid = positionid;
            this.Region = region;
            this.Visible = visible;
            this.Weight = weight;
        }

        /// <summary>
        /// Whether the block is collapsible.
        /// </summary>
        /// <value>Whether the block is collapsible.</value>
        [DataMember(Name = "collapsible", EmitDefaultValue = true)]
        public bool Collapsible { get; set; }

        /// <summary>
        /// Gets or Sets Configs
        /// </summary>
        [DataMember(Name = "configs", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerConfigsInner> Configs { get; set; }

        /// <summary>
        /// Gets or Sets Contents
        /// </summary>
        [DataMember(Name = "contents", EmitDefaultValue = false)]
        public CoreBlockGetDashboardBlocks200ResponseBlocksInnerContents Contents { get; set; }

        /// <summary>
        /// Whether the block is dockable.
        /// </summary>
        /// <value>Whether the block is dockable.</value>
        [DataMember(Name = "dockable", EmitDefaultValue = true)]
        public bool Dockable { get; set; }

        /// <summary>
        /// Block instance id.
        /// </summary>
        /// <value>Block instance id.</value>
        [DataMember(Name = "instanceid", EmitDefaultValue = false)]
        public int Instanceid { get; set; }

        /// <summary>
        /// Block name.
        /// </summary>
        /// <value>Block name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Position id.
        /// </summary>
        /// <value>Position id.</value>
        [DataMember(Name = "positionid", EmitDefaultValue = false)]
        public int Positionid { get; set; }

        /// <summary>
        /// Block region.
        /// </summary>
        /// <value>Block region.</value>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Whether the block is visible.
        /// </summary>
        /// <value>Whether the block is visible.</value>
        [DataMember(Name = "visible", EmitDefaultValue = true)]
        public bool Visible { get; set; }

        /// <summary>
        /// Used to order blocks within a region.
        /// </summary>
        /// <value>Used to order blocks within a region.</value>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public int Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreBlockGetDashboardBlocks200ResponseBlocksInner {\n");
            sb.Append("  Collapsible: ").Append(Collapsible).Append("\n");
            sb.Append("  Configs: ").Append(Configs).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  Dockable: ").Append(Dockable).Append("\n");
            sb.Append("  Instanceid: ").Append(Instanceid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Positionid: ").Append(Positionid).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
