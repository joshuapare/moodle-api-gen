/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SCORM
    /// </summary>
    [DataContract(Name = "mod_scorm_get_scorms_by_courses_200_response_scorms_inner")]
    public partial class ModScormGetScormsByCourses200ResponseScormsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModScormGetScormsByCourses200ResponseScormsInner" /> class.
        /// </summary>
        /// <param name="auto">Auto continue? (default to null).</param>
        /// <param name="autocommit">Save track data automatically? (default to null).</param>
        /// <param name="completionscorerequired">Minimum score required (default to null).</param>
        /// <param name="completionstatusallscos">Require all scos to return completion status (default to null).</param>
        /// <param name="completionstatusrequired">Status passed/completed required? (default to null).</param>
        /// <param name="course">Course id.</param>
        /// <param name="coursemodule">Course module id.</param>
        /// <param name="displayattemptstatus">How to display attempt status (default to null).</param>
        /// <param name="displaycoursestructure">Display contents structure (default to null).</param>
        /// <param name="forcecompleted">Status current attempt is forced to \&quot;completed\&quot; (default to null).</param>
        /// <param name="forcenewattempt">Controls re-entry behaviour (default to null).</param>
        /// <param name="grademethod">Grade method (default to null).</param>
        /// <param name="groupingid">Group id.</param>
        /// <param name="groupmode">Group mode.</param>
        /// <param name="height">Frame height (default to null).</param>
        /// <param name="hidebrowse">Disable preview mode? (default to null).</param>
        /// <param name="hidetoc">How to display the SCORM structure in player (default to null).</param>
        /// <param name="id">Activity instance id.</param>
        /// <param name="intro">Activity introduction.</param>
        /// <param name="introfiles">introfiles.</param>
        /// <param name="introformat">intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN).</param>
        /// <param name="lang">Forced activity language.</param>
        /// <param name="lastattemptlock">Prevents to launch new attempts once finished (default to null).</param>
        /// <param name="launch">First content to launch (default to null).</param>
        /// <param name="maxattempt">Maximum number of attemtps (default to null).</param>
        /// <param name="maxgrade">Max grade (default to null).</param>
        /// <param name="md5hash">MD5 Hash of package file (default to &quot;null&quot;).</param>
        /// <param name="name">Activity name.</param>
        /// <param name="nav">Show navigation buttons (default to null).</param>
        /// <param name="navpositionleft">Navigation position left (default to null).</param>
        /// <param name="navpositiontop">Navigation position top (default to null).</param>
        /// <param name="options">Additional options.</param>
        /// <param name="packagesize">SCORM zip package size (default to null).</param>
        /// <param name="packageurl">SCORM zip package URL (default to &quot;null&quot;).</param>
        /// <param name="popup">Display in current or new window (default to null).</param>
        /// <param name="protectpackagedownloads">Protect package downloads? (default to null).</param>
        /// <param name="reference">Reference to the package (default to &quot;null&quot;).</param>
        /// <param name="revision">Revison number (default to null).</param>
        /// <param name="scormtype">SCORM type (default to &quot;null&quot;).</param>
        /// <param name="section">Course section id.</param>
        /// <param name="sha1hash">Package content or ext path hash (default to &quot;null&quot;).</param>
        /// <param name="skipview">How to skip the content structure page (default to null).</param>
        /// <param name="timeclose">Available to (default to null).</param>
        /// <param name="timemodified">Time of last modification.</param>
        /// <param name="timeopen">Available from (default to null).</param>
        /// <param name="updatefreq">Auto-update frequency for remote packages (default to null).</param>
        /// <param name="varVersion">SCORM version (SCORM_12, SCORM_13, SCORM_AICC) (default to &quot;null&quot;).</param>
        /// <param name="visible">Visible.</param>
        /// <param name="whatgrade">What grade (default to null).</param>
        /// <param name="width">Frame width (default to null).</param>
        public ModScormGetScormsByCourses200ResponseScormsInner(bool auto = null, bool autocommit = null, int completionscorerequired = null, int completionstatusallscos = null, int completionstatusrequired = null, int course = default(int), int coursemodule = default(int), int displayattemptstatus = null, bool displaycoursestructure = null, bool forcecompleted = null, int forcenewattempt = null, int grademethod = null, int groupingid = default(int), int groupmode = default(int), int height = null, bool hidebrowse = null, int hidetoc = null, int id = default(int), string intro = default(string), List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), int introformat = default(int), string lang = default(string), bool lastattemptlock = null, int launch = null, int maxattempt = null, int maxgrade = null, string md5hash = @"null", string name = default(string), int nav = null, int navpositionleft = null, int navpositiontop = null, string options = default(string), int packagesize = null, string packageurl = @"null", int popup = null, bool protectpackagedownloads = null, string reference = @"null", int revision = null, string scormtype = @"null", int section = default(int), string sha1hash = @"null", int skipview = null, int timeclose = null, int timemodified = default(int), int timeopen = null, int updatefreq = null, string varVersion = @"null", bool visible = default(bool), int whatgrade = null, int width = null)
        {
            this.Auto = auto;
            this.Autocommit = autocommit;
            this.Completionscorerequired = completionscorerequired;
            this.Completionstatusallscos = completionstatusallscos;
            this.Completionstatusrequired = completionstatusrequired;
            this.Course = course;
            this.Coursemodule = coursemodule;
            this.Displayattemptstatus = displayattemptstatus;
            this.Displaycoursestructure = displaycoursestructure;
            this.Forcecompleted = forcecompleted;
            this.Forcenewattempt = forcenewattempt;
            this.Grademethod = grademethod;
            this.Groupingid = groupingid;
            this.Groupmode = groupmode;
            this.Height = height;
            this.Hidebrowse = hidebrowse;
            this.Hidetoc = hidetoc;
            this.Id = id;
            this.Intro = intro;
            this.Introfiles = introfiles;
            this.Introformat = introformat;
            this.Lang = lang;
            this.Lastattemptlock = lastattemptlock;
            this.Launch = launch;
            this.Maxattempt = maxattempt;
            this.Maxgrade = maxgrade;
            // use default value if no "md5hash" provided
            this.Md5hash = md5hash ?? @"null";
            this.Name = name;
            this.Nav = nav;
            this.Navpositionleft = navpositionleft;
            this.Navpositiontop = navpositiontop;
            this.Options = options;
            this.Packagesize = packagesize;
            // use default value if no "packageurl" provided
            this.Packageurl = packageurl ?? @"null";
            this.Popup = popup;
            this.Protectpackagedownloads = protectpackagedownloads;
            // use default value if no "reference" provided
            this.Reference = reference ?? @"null";
            this.Revision = revision;
            // use default value if no "scormtype" provided
            this.Scormtype = scormtype ?? @"null";
            this.Section = section;
            // use default value if no "sha1hash" provided
            this.Sha1hash = sha1hash ?? @"null";
            this.Skipview = skipview;
            this.Timeclose = timeclose;
            this.Timemodified = timemodified;
            this.Timeopen = timeopen;
            this.Updatefreq = updatefreq;
            // use default value if no "varVersion" provided
            this.VarVersion = varVersion ?? @"null";
            this.Visible = visible;
            this.Whatgrade = whatgrade;
            this.Width = width;
        }

        /// <summary>
        /// Auto continue?
        /// </summary>
        /// <value>Auto continue?</value>
        [DataMember(Name = "auto", EmitDefaultValue = true)]
        public bool Auto { get; set; }

        /// <summary>
        /// Save track data automatically?
        /// </summary>
        /// <value>Save track data automatically?</value>
        [DataMember(Name = "autocommit", EmitDefaultValue = true)]
        public bool Autocommit { get; set; }

        /// <summary>
        /// Minimum score required
        /// </summary>
        /// <value>Minimum score required</value>
        [DataMember(Name = "completionscorerequired", EmitDefaultValue = false)]
        public int Completionscorerequired { get; set; }

        /// <summary>
        /// Require all scos to return completion status
        /// </summary>
        /// <value>Require all scos to return completion status</value>
        [DataMember(Name = "completionstatusallscos", EmitDefaultValue = false)]
        public int Completionstatusallscos { get; set; }

        /// <summary>
        /// Status passed/completed required?
        /// </summary>
        /// <value>Status passed/completed required?</value>
        [DataMember(Name = "completionstatusrequired", EmitDefaultValue = false)]
        public int Completionstatusrequired { get; set; }

        /// <summary>
        /// Course id
        /// </summary>
        /// <value>Course id</value>
        [DataMember(Name = "course", EmitDefaultValue = false)]
        public int Course { get; set; }

        /// <summary>
        /// Course module id
        /// </summary>
        /// <value>Course module id</value>
        [DataMember(Name = "coursemodule", EmitDefaultValue = false)]
        public int Coursemodule { get; set; }

        /// <summary>
        /// How to display attempt status
        /// </summary>
        /// <value>How to display attempt status</value>
        [DataMember(Name = "displayattemptstatus", EmitDefaultValue = false)]
        public int Displayattemptstatus { get; set; }

        /// <summary>
        /// Display contents structure
        /// </summary>
        /// <value>Display contents structure</value>
        [DataMember(Name = "displaycoursestructure", EmitDefaultValue = true)]
        public bool Displaycoursestructure { get; set; }

        /// <summary>
        /// Status current attempt is forced to \&quot;completed\&quot;
        /// </summary>
        /// <value>Status current attempt is forced to \&quot;completed\&quot;</value>
        [DataMember(Name = "forcecompleted", EmitDefaultValue = true)]
        public bool Forcecompleted { get; set; }

        /// <summary>
        /// Controls re-entry behaviour
        /// </summary>
        /// <value>Controls re-entry behaviour</value>
        [DataMember(Name = "forcenewattempt", EmitDefaultValue = false)]
        public int Forcenewattempt { get; set; }

        /// <summary>
        /// Grade method
        /// </summary>
        /// <value>Grade method</value>
        [DataMember(Name = "grademethod", EmitDefaultValue = false)]
        public int Grademethod { get; set; }

        /// <summary>
        /// Group id
        /// </summary>
        /// <value>Group id</value>
        [DataMember(Name = "groupingid", EmitDefaultValue = false)]
        public int Groupingid { get; set; }

        /// <summary>
        /// Group mode
        /// </summary>
        /// <value>Group mode</value>
        [DataMember(Name = "groupmode", EmitDefaultValue = false)]
        public int Groupmode { get; set; }

        /// <summary>
        /// Frame height
        /// </summary>
        /// <value>Frame height</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Disable preview mode?
        /// </summary>
        /// <value>Disable preview mode?</value>
        [DataMember(Name = "hidebrowse", EmitDefaultValue = true)]
        public bool Hidebrowse { get; set; }

        /// <summary>
        /// How to display the SCORM structure in player
        /// </summary>
        /// <value>How to display the SCORM structure in player</value>
        [DataMember(Name = "hidetoc", EmitDefaultValue = false)]
        public int Hidetoc { get; set; }

        /// <summary>
        /// Activity instance id
        /// </summary>
        /// <value>Activity instance id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Activity introduction
        /// </summary>
        /// <value>Activity introduction</value>
        [DataMember(Name = "intro", EmitDefaultValue = false)]
        public string Intro { get; set; }

        /// <summary>
        /// Gets or Sets Introfiles
        /// </summary>
        [DataMember(Name = "introfiles", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Introfiles { get; set; }

        /// <summary>
        /// intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "introformat", EmitDefaultValue = false)]
        public int Introformat { get; set; }

        /// <summary>
        /// Forced activity language
        /// </summary>
        /// <value>Forced activity language</value>
        [DataMember(Name = "lang", EmitDefaultValue = false)]
        public string Lang { get; set; }

        /// <summary>
        /// Prevents to launch new attempts once finished
        /// </summary>
        /// <value>Prevents to launch new attempts once finished</value>
        [DataMember(Name = "lastattemptlock", EmitDefaultValue = true)]
        public bool Lastattemptlock { get; set; }

        /// <summary>
        /// First content to launch
        /// </summary>
        /// <value>First content to launch</value>
        [DataMember(Name = "launch", EmitDefaultValue = false)]
        public int Launch { get; set; }

        /// <summary>
        /// Maximum number of attemtps
        /// </summary>
        /// <value>Maximum number of attemtps</value>
        [DataMember(Name = "maxattempt", EmitDefaultValue = false)]
        public int Maxattempt { get; set; }

        /// <summary>
        /// Max grade
        /// </summary>
        /// <value>Max grade</value>
        [DataMember(Name = "maxgrade", EmitDefaultValue = false)]
        public int Maxgrade { get; set; }

        /// <summary>
        /// MD5 Hash of package file
        /// </summary>
        /// <value>MD5 Hash of package file</value>
        [DataMember(Name = "md5hash", EmitDefaultValue = false)]
        public string Md5hash { get; set; }

        /// <summary>
        /// Activity name
        /// </summary>
        /// <value>Activity name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Show navigation buttons
        /// </summary>
        /// <value>Show navigation buttons</value>
        [DataMember(Name = "nav", EmitDefaultValue = false)]
        public int Nav { get; set; }

        /// <summary>
        /// Navigation position left
        /// </summary>
        /// <value>Navigation position left</value>
        [DataMember(Name = "navpositionleft", EmitDefaultValue = false)]
        public int Navpositionleft { get; set; }

        /// <summary>
        /// Navigation position top
        /// </summary>
        /// <value>Navigation position top</value>
        [DataMember(Name = "navpositiontop", EmitDefaultValue = false)]
        public int Navpositiontop { get; set; }

        /// <summary>
        /// Additional options
        /// </summary>
        /// <value>Additional options</value>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public string Options { get; set; }

        /// <summary>
        /// SCORM zip package size
        /// </summary>
        /// <value>SCORM zip package size</value>
        [DataMember(Name = "packagesize", EmitDefaultValue = false)]
        public int Packagesize { get; set; }

        /// <summary>
        /// SCORM zip package URL
        /// </summary>
        /// <value>SCORM zip package URL</value>
        [DataMember(Name = "packageurl", EmitDefaultValue = false)]
        public string Packageurl { get; set; }

        /// <summary>
        /// Display in current or new window
        /// </summary>
        /// <value>Display in current or new window</value>
        [DataMember(Name = "popup", EmitDefaultValue = false)]
        public int Popup { get; set; }

        /// <summary>
        /// Protect package downloads?
        /// </summary>
        /// <value>Protect package downloads?</value>
        [DataMember(Name = "protectpackagedownloads", EmitDefaultValue = true)]
        public bool Protectpackagedownloads { get; set; }

        /// <summary>
        /// Reference to the package
        /// </summary>
        /// <value>Reference to the package</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Revison number
        /// </summary>
        /// <value>Revison number</value>
        [DataMember(Name = "revision", EmitDefaultValue = false)]
        public int Revision { get; set; }

        /// <summary>
        /// SCORM type
        /// </summary>
        /// <value>SCORM type</value>
        [DataMember(Name = "scormtype", EmitDefaultValue = false)]
        public string Scormtype { get; set; }

        /// <summary>
        /// Course section id
        /// </summary>
        /// <value>Course section id</value>
        [DataMember(Name = "section", EmitDefaultValue = false)]
        public int Section { get; set; }

        /// <summary>
        /// Package content or ext path hash
        /// </summary>
        /// <value>Package content or ext path hash</value>
        [DataMember(Name = "sha1hash", EmitDefaultValue = false)]
        public string Sha1hash { get; set; }

        /// <summary>
        /// How to skip the content structure page
        /// </summary>
        /// <value>How to skip the content structure page</value>
        [DataMember(Name = "skipview", EmitDefaultValue = false)]
        public int Skipview { get; set; }

        /// <summary>
        /// Available to
        /// </summary>
        /// <value>Available to</value>
        [DataMember(Name = "timeclose", EmitDefaultValue = false)]
        public int Timeclose { get; set; }

        /// <summary>
        /// Time of last modification
        /// </summary>
        /// <value>Time of last modification</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// Available from
        /// </summary>
        /// <value>Available from</value>
        [DataMember(Name = "timeopen", EmitDefaultValue = false)]
        public int Timeopen { get; set; }

        /// <summary>
        /// Auto-update frequency for remote packages
        /// </summary>
        /// <value>Auto-update frequency for remote packages</value>
        [DataMember(Name = "updatefreq", EmitDefaultValue = false)]
        public int Updatefreq { get; set; }

        /// <summary>
        /// SCORM version (SCORM_12, SCORM_13, SCORM_AICC)
        /// </summary>
        /// <value>SCORM version (SCORM_12, SCORM_13, SCORM_AICC)</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Visible
        /// </summary>
        /// <value>Visible</value>
        [DataMember(Name = "visible", EmitDefaultValue = true)]
        public bool Visible { get; set; }

        /// <summary>
        /// What grade
        /// </summary>
        /// <value>What grade</value>
        [DataMember(Name = "whatgrade", EmitDefaultValue = false)]
        public int Whatgrade { get; set; }

        /// <summary>
        /// Frame width
        /// </summary>
        /// <value>Frame width</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModScormGetScormsByCourses200ResponseScormsInner {\n");
            sb.Append("  Auto: ").Append(Auto).Append("\n");
            sb.Append("  Autocommit: ").Append(Autocommit).Append("\n");
            sb.Append("  Completionscorerequired: ").Append(Completionscorerequired).Append("\n");
            sb.Append("  Completionstatusallscos: ").Append(Completionstatusallscos).Append("\n");
            sb.Append("  Completionstatusrequired: ").Append(Completionstatusrequired).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Coursemodule: ").Append(Coursemodule).Append("\n");
            sb.Append("  Displayattemptstatus: ").Append(Displayattemptstatus).Append("\n");
            sb.Append("  Displaycoursestructure: ").Append(Displaycoursestructure).Append("\n");
            sb.Append("  Forcecompleted: ").Append(Forcecompleted).Append("\n");
            sb.Append("  Forcenewattempt: ").Append(Forcenewattempt).Append("\n");
            sb.Append("  Grademethod: ").Append(Grademethod).Append("\n");
            sb.Append("  Groupingid: ").Append(Groupingid).Append("\n");
            sb.Append("  Groupmode: ").Append(Groupmode).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Hidebrowse: ").Append(Hidebrowse).Append("\n");
            sb.Append("  Hidetoc: ").Append(Hidetoc).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Intro: ").Append(Intro).Append("\n");
            sb.Append("  Introfiles: ").Append(Introfiles).Append("\n");
            sb.Append("  Introformat: ").Append(Introformat).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Lastattemptlock: ").Append(Lastattemptlock).Append("\n");
            sb.Append("  Launch: ").Append(Launch).Append("\n");
            sb.Append("  Maxattempt: ").Append(Maxattempt).Append("\n");
            sb.Append("  Maxgrade: ").Append(Maxgrade).Append("\n");
            sb.Append("  Md5hash: ").Append(Md5hash).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nav: ").Append(Nav).Append("\n");
            sb.Append("  Navpositionleft: ").Append(Navpositionleft).Append("\n");
            sb.Append("  Navpositiontop: ").Append(Navpositiontop).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Packagesize: ").Append(Packagesize).Append("\n");
            sb.Append("  Packageurl: ").Append(Packageurl).Append("\n");
            sb.Append("  Popup: ").Append(Popup).Append("\n");
            sb.Append("  Protectpackagedownloads: ").Append(Protectpackagedownloads).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  Scormtype: ").Append(Scormtype).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  Sha1hash: ").Append(Sha1hash).Append("\n");
            sb.Append("  Skipview: ").Append(Skipview).Append("\n");
            sb.Append("  Timeclose: ").Append(Timeclose).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Timeopen: ").Append(Timeopen).Append("\n");
            sb.Append("  Updatefreq: ").Append(Updatefreq).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("  Whatgrade: ").Append(Whatgrade).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
