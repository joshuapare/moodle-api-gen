/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModLessonGetUserAttempt200ResponseUserstatsGradeinfo
    /// </summary>
    [DataContract(Name = "mod_lesson_get_user_attempt_200_response_userstats_gradeinfo")]
    public partial class ModLessonGetUserAttempt200ResponseUserstatsGradeinfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetUserAttempt200ResponseUserstatsGradeinfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModLessonGetUserAttempt200ResponseUserstatsGradeinfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetUserAttempt200ResponseUserstatsGradeinfo" /> class.
        /// </summary>
        /// <param name="attempts">Number of question attempts (required) (default to null).</param>
        /// <param name="earned">Points earned by student (required) (default to nullM).</param>
        /// <param name="grade">Calculated percentage grade (required) (default to nullM).</param>
        /// <param name="manualpoints">Point value for manually graded questions (required) (default to nullM).</param>
        /// <param name="nmanual">Number of manually graded questions (required) (default to null).</param>
        /// <param name="nquestions">Number of questions answered (required) (default to null).</param>
        /// <param name="total">Max points possible (required) (default to nullM).</param>
        public ModLessonGetUserAttempt200ResponseUserstatsGradeinfo(int attempts = null, decimal earned = nullM, decimal grade = nullM, decimal manualpoints = nullM, int nmanual = null, int nquestions = null, decimal total = nullM)
        {
            this.Attempts = attempts;
            this.Earned = earned;
            this.Grade = grade;
            this.Manualpoints = manualpoints;
            this.Nmanual = nmanual;
            this.Nquestions = nquestions;
            this.Total = total;
        }

        /// <summary>
        /// Number of question attempts
        /// </summary>
        /// <value>Number of question attempts</value>
        [DataMember(Name = "attempts", IsRequired = true, EmitDefaultValue = true)]
        public int Attempts { get; set; }

        /// <summary>
        /// Points earned by student
        /// </summary>
        /// <value>Points earned by student</value>
        [DataMember(Name = "earned", IsRequired = true, EmitDefaultValue = true)]
        public decimal Earned { get; set; }

        /// <summary>
        /// Calculated percentage grade
        /// </summary>
        /// <value>Calculated percentage grade</value>
        [DataMember(Name = "grade", IsRequired = true, EmitDefaultValue = true)]
        public decimal Grade { get; set; }

        /// <summary>
        /// Point value for manually graded questions
        /// </summary>
        /// <value>Point value for manually graded questions</value>
        [DataMember(Name = "manualpoints", IsRequired = true, EmitDefaultValue = true)]
        public decimal Manualpoints { get; set; }

        /// <summary>
        /// Number of manually graded questions
        /// </summary>
        /// <value>Number of manually graded questions</value>
        [DataMember(Name = "nmanual", IsRequired = true, EmitDefaultValue = true)]
        public int Nmanual { get; set; }

        /// <summary>
        /// Number of questions answered
        /// </summary>
        /// <value>Number of questions answered</value>
        [DataMember(Name = "nquestions", IsRequired = true, EmitDefaultValue = true)]
        public int Nquestions { get; set; }

        /// <summary>
        /// Max points possible
        /// </summary>
        /// <value>Max points possible</value>
        [DataMember(Name = "total", IsRequired = true, EmitDefaultValue = true)]
        public decimal Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModLessonGetUserAttempt200ResponseUserstatsGradeinfo {\n");
            sb.Append("  Attempts: ").Append(Attempts).Append("\n");
            sb.Append("  Earned: ").Append(Earned).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Manualpoints: ").Append(Manualpoints).Append("\n");
            sb.Append("  Nmanual: ").Append(Nmanual).Append("\n");
            sb.Append("  Nquestions: ").Append(Nquestions).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
