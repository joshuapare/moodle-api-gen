/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ToolLpDataForCourseCompetenciesPage200ResponseStatistics
    /// </summary>
    [DataContract(Name = "tool_lp_data_for_course_competencies_page_200_response_statistics")]
    public partial class ToolLpDataForCourseCompetenciesPage200ResponseStatistics : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForCourseCompetenciesPage200ResponseStatistics" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolLpDataForCourseCompetenciesPage200ResponseStatistics() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForCourseCompetenciesPage200ResponseStatistics" /> class.
        /// </summary>
        /// <param name="canbegradedincourse">canbegradedincourse (required) (default to null).</param>
        /// <param name="canmanagecoursecompetencies">canmanagecoursecompetencies (required) (default to null).</param>
        /// <param name="competencycount">competencycount (required).</param>
        /// <param name="leastproficient">leastproficient (required).</param>
        /// <param name="leastproficientcount">leastproficientcount (required) (default to null).</param>
        /// <param name="proficientcompetencycount">proficientcompetencycount (required) (default to null).</param>
        /// <param name="proficientcompetencypercentage">proficientcompetencypercentage (required) (default to nullM).</param>
        /// <param name="proficientcompetencypercentageformatted">proficientcompetencypercentageformatted (required) (default to &quot;null&quot;).</param>
        public ToolLpDataForCourseCompetenciesPage200ResponseStatistics(bool canbegradedincourse = null, bool canmanagecoursecompetencies = null, int competencycount = default(int), List<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner> leastproficient = default(List<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner>), int leastproficientcount = null, int proficientcompetencycount = null, decimal proficientcompetencypercentage = nullM, string proficientcompetencypercentageformatted = @"null")
        {
            this.Canbegradedincourse = canbegradedincourse;
            this.Canmanagecoursecompetencies = canmanagecoursecompetencies;
            this.Competencycount = competencycount;
            // to ensure "leastproficient" is required (not null)
            if (leastproficient == null)
            {
                throw new ArgumentNullException("leastproficient is a required property for ToolLpDataForCourseCompetenciesPage200ResponseStatistics and cannot be null");
            }
            this.Leastproficient = leastproficient;
            this.Leastproficientcount = leastproficientcount;
            this.Proficientcompetencycount = proficientcompetencycount;
            this.Proficientcompetencypercentage = proficientcompetencypercentage;
            // to ensure "proficientcompetencypercentageformatted" is required (not null)
            if (proficientcompetencypercentageformatted == null)
            {
                throw new ArgumentNullException("proficientcompetencypercentageformatted is a required property for ToolLpDataForCourseCompetenciesPage200ResponseStatistics and cannot be null");
            }
            this.Proficientcompetencypercentageformatted = proficientcompetencypercentageformatted;
        }

        /// <summary>
        /// canbegradedincourse
        /// </summary>
        /// <value>canbegradedincourse</value>
        [DataMember(Name = "canbegradedincourse", IsRequired = true, EmitDefaultValue = true)]
        public bool Canbegradedincourse { get; set; }

        /// <summary>
        /// canmanagecoursecompetencies
        /// </summary>
        /// <value>canmanagecoursecompetencies</value>
        [DataMember(Name = "canmanagecoursecompetencies", IsRequired = true, EmitDefaultValue = true)]
        public bool Canmanagecoursecompetencies { get; set; }

        /// <summary>
        /// competencycount
        /// </summary>
        /// <value>competencycount</value>
        [DataMember(Name = "competencycount", IsRequired = true, EmitDefaultValue = true)]
        public int Competencycount { get; set; }

        /// <summary>
        /// Gets or Sets Leastproficient
        /// </summary>
        [DataMember(Name = "leastproficient", IsRequired = true, EmitDefaultValue = true)]
        public List<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner> Leastproficient { get; set; }

        /// <summary>
        /// leastproficientcount
        /// </summary>
        /// <value>leastproficientcount</value>
        [DataMember(Name = "leastproficientcount", IsRequired = true, EmitDefaultValue = true)]
        public int Leastproficientcount { get; set; }

        /// <summary>
        /// proficientcompetencycount
        /// </summary>
        /// <value>proficientcompetencycount</value>
        [DataMember(Name = "proficientcompetencycount", IsRequired = true, EmitDefaultValue = true)]
        public int Proficientcompetencycount { get; set; }

        /// <summary>
        /// proficientcompetencypercentage
        /// </summary>
        /// <value>proficientcompetencypercentage</value>
        [DataMember(Name = "proficientcompetencypercentage", IsRequired = true, EmitDefaultValue = true)]
        public decimal Proficientcompetencypercentage { get; set; }

        /// <summary>
        /// proficientcompetencypercentageformatted
        /// </summary>
        /// <value>proficientcompetencypercentageformatted</value>
        [DataMember(Name = "proficientcompetencypercentageformatted", IsRequired = true, EmitDefaultValue = true)]
        public string Proficientcompetencypercentageformatted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolLpDataForCourseCompetenciesPage200ResponseStatistics {\n");
            sb.Append("  Canbegradedincourse: ").Append(Canbegradedincourse).Append("\n");
            sb.Append("  Canmanagecoursecompetencies: ").Append(Canmanagecoursecompetencies).Append("\n");
            sb.Append("  Competencycount: ").Append(Competencycount).Append("\n");
            sb.Append("  Leastproficient: ").Append(Leastproficient).Append("\n");
            sb.Append("  Leastproficientcount: ").Append(Leastproficientcount).Append("\n");
            sb.Append("  Proficientcompetencycount: ").Append(Proficientcompetencycount).Append("\n");
            sb.Append("  Proficientcompetencypercentage: ").Append(Proficientcompetencypercentage).Append("\n");
            sb.Append("  Proficientcompetencypercentageformatted: ").Append(Proficientcompetencypercentageformatted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
