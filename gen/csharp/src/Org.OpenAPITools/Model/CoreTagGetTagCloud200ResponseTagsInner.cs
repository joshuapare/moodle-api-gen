/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Tags.
    /// </summary>
    [DataContract(Name = "core_tag_get_tag_cloud_200_response_tags_inner")]
    public partial class CoreTagGetTagCloud200ResponseTagsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreTagGetTagCloud200ResponseTagsInner" /> class.
        /// </summary>
        /// <param name="count">Number of tag instances. (default to null).</param>
        /// <param name="flag">Whether the tag is flagged as inappropriate. (default to null).</param>
        /// <param name="isstandard">Whether is a standard tag or not. (default to null).</param>
        /// <param name="name">Tag name. (default to &quot;null&quot;).</param>
        /// <param name="size">Proportional size to display the tag. (default to null).</param>
        /// <param name="viewurl">URL to view the tag index. (default to &quot;null&quot;).</param>
        public CoreTagGetTagCloud200ResponseTagsInner(int count = null, bool flag = null, bool isstandard = null, string name = @"null", int size = null, string viewurl = @"null")
        {
            this.Count = count;
            this.Flag = flag;
            this.Isstandard = isstandard;
            // use default value if no "name" provided
            this.Name = name ?? @"null";
            this.Size = size;
            // use default value if no "viewurl" provided
            this.Viewurl = viewurl ?? @"null";
        }

        /// <summary>
        /// Number of tag instances.
        /// </summary>
        /// <value>Number of tag instances.</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Whether the tag is flagged as inappropriate.
        /// </summary>
        /// <value>Whether the tag is flagged as inappropriate.</value>
        [DataMember(Name = "flag", EmitDefaultValue = true)]
        public bool Flag { get; set; }

        /// <summary>
        /// Whether is a standard tag or not.
        /// </summary>
        /// <value>Whether is a standard tag or not.</value>
        [DataMember(Name = "isstandard", EmitDefaultValue = true)]
        public bool Isstandard { get; set; }

        /// <summary>
        /// Tag name.
        /// </summary>
        /// <value>Tag name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Proportional size to display the tag.
        /// </summary>
        /// <value>Proportional size to display the tag.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// URL to view the tag index.
        /// </summary>
        /// <value>URL to view the tag index.</value>
        [DataMember(Name = "viewurl", EmitDefaultValue = false)]
        public string Viewurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreTagGetTagCloud200ResponseTagsInner {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Flag: ").Append(Flag).Append("\n");
            sb.Append("  Isstandard: ").Append(Isstandard).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Viewurl: ").Append(Viewurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
