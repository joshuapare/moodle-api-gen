/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner
    /// </summary>
    [DataContract(Name = "mod_bigbluebuttonbn_meeting_info_200_response_presentations_inner")]
    public partial class ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner" /> class.
        /// </summary>
        /// <param name="icondesc">icon text (default to &quot;null&quot;).</param>
        /// <param name="iconname">icon name (default to &quot;null&quot;).</param>
        /// <param name="name">presentation name (default to &quot;null&quot;).</param>
        /// <param name="url">presentation URL (default to &quot;null&quot;).</param>
        public ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner(string icondesc = @"null", string iconname = @"null", string name = @"null", string url = @"null")
        {
            // use default value if no "icondesc" provided
            this.Icondesc = icondesc ?? @"null";
            // use default value if no "iconname" provided
            this.Iconname = iconname ?? @"null";
            // use default value if no "name" provided
            this.Name = name ?? @"null";
            // use default value if no "url" provided
            this.Url = url ?? @"null";
        }

        /// <summary>
        /// icon text
        /// </summary>
        /// <value>icon text</value>
        [DataMember(Name = "icondesc", EmitDefaultValue = false)]
        public string Icondesc { get; set; }

        /// <summary>
        /// icon name
        /// </summary>
        /// <value>icon name</value>
        [DataMember(Name = "iconname", EmitDefaultValue = false)]
        public string Iconname { get; set; }

        /// <summary>
        /// presentation name
        /// </summary>
        /// <value>presentation name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// presentation URL
        /// </summary>
        /// <value>presentation URL</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner {\n");
            sb.Append("  Icondesc: ").Append(Icondesc).Append("\n");
            sb.Append("  Iconname: ").Append(Iconname).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
