/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModForumGetDiscussionPost200ResponsePostTagsInner
    /// </summary>
    [DataContract(Name = "mod_forum_get_discussion_post_200_response_post_tags_inner")]
    public partial class ModForumGetDiscussionPost200ResponsePostTagsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumGetDiscussionPost200ResponsePostTagsInner" /> class.
        /// </summary>
        /// <param name="displayname">The display name of the tag.</param>
        /// <param name="flag">Wehther this tag is flagged.</param>
        /// <param name="id">The ID of the Tag.</param>
        /// <param name="isstandard">Whether this is a standard tag.</param>
        /// <param name="tagid">The tagid.</param>
        /// <param name="urls">urls.</param>
        public ModForumGetDiscussionPost200ResponsePostTagsInner(string displayname = default(string), bool flag = default(bool), int id = default(int), bool isstandard = default(bool), int tagid = default(int), ModForumGetDiscussionPost200ResponsePostTagsInnerUrls urls = default(ModForumGetDiscussionPost200ResponsePostTagsInnerUrls))
        {
            this.Displayname = displayname;
            this.Flag = flag;
            this.Id = id;
            this.Isstandard = isstandard;
            this.Tagid = tagid;
            this.Urls = urls;
        }

        /// <summary>
        /// The display name of the tag
        /// </summary>
        /// <value>The display name of the tag</value>
        [DataMember(Name = "displayname", EmitDefaultValue = false)]
        public string Displayname { get; set; }

        /// <summary>
        /// Wehther this tag is flagged
        /// </summary>
        /// <value>Wehther this tag is flagged</value>
        [DataMember(Name = "flag", EmitDefaultValue = true)]
        public bool Flag { get; set; }

        /// <summary>
        /// The ID of the Tag
        /// </summary>
        /// <value>The ID of the Tag</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Whether this is a standard tag
        /// </summary>
        /// <value>Whether this is a standard tag</value>
        [DataMember(Name = "isstandard", EmitDefaultValue = true)]
        public bool Isstandard { get; set; }

        /// <summary>
        /// The tagid
        /// </summary>
        /// <value>The tagid</value>
        [DataMember(Name = "tagid", EmitDefaultValue = false)]
        public int Tagid { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name = "urls", EmitDefaultValue = false)]
        public ModForumGetDiscussionPost200ResponsePostTagsInnerUrls Urls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModForumGetDiscussionPost200ResponsePostTagsInner {\n");
            sb.Append("  Displayname: ").Append(Displayname).Append("\n");
            sb.Append("  Flag: ").Append(Flag).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Isstandard: ").Append(Isstandard).Append("\n");
            sb.Append("  Tagid: ").Append(Tagid).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
