/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModChatGetSessionsRequest
    /// </summary>
    [DataContract(Name = "mod_chat_get_sessions_request")]
    public partial class ModChatGetSessionsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModChatGetSessionsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModChatGetSessionsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModChatGetSessionsRequest" /> class.
        /// </summary>
        /// <param name="chatid">Chat instance id. (required).</param>
        /// <param name="groupid">Get messages from users in this group.                                                 0 means that the function will determine the user group (default to 0).</param>
        /// <param name="showall">Whether to show completed sessions or not. (default to false).</param>
        public ModChatGetSessionsRequest(int chatid = default(int), int groupid = 0, bool showall = false)
        {
            this.Chatid = chatid;
            this.Groupid = groupid;
            this.Showall = showall;
        }

        /// <summary>
        /// Chat instance id.
        /// </summary>
        /// <value>Chat instance id.</value>
        [DataMember(Name = "chatid", IsRequired = true, EmitDefaultValue = true)]
        public int Chatid { get; set; }

        /// <summary>
        /// Get messages from users in this group.                                                 0 means that the function will determine the user group
        /// </summary>
        /// <value>Get messages from users in this group.                                                 0 means that the function will determine the user group</value>
        [DataMember(Name = "groupid", EmitDefaultValue = false)]
        public int Groupid { get; set; }

        /// <summary>
        /// Whether to show completed sessions or not.
        /// </summary>
        /// <value>Whether to show completed sessions or not.</value>
        [DataMember(Name = "showall", EmitDefaultValue = true)]
        public bool Showall { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModChatGetSessionsRequest {\n");
            sb.Append("  Chatid: ").Append(Chatid).Append("\n");
            sb.Append("  Groupid: ").Append(Groupid).Append("\n");
            sb.Append("  Showall: ").Append(Showall).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
