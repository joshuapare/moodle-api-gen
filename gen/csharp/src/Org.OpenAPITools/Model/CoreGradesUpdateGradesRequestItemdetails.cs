/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreGradesUpdateGradesRequestItemdetails
    /// </summary>
    [DataContract(Name = "core_grades_update_grades_request_itemdetails")]
    public partial class CoreGradesUpdateGradesRequestItemdetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreGradesUpdateGradesRequestItemdetails" /> class.
        /// </summary>
        /// <param name="deleted">True if the grade item should be deleted (default to null).</param>
        /// <param name="grademax">Maximum grade allowed (default to nullM).</param>
        /// <param name="grademin">Minimum grade allowed (default to nullM).</param>
        /// <param name="gradetype">The type of grade (0 &#x3D; none, 1 &#x3D; value, 2 &#x3D; scale, 3 &#x3D; text) (default to null).</param>
        /// <param name="hidden">True if the grade item is hidden (default to null).</param>
        /// <param name="idnumber">Arbitrary ID provided by the module responsible for the grade item (default to null).</param>
        /// <param name="itemname">The grade item name (default to &quot;null&quot;).</param>
        /// <param name="multfactor">Multiply all grades by this number (default to nullM).</param>
        /// <param name="plusfactor">Add this to all grades (default to nullM).</param>
        /// <param name="scaleid">The ID of the custom scale being is used (default to null).</param>
        public CoreGradesUpdateGradesRequestItemdetails(bool deleted = null, decimal grademax = nullM, decimal grademin = nullM, int gradetype = null, bool hidden = null, int idnumber = null, string itemname = @"null", decimal multfactor = nullM, decimal plusfactor = nullM, int scaleid = null)
        {
            this.Deleted = deleted;
            this.Grademax = grademax;
            this.Grademin = grademin;
            this.Gradetype = gradetype;
            this.Hidden = hidden;
            this.Idnumber = idnumber;
            // use default value if no "itemname" provided
            this.Itemname = itemname ?? @"null";
            this.Multfactor = multfactor;
            this.Plusfactor = plusfactor;
            this.Scaleid = scaleid;
        }

        /// <summary>
        /// True if the grade item should be deleted
        /// </summary>
        /// <value>True if the grade item should be deleted</value>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Maximum grade allowed
        /// </summary>
        /// <value>Maximum grade allowed</value>
        [DataMember(Name = "grademax", EmitDefaultValue = false)]
        public decimal Grademax { get; set; }

        /// <summary>
        /// Minimum grade allowed
        /// </summary>
        /// <value>Minimum grade allowed</value>
        [DataMember(Name = "grademin", EmitDefaultValue = false)]
        public decimal Grademin { get; set; }

        /// <summary>
        /// The type of grade (0 &#x3D; none, 1 &#x3D; value, 2 &#x3D; scale, 3 &#x3D; text)
        /// </summary>
        /// <value>The type of grade (0 &#x3D; none, 1 &#x3D; value, 2 &#x3D; scale, 3 &#x3D; text)</value>
        [DataMember(Name = "gradetype", EmitDefaultValue = false)]
        public int Gradetype { get; set; }

        /// <summary>
        /// True if the grade item is hidden
        /// </summary>
        /// <value>True if the grade item is hidden</value>
        [DataMember(Name = "hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// Arbitrary ID provided by the module responsible for the grade item
        /// </summary>
        /// <value>Arbitrary ID provided by the module responsible for the grade item</value>
        [DataMember(Name = "idnumber", EmitDefaultValue = false)]
        public int Idnumber { get; set; }

        /// <summary>
        /// The grade item name
        /// </summary>
        /// <value>The grade item name</value>
        [DataMember(Name = "itemname", EmitDefaultValue = false)]
        public string Itemname { get; set; }

        /// <summary>
        /// Multiply all grades by this number
        /// </summary>
        /// <value>Multiply all grades by this number</value>
        [DataMember(Name = "multfactor", EmitDefaultValue = false)]
        public decimal Multfactor { get; set; }

        /// <summary>
        /// Add this to all grades
        /// </summary>
        /// <value>Add this to all grades</value>
        [DataMember(Name = "plusfactor", EmitDefaultValue = false)]
        public decimal Plusfactor { get; set; }

        /// <summary>
        /// The ID of the custom scale being is used
        /// </summary>
        /// <value>The ID of the custom scale being is used</value>
        [DataMember(Name = "scaleid", EmitDefaultValue = false)]
        public int Scaleid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreGradesUpdateGradesRequestItemdetails {\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Grademax: ").Append(Grademax).Append("\n");
            sb.Append("  Grademin: ").Append(Grademin).Append("\n");
            sb.Append("  Gradetype: ").Append(Gradetype).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Idnumber: ").Append(Idnumber).Append("\n");
            sb.Append("  Itemname: ").Append(Itemname).Append("\n");
            sb.Append("  Multfactor: ").Append(Multfactor).Append("\n");
            sb.Append("  Plusfactor: ").Append(Plusfactor).Append("\n");
            sb.Append("  Scaleid: ").Append(Scaleid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
