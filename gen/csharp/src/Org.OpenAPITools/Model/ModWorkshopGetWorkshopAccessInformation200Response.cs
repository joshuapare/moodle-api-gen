/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModWorkshopGetWorkshopAccessInformation200Response
    /// </summary>
    [DataContract(Name = "mod_workshop_get_workshop_access_information_200_response")]
    public partial class ModWorkshopGetWorkshopAccessInformation200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModWorkshopGetWorkshopAccessInformation200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModWorkshopGetWorkshopAccessInformation200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModWorkshopGetWorkshopAccessInformation200Response" /> class.
        /// </summary>
        /// <param name="assessingallowed">Is the user allowed to create/edit his assessments? (required) (default to null).</param>
        /// <param name="assessingexamplesallowed">Are reviewers allowed to create/edit their assessments of the example submissions?. (required) (default to null).</param>
        /// <param name="canaddinstance">Whether the user has the capability mod/workshop:addinstance allowed. (required) (default to null).</param>
        /// <param name="canallocate">Whether the user has the capability mod/workshop:allocate allowed. (required) (default to null).</param>
        /// <param name="candeletesubmissions">Whether the user has the capability mod/workshop:deletesubmissions allowed. (required) (default to null).</param>
        /// <param name="caneditdimensions">Whether the user has the capability mod/workshop:editdimensions allowed. (required) (default to null).</param>
        /// <param name="canexportsubmissions">Whether the user has the capability mod/workshop:exportsubmissions allowed. (required) (default to null).</param>
        /// <param name="canignoredeadlines">Whether the user has the capability mod/workshop:ignoredeadlines allowed. (required) (default to null).</param>
        /// <param name="canmanageexamples">Whether the user has the capability mod/workshop:manageexamples allowed. (required) (default to null).</param>
        /// <param name="canoverridegrades">Whether the user has the capability mod/workshop:overridegrades allowed. (required) (default to null).</param>
        /// <param name="canpeerassess">Whether the user has the capability mod/workshop:peerassess allowed. (required) (default to null).</param>
        /// <param name="canpublishsubmissions">Whether the user has the capability mod/workshop:publishsubmissions allowed. (required) (default to null).</param>
        /// <param name="cansubmit">Whether the user has the capability mod/workshop:submit allowed. (required) (default to null).</param>
        /// <param name="canswitchphase">Whether the user has the capability mod/workshop:switchphase allowed. (required) (default to null).</param>
        /// <param name="canview">Whether the user has the capability mod/workshop:view allowed. (required) (default to null).</param>
        /// <param name="canviewallassessments">Whether the user has the capability mod/workshop:viewallassessments allowed. (required) (default to null).</param>
        /// <param name="canviewallsubmissions">Whether the user has the capability mod/workshop:viewallsubmissions allowed. (required) (default to null).</param>
        /// <param name="canviewauthornames">Whether the user has the capability mod/workshop:viewauthornames allowed. (required) (default to null).</param>
        /// <param name="canviewauthorpublished">Whether the user has the capability mod/workshop:viewauthorpublished allowed. (required) (default to null).</param>
        /// <param name="canviewpublishedsubmissions">Whether the user has the capability mod/workshop:viewpublishedsubmissions allowed. (required) (default to null).</param>
        /// <param name="canviewreviewernames">Whether the user has the capability mod/workshop:viewreviewernames allowed. (required) (default to null).</param>
        /// <param name="creatingsubmissionallowed">Is the given user allowed to create their submission? (required) (default to null).</param>
        /// <param name="examplesassessedbeforeassessment">Whether the given user has assessed all his required examples before assessment                 (always true if there are not examples to assessor not configured to check before assessment). (required) (default to null).</param>
        /// <param name="examplesassessedbeforesubmission">Whether the given user has assessed all his required examples before submission                 (always true if there are not examples to assess or not configured to check before submission). (required) (default to null).</param>
        /// <param name="modifyingsubmissionallowed">Is the user allowed to modify his existing submission? (required) (default to null).</param>
        /// <param name="warnings">warnings.</param>
        public ModWorkshopGetWorkshopAccessInformation200Response(bool assessingallowed = null, bool assessingexamplesallowed = null, bool canaddinstance = null, bool canallocate = null, bool candeletesubmissions = null, bool caneditdimensions = null, bool canexportsubmissions = null, bool canignoredeadlines = null, bool canmanageexamples = null, bool canoverridegrades = null, bool canpeerassess = null, bool canpublishsubmissions = null, bool cansubmit = null, bool canswitchphase = null, bool canview = null, bool canviewallassessments = null, bool canviewallsubmissions = null, bool canviewauthornames = null, bool canviewauthorpublished = null, bool canviewpublishedsubmissions = null, bool canviewreviewernames = null, bool creatingsubmissionallowed = null, bool examplesassessedbeforeassessment = null, bool examplesassessedbeforesubmission = null, bool modifyingsubmissionallowed = null, List<AuthEmailSignupUser200ResponseWarningsInner> warnings = default(List<AuthEmailSignupUser200ResponseWarningsInner>))
        {
            this.Assessingallowed = assessingallowed;
            this.Assessingexamplesallowed = assessingexamplesallowed;
            this.Canaddinstance = canaddinstance;
            this.Canallocate = canallocate;
            this.Candeletesubmissions = candeletesubmissions;
            this.Caneditdimensions = caneditdimensions;
            this.Canexportsubmissions = canexportsubmissions;
            this.Canignoredeadlines = canignoredeadlines;
            this.Canmanageexamples = canmanageexamples;
            this.Canoverridegrades = canoverridegrades;
            this.Canpeerassess = canpeerassess;
            this.Canpublishsubmissions = canpublishsubmissions;
            this.Cansubmit = cansubmit;
            this.Canswitchphase = canswitchphase;
            this.Canview = canview;
            this.Canviewallassessments = canviewallassessments;
            this.Canviewallsubmissions = canviewallsubmissions;
            this.Canviewauthornames = canviewauthornames;
            this.Canviewauthorpublished = canviewauthorpublished;
            this.Canviewpublishedsubmissions = canviewpublishedsubmissions;
            this.Canviewreviewernames = canviewreviewernames;
            this.Creatingsubmissionallowed = creatingsubmissionallowed;
            this.Examplesassessedbeforeassessment = examplesassessedbeforeassessment;
            this.Examplesassessedbeforesubmission = examplesassessedbeforesubmission;
            this.Modifyingsubmissionallowed = modifyingsubmissionallowed;
            this.Warnings = warnings;
        }

        /// <summary>
        /// Is the user allowed to create/edit his assessments?
        /// </summary>
        /// <value>Is the user allowed to create/edit his assessments?</value>
        [DataMember(Name = "assessingallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Assessingallowed { get; set; }

        /// <summary>
        /// Are reviewers allowed to create/edit their assessments of the example submissions?.
        /// </summary>
        /// <value>Are reviewers allowed to create/edit their assessments of the example submissions?.</value>
        [DataMember(Name = "assessingexamplesallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Assessingexamplesallowed { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:addinstance allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:addinstance allowed.</value>
        [DataMember(Name = "canaddinstance", IsRequired = true, EmitDefaultValue = true)]
        public bool Canaddinstance { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:allocate allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:allocate allowed.</value>
        [DataMember(Name = "canallocate", IsRequired = true, EmitDefaultValue = true)]
        public bool Canallocate { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:deletesubmissions allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:deletesubmissions allowed.</value>
        [DataMember(Name = "candeletesubmissions", IsRequired = true, EmitDefaultValue = true)]
        public bool Candeletesubmissions { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:editdimensions allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:editdimensions allowed.</value>
        [DataMember(Name = "caneditdimensions", IsRequired = true, EmitDefaultValue = true)]
        public bool Caneditdimensions { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:exportsubmissions allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:exportsubmissions allowed.</value>
        [DataMember(Name = "canexportsubmissions", IsRequired = true, EmitDefaultValue = true)]
        public bool Canexportsubmissions { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:ignoredeadlines allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:ignoredeadlines allowed.</value>
        [DataMember(Name = "canignoredeadlines", IsRequired = true, EmitDefaultValue = true)]
        public bool Canignoredeadlines { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:manageexamples allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:manageexamples allowed.</value>
        [DataMember(Name = "canmanageexamples", IsRequired = true, EmitDefaultValue = true)]
        public bool Canmanageexamples { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:overridegrades allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:overridegrades allowed.</value>
        [DataMember(Name = "canoverridegrades", IsRequired = true, EmitDefaultValue = true)]
        public bool Canoverridegrades { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:peerassess allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:peerassess allowed.</value>
        [DataMember(Name = "canpeerassess", IsRequired = true, EmitDefaultValue = true)]
        public bool Canpeerassess { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:publishsubmissions allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:publishsubmissions allowed.</value>
        [DataMember(Name = "canpublishsubmissions", IsRequired = true, EmitDefaultValue = true)]
        public bool Canpublishsubmissions { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:submit allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:submit allowed.</value>
        [DataMember(Name = "cansubmit", IsRequired = true, EmitDefaultValue = true)]
        public bool Cansubmit { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:switchphase allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:switchphase allowed.</value>
        [DataMember(Name = "canswitchphase", IsRequired = true, EmitDefaultValue = true)]
        public bool Canswitchphase { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:view allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:view allowed.</value>
        [DataMember(Name = "canview", IsRequired = true, EmitDefaultValue = true)]
        public bool Canview { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:viewallassessments allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:viewallassessments allowed.</value>
        [DataMember(Name = "canviewallassessments", IsRequired = true, EmitDefaultValue = true)]
        public bool Canviewallassessments { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:viewallsubmissions allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:viewallsubmissions allowed.</value>
        [DataMember(Name = "canviewallsubmissions", IsRequired = true, EmitDefaultValue = true)]
        public bool Canviewallsubmissions { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:viewauthornames allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:viewauthornames allowed.</value>
        [DataMember(Name = "canviewauthornames", IsRequired = true, EmitDefaultValue = true)]
        public bool Canviewauthornames { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:viewauthorpublished allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:viewauthorpublished allowed.</value>
        [DataMember(Name = "canviewauthorpublished", IsRequired = true, EmitDefaultValue = true)]
        public bool Canviewauthorpublished { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:viewpublishedsubmissions allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:viewpublishedsubmissions allowed.</value>
        [DataMember(Name = "canviewpublishedsubmissions", IsRequired = true, EmitDefaultValue = true)]
        public bool Canviewpublishedsubmissions { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/workshop:viewreviewernames allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/workshop:viewreviewernames allowed.</value>
        [DataMember(Name = "canviewreviewernames", IsRequired = true, EmitDefaultValue = true)]
        public bool Canviewreviewernames { get; set; }

        /// <summary>
        /// Is the given user allowed to create their submission?
        /// </summary>
        /// <value>Is the given user allowed to create their submission?</value>
        [DataMember(Name = "creatingsubmissionallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Creatingsubmissionallowed { get; set; }

        /// <summary>
        /// Whether the given user has assessed all his required examples before assessment                 (always true if there are not examples to assessor not configured to check before assessment).
        /// </summary>
        /// <value>Whether the given user has assessed all his required examples before assessment                 (always true if there are not examples to assessor not configured to check before assessment).</value>
        [DataMember(Name = "examplesassessedbeforeassessment", IsRequired = true, EmitDefaultValue = true)]
        public bool Examplesassessedbeforeassessment { get; set; }

        /// <summary>
        /// Whether the given user has assessed all his required examples before submission                 (always true if there are not examples to assess or not configured to check before submission).
        /// </summary>
        /// <value>Whether the given user has assessed all his required examples before submission                 (always true if there are not examples to assess or not configured to check before submission).</value>
        [DataMember(Name = "examplesassessedbeforesubmission", IsRequired = true, EmitDefaultValue = true)]
        public bool Examplesassessedbeforesubmission { get; set; }

        /// <summary>
        /// Is the user allowed to modify his existing submission?
        /// </summary>
        /// <value>Is the user allowed to modify his existing submission?</value>
        [DataMember(Name = "modifyingsubmissionallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Modifyingsubmissionallowed { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<AuthEmailSignupUser200ResponseWarningsInner> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModWorkshopGetWorkshopAccessInformation200Response {\n");
            sb.Append("  Assessingallowed: ").Append(Assessingallowed).Append("\n");
            sb.Append("  Assessingexamplesallowed: ").Append(Assessingexamplesallowed).Append("\n");
            sb.Append("  Canaddinstance: ").Append(Canaddinstance).Append("\n");
            sb.Append("  Canallocate: ").Append(Canallocate).Append("\n");
            sb.Append("  Candeletesubmissions: ").Append(Candeletesubmissions).Append("\n");
            sb.Append("  Caneditdimensions: ").Append(Caneditdimensions).Append("\n");
            sb.Append("  Canexportsubmissions: ").Append(Canexportsubmissions).Append("\n");
            sb.Append("  Canignoredeadlines: ").Append(Canignoredeadlines).Append("\n");
            sb.Append("  Canmanageexamples: ").Append(Canmanageexamples).Append("\n");
            sb.Append("  Canoverridegrades: ").Append(Canoverridegrades).Append("\n");
            sb.Append("  Canpeerassess: ").Append(Canpeerassess).Append("\n");
            sb.Append("  Canpublishsubmissions: ").Append(Canpublishsubmissions).Append("\n");
            sb.Append("  Cansubmit: ").Append(Cansubmit).Append("\n");
            sb.Append("  Canswitchphase: ").Append(Canswitchphase).Append("\n");
            sb.Append("  Canview: ").Append(Canview).Append("\n");
            sb.Append("  Canviewallassessments: ").Append(Canviewallassessments).Append("\n");
            sb.Append("  Canviewallsubmissions: ").Append(Canviewallsubmissions).Append("\n");
            sb.Append("  Canviewauthornames: ").Append(Canviewauthornames).Append("\n");
            sb.Append("  Canviewauthorpublished: ").Append(Canviewauthorpublished).Append("\n");
            sb.Append("  Canviewpublishedsubmissions: ").Append(Canviewpublishedsubmissions).Append("\n");
            sb.Append("  Canviewreviewernames: ").Append(Canviewreviewernames).Append("\n");
            sb.Append("  Creatingsubmissionallowed: ").Append(Creatingsubmissionallowed).Append("\n");
            sb.Append("  Examplesassessedbeforeassessment: ").Append(Examplesassessedbeforeassessment).Append("\n");
            sb.Append("  Examplesassessedbeforesubmission: ").Append(Examplesassessedbeforesubmission).Append("\n");
            sb.Append("  Modifyingsubmissionallowed: ").Append(Modifyingsubmissionallowed).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
