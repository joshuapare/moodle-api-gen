/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModLessonGetLesson200ResponseLesson
    /// </summary>
    [DataContract(Name = "mod_lesson_get_lesson_200_response_lesson")]
    public partial class ModLessonGetLesson200ResponseLesson : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetLesson200ResponseLesson" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModLessonGetLesson200ResponseLesson() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetLesson200ResponseLesson" /> class.
        /// </summary>
        /// <param name="activitylink">Id of the next activity to be linked once the lesson is completed (default to null).</param>
        /// <param name="allowofflineattempts">Whether to allow the lesson to be attempted offline in the mobile app (required) (default to null).</param>
        /// <param name="available">Available from (default to null).</param>
        /// <param name="bgcolor">Slideshow bgcolor (default to &quot;null&quot;).</param>
        /// <param name="completionendreached">Require end reached for completion? (default to null).</param>
        /// <param name="completiontimespent">Student must do this activity at least for (default to null).</param>
        /// <param name="conditions">Conditions to enable the lesson (default to &quot;null&quot;).</param>
        /// <param name="course">Foreign key reference to the course this lesson is part of. (required) (default to null).</param>
        /// <param name="coursemodule">Course module id. (required) (default to null).</param>
        /// <param name="custom">Custom scoring? (default to null).</param>
        /// <param name="deadline">Available until (default to null).</param>
        /// <param name="dependency">Dependent on (another lesson id) (default to null).</param>
        /// <param name="displayleft">Display left pages menu? (default to null).</param>
        /// <param name="displayleftif">Minimum grade to display menu (default to null).</param>
        /// <param name="feedback">Display default feedback (default to null).</param>
        /// <param name="grade">The total that the grade is scaled to be out of (default to null).</param>
        /// <param name="height">Slideshow height (default to null).</param>
        /// <param name="id">Standard Moodle primary key. (required) (default to null).</param>
        /// <param name="intro">Lesson introduction text. (default to &quot;null&quot;).</param>
        /// <param name="introfiles">introfiles.</param>
        /// <param name="introformat">intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 0).</param>
        /// <param name="lang">Forced activity language (required).</param>
        /// <param name="maxanswers">Maximum answers per page (default to null).</param>
        /// <param name="maxattempts">Maximum attempts (default to null).</param>
        /// <param name="maxpages">Number of pages to show (default to null).</param>
        /// <param name="mediaclose">Display a close button in the popup? (default to null).</param>
        /// <param name="mediafile">Local file path or full external URL (default to &quot;null&quot;).</param>
        /// <param name="mediafiles">mediafiles.</param>
        /// <param name="mediaheight">Popup for media file height (default to null).</param>
        /// <param name="mediawidth">Popup for media with (default to null).</param>
        /// <param name="minquestions">Minimum number of questions (default to null).</param>
        /// <param name="modattempts">Allow student review? (default to null).</param>
        /// <param name="name">Lesson name. (required) (default to &quot;null&quot;).</param>
        /// <param name="nextpagedefault">Action for a correct answer (default to null).</param>
        /// <param name="ongoing">Display ongoing score? (default to null).</param>
        /// <param name="password">Password (default to &quot;null&quot;).</param>
        /// <param name="practice">Practice lesson? (default to null).</param>
        /// <param name="progressbar">Display progress bar? (default to null).</param>
        /// <param name="retake">Re-takes allowed (default to null).</param>
        /// <param name="review">Provide option to try a question again (default to null).</param>
        /// <param name="slideshow">Display lesson as slideshow (default to null).</param>
        /// <param name="timelimit">Time limit (default to null).</param>
        /// <param name="timemodified">Last time settings were updated (default to null).</param>
        /// <param name="usemaxgrade">How to calculate the final grade (default to null).</param>
        /// <param name="usepassword">Password protected lesson? (default to null).</param>
        /// <param name="width">Slideshow width (default to null).</param>
        public ModLessonGetLesson200ResponseLesson(int activitylink = null, bool allowofflineattempts = null, int available = null, string bgcolor = @"null", int completionendreached = null, int completiontimespent = null, string conditions = @"null", int course = null, int coursemodule = null, bool custom = null, int deadline = null, int dependency = null, bool displayleft = null, int displayleftif = null, bool feedback = null, int grade = null, int height = null, int id = null, string intro = @"null", List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> introfiles = default(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>), int introformat = 0, string lang = default(string), int maxanswers = null, int maxattempts = null, int maxpages = null, int mediaclose = null, string mediafile = @"null", List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> mediafiles = default(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>), int mediaheight = null, int mediawidth = null, int minquestions = null, bool modattempts = null, string name = @"null", int nextpagedefault = null, bool ongoing = null, string password = @"null", bool practice = null, bool progressbar = null, bool retake = null, bool review = null, bool slideshow = null, int timelimit = null, int timemodified = null, int usemaxgrade = null, bool usepassword = null, int width = null)
        {
            this.Allowofflineattempts = allowofflineattempts;
            this.Course = course;
            this.Coursemodule = coursemodule;
            this.Id = id;
            // to ensure "lang" is required (not null)
            if (lang == null)
            {
                throw new ArgumentNullException("lang is a required property for ModLessonGetLesson200ResponseLesson and cannot be null");
            }
            this.Lang = lang;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ModLessonGetLesson200ResponseLesson and cannot be null");
            }
            this.Name = name;
            this.Activitylink = activitylink;
            this.Available = available;
            // use default value if no "bgcolor" provided
            this.Bgcolor = bgcolor ?? @"null";
            this.Completionendreached = completionendreached;
            this.Completiontimespent = completiontimespent;
            // use default value if no "conditions" provided
            this.Conditions = conditions ?? @"null";
            this.Custom = custom;
            this.Deadline = deadline;
            this.Dependency = dependency;
            this.Displayleft = displayleft;
            this.Displayleftif = displayleftif;
            this.Feedback = feedback;
            this.Grade = grade;
            this.Height = height;
            // use default value if no "intro" provided
            this.Intro = intro ?? @"null";
            this.Introfiles = introfiles;
            this.Introformat = introformat;
            this.Maxanswers = maxanswers;
            this.Maxattempts = maxattempts;
            this.Maxpages = maxpages;
            this.Mediaclose = mediaclose;
            // use default value if no "mediafile" provided
            this.Mediafile = mediafile ?? @"null";
            this.Mediafiles = mediafiles;
            this.Mediaheight = mediaheight;
            this.Mediawidth = mediawidth;
            this.Minquestions = minquestions;
            this.Modattempts = modattempts;
            this.Nextpagedefault = nextpagedefault;
            this.Ongoing = ongoing;
            // use default value if no "password" provided
            this.Password = password ?? @"null";
            this.Practice = practice;
            this.Progressbar = progressbar;
            this.Retake = retake;
            this.Review = review;
            this.Slideshow = slideshow;
            this.Timelimit = timelimit;
            this.Timemodified = timemodified;
            this.Usemaxgrade = usemaxgrade;
            this.Usepassword = usepassword;
            this.Width = width;
        }

        /// <summary>
        /// Id of the next activity to be linked once the lesson is completed
        /// </summary>
        /// <value>Id of the next activity to be linked once the lesson is completed</value>
        [DataMember(Name = "activitylink", EmitDefaultValue = false)]
        public int Activitylink { get; set; }

        /// <summary>
        /// Whether to allow the lesson to be attempted offline in the mobile app
        /// </summary>
        /// <value>Whether to allow the lesson to be attempted offline in the mobile app</value>
        [DataMember(Name = "allowofflineattempts", IsRequired = true, EmitDefaultValue = true)]
        public bool Allowofflineattempts { get; set; }

        /// <summary>
        /// Available from
        /// </summary>
        /// <value>Available from</value>
        [DataMember(Name = "available", EmitDefaultValue = false)]
        public int Available { get; set; }

        /// <summary>
        /// Slideshow bgcolor
        /// </summary>
        /// <value>Slideshow bgcolor</value>
        [DataMember(Name = "bgcolor", EmitDefaultValue = false)]
        public string Bgcolor { get; set; }

        /// <summary>
        /// Require end reached for completion?
        /// </summary>
        /// <value>Require end reached for completion?</value>
        [DataMember(Name = "completionendreached", EmitDefaultValue = false)]
        public int Completionendreached { get; set; }

        /// <summary>
        /// Student must do this activity at least for
        /// </summary>
        /// <value>Student must do this activity at least for</value>
        [DataMember(Name = "completiontimespent", EmitDefaultValue = false)]
        public int Completiontimespent { get; set; }

        /// <summary>
        /// Conditions to enable the lesson
        /// </summary>
        /// <value>Conditions to enable the lesson</value>
        [DataMember(Name = "conditions", EmitDefaultValue = false)]
        public string Conditions { get; set; }

        /// <summary>
        /// Foreign key reference to the course this lesson is part of.
        /// </summary>
        /// <value>Foreign key reference to the course this lesson is part of.</value>
        [DataMember(Name = "course", IsRequired = true, EmitDefaultValue = true)]
        public int Course { get; set; }

        /// <summary>
        /// Course module id.
        /// </summary>
        /// <value>Course module id.</value>
        [DataMember(Name = "coursemodule", IsRequired = true, EmitDefaultValue = true)]
        public int Coursemodule { get; set; }

        /// <summary>
        /// Custom scoring?
        /// </summary>
        /// <value>Custom scoring?</value>
        [DataMember(Name = "custom", EmitDefaultValue = true)]
        public bool Custom { get; set; }

        /// <summary>
        /// Available until
        /// </summary>
        /// <value>Available until</value>
        [DataMember(Name = "deadline", EmitDefaultValue = false)]
        public int Deadline { get; set; }

        /// <summary>
        /// Dependent on (another lesson id)
        /// </summary>
        /// <value>Dependent on (another lesson id)</value>
        [DataMember(Name = "dependency", EmitDefaultValue = false)]
        public int Dependency { get; set; }

        /// <summary>
        /// Display left pages menu?
        /// </summary>
        /// <value>Display left pages menu?</value>
        [DataMember(Name = "displayleft", EmitDefaultValue = true)]
        public bool Displayleft { get; set; }

        /// <summary>
        /// Minimum grade to display menu
        /// </summary>
        /// <value>Minimum grade to display menu</value>
        [DataMember(Name = "displayleftif", EmitDefaultValue = false)]
        public int Displayleftif { get; set; }

        /// <summary>
        /// Display default feedback
        /// </summary>
        /// <value>Display default feedback</value>
        [DataMember(Name = "feedback", EmitDefaultValue = true)]
        public bool Feedback { get; set; }

        /// <summary>
        /// The total that the grade is scaled to be out of
        /// </summary>
        /// <value>The total that the grade is scaled to be out of</value>
        [DataMember(Name = "grade", EmitDefaultValue = false)]
        public int Grade { get; set; }

        /// <summary>
        /// Slideshow height
        /// </summary>
        /// <value>Slideshow height</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Standard Moodle primary key.
        /// </summary>
        /// <value>Standard Moodle primary key.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Lesson introduction text.
        /// </summary>
        /// <value>Lesson introduction text.</value>
        [DataMember(Name = "intro", EmitDefaultValue = false)]
        public string Intro { get; set; }

        /// <summary>
        /// Gets or Sets Introfiles
        /// </summary>
        [DataMember(Name = "introfiles", EmitDefaultValue = false)]
        public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> Introfiles { get; set; }

        /// <summary>
        /// intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "introformat", EmitDefaultValue = false)]
        public int Introformat { get; set; }

        /// <summary>
        /// Forced activity language
        /// </summary>
        /// <value>Forced activity language</value>
        [DataMember(Name = "lang", IsRequired = true, EmitDefaultValue = true)]
        public string Lang { get; set; }

        /// <summary>
        /// Maximum answers per page
        /// </summary>
        /// <value>Maximum answers per page</value>
        [DataMember(Name = "maxanswers", EmitDefaultValue = false)]
        public int Maxanswers { get; set; }

        /// <summary>
        /// Maximum attempts
        /// </summary>
        /// <value>Maximum attempts</value>
        [DataMember(Name = "maxattempts", EmitDefaultValue = false)]
        public int Maxattempts { get; set; }

        /// <summary>
        /// Number of pages to show
        /// </summary>
        /// <value>Number of pages to show</value>
        [DataMember(Name = "maxpages", EmitDefaultValue = false)]
        public int Maxpages { get; set; }

        /// <summary>
        /// Display a close button in the popup?
        /// </summary>
        /// <value>Display a close button in the popup?</value>
        [DataMember(Name = "mediaclose", EmitDefaultValue = false)]
        public int Mediaclose { get; set; }

        /// <summary>
        /// Local file path or full external URL
        /// </summary>
        /// <value>Local file path or full external URL</value>
        [DataMember(Name = "mediafile", EmitDefaultValue = false)]
        public string Mediafile { get; set; }

        /// <summary>
        /// Gets or Sets Mediafiles
        /// </summary>
        [DataMember(Name = "mediafiles", EmitDefaultValue = false)]
        public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> Mediafiles { get; set; }

        /// <summary>
        /// Popup for media file height
        /// </summary>
        /// <value>Popup for media file height</value>
        [DataMember(Name = "mediaheight", EmitDefaultValue = false)]
        public int Mediaheight { get; set; }

        /// <summary>
        /// Popup for media with
        /// </summary>
        /// <value>Popup for media with</value>
        [DataMember(Name = "mediawidth", EmitDefaultValue = false)]
        public int Mediawidth { get; set; }

        /// <summary>
        /// Minimum number of questions
        /// </summary>
        /// <value>Minimum number of questions</value>
        [DataMember(Name = "minquestions", EmitDefaultValue = false)]
        public int Minquestions { get; set; }

        /// <summary>
        /// Allow student review?
        /// </summary>
        /// <value>Allow student review?</value>
        [DataMember(Name = "modattempts", EmitDefaultValue = true)]
        public bool Modattempts { get; set; }

        /// <summary>
        /// Lesson name.
        /// </summary>
        /// <value>Lesson name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Action for a correct answer
        /// </summary>
        /// <value>Action for a correct answer</value>
        [DataMember(Name = "nextpagedefault", EmitDefaultValue = false)]
        public int Nextpagedefault { get; set; }

        /// <summary>
        /// Display ongoing score?
        /// </summary>
        /// <value>Display ongoing score?</value>
        [DataMember(Name = "ongoing", EmitDefaultValue = true)]
        public bool Ongoing { get; set; }

        /// <summary>
        /// Password
        /// </summary>
        /// <value>Password</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Practice lesson?
        /// </summary>
        /// <value>Practice lesson?</value>
        [DataMember(Name = "practice", EmitDefaultValue = true)]
        public bool Practice { get; set; }

        /// <summary>
        /// Display progress bar?
        /// </summary>
        /// <value>Display progress bar?</value>
        [DataMember(Name = "progressbar", EmitDefaultValue = true)]
        public bool Progressbar { get; set; }

        /// <summary>
        /// Re-takes allowed
        /// </summary>
        /// <value>Re-takes allowed</value>
        [DataMember(Name = "retake", EmitDefaultValue = true)]
        public bool Retake { get; set; }

        /// <summary>
        /// Provide option to try a question again
        /// </summary>
        /// <value>Provide option to try a question again</value>
        [DataMember(Name = "review", EmitDefaultValue = true)]
        public bool Review { get; set; }

        /// <summary>
        /// Display lesson as slideshow
        /// </summary>
        /// <value>Display lesson as slideshow</value>
        [DataMember(Name = "slideshow", EmitDefaultValue = true)]
        public bool Slideshow { get; set; }

        /// <summary>
        /// Time limit
        /// </summary>
        /// <value>Time limit</value>
        [DataMember(Name = "timelimit", EmitDefaultValue = false)]
        public int Timelimit { get; set; }

        /// <summary>
        /// Last time settings were updated
        /// </summary>
        /// <value>Last time settings were updated</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// How to calculate the final grade
        /// </summary>
        /// <value>How to calculate the final grade</value>
        [DataMember(Name = "usemaxgrade", EmitDefaultValue = false)]
        public int Usemaxgrade { get; set; }

        /// <summary>
        /// Password protected lesson?
        /// </summary>
        /// <value>Password protected lesson?</value>
        [DataMember(Name = "usepassword", EmitDefaultValue = true)]
        public bool Usepassword { get; set; }

        /// <summary>
        /// Slideshow width
        /// </summary>
        /// <value>Slideshow width</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModLessonGetLesson200ResponseLesson {\n");
            sb.Append("  Activitylink: ").Append(Activitylink).Append("\n");
            sb.Append("  Allowofflineattempts: ").Append(Allowofflineattempts).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Bgcolor: ").Append(Bgcolor).Append("\n");
            sb.Append("  Completionendreached: ").Append(Completionendreached).Append("\n");
            sb.Append("  Completiontimespent: ").Append(Completiontimespent).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Coursemodule: ").Append(Coursemodule).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  Deadline: ").Append(Deadline).Append("\n");
            sb.Append("  Dependency: ").Append(Dependency).Append("\n");
            sb.Append("  Displayleft: ").Append(Displayleft).Append("\n");
            sb.Append("  Displayleftif: ").Append(Displayleftif).Append("\n");
            sb.Append("  Feedback: ").Append(Feedback).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Intro: ").Append(Intro).Append("\n");
            sb.Append("  Introfiles: ").Append(Introfiles).Append("\n");
            sb.Append("  Introformat: ").Append(Introformat).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Maxanswers: ").Append(Maxanswers).Append("\n");
            sb.Append("  Maxattempts: ").Append(Maxattempts).Append("\n");
            sb.Append("  Maxpages: ").Append(Maxpages).Append("\n");
            sb.Append("  Mediaclose: ").Append(Mediaclose).Append("\n");
            sb.Append("  Mediafile: ").Append(Mediafile).Append("\n");
            sb.Append("  Mediafiles: ").Append(Mediafiles).Append("\n");
            sb.Append("  Mediaheight: ").Append(Mediaheight).Append("\n");
            sb.Append("  Mediawidth: ").Append(Mediawidth).Append("\n");
            sb.Append("  Minquestions: ").Append(Minquestions).Append("\n");
            sb.Append("  Modattempts: ").Append(Modattempts).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nextpagedefault: ").Append(Nextpagedefault).Append("\n");
            sb.Append("  Ongoing: ").Append(Ongoing).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Practice: ").Append(Practice).Append("\n");
            sb.Append("  Progressbar: ").Append(Progressbar).Append("\n");
            sb.Append("  Retake: ").Append(Retake).Append("\n");
            sb.Append("  Review: ").Append(Review).Append("\n");
            sb.Append("  Slideshow: ").Append(Slideshow).Append("\n");
            sb.Append("  Timelimit: ").Append(Timelimit).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Usemaxgrade: ").Append(Usemaxgrade).Append("\n");
            sb.Append("  Usepassword: ").Append(Usepassword).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
