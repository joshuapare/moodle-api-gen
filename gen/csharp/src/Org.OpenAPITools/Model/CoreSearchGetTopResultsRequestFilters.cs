/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreSearchGetTopResultsRequestFilters
    /// </summary>
    [DataContract(Name = "core_search_get_top_results_request_filters")]
    public partial class CoreSearchGetTopResultsRequestFilters : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreSearchGetTopResultsRequestFilters" /> class.
        /// </summary>
        /// <param name="areaids">areaids.</param>
        /// <param name="cat">category to filter areas (default to &quot;&quot;).</param>
        /// <param name="contextids">contextids.</param>
        /// <param name="courseids">courseids.</param>
        /// <param name="groupids">groupids.</param>
        /// <param name="mycoursesonly">only results from my courses (default to false).</param>
        /// <param name="order">how to order (default to &quot;&quot;).</param>
        /// <param name="timeend">docs modified before this date (default to 0).</param>
        /// <param name="timestart">docs modified after this date (default to 0).</param>
        /// <param name="title">result title.</param>
        /// <param name="userids">userids.</param>
        public CoreSearchGetTopResultsRequestFilters(List<Object> areaids = default(List<Object>), string cat = @"", List<Object> contextids = default(List<Object>), List<Object> courseids = default(List<Object>), List<Object> groupids = default(List<Object>), bool mycoursesonly = false, string order = @"", int timeend = 0, int timestart = 0, string title = default(string), List<Object> userids = default(List<Object>))
        {
            this.Areaids = areaids;
            // use default value if no "cat" provided
            this.Cat = cat ?? @"";
            this.Contextids = contextids;
            this.Courseids = courseids;
            this.Groupids = groupids;
            this.Mycoursesonly = mycoursesonly;
            // use default value if no "order" provided
            this.Order = order ?? @"";
            this.Timeend = timeend;
            this.Timestart = timestart;
            this.Title = title;
            this.Userids = userids;
        }

        /// <summary>
        /// Gets or Sets Areaids
        /// </summary>
        [DataMember(Name = "areaids", EmitDefaultValue = false)]
        public List<Object> Areaids { get; set; }

        /// <summary>
        /// category to filter areas
        /// </summary>
        /// <value>category to filter areas</value>
        [DataMember(Name = "cat", EmitDefaultValue = false)]
        public string Cat { get; set; }

        /// <summary>
        /// Gets or Sets Contextids
        /// </summary>
        [DataMember(Name = "contextids", EmitDefaultValue = false)]
        public List<Object> Contextids { get; set; }

        /// <summary>
        /// Gets or Sets Courseids
        /// </summary>
        [DataMember(Name = "courseids", EmitDefaultValue = false)]
        public List<Object> Courseids { get; set; }

        /// <summary>
        /// Gets or Sets Groupids
        /// </summary>
        [DataMember(Name = "groupids", EmitDefaultValue = false)]
        public List<Object> Groupids { get; set; }

        /// <summary>
        /// only results from my courses
        /// </summary>
        /// <value>only results from my courses</value>
        [DataMember(Name = "mycoursesonly", EmitDefaultValue = true)]
        public bool Mycoursesonly { get; set; }

        /// <summary>
        /// how to order
        /// </summary>
        /// <value>how to order</value>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public string Order { get; set; }

        /// <summary>
        /// docs modified before this date
        /// </summary>
        /// <value>docs modified before this date</value>
        [DataMember(Name = "timeend", EmitDefaultValue = false)]
        public int Timeend { get; set; }

        /// <summary>
        /// docs modified after this date
        /// </summary>
        /// <value>docs modified after this date</value>
        [DataMember(Name = "timestart", EmitDefaultValue = false)]
        public int Timestart { get; set; }

        /// <summary>
        /// result title
        /// </summary>
        /// <value>result title</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Userids
        /// </summary>
        [DataMember(Name = "userids", EmitDefaultValue = false)]
        public List<Object> Userids { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreSearchGetTopResultsRequestFilters {\n");
            sb.Append("  Areaids: ").Append(Areaids).Append("\n");
            sb.Append("  Cat: ").Append(Cat).Append("\n");
            sb.Append("  Contextids: ").Append(Contextids).Append("\n");
            sb.Append("  Courseids: ").Append(Courseids).Append("\n");
            sb.Append("  Groupids: ").Append(Groupids).Append("\n");
            sb.Append("  Mycoursesonly: ").Append(Mycoursesonly).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Timeend: ").Append(Timeend).Append("\n");
            sb.Append("  Timestart: ").Append(Timestart).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Userids: ").Append(Userids).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
