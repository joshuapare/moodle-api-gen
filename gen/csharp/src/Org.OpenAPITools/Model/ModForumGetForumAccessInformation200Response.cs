/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModForumGetForumAccessInformation200Response
    /// </summary>
    [DataContract(Name = "mod_forum_get_forum_access_information_200_response")]
    public partial class ModForumGetForumAccessInformation200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumGetForumAccessInformation200Response" /> class.
        /// </summary>
        /// <param name="canaddinstance">Whether the user has the capability mod/forum:addinstance allowed. (default to null).</param>
        /// <param name="canaddnews">Whether the user has the capability mod/forum:addnews allowed. (default to null).</param>
        /// <param name="canaddquestion">Whether the user has the capability mod/forum:addquestion allowed. (default to null).</param>
        /// <param name="canallowforcesubscribe">Whether the user has the capability mod/forum:allowforcesubscribe allowed. (default to null).</param>
        /// <param name="cancanmailnow">Whether the user has the capability mod/forum:canmailnow allowed. (default to null).</param>
        /// <param name="cancanoverridecutoff">Whether the user has the capability mod/forum:canoverridecutoff allowed. (default to null).</param>
        /// <param name="cancanoverridediscussionlock">Whether the user has the capability mod/forum:canoverridediscussionlock allowed. (default to null).</param>
        /// <param name="cancanposttomygroups">Whether the user has the capability mod/forum:canposttomygroups allowed. (default to null).</param>
        /// <param name="cancantogglefavourite">Whether the user has the capability mod/forum:cantogglefavourite allowed. (default to null).</param>
        /// <param name="cancreateattachment">Whether the user has the capability mod/forum:createattachment allowed. (default to null).</param>
        /// <param name="candeleteanypost">Whether the user has the capability mod/forum:deleteanypost allowed. (default to null).</param>
        /// <param name="candeleteownpost">Whether the user has the capability mod/forum:deleteownpost allowed. (default to null).</param>
        /// <param name="caneditanypost">Whether the user has the capability mod/forum:editanypost allowed. (default to null).</param>
        /// <param name="canexportdiscussion">Whether the user has the capability mod/forum:exportdiscussion allowed. (default to null).</param>
        /// <param name="canexportforum">Whether the user has the capability mod/forum:exportforum allowed. (default to null).</param>
        /// <param name="canexportownpost">Whether the user has the capability mod/forum:exportownpost allowed. (default to null).</param>
        /// <param name="canexportpost">Whether the user has the capability mod/forum:exportpost allowed. (default to null).</param>
        /// <param name="cangrade">Whether the user has the capability mod/forum:grade allowed. (default to null).</param>
        /// <param name="canmanagesubscriptions">Whether the user has the capability mod/forum:managesubscriptions allowed. (default to null).</param>
        /// <param name="canmovediscussions">Whether the user has the capability mod/forum:movediscussions allowed. (default to null).</param>
        /// <param name="canpindiscussions">Whether the user has the capability mod/forum:pindiscussions allowed. (default to null).</param>
        /// <param name="canpostprivatereply">Whether the user has the capability mod/forum:postprivatereply allowed. (default to null).</param>
        /// <param name="canpostwithoutthrottling">Whether the user has the capability mod/forum:postwithoutthrottling allowed. (default to null).</param>
        /// <param name="canrate">Whether the user has the capability mod/forum:rate allowed. (default to null).</param>
        /// <param name="canreadprivatereplies">Whether the user has the capability mod/forum:readprivatereplies allowed. (default to null).</param>
        /// <param name="canreplynews">Whether the user has the capability mod/forum:replynews allowed. (default to null).</param>
        /// <param name="canreplypost">Whether the user has the capability mod/forum:replypost allowed. (default to null).</param>
        /// <param name="cansplitdiscussions">Whether the user has the capability mod/forum:splitdiscussions allowed. (default to null).</param>
        /// <param name="canstartdiscussion">Whether the user has the capability mod/forum:startdiscussion allowed. (default to null).</param>
        /// <param name="canviewallratings">Whether the user has the capability mod/forum:viewallratings allowed. (default to null).</param>
        /// <param name="canviewanyrating">Whether the user has the capability mod/forum:viewanyrating allowed. (default to null).</param>
        /// <param name="canviewdiscussion">Whether the user has the capability mod/forum:viewdiscussion allowed. (default to null).</param>
        /// <param name="canviewhiddentimedposts">Whether the user has the capability mod/forum:viewhiddentimedposts allowed. (default to null).</param>
        /// <param name="canviewqandawithoutposting">Whether the user has the capability mod/forum:viewqandawithoutposting allowed. (default to null).</param>
        /// <param name="canviewrating">Whether the user has the capability mod/forum:viewrating allowed. (default to null).</param>
        /// <param name="canviewsubscribers">Whether the user has the capability mod/forum:viewsubscribers allowed. (default to null).</param>
        /// <param name="warnings">warnings.</param>
        public ModForumGetForumAccessInformation200Response(bool canaddinstance = null, bool canaddnews = null, bool canaddquestion = null, bool canallowforcesubscribe = null, bool cancanmailnow = null, bool cancanoverridecutoff = null, bool cancanoverridediscussionlock = null, bool cancanposttomygroups = null, bool cancantogglefavourite = null, bool cancreateattachment = null, bool candeleteanypost = null, bool candeleteownpost = null, bool caneditanypost = null, bool canexportdiscussion = null, bool canexportforum = null, bool canexportownpost = null, bool canexportpost = null, bool cangrade = null, bool canmanagesubscriptions = null, bool canmovediscussions = null, bool canpindiscussions = null, bool canpostprivatereply = null, bool canpostwithoutthrottling = null, bool canrate = null, bool canreadprivatereplies = null, bool canreplynews = null, bool canreplypost = null, bool cansplitdiscussions = null, bool canstartdiscussion = null, bool canviewallratings = null, bool canviewanyrating = null, bool canviewdiscussion = null, bool canviewhiddentimedposts = null, bool canviewqandawithoutposting = null, bool canviewrating = null, bool canviewsubscribers = null, List<AuthEmailSignupUser200ResponseWarningsInner> warnings = default(List<AuthEmailSignupUser200ResponseWarningsInner>))
        {
            this.Canaddinstance = canaddinstance;
            this.Canaddnews = canaddnews;
            this.Canaddquestion = canaddquestion;
            this.Canallowforcesubscribe = canallowforcesubscribe;
            this.Cancanmailnow = cancanmailnow;
            this.Cancanoverridecutoff = cancanoverridecutoff;
            this.Cancanoverridediscussionlock = cancanoverridediscussionlock;
            this.Cancanposttomygroups = cancanposttomygroups;
            this.Cancantogglefavourite = cancantogglefavourite;
            this.Cancreateattachment = cancreateattachment;
            this.Candeleteanypost = candeleteanypost;
            this.Candeleteownpost = candeleteownpost;
            this.Caneditanypost = caneditanypost;
            this.Canexportdiscussion = canexportdiscussion;
            this.Canexportforum = canexportforum;
            this.Canexportownpost = canexportownpost;
            this.Canexportpost = canexportpost;
            this.Cangrade = cangrade;
            this.Canmanagesubscriptions = canmanagesubscriptions;
            this.Canmovediscussions = canmovediscussions;
            this.Canpindiscussions = canpindiscussions;
            this.Canpostprivatereply = canpostprivatereply;
            this.Canpostwithoutthrottling = canpostwithoutthrottling;
            this.Canrate = canrate;
            this.Canreadprivatereplies = canreadprivatereplies;
            this.Canreplynews = canreplynews;
            this.Canreplypost = canreplypost;
            this.Cansplitdiscussions = cansplitdiscussions;
            this.Canstartdiscussion = canstartdiscussion;
            this.Canviewallratings = canviewallratings;
            this.Canviewanyrating = canviewanyrating;
            this.Canviewdiscussion = canviewdiscussion;
            this.Canviewhiddentimedposts = canviewhiddentimedposts;
            this.Canviewqandawithoutposting = canviewqandawithoutposting;
            this.Canviewrating = canviewrating;
            this.Canviewsubscribers = canviewsubscribers;
            this.Warnings = warnings;
        }

        /// <summary>
        /// Whether the user has the capability mod/forum:addinstance allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:addinstance allowed.</value>
        [DataMember(Name = "canaddinstance", EmitDefaultValue = true)]
        public bool Canaddinstance { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:addnews allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:addnews allowed.</value>
        [DataMember(Name = "canaddnews", EmitDefaultValue = true)]
        public bool Canaddnews { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:addquestion allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:addquestion allowed.</value>
        [DataMember(Name = "canaddquestion", EmitDefaultValue = true)]
        public bool Canaddquestion { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:allowforcesubscribe allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:allowforcesubscribe allowed.</value>
        [DataMember(Name = "canallowforcesubscribe", EmitDefaultValue = true)]
        public bool Canallowforcesubscribe { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:canmailnow allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:canmailnow allowed.</value>
        [DataMember(Name = "cancanmailnow", EmitDefaultValue = true)]
        public bool Cancanmailnow { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:canoverridecutoff allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:canoverridecutoff allowed.</value>
        [DataMember(Name = "cancanoverridecutoff", EmitDefaultValue = true)]
        public bool Cancanoverridecutoff { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:canoverridediscussionlock allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:canoverridediscussionlock allowed.</value>
        [DataMember(Name = "cancanoverridediscussionlock", EmitDefaultValue = true)]
        public bool Cancanoverridediscussionlock { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:canposttomygroups allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:canposttomygroups allowed.</value>
        [DataMember(Name = "cancanposttomygroups", EmitDefaultValue = true)]
        public bool Cancanposttomygroups { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:cantogglefavourite allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:cantogglefavourite allowed.</value>
        [DataMember(Name = "cancantogglefavourite", EmitDefaultValue = true)]
        public bool Cancantogglefavourite { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:createattachment allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:createattachment allowed.</value>
        [DataMember(Name = "cancreateattachment", EmitDefaultValue = true)]
        public bool Cancreateattachment { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:deleteanypost allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:deleteanypost allowed.</value>
        [DataMember(Name = "candeleteanypost", EmitDefaultValue = true)]
        public bool Candeleteanypost { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:deleteownpost allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:deleteownpost allowed.</value>
        [DataMember(Name = "candeleteownpost", EmitDefaultValue = true)]
        public bool Candeleteownpost { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:editanypost allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:editanypost allowed.</value>
        [DataMember(Name = "caneditanypost", EmitDefaultValue = true)]
        public bool Caneditanypost { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:exportdiscussion allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:exportdiscussion allowed.</value>
        [DataMember(Name = "canexportdiscussion", EmitDefaultValue = true)]
        public bool Canexportdiscussion { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:exportforum allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:exportforum allowed.</value>
        [DataMember(Name = "canexportforum", EmitDefaultValue = true)]
        public bool Canexportforum { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:exportownpost allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:exportownpost allowed.</value>
        [DataMember(Name = "canexportownpost", EmitDefaultValue = true)]
        public bool Canexportownpost { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:exportpost allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:exportpost allowed.</value>
        [DataMember(Name = "canexportpost", EmitDefaultValue = true)]
        public bool Canexportpost { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:grade allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:grade allowed.</value>
        [DataMember(Name = "cangrade", EmitDefaultValue = true)]
        public bool Cangrade { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:managesubscriptions allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:managesubscriptions allowed.</value>
        [DataMember(Name = "canmanagesubscriptions", EmitDefaultValue = true)]
        public bool Canmanagesubscriptions { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:movediscussions allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:movediscussions allowed.</value>
        [DataMember(Name = "canmovediscussions", EmitDefaultValue = true)]
        public bool Canmovediscussions { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:pindiscussions allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:pindiscussions allowed.</value>
        [DataMember(Name = "canpindiscussions", EmitDefaultValue = true)]
        public bool Canpindiscussions { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:postprivatereply allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:postprivatereply allowed.</value>
        [DataMember(Name = "canpostprivatereply", EmitDefaultValue = true)]
        public bool Canpostprivatereply { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:postwithoutthrottling allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:postwithoutthrottling allowed.</value>
        [DataMember(Name = "canpostwithoutthrottling", EmitDefaultValue = true)]
        public bool Canpostwithoutthrottling { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:rate allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:rate allowed.</value>
        [DataMember(Name = "canrate", EmitDefaultValue = true)]
        public bool Canrate { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:readprivatereplies allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:readprivatereplies allowed.</value>
        [DataMember(Name = "canreadprivatereplies", EmitDefaultValue = true)]
        public bool Canreadprivatereplies { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:replynews allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:replynews allowed.</value>
        [DataMember(Name = "canreplynews", EmitDefaultValue = true)]
        public bool Canreplynews { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:replypost allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:replypost allowed.</value>
        [DataMember(Name = "canreplypost", EmitDefaultValue = true)]
        public bool Canreplypost { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:splitdiscussions allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:splitdiscussions allowed.</value>
        [DataMember(Name = "cansplitdiscussions", EmitDefaultValue = true)]
        public bool Cansplitdiscussions { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:startdiscussion allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:startdiscussion allowed.</value>
        [DataMember(Name = "canstartdiscussion", EmitDefaultValue = true)]
        public bool Canstartdiscussion { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:viewallratings allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:viewallratings allowed.</value>
        [DataMember(Name = "canviewallratings", EmitDefaultValue = true)]
        public bool Canviewallratings { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:viewanyrating allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:viewanyrating allowed.</value>
        [DataMember(Name = "canviewanyrating", EmitDefaultValue = true)]
        public bool Canviewanyrating { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:viewdiscussion allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:viewdiscussion allowed.</value>
        [DataMember(Name = "canviewdiscussion", EmitDefaultValue = true)]
        public bool Canviewdiscussion { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:viewhiddentimedposts allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:viewhiddentimedposts allowed.</value>
        [DataMember(Name = "canviewhiddentimedposts", EmitDefaultValue = true)]
        public bool Canviewhiddentimedposts { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:viewqandawithoutposting allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:viewqandawithoutposting allowed.</value>
        [DataMember(Name = "canviewqandawithoutposting", EmitDefaultValue = true)]
        public bool Canviewqandawithoutposting { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:viewrating allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:viewrating allowed.</value>
        [DataMember(Name = "canviewrating", EmitDefaultValue = true)]
        public bool Canviewrating { get; set; }

        /// <summary>
        /// Whether the user has the capability mod/forum:viewsubscribers allowed.
        /// </summary>
        /// <value>Whether the user has the capability mod/forum:viewsubscribers allowed.</value>
        [DataMember(Name = "canviewsubscribers", EmitDefaultValue = true)]
        public bool Canviewsubscribers { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<AuthEmailSignupUser200ResponseWarningsInner> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModForumGetForumAccessInformation200Response {\n");
            sb.Append("  Canaddinstance: ").Append(Canaddinstance).Append("\n");
            sb.Append("  Canaddnews: ").Append(Canaddnews).Append("\n");
            sb.Append("  Canaddquestion: ").Append(Canaddquestion).Append("\n");
            sb.Append("  Canallowforcesubscribe: ").Append(Canallowforcesubscribe).Append("\n");
            sb.Append("  Cancanmailnow: ").Append(Cancanmailnow).Append("\n");
            sb.Append("  Cancanoverridecutoff: ").Append(Cancanoverridecutoff).Append("\n");
            sb.Append("  Cancanoverridediscussionlock: ").Append(Cancanoverridediscussionlock).Append("\n");
            sb.Append("  Cancanposttomygroups: ").Append(Cancanposttomygroups).Append("\n");
            sb.Append("  Cancantogglefavourite: ").Append(Cancantogglefavourite).Append("\n");
            sb.Append("  Cancreateattachment: ").Append(Cancreateattachment).Append("\n");
            sb.Append("  Candeleteanypost: ").Append(Candeleteanypost).Append("\n");
            sb.Append("  Candeleteownpost: ").Append(Candeleteownpost).Append("\n");
            sb.Append("  Caneditanypost: ").Append(Caneditanypost).Append("\n");
            sb.Append("  Canexportdiscussion: ").Append(Canexportdiscussion).Append("\n");
            sb.Append("  Canexportforum: ").Append(Canexportforum).Append("\n");
            sb.Append("  Canexportownpost: ").Append(Canexportownpost).Append("\n");
            sb.Append("  Canexportpost: ").Append(Canexportpost).Append("\n");
            sb.Append("  Cangrade: ").Append(Cangrade).Append("\n");
            sb.Append("  Canmanagesubscriptions: ").Append(Canmanagesubscriptions).Append("\n");
            sb.Append("  Canmovediscussions: ").Append(Canmovediscussions).Append("\n");
            sb.Append("  Canpindiscussions: ").Append(Canpindiscussions).Append("\n");
            sb.Append("  Canpostprivatereply: ").Append(Canpostprivatereply).Append("\n");
            sb.Append("  Canpostwithoutthrottling: ").Append(Canpostwithoutthrottling).Append("\n");
            sb.Append("  Canrate: ").Append(Canrate).Append("\n");
            sb.Append("  Canreadprivatereplies: ").Append(Canreadprivatereplies).Append("\n");
            sb.Append("  Canreplynews: ").Append(Canreplynews).Append("\n");
            sb.Append("  Canreplypost: ").Append(Canreplypost).Append("\n");
            sb.Append("  Cansplitdiscussions: ").Append(Cansplitdiscussions).Append("\n");
            sb.Append("  Canstartdiscussion: ").Append(Canstartdiscussion).Append("\n");
            sb.Append("  Canviewallratings: ").Append(Canviewallratings).Append("\n");
            sb.Append("  Canviewanyrating: ").Append(Canviewanyrating).Append("\n");
            sb.Append("  Canviewdiscussion: ").Append(Canviewdiscussion).Append("\n");
            sb.Append("  Canviewhiddentimedposts: ").Append(Canviewhiddentimedposts).Append("\n");
            sb.Append("  Canviewqandawithoutposting: ").Append(Canviewqandawithoutposting).Append("\n");
            sb.Append("  Canviewrating: ").Append(Canviewrating).Append("\n");
            sb.Append("  Canviewsubscribers: ").Append(Canviewsubscribers).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
