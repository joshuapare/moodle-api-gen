/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// event
    /// </summary>
    [DataContract(Name = "core_calendar_create_calendar_events_request_events_inner")]
    public partial class CoreCalendarCreateCalendarEventsRequestEventsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCalendarCreateCalendarEventsRequestEventsInner" /> class.
        /// </summary>
        /// <param name="courseid">course id (default to 0).</param>
        /// <param name="description">Description (default to &quot;null&quot;).</param>
        /// <param name="eventtype">Event type (default to &quot;user&quot;).</param>
        /// <param name="format">description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 1).</param>
        /// <param name="groupid">group id (default to 0).</param>
        /// <param name="name">event name (default to &quot;&quot;).</param>
        /// <param name="repeats">number of repeats (default to 0).</param>
        /// <param name="sequence">sequence (default to 1).</param>
        /// <param name="timeduration">time duration (default to 0).</param>
        /// <param name="timestart">timestart (default to 1716010508).</param>
        /// <param name="visible">visible (default to 1).</param>
        public CoreCalendarCreateCalendarEventsRequestEventsInner(int courseid = 0, string description = @"null", string eventtype = @"user", int format = 1, int groupid = 0, string name = @"", int repeats = 0, int sequence = 1, int timeduration = 0, int timestart = 1716010508, int visible = 1)
        {
            this.Courseid = courseid;
            // use default value if no "description" provided
            this.Description = description ?? @"null";
            // use default value if no "eventtype" provided
            this.Eventtype = eventtype ?? @"user";
            this.Format = format;
            this.Groupid = groupid;
            // use default value if no "name" provided
            this.Name = name ?? @"";
            this.Repeats = repeats;
            this.Sequence = sequence;
            this.Timeduration = timeduration;
            this.Timestart = timestart;
            this.Visible = visible;
        }

        /// <summary>
        /// course id
        /// </summary>
        /// <value>course id</value>
        [DataMember(Name = "courseid", EmitDefaultValue = false)]
        public int Courseid { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Event type
        /// </summary>
        /// <value>Event type</value>
        [DataMember(Name = "eventtype", EmitDefaultValue = false)]
        public string Eventtype { get; set; }

        /// <summary>
        /// description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public int Format { get; set; }

        /// <summary>
        /// group id
        /// </summary>
        /// <value>group id</value>
        [DataMember(Name = "groupid", EmitDefaultValue = false)]
        public int Groupid { get; set; }

        /// <summary>
        /// event name
        /// </summary>
        /// <value>event name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// number of repeats
        /// </summary>
        /// <value>number of repeats</value>
        [DataMember(Name = "repeats", EmitDefaultValue = false)]
        public int Repeats { get; set; }

        /// <summary>
        /// sequence
        /// </summary>
        /// <value>sequence</value>
        [DataMember(Name = "sequence", EmitDefaultValue = false)]
        public int Sequence { get; set; }

        /// <summary>
        /// time duration
        /// </summary>
        /// <value>time duration</value>
        [DataMember(Name = "timeduration", EmitDefaultValue = false)]
        public int Timeduration { get; set; }

        /// <summary>
        /// timestart
        /// </summary>
        /// <value>timestart</value>
        [DataMember(Name = "timestart", EmitDefaultValue = false)]
        public int Timestart { get; set; }

        /// <summary>
        /// visible
        /// </summary>
        /// <value>visible</value>
        [DataMember(Name = "visible", EmitDefaultValue = false)]
        public int Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCalendarCreateCalendarEventsRequestEventsInner {\n");
            sb.Append("  Courseid: ").Append(Courseid).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Eventtype: ").Append(Eventtype).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Groupid: ").Append(Groupid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Repeats: ").Append(Repeats).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Timeduration: ").Append(Timeduration).Append("\n");
            sb.Append("  Timestart: ").Append(Timestart).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
