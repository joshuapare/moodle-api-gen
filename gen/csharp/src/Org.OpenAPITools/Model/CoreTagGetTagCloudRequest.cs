/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreTagGetTagCloudRequest
    /// </summary>
    [DataContract(Name = "core_tag_get_tag_cloud_request")]
    public partial class CoreTagGetTagCloudRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreTagGetTagCloudRequest" /> class.
        /// </summary>
        /// <param name="ctx">Only retrieve tag instances in this context. (default to 0).</param>
        /// <param name="fromctx">Context id where this tag cloud is displayed. (default to 0).</param>
        /// <param name="isstandard">Whether to return only standard tags. (default to false).</param>
        /// <param name="limit">Maximum number of tags to retrieve. (default to 150).</param>
        /// <param name="rec">Retrieve tag instances in the $ctx context and it&#39;s children. (default to 1).</param>
        /// <param name="search">Search string. (default to &quot;&quot;).</param>
        /// <param name="sort">Sort order for display                     (id, name, rawname, count, flag, isstandard, tagcollid). (default to &quot;name&quot;).</param>
        /// <param name="tagcollid">Tag collection id. (default to 0).</param>
        public CoreTagGetTagCloudRequest(int ctx = 0, int fromctx = 0, bool isstandard = false, int limit = 150, int rec = 1, string search = @"", string sort = @"name", int tagcollid = 0)
        {
            this.Ctx = ctx;
            this.Fromctx = fromctx;
            this.Isstandard = isstandard;
            this.Limit = limit;
            this.Rec = rec;
            // use default value if no "search" provided
            this.Search = search ?? @"";
            // use default value if no "sort" provided
            this.Sort = sort ?? @"name";
            this.Tagcollid = tagcollid;
        }

        /// <summary>
        /// Only retrieve tag instances in this context.
        /// </summary>
        /// <value>Only retrieve tag instances in this context.</value>
        [DataMember(Name = "ctx", EmitDefaultValue = false)]
        public int Ctx { get; set; }

        /// <summary>
        /// Context id where this tag cloud is displayed.
        /// </summary>
        /// <value>Context id where this tag cloud is displayed.</value>
        [DataMember(Name = "fromctx", EmitDefaultValue = false)]
        public int Fromctx { get; set; }

        /// <summary>
        /// Whether to return only standard tags.
        /// </summary>
        /// <value>Whether to return only standard tags.</value>
        [DataMember(Name = "isstandard", EmitDefaultValue = true)]
        public bool Isstandard { get; set; }

        /// <summary>
        /// Maximum number of tags to retrieve.
        /// </summary>
        /// <value>Maximum number of tags to retrieve.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Retrieve tag instances in the $ctx context and it&#39;s children.
        /// </summary>
        /// <value>Retrieve tag instances in the $ctx context and it&#39;s children.</value>
        [DataMember(Name = "rec", EmitDefaultValue = false)]
        public int Rec { get; set; }

        /// <summary>
        /// Search string.
        /// </summary>
        /// <value>Search string.</value>
        [DataMember(Name = "search", EmitDefaultValue = false)]
        public string Search { get; set; }

        /// <summary>
        /// Sort order for display                     (id, name, rawname, count, flag, isstandard, tagcollid).
        /// </summary>
        /// <value>Sort order for display                     (id, name, rawname, count, flag, isstandard, tagcollid).</value>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public string Sort { get; set; }

        /// <summary>
        /// Tag collection id.
        /// </summary>
        /// <value>Tag collection id.</value>
        [DataMember(Name = "tagcollid", EmitDefaultValue = false)]
        public int Tagcollid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreTagGetTagCloudRequest {\n");
            sb.Append("  Ctx: ").Append(Ctx).Append("\n");
            sb.Append("  Fromctx: ").Append(Fromctx).Append("\n");
            sb.Append("  Isstandard: ").Append(Isstandard).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Rec: ").Append(Rec).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Tagcollid: ").Append(Tagcollid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
