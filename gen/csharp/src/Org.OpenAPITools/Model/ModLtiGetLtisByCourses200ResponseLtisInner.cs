/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Tool
    /// </summary>
    [DataContract(Name = "mod_lti_get_ltis_by_courses_200_response_ltis_inner")]
    public partial class ModLtiGetLtisByCourses200ResponseLtisInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLtiGetLtisByCourses200ResponseLtisInner" /> class.
        /// </summary>
        /// <param name="course">Course id.</param>
        /// <param name="coursemodule">Course module id.</param>
        /// <param name="debuglaunch">Debug launch (default to null).</param>
        /// <param name="grade">Enable grades (default to null).</param>
        /// <param name="groupingid">Group id.</param>
        /// <param name="groupmode">Group mode.</param>
        /// <param name="icon">Alternative icon URL (default to &quot;null&quot;).</param>
        /// <param name="id">Activity instance id.</param>
        /// <param name="instructorchoiceacceptgrades">instructor choice accept grades (default to null).</param>
        /// <param name="instructorchoiceallowroster">Instructor choice allow roster (default to null).</param>
        /// <param name="instructorchoiceallowsetting">Instructor choice allow setting (default to null).</param>
        /// <param name="instructorchoicesendemailaddr">instructor choice send mail address (default to null).</param>
        /// <param name="instructorchoicesendname">Instructor choice send name (default to &quot;null&quot;).</param>
        /// <param name="instructorcustomparameters">instructor custom parameters (default to &quot;null&quot;).</param>
        /// <param name="intro">Activity introduction.</param>
        /// <param name="introfiles">introfiles.</param>
        /// <param name="introformat">intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN).</param>
        /// <param name="lang">Forced activity language.</param>
        /// <param name="launchcontainer">Launch container mode (default to null).</param>
        /// <param name="name">Activity name.</param>
        /// <param name="password">Shared secret (default to &quot;null&quot;).</param>
        /// <param name="resourcekey">Resource key (default to &quot;null&quot;).</param>
        /// <param name="section">Course section id.</param>
        /// <param name="secureicon">Secure icon URL (default to &quot;null&quot;).</param>
        /// <param name="securetoolurl">Secure tool url (default to &quot;null&quot;).</param>
        /// <param name="servicesalt">Service salt (default to &quot;null&quot;).</param>
        /// <param name="showdescriptionlaunch">Show description launch (default to null).</param>
        /// <param name="showtitlelaunch">Show title launch (default to null).</param>
        /// <param name="timecreated">Time of creation.</param>
        /// <param name="timemodified">Time of last modification.</param>
        /// <param name="toolurl">Tool url (default to &quot;null&quot;).</param>
        /// <param name="typeid">Type id (default to null).</param>
        /// <param name="visible">Visible.</param>
        public ModLtiGetLtisByCourses200ResponseLtisInner(int course = default(int), int coursemodule = default(int), int debuglaunch = null, int grade = null, int groupingid = default(int), int groupmode = default(int), string icon = @"null", int id = default(int), int instructorchoiceacceptgrades = null, int instructorchoiceallowroster = null, int instructorchoiceallowsetting = null, int instructorchoicesendemailaddr = null, string instructorchoicesendname = @"null", string instructorcustomparameters = @"null", string intro = default(string), List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), int introformat = default(int), string lang = default(string), int launchcontainer = null, string name = default(string), string password = @"null", string resourcekey = @"null", int section = default(int), string secureicon = @"null", string securetoolurl = @"null", string servicesalt = @"null", int showdescriptionlaunch = null, int showtitlelaunch = null, int timecreated = default(int), int timemodified = default(int), string toolurl = @"null", int typeid = null, bool visible = default(bool))
        {
            this.Course = course;
            this.Coursemodule = coursemodule;
            this.Debuglaunch = debuglaunch;
            this.Grade = grade;
            this.Groupingid = groupingid;
            this.Groupmode = groupmode;
            // use default value if no "icon" provided
            this.Icon = icon ?? @"null";
            this.Id = id;
            this.Instructorchoiceacceptgrades = instructorchoiceacceptgrades;
            this.Instructorchoiceallowroster = instructorchoiceallowroster;
            this.Instructorchoiceallowsetting = instructorchoiceallowsetting;
            this.Instructorchoicesendemailaddr = instructorchoicesendemailaddr;
            // use default value if no "instructorchoicesendname" provided
            this.Instructorchoicesendname = instructorchoicesendname ?? @"null";
            // use default value if no "instructorcustomparameters" provided
            this.Instructorcustomparameters = instructorcustomparameters ?? @"null";
            this.Intro = intro;
            this.Introfiles = introfiles;
            this.Introformat = introformat;
            this.Lang = lang;
            this.Launchcontainer = launchcontainer;
            this.Name = name;
            // use default value if no "password" provided
            this.Password = password ?? @"null";
            // use default value if no "resourcekey" provided
            this.Resourcekey = resourcekey ?? @"null";
            this.Section = section;
            // use default value if no "secureicon" provided
            this.Secureicon = secureicon ?? @"null";
            // use default value if no "securetoolurl" provided
            this.Securetoolurl = securetoolurl ?? @"null";
            // use default value if no "servicesalt" provided
            this.Servicesalt = servicesalt ?? @"null";
            this.Showdescriptionlaunch = showdescriptionlaunch;
            this.Showtitlelaunch = showtitlelaunch;
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
            // use default value if no "toolurl" provided
            this.Toolurl = toolurl ?? @"null";
            this.Typeid = typeid;
            this.Visible = visible;
        }

        /// <summary>
        /// Course id
        /// </summary>
        /// <value>Course id</value>
        [DataMember(Name = "course", EmitDefaultValue = false)]
        public int Course { get; set; }

        /// <summary>
        /// Course module id
        /// </summary>
        /// <value>Course module id</value>
        [DataMember(Name = "coursemodule", EmitDefaultValue = false)]
        public int Coursemodule { get; set; }

        /// <summary>
        /// Debug launch
        /// </summary>
        /// <value>Debug launch</value>
        [DataMember(Name = "debuglaunch", EmitDefaultValue = false)]
        public int Debuglaunch { get; set; }

        /// <summary>
        /// Enable grades
        /// </summary>
        /// <value>Enable grades</value>
        [DataMember(Name = "grade", EmitDefaultValue = false)]
        public int Grade { get; set; }

        /// <summary>
        /// Group id
        /// </summary>
        /// <value>Group id</value>
        [DataMember(Name = "groupingid", EmitDefaultValue = false)]
        public int Groupingid { get; set; }

        /// <summary>
        /// Group mode
        /// </summary>
        /// <value>Group mode</value>
        [DataMember(Name = "groupmode", EmitDefaultValue = false)]
        public int Groupmode { get; set; }

        /// <summary>
        /// Alternative icon URL
        /// </summary>
        /// <value>Alternative icon URL</value>
        [DataMember(Name = "icon", EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// Activity instance id
        /// </summary>
        /// <value>Activity instance id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// instructor choice accept grades
        /// </summary>
        /// <value>instructor choice accept grades</value>
        [DataMember(Name = "instructorchoiceacceptgrades", EmitDefaultValue = false)]
        public int Instructorchoiceacceptgrades { get; set; }

        /// <summary>
        /// Instructor choice allow roster
        /// </summary>
        /// <value>Instructor choice allow roster</value>
        [DataMember(Name = "instructorchoiceallowroster", EmitDefaultValue = false)]
        public int Instructorchoiceallowroster { get; set; }

        /// <summary>
        /// Instructor choice allow setting
        /// </summary>
        /// <value>Instructor choice allow setting</value>
        [DataMember(Name = "instructorchoiceallowsetting", EmitDefaultValue = false)]
        public int Instructorchoiceallowsetting { get; set; }

        /// <summary>
        /// instructor choice send mail address
        /// </summary>
        /// <value>instructor choice send mail address</value>
        [DataMember(Name = "instructorchoicesendemailaddr", EmitDefaultValue = false)]
        public int Instructorchoicesendemailaddr { get; set; }

        /// <summary>
        /// Instructor choice send name
        /// </summary>
        /// <value>Instructor choice send name</value>
        [DataMember(Name = "instructorchoicesendname", EmitDefaultValue = false)]
        public string Instructorchoicesendname { get; set; }

        /// <summary>
        /// instructor custom parameters
        /// </summary>
        /// <value>instructor custom parameters</value>
        [DataMember(Name = "instructorcustomparameters", EmitDefaultValue = false)]
        public string Instructorcustomparameters { get; set; }

        /// <summary>
        /// Activity introduction
        /// </summary>
        /// <value>Activity introduction</value>
        [DataMember(Name = "intro", EmitDefaultValue = false)]
        public string Intro { get; set; }

        /// <summary>
        /// Gets or Sets Introfiles
        /// </summary>
        [DataMember(Name = "introfiles", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Introfiles { get; set; }

        /// <summary>
        /// intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "introformat", EmitDefaultValue = false)]
        public int Introformat { get; set; }

        /// <summary>
        /// Forced activity language
        /// </summary>
        /// <value>Forced activity language</value>
        [DataMember(Name = "lang", EmitDefaultValue = false)]
        public string Lang { get; set; }

        /// <summary>
        /// Launch container mode
        /// </summary>
        /// <value>Launch container mode</value>
        [DataMember(Name = "launchcontainer", EmitDefaultValue = false)]
        public int Launchcontainer { get; set; }

        /// <summary>
        /// Activity name
        /// </summary>
        /// <value>Activity name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Shared secret
        /// </summary>
        /// <value>Shared secret</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Resource key
        /// </summary>
        /// <value>Resource key</value>
        [DataMember(Name = "resourcekey", EmitDefaultValue = false)]
        public string Resourcekey { get; set; }

        /// <summary>
        /// Course section id
        /// </summary>
        /// <value>Course section id</value>
        [DataMember(Name = "section", EmitDefaultValue = false)]
        public int Section { get; set; }

        /// <summary>
        /// Secure icon URL
        /// </summary>
        /// <value>Secure icon URL</value>
        [DataMember(Name = "secureicon", EmitDefaultValue = false)]
        public string Secureicon { get; set; }

        /// <summary>
        /// Secure tool url
        /// </summary>
        /// <value>Secure tool url</value>
        [DataMember(Name = "securetoolurl", EmitDefaultValue = false)]
        public string Securetoolurl { get; set; }

        /// <summary>
        /// Service salt
        /// </summary>
        /// <value>Service salt</value>
        [DataMember(Name = "servicesalt", EmitDefaultValue = false)]
        public string Servicesalt { get; set; }

        /// <summary>
        /// Show description launch
        /// </summary>
        /// <value>Show description launch</value>
        [DataMember(Name = "showdescriptionlaunch", EmitDefaultValue = false)]
        public int Showdescriptionlaunch { get; set; }

        /// <summary>
        /// Show title launch
        /// </summary>
        /// <value>Show title launch</value>
        [DataMember(Name = "showtitlelaunch", EmitDefaultValue = false)]
        public int Showtitlelaunch { get; set; }

        /// <summary>
        /// Time of creation
        /// </summary>
        /// <value>Time of creation</value>
        [DataMember(Name = "timecreated", EmitDefaultValue = false)]
        public int Timecreated { get; set; }

        /// <summary>
        /// Time of last modification
        /// </summary>
        /// <value>Time of last modification</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// Tool url
        /// </summary>
        /// <value>Tool url</value>
        [DataMember(Name = "toolurl", EmitDefaultValue = false)]
        public string Toolurl { get; set; }

        /// <summary>
        /// Type id
        /// </summary>
        /// <value>Type id</value>
        [DataMember(Name = "typeid", EmitDefaultValue = false)]
        public int Typeid { get; set; }

        /// <summary>
        /// Visible
        /// </summary>
        /// <value>Visible</value>
        [DataMember(Name = "visible", EmitDefaultValue = true)]
        public bool Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModLtiGetLtisByCourses200ResponseLtisInner {\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Coursemodule: ").Append(Coursemodule).Append("\n");
            sb.Append("  Debuglaunch: ").Append(Debuglaunch).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Groupingid: ").Append(Groupingid).Append("\n");
            sb.Append("  Groupmode: ").Append(Groupmode).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Instructorchoiceacceptgrades: ").Append(Instructorchoiceacceptgrades).Append("\n");
            sb.Append("  Instructorchoiceallowroster: ").Append(Instructorchoiceallowroster).Append("\n");
            sb.Append("  Instructorchoiceallowsetting: ").Append(Instructorchoiceallowsetting).Append("\n");
            sb.Append("  Instructorchoicesendemailaddr: ").Append(Instructorchoicesendemailaddr).Append("\n");
            sb.Append("  Instructorchoicesendname: ").Append(Instructorchoicesendname).Append("\n");
            sb.Append("  Instructorcustomparameters: ").Append(Instructorcustomparameters).Append("\n");
            sb.Append("  Intro: ").Append(Intro).Append("\n");
            sb.Append("  Introfiles: ").Append(Introfiles).Append("\n");
            sb.Append("  Introformat: ").Append(Introformat).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Launchcontainer: ").Append(Launchcontainer).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Resourcekey: ").Append(Resourcekey).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  Secureicon: ").Append(Secureicon).Append("\n");
            sb.Append("  Securetoolurl: ").Append(Securetoolurl).Append("\n");
            sb.Append("  Servicesalt: ").Append(Servicesalt).Append("\n");
            sb.Append("  Showdescriptionlaunch: ").Append(Showdescriptionlaunch).Append("\n");
            sb.Append("  Showtitlelaunch: ").Append(Showtitlelaunch).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Toolurl: ").Append(Toolurl).Append("\n");
            sb.Append("  Typeid: ").Append(Typeid).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
