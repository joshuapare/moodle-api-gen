/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModWorkshopGetAssessmentFormDefinition200Response
    /// </summary>
    [DataContract(Name = "mod_workshop_get_assessment_form_definition_200_response")]
    public partial class ModWorkshopGetAssessmentFormDefinition200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModWorkshopGetAssessmentFormDefinition200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModWorkshopGetAssessmentFormDefinition200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModWorkshopGetAssessmentFormDefinition200Response" /> class.
        /// </summary>
        /// <param name="current">current (required).</param>
        /// <param name="descriptionfiles">descriptionfiles (required).</param>
        /// <param name="dimensionsinfo">dimensionsinfo (required).</param>
        /// <param name="dimenssionscount">The number of dimenssions used by the form. (required) (default to null).</param>
        /// <param name="fields">fields (required).</param>
        /// <param name="options">options (required).</param>
        /// <param name="warnings">warnings.</param>
        public ModWorkshopGetAssessmentFormDefinition200Response(List<ModWorkshopGetAssessmentFormDefinition200ResponseCurrentInner> current = default(List<ModWorkshopGetAssessmentFormDefinition200ResponseCurrentInner>), List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> descriptionfiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), List<ModWorkshopGetAssessmentFormDefinition200ResponseDimensionsinfoInner> dimensionsinfo = default(List<ModWorkshopGetAssessmentFormDefinition200ResponseDimensionsinfoInner>), int dimenssionscount = null, List<ModWorkshopGetAssessmentFormDefinition200ResponseFieldsInner> fields = default(List<ModWorkshopGetAssessmentFormDefinition200ResponseFieldsInner>), List<ModWorkshopGetAssessmentFormDefinition200ResponseOptionsInner> options = default(List<ModWorkshopGetAssessmentFormDefinition200ResponseOptionsInner>), List<AuthEmailSignupUser200ResponseWarningsInner> warnings = default(List<AuthEmailSignupUser200ResponseWarningsInner>))
        {
            // to ensure "current" is required (not null)
            if (current == null)
            {
                throw new ArgumentNullException("current is a required property for ModWorkshopGetAssessmentFormDefinition200Response and cannot be null");
            }
            this.Current = current;
            // to ensure "descriptionfiles" is required (not null)
            if (descriptionfiles == null)
            {
                throw new ArgumentNullException("descriptionfiles is a required property for ModWorkshopGetAssessmentFormDefinition200Response and cannot be null");
            }
            this.Descriptionfiles = descriptionfiles;
            // to ensure "dimensionsinfo" is required (not null)
            if (dimensionsinfo == null)
            {
                throw new ArgumentNullException("dimensionsinfo is a required property for ModWorkshopGetAssessmentFormDefinition200Response and cannot be null");
            }
            this.Dimensionsinfo = dimensionsinfo;
            this.Dimenssionscount = dimenssionscount;
            // to ensure "fields" is required (not null)
            if (fields == null)
            {
                throw new ArgumentNullException("fields is a required property for ModWorkshopGetAssessmentFormDefinition200Response and cannot be null");
            }
            this.Fields = fields;
            // to ensure "options" is required (not null)
            if (options == null)
            {
                throw new ArgumentNullException("options is a required property for ModWorkshopGetAssessmentFormDefinition200Response and cannot be null");
            }
            this.Options = options;
            this.Warnings = warnings;
        }

        /// <summary>
        /// Gets or Sets Current
        /// </summary>
        [DataMember(Name = "current", IsRequired = true, EmitDefaultValue = true)]
        public List<ModWorkshopGetAssessmentFormDefinition200ResponseCurrentInner> Current { get; set; }

        /// <summary>
        /// Gets or Sets Descriptionfiles
        /// </summary>
        [DataMember(Name = "descriptionfiles", IsRequired = true, EmitDefaultValue = true)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Descriptionfiles { get; set; }

        /// <summary>
        /// Gets or Sets Dimensionsinfo
        /// </summary>
        [DataMember(Name = "dimensionsinfo", IsRequired = true, EmitDefaultValue = true)]
        public List<ModWorkshopGetAssessmentFormDefinition200ResponseDimensionsinfoInner> Dimensionsinfo { get; set; }

        /// <summary>
        /// The number of dimenssions used by the form.
        /// </summary>
        /// <value>The number of dimenssions used by the form.</value>
        [DataMember(Name = "dimenssionscount", IsRequired = true, EmitDefaultValue = true)]
        public int Dimenssionscount { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", IsRequired = true, EmitDefaultValue = true)]
        public List<ModWorkshopGetAssessmentFormDefinition200ResponseFieldsInner> Fields { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", IsRequired = true, EmitDefaultValue = true)]
        public List<ModWorkshopGetAssessmentFormDefinition200ResponseOptionsInner> Options { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<AuthEmailSignupUser200ResponseWarningsInner> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModWorkshopGetAssessmentFormDefinition200Response {\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  Descriptionfiles: ").Append(Descriptionfiles).Append("\n");
            sb.Append("  Dimensionsinfo: ").Append(Dimensionsinfo).Append("\n");
            sb.Append("  Dimenssionscount: ").Append(Dimenssionscount).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
