/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ToolLpDataForCompetencyFrameworksManagePage200ResponseCompetencyframeworksInner
    /// </summary>
    [DataContract(Name = "tool_lp_data_for_competency_frameworks_manage_page_200_response_competencyframeworks_inner")]
    public partial class ToolLpDataForCompetencyFrameworksManagePage200ResponseCompetencyframeworksInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForCompetencyFrameworksManagePage200ResponseCompetencyframeworksInner" /> class.
        /// </summary>
        /// <param name="canmanage">canmanage.</param>
        /// <param name="competenciescount">competenciescount.</param>
        /// <param name="contextid">contextid.</param>
        /// <param name="contextname">contextname.</param>
        /// <param name="contextnamenoprefix">contextnamenoprefix.</param>
        /// <param name="description">description (default to &quot;&quot;).</param>
        /// <param name="descriptionformat">description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 1).</param>
        /// <param name="id">id (default to 0).</param>
        /// <param name="idnumber">idnumber.</param>
        /// <param name="scaleconfiguration">scaleconfiguration.</param>
        /// <param name="scaleid">scaleid.</param>
        /// <param name="shortname">shortname.</param>
        /// <param name="taxonomies">taxonomies (default to &quot;&quot;).</param>
        /// <param name="timecreated">timecreated (default to 0).</param>
        /// <param name="timemodified">timemodified (default to 0).</param>
        /// <param name="usermodified">usermodified (default to 0).</param>
        /// <param name="visible">visible (default to 1).</param>
        public ToolLpDataForCompetencyFrameworksManagePage200ResponseCompetencyframeworksInner(bool canmanage = default(bool), int competenciescount = default(int), int contextid = default(int), string contextname = default(string), string contextnamenoprefix = default(string), string description = @"", int descriptionformat = 1, int id = 0, string idnumber = default(string), string scaleconfiguration = default(string), int scaleid = default(int), string shortname = default(string), string taxonomies = @"", int timecreated = 0, int timemodified = 0, int usermodified = 0, bool visible = 1)
        {
            this.Canmanage = canmanage;
            this.Competenciescount = competenciescount;
            this.Contextid = contextid;
            this.Contextname = contextname;
            this.Contextnamenoprefix = contextnamenoprefix;
            // use default value if no "description" provided
            this.Description = description ?? @"";
            this.Descriptionformat = descriptionformat;
            this.Id = id;
            this.Idnumber = idnumber;
            this.Scaleconfiguration = scaleconfiguration;
            this.Scaleid = scaleid;
            this.Shortname = shortname;
            // use default value if no "taxonomies" provided
            this.Taxonomies = taxonomies ?? @"";
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
            this.Usermodified = usermodified;
            this.Visible = visible;
        }

        /// <summary>
        /// canmanage
        /// </summary>
        /// <value>canmanage</value>
        [DataMember(Name = "canmanage", EmitDefaultValue = true)]
        public bool Canmanage { get; set; }

        /// <summary>
        /// competenciescount
        /// </summary>
        /// <value>competenciescount</value>
        [DataMember(Name = "competenciescount", EmitDefaultValue = false)]
        public int Competenciescount { get; set; }

        /// <summary>
        /// contextid
        /// </summary>
        /// <value>contextid</value>
        [DataMember(Name = "contextid", EmitDefaultValue = false)]
        public int Contextid { get; set; }

        /// <summary>
        /// contextname
        /// </summary>
        /// <value>contextname</value>
        [DataMember(Name = "contextname", EmitDefaultValue = false)]
        public string Contextname { get; set; }

        /// <summary>
        /// contextnamenoprefix
        /// </summary>
        /// <value>contextnamenoprefix</value>
        [DataMember(Name = "contextnamenoprefix", EmitDefaultValue = false)]
        public string Contextnamenoprefix { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "descriptionformat", EmitDefaultValue = false)]
        public int Descriptionformat { get; set; }

        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// idnumber
        /// </summary>
        /// <value>idnumber</value>
        [DataMember(Name = "idnumber", EmitDefaultValue = false)]
        public string Idnumber { get; set; }

        /// <summary>
        /// scaleconfiguration
        /// </summary>
        /// <value>scaleconfiguration</value>
        [DataMember(Name = "scaleconfiguration", EmitDefaultValue = false)]
        public string Scaleconfiguration { get; set; }

        /// <summary>
        /// scaleid
        /// </summary>
        /// <value>scaleid</value>
        [DataMember(Name = "scaleid", EmitDefaultValue = false)]
        public int Scaleid { get; set; }

        /// <summary>
        /// shortname
        /// </summary>
        /// <value>shortname</value>
        [DataMember(Name = "shortname", EmitDefaultValue = false)]
        public string Shortname { get; set; }

        /// <summary>
        /// taxonomies
        /// </summary>
        /// <value>taxonomies</value>
        [DataMember(Name = "taxonomies", EmitDefaultValue = false)]
        public string Taxonomies { get; set; }

        /// <summary>
        /// timecreated
        /// </summary>
        /// <value>timecreated</value>
        [DataMember(Name = "timecreated", EmitDefaultValue = false)]
        public int Timecreated { get; set; }

        /// <summary>
        /// timemodified
        /// </summary>
        /// <value>timemodified</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// usermodified
        /// </summary>
        /// <value>usermodified</value>
        [DataMember(Name = "usermodified", EmitDefaultValue = false)]
        public int Usermodified { get; set; }

        /// <summary>
        /// visible
        /// </summary>
        /// <value>visible</value>
        [DataMember(Name = "visible", EmitDefaultValue = true)]
        public bool Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolLpDataForCompetencyFrameworksManagePage200ResponseCompetencyframeworksInner {\n");
            sb.Append("  Canmanage: ").Append(Canmanage).Append("\n");
            sb.Append("  Competenciescount: ").Append(Competenciescount).Append("\n");
            sb.Append("  Contextid: ").Append(Contextid).Append("\n");
            sb.Append("  Contextname: ").Append(Contextname).Append("\n");
            sb.Append("  Contextnamenoprefix: ").Append(Contextnamenoprefix).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Descriptionformat: ").Append(Descriptionformat).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Idnumber: ").Append(Idnumber).Append("\n");
            sb.Append("  Scaleconfiguration: ").Append(Scaleconfiguration).Append("\n");
            sb.Append("  Scaleid: ").Append(Scaleid).Append("\n");
            sb.Append("  Shortname: ").Append(Shortname).Append("\n");
            sb.Append("  Taxonomies: ").Append(Taxonomies).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Usermodified: ").Append(Usermodified).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
