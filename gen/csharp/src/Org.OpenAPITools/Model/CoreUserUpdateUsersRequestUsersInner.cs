/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreUserUpdateUsersRequestUsersInner
    /// </summary>
    [DataContract(Name = "core_user_update_users_request_users_inner")]
    public partial class CoreUserUpdateUsersRequestUsersInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreUserUpdateUsersRequestUsersInner" /> class.
        /// </summary>
        /// <param name="address">Postal address.</param>
        /// <param name="alternatename">The alternate name of the user.</param>
        /// <param name="auth">Auth plugins include manual, ldap, etc (default to &quot;&quot;).</param>
        /// <param name="calendartype">Calendar type such as \&quot;gregorian\&quot;, must exist on server (default to &quot;&quot;).</param>
        /// <param name="city">Home city of the user.</param>
        /// <param name="country">Home country code of the user, such as AU or CZ.</param>
        /// <param name="customfields">customfields.</param>
        /// <param name="department">Department (default to &quot;null&quot;).</param>
        /// <param name="description">User profile description, no HTML.</param>
        /// <param name="email">A valid and unique email address (default to &quot;&quot;).</param>
        /// <param name="firstname">The first name(s) of the user (default to &quot;&quot;).</param>
        /// <param name="firstnamephonetic">The first name(s) phonetically of the user.</param>
        /// <param name="id">ID of the user.</param>
        /// <param name="idnumber">An arbitrary ID code number perhaps from the institution.</param>
        /// <param name="institution">Institution (default to &quot;null&quot;).</param>
        /// <param name="interests">User interests (separated by commas).</param>
        /// <param name="lang">Language code such as \&quot;en\&quot;, must exist on server (default to &quot;&quot;).</param>
        /// <param name="lastname">The family name of the user.</param>
        /// <param name="lastnamephonetic">The family name phonetically of the user.</param>
        /// <param name="maildisplay">Email visibility.</param>
        /// <param name="mailformat">Mail format code is 0 for plain text, 1 for HTML etc.</param>
        /// <param name="middlename">The middle name of the user.</param>
        /// <param name="password">Plain text password consisting of any characters (default to &quot;&quot;).</param>
        /// <param name="phone1">Phone (default to &quot;null&quot;).</param>
        /// <param name="phone2">Mobile phone (default to &quot;null&quot;).</param>
        /// <param name="preferences">preferences.</param>
        /// <param name="suspended">Suspend user account, either false to enable user login or true to disable it.</param>
        /// <param name="theme">Theme name such as \&quot;standard\&quot;, must exist on server.</param>
        /// <param name="timezone">Timezone code such as Australia/Perth, or 99 for default.</param>
        /// <param name="username">Username policy is defined in Moodle security config. (default to &quot;&quot;).</param>
        /// <param name="userpicture">The itemid where the new user picture has been uploaded to, 0 to delete (default to null).</param>
        public CoreUserUpdateUsersRequestUsersInner(string address = default(string), string alternatename = default(string), string auth = @"", string calendartype = @"", string city = default(string), string country = default(string), List<CoreUserCreateUsersRequestUsersInnerCustomfieldsInner> customfields = default(List<CoreUserCreateUsersRequestUsersInnerCustomfieldsInner>), string department = @"null", string description = default(string), string email = @"", string firstname = @"", string firstnamephonetic = default(string), int id = default(int), string idnumber = default(string), string institution = @"null", string interests = default(string), string lang = @"", string lastname = default(string), string lastnamephonetic = default(string), int maildisplay = default(int), int mailformat = default(int), string middlename = default(string), string password = @"", string phone1 = @"null", string phone2 = @"null", List<CoreUserUpdateUsersRequestUsersInnerPreferencesInner> preferences = default(List<CoreUserUpdateUsersRequestUsersInnerPreferencesInner>), bool suspended = default(bool), string theme = default(string), string timezone = default(string), string username = @"", int userpicture = null)
        {
            this.Address = address;
            this.Alternatename = alternatename;
            // use default value if no "auth" provided
            this.Auth = auth ?? @"";
            // use default value if no "calendartype" provided
            this.Calendartype = calendartype ?? @"";
            this.City = city;
            this.Country = country;
            this.Customfields = customfields;
            // use default value if no "department" provided
            this.Department = department ?? @"null";
            this.Description = description;
            // use default value if no "email" provided
            this.Email = email ?? @"";
            // use default value if no "firstname" provided
            this.Firstname = firstname ?? @"";
            this.Firstnamephonetic = firstnamephonetic;
            this.Id = id;
            this.Idnumber = idnumber;
            // use default value if no "institution" provided
            this.Institution = institution ?? @"null";
            this.Interests = interests;
            // use default value if no "lang" provided
            this.Lang = lang ?? @"";
            this.Lastname = lastname;
            this.Lastnamephonetic = lastnamephonetic;
            this.Maildisplay = maildisplay;
            this.Mailformat = mailformat;
            this.Middlename = middlename;
            // use default value if no "password" provided
            this.Password = password ?? @"";
            // use default value if no "phone1" provided
            this.Phone1 = phone1 ?? @"null";
            // use default value if no "phone2" provided
            this.Phone2 = phone2 ?? @"null";
            this.Preferences = preferences;
            this.Suspended = suspended;
            this.Theme = theme;
            this.Timezone = timezone;
            // use default value if no "username" provided
            this.Username = username ?? @"";
            this.Userpicture = userpicture;
        }

        /// <summary>
        /// Postal address
        /// </summary>
        /// <value>Postal address</value>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// The alternate name of the user
        /// </summary>
        /// <value>The alternate name of the user</value>
        [DataMember(Name = "alternatename", EmitDefaultValue = false)]
        public string Alternatename { get; set; }

        /// <summary>
        /// Auth plugins include manual, ldap, etc
        /// </summary>
        /// <value>Auth plugins include manual, ldap, etc</value>
        [DataMember(Name = "auth", EmitDefaultValue = false)]
        public string Auth { get; set; }

        /// <summary>
        /// Calendar type such as \&quot;gregorian\&quot;, must exist on server
        /// </summary>
        /// <value>Calendar type such as \&quot;gregorian\&quot;, must exist on server</value>
        [DataMember(Name = "calendartype", EmitDefaultValue = false)]
        public string Calendartype { get; set; }

        /// <summary>
        /// Home city of the user
        /// </summary>
        /// <value>Home city of the user</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Home country code of the user, such as AU or CZ
        /// </summary>
        /// <value>Home country code of the user, such as AU or CZ</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Customfields
        /// </summary>
        [DataMember(Name = "customfields", EmitDefaultValue = false)]
        public List<CoreUserCreateUsersRequestUsersInnerCustomfieldsInner> Customfields { get; set; }

        /// <summary>
        /// Department
        /// </summary>
        /// <value>Department</value>
        [DataMember(Name = "department", EmitDefaultValue = false)]
        public string Department { get; set; }

        /// <summary>
        /// User profile description, no HTML
        /// </summary>
        /// <value>User profile description, no HTML</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// A valid and unique email address
        /// </summary>
        /// <value>A valid and unique email address</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// The first name(s) of the user
        /// </summary>
        /// <value>The first name(s) of the user</value>
        [DataMember(Name = "firstname", EmitDefaultValue = false)]
        public string Firstname { get; set; }

        /// <summary>
        /// The first name(s) phonetically of the user
        /// </summary>
        /// <value>The first name(s) phonetically of the user</value>
        [DataMember(Name = "firstnamephonetic", EmitDefaultValue = false)]
        public string Firstnamephonetic { get; set; }

        /// <summary>
        /// ID of the user
        /// </summary>
        /// <value>ID of the user</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// An arbitrary ID code number perhaps from the institution
        /// </summary>
        /// <value>An arbitrary ID code number perhaps from the institution</value>
        [DataMember(Name = "idnumber", EmitDefaultValue = false)]
        public string Idnumber { get; set; }

        /// <summary>
        /// Institution
        /// </summary>
        /// <value>Institution</value>
        [DataMember(Name = "institution", EmitDefaultValue = false)]
        public string Institution { get; set; }

        /// <summary>
        /// User interests (separated by commas)
        /// </summary>
        /// <value>User interests (separated by commas)</value>
        [DataMember(Name = "interests", EmitDefaultValue = false)]
        public string Interests { get; set; }

        /// <summary>
        /// Language code such as \&quot;en\&quot;, must exist on server
        /// </summary>
        /// <value>Language code such as \&quot;en\&quot;, must exist on server</value>
        [DataMember(Name = "lang", EmitDefaultValue = false)]
        public string Lang { get; set; }

        /// <summary>
        /// The family name of the user
        /// </summary>
        /// <value>The family name of the user</value>
        [DataMember(Name = "lastname", EmitDefaultValue = false)]
        public string Lastname { get; set; }

        /// <summary>
        /// The family name phonetically of the user
        /// </summary>
        /// <value>The family name phonetically of the user</value>
        [DataMember(Name = "lastnamephonetic", EmitDefaultValue = false)]
        public string Lastnamephonetic { get; set; }

        /// <summary>
        /// Email visibility
        /// </summary>
        /// <value>Email visibility</value>
        [DataMember(Name = "maildisplay", EmitDefaultValue = false)]
        public int Maildisplay { get; set; }

        /// <summary>
        /// Mail format code is 0 for plain text, 1 for HTML etc
        /// </summary>
        /// <value>Mail format code is 0 for plain text, 1 for HTML etc</value>
        [DataMember(Name = "mailformat", EmitDefaultValue = false)]
        public int Mailformat { get; set; }

        /// <summary>
        /// The middle name of the user
        /// </summary>
        /// <value>The middle name of the user</value>
        [DataMember(Name = "middlename", EmitDefaultValue = false)]
        public string Middlename { get; set; }

        /// <summary>
        /// Plain text password consisting of any characters
        /// </summary>
        /// <value>Plain text password consisting of any characters</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Phone
        /// </summary>
        /// <value>Phone</value>
        [DataMember(Name = "phone1", EmitDefaultValue = false)]
        public string Phone1 { get; set; }

        /// <summary>
        /// Mobile phone
        /// </summary>
        /// <value>Mobile phone</value>
        [DataMember(Name = "phone2", EmitDefaultValue = false)]
        public string Phone2 { get; set; }

        /// <summary>
        /// Gets or Sets Preferences
        /// </summary>
        [DataMember(Name = "preferences", EmitDefaultValue = false)]
        public List<CoreUserUpdateUsersRequestUsersInnerPreferencesInner> Preferences { get; set; }

        /// <summary>
        /// Suspend user account, either false to enable user login or true to disable it
        /// </summary>
        /// <value>Suspend user account, either false to enable user login or true to disable it</value>
        [DataMember(Name = "suspended", EmitDefaultValue = true)]
        public bool Suspended { get; set; }

        /// <summary>
        /// Theme name such as \&quot;standard\&quot;, must exist on server
        /// </summary>
        /// <value>Theme name such as \&quot;standard\&quot;, must exist on server</value>
        [DataMember(Name = "theme", EmitDefaultValue = false)]
        public string Theme { get; set; }

        /// <summary>
        /// Timezone code such as Australia/Perth, or 99 for default
        /// </summary>
        /// <value>Timezone code such as Australia/Perth, or 99 for default</value>
        [DataMember(Name = "timezone", EmitDefaultValue = false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Username policy is defined in Moodle security config.
        /// </summary>
        /// <value>Username policy is defined in Moodle security config.</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// The itemid where the new user picture has been uploaded to, 0 to delete
        /// </summary>
        /// <value>The itemid where the new user picture has been uploaded to, 0 to delete</value>
        [DataMember(Name = "userpicture", EmitDefaultValue = false)]
        public int Userpicture { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreUserUpdateUsersRequestUsersInner {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Alternatename: ").Append(Alternatename).Append("\n");
            sb.Append("  Auth: ").Append(Auth).Append("\n");
            sb.Append("  Calendartype: ").Append(Calendartype).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Customfields: ").Append(Customfields).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Firstnamephonetic: ").Append(Firstnamephonetic).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Idnumber: ").Append(Idnumber).Append("\n");
            sb.Append("  Institution: ").Append(Institution).Append("\n");
            sb.Append("  Interests: ").Append(Interests).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  Lastnamephonetic: ").Append(Lastnamephonetic).Append("\n");
            sb.Append("  Maildisplay: ").Append(Maildisplay).Append("\n");
            sb.Append("  Mailformat: ").Append(Mailformat).Append("\n");
            sb.Append("  Middlename: ").Append(Middlename).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Phone1: ").Append(Phone1).Append("\n");
            sb.Append("  Phone2: ").Append(Phone2).Append("\n");
            sb.Append("  Preferences: ").Append(Preferences).Append("\n");
            sb.Append("  Suspended: ").Append(Suspended).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Userpicture: ").Append(Userpicture).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
