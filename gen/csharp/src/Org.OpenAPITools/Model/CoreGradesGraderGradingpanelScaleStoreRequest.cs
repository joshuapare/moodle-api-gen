/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreGradesGraderGradingpanelScaleStoreRequest
    /// </summary>
    [DataContract(Name = "core_grades_grader_gradingpanel_scale_store_request")]
    public partial class CoreGradesGraderGradingpanelScaleStoreRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreGradesGraderGradingpanelScaleStoreRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreGradesGraderGradingpanelScaleStoreRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreGradesGraderGradingpanelScaleStoreRequest" /> class.
        /// </summary>
        /// <param name="component">The name of the component (required).</param>
        /// <param name="contextid">The ID of the context being graded (required).</param>
        /// <param name="formdata">The serialised form data representing the grade (required).</param>
        /// <param name="gradeduserid">The ID of the user show (required).</param>
        /// <param name="itemname">The grade item itemname being graded (required).</param>
        /// <param name="notifyuser">Wheteher to notify the user or not (default to false).</param>
        public CoreGradesGraderGradingpanelScaleStoreRequest(string component = default(string), int contextid = default(int), string formdata = default(string), int gradeduserid = default(int), string itemname = default(string), bool notifyuser = false)
        {
            // to ensure "component" is required (not null)
            if (component == null)
            {
                throw new ArgumentNullException("component is a required property for CoreGradesGraderGradingpanelScaleStoreRequest and cannot be null");
            }
            this.Component = component;
            this.Contextid = contextid;
            // to ensure "formdata" is required (not null)
            if (formdata == null)
            {
                throw new ArgumentNullException("formdata is a required property for CoreGradesGraderGradingpanelScaleStoreRequest and cannot be null");
            }
            this.Formdata = formdata;
            this.Gradeduserid = gradeduserid;
            // to ensure "itemname" is required (not null)
            if (itemname == null)
            {
                throw new ArgumentNullException("itemname is a required property for CoreGradesGraderGradingpanelScaleStoreRequest and cannot be null");
            }
            this.Itemname = itemname;
            this.Notifyuser = notifyuser;
        }

        /// <summary>
        /// The name of the component
        /// </summary>
        /// <value>The name of the component</value>
        [DataMember(Name = "component", IsRequired = true, EmitDefaultValue = true)]
        public string Component { get; set; }

        /// <summary>
        /// The ID of the context being graded
        /// </summary>
        /// <value>The ID of the context being graded</value>
        [DataMember(Name = "contextid", IsRequired = true, EmitDefaultValue = true)]
        public int Contextid { get; set; }

        /// <summary>
        /// The serialised form data representing the grade
        /// </summary>
        /// <value>The serialised form data representing the grade</value>
        [DataMember(Name = "formdata", IsRequired = true, EmitDefaultValue = true)]
        public string Formdata { get; set; }

        /// <summary>
        /// The ID of the user show
        /// </summary>
        /// <value>The ID of the user show</value>
        [DataMember(Name = "gradeduserid", IsRequired = true, EmitDefaultValue = true)]
        public int Gradeduserid { get; set; }

        /// <summary>
        /// The grade item itemname being graded
        /// </summary>
        /// <value>The grade item itemname being graded</value>
        [DataMember(Name = "itemname", IsRequired = true, EmitDefaultValue = true)]
        public string Itemname { get; set; }

        /// <summary>
        /// Wheteher to notify the user or not
        /// </summary>
        /// <value>Wheteher to notify the user or not</value>
        [DataMember(Name = "notifyuser", EmitDefaultValue = true)]
        public bool Notifyuser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreGradesGraderGradingpanelScaleStoreRequest {\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Contextid: ").Append(Contextid).Append("\n");
            sb.Append("  Formdata: ").Append(Formdata).Append("\n");
            sb.Append("  Gradeduserid: ").Append(Gradeduserid).Append("\n");
            sb.Append("  Itemname: ").Append(Itemname).Append("\n");
            sb.Append("  Notifyuser: ").Append(Notifyuser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
