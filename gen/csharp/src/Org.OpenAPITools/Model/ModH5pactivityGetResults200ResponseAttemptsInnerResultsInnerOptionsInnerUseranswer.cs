/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModH5pactivityGetResults200ResponseAttemptsInnerResultsInnerOptionsInnerUseranswer
    /// </summary>
    [DataContract(Name = "mod_h5pactivity_get_results_200_response_attempts_inner_results_inner_options_inner_useranswer")]
    public partial class ModH5pactivityGetResults200ResponseAttemptsInnerResultsInnerOptionsInnerUseranswer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModH5pactivityGetResults200ResponseAttemptsInnerResultsInnerOptionsInnerUseranswer" /> class.
        /// </summary>
        /// <param name="answer">Option text value.</param>
        /// <param name="varChecked">If has to be displayed as a checked option.</param>
        /// <param name="correct">If has to be displayed as correct.</param>
        /// <param name="fail">If has to be displayed as failed.</param>
        /// <param name="incorrect">If has to be displayed as incorrect.</param>
        /// <param name="pass">If has to be displayed as passed.</param>
        /// <param name="text">If has to be displayed as simple text.</param>
        /// <param name="varUnchecked">If has to be displayed as a unchecked option.</param>
        public ModH5pactivityGetResults200ResponseAttemptsInnerResultsInnerOptionsInnerUseranswer(string answer = default(string), bool varChecked = default(bool), bool correct = default(bool), bool fail = default(bool), bool incorrect = default(bool), bool pass = default(bool), bool text = default(bool), bool varUnchecked = default(bool))
        {
            this.Answer = answer;
            this.Checked = varChecked;
            this.Correct = correct;
            this.Fail = fail;
            this.Incorrect = incorrect;
            this.Pass = pass;
            this.Text = text;
            this.Unchecked = varUnchecked;
        }

        /// <summary>
        /// Option text value
        /// </summary>
        /// <value>Option text value</value>
        [DataMember(Name = "answer", EmitDefaultValue = false)]
        public string Answer { get; set; }

        /// <summary>
        /// If has to be displayed as a checked option
        /// </summary>
        /// <value>If has to be displayed as a checked option</value>
        [DataMember(Name = "checked", EmitDefaultValue = true)]
        public bool Checked { get; set; }

        /// <summary>
        /// If has to be displayed as correct
        /// </summary>
        /// <value>If has to be displayed as correct</value>
        [DataMember(Name = "correct", EmitDefaultValue = true)]
        public bool Correct { get; set; }

        /// <summary>
        /// If has to be displayed as failed
        /// </summary>
        /// <value>If has to be displayed as failed</value>
        [DataMember(Name = "fail", EmitDefaultValue = true)]
        public bool Fail { get; set; }

        /// <summary>
        /// If has to be displayed as incorrect
        /// </summary>
        /// <value>If has to be displayed as incorrect</value>
        [DataMember(Name = "incorrect", EmitDefaultValue = true)]
        public bool Incorrect { get; set; }

        /// <summary>
        /// If has to be displayed as passed
        /// </summary>
        /// <value>If has to be displayed as passed</value>
        [DataMember(Name = "pass", EmitDefaultValue = true)]
        public bool Pass { get; set; }

        /// <summary>
        /// If has to be displayed as simple text
        /// </summary>
        /// <value>If has to be displayed as simple text</value>
        [DataMember(Name = "text", EmitDefaultValue = true)]
        public bool Text { get; set; }

        /// <summary>
        /// If has to be displayed as a unchecked option
        /// </summary>
        /// <value>If has to be displayed as a unchecked option</value>
        [DataMember(Name = "unchecked", EmitDefaultValue = true)]
        public bool Unchecked { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModH5pactivityGetResults200ResponseAttemptsInnerResultsInnerOptionsInnerUseranswer {\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  Checked: ").Append(Checked).Append("\n");
            sb.Append("  Correct: ").Append(Correct).Append("\n");
            sb.Append("  Fail: ").Append(Fail).Append("\n");
            sb.Append("  Incorrect: ").Append(Incorrect).Append("\n");
            sb.Append("  Pass: ").Append(Pass).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Unchecked: ").Append(Unchecked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
