/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ToolLpDataForUserCompetencySummaryInPlan200Response
    /// </summary>
    [DataContract(Name = "tool_lp_data_for_user_competency_summary_in_plan_200_response")]
    public partial class ToolLpDataForUserCompetencySummaryInPlan200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForUserCompetencySummaryInPlan200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolLpDataForUserCompetencySummaryInPlan200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForUserCompetencySummaryInPlan200Response" /> class.
        /// </summary>
        /// <param name="plan">plan (required).</param>
        /// <param name="usercompetencysummary">usercompetencysummary (required).</param>
        public ToolLpDataForUserCompetencySummaryInPlan200Response(CoreCompetencyReadPlan200Response plan = default(CoreCompetencyReadPlan200Response), ToolLpDataForUserCompetencySummaryInCourse200ResponseUsercompetencysummary usercompetencysummary = default(ToolLpDataForUserCompetencySummaryInCourse200ResponseUsercompetencysummary))
        {
            // to ensure "plan" is required (not null)
            if (plan == null)
            {
                throw new ArgumentNullException("plan is a required property for ToolLpDataForUserCompetencySummaryInPlan200Response and cannot be null");
            }
            this.Plan = plan;
            // to ensure "usercompetencysummary" is required (not null)
            if (usercompetencysummary == null)
            {
                throw new ArgumentNullException("usercompetencysummary is a required property for ToolLpDataForUserCompetencySummaryInPlan200Response and cannot be null");
            }
            this.Usercompetencysummary = usercompetencysummary;
        }

        /// <summary>
        /// Gets or Sets Plan
        /// </summary>
        [DataMember(Name = "plan", IsRequired = true, EmitDefaultValue = true)]
        public CoreCompetencyReadPlan200Response Plan { get; set; }

        /// <summary>
        /// Gets or Sets Usercompetencysummary
        /// </summary>
        [DataMember(Name = "usercompetencysummary", IsRequired = true, EmitDefaultValue = true)]
        public ToolLpDataForUserCompetencySummaryInCourse200ResponseUsercompetencysummary Usercompetencysummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolLpDataForUserCompetencySummaryInPlan200Response {\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  Usercompetencysummary: ").Append(Usercompetencysummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
