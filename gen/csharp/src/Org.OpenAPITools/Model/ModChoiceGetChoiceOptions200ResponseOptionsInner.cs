/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModChoiceGetChoiceOptions200ResponseOptionsInner
    /// </summary>
    [DataContract(Name = "mod_choice_get_choice_options_200_response_options_inner")]
    public partial class ModChoiceGetChoiceOptions200ResponseOptionsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModChoiceGetChoiceOptions200ResponseOptionsInner" /> class.
        /// </summary>
        /// <param name="varChecked">we already answered (default to null).</param>
        /// <param name="countanswers">number of answers (default to null).</param>
        /// <param name="disabled">option disabled (default to null).</param>
        /// <param name="displaylayout">true for orizontal, otherwise vertical (default to null).</param>
        /// <param name="id">option id (default to null).</param>
        /// <param name="maxanswers">maximum number of answers (default to null).</param>
        /// <param name="text">text of the choice (default to &quot;null&quot;).</param>
        public ModChoiceGetChoiceOptions200ResponseOptionsInner(bool varChecked = null, int countanswers = null, bool disabled = null, bool displaylayout = null, int id = null, int maxanswers = null, string text = @"null")
        {
            this.Checked = varChecked;
            this.Countanswers = countanswers;
            this.Disabled = disabled;
            this.Displaylayout = displaylayout;
            this.Id = id;
            this.Maxanswers = maxanswers;
            // use default value if no "text" provided
            this.Text = text ?? @"null";
        }

        /// <summary>
        /// we already answered
        /// </summary>
        /// <value>we already answered</value>
        [DataMember(Name = "checked", EmitDefaultValue = true)]
        public bool Checked { get; set; }

        /// <summary>
        /// number of answers
        /// </summary>
        /// <value>number of answers</value>
        [DataMember(Name = "countanswers", EmitDefaultValue = false)]
        public int Countanswers { get; set; }

        /// <summary>
        /// option disabled
        /// </summary>
        /// <value>option disabled</value>
        [DataMember(Name = "disabled", EmitDefaultValue = true)]
        public bool Disabled { get; set; }

        /// <summary>
        /// true for orizontal, otherwise vertical
        /// </summary>
        /// <value>true for orizontal, otherwise vertical</value>
        [DataMember(Name = "displaylayout", EmitDefaultValue = true)]
        public bool Displaylayout { get; set; }

        /// <summary>
        /// option id
        /// </summary>
        /// <value>option id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// maximum number of answers
        /// </summary>
        /// <value>maximum number of answers</value>
        [DataMember(Name = "maxanswers", EmitDefaultValue = false)]
        public int Maxanswers { get; set; }

        /// <summary>
        /// text of the choice
        /// </summary>
        /// <value>text of the choice</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModChoiceGetChoiceOptions200ResponseOptionsInner {\n");
            sb.Append("  Checked: ").Append(Checked).Append("\n");
            sb.Append("  Countanswers: ").Append(Countanswers).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Displaylayout: ").Append(Displaylayout).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Maxanswers: ").Append(Maxanswers).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
