/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModAssignGetParticipant200Response
    /// </summary>
    [DataContract(Name = "mod_assign_get_participant_200_response")]
    public partial class ModAssignGetParticipant200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignGetParticipant200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModAssignGetParticipant200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignGetParticipant200Response" /> class.
        /// </summary>
        /// <param name="allowsubmissionsfromdate">allowsubmissionsfromdate for the user (required) (default to null).</param>
        /// <param name="blindmarking">is blind marking enabled for this assignment (required) (default to null).</param>
        /// <param name="cutoffdate">cutoffdate for the user (required) (default to null).</param>
        /// <param name="duedate">duedate for the user (required) (default to null).</param>
        /// <param name="duedatestr">duedate for the user (required) (default to &quot;null&quot;).</param>
        /// <param name="fullname">The fullname of the user (required).</param>
        /// <param name="grantedextension">have they been granted an extension (required) (default to null).</param>
        /// <param name="groupid">for group assignments this is the group id (default to null).</param>
        /// <param name="groupname">for group assignments this is the group name (default to &quot;null&quot;).</param>
        /// <param name="id">ID of the user (required).</param>
        /// <param name="requiregrading">is their submission waiting for grading (required) (default to null).</param>
        /// <param name="submissionstatus">The submission status (new, draft, reopened or submitted).                 Empty when not submitted. (default to &quot;null&quot;).</param>
        /// <param name="submitted">have they submitted their assignment (required) (default to null).</param>
        /// <param name="user">user.</param>
        public ModAssignGetParticipant200Response(int allowsubmissionsfromdate = null, bool blindmarking = null, int cutoffdate = null, int duedate = null, string duedatestr = @"null", string fullname = default(string), bool grantedextension = null, int groupid = null, string groupname = @"null", int id = default(int), bool requiregrading = null, string submissionstatus = @"null", bool submitted = null, ModAssignGetParticipant200ResponseUser user = default(ModAssignGetParticipant200ResponseUser))
        {
            this.Allowsubmissionsfromdate = allowsubmissionsfromdate;
            this.Blindmarking = blindmarking;
            this.Cutoffdate = cutoffdate;
            this.Duedate = duedate;
            // to ensure "duedatestr" is required (not null)
            if (duedatestr == null)
            {
                throw new ArgumentNullException("duedatestr is a required property for ModAssignGetParticipant200Response and cannot be null");
            }
            this.Duedatestr = duedatestr;
            // to ensure "fullname" is required (not null)
            if (fullname == null)
            {
                throw new ArgumentNullException("fullname is a required property for ModAssignGetParticipant200Response and cannot be null");
            }
            this.Fullname = fullname;
            this.Grantedextension = grantedextension;
            this.Id = id;
            this.Requiregrading = requiregrading;
            this.Submitted = submitted;
            this.Groupid = groupid;
            // use default value if no "groupname" provided
            this.Groupname = groupname ?? @"null";
            // use default value if no "submissionstatus" provided
            this.Submissionstatus = submissionstatus ?? @"null";
            this.User = user;
        }

        /// <summary>
        /// allowsubmissionsfromdate for the user
        /// </summary>
        /// <value>allowsubmissionsfromdate for the user</value>
        [DataMember(Name = "allowsubmissionsfromdate", IsRequired = true, EmitDefaultValue = true)]
        public int Allowsubmissionsfromdate { get; set; }

        /// <summary>
        /// is blind marking enabled for this assignment
        /// </summary>
        /// <value>is blind marking enabled for this assignment</value>
        [DataMember(Name = "blindmarking", IsRequired = true, EmitDefaultValue = true)]
        public bool Blindmarking { get; set; }

        /// <summary>
        /// cutoffdate for the user
        /// </summary>
        /// <value>cutoffdate for the user</value>
        [DataMember(Name = "cutoffdate", IsRequired = true, EmitDefaultValue = true)]
        public int Cutoffdate { get; set; }

        /// <summary>
        /// duedate for the user
        /// </summary>
        /// <value>duedate for the user</value>
        [DataMember(Name = "duedate", IsRequired = true, EmitDefaultValue = true)]
        public int Duedate { get; set; }

        /// <summary>
        /// duedate for the user
        /// </summary>
        /// <value>duedate for the user</value>
        [DataMember(Name = "duedatestr", IsRequired = true, EmitDefaultValue = true)]
        public string Duedatestr { get; set; }

        /// <summary>
        /// The fullname of the user
        /// </summary>
        /// <value>The fullname of the user</value>
        [DataMember(Name = "fullname", IsRequired = true, EmitDefaultValue = true)]
        public string Fullname { get; set; }

        /// <summary>
        /// have they been granted an extension
        /// </summary>
        /// <value>have they been granted an extension</value>
        [DataMember(Name = "grantedextension", IsRequired = true, EmitDefaultValue = true)]
        public bool Grantedextension { get; set; }

        /// <summary>
        /// for group assignments this is the group id
        /// </summary>
        /// <value>for group assignments this is the group id</value>
        [DataMember(Name = "groupid", EmitDefaultValue = false)]
        public int Groupid { get; set; }

        /// <summary>
        /// for group assignments this is the group name
        /// </summary>
        /// <value>for group assignments this is the group name</value>
        [DataMember(Name = "groupname", EmitDefaultValue = false)]
        public string Groupname { get; set; }

        /// <summary>
        /// ID of the user
        /// </summary>
        /// <value>ID of the user</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// is their submission waiting for grading
        /// </summary>
        /// <value>is their submission waiting for grading</value>
        [DataMember(Name = "requiregrading", IsRequired = true, EmitDefaultValue = true)]
        public bool Requiregrading { get; set; }

        /// <summary>
        /// The submission status (new, draft, reopened or submitted).                 Empty when not submitted.
        /// </summary>
        /// <value>The submission status (new, draft, reopened or submitted).                 Empty when not submitted.</value>
        [DataMember(Name = "submissionstatus", EmitDefaultValue = false)]
        public string Submissionstatus { get; set; }

        /// <summary>
        /// have they submitted their assignment
        /// </summary>
        /// <value>have they submitted their assignment</value>
        [DataMember(Name = "submitted", IsRequired = true, EmitDefaultValue = true)]
        public bool Submitted { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public ModAssignGetParticipant200ResponseUser User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModAssignGetParticipant200Response {\n");
            sb.Append("  Allowsubmissionsfromdate: ").Append(Allowsubmissionsfromdate).Append("\n");
            sb.Append("  Blindmarking: ").Append(Blindmarking).Append("\n");
            sb.Append("  Cutoffdate: ").Append(Cutoffdate).Append("\n");
            sb.Append("  Duedate: ").Append(Duedate).Append("\n");
            sb.Append("  Duedatestr: ").Append(Duedatestr).Append("\n");
            sb.Append("  Fullname: ").Append(Fullname).Append("\n");
            sb.Append("  Grantedextension: ").Append(Grantedextension).Append("\n");
            sb.Append("  Groupid: ").Append(Groupid).Append("\n");
            sb.Append("  Groupname: ").Append(Groupname).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Requiregrading: ").Append(Requiregrading).Append("\n");
            sb.Append("  Submissionstatus: ").Append(Submissionstatus).Append("\n");
            sb.Append("  Submitted: ").Append(Submitted).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
