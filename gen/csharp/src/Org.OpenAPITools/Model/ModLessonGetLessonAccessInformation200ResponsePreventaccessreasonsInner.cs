/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The reasons why the user cannot attempt the lesson
    /// </summary>
    [DataContract(Name = "mod_lesson_get_lesson_access_information_200_response_preventaccessreasons_inner")]
    public partial class ModLessonGetLessonAccessInformation200ResponsePreventaccessreasonsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetLessonAccessInformation200ResponsePreventaccessreasonsInner" /> class.
        /// </summary>
        /// <param name="data">Additional data (default to &quot;null&quot;).</param>
        /// <param name="message">Complete html message (default to &quot;null&quot;).</param>
        /// <param name="reason">Reason lang string code (default to &quot;null&quot;).</param>
        public ModLessonGetLessonAccessInformation200ResponsePreventaccessreasonsInner(string data = @"null", string message = @"null", string reason = @"null")
        {
            // use default value if no "data" provided
            this.Data = data ?? @"null";
            // use default value if no "message" provided
            this.Message = message ?? @"null";
            // use default value if no "reason" provided
            this.Reason = reason ?? @"null";
        }

        /// <summary>
        /// Additional data
        /// </summary>
        /// <value>Additional data</value>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// Complete html message
        /// </summary>
        /// <value>Complete html message</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Reason lang string code
        /// </summary>
        /// <value>Reason lang string code</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModLessonGetLessonAccessInformation200ResponsePreventaccessreasonsInner {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
