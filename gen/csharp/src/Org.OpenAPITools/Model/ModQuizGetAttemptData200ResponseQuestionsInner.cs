/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The question data. Some fields may not be returned depending on the quiz display settings.
    /// </summary>
    [DataContract(Name = "mod_quiz_get_attempt_data_200_response_questions_inner")]
    public partial class ModQuizGetAttemptData200ResponseQuestionsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModQuizGetAttemptData200ResponseQuestionsInner" /> class.
        /// </summary>
        /// <param name="blockedbyprevious">whether the question is blocked by the previous question (default to null).</param>
        /// <param name="flagged">whether the question is flagged or not (default to null).</param>
        /// <param name="hasautosavedstep">whether this question attempt has autosaved data (default to null).</param>
        /// <param name="html">the question rendered (default to &quot;null&quot;).</param>
        /// <param name="lastactiontime">the timestamp of the most recent step in this question attempt (default to null).</param>
        /// <param name="mark">the mark awarded.                     It will be returned only if the user is allowed to see it. (default to &quot;null&quot;).</param>
        /// <param name="maxmark">the maximum mark possible for this question attempt.                     It will be returned only if the user is allowed to see it. (default to nullM).</param>
        /// <param name="number">DO NOT USE. Use questionnumber. Only retained for backwards compatibility. (default to null).</param>
        /// <param name="page">page of the quiz this question appears on (default to null).</param>
        /// <param name="questionnumber">The question number to display for this question, e.g. \&quot;7\&quot;, \&quot;i\&quot; or \&quot;Custom-B)\&quot;. (default to &quot;null&quot;).</param>
        /// <param name="responsefileareas">responsefileareas.</param>
        /// <param name="sequencecheck">the number of real steps in this attempt (default to null).</param>
        /// <param name="settings">Question settings (JSON encoded). (default to &quot;null&quot;).</param>
        /// <param name="slot">slot number (default to null).</param>
        /// <param name="state">the state where the question is in.                     It will not be returned if the user cannot see it due to the quiz display correctness settings. (default to &quot;null&quot;).</param>
        /// <param name="status">current formatted state of the question (default to &quot;null&quot;).</param>
        /// <param name="type">question type, i.e: multichoice (default to &quot;null&quot;).</param>
        public ModQuizGetAttemptData200ResponseQuestionsInner(bool blockedbyprevious = null, bool flagged = null, bool hasautosavedstep = null, string html = @"null", int lastactiontime = null, string mark = @"null", decimal maxmark = nullM, int number = null, int page = null, string questionnumber = @"null", List<ModQuizGetAttemptData200ResponseQuestionsInnerResponsefileareasInner> responsefileareas = default(List<ModQuizGetAttemptData200ResponseQuestionsInnerResponsefileareasInner>), int sequencecheck = null, string settings = @"null", int slot = null, string state = @"null", string status = @"null", string type = @"null")
        {
            this.Blockedbyprevious = blockedbyprevious;
            this.Flagged = flagged;
            this.Hasautosavedstep = hasautosavedstep;
            // use default value if no "html" provided
            this.Html = html ?? @"null";
            this.Lastactiontime = lastactiontime;
            // use default value if no "mark" provided
            this.Mark = mark ?? @"null";
            this.Maxmark = maxmark;
            this.Number = number;
            this.Page = page;
            // use default value if no "questionnumber" provided
            this.Questionnumber = questionnumber ?? @"null";
            this.Responsefileareas = responsefileareas;
            this.Sequencecheck = sequencecheck;
            // use default value if no "settings" provided
            this.Settings = settings ?? @"null";
            this.Slot = slot;
            // use default value if no "state" provided
            this.State = state ?? @"null";
            // use default value if no "status" provided
            this.Status = status ?? @"null";
            // use default value if no "type" provided
            this.Type = type ?? @"null";
        }

        /// <summary>
        /// whether the question is blocked by the previous question
        /// </summary>
        /// <value>whether the question is blocked by the previous question</value>
        [DataMember(Name = "blockedbyprevious", EmitDefaultValue = true)]
        public bool Blockedbyprevious { get; set; }

        /// <summary>
        /// whether the question is flagged or not
        /// </summary>
        /// <value>whether the question is flagged or not</value>
        [DataMember(Name = "flagged", EmitDefaultValue = true)]
        public bool Flagged { get; set; }

        /// <summary>
        /// whether this question attempt has autosaved data
        /// </summary>
        /// <value>whether this question attempt has autosaved data</value>
        [DataMember(Name = "hasautosavedstep", EmitDefaultValue = true)]
        public bool Hasautosavedstep { get; set; }

        /// <summary>
        /// the question rendered
        /// </summary>
        /// <value>the question rendered</value>
        [DataMember(Name = "html", EmitDefaultValue = false)]
        public string Html { get; set; }

        /// <summary>
        /// the timestamp of the most recent step in this question attempt
        /// </summary>
        /// <value>the timestamp of the most recent step in this question attempt</value>
        [DataMember(Name = "lastactiontime", EmitDefaultValue = false)]
        public int Lastactiontime { get; set; }

        /// <summary>
        /// the mark awarded.                     It will be returned only if the user is allowed to see it.
        /// </summary>
        /// <value>the mark awarded.                     It will be returned only if the user is allowed to see it.</value>
        [DataMember(Name = "mark", EmitDefaultValue = false)]
        public string Mark { get; set; }

        /// <summary>
        /// the maximum mark possible for this question attempt.                     It will be returned only if the user is allowed to see it.
        /// </summary>
        /// <value>the maximum mark possible for this question attempt.                     It will be returned only if the user is allowed to see it.</value>
        [DataMember(Name = "maxmark", EmitDefaultValue = false)]
        public decimal Maxmark { get; set; }

        /// <summary>
        /// DO NOT USE. Use questionnumber. Only retained for backwards compatibility.
        /// </summary>
        /// <value>DO NOT USE. Use questionnumber. Only retained for backwards compatibility.</value>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public int Number { get; set; }

        /// <summary>
        /// page of the quiz this question appears on
        /// </summary>
        /// <value>page of the quiz this question appears on</value>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public int Page { get; set; }

        /// <summary>
        /// The question number to display for this question, e.g. \&quot;7\&quot;, \&quot;i\&quot; or \&quot;Custom-B)\&quot;.
        /// </summary>
        /// <value>The question number to display for this question, e.g. \&quot;7\&quot;, \&quot;i\&quot; or \&quot;Custom-B)\&quot;.</value>
        [DataMember(Name = "questionnumber", EmitDefaultValue = false)]
        public string Questionnumber { get; set; }

        /// <summary>
        /// Gets or Sets Responsefileareas
        /// </summary>
        [DataMember(Name = "responsefileareas", EmitDefaultValue = false)]
        public List<ModQuizGetAttemptData200ResponseQuestionsInnerResponsefileareasInner> Responsefileareas { get; set; }

        /// <summary>
        /// the number of real steps in this attempt
        /// </summary>
        /// <value>the number of real steps in this attempt</value>
        [DataMember(Name = "sequencecheck", EmitDefaultValue = false)]
        public int Sequencecheck { get; set; }

        /// <summary>
        /// Question settings (JSON encoded).
        /// </summary>
        /// <value>Question settings (JSON encoded).</value>
        [DataMember(Name = "settings", EmitDefaultValue = false)]
        public string Settings { get; set; }

        /// <summary>
        /// slot number
        /// </summary>
        /// <value>slot number</value>
        [DataMember(Name = "slot", EmitDefaultValue = false)]
        public int Slot { get; set; }

        /// <summary>
        /// the state where the question is in.                     It will not be returned if the user cannot see it due to the quiz display correctness settings.
        /// </summary>
        /// <value>the state where the question is in.                     It will not be returned if the user cannot see it due to the quiz display correctness settings.</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// current formatted state of the question
        /// </summary>
        /// <value>current formatted state of the question</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// question type, i.e: multichoice
        /// </summary>
        /// <value>question type, i.e: multichoice</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModQuizGetAttemptData200ResponseQuestionsInner {\n");
            sb.Append("  Blockedbyprevious: ").Append(Blockedbyprevious).Append("\n");
            sb.Append("  Flagged: ").Append(Flagged).Append("\n");
            sb.Append("  Hasautosavedstep: ").Append(Hasautosavedstep).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  Lastactiontime: ").Append(Lastactiontime).Append("\n");
            sb.Append("  Mark: ").Append(Mark).Append("\n");
            sb.Append("  Maxmark: ").Append(Maxmark).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Questionnumber: ").Append(Questionnumber).Append("\n");
            sb.Append("  Responsefileareas: ").Append(Responsefileareas).Append("\n");
            sb.Append("  Sequencecheck: ").Append(Sequencecheck).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Slot: ").Append(Slot).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
