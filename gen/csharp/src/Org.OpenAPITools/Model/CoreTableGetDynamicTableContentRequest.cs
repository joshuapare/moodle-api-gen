/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreTableGetDynamicTableContentRequest
    /// </summary>
    [DataContract(Name = "core_table_get_dynamic_table_content_request")]
    public partial class CoreTableGetDynamicTableContentRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreTableGetDynamicTableContentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreTableGetDynamicTableContentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreTableGetDynamicTableContentRequest" /> class.
        /// </summary>
        /// <param name="component">Component (required).</param>
        /// <param name="filters">filters.</param>
        /// <param name="firstinitial">The first initial to sort filter on (required) (default to &quot;null&quot;).</param>
        /// <param name="handler">Handler (required) (default to &quot;null&quot;).</param>
        /// <param name="hiddencolumns">hiddencolumns (required).</param>
        /// <param name="jointype">Type of join to join all filters together (required) (default to null).</param>
        /// <param name="lastinitial">The last initial to sort filter on (required) (default to &quot;null&quot;).</param>
        /// <param name="pagenumber">The page number (required) (default to null).</param>
        /// <param name="pagesize">The number of records per page (required) (default to null).</param>
        /// <param name="resetpreferences">Whether the table preferences should be reset (required) (default to null).</param>
        /// <param name="sortdata">sortdata.</param>
        /// <param name="uniqueid">Unique ID for the container (required) (default to &quot;null&quot;).</param>
        public CoreTableGetDynamicTableContentRequest(string component = default(string), List<CoreTableGetDynamicTableContentRequestFiltersInner> filters = default(List<CoreTableGetDynamicTableContentRequestFiltersInner>), string firstinitial = @"null", string handler = @"null", List<Object> hiddencolumns = default(List<Object>), int jointype = null, string lastinitial = @"null", int pagenumber = null, int pagesize = null, bool resetpreferences = null, List<CoreTableGetDynamicTableContentRequestSortdataInner> sortdata = default(List<CoreTableGetDynamicTableContentRequestSortdataInner>), string uniqueid = @"null")
        {
            // to ensure "component" is required (not null)
            if (component == null)
            {
                throw new ArgumentNullException("component is a required property for CoreTableGetDynamicTableContentRequest and cannot be null");
            }
            this.Component = component;
            // to ensure "firstinitial" is required (not null)
            if (firstinitial == null)
            {
                throw new ArgumentNullException("firstinitial is a required property for CoreTableGetDynamicTableContentRequest and cannot be null");
            }
            this.Firstinitial = firstinitial;
            // to ensure "handler" is required (not null)
            if (handler == null)
            {
                throw new ArgumentNullException("handler is a required property for CoreTableGetDynamicTableContentRequest and cannot be null");
            }
            this.Handler = handler;
            // to ensure "hiddencolumns" is required (not null)
            if (hiddencolumns == null)
            {
                throw new ArgumentNullException("hiddencolumns is a required property for CoreTableGetDynamicTableContentRequest and cannot be null");
            }
            this.Hiddencolumns = hiddencolumns;
            this.Jointype = jointype;
            // to ensure "lastinitial" is required (not null)
            if (lastinitial == null)
            {
                throw new ArgumentNullException("lastinitial is a required property for CoreTableGetDynamicTableContentRequest and cannot be null");
            }
            this.Lastinitial = lastinitial;
            this.Pagenumber = pagenumber;
            this.Pagesize = pagesize;
            this.Resetpreferences = resetpreferences;
            // to ensure "uniqueid" is required (not null)
            if (uniqueid == null)
            {
                throw new ArgumentNullException("uniqueid is a required property for CoreTableGetDynamicTableContentRequest and cannot be null");
            }
            this.Uniqueid = uniqueid;
            this.Filters = filters;
            this.Sortdata = sortdata;
        }

        /// <summary>
        /// Component
        /// </summary>
        /// <value>Component</value>
        [DataMember(Name = "component", IsRequired = true, EmitDefaultValue = true)]
        public string Component { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name = "filters", EmitDefaultValue = false)]
        public List<CoreTableGetDynamicTableContentRequestFiltersInner> Filters { get; set; }

        /// <summary>
        /// The first initial to sort filter on
        /// </summary>
        /// <value>The first initial to sort filter on</value>
        [DataMember(Name = "firstinitial", IsRequired = true, EmitDefaultValue = true)]
        public string Firstinitial { get; set; }

        /// <summary>
        /// Handler
        /// </summary>
        /// <value>Handler</value>
        [DataMember(Name = "handler", IsRequired = true, EmitDefaultValue = true)]
        public string Handler { get; set; }

        /// <summary>
        /// Gets or Sets Hiddencolumns
        /// </summary>
        [DataMember(Name = "hiddencolumns", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Hiddencolumns { get; set; }

        /// <summary>
        /// Type of join to join all filters together
        /// </summary>
        /// <value>Type of join to join all filters together</value>
        [DataMember(Name = "jointype", IsRequired = true, EmitDefaultValue = true)]
        public int Jointype { get; set; }

        /// <summary>
        /// The last initial to sort filter on
        /// </summary>
        /// <value>The last initial to sort filter on</value>
        [DataMember(Name = "lastinitial", IsRequired = true, EmitDefaultValue = true)]
        public string Lastinitial { get; set; }

        /// <summary>
        /// The page number
        /// </summary>
        /// <value>The page number</value>
        [DataMember(Name = "pagenumber", IsRequired = true, EmitDefaultValue = true)]
        public int Pagenumber { get; set; }

        /// <summary>
        /// The number of records per page
        /// </summary>
        /// <value>The number of records per page</value>
        [DataMember(Name = "pagesize", IsRequired = true, EmitDefaultValue = true)]
        public int Pagesize { get; set; }

        /// <summary>
        /// Whether the table preferences should be reset
        /// </summary>
        /// <value>Whether the table preferences should be reset</value>
        [DataMember(Name = "resetpreferences", IsRequired = true, EmitDefaultValue = true)]
        public bool Resetpreferences { get; set; }

        /// <summary>
        /// Gets or Sets Sortdata
        /// </summary>
        [DataMember(Name = "sortdata", EmitDefaultValue = false)]
        public List<CoreTableGetDynamicTableContentRequestSortdataInner> Sortdata { get; set; }

        /// <summary>
        /// Unique ID for the container
        /// </summary>
        /// <value>Unique ID for the container</value>
        [DataMember(Name = "uniqueid", IsRequired = true, EmitDefaultValue = true)]
        public string Uniqueid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreTableGetDynamicTableContentRequest {\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Firstinitial: ").Append(Firstinitial).Append("\n");
            sb.Append("  Handler: ").Append(Handler).Append("\n");
            sb.Append("  Hiddencolumns: ").Append(Hiddencolumns).Append("\n");
            sb.Append("  Jointype: ").Append(Jointype).Append("\n");
            sb.Append("  Lastinitial: ").Append(Lastinitial).Append("\n");
            sb.Append("  Pagenumber: ").Append(Pagenumber).Append("\n");
            sb.Append("  Pagesize: ").Append(Pagesize).Append("\n");
            sb.Append("  Resetpreferences: ").Append(Resetpreferences).Append("\n");
            sb.Append("  Sortdata: ").Append(Sortdata).Append("\n");
            sb.Append("  Uniqueid: ").Append(Uniqueid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
