/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreFormGetFiletypesBrowserData200ResponseGroupsInnerTypesInner
    /// </summary>
    [DataContract(Name = "core_form_get_filetypes_browser_data_200_response_groups_inner_types_inner")]
    public partial class CoreFormGetFiletypesBrowserData200ResponseGroupsInnerTypesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreFormGetFiletypesBrowserData200ResponseGroupsInnerTypesInner" /> class.
        /// </summary>
        /// <param name="ext">The file extension associated with the file type (default to &quot;null&quot;).</param>
        /// <param name="key">The file type identifier (default to &quot;null&quot;).</param>
        /// <param name="name">The file type name (default to &quot;null&quot;).</param>
        /// <param name="selected">Should it be marked as selected.</param>
        public CoreFormGetFiletypesBrowserData200ResponseGroupsInnerTypesInner(string ext = @"null", string key = @"null", string name = @"null", bool selected = default(bool))
        {
            // use default value if no "ext" provided
            this.Ext = ext ?? @"null";
            // use default value if no "key" provided
            this.Key = key ?? @"null";
            // use default value if no "name" provided
            this.Name = name ?? @"null";
            this.Selected = selected;
        }

        /// <summary>
        /// The file extension associated with the file type
        /// </summary>
        /// <value>The file extension associated with the file type</value>
        [DataMember(Name = "ext", EmitDefaultValue = false)]
        public string Ext { get; set; }

        /// <summary>
        /// The file type identifier
        /// </summary>
        /// <value>The file type identifier</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// The file type name
        /// </summary>
        /// <value>The file type name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Should it be marked as selected
        /// </summary>
        /// <value>Should it be marked as selected</value>
        [DataMember(Name = "selected", EmitDefaultValue = true)]
        public bool Selected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreFormGetFiletypesBrowserData200ResponseGroupsInnerTypesInner {\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
