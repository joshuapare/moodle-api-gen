/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreMessageGetConversations200ResponseConversationsInner
    /// </summary>
    [DataContract(Name = "core_message_get_conversations_200_response_conversations_inner")]
    public partial class CoreMessageGetConversations200ResponseConversationsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreMessageGetConversations200ResponseConversationsInner" /> class.
        /// </summary>
        /// <param name="candeletemessagesforallusers">If the user can delete messages in the conversation for all users (default to false).</param>
        /// <param name="id">The conversation id.</param>
        /// <param name="imageurl">A link to the conversation picture, if set.</param>
        /// <param name="isfavourite">If the user marked this conversation as a favourite.</param>
        /// <param name="ismuted">If the user muted this conversation.</param>
        /// <param name="isread">If the user has read all messages in the conversation.</param>
        /// <param name="membercount">Total number of conversation members.</param>
        /// <param name="members">members.</param>
        /// <param name="messages">messages.</param>
        /// <param name="name">The conversation name, if set.</param>
        /// <param name="subname">A subtitle for the conversation name, if set.</param>
        /// <param name="type">The type of the conversation (1&#x3D;individual,2&#x3D;group,3&#x3D;self).</param>
        /// <param name="unreadcount">The number of unread messages in this conversation.</param>
        public CoreMessageGetConversations200ResponseConversationsInner(bool candeletemessagesforallusers = false, int id = default(int), string imageurl = default(string), bool isfavourite = default(bool), bool ismuted = default(bool), bool isread = default(bool), int membercount = default(int), List<CoreMessageGetConversationBetweenUsers200ResponseMembersInner> members = default(List<CoreMessageGetConversationBetweenUsers200ResponseMembersInner>), List<CoreMessageGetConversationBetweenUsers200ResponseMessagesInner> messages = default(List<CoreMessageGetConversationBetweenUsers200ResponseMessagesInner>), string name = default(string), string subname = default(string), int type = default(int), int unreadcount = default(int))
        {
            this.Candeletemessagesforallusers = candeletemessagesforallusers;
            this.Id = id;
            this.Imageurl = imageurl;
            this.Isfavourite = isfavourite;
            this.Ismuted = ismuted;
            this.Isread = isread;
            this.Membercount = membercount;
            this.Members = members;
            this.Messages = messages;
            this.Name = name;
            this.Subname = subname;
            this.Type = type;
            this.Unreadcount = unreadcount;
        }

        /// <summary>
        /// If the user can delete messages in the conversation for all users
        /// </summary>
        /// <value>If the user can delete messages in the conversation for all users</value>
        [DataMember(Name = "candeletemessagesforallusers", EmitDefaultValue = true)]
        public bool Candeletemessagesforallusers { get; set; }

        /// <summary>
        /// The conversation id
        /// </summary>
        /// <value>The conversation id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// A link to the conversation picture, if set
        /// </summary>
        /// <value>A link to the conversation picture, if set</value>
        [DataMember(Name = "imageurl", EmitDefaultValue = false)]
        public string Imageurl { get; set; }

        /// <summary>
        /// If the user marked this conversation as a favourite
        /// </summary>
        /// <value>If the user marked this conversation as a favourite</value>
        [DataMember(Name = "isfavourite", EmitDefaultValue = true)]
        public bool Isfavourite { get; set; }

        /// <summary>
        /// If the user muted this conversation
        /// </summary>
        /// <value>If the user muted this conversation</value>
        [DataMember(Name = "ismuted", EmitDefaultValue = true)]
        public bool Ismuted { get; set; }

        /// <summary>
        /// If the user has read all messages in the conversation
        /// </summary>
        /// <value>If the user has read all messages in the conversation</value>
        [DataMember(Name = "isread", EmitDefaultValue = true)]
        public bool Isread { get; set; }

        /// <summary>
        /// Total number of conversation members
        /// </summary>
        /// <value>Total number of conversation members</value>
        [DataMember(Name = "membercount", EmitDefaultValue = false)]
        public int Membercount { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name = "members", EmitDefaultValue = false)]
        public List<CoreMessageGetConversationBetweenUsers200ResponseMembersInner> Members { get; set; }

        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        [DataMember(Name = "messages", EmitDefaultValue = false)]
        public List<CoreMessageGetConversationBetweenUsers200ResponseMessagesInner> Messages { get; set; }

        /// <summary>
        /// The conversation name, if set
        /// </summary>
        /// <value>The conversation name, if set</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A subtitle for the conversation name, if set
        /// </summary>
        /// <value>A subtitle for the conversation name, if set</value>
        [DataMember(Name = "subname", EmitDefaultValue = false)]
        public string Subname { get; set; }

        /// <summary>
        /// The type of the conversation (1&#x3D;individual,2&#x3D;group,3&#x3D;self)
        /// </summary>
        /// <value>The type of the conversation (1&#x3D;individual,2&#x3D;group,3&#x3D;self)</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public int Type { get; set; }

        /// <summary>
        /// The number of unread messages in this conversation
        /// </summary>
        /// <value>The number of unread messages in this conversation</value>
        [DataMember(Name = "unreadcount", EmitDefaultValue = false)]
        public int Unreadcount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreMessageGetConversations200ResponseConversationsInner {\n");
            sb.Append("  Candeletemessagesforallusers: ").Append(Candeletemessagesforallusers).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Imageurl: ").Append(Imageurl).Append("\n");
            sb.Append("  Isfavourite: ").Append(Isfavourite).Append("\n");
            sb.Append("  Ismuted: ").Append(Ismuted).Append("\n");
            sb.Append("  Isread: ").Append(Isread).Append("\n");
            sb.Append("  Membercount: ").Append(Membercount).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Subname: ").Append(Subname).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Unreadcount: ").Append(Unreadcount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
