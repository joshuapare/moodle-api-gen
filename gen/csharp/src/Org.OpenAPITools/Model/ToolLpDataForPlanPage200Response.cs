/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ToolLpDataForPlanPage200Response
    /// </summary>
    [DataContract(Name = "tool_lp_data_for_plan_page_200_response")]
    public partial class ToolLpDataForPlanPage200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForPlanPage200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolLpDataForPlanPage200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForPlanPage200Response" /> class.
        /// </summary>
        /// <param name="competencies">competencies (required).</param>
        /// <param name="competencycount">Count of competencies (required) (default to null).</param>
        /// <param name="contextid">Context ID. (required) (default to null).</param>
        /// <param name="plan">plan (required).</param>
        /// <param name="pluginbaseurl">Plugin base URL. (required) (default to &quot;null&quot;).</param>
        /// <param name="proficientcompetencycount">Count of proficientcompetencies (required) (default to null).</param>
        /// <param name="proficientcompetencypercentage">Percentage of competencies proficient (required) (default to nullM).</param>
        /// <param name="proficientcompetencypercentageformatted">Displayable percentage (required) (default to &quot;null&quot;).</param>
        public ToolLpDataForPlanPage200Response(List<ToolLpDataForPlanPage200ResponseCompetenciesInner> competencies = default(List<ToolLpDataForPlanPage200ResponseCompetenciesInner>), int competencycount = null, int contextid = null, CoreCompetencyReadPlan200Response plan = default(CoreCompetencyReadPlan200Response), string pluginbaseurl = @"null", int proficientcompetencycount = null, decimal proficientcompetencypercentage = nullM, string proficientcompetencypercentageformatted = @"null")
        {
            // to ensure "competencies" is required (not null)
            if (competencies == null)
            {
                throw new ArgumentNullException("competencies is a required property for ToolLpDataForPlanPage200Response and cannot be null");
            }
            this.Competencies = competencies;
            this.Competencycount = competencycount;
            this.Contextid = contextid;
            // to ensure "plan" is required (not null)
            if (plan == null)
            {
                throw new ArgumentNullException("plan is a required property for ToolLpDataForPlanPage200Response and cannot be null");
            }
            this.Plan = plan;
            // to ensure "pluginbaseurl" is required (not null)
            if (pluginbaseurl == null)
            {
                throw new ArgumentNullException("pluginbaseurl is a required property for ToolLpDataForPlanPage200Response and cannot be null");
            }
            this.Pluginbaseurl = pluginbaseurl;
            this.Proficientcompetencycount = proficientcompetencycount;
            this.Proficientcompetencypercentage = proficientcompetencypercentage;
            // to ensure "proficientcompetencypercentageformatted" is required (not null)
            if (proficientcompetencypercentageformatted == null)
            {
                throw new ArgumentNullException("proficientcompetencypercentageformatted is a required property for ToolLpDataForPlanPage200Response and cannot be null");
            }
            this.Proficientcompetencypercentageformatted = proficientcompetencypercentageformatted;
        }

        /// <summary>
        /// Gets or Sets Competencies
        /// </summary>
        [DataMember(Name = "competencies", IsRequired = true, EmitDefaultValue = true)]
        public List<ToolLpDataForPlanPage200ResponseCompetenciesInner> Competencies { get; set; }

        /// <summary>
        /// Count of competencies
        /// </summary>
        /// <value>Count of competencies</value>
        [DataMember(Name = "competencycount", IsRequired = true, EmitDefaultValue = true)]
        public int Competencycount { get; set; }

        /// <summary>
        /// Context ID.
        /// </summary>
        /// <value>Context ID.</value>
        [DataMember(Name = "contextid", IsRequired = true, EmitDefaultValue = true)]
        public int Contextid { get; set; }

        /// <summary>
        /// Gets or Sets Plan
        /// </summary>
        [DataMember(Name = "plan", IsRequired = true, EmitDefaultValue = true)]
        public CoreCompetencyReadPlan200Response Plan { get; set; }

        /// <summary>
        /// Plugin base URL.
        /// </summary>
        /// <value>Plugin base URL.</value>
        [DataMember(Name = "pluginbaseurl", IsRequired = true, EmitDefaultValue = true)]
        public string Pluginbaseurl { get; set; }

        /// <summary>
        /// Count of proficientcompetencies
        /// </summary>
        /// <value>Count of proficientcompetencies</value>
        [DataMember(Name = "proficientcompetencycount", IsRequired = true, EmitDefaultValue = true)]
        public int Proficientcompetencycount { get; set; }

        /// <summary>
        /// Percentage of competencies proficient
        /// </summary>
        /// <value>Percentage of competencies proficient</value>
        [DataMember(Name = "proficientcompetencypercentage", IsRequired = true, EmitDefaultValue = true)]
        public decimal Proficientcompetencypercentage { get; set; }

        /// <summary>
        /// Displayable percentage
        /// </summary>
        /// <value>Displayable percentage</value>
        [DataMember(Name = "proficientcompetencypercentageformatted", IsRequired = true, EmitDefaultValue = true)]
        public string Proficientcompetencypercentageformatted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolLpDataForPlanPage200Response {\n");
            sb.Append("  Competencies: ").Append(Competencies).Append("\n");
            sb.Append("  Competencycount: ").Append(Competencycount).Append("\n");
            sb.Append("  Contextid: ").Append(Contextid).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  Pluginbaseurl: ").Append(Pluginbaseurl).Append("\n");
            sb.Append("  Proficientcompetencycount: ").Append(Proficientcompetencycount).Append("\n");
            sb.Append("  Proficientcompetencypercentage: ").Append(Proficientcompetencypercentage).Append("\n");
            sb.Append("  Proficientcompetencypercentageformatted: ").Append(Proficientcompetencypercentageformatted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
