/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Node structure
    /// </summary>
    [DataContract(Name = "tool_dataprivacy_tree_extra_branches_200_response_branches_inner")]
    public partial class ToolDataprivacyTreeExtraBranches200ResponseBranchesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolDataprivacyTreeExtraBranches200ResponseBranchesInner" /> class.
        /// </summary>
        /// <param name="branches">branches.</param>
        /// <param name="contextid">The node contextid.</param>
        /// <param name="contextlevel">The node contextlevel.</param>
        /// <param name="expandcontextid">The contextid this node expands.</param>
        /// <param name="expanded">Is it expanded.</param>
        /// <param name="expandelement">What element is this node expanded to.</param>
        /// <param name="text">The node text.</param>
        public ToolDataprivacyTreeExtraBranches200ResponseBranchesInner(List<ToolDataprivacyTreeExtraBranches200ResponseBranchesInnerBranchesInner> branches = default(List<ToolDataprivacyTreeExtraBranches200ResponseBranchesInnerBranchesInner>), int contextid = default(int), int contextlevel = default(int), int expandcontextid = default(int), int expanded = default(int), string expandelement = default(string), string text = default(string))
        {
            this.Branches = branches;
            this.Contextid = contextid;
            this.Contextlevel = contextlevel;
            this.Expandcontextid = expandcontextid;
            this.Expanded = expanded;
            this.Expandelement = expandelement;
            this.Text = text;
        }

        /// <summary>
        /// Gets or Sets Branches
        /// </summary>
        [DataMember(Name = "branches", EmitDefaultValue = false)]
        public List<ToolDataprivacyTreeExtraBranches200ResponseBranchesInnerBranchesInner> Branches { get; set; }

        /// <summary>
        /// The node contextid
        /// </summary>
        /// <value>The node contextid</value>
        [DataMember(Name = "contextid", EmitDefaultValue = false)]
        public int Contextid { get; set; }

        /// <summary>
        /// The node contextlevel
        /// </summary>
        /// <value>The node contextlevel</value>
        [DataMember(Name = "contextlevel", EmitDefaultValue = false)]
        public int Contextlevel { get; set; }

        /// <summary>
        /// The contextid this node expands
        /// </summary>
        /// <value>The contextid this node expands</value>
        [DataMember(Name = "expandcontextid", EmitDefaultValue = false)]
        public int Expandcontextid { get; set; }

        /// <summary>
        /// Is it expanded
        /// </summary>
        /// <value>Is it expanded</value>
        [DataMember(Name = "expanded", EmitDefaultValue = false)]
        public int Expanded { get; set; }

        /// <summary>
        /// What element is this node expanded to
        /// </summary>
        /// <value>What element is this node expanded to</value>
        [DataMember(Name = "expandelement", EmitDefaultValue = false)]
        public string Expandelement { get; set; }

        /// <summary>
        /// The node text
        /// </summary>
        /// <value>The node text</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolDataprivacyTreeExtraBranches200ResponseBranchesInner {\n");
            sb.Append("  Branches: ").Append(Branches).Append("\n");
            sb.Append("  Contextid: ").Append(Contextid).Append("\n");
            sb.Append("  Contextlevel: ").Append(Contextlevel).Append("\n");
            sb.Append("  Expandcontextid: ").Append(Expandcontextid).Append("\n");
            sb.Append("  Expanded: ").Append(Expanded).Append("\n");
            sb.Append("  Expandelement: ").Append(Expandelement).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
