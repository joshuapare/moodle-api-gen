/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// QuizaccessSebValidateQuizKeysRequest
    /// </summary>
    [DataContract(Name = "quizaccess_seb_validate_quiz_keys_request")]
    public partial class QuizaccessSebValidateQuizKeysRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuizaccessSebValidateQuizKeysRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuizaccessSebValidateQuizKeysRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuizaccessSebValidateQuizKeysRequest" /> class.
        /// </summary>
        /// <param name="browserexamkey">SEB browser exam key (default to &quot;null&quot;).</param>
        /// <param name="cmid">Course module ID (required) (default to null).</param>
        /// <param name="configkey">SEB config key (default to &quot;null&quot;).</param>
        /// <param name="url">Page URL to check (required) (default to &quot;null&quot;).</param>
        public QuizaccessSebValidateQuizKeysRequest(string browserexamkey = @"null", int cmid = null, string configkey = @"null", string url = @"null")
        {
            this.Cmid = cmid;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for QuizaccessSebValidateQuizKeysRequest and cannot be null");
            }
            this.Url = url;
            // use default value if no "browserexamkey" provided
            this.Browserexamkey = browserexamkey ?? @"null";
            // use default value if no "configkey" provided
            this.Configkey = configkey ?? @"null";
        }

        /// <summary>
        /// SEB browser exam key
        /// </summary>
        /// <value>SEB browser exam key</value>
        [DataMember(Name = "browserexamkey", EmitDefaultValue = false)]
        public string Browserexamkey { get; set; }

        /// <summary>
        /// Course module ID
        /// </summary>
        /// <value>Course module ID</value>
        [DataMember(Name = "cmid", IsRequired = true, EmitDefaultValue = true)]
        public int Cmid { get; set; }

        /// <summary>
        /// SEB config key
        /// </summary>
        /// <value>SEB config key</value>
        [DataMember(Name = "configkey", EmitDefaultValue = false)]
        public string Configkey { get; set; }

        /// <summary>
        /// Page URL to check
        /// </summary>
        /// <value>Page URL to check</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QuizaccessSebValidateQuizKeysRequest {\n");
            sb.Append("  Browserexamkey: ").Append(Browserexamkey).Append("\n");
            sb.Append("  Cmid: ").Append(Cmid).Append("\n");
            sb.Append("  Configkey: ").Append(Configkey).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
