/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreBlogGetEntries200ResponseEntriesInner
    /// </summary>
    [DataContract(Name = "core_blog_get_entries_200_response_entries_inner")]
    public partial class CoreBlogGetEntries200ResponseEntriesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreBlogGetEntries200ResponseEntriesInner" /> class.
        /// </summary>
        /// <param name="attachment">Post atachment. (default to &quot;null&quot;).</param>
        /// <param name="attachmentfiles">attachmentfiles.</param>
        /// <param name="content">Post content. (default to &quot;null&quot;).</param>
        /// <param name="courseid">Course where the post was created. (default to 0).</param>
        /// <param name="coursemoduleid">Course module id where the post was created. (default to 0).</param>
        /// <param name="created">When it was created. (default to 0).</param>
        /// <param name="format">Post content format. (default to 0).</param>
        /// <param name="groupid">Group post was created for. (default to 0).</param>
        /// <param name="id">Post/entry id. (default to null).</param>
        /// <param name="lastmodified">When it was last modified. (default to 0).</param>
        /// <param name="module">Where it was published the post (blog, blog_external...). (default to &quot;null&quot;).</param>
        /// <param name="moduleid">Module id where the post was created (not used anymore). (default to 0).</param>
        /// <param name="publishstate">Post publish state. (default to &quot;draft&quot;).</param>
        /// <param name="rating">Post rating. (default to 0).</param>
        /// <param name="subject">Post subject. (default to &quot;null&quot;).</param>
        /// <param name="summary">Post summary. (default to &quot;null&quot;).</param>
        /// <param name="summaryfiles">summaryfiles.</param>
        /// <param name="summaryformat">summary format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 0).</param>
        /// <param name="tags">tags.</param>
        /// <param name="uniquehash">Post unique hash. (default to &quot;null&quot;).</param>
        /// <param name="userid">Post author. (default to 0).</param>
        /// <param name="usermodified">User that updated the post. (default to null).</param>
        public CoreBlogGetEntries200ResponseEntriesInner(string attachment = @"null", List<CoreBlogGetEntries200ResponseEntriesInnerAttachmentfilesInner> attachmentfiles = default(List<CoreBlogGetEntries200ResponseEntriesInnerAttachmentfilesInner>), string content = @"null", int courseid = 0, int coursemoduleid = 0, int created = 0, int format = 0, int groupid = 0, int id = null, int lastmodified = 0, string module = @"null", int moduleid = 0, string publishstate = @"draft", int rating = 0, string subject = @"null", string summary = @"null", List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> summaryfiles = default(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>), int summaryformat = 0, List<CoreBlogGetEntries200ResponseEntriesInnerTagsInner> tags = default(List<CoreBlogGetEntries200ResponseEntriesInnerTagsInner>), string uniquehash = @"null", int userid = 0, int usermodified = null)
        {
            // use default value if no "attachment" provided
            this.Attachment = attachment ?? @"null";
            this.Attachmentfiles = attachmentfiles;
            // use default value if no "content" provided
            this.Content = content ?? @"null";
            this.Courseid = courseid;
            this.Coursemoduleid = coursemoduleid;
            this.Created = created;
            this.Format = format;
            this.Groupid = groupid;
            this.Id = id;
            this.Lastmodified = lastmodified;
            // use default value if no "module" provided
            this.Module = module ?? @"null";
            this.Moduleid = moduleid;
            // use default value if no "publishstate" provided
            this.Publishstate = publishstate ?? @"draft";
            this.Rating = rating;
            // use default value if no "subject" provided
            this.Subject = subject ?? @"null";
            // use default value if no "summary" provided
            this.Summary = summary ?? @"null";
            this.Summaryfiles = summaryfiles;
            this.Summaryformat = summaryformat;
            this.Tags = tags;
            // use default value if no "uniquehash" provided
            this.Uniquehash = uniquehash ?? @"null";
            this.Userid = userid;
            this.Usermodified = usermodified;
        }

        /// <summary>
        /// Post atachment.
        /// </summary>
        /// <value>Post atachment.</value>
        [DataMember(Name = "attachment", EmitDefaultValue = false)]
        public string Attachment { get; set; }

        /// <summary>
        /// Gets or Sets Attachmentfiles
        /// </summary>
        [DataMember(Name = "attachmentfiles", EmitDefaultValue = false)]
        public List<CoreBlogGetEntries200ResponseEntriesInnerAttachmentfilesInner> Attachmentfiles { get; set; }

        /// <summary>
        /// Post content.
        /// </summary>
        /// <value>Post content.</value>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Course where the post was created.
        /// </summary>
        /// <value>Course where the post was created.</value>
        [DataMember(Name = "courseid", EmitDefaultValue = false)]
        public int Courseid { get; set; }

        /// <summary>
        /// Course module id where the post was created.
        /// </summary>
        /// <value>Course module id where the post was created.</value>
        [DataMember(Name = "coursemoduleid", EmitDefaultValue = false)]
        public int Coursemoduleid { get; set; }

        /// <summary>
        /// When it was created.
        /// </summary>
        /// <value>When it was created.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public int Created { get; set; }

        /// <summary>
        /// Post content format.
        /// </summary>
        /// <value>Post content format.</value>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public int Format { get; set; }

        /// <summary>
        /// Group post was created for.
        /// </summary>
        /// <value>Group post was created for.</value>
        [DataMember(Name = "groupid", EmitDefaultValue = false)]
        public int Groupid { get; set; }

        /// <summary>
        /// Post/entry id.
        /// </summary>
        /// <value>Post/entry id.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// When it was last modified.
        /// </summary>
        /// <value>When it was last modified.</value>
        [DataMember(Name = "lastmodified", EmitDefaultValue = false)]
        public int Lastmodified { get; set; }

        /// <summary>
        /// Where it was published the post (blog, blog_external...).
        /// </summary>
        /// <value>Where it was published the post (blog, blog_external...).</value>
        [DataMember(Name = "module", EmitDefaultValue = false)]
        public string Module { get; set; }

        /// <summary>
        /// Module id where the post was created (not used anymore).
        /// </summary>
        /// <value>Module id where the post was created (not used anymore).</value>
        [DataMember(Name = "moduleid", EmitDefaultValue = false)]
        public int Moduleid { get; set; }

        /// <summary>
        /// Post publish state.
        /// </summary>
        /// <value>Post publish state.</value>
        [DataMember(Name = "publishstate", EmitDefaultValue = false)]
        public string Publishstate { get; set; }

        /// <summary>
        /// Post rating.
        /// </summary>
        /// <value>Post rating.</value>
        [DataMember(Name = "rating", EmitDefaultValue = false)]
        public int Rating { get; set; }

        /// <summary>
        /// Post subject.
        /// </summary>
        /// <value>Post subject.</value>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Post summary.
        /// </summary>
        /// <value>Post summary.</value>
        [DataMember(Name = "summary", EmitDefaultValue = false)]
        public string Summary { get; set; }

        /// <summary>
        /// Gets or Sets Summaryfiles
        /// </summary>
        [DataMember(Name = "summaryfiles", EmitDefaultValue = false)]
        public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> Summaryfiles { get; set; }

        /// <summary>
        /// summary format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>summary format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "summaryformat", EmitDefaultValue = false)]
        public int Summaryformat { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<CoreBlogGetEntries200ResponseEntriesInnerTagsInner> Tags { get; set; }

        /// <summary>
        /// Post unique hash.
        /// </summary>
        /// <value>Post unique hash.</value>
        [DataMember(Name = "uniquehash", EmitDefaultValue = false)]
        public string Uniquehash { get; set; }

        /// <summary>
        /// Post author.
        /// </summary>
        /// <value>Post author.</value>
        [DataMember(Name = "userid", EmitDefaultValue = false)]
        public int Userid { get; set; }

        /// <summary>
        /// User that updated the post.
        /// </summary>
        /// <value>User that updated the post.</value>
        [DataMember(Name = "usermodified", EmitDefaultValue = false)]
        public int Usermodified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreBlogGetEntries200ResponseEntriesInner {\n");
            sb.Append("  Attachment: ").Append(Attachment).Append("\n");
            sb.Append("  Attachmentfiles: ").Append(Attachmentfiles).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Courseid: ").Append(Courseid).Append("\n");
            sb.Append("  Coursemoduleid: ").Append(Coursemoduleid).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Groupid: ").Append(Groupid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Lastmodified: ").Append(Lastmodified).Append("\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("  Moduleid: ").Append(Moduleid).Append("\n");
            sb.Append("  Publishstate: ").Append(Publishstate).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Summaryfiles: ").Append(Summaryfiles).Append("\n");
            sb.Append("  Summaryformat: ").Append(Summaryformat).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Uniquehash: ").Append(Uniquehash).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("  Usermodified: ").Append(Usermodified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
