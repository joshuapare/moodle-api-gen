/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The timers
    /// </summary>
    [DataContract(Name = "mod_lesson_get_user_timers_200_response_timers_inner")]
    public partial class ModLessonGetUserTimers200ResponseTimersInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetUserTimers200ResponseTimersInner" /> class.
        /// </summary>
        /// <param name="completed">If the lesson for this timer was completed (default to null).</param>
        /// <param name="id">The attempt id.</param>
        /// <param name="lessonid">The lesson id (default to null).</param>
        /// <param name="lessontime">Last access time to the lesson during the timer session (default to null).</param>
        /// <param name="starttime">First access time for a new timer session (default to null).</param>
        /// <param name="timemodifiedoffline">Last modified time via webservices. (default to null).</param>
        /// <param name="userid">The user id.</param>
        public ModLessonGetUserTimers200ResponseTimersInner(int completed = null, int id = default(int), int lessonid = null, int lessontime = null, int starttime = null, int timemodifiedoffline = null, int userid = default(int))
        {
            this.Completed = completed;
            this.Id = id;
            this.Lessonid = lessonid;
            this.Lessontime = lessontime;
            this.Starttime = starttime;
            this.Timemodifiedoffline = timemodifiedoffline;
            this.Userid = userid;
        }

        /// <summary>
        /// If the lesson for this timer was completed
        /// </summary>
        /// <value>If the lesson for this timer was completed</value>
        [DataMember(Name = "completed", EmitDefaultValue = false)]
        public int Completed { get; set; }

        /// <summary>
        /// The attempt id
        /// </summary>
        /// <value>The attempt id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The lesson id
        /// </summary>
        /// <value>The lesson id</value>
        [DataMember(Name = "lessonid", EmitDefaultValue = false)]
        public int Lessonid { get; set; }

        /// <summary>
        /// Last access time to the lesson during the timer session
        /// </summary>
        /// <value>Last access time to the lesson during the timer session</value>
        [DataMember(Name = "lessontime", EmitDefaultValue = false)]
        public int Lessontime { get; set; }

        /// <summary>
        /// First access time for a new timer session
        /// </summary>
        /// <value>First access time for a new timer session</value>
        [DataMember(Name = "starttime", EmitDefaultValue = false)]
        public int Starttime { get; set; }

        /// <summary>
        /// Last modified time via webservices.
        /// </summary>
        /// <value>Last modified time via webservices.</value>
        [DataMember(Name = "timemodifiedoffline", EmitDefaultValue = false)]
        public int Timemodifiedoffline { get; set; }

        /// <summary>
        /// The user id
        /// </summary>
        /// <value>The user id</value>
        [DataMember(Name = "userid", EmitDefaultValue = false)]
        public int Userid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModLessonGetUserTimers200ResponseTimersInner {\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Lessonid: ").Append(Lessonid).Append("\n");
            sb.Append("  Lessontime: ").Append(Lessontime).Append("\n");
            sb.Append("  Starttime: ").Append(Starttime).Append("\n");
            sb.Append("  Timemodifiedoffline: ").Append(Timemodifiedoffline).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
