/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreOutputLoadTemplateWithDependenciesRequest
    /// </summary>
    [DataContract(Name = "core_output_load_template_with_dependencies_request")]
    public partial class CoreOutputLoadTemplateWithDependenciesRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreOutputLoadTemplateWithDependenciesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreOutputLoadTemplateWithDependenciesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreOutputLoadTemplateWithDependenciesRequest" /> class.
        /// </summary>
        /// <param name="component">component containing the template (required).</param>
        /// <param name="includecomments">Include comments or not (default to false).</param>
        /// <param name="lang">lang.</param>
        /// <param name="template">name of the template (required).</param>
        /// <param name="themename">The current theme. (required).</param>
        public CoreOutputLoadTemplateWithDependenciesRequest(string component = default(string), bool includecomments = false, string lang = default(string), string template = default(string), string themename = default(string))
        {
            // to ensure "component" is required (not null)
            if (component == null)
            {
                throw new ArgumentNullException("component is a required property for CoreOutputLoadTemplateWithDependenciesRequest and cannot be null");
            }
            this.Component = component;
            // to ensure "template" is required (not null)
            if (template == null)
            {
                throw new ArgumentNullException("template is a required property for CoreOutputLoadTemplateWithDependenciesRequest and cannot be null");
            }
            this.Template = template;
            // to ensure "themename" is required (not null)
            if (themename == null)
            {
                throw new ArgumentNullException("themename is a required property for CoreOutputLoadTemplateWithDependenciesRequest and cannot be null");
            }
            this.Themename = themename;
            this.Includecomments = includecomments;
            this.Lang = lang;
        }

        /// <summary>
        /// component containing the template
        /// </summary>
        /// <value>component containing the template</value>
        [DataMember(Name = "component", IsRequired = true, EmitDefaultValue = true)]
        public string Component { get; set; }

        /// <summary>
        /// Include comments or not
        /// </summary>
        /// <value>Include comments or not</value>
        [DataMember(Name = "includecomments", EmitDefaultValue = true)]
        public bool Includecomments { get; set; }

        /// <summary>
        /// lang
        /// </summary>
        /// <value>lang</value>
        [DataMember(Name = "lang", EmitDefaultValue = false)]
        public string Lang { get; set; }

        /// <summary>
        /// name of the template
        /// </summary>
        /// <value>name of the template</value>
        [DataMember(Name = "template", IsRequired = true, EmitDefaultValue = true)]
        public string Template { get; set; }

        /// <summary>
        /// The current theme.
        /// </summary>
        /// <value>The current theme.</value>
        [DataMember(Name = "themename", IsRequired = true, EmitDefaultValue = true)]
        public string Themename { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreOutputLoadTemplateWithDependenciesRequest {\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Includecomments: ").Append(Includecomments).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Themename: ").Append(Themename).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
