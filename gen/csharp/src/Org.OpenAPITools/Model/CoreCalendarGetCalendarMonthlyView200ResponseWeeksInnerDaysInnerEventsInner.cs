/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner
    /// </summary>
    [DataContract(Name = "core_calendar_get_calendar_monthly_view_200_response_weeks_inner_days_inner_events_inner")]
    public partial class CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner" /> class.
        /// </summary>
        /// <param name="action">action.</param>
        /// <param name="activityname">activityname.</param>
        /// <param name="activitystr">activitystr.</param>
        /// <param name="candelete">candelete.</param>
        /// <param name="canedit">canedit.</param>
        /// <param name="category">category.</param>
        /// <param name="categoryid">categoryid.</param>
        /// <param name="component">component.</param>
        /// <param name="course">course.</param>
        /// <param name="deleteurl">deleteurl.</param>
        /// <param name="description">description.</param>
        /// <param name="descriptionformat">description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 1).</param>
        /// <param name="draggable">draggable (default to false).</param>
        /// <param name="editurl">editurl.</param>
        /// <param name="eventcount">eventcount.</param>
        /// <param name="eventtype">eventtype.</param>
        /// <param name="formattedlocation">formattedlocation.</param>
        /// <param name="formattedtime">formattedtime.</param>
        /// <param name="groupid">groupid.</param>
        /// <param name="groupname">groupname.</param>
        /// <param name="icon">icon.</param>
        /// <param name="id">id.</param>
        /// <param name="instance">instance.</param>
        /// <param name="isactionevent">isactionevent.</param>
        /// <param name="iscategoryevent">iscategoryevent.</param>
        /// <param name="iscourseevent">iscourseevent.</param>
        /// <param name="islastday">islastday (default to false).</param>
        /// <param name="location">location.</param>
        /// <param name="maxdayerror">maxdayerror.</param>
        /// <param name="maxdaytimestamp">maxdaytimestamp.</param>
        /// <param name="mindayerror">mindayerror.</param>
        /// <param name="mindaytimestamp">mindaytimestamp.</param>
        /// <param name="modulename">modulename.</param>
        /// <param name="name">name.</param>
        /// <param name="normalisedeventtype">normalisedeventtype.</param>
        /// <param name="normalisedeventtypetext">normalisedeventtypetext.</param>
        /// <param name="overdue">overdue (default to false).</param>
        /// <param name="popupname">popupname.</param>
        /// <param name="purpose">purpose.</param>
        /// <param name="repeatid">repeatid.</param>
        /// <param name="subscription">subscription.</param>
        /// <param name="timeduration">timeduration.</param>
        /// <param name="timemodified">timemodified.</param>
        /// <param name="timesort">timesort.</param>
        /// <param name="timestart">timestart.</param>
        /// <param name="timeusermidnight">timeusermidnight.</param>
        /// <param name="url">url.</param>
        /// <param name="userid">userid.</param>
        /// <param name="viewurl">viewurl.</param>
        /// <param name="visible">visible.</param>
        public CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction action = default(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction), string activityname = default(string), string activitystr = default(string), bool candelete = default(bool), bool canedit = default(bool), CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory category = default(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory), int categoryid = default(int), string component = default(string), CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse course = default(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse), string deleteurl = default(string), string description = default(string), int descriptionformat = 1, bool draggable = false, string editurl = default(string), int eventcount = default(int), string eventtype = default(string), string formattedlocation = default(string), string formattedtime = default(string), int groupid = default(int), string groupname = default(string), CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon icon = default(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon), int id = default(int), int instance = default(int), bool isactionevent = default(bool), bool iscategoryevent = default(bool), bool iscourseevent = default(bool), bool islastday = false, string location = default(string), string maxdayerror = default(string), int maxdaytimestamp = default(int), string mindayerror = default(string), int mindaytimestamp = default(int), string modulename = default(string), string name = default(string), string normalisedeventtype = default(string), string normalisedeventtypetext = default(string), bool overdue = false, string popupname = default(string), string purpose = default(string), int repeatid = default(int), CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription subscription = default(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription), int timeduration = default(int), int timemodified = default(int), int timesort = default(int), int timestart = default(int), int timeusermidnight = default(int), string url = default(string), int userid = default(int), string viewurl = default(string), int visible = default(int))
        {
            this.Action = action;
            this.Activityname = activityname;
            this.Activitystr = activitystr;
            this.Candelete = candelete;
            this.Canedit = canedit;
            this.Category = category;
            this.Categoryid = categoryid;
            this.Component = component;
            this.Course = course;
            this.Deleteurl = deleteurl;
            this.Description = description;
            this.Descriptionformat = descriptionformat;
            this.Draggable = draggable;
            this.Editurl = editurl;
            this.Eventcount = eventcount;
            this.Eventtype = eventtype;
            this.Formattedlocation = formattedlocation;
            this.Formattedtime = formattedtime;
            this.Groupid = groupid;
            this.Groupname = groupname;
            this.Icon = icon;
            this.Id = id;
            this.Instance = instance;
            this.Isactionevent = isactionevent;
            this.Iscategoryevent = iscategoryevent;
            this.Iscourseevent = iscourseevent;
            this.Islastday = islastday;
            this.Location = location;
            this.Maxdayerror = maxdayerror;
            this.Maxdaytimestamp = maxdaytimestamp;
            this.Mindayerror = mindayerror;
            this.Mindaytimestamp = mindaytimestamp;
            this.Modulename = modulename;
            this.Name = name;
            this.Normalisedeventtype = normalisedeventtype;
            this.Normalisedeventtypetext = normalisedeventtypetext;
            this.Overdue = overdue;
            this.Popupname = popupname;
            this.Purpose = purpose;
            this.Repeatid = repeatid;
            this.Subscription = subscription;
            this.Timeduration = timeduration;
            this.Timemodified = timemodified;
            this.Timesort = timesort;
            this.Timestart = timestart;
            this.Timeusermidnight = timeusermidnight;
            this.Url = url;
            this.Userid = userid;
            this.Viewurl = viewurl;
            this.Visible = visible;
        }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction Action { get; set; }

        /// <summary>
        /// activityname
        /// </summary>
        /// <value>activityname</value>
        [DataMember(Name = "activityname", EmitDefaultValue = false)]
        public string Activityname { get; set; }

        /// <summary>
        /// activitystr
        /// </summary>
        /// <value>activitystr</value>
        [DataMember(Name = "activitystr", EmitDefaultValue = false)]
        public string Activitystr { get; set; }

        /// <summary>
        /// candelete
        /// </summary>
        /// <value>candelete</value>
        [DataMember(Name = "candelete", EmitDefaultValue = true)]
        public bool Candelete { get; set; }

        /// <summary>
        /// canedit
        /// </summary>
        /// <value>canedit</value>
        [DataMember(Name = "canedit", EmitDefaultValue = true)]
        public bool Canedit { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory Category { get; set; }

        /// <summary>
        /// categoryid
        /// </summary>
        /// <value>categoryid</value>
        [DataMember(Name = "categoryid", EmitDefaultValue = false)]
        public int Categoryid { get; set; }

        /// <summary>
        /// component
        /// </summary>
        /// <value>component</value>
        [DataMember(Name = "component", EmitDefaultValue = false)]
        public string Component { get; set; }

        /// <summary>
        /// Gets or Sets Course
        /// </summary>
        [DataMember(Name = "course", EmitDefaultValue = false)]
        public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse Course { get; set; }

        /// <summary>
        /// deleteurl
        /// </summary>
        /// <value>deleteurl</value>
        [DataMember(Name = "deleteurl", EmitDefaultValue = false)]
        public string Deleteurl { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "descriptionformat", EmitDefaultValue = false)]
        public int Descriptionformat { get; set; }

        /// <summary>
        /// draggable
        /// </summary>
        /// <value>draggable</value>
        [DataMember(Name = "draggable", EmitDefaultValue = true)]
        public bool Draggable { get; set; }

        /// <summary>
        /// editurl
        /// </summary>
        /// <value>editurl</value>
        [DataMember(Name = "editurl", EmitDefaultValue = false)]
        public string Editurl { get; set; }

        /// <summary>
        /// eventcount
        /// </summary>
        /// <value>eventcount</value>
        [DataMember(Name = "eventcount", EmitDefaultValue = false)]
        public int Eventcount { get; set; }

        /// <summary>
        /// eventtype
        /// </summary>
        /// <value>eventtype</value>
        [DataMember(Name = "eventtype", EmitDefaultValue = false)]
        public string Eventtype { get; set; }

        /// <summary>
        /// formattedlocation
        /// </summary>
        /// <value>formattedlocation</value>
        [DataMember(Name = "formattedlocation", EmitDefaultValue = false)]
        public string Formattedlocation { get; set; }

        /// <summary>
        /// formattedtime
        /// </summary>
        /// <value>formattedtime</value>
        [DataMember(Name = "formattedtime", EmitDefaultValue = false)]
        public string Formattedtime { get; set; }

        /// <summary>
        /// groupid
        /// </summary>
        /// <value>groupid</value>
        [DataMember(Name = "groupid", EmitDefaultValue = false)]
        public int Groupid { get; set; }

        /// <summary>
        /// groupname
        /// </summary>
        /// <value>groupname</value>
        [DataMember(Name = "groupname", EmitDefaultValue = false)]
        public string Groupname { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = false)]
        public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon Icon { get; set; }

        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// instance
        /// </summary>
        /// <value>instance</value>
        [DataMember(Name = "instance", EmitDefaultValue = false)]
        public int Instance { get; set; }

        /// <summary>
        /// isactionevent
        /// </summary>
        /// <value>isactionevent</value>
        [DataMember(Name = "isactionevent", EmitDefaultValue = true)]
        public bool Isactionevent { get; set; }

        /// <summary>
        /// iscategoryevent
        /// </summary>
        /// <value>iscategoryevent</value>
        [DataMember(Name = "iscategoryevent", EmitDefaultValue = true)]
        public bool Iscategoryevent { get; set; }

        /// <summary>
        /// iscourseevent
        /// </summary>
        /// <value>iscourseevent</value>
        [DataMember(Name = "iscourseevent", EmitDefaultValue = true)]
        public bool Iscourseevent { get; set; }

        /// <summary>
        /// islastday
        /// </summary>
        /// <value>islastday</value>
        [DataMember(Name = "islastday", EmitDefaultValue = true)]
        public bool Islastday { get; set; }

        /// <summary>
        /// location
        /// </summary>
        /// <value>location</value>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// maxdayerror
        /// </summary>
        /// <value>maxdayerror</value>
        [DataMember(Name = "maxdayerror", EmitDefaultValue = false)]
        public string Maxdayerror { get; set; }

        /// <summary>
        /// maxdaytimestamp
        /// </summary>
        /// <value>maxdaytimestamp</value>
        [DataMember(Name = "maxdaytimestamp", EmitDefaultValue = false)]
        public int Maxdaytimestamp { get; set; }

        /// <summary>
        /// mindayerror
        /// </summary>
        /// <value>mindayerror</value>
        [DataMember(Name = "mindayerror", EmitDefaultValue = false)]
        public string Mindayerror { get; set; }

        /// <summary>
        /// mindaytimestamp
        /// </summary>
        /// <value>mindaytimestamp</value>
        [DataMember(Name = "mindaytimestamp", EmitDefaultValue = false)]
        public int Mindaytimestamp { get; set; }

        /// <summary>
        /// modulename
        /// </summary>
        /// <value>modulename</value>
        [DataMember(Name = "modulename", EmitDefaultValue = false)]
        public string Modulename { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// normalisedeventtype
        /// </summary>
        /// <value>normalisedeventtype</value>
        [DataMember(Name = "normalisedeventtype", EmitDefaultValue = false)]
        public string Normalisedeventtype { get; set; }

        /// <summary>
        /// normalisedeventtypetext
        /// </summary>
        /// <value>normalisedeventtypetext</value>
        [DataMember(Name = "normalisedeventtypetext", EmitDefaultValue = false)]
        public string Normalisedeventtypetext { get; set; }

        /// <summary>
        /// overdue
        /// </summary>
        /// <value>overdue</value>
        [DataMember(Name = "overdue", EmitDefaultValue = true)]
        public bool Overdue { get; set; }

        /// <summary>
        /// popupname
        /// </summary>
        /// <value>popupname</value>
        [DataMember(Name = "popupname", EmitDefaultValue = false)]
        public string Popupname { get; set; }

        /// <summary>
        /// purpose
        /// </summary>
        /// <value>purpose</value>
        [DataMember(Name = "purpose", EmitDefaultValue = false)]
        public string Purpose { get; set; }

        /// <summary>
        /// repeatid
        /// </summary>
        /// <value>repeatid</value>
        [DataMember(Name = "repeatid", EmitDefaultValue = false)]
        public int Repeatid { get; set; }

        /// <summary>
        /// Gets or Sets Subscription
        /// </summary>
        [DataMember(Name = "subscription", EmitDefaultValue = false)]
        public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription Subscription { get; set; }

        /// <summary>
        /// timeduration
        /// </summary>
        /// <value>timeduration</value>
        [DataMember(Name = "timeduration", EmitDefaultValue = false)]
        public int Timeduration { get; set; }

        /// <summary>
        /// timemodified
        /// </summary>
        /// <value>timemodified</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// timesort
        /// </summary>
        /// <value>timesort</value>
        [DataMember(Name = "timesort", EmitDefaultValue = false)]
        public int Timesort { get; set; }

        /// <summary>
        /// timestart
        /// </summary>
        /// <value>timestart</value>
        [DataMember(Name = "timestart", EmitDefaultValue = false)]
        public int Timestart { get; set; }

        /// <summary>
        /// timeusermidnight
        /// </summary>
        /// <value>timeusermidnight</value>
        [DataMember(Name = "timeusermidnight", EmitDefaultValue = false)]
        public int Timeusermidnight { get; set; }

        /// <summary>
        /// url
        /// </summary>
        /// <value>url</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// userid
        /// </summary>
        /// <value>userid</value>
        [DataMember(Name = "userid", EmitDefaultValue = false)]
        public int Userid { get; set; }

        /// <summary>
        /// viewurl
        /// </summary>
        /// <value>viewurl</value>
        [DataMember(Name = "viewurl", EmitDefaultValue = false)]
        public string Viewurl { get; set; }

        /// <summary>
        /// visible
        /// </summary>
        /// <value>visible</value>
        [DataMember(Name = "visible", EmitDefaultValue = false)]
        public int Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Activityname: ").Append(Activityname).Append("\n");
            sb.Append("  Activitystr: ").Append(Activitystr).Append("\n");
            sb.Append("  Candelete: ").Append(Candelete).Append("\n");
            sb.Append("  Canedit: ").Append(Canedit).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Categoryid: ").Append(Categoryid).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Deleteurl: ").Append(Deleteurl).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Descriptionformat: ").Append(Descriptionformat).Append("\n");
            sb.Append("  Draggable: ").Append(Draggable).Append("\n");
            sb.Append("  Editurl: ").Append(Editurl).Append("\n");
            sb.Append("  Eventcount: ").Append(Eventcount).Append("\n");
            sb.Append("  Eventtype: ").Append(Eventtype).Append("\n");
            sb.Append("  Formattedlocation: ").Append(Formattedlocation).Append("\n");
            sb.Append("  Formattedtime: ").Append(Formattedtime).Append("\n");
            sb.Append("  Groupid: ").Append(Groupid).Append("\n");
            sb.Append("  Groupname: ").Append(Groupname).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  Isactionevent: ").Append(Isactionevent).Append("\n");
            sb.Append("  Iscategoryevent: ").Append(Iscategoryevent).Append("\n");
            sb.Append("  Iscourseevent: ").Append(Iscourseevent).Append("\n");
            sb.Append("  Islastday: ").Append(Islastday).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Maxdayerror: ").Append(Maxdayerror).Append("\n");
            sb.Append("  Maxdaytimestamp: ").Append(Maxdaytimestamp).Append("\n");
            sb.Append("  Mindayerror: ").Append(Mindayerror).Append("\n");
            sb.Append("  Mindaytimestamp: ").Append(Mindaytimestamp).Append("\n");
            sb.Append("  Modulename: ").Append(Modulename).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Normalisedeventtype: ").Append(Normalisedeventtype).Append("\n");
            sb.Append("  Normalisedeventtypetext: ").Append(Normalisedeventtypetext).Append("\n");
            sb.Append("  Overdue: ").Append(Overdue).Append("\n");
            sb.Append("  Popupname: ").Append(Popupname).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Repeatid: ").Append(Repeatid).Append("\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("  Timeduration: ").Append(Timeduration).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Timesort: ").Append(Timesort).Append("\n");
            sb.Append("  Timestart: ").Append(Timestart).Append("\n");
            sb.Append("  Timeusermidnight: ").Append(Timeusermidnight).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("  Viewurl: ").Append(Viewurl).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
