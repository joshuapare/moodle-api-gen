/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModForumGetDiscussionPostsRequest
    /// </summary>
    [DataContract(Name = "mod_forum_get_discussion_posts_request")]
    public partial class ModForumGetDiscussionPostsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumGetDiscussionPostsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModForumGetDiscussionPostsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumGetDiscussionPostsRequest" /> class.
        /// </summary>
        /// <param name="discussionid">The ID of the discussion from which to fetch posts. (required) (default to null).</param>
        /// <param name="includeinlineattachments">Whether inline attachments should be included or not (default to false).</param>
        /// <param name="sortby">Sort by this element: id, created or modified (default to &quot;created&quot;).</param>
        /// <param name="sortdirection">Sort direction: ASC or DESC (default to &quot;DESC&quot;).</param>
        public ModForumGetDiscussionPostsRequest(int discussionid = null, bool includeinlineattachments = false, string sortby = @"created", string sortdirection = @"DESC")
        {
            this.Discussionid = discussionid;
            this.Includeinlineattachments = includeinlineattachments;
            // use default value if no "sortby" provided
            this.Sortby = sortby ?? @"created";
            // use default value if no "sortdirection" provided
            this.Sortdirection = sortdirection ?? @"DESC";
        }

        /// <summary>
        /// The ID of the discussion from which to fetch posts.
        /// </summary>
        /// <value>The ID of the discussion from which to fetch posts.</value>
        [DataMember(Name = "discussionid", IsRequired = true, EmitDefaultValue = true)]
        public int Discussionid { get; set; }

        /// <summary>
        /// Whether inline attachments should be included or not
        /// </summary>
        /// <value>Whether inline attachments should be included or not</value>
        [DataMember(Name = "includeinlineattachments", EmitDefaultValue = true)]
        public bool Includeinlineattachments { get; set; }

        /// <summary>
        /// Sort by this element: id, created or modified
        /// </summary>
        /// <value>Sort by this element: id, created or modified</value>
        [DataMember(Name = "sortby", EmitDefaultValue = false)]
        public string Sortby { get; set; }

        /// <summary>
        /// Sort direction: ASC or DESC
        /// </summary>
        /// <value>Sort direction: ASC or DESC</value>
        [DataMember(Name = "sortdirection", EmitDefaultValue = false)]
        public string Sortdirection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModForumGetDiscussionPostsRequest {\n");
            sb.Append("  Discussionid: ").Append(Discussionid).Append("\n");
            sb.Append("  Includeinlineattachments: ").Append(Includeinlineattachments).Append("\n");
            sb.Append("  Sortby: ").Append(Sortby).Append("\n");
            sb.Append("  Sortdirection: ").Append(Sortdirection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
