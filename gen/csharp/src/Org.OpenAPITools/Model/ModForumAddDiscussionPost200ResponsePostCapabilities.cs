/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModForumAddDiscussionPost200ResponsePostCapabilities
    /// </summary>
    [DataContract(Name = "mod_forum_add_discussion_post_200_response_post_capabilities")]
    public partial class ModForumAddDiscussionPost200ResponsePostCapabilities : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumAddDiscussionPost200ResponsePostCapabilities" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModForumAddDiscussionPost200ResponsePostCapabilities() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumAddDiscussionPost200ResponsePostCapabilities" /> class.
        /// </summary>
        /// <param name="canreplyprivately">Whether the user can post a private reply (required) (default to null).</param>
        /// <param name="controlreadstatus">Whether the user can control the read status of the post (required) (default to null).</param>
        /// <param name="delete">Whether the user can delete the post (required) (default to null).</param>
        /// <param name="edit">Whether the user can edit the post (required) (default to null).</param>
        /// <param name="export">Whether the user can export the post (required) (default to null).</param>
        /// <param name="reply">Whether the user can reply to the post (required) (default to null).</param>
        /// <param name="selfenrol">Whether the user can self enrol into the course (required) (default to null).</param>
        /// <param name="split">Whether the user can split the post (required) (default to null).</param>
        /// <param name="view">Whether the user can view the post (required) (default to null).</param>
        public ModForumAddDiscussionPost200ResponsePostCapabilities(bool canreplyprivately = null, bool controlreadstatus = null, bool delete = null, bool edit = null, bool export = null, bool reply = null, bool selfenrol = null, bool split = null, bool view = null)
        {
            this.Canreplyprivately = canreplyprivately;
            this.Controlreadstatus = controlreadstatus;
            this.Delete = delete;
            this.Edit = edit;
            this.Export = export;
            this.Reply = reply;
            this.Selfenrol = selfenrol;
            this.Split = split;
            this.View = view;
        }

        /// <summary>
        /// Whether the user can post a private reply
        /// </summary>
        /// <value>Whether the user can post a private reply</value>
        [DataMember(Name = "canreplyprivately", IsRequired = true, EmitDefaultValue = true)]
        public bool Canreplyprivately { get; set; }

        /// <summary>
        /// Whether the user can control the read status of the post
        /// </summary>
        /// <value>Whether the user can control the read status of the post</value>
        [DataMember(Name = "controlreadstatus", IsRequired = true, EmitDefaultValue = true)]
        public bool Controlreadstatus { get; set; }

        /// <summary>
        /// Whether the user can delete the post
        /// </summary>
        /// <value>Whether the user can delete the post</value>
        [DataMember(Name = "delete", IsRequired = true, EmitDefaultValue = true)]
        public bool Delete { get; set; }

        /// <summary>
        /// Whether the user can edit the post
        /// </summary>
        /// <value>Whether the user can edit the post</value>
        [DataMember(Name = "edit", IsRequired = true, EmitDefaultValue = true)]
        public bool Edit { get; set; }

        /// <summary>
        /// Whether the user can export the post
        /// </summary>
        /// <value>Whether the user can export the post</value>
        [DataMember(Name = "export", IsRequired = true, EmitDefaultValue = true)]
        public bool Export { get; set; }

        /// <summary>
        /// Whether the user can reply to the post
        /// </summary>
        /// <value>Whether the user can reply to the post</value>
        [DataMember(Name = "reply", IsRequired = true, EmitDefaultValue = true)]
        public bool Reply { get; set; }

        /// <summary>
        /// Whether the user can self enrol into the course
        /// </summary>
        /// <value>Whether the user can self enrol into the course</value>
        [DataMember(Name = "selfenrol", IsRequired = true, EmitDefaultValue = true)]
        public bool Selfenrol { get; set; }

        /// <summary>
        /// Whether the user can split the post
        /// </summary>
        /// <value>Whether the user can split the post</value>
        [DataMember(Name = "split", IsRequired = true, EmitDefaultValue = true)]
        public bool Split { get; set; }

        /// <summary>
        /// Whether the user can view the post
        /// </summary>
        /// <value>Whether the user can view the post</value>
        [DataMember(Name = "view", IsRequired = true, EmitDefaultValue = true)]
        public bool View { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModForumAddDiscussionPost200ResponsePostCapabilities {\n");
            sb.Append("  Canreplyprivately: ").Append(Canreplyprivately).Append("\n");
            sb.Append("  Controlreadstatus: ").Append(Controlreadstatus).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("  Edit: ").Append(Edit).Append("\n");
            sb.Append("  Export: ").Append(Export).Append("\n");
            sb.Append("  Reply: ").Append(Reply).Append("\n");
            sb.Append("  Selfenrol: ").Append(Selfenrol).Append("\n");
            sb.Append("  Split: ").Append(Split).Append("\n");
            sb.Append("  View: ").Append(View).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
