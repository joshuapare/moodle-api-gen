/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModFeedbackGetFeedbacksByCourses200ResponseFeedbacksInner
    /// </summary>
    [DataContract(Name = "mod_feedback_get_feedbacks_by_courses_200_response_feedbacks_inner")]
    public partial class ModFeedbackGetFeedbacksByCourses200ResponseFeedbacksInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModFeedbackGetFeedbacksByCourses200ResponseFeedbacksInner" /> class.
        /// </summary>
        /// <param name="anonymous">Whether the feedback is anonymous. (default to null).</param>
        /// <param name="autonumbering">Whether questions should be auto-numbered. (default to 1).</param>
        /// <param name="completionsubmit">If this field is set to 1, then the activity will be automatically marked as complete on submission. (default to 0).</param>
        /// <param name="course">Course id this feedback is part of. (default to null).</param>
        /// <param name="coursemodule">coursemodule.</param>
        /// <param name="emailNotification">Whether email notifications will be sent to teachers. (default to null).</param>
        /// <param name="id">The primary key of the record. (default to null).</param>
        /// <param name="intro">Feedback introduction text. (default to &quot;&quot;).</param>
        /// <param name="introfiles">introfiles.</param>
        /// <param name="introformat">intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 0).</param>
        /// <param name="lang">Forced activity language.</param>
        /// <param name="multipleSubmit">Whether multiple submissions are allowed. (default to 1).</param>
        /// <param name="name">Feedback name. (default to &quot;null&quot;).</param>
        /// <param name="pageAfterSubmit">Text to display after submission. (default to &quot;null&quot;).</param>
        /// <param name="pageAfterSubmitformat">page_after_submit format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 0).</param>
        /// <param name="pageaftersubmitfiles">pageaftersubmitfiles.</param>
        /// <param name="publishStats">Whether stats should be published. (default to 0).</param>
        /// <param name="siteAfterSubmit">Link to next page after submission. (default to &quot;null&quot;).</param>
        /// <param name="timeclose">Allow answers until this time. (default to null).</param>
        /// <param name="timemodified">The time this record was modified. (default to null).</param>
        /// <param name="timeopen">Allow answers from this time. (default to null).</param>
        public ModFeedbackGetFeedbacksByCourses200ResponseFeedbacksInner(int anonymous = null, bool autonumbering = 1, bool completionsubmit = 0, int course = null, int coursemodule = default(int), bool emailNotification = null, int id = null, string intro = @"", List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> introfiles = default(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>), int introformat = 0, string lang = default(string), bool multipleSubmit = 1, string name = @"null", string pageAfterSubmit = @"null", int pageAfterSubmitformat = 0, List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> pageaftersubmitfiles = default(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>), bool publishStats = 0, string siteAfterSubmit = @"null", int timeclose = null, int timemodified = null, int timeopen = null)
        {
            this.Anonymous = anonymous;
            this.Autonumbering = autonumbering;
            this.Completionsubmit = completionsubmit;
            this.Course = course;
            this.Coursemodule = coursemodule;
            this.EmailNotification = emailNotification;
            this.Id = id;
            // use default value if no "intro" provided
            this.Intro = intro ?? @"";
            this.Introfiles = introfiles;
            this.Introformat = introformat;
            this.Lang = lang;
            this.MultipleSubmit = multipleSubmit;
            // use default value if no "name" provided
            this.Name = name ?? @"null";
            // use default value if no "pageAfterSubmit" provided
            this.PageAfterSubmit = pageAfterSubmit ?? @"null";
            this.PageAfterSubmitformat = pageAfterSubmitformat;
            this.Pageaftersubmitfiles = pageaftersubmitfiles;
            this.PublishStats = publishStats;
            // use default value if no "siteAfterSubmit" provided
            this.SiteAfterSubmit = siteAfterSubmit ?? @"null";
            this.Timeclose = timeclose;
            this.Timemodified = timemodified;
            this.Timeopen = timeopen;
        }

        /// <summary>
        /// Whether the feedback is anonymous.
        /// </summary>
        /// <value>Whether the feedback is anonymous.</value>
        [DataMember(Name = "anonymous", EmitDefaultValue = false)]
        public int Anonymous { get; set; }

        /// <summary>
        /// Whether questions should be auto-numbered.
        /// </summary>
        /// <value>Whether questions should be auto-numbered.</value>
        [DataMember(Name = "autonumbering", EmitDefaultValue = true)]
        public bool Autonumbering { get; set; }

        /// <summary>
        /// If this field is set to 1, then the activity will be automatically marked as complete on submission.
        /// </summary>
        /// <value>If this field is set to 1, then the activity will be automatically marked as complete on submission.</value>
        [DataMember(Name = "completionsubmit", EmitDefaultValue = true)]
        public bool Completionsubmit { get; set; }

        /// <summary>
        /// Course id this feedback is part of.
        /// </summary>
        /// <value>Course id this feedback is part of.</value>
        [DataMember(Name = "course", EmitDefaultValue = false)]
        public int Course { get; set; }

        /// <summary>
        /// coursemodule
        /// </summary>
        /// <value>coursemodule</value>
        [DataMember(Name = "coursemodule", EmitDefaultValue = false)]
        public int Coursemodule { get; set; }

        /// <summary>
        /// Whether email notifications will be sent to teachers.
        /// </summary>
        /// <value>Whether email notifications will be sent to teachers.</value>
        [DataMember(Name = "email_notification", EmitDefaultValue = true)]
        public bool EmailNotification { get; set; }

        /// <summary>
        /// The primary key of the record.
        /// </summary>
        /// <value>The primary key of the record.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Feedback introduction text.
        /// </summary>
        /// <value>Feedback introduction text.</value>
        [DataMember(Name = "intro", EmitDefaultValue = false)]
        public string Intro { get; set; }

        /// <summary>
        /// Gets or Sets Introfiles
        /// </summary>
        [DataMember(Name = "introfiles", EmitDefaultValue = false)]
        public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> Introfiles { get; set; }

        /// <summary>
        /// intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "introformat", EmitDefaultValue = false)]
        public int Introformat { get; set; }

        /// <summary>
        /// Forced activity language
        /// </summary>
        /// <value>Forced activity language</value>
        [DataMember(Name = "lang", EmitDefaultValue = false)]
        public string Lang { get; set; }

        /// <summary>
        /// Whether multiple submissions are allowed.
        /// </summary>
        /// <value>Whether multiple submissions are allowed.</value>
        [DataMember(Name = "multiple_submit", EmitDefaultValue = true)]
        public bool MultipleSubmit { get; set; }

        /// <summary>
        /// Feedback name.
        /// </summary>
        /// <value>Feedback name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Text to display after submission.
        /// </summary>
        /// <value>Text to display after submission.</value>
        [DataMember(Name = "page_after_submit", EmitDefaultValue = false)]
        public string PageAfterSubmit { get; set; }

        /// <summary>
        /// page_after_submit format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>page_after_submit format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "page_after_submitformat", EmitDefaultValue = false)]
        public int PageAfterSubmitformat { get; set; }

        /// <summary>
        /// Gets or Sets Pageaftersubmitfiles
        /// </summary>
        [DataMember(Name = "pageaftersubmitfiles", EmitDefaultValue = false)]
        public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> Pageaftersubmitfiles { get; set; }

        /// <summary>
        /// Whether stats should be published.
        /// </summary>
        /// <value>Whether stats should be published.</value>
        [DataMember(Name = "publish_stats", EmitDefaultValue = true)]
        public bool PublishStats { get; set; }

        /// <summary>
        /// Link to next page after submission.
        /// </summary>
        /// <value>Link to next page after submission.</value>
        [DataMember(Name = "site_after_submit", EmitDefaultValue = false)]
        public string SiteAfterSubmit { get; set; }

        /// <summary>
        /// Allow answers until this time.
        /// </summary>
        /// <value>Allow answers until this time.</value>
        [DataMember(Name = "timeclose", EmitDefaultValue = false)]
        public int Timeclose { get; set; }

        /// <summary>
        /// The time this record was modified.
        /// </summary>
        /// <value>The time this record was modified.</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// Allow answers from this time.
        /// </summary>
        /// <value>Allow answers from this time.</value>
        [DataMember(Name = "timeopen", EmitDefaultValue = false)]
        public int Timeopen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModFeedbackGetFeedbacksByCourses200ResponseFeedbacksInner {\n");
            sb.Append("  Anonymous: ").Append(Anonymous).Append("\n");
            sb.Append("  Autonumbering: ").Append(Autonumbering).Append("\n");
            sb.Append("  Completionsubmit: ").Append(Completionsubmit).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Coursemodule: ").Append(Coursemodule).Append("\n");
            sb.Append("  EmailNotification: ").Append(EmailNotification).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Intro: ").Append(Intro).Append("\n");
            sb.Append("  Introfiles: ").Append(Introfiles).Append("\n");
            sb.Append("  Introformat: ").Append(Introformat).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  MultipleSubmit: ").Append(MultipleSubmit).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PageAfterSubmit: ").Append(PageAfterSubmit).Append("\n");
            sb.Append("  PageAfterSubmitformat: ").Append(PageAfterSubmitformat).Append("\n");
            sb.Append("  Pageaftersubmitfiles: ").Append(Pageaftersubmitfiles).Append("\n");
            sb.Append("  PublishStats: ").Append(PublishStats).Append("\n");
            sb.Append("  SiteAfterSubmit: ").Append(SiteAfterSubmit).Append("\n");
            sb.Append("  Timeclose: ").Append(Timeclose).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Timeopen: ").Append(Timeopen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
