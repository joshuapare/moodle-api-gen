/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreWebserviceGetSiteInfo200Response
    /// </summary>
    [DataContract(Name = "core_webservice_get_site_info_200_response")]
    public partial class CoreWebserviceGetSiteInfo200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreWebserviceGetSiteInfo200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreWebserviceGetSiteInfo200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreWebserviceGetSiteInfo200Response" /> class.
        /// </summary>
        /// <param name="advancedfeatures">advancedfeatures.</param>
        /// <param name="downloadfiles">1 if users are allowed to download files, 0 if not (default to null).</param>
        /// <param name="firstname">first name (required) (default to &quot;null&quot;).</param>
        /// <param name="fullname">user full name (required) (default to &quot;null&quot;).</param>
        /// <param name="functions">functions (required).</param>
        /// <param name="lang">Current language. (required) (default to &quot;null&quot;).</param>
        /// <param name="lastname">last name (required) (default to &quot;null&quot;).</param>
        /// <param name="limitconcurrentlogins">Number of concurrent sessions allowed (default to null).</param>
        /// <param name="mobilecssurl">Mobile custom CSS theme (default to &quot;null&quot;).</param>
        /// <param name="release">Moodle release number (default to &quot;null&quot;).</param>
        /// <param name="sitecalendartype">Calendar type set in the site. (default to &quot;null&quot;).</param>
        /// <param name="siteid">Site course ID (default to null).</param>
        /// <param name="sitename">site name (required) (default to &quot;null&quot;).</param>
        /// <param name="siteurl">site url (required) (default to &quot;null&quot;).</param>
        /// <param name="theme">Current theme for the user. (default to &quot;null&quot;).</param>
        /// <param name="uploadfiles">1 if users are allowed to upload files, 0 if not (default to null).</param>
        /// <param name="usercalendartype">Calendar typed used by the user. (default to &quot;null&quot;).</param>
        /// <param name="usercanmanageownfiles">true if the user can manage his own files (default to null).</param>
        /// <param name="userhomepage">the default home page for the user: 0 for the site home, 1 for dashboard (default to null).</param>
        /// <param name="userid">user id (required).</param>
        /// <param name="userissiteadmin">Whether the user is a site admin or not. (default to null).</param>
        /// <param name="usermaxuploadfilesize">user max upload file size (bytes). -1 means the user can ignore the upload file size (default to null).</param>
        /// <param name="username">username (required) (default to &quot;null&quot;).</param>
        /// <param name="userpictureurl">the user profile picture.                     Warning: this url is the public URL that only works when forcelogin is set to NO and guestaccess is set to YES.                     In order to retrieve user profile pictures independently of the Moodle config, replace \&quot;pluginfile.php\&quot; by                     \&quot;webservice/pluginfile.php?token&#x3D;WSTOKEN&amp;file&#x3D;\&quot;                     Of course the user can only see profile picture depending                     on his/her permissions. Moreover it is recommended to use HTTPS too. (required) (default to &quot;null&quot;).</param>
        /// <param name="userprivateaccesskey">Private user access key for fetching files. (default to &quot;null&quot;).</param>
        /// <param name="userquota">user quota (bytes). 0 means user can ignore the quota (default to null).</param>
        /// <param name="usersessionscount">Number of active sessions for current user.                     Only returned when limitconcurrentlogins is used. (default to null).</param>
        /// <param name="varVersion">Moodle version number (default to &quot;null&quot;).</param>
        public CoreWebserviceGetSiteInfo200Response(List<CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner> advancedfeatures = default(List<CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner>), int downloadfiles = null, string firstname = @"null", string fullname = @"null", List<CoreWebserviceGetSiteInfo200ResponseFunctionsInner> functions = default(List<CoreWebserviceGetSiteInfo200ResponseFunctionsInner>), string lang = @"null", string lastname = @"null", int limitconcurrentlogins = null, string mobilecssurl = @"null", string release = @"null", string sitecalendartype = @"null", int siteid = null, string sitename = @"null", string siteurl = @"null", string theme = @"null", int uploadfiles = null, string usercalendartype = @"null", bool usercanmanageownfiles = null, int userhomepage = null, int userid = default(int), bool userissiteadmin = null, int usermaxuploadfilesize = null, string username = @"null", string userpictureurl = @"null", string userprivateaccesskey = @"null", int userquota = null, int usersessionscount = null, string varVersion = @"null")
        {
            // to ensure "firstname" is required (not null)
            if (firstname == null)
            {
                throw new ArgumentNullException("firstname is a required property for CoreWebserviceGetSiteInfo200Response and cannot be null");
            }
            this.Firstname = firstname;
            // to ensure "fullname" is required (not null)
            if (fullname == null)
            {
                throw new ArgumentNullException("fullname is a required property for CoreWebserviceGetSiteInfo200Response and cannot be null");
            }
            this.Fullname = fullname;
            // to ensure "functions" is required (not null)
            if (functions == null)
            {
                throw new ArgumentNullException("functions is a required property for CoreWebserviceGetSiteInfo200Response and cannot be null");
            }
            this.Functions = functions;
            // to ensure "lang" is required (not null)
            if (lang == null)
            {
                throw new ArgumentNullException("lang is a required property for CoreWebserviceGetSiteInfo200Response and cannot be null");
            }
            this.Lang = lang;
            // to ensure "lastname" is required (not null)
            if (lastname == null)
            {
                throw new ArgumentNullException("lastname is a required property for CoreWebserviceGetSiteInfo200Response and cannot be null");
            }
            this.Lastname = lastname;
            // to ensure "sitename" is required (not null)
            if (sitename == null)
            {
                throw new ArgumentNullException("sitename is a required property for CoreWebserviceGetSiteInfo200Response and cannot be null");
            }
            this.Sitename = sitename;
            // to ensure "siteurl" is required (not null)
            if (siteurl == null)
            {
                throw new ArgumentNullException("siteurl is a required property for CoreWebserviceGetSiteInfo200Response and cannot be null");
            }
            this.Siteurl = siteurl;
            this.Userid = userid;
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new ArgumentNullException("username is a required property for CoreWebserviceGetSiteInfo200Response and cannot be null");
            }
            this.Username = username;
            // to ensure "userpictureurl" is required (not null)
            if (userpictureurl == null)
            {
                throw new ArgumentNullException("userpictureurl is a required property for CoreWebserviceGetSiteInfo200Response and cannot be null");
            }
            this.Userpictureurl = userpictureurl;
            this.Advancedfeatures = advancedfeatures;
            this.Downloadfiles = downloadfiles;
            this.Limitconcurrentlogins = limitconcurrentlogins;
            // use default value if no "mobilecssurl" provided
            this.Mobilecssurl = mobilecssurl ?? @"null";
            // use default value if no "release" provided
            this.Release = release ?? @"null";
            // use default value if no "sitecalendartype" provided
            this.Sitecalendartype = sitecalendartype ?? @"null";
            this.Siteid = siteid;
            // use default value if no "theme" provided
            this.Theme = theme ?? @"null";
            this.Uploadfiles = uploadfiles;
            // use default value if no "usercalendartype" provided
            this.Usercalendartype = usercalendartype ?? @"null";
            this.Usercanmanageownfiles = usercanmanageownfiles;
            this.Userhomepage = userhomepage;
            this.Userissiteadmin = userissiteadmin;
            this.Usermaxuploadfilesize = usermaxuploadfilesize;
            // use default value if no "userprivateaccesskey" provided
            this.Userprivateaccesskey = userprivateaccesskey ?? @"null";
            this.Userquota = userquota;
            this.Usersessionscount = usersessionscount;
            // use default value if no "varVersion" provided
            this.VarVersion = varVersion ?? @"null";
        }

        /// <summary>
        /// Gets or Sets Advancedfeatures
        /// </summary>
        [DataMember(Name = "advancedfeatures", EmitDefaultValue = false)]
        public List<CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner> Advancedfeatures { get; set; }

        /// <summary>
        /// 1 if users are allowed to download files, 0 if not
        /// </summary>
        /// <value>1 if users are allowed to download files, 0 if not</value>
        [DataMember(Name = "downloadfiles", EmitDefaultValue = false)]
        public int Downloadfiles { get; set; }

        /// <summary>
        /// first name
        /// </summary>
        /// <value>first name</value>
        [DataMember(Name = "firstname", IsRequired = true, EmitDefaultValue = true)]
        public string Firstname { get; set; }

        /// <summary>
        /// user full name
        /// </summary>
        /// <value>user full name</value>
        [DataMember(Name = "fullname", IsRequired = true, EmitDefaultValue = true)]
        public string Fullname { get; set; }

        /// <summary>
        /// Gets or Sets Functions
        /// </summary>
        [DataMember(Name = "functions", IsRequired = true, EmitDefaultValue = true)]
        public List<CoreWebserviceGetSiteInfo200ResponseFunctionsInner> Functions { get; set; }

        /// <summary>
        /// Current language.
        /// </summary>
        /// <value>Current language.</value>
        [DataMember(Name = "lang", IsRequired = true, EmitDefaultValue = true)]
        public string Lang { get; set; }

        /// <summary>
        /// last name
        /// </summary>
        /// <value>last name</value>
        [DataMember(Name = "lastname", IsRequired = true, EmitDefaultValue = true)]
        public string Lastname { get; set; }

        /// <summary>
        /// Number of concurrent sessions allowed
        /// </summary>
        /// <value>Number of concurrent sessions allowed</value>
        [DataMember(Name = "limitconcurrentlogins", EmitDefaultValue = false)]
        public int Limitconcurrentlogins { get; set; }

        /// <summary>
        /// Mobile custom CSS theme
        /// </summary>
        /// <value>Mobile custom CSS theme</value>
        [DataMember(Name = "mobilecssurl", EmitDefaultValue = false)]
        public string Mobilecssurl { get; set; }

        /// <summary>
        /// Moodle release number
        /// </summary>
        /// <value>Moodle release number</value>
        [DataMember(Name = "release", EmitDefaultValue = false)]
        public string Release { get; set; }

        /// <summary>
        /// Calendar type set in the site.
        /// </summary>
        /// <value>Calendar type set in the site.</value>
        [DataMember(Name = "sitecalendartype", EmitDefaultValue = false)]
        public string Sitecalendartype { get; set; }

        /// <summary>
        /// Site course ID
        /// </summary>
        /// <value>Site course ID</value>
        [DataMember(Name = "siteid", EmitDefaultValue = false)]
        public int Siteid { get; set; }

        /// <summary>
        /// site name
        /// </summary>
        /// <value>site name</value>
        [DataMember(Name = "sitename", IsRequired = true, EmitDefaultValue = true)]
        public string Sitename { get; set; }

        /// <summary>
        /// site url
        /// </summary>
        /// <value>site url</value>
        [DataMember(Name = "siteurl", IsRequired = true, EmitDefaultValue = true)]
        public string Siteurl { get; set; }

        /// <summary>
        /// Current theme for the user.
        /// </summary>
        /// <value>Current theme for the user.</value>
        [DataMember(Name = "theme", EmitDefaultValue = false)]
        public string Theme { get; set; }

        /// <summary>
        /// 1 if users are allowed to upload files, 0 if not
        /// </summary>
        /// <value>1 if users are allowed to upload files, 0 if not</value>
        [DataMember(Name = "uploadfiles", EmitDefaultValue = false)]
        public int Uploadfiles { get; set; }

        /// <summary>
        /// Calendar typed used by the user.
        /// </summary>
        /// <value>Calendar typed used by the user.</value>
        [DataMember(Name = "usercalendartype", EmitDefaultValue = false)]
        public string Usercalendartype { get; set; }

        /// <summary>
        /// true if the user can manage his own files
        /// </summary>
        /// <value>true if the user can manage his own files</value>
        [DataMember(Name = "usercanmanageownfiles", EmitDefaultValue = true)]
        public bool Usercanmanageownfiles { get; set; }

        /// <summary>
        /// the default home page for the user: 0 for the site home, 1 for dashboard
        /// </summary>
        /// <value>the default home page for the user: 0 for the site home, 1 for dashboard</value>
        [DataMember(Name = "userhomepage", EmitDefaultValue = false)]
        public int Userhomepage { get; set; }

        /// <summary>
        /// user id
        /// </summary>
        /// <value>user id</value>
        [DataMember(Name = "userid", IsRequired = true, EmitDefaultValue = true)]
        public int Userid { get; set; }

        /// <summary>
        /// Whether the user is a site admin or not.
        /// </summary>
        /// <value>Whether the user is a site admin or not.</value>
        [DataMember(Name = "userissiteadmin", EmitDefaultValue = true)]
        public bool Userissiteadmin { get; set; }

        /// <summary>
        /// user max upload file size (bytes). -1 means the user can ignore the upload file size
        /// </summary>
        /// <value>user max upload file size (bytes). -1 means the user can ignore the upload file size</value>
        [DataMember(Name = "usermaxuploadfilesize", EmitDefaultValue = false)]
        public int Usermaxuploadfilesize { get; set; }

        /// <summary>
        /// username
        /// </summary>
        /// <value>username</value>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// the user profile picture.                     Warning: this url is the public URL that only works when forcelogin is set to NO and guestaccess is set to YES.                     In order to retrieve user profile pictures independently of the Moodle config, replace \&quot;pluginfile.php\&quot; by                     \&quot;webservice/pluginfile.php?token&#x3D;WSTOKEN&amp;file&#x3D;\&quot;                     Of course the user can only see profile picture depending                     on his/her permissions. Moreover it is recommended to use HTTPS too.
        /// </summary>
        /// <value>the user profile picture.                     Warning: this url is the public URL that only works when forcelogin is set to NO and guestaccess is set to YES.                     In order to retrieve user profile pictures independently of the Moodle config, replace \&quot;pluginfile.php\&quot; by                     \&quot;webservice/pluginfile.php?token&#x3D;WSTOKEN&amp;file&#x3D;\&quot;                     Of course the user can only see profile picture depending                     on his/her permissions. Moreover it is recommended to use HTTPS too.</value>
        [DataMember(Name = "userpictureurl", IsRequired = true, EmitDefaultValue = true)]
        public string Userpictureurl { get; set; }

        /// <summary>
        /// Private user access key for fetching files.
        /// </summary>
        /// <value>Private user access key for fetching files.</value>
        [DataMember(Name = "userprivateaccesskey", EmitDefaultValue = false)]
        public string Userprivateaccesskey { get; set; }

        /// <summary>
        /// user quota (bytes). 0 means user can ignore the quota
        /// </summary>
        /// <value>user quota (bytes). 0 means user can ignore the quota</value>
        [DataMember(Name = "userquota", EmitDefaultValue = false)]
        public int Userquota { get; set; }

        /// <summary>
        /// Number of active sessions for current user.                     Only returned when limitconcurrentlogins is used.
        /// </summary>
        /// <value>Number of active sessions for current user.                     Only returned when limitconcurrentlogins is used.</value>
        [DataMember(Name = "usersessionscount", EmitDefaultValue = false)]
        public int Usersessionscount { get; set; }

        /// <summary>
        /// Moodle version number
        /// </summary>
        /// <value>Moodle version number</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreWebserviceGetSiteInfo200Response {\n");
            sb.Append("  Advancedfeatures: ").Append(Advancedfeatures).Append("\n");
            sb.Append("  Downloadfiles: ").Append(Downloadfiles).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Fullname: ").Append(Fullname).Append("\n");
            sb.Append("  Functions: ").Append(Functions).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  Limitconcurrentlogins: ").Append(Limitconcurrentlogins).Append("\n");
            sb.Append("  Mobilecssurl: ").Append(Mobilecssurl).Append("\n");
            sb.Append("  Release: ").Append(Release).Append("\n");
            sb.Append("  Sitecalendartype: ").Append(Sitecalendartype).Append("\n");
            sb.Append("  Siteid: ").Append(Siteid).Append("\n");
            sb.Append("  Sitename: ").Append(Sitename).Append("\n");
            sb.Append("  Siteurl: ").Append(Siteurl).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  Uploadfiles: ").Append(Uploadfiles).Append("\n");
            sb.Append("  Usercalendartype: ").Append(Usercalendartype).Append("\n");
            sb.Append("  Usercanmanageownfiles: ").Append(Usercanmanageownfiles).Append("\n");
            sb.Append("  Userhomepage: ").Append(Userhomepage).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("  Userissiteadmin: ").Append(Userissiteadmin).Append("\n");
            sb.Append("  Usermaxuploadfilesize: ").Append(Usermaxuploadfilesize).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Userpictureurl: ").Append(Userpictureurl).Append("\n");
            sb.Append("  Userprivateaccesskey: ").Append(Userprivateaccesskey).Append("\n");
            sb.Append("  Userquota: ").Append(Userquota).Append("\n");
            sb.Append("  Usersessionscount: ").Append(Usersessionscount).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
