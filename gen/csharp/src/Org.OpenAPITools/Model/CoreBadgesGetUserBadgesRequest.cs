/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreBadgesGetUserBadgesRequest
    /// </summary>
    [DataContract(Name = "core_badges_get_user_badges_request")]
    public partial class CoreBadgesGetUserBadgesRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreBadgesGetUserBadgesRequest" /> class.
        /// </summary>
        /// <param name="courseid">Filter badges by course id, empty all the courses (default to 0).</param>
        /// <param name="onlypublic">Whether to return only public badges (default to false).</param>
        /// <param name="page">The page of records to return. (default to 0).</param>
        /// <param name="perpage">The number of records to return per page (default to 0).</param>
        /// <param name="search">A simple string to search for (default to &quot;&quot;).</param>
        /// <param name="userid">Badges only for this user id, empty for current user (default to 0).</param>
        public CoreBadgesGetUserBadgesRequest(int courseid = 0, bool onlypublic = false, int page = 0, int perpage = 0, string search = @"", int userid = 0)
        {
            this.Courseid = courseid;
            this.Onlypublic = onlypublic;
            this.Page = page;
            this.Perpage = perpage;
            // use default value if no "search" provided
            this.Search = search ?? @"";
            this.Userid = userid;
        }

        /// <summary>
        /// Filter badges by course id, empty all the courses
        /// </summary>
        /// <value>Filter badges by course id, empty all the courses</value>
        [DataMember(Name = "courseid", EmitDefaultValue = false)]
        public int Courseid { get; set; }

        /// <summary>
        /// Whether to return only public badges
        /// </summary>
        /// <value>Whether to return only public badges</value>
        [DataMember(Name = "onlypublic", EmitDefaultValue = true)]
        public bool Onlypublic { get; set; }

        /// <summary>
        /// The page of records to return.
        /// </summary>
        /// <value>The page of records to return.</value>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public int Page { get; set; }

        /// <summary>
        /// The number of records to return per page
        /// </summary>
        /// <value>The number of records to return per page</value>
        [DataMember(Name = "perpage", EmitDefaultValue = false)]
        public int Perpage { get; set; }

        /// <summary>
        /// A simple string to search for
        /// </summary>
        /// <value>A simple string to search for</value>
        [DataMember(Name = "search", EmitDefaultValue = false)]
        public string Search { get; set; }

        /// <summary>
        /// Badges only for this user id, empty for current user
        /// </summary>
        /// <value>Badges only for this user id, empty for current user</value>
        [DataMember(Name = "userid", EmitDefaultValue = false)]
        public int Userid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreBadgesGetUserBadgesRequest {\n");
            sb.Append("  Courseid: ").Append(Courseid).Append("\n");
            sb.Append("  Onlypublic: ").Append(Onlypublic).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Perpage: ").Append(Perpage).Append("\n");
            sb.Append("  Search: ").Append(Search).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
