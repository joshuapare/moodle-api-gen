/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModDataGetFields200ResponseFieldsInner
    /// </summary>
    [DataContract(Name = "mod_data_get_fields_200_response_fields_inner")]
    public partial class ModDataGetFields200ResponseFieldsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModDataGetFields200ResponseFieldsInner" /> class.
        /// </summary>
        /// <param name="dataid">The field type of the content. (default to 0).</param>
        /// <param name="description">The field description. (default to &quot;null&quot;).</param>
        /// <param name="id">Field id. (default to null).</param>
        /// <param name="name">The field name. (default to &quot;null&quot;).</param>
        /// <param name="param1">Field parameters (default to &quot;null&quot;).</param>
        /// <param name="param2">Field parameters.</param>
        /// <param name="param3">Field parameters.</param>
        /// <param name="param4">Field parameters.</param>
        /// <param name="param5">Field parameters.</param>
        /// <param name="param6">Field parameters.</param>
        /// <param name="param7">Field parameters.</param>
        /// <param name="param8">Field parameters.</param>
        /// <param name="param9">Field parameters.</param>
        /// <param name="param10">Field parameters.</param>
        /// <param name="required">Whether is a field required or not. (default to 0).</param>
        /// <param name="type">The field type. (default to &quot;null&quot;).</param>
        public ModDataGetFields200ResponseFieldsInner(int dataid = 0, string description = @"null", int id = null, string name = @"null", string param1 = @"null", string param2 = default(string), string param3 = default(string), string param4 = default(string), string param5 = default(string), string param6 = default(string), string param7 = default(string), string param8 = default(string), string param9 = default(string), string param10 = default(string), bool required = 0, string type = @"null")
        {
            this.Dataid = dataid;
            // use default value if no "description" provided
            this.Description = description ?? @"null";
            this.Id = id;
            // use default value if no "name" provided
            this.Name = name ?? @"null";
            // use default value if no "param1" provided
            this.Param1 = param1 ?? @"null";
            this.Param2 = param2;
            this.Param3 = param3;
            this.Param4 = param4;
            this.Param5 = param5;
            this.Param6 = param6;
            this.Param7 = param7;
            this.Param8 = param8;
            this.Param9 = param9;
            this.Param10 = param10;
            this.Required = required;
            // use default value if no "type" provided
            this.Type = type ?? @"null";
        }

        /// <summary>
        /// The field type of the content.
        /// </summary>
        /// <value>The field type of the content.</value>
        [DataMember(Name = "dataid", EmitDefaultValue = false)]
        public int Dataid { get; set; }

        /// <summary>
        /// The field description.
        /// </summary>
        /// <value>The field description.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Field id.
        /// </summary>
        /// <value>Field id.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The field name.
        /// </summary>
        /// <value>The field name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Field parameters
        /// </summary>
        /// <value>Field parameters</value>
        [DataMember(Name = "param1", EmitDefaultValue = false)]
        public string Param1 { get; set; }

        /// <summary>
        /// Field parameters
        /// </summary>
        /// <value>Field parameters</value>
        [DataMember(Name = "param2", EmitDefaultValue = false)]
        public string Param2 { get; set; }

        /// <summary>
        /// Field parameters
        /// </summary>
        /// <value>Field parameters</value>
        [DataMember(Name = "param3", EmitDefaultValue = false)]
        public string Param3 { get; set; }

        /// <summary>
        /// Field parameters
        /// </summary>
        /// <value>Field parameters</value>
        [DataMember(Name = "param4", EmitDefaultValue = false)]
        public string Param4 { get; set; }

        /// <summary>
        /// Field parameters
        /// </summary>
        /// <value>Field parameters</value>
        [DataMember(Name = "param5", EmitDefaultValue = false)]
        public string Param5 { get; set; }

        /// <summary>
        /// Field parameters
        /// </summary>
        /// <value>Field parameters</value>
        [DataMember(Name = "param6", EmitDefaultValue = false)]
        public string Param6 { get; set; }

        /// <summary>
        /// Field parameters
        /// </summary>
        /// <value>Field parameters</value>
        [DataMember(Name = "param7", EmitDefaultValue = false)]
        public string Param7 { get; set; }

        /// <summary>
        /// Field parameters
        /// </summary>
        /// <value>Field parameters</value>
        [DataMember(Name = "param8", EmitDefaultValue = false)]
        public string Param8 { get; set; }

        /// <summary>
        /// Field parameters
        /// </summary>
        /// <value>Field parameters</value>
        [DataMember(Name = "param9", EmitDefaultValue = false)]
        public string Param9 { get; set; }

        /// <summary>
        /// Field parameters
        /// </summary>
        /// <value>Field parameters</value>
        [DataMember(Name = "param10", EmitDefaultValue = false)]
        public string Param10 { get; set; }

        /// <summary>
        /// Whether is a field required or not.
        /// </summary>
        /// <value>Whether is a field required or not.</value>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// The field type.
        /// </summary>
        /// <value>The field type.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModDataGetFields200ResponseFieldsInner {\n");
            sb.Append("  Dataid: ").Append(Dataid).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Param1: ").Append(Param1).Append("\n");
            sb.Append("  Param2: ").Append(Param2).Append("\n");
            sb.Append("  Param3: ").Append(Param3).Append("\n");
            sb.Append("  Param4: ").Append(Param4).Append("\n");
            sb.Append("  Param5: ").Append(Param5).Append("\n");
            sb.Append("  Param6: ").Append(Param6).Append("\n");
            sb.Append("  Param7: ").Append(Param7).Append("\n");
            sb.Append("  Param8: ").Append(Param8).Append("\n");
            sb.Append("  Param9: ").Append(Param9).Append("\n");
            sb.Append("  Param10: ").Append(Param10).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
