/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModForumGetDiscussionPosts200ResponseRatinginfo
    /// </summary>
    [DataContract(Name = "mod_forum_get_discussion_posts_200_response_ratinginfo")]
    public partial class ModForumGetDiscussionPosts200ResponseRatinginfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumGetDiscussionPosts200ResponseRatinginfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModForumGetDiscussionPosts200ResponseRatinginfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumGetDiscussionPosts200ResponseRatinginfo" /> class.
        /// </summary>
        /// <param name="canviewall">Whether the user can view all the individual ratings..</param>
        /// <param name="canviewany">Whether the user can view aggregate of ratings of others..</param>
        /// <param name="component">Context name. (required).</param>
        /// <param name="contextid">Context id. (required).</param>
        /// <param name="ratingarea">Rating area name. (required).</param>
        /// <param name="ratings">ratings.</param>
        /// <param name="scales">scales.</param>
        public ModForumGetDiscussionPosts200ResponseRatinginfo(bool canviewall = default(bool), bool canviewany = default(bool), string component = default(string), int contextid = default(int), string ratingarea = default(string), List<ModForumGetDiscussionPosts200ResponseRatinginfoRatingsInner> ratings = default(List<ModForumGetDiscussionPosts200ResponseRatinginfoRatingsInner>), List<ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner> scales = default(List<ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner>))
        {
            // to ensure "component" is required (not null)
            if (component == null)
            {
                throw new ArgumentNullException("component is a required property for ModForumGetDiscussionPosts200ResponseRatinginfo and cannot be null");
            }
            this.Component = component;
            this.Contextid = contextid;
            // to ensure "ratingarea" is required (not null)
            if (ratingarea == null)
            {
                throw new ArgumentNullException("ratingarea is a required property for ModForumGetDiscussionPosts200ResponseRatinginfo and cannot be null");
            }
            this.Ratingarea = ratingarea;
            this.Canviewall = canviewall;
            this.Canviewany = canviewany;
            this.Ratings = ratings;
            this.Scales = scales;
        }

        /// <summary>
        /// Whether the user can view all the individual ratings.
        /// </summary>
        /// <value>Whether the user can view all the individual ratings.</value>
        [DataMember(Name = "canviewall", EmitDefaultValue = true)]
        public bool Canviewall { get; set; }

        /// <summary>
        /// Whether the user can view aggregate of ratings of others.
        /// </summary>
        /// <value>Whether the user can view aggregate of ratings of others.</value>
        [DataMember(Name = "canviewany", EmitDefaultValue = true)]
        public bool Canviewany { get; set; }

        /// <summary>
        /// Context name.
        /// </summary>
        /// <value>Context name.</value>
        [DataMember(Name = "component", IsRequired = true, EmitDefaultValue = true)]
        public string Component { get; set; }

        /// <summary>
        /// Context id.
        /// </summary>
        /// <value>Context id.</value>
        [DataMember(Name = "contextid", IsRequired = true, EmitDefaultValue = true)]
        public int Contextid { get; set; }

        /// <summary>
        /// Rating area name.
        /// </summary>
        /// <value>Rating area name.</value>
        [DataMember(Name = "ratingarea", IsRequired = true, EmitDefaultValue = true)]
        public string Ratingarea { get; set; }

        /// <summary>
        /// Gets or Sets Ratings
        /// </summary>
        [DataMember(Name = "ratings", EmitDefaultValue = false)]
        public List<ModForumGetDiscussionPosts200ResponseRatinginfoRatingsInner> Ratings { get; set; }

        /// <summary>
        /// Gets or Sets Scales
        /// </summary>
        [DataMember(Name = "scales", EmitDefaultValue = false)]
        public List<ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner> Scales { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModForumGetDiscussionPosts200ResponseRatinginfo {\n");
            sb.Append("  Canviewall: ").Append(Canviewall).Append("\n");
            sb.Append("  Canviewany: ").Append(Canviewany).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Contextid: ").Append(Contextid).Append("\n");
            sb.Append("  Ratingarea: ").Append(Ratingarea).Append("\n");
            sb.Append("  Ratings: ").Append(Ratings).Append("\n");
            sb.Append("  Scales: ").Append(Scales).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
