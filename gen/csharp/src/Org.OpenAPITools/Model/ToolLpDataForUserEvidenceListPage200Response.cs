/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ToolLpDataForUserEvidenceListPage200Response
    /// </summary>
    [DataContract(Name = "tool_lp_data_for_user_evidence_list_page_200_response")]
    public partial class ToolLpDataForUserEvidenceListPage200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForUserEvidenceListPage200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolLpDataForUserEvidenceListPage200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForUserEvidenceListPage200Response" /> class.
        /// </summary>
        /// <param name="canmanage">Can the current user manage the user&#39;s evidence (required) (default to null).</param>
        /// <param name="evidence">evidence (required).</param>
        /// <param name="navigation">navigation (required).</param>
        /// <param name="pluginbaseurl">Url to the tool_lp plugin folder on this Moodle site (required).</param>
        /// <param name="userid">The user ID (required).</param>
        public ToolLpDataForUserEvidenceListPage200Response(bool canmanage = null, List<ToolLpDataForUserEvidenceListPage200ResponseEvidenceInner> evidence = default(List<ToolLpDataForUserEvidenceListPage200ResponseEvidenceInner>), List<Object> navigation = default(List<Object>), string pluginbaseurl = default(string), int userid = default(int))
        {
            this.Canmanage = canmanage;
            // to ensure "evidence" is required (not null)
            if (evidence == null)
            {
                throw new ArgumentNullException("evidence is a required property for ToolLpDataForUserEvidenceListPage200Response and cannot be null");
            }
            this.Evidence = evidence;
            // to ensure "navigation" is required (not null)
            if (navigation == null)
            {
                throw new ArgumentNullException("navigation is a required property for ToolLpDataForUserEvidenceListPage200Response and cannot be null");
            }
            this.Navigation = navigation;
            // to ensure "pluginbaseurl" is required (not null)
            if (pluginbaseurl == null)
            {
                throw new ArgumentNullException("pluginbaseurl is a required property for ToolLpDataForUserEvidenceListPage200Response and cannot be null");
            }
            this.Pluginbaseurl = pluginbaseurl;
            this.Userid = userid;
        }

        /// <summary>
        /// Can the current user manage the user&#39;s evidence
        /// </summary>
        /// <value>Can the current user manage the user&#39;s evidence</value>
        [DataMember(Name = "canmanage", IsRequired = true, EmitDefaultValue = true)]
        public bool Canmanage { get; set; }

        /// <summary>
        /// Gets or Sets Evidence
        /// </summary>
        [DataMember(Name = "evidence", IsRequired = true, EmitDefaultValue = true)]
        public List<ToolLpDataForUserEvidenceListPage200ResponseEvidenceInner> Evidence { get; set; }

        /// <summary>
        /// Gets or Sets Navigation
        /// </summary>
        [DataMember(Name = "navigation", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Navigation { get; set; }

        /// <summary>
        /// Url to the tool_lp plugin folder on this Moodle site
        /// </summary>
        /// <value>Url to the tool_lp plugin folder on this Moodle site</value>
        [DataMember(Name = "pluginbaseurl", IsRequired = true, EmitDefaultValue = true)]
        public string Pluginbaseurl { get; set; }

        /// <summary>
        /// The user ID
        /// </summary>
        /// <value>The user ID</value>
        [DataMember(Name = "userid", IsRequired = true, EmitDefaultValue = true)]
        public int Userid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolLpDataForUserEvidenceListPage200Response {\n");
            sb.Append("  Canmanage: ").Append(Canmanage).Append("\n");
            sb.Append("  Evidence: ").Append(Evidence).Append("\n");
            sb.Append("  Navigation: ").Append(Navigation).Append("\n");
            sb.Append("  Pluginbaseurl: ").Append(Pluginbaseurl).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
