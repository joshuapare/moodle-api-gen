/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreCompetencyListCompetencyFrameworksRequest
    /// </summary>
    [DataContract(Name = "core_competency_list_competency_frameworks_request")]
    public partial class CoreCompetencyListCompetencyFrameworksRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCompetencyListCompetencyFrameworksRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreCompetencyListCompetencyFrameworksRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCompetencyListCompetencyFrameworksRequest" /> class.
        /// </summary>
        /// <param name="context">context (required).</param>
        /// <param name="includes">What other contextes to fetch the frameworks from. (children, parents, self) (default to &quot;children&quot;).</param>
        /// <param name="limit">Return this number of records at most. (default to 0).</param>
        /// <param name="onlyvisible">Only visible frameworks will be returned if visible true (default to false).</param>
        /// <param name="order">Sort direction. Should be either ASC or DESC (default to &quot;&quot;).</param>
        /// <param name="query">A query string to filter the results (default to &quot;&quot;).</param>
        /// <param name="skip">Skip this number of records before returning results (default to 0).</param>
        /// <param name="sort">Column to sort by. (default to &quot;shortname&quot;).</param>
        public CoreCompetencyListCompetencyFrameworksRequest(CoreCohortSearchCohortsRequestContext context = default(CoreCohortSearchCohortsRequestContext), string includes = @"children", int limit = 0, bool onlyvisible = false, string order = @"", string query = @"", int skip = 0, string sort = @"shortname")
        {
            // to ensure "context" is required (not null)
            if (context == null)
            {
                throw new ArgumentNullException("context is a required property for CoreCompetencyListCompetencyFrameworksRequest and cannot be null");
            }
            this.Context = context;
            // use default value if no "includes" provided
            this.Includes = includes ?? @"children";
            this.Limit = limit;
            this.Onlyvisible = onlyvisible;
            // use default value if no "order" provided
            this.Order = order ?? @"";
            // use default value if no "query" provided
            this.Query = query ?? @"";
            this.Skip = skip;
            // use default value if no "sort" provided
            this.Sort = sort ?? @"shortname";
        }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "context", IsRequired = true, EmitDefaultValue = true)]
        public CoreCohortSearchCohortsRequestContext Context { get; set; }

        /// <summary>
        /// What other contextes to fetch the frameworks from. (children, parents, self)
        /// </summary>
        /// <value>What other contextes to fetch the frameworks from. (children, parents, self)</value>
        [DataMember(Name = "includes", EmitDefaultValue = false)]
        public string Includes { get; set; }

        /// <summary>
        /// Return this number of records at most.
        /// </summary>
        /// <value>Return this number of records at most.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Only visible frameworks will be returned if visible true
        /// </summary>
        /// <value>Only visible frameworks will be returned if visible true</value>
        [DataMember(Name = "onlyvisible", EmitDefaultValue = true)]
        public bool Onlyvisible { get; set; }

        /// <summary>
        /// Sort direction. Should be either ASC or DESC
        /// </summary>
        /// <value>Sort direction. Should be either ASC or DESC</value>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public string Order { get; set; }

        /// <summary>
        /// A query string to filter the results
        /// </summary>
        /// <value>A query string to filter the results</value>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public string Query { get; set; }

        /// <summary>
        /// Skip this number of records before returning results
        /// </summary>
        /// <value>Skip this number of records before returning results</value>
        [DataMember(Name = "skip", EmitDefaultValue = false)]
        public int Skip { get; set; }

        /// <summary>
        /// Column to sort by.
        /// </summary>
        /// <value>Column to sort by.</value>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public string Sort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCompetencyListCompetencyFrameworksRequest {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Includes: ").Append(Includes).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Onlyvisible: ").Append(Onlyvisible).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
