/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModAssignGetSubmissionStatus200ResponseLastattempt
    /// </summary>
    [DataContract(Name = "mod_assign_get_submission_status_200_response_lastattempt")]
    public partial class ModAssignGetSubmissionStatus200ResponseLastattempt : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignGetSubmissionStatus200ResponseLastattempt" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModAssignGetSubmissionStatus200ResponseLastattempt() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignGetSubmissionStatus200ResponseLastattempt" /> class.
        /// </summary>
        /// <param name="blindmarking">Whether blind marking is enabled. (required) (default to null).</param>
        /// <param name="canedit">Whether the user can edit the current submission. (required) (default to null).</param>
        /// <param name="caneditowner">Whether the owner of the submission can edit it. (required) (default to null).</param>
        /// <param name="cansubmit">Whether the user can submit. (required) (default to null).</param>
        /// <param name="extensionduedate">Extension due date. (required) (default to null).</param>
        /// <param name="graded">Whether the submission is graded. (required) (default to null).</param>
        /// <param name="gradingstatus">Grading status. (required) (default to &quot;null&quot;).</param>
        /// <param name="locked">Whether new submissions are locked. (required) (default to null).</param>
        /// <param name="submission">submission.</param>
        /// <param name="submissiongroup">The submission group id (for group submissions only). (default to null).</param>
        /// <param name="submissiongroupmemberswhoneedtosubmit">submissiongroupmemberswhoneedtosubmit.</param>
        /// <param name="submissionsenabled">Whether submissions are enabled or not. (required).</param>
        /// <param name="teamsubmission">teamsubmission.</param>
        /// <param name="timelimit">Time limit for submission. (default to null).</param>
        /// <param name="usergroups">usergroups (required).</param>
        public ModAssignGetSubmissionStatus200ResponseLastattempt(bool blindmarking = null, bool canedit = null, bool caneditowner = null, bool cansubmit = null, int extensionduedate = null, bool graded = null, string gradingstatus = @"null", bool locked = null, ModAssignGetSubmissionStatus200ResponseLastattemptSubmission submission = default(ModAssignGetSubmissionStatus200ResponseLastattemptSubmission), int submissiongroup = null, List<Object> submissiongroupmemberswhoneedtosubmit = default(List<Object>), bool submissionsenabled = default(bool), ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission teamsubmission = default(ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission), int timelimit = null, List<Object> usergroups = default(List<Object>))
        {
            this.Blindmarking = blindmarking;
            this.Canedit = canedit;
            this.Caneditowner = caneditowner;
            this.Cansubmit = cansubmit;
            this.Extensionduedate = extensionduedate;
            this.Graded = graded;
            // to ensure "gradingstatus" is required (not null)
            if (gradingstatus == null)
            {
                throw new ArgumentNullException("gradingstatus is a required property for ModAssignGetSubmissionStatus200ResponseLastattempt and cannot be null");
            }
            this.Gradingstatus = gradingstatus;
            this.Locked = locked;
            this.Submissionsenabled = submissionsenabled;
            // to ensure "usergroups" is required (not null)
            if (usergroups == null)
            {
                throw new ArgumentNullException("usergroups is a required property for ModAssignGetSubmissionStatus200ResponseLastattempt and cannot be null");
            }
            this.Usergroups = usergroups;
            this.Submission = submission;
            this.Submissiongroup = submissiongroup;
            this.Submissiongroupmemberswhoneedtosubmit = submissiongroupmemberswhoneedtosubmit;
            this.Teamsubmission = teamsubmission;
            this.Timelimit = timelimit;
        }

        /// <summary>
        /// Whether blind marking is enabled.
        /// </summary>
        /// <value>Whether blind marking is enabled.</value>
        [DataMember(Name = "blindmarking", IsRequired = true, EmitDefaultValue = true)]
        public bool Blindmarking { get; set; }

        /// <summary>
        /// Whether the user can edit the current submission.
        /// </summary>
        /// <value>Whether the user can edit the current submission.</value>
        [DataMember(Name = "canedit", IsRequired = true, EmitDefaultValue = true)]
        public bool Canedit { get; set; }

        /// <summary>
        /// Whether the owner of the submission can edit it.
        /// </summary>
        /// <value>Whether the owner of the submission can edit it.</value>
        [DataMember(Name = "caneditowner", IsRequired = true, EmitDefaultValue = true)]
        public bool Caneditowner { get; set; }

        /// <summary>
        /// Whether the user can submit.
        /// </summary>
        /// <value>Whether the user can submit.</value>
        [DataMember(Name = "cansubmit", IsRequired = true, EmitDefaultValue = true)]
        public bool Cansubmit { get; set; }

        /// <summary>
        /// Extension due date.
        /// </summary>
        /// <value>Extension due date.</value>
        [DataMember(Name = "extensionduedate", IsRequired = true, EmitDefaultValue = true)]
        public int Extensionduedate { get; set; }

        /// <summary>
        /// Whether the submission is graded.
        /// </summary>
        /// <value>Whether the submission is graded.</value>
        [DataMember(Name = "graded", IsRequired = true, EmitDefaultValue = true)]
        public bool Graded { get; set; }

        /// <summary>
        /// Grading status.
        /// </summary>
        /// <value>Grading status.</value>
        [DataMember(Name = "gradingstatus", IsRequired = true, EmitDefaultValue = true)]
        public string Gradingstatus { get; set; }

        /// <summary>
        /// Whether new submissions are locked.
        /// </summary>
        /// <value>Whether new submissions are locked.</value>
        [DataMember(Name = "locked", IsRequired = true, EmitDefaultValue = true)]
        public bool Locked { get; set; }

        /// <summary>
        /// Gets or Sets Submission
        /// </summary>
        [DataMember(Name = "submission", EmitDefaultValue = false)]
        public ModAssignGetSubmissionStatus200ResponseLastattemptSubmission Submission { get; set; }

        /// <summary>
        /// The submission group id (for group submissions only).
        /// </summary>
        /// <value>The submission group id (for group submissions only).</value>
        [DataMember(Name = "submissiongroup", EmitDefaultValue = false)]
        public int Submissiongroup { get; set; }

        /// <summary>
        /// Gets or Sets Submissiongroupmemberswhoneedtosubmit
        /// </summary>
        [DataMember(Name = "submissiongroupmemberswhoneedtosubmit", EmitDefaultValue = false)]
        public List<Object> Submissiongroupmemberswhoneedtosubmit { get; set; }

        /// <summary>
        /// Whether submissions are enabled or not.
        /// </summary>
        /// <value>Whether submissions are enabled or not.</value>
        [DataMember(Name = "submissionsenabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Submissionsenabled { get; set; }

        /// <summary>
        /// Gets or Sets Teamsubmission
        /// </summary>
        [DataMember(Name = "teamsubmission", EmitDefaultValue = false)]
        public ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission Teamsubmission { get; set; }

        /// <summary>
        /// Time limit for submission.
        /// </summary>
        /// <value>Time limit for submission.</value>
        [DataMember(Name = "timelimit", EmitDefaultValue = false)]
        public int Timelimit { get; set; }

        /// <summary>
        /// Gets or Sets Usergroups
        /// </summary>
        [DataMember(Name = "usergroups", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Usergroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModAssignGetSubmissionStatus200ResponseLastattempt {\n");
            sb.Append("  Blindmarking: ").Append(Blindmarking).Append("\n");
            sb.Append("  Canedit: ").Append(Canedit).Append("\n");
            sb.Append("  Caneditowner: ").Append(Caneditowner).Append("\n");
            sb.Append("  Cansubmit: ").Append(Cansubmit).Append("\n");
            sb.Append("  Extensionduedate: ").Append(Extensionduedate).Append("\n");
            sb.Append("  Graded: ").Append(Graded).Append("\n");
            sb.Append("  Gradingstatus: ").Append(Gradingstatus).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Submission: ").Append(Submission).Append("\n");
            sb.Append("  Submissiongroup: ").Append(Submissiongroup).Append("\n");
            sb.Append("  Submissiongroupmemberswhoneedtosubmit: ").Append(Submissiongroupmemberswhoneedtosubmit).Append("\n");
            sb.Append("  Submissionsenabled: ").Append(Submissionsenabled).Append("\n");
            sb.Append("  Teamsubmission: ").Append(Teamsubmission).Append("\n");
            sb.Append("  Timelimit: ").Append(Timelimit).Append("\n");
            sb.Append("  Usergroups: ").Append(Usergroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
