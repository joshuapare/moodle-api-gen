/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
    /// </summary>
    [DataContract(Name = "core_calendar_get_calendar_monthly_view_200_response_weeks_inner_days_inner")]
    public partial class CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner" /> class.
        /// </summary>
        /// <param name="calendareventtypes">calendareventtypes.</param>
        /// <param name="daytitle">daytitle (default to &quot;null&quot;).</param>
        /// <param name="events">events.</param>
        /// <param name="hasevents">hasevents (default to false).</param>
        /// <param name="haslastdayofevent">haslastdayofevent (default to false).</param>
        /// <param name="hours">hours.</param>
        /// <param name="istoday">istoday (default to false).</param>
        /// <param name="isweekend">isweekend (default to false).</param>
        /// <param name="mday">mday.</param>
        /// <param name="minutes">minutes.</param>
        /// <param name="neweventtimestamp">neweventtimestamp.</param>
        /// <param name="nextperiod">nextperiod (default to null).</param>
        /// <param name="popovertitle">popovertitle (default to &quot;&quot;).</param>
        /// <param name="previousperiod">previousperiod (default to null).</param>
        /// <param name="seconds">seconds.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="viewdaylink">viewdaylink (default to &quot;null&quot;).</param>
        /// <param name="viewdaylinktitle">viewdaylinktitle (default to &quot;null&quot;).</param>
        /// <param name="wday">wday.</param>
        /// <param name="yday">yday.</param>
        /// <param name="year">year.</param>
        public CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner(List<Object> calendareventtypes = default(List<Object>), string daytitle = @"null", List<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner> events = default(List<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner>), bool hasevents = false, bool haslastdayofevent = false, int hours = default(int), bool istoday = false, bool isweekend = false, int mday = default(int), int minutes = default(int), int neweventtimestamp = default(int), int nextperiod = null, string popovertitle = @"", int previousperiod = null, int seconds = default(int), int timestamp = default(int), string viewdaylink = @"null", string viewdaylinktitle = @"null", int wday = default(int), int yday = default(int), int year = default(int))
        {
            this.Calendareventtypes = calendareventtypes;
            // use default value if no "daytitle" provided
            this.Daytitle = daytitle ?? @"null";
            this.Events = events;
            this.Hasevents = hasevents;
            this.Haslastdayofevent = haslastdayofevent;
            this.Hours = hours;
            this.Istoday = istoday;
            this.Isweekend = isweekend;
            this.Mday = mday;
            this.Minutes = minutes;
            this.Neweventtimestamp = neweventtimestamp;
            this.Nextperiod = nextperiod;
            // use default value if no "popovertitle" provided
            this.Popovertitle = popovertitle ?? @"";
            this.Previousperiod = previousperiod;
            this.Seconds = seconds;
            this.Timestamp = timestamp;
            // use default value if no "viewdaylink" provided
            this.Viewdaylink = viewdaylink ?? @"null";
            // use default value if no "viewdaylinktitle" provided
            this.Viewdaylinktitle = viewdaylinktitle ?? @"null";
            this.Wday = wday;
            this.Yday = yday;
            this.Year = year;
        }

        /// <summary>
        /// Gets or Sets Calendareventtypes
        /// </summary>
        [DataMember(Name = "calendareventtypes", EmitDefaultValue = false)]
        public List<Object> Calendareventtypes { get; set; }

        /// <summary>
        /// daytitle
        /// </summary>
        /// <value>daytitle</value>
        [DataMember(Name = "daytitle", EmitDefaultValue = false)]
        public string Daytitle { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name = "events", EmitDefaultValue = false)]
        public List<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner> Events { get; set; }

        /// <summary>
        /// hasevents
        /// </summary>
        /// <value>hasevents</value>
        [DataMember(Name = "hasevents", EmitDefaultValue = true)]
        public bool Hasevents { get; set; }

        /// <summary>
        /// haslastdayofevent
        /// </summary>
        /// <value>haslastdayofevent</value>
        [DataMember(Name = "haslastdayofevent", EmitDefaultValue = true)]
        public bool Haslastdayofevent { get; set; }

        /// <summary>
        /// hours
        /// </summary>
        /// <value>hours</value>
        [DataMember(Name = "hours", EmitDefaultValue = false)]
        public int Hours { get; set; }

        /// <summary>
        /// istoday
        /// </summary>
        /// <value>istoday</value>
        [DataMember(Name = "istoday", EmitDefaultValue = true)]
        public bool Istoday { get; set; }

        /// <summary>
        /// isweekend
        /// </summary>
        /// <value>isweekend</value>
        [DataMember(Name = "isweekend", EmitDefaultValue = true)]
        public bool Isweekend { get; set; }

        /// <summary>
        /// mday
        /// </summary>
        /// <value>mday</value>
        [DataMember(Name = "mday", EmitDefaultValue = false)]
        public int Mday { get; set; }

        /// <summary>
        /// minutes
        /// </summary>
        /// <value>minutes</value>
        [DataMember(Name = "minutes", EmitDefaultValue = false)]
        public int Minutes { get; set; }

        /// <summary>
        /// neweventtimestamp
        /// </summary>
        /// <value>neweventtimestamp</value>
        [DataMember(Name = "neweventtimestamp", EmitDefaultValue = false)]
        public int Neweventtimestamp { get; set; }

        /// <summary>
        /// nextperiod
        /// </summary>
        /// <value>nextperiod</value>
        [DataMember(Name = "nextperiod", EmitDefaultValue = false)]
        public int Nextperiod { get; set; }

        /// <summary>
        /// popovertitle
        /// </summary>
        /// <value>popovertitle</value>
        [DataMember(Name = "popovertitle", EmitDefaultValue = false)]
        public string Popovertitle { get; set; }

        /// <summary>
        /// previousperiod
        /// </summary>
        /// <value>previousperiod</value>
        [DataMember(Name = "previousperiod", EmitDefaultValue = false)]
        public int Previousperiod { get; set; }

        /// <summary>
        /// seconds
        /// </summary>
        /// <value>seconds</value>
        [DataMember(Name = "seconds", EmitDefaultValue = false)]
        public int Seconds { get; set; }

        /// <summary>
        /// timestamp
        /// </summary>
        /// <value>timestamp</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public int Timestamp { get; set; }

        /// <summary>
        /// viewdaylink
        /// </summary>
        /// <value>viewdaylink</value>
        [DataMember(Name = "viewdaylink", EmitDefaultValue = false)]
        public string Viewdaylink { get; set; }

        /// <summary>
        /// viewdaylinktitle
        /// </summary>
        /// <value>viewdaylinktitle</value>
        [DataMember(Name = "viewdaylinktitle", EmitDefaultValue = false)]
        public string Viewdaylinktitle { get; set; }

        /// <summary>
        /// wday
        /// </summary>
        /// <value>wday</value>
        [DataMember(Name = "wday", EmitDefaultValue = false)]
        public int Wday { get; set; }

        /// <summary>
        /// yday
        /// </summary>
        /// <value>yday</value>
        [DataMember(Name = "yday", EmitDefaultValue = false)]
        public int Yday { get; set; }

        /// <summary>
        /// year
        /// </summary>
        /// <value>year</value>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner {\n");
            sb.Append("  Calendareventtypes: ").Append(Calendareventtypes).Append("\n");
            sb.Append("  Daytitle: ").Append(Daytitle).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Hasevents: ").Append(Hasevents).Append("\n");
            sb.Append("  Haslastdayofevent: ").Append(Haslastdayofevent).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  Istoday: ").Append(Istoday).Append("\n");
            sb.Append("  Isweekend: ").Append(Isweekend).Append("\n");
            sb.Append("  Mday: ").Append(Mday).Append("\n");
            sb.Append("  Minutes: ").Append(Minutes).Append("\n");
            sb.Append("  Neweventtimestamp: ").Append(Neweventtimestamp).Append("\n");
            sb.Append("  Nextperiod: ").Append(Nextperiod).Append("\n");
            sb.Append("  Popovertitle: ").Append(Popovertitle).Append("\n");
            sb.Append("  Previousperiod: ").Append(Previousperiod).Append("\n");
            sb.Append("  Seconds: ").Append(Seconds).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Viewdaylink: ").Append(Viewdaylink).Append("\n");
            sb.Append("  Viewdaylinktitle: ").Append(Viewdaylinktitle).Append("\n");
            sb.Append("  Wday: ").Append(Wday).Append("\n");
            sb.Append("  Yday: ").Append(Yday).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
