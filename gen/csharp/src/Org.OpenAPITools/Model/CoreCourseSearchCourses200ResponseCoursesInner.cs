/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreCourseSearchCourses200ResponseCoursesInner
    /// </summary>
    [DataContract(Name = "core_course_search_courses_200_response_courses_inner")]
    public partial class CoreCourseSearchCourses200ResponseCoursesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCourseSearchCourses200ResponseCoursesInner" /> class.
        /// </summary>
        /// <param name="categoryid">category id.</param>
        /// <param name="categoryname">category name.</param>
        /// <param name="contacts">contacts.</param>
        /// <param name="courseimage">Course image.</param>
        /// <param name="customfields">customfields.</param>
        /// <param name="displayname">course display name.</param>
        /// <param name="enrollmentmethods">enrollmentmethods.</param>
        /// <param name="fullname">course full name.</param>
        /// <param name="id">course id.</param>
        /// <param name="overviewfiles">overviewfiles.</param>
        /// <param name="shortname">course short name.</param>
        /// <param name="showactivitydates">Whether the activity dates are shown or not.</param>
        /// <param name="showcompletionconditions">Whether the activity completion conditions are shown or not.</param>
        /// <param name="sortorder">Sort order in the category.</param>
        /// <param name="summary">summary.</param>
        /// <param name="summaryfiles">summaryfiles.</param>
        /// <param name="summaryformat">summary format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN).</param>
        public CoreCourseSearchCourses200ResponseCoursesInner(int categoryid = default(int), string categoryname = default(string), List<CoreCourseSearchCourses200ResponseCoursesInnerContactsInner> contacts = default(List<CoreCourseSearchCourses200ResponseCoursesInnerContactsInner>), string courseimage = default(string), List<CoreCourseGetCoursesByField200ResponseCoursesInnerCustomfieldsInner> customfields = default(List<CoreCourseGetCoursesByField200ResponseCoursesInnerCustomfieldsInner>), string displayname = default(string), List<Object> enrollmentmethods = default(List<Object>), string fullname = default(string), int id = default(int), List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> overviewfiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), string shortname = default(string), bool showactivitydates = default(bool), bool showcompletionconditions = default(bool), int sortorder = default(int), string summary = default(string), List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> summaryfiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), int summaryformat = default(int))
        {
            this.Categoryid = categoryid;
            this.Categoryname = categoryname;
            this.Contacts = contacts;
            this.Courseimage = courseimage;
            this.Customfields = customfields;
            this.Displayname = displayname;
            this.Enrollmentmethods = enrollmentmethods;
            this.Fullname = fullname;
            this.Id = id;
            this.Overviewfiles = overviewfiles;
            this.Shortname = shortname;
            this.Showactivitydates = showactivitydates;
            this.Showcompletionconditions = showcompletionconditions;
            this.Sortorder = sortorder;
            this.Summary = summary;
            this.Summaryfiles = summaryfiles;
            this.Summaryformat = summaryformat;
        }

        /// <summary>
        /// category id
        /// </summary>
        /// <value>category id</value>
        [DataMember(Name = "categoryid", EmitDefaultValue = false)]
        public int Categoryid { get; set; }

        /// <summary>
        /// category name
        /// </summary>
        /// <value>category name</value>
        [DataMember(Name = "categoryname", EmitDefaultValue = false)]
        public string Categoryname { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name = "contacts", EmitDefaultValue = false)]
        public List<CoreCourseSearchCourses200ResponseCoursesInnerContactsInner> Contacts { get; set; }

        /// <summary>
        /// Course image
        /// </summary>
        /// <value>Course image</value>
        [DataMember(Name = "courseimage", EmitDefaultValue = false)]
        public string Courseimage { get; set; }

        /// <summary>
        /// Gets or Sets Customfields
        /// </summary>
        [DataMember(Name = "customfields", EmitDefaultValue = false)]
        public List<CoreCourseGetCoursesByField200ResponseCoursesInnerCustomfieldsInner> Customfields { get; set; }

        /// <summary>
        /// course display name
        /// </summary>
        /// <value>course display name</value>
        [DataMember(Name = "displayname", EmitDefaultValue = false)]
        public string Displayname { get; set; }

        /// <summary>
        /// Gets or Sets Enrollmentmethods
        /// </summary>
        [DataMember(Name = "enrollmentmethods", EmitDefaultValue = false)]
        public List<Object> Enrollmentmethods { get; set; }

        /// <summary>
        /// course full name
        /// </summary>
        /// <value>course full name</value>
        [DataMember(Name = "fullname", EmitDefaultValue = false)]
        public string Fullname { get; set; }

        /// <summary>
        /// course id
        /// </summary>
        /// <value>course id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Overviewfiles
        /// </summary>
        [DataMember(Name = "overviewfiles", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Overviewfiles { get; set; }

        /// <summary>
        /// course short name
        /// </summary>
        /// <value>course short name</value>
        [DataMember(Name = "shortname", EmitDefaultValue = false)]
        public string Shortname { get; set; }

        /// <summary>
        /// Whether the activity dates are shown or not
        /// </summary>
        /// <value>Whether the activity dates are shown or not</value>
        [DataMember(Name = "showactivitydates", EmitDefaultValue = true)]
        public bool Showactivitydates { get; set; }

        /// <summary>
        /// Whether the activity completion conditions are shown or not
        /// </summary>
        /// <value>Whether the activity completion conditions are shown or not</value>
        [DataMember(Name = "showcompletionconditions", EmitDefaultValue = true)]
        public bool Showcompletionconditions { get; set; }

        /// <summary>
        /// Sort order in the category
        /// </summary>
        /// <value>Sort order in the category</value>
        [DataMember(Name = "sortorder", EmitDefaultValue = false)]
        public int Sortorder { get; set; }

        /// <summary>
        /// summary
        /// </summary>
        /// <value>summary</value>
        [DataMember(Name = "summary", EmitDefaultValue = false)]
        public string Summary { get; set; }

        /// <summary>
        /// Gets or Sets Summaryfiles
        /// </summary>
        [DataMember(Name = "summaryfiles", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Summaryfiles { get; set; }

        /// <summary>
        /// summary format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>summary format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "summaryformat", EmitDefaultValue = false)]
        public int Summaryformat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCourseSearchCourses200ResponseCoursesInner {\n");
            sb.Append("  Categoryid: ").Append(Categoryid).Append("\n");
            sb.Append("  Categoryname: ").Append(Categoryname).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Courseimage: ").Append(Courseimage).Append("\n");
            sb.Append("  Customfields: ").Append(Customfields).Append("\n");
            sb.Append("  Displayname: ").Append(Displayname).Append("\n");
            sb.Append("  Enrollmentmethods: ").Append(Enrollmentmethods).Append("\n");
            sb.Append("  Fullname: ").Append(Fullname).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Overviewfiles: ").Append(Overviewfiles).Append("\n");
            sb.Append("  Shortname: ").Append(Shortname).Append("\n");
            sb.Append("  Showactivitydates: ").Append(Showactivitydates).Append("\n");
            sb.Append("  Showcompletionconditions: ").Append(Showcompletionconditions).Append("\n");
            sb.Append("  Sortorder: ").Append(Sortorder).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Summaryfiles: ").Append(Summaryfiles).Append("\n");
            sb.Append("  Summaryformat: ").Append(Summaryformat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
