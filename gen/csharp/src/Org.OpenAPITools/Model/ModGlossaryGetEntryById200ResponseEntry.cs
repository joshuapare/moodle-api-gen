/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModGlossaryGetEntryById200ResponseEntry
    /// </summary>
    [DataContract(Name = "mod_glossary_get_entry_by_id_200_response_entry")]
    public partial class ModGlossaryGetEntryById200ResponseEntry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModGlossaryGetEntryById200ResponseEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModGlossaryGetEntryById200ResponseEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModGlossaryGetEntryById200ResponseEntry" /> class.
        /// </summary>
        /// <param name="approved">Whether the entry was approved (required).</param>
        /// <param name="attachment">Whether or not the entry has attachments (required).</param>
        /// <param name="attachments">attachments.</param>
        /// <param name="casesensitive">When true, the matching is case sensitive (required).</param>
        /// <param name="concept">The concept (required).</param>
        /// <param name="definition">The definition (required).</param>
        /// <param name="definitionformat">definition format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (required).</param>
        /// <param name="definitioninlinefiles">definitioninlinefiles.</param>
        /// <param name="definitiontrust">The definition trust flag (required).</param>
        /// <param name="fullmatch">When true, the matching is done on full words only (required).</param>
        /// <param name="glossaryid">The glossary ID (required).</param>
        /// <param name="id">The entry ID (required).</param>
        /// <param name="sourceglossaryid">The source glossary ID (required).</param>
        /// <param name="tags">tags.</param>
        /// <param name="teacherentry">The entry was created by a teacher, or equivalent. (required).</param>
        /// <param name="timecreated">Time created (required).</param>
        /// <param name="timemodified">Time modified (required).</param>
        /// <param name="usedynalink">Whether the concept should be automatically linked (required).</param>
        /// <param name="userfullname">Author full name (required).</param>
        /// <param name="userid">Author ID (required).</param>
        /// <param name="userpictureurl">Author picture (required).</param>
        public ModGlossaryGetEntryById200ResponseEntry(bool approved = default(bool), bool attachment = default(bool), List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> attachments = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), bool casesensitive = default(bool), string concept = default(string), string definition = default(string), int definitionformat = default(int), List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> definitioninlinefiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), bool definitiontrust = default(bool), bool fullmatch = default(bool), int glossaryid = default(int), int id = default(int), int sourceglossaryid = default(int), List<ModDataGetEntries200ResponseEntriesInnerTagsInner> tags = default(List<ModDataGetEntries200ResponseEntriesInnerTagsInner>), bool teacherentry = default(bool), int timecreated = default(int), int timemodified = default(int), bool usedynalink = default(bool), string userfullname = default(string), int userid = default(int), string userpictureurl = default(string))
        {
            this.Approved = approved;
            this.Attachment = attachment;
            this.Casesensitive = casesensitive;
            // to ensure "concept" is required (not null)
            if (concept == null)
            {
                throw new ArgumentNullException("concept is a required property for ModGlossaryGetEntryById200ResponseEntry and cannot be null");
            }
            this.Concept = concept;
            // to ensure "definition" is required (not null)
            if (definition == null)
            {
                throw new ArgumentNullException("definition is a required property for ModGlossaryGetEntryById200ResponseEntry and cannot be null");
            }
            this.Definition = definition;
            this.Definitionformat = definitionformat;
            this.Definitiontrust = definitiontrust;
            this.Fullmatch = fullmatch;
            this.Glossaryid = glossaryid;
            this.Id = id;
            this.Sourceglossaryid = sourceglossaryid;
            this.Teacherentry = teacherentry;
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
            this.Usedynalink = usedynalink;
            // to ensure "userfullname" is required (not null)
            if (userfullname == null)
            {
                throw new ArgumentNullException("userfullname is a required property for ModGlossaryGetEntryById200ResponseEntry and cannot be null");
            }
            this.Userfullname = userfullname;
            this.Userid = userid;
            // to ensure "userpictureurl" is required (not null)
            if (userpictureurl == null)
            {
                throw new ArgumentNullException("userpictureurl is a required property for ModGlossaryGetEntryById200ResponseEntry and cannot be null");
            }
            this.Userpictureurl = userpictureurl;
            this.Attachments = attachments;
            this.Definitioninlinefiles = definitioninlinefiles;
            this.Tags = tags;
        }

        /// <summary>
        /// Whether the entry was approved
        /// </summary>
        /// <value>Whether the entry was approved</value>
        [DataMember(Name = "approved", IsRequired = true, EmitDefaultValue = true)]
        public bool Approved { get; set; }

        /// <summary>
        /// Whether or not the entry has attachments
        /// </summary>
        /// <value>Whether or not the entry has attachments</value>
        [DataMember(Name = "attachment", IsRequired = true, EmitDefaultValue = true)]
        public bool Attachment { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name = "attachments", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Attachments { get; set; }

        /// <summary>
        /// When true, the matching is case sensitive
        /// </summary>
        /// <value>When true, the matching is case sensitive</value>
        [DataMember(Name = "casesensitive", IsRequired = true, EmitDefaultValue = true)]
        public bool Casesensitive { get; set; }

        /// <summary>
        /// The concept
        /// </summary>
        /// <value>The concept</value>
        [DataMember(Name = "concept", IsRequired = true, EmitDefaultValue = true)]
        public string Concept { get; set; }

        /// <summary>
        /// The definition
        /// </summary>
        /// <value>The definition</value>
        [DataMember(Name = "definition", IsRequired = true, EmitDefaultValue = true)]
        public string Definition { get; set; }

        /// <summary>
        /// definition format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>definition format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "definitionformat", IsRequired = true, EmitDefaultValue = true)]
        public int Definitionformat { get; set; }

        /// <summary>
        /// Gets or Sets Definitioninlinefiles
        /// </summary>
        [DataMember(Name = "definitioninlinefiles", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Definitioninlinefiles { get; set; }

        /// <summary>
        /// The definition trust flag
        /// </summary>
        /// <value>The definition trust flag</value>
        [DataMember(Name = "definitiontrust", IsRequired = true, EmitDefaultValue = true)]
        public bool Definitiontrust { get; set; }

        /// <summary>
        /// When true, the matching is done on full words only
        /// </summary>
        /// <value>When true, the matching is done on full words only</value>
        [DataMember(Name = "fullmatch", IsRequired = true, EmitDefaultValue = true)]
        public bool Fullmatch { get; set; }

        /// <summary>
        /// The glossary ID
        /// </summary>
        /// <value>The glossary ID</value>
        [DataMember(Name = "glossaryid", IsRequired = true, EmitDefaultValue = true)]
        public int Glossaryid { get; set; }

        /// <summary>
        /// The entry ID
        /// </summary>
        /// <value>The entry ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// The source glossary ID
        /// </summary>
        /// <value>The source glossary ID</value>
        [DataMember(Name = "sourceglossaryid", IsRequired = true, EmitDefaultValue = true)]
        public int Sourceglossaryid { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<ModDataGetEntries200ResponseEntriesInnerTagsInner> Tags { get; set; }

        /// <summary>
        /// The entry was created by a teacher, or equivalent.
        /// </summary>
        /// <value>The entry was created by a teacher, or equivalent.</value>
        [DataMember(Name = "teacherentry", IsRequired = true, EmitDefaultValue = true)]
        public bool Teacherentry { get; set; }

        /// <summary>
        /// Time created
        /// </summary>
        /// <value>Time created</value>
        [DataMember(Name = "timecreated", IsRequired = true, EmitDefaultValue = true)]
        public int Timecreated { get; set; }

        /// <summary>
        /// Time modified
        /// </summary>
        /// <value>Time modified</value>
        [DataMember(Name = "timemodified", IsRequired = true, EmitDefaultValue = true)]
        public int Timemodified { get; set; }

        /// <summary>
        /// Whether the concept should be automatically linked
        /// </summary>
        /// <value>Whether the concept should be automatically linked</value>
        [DataMember(Name = "usedynalink", IsRequired = true, EmitDefaultValue = true)]
        public bool Usedynalink { get; set; }

        /// <summary>
        /// Author full name
        /// </summary>
        /// <value>Author full name</value>
        [DataMember(Name = "userfullname", IsRequired = true, EmitDefaultValue = true)]
        public string Userfullname { get; set; }

        /// <summary>
        /// Author ID
        /// </summary>
        /// <value>Author ID</value>
        [DataMember(Name = "userid", IsRequired = true, EmitDefaultValue = true)]
        public int Userid { get; set; }

        /// <summary>
        /// Author picture
        /// </summary>
        /// <value>Author picture</value>
        [DataMember(Name = "userpictureurl", IsRequired = true, EmitDefaultValue = true)]
        public string Userpictureurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModGlossaryGetEntryById200ResponseEntry {\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  Attachment: ").Append(Attachment).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Casesensitive: ").Append(Casesensitive).Append("\n");
            sb.Append("  Concept: ").Append(Concept).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  Definitionformat: ").Append(Definitionformat).Append("\n");
            sb.Append("  Definitioninlinefiles: ").Append(Definitioninlinefiles).Append("\n");
            sb.Append("  Definitiontrust: ").Append(Definitiontrust).Append("\n");
            sb.Append("  Fullmatch: ").Append(Fullmatch).Append("\n");
            sb.Append("  Glossaryid: ").Append(Glossaryid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sourceglossaryid: ").Append(Sourceglossaryid).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Teacherentry: ").Append(Teacherentry).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Usedynalink: ").Append(Usedynalink).Append("\n");
            sb.Append("  Userfullname: ").Append(Userfullname).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("  Userpictureurl: ").Append(Userpictureurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
