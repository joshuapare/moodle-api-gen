/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Activity
    /// </summary>
    [DataContract(Name = "core_completion_get_activities_completion_status_200_response_statuses_inner")]
    public partial class CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner" /> class.
        /// </summary>
        /// <param name="cmid">course module ID (default to null).</param>
        /// <param name="details">details.</param>
        /// <param name="hascompletion">Whether this activity module has completion enabled (default to null).</param>
        /// <param name="instance">instance ID (default to null).</param>
        /// <param name="isautomatic">Whether this activity module instance tracks completion automatically. (default to null).</param>
        /// <param name="istrackeduser">Whether completion is being tracked for this user. (default to null).</param>
        /// <param name="modname">activity module name (default to &quot;null&quot;).</param>
        /// <param name="overrideby">The user id who has overriden the status, or null (default to null).</param>
        /// <param name="state">Completion state value:                                     0 means incomplete,                                     1 complete,                                     2 complete pass,                                     3 complete fail (default to null).</param>
        /// <param name="timecompleted">timestamp for completed activity (default to null).</param>
        /// <param name="tracking">type of tracking:                                     0 means none,                                     1 manual,                                     2 automatic (default to null).</param>
        /// <param name="uservisible">Whether this activity is visible to the user. (default to null).</param>
        /// <param name="valueused">Whether the completion status affects the availability of another activity. (default to null).</param>
        public CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner(int cmid = null, List<CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInnerDetailsInner> details = default(List<CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInnerDetailsInner>), bool hascompletion = null, int instance = null, bool isautomatic = null, bool istrackeduser = null, string modname = @"null", int overrideby = null, int state = null, int timecompleted = null, int tracking = null, bool uservisible = null, bool valueused = null)
        {
            this.Cmid = cmid;
            this.Details = details;
            this.Hascompletion = hascompletion;
            this.Instance = instance;
            this.Isautomatic = isautomatic;
            this.Istrackeduser = istrackeduser;
            // use default value if no "modname" provided
            this.Modname = modname ?? @"null";
            this.Overrideby = overrideby;
            this.State = state;
            this.Timecompleted = timecompleted;
            this.Tracking = tracking;
            this.Uservisible = uservisible;
            this.Valueused = valueused;
        }

        /// <summary>
        /// course module ID
        /// </summary>
        /// <value>course module ID</value>
        [DataMember(Name = "cmid", EmitDefaultValue = false)]
        public int Cmid { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public List<CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInnerDetailsInner> Details { get; set; }

        /// <summary>
        /// Whether this activity module has completion enabled
        /// </summary>
        /// <value>Whether this activity module has completion enabled</value>
        [DataMember(Name = "hascompletion", EmitDefaultValue = true)]
        public bool Hascompletion { get; set; }

        /// <summary>
        /// instance ID
        /// </summary>
        /// <value>instance ID</value>
        [DataMember(Name = "instance", EmitDefaultValue = false)]
        public int Instance { get; set; }

        /// <summary>
        /// Whether this activity module instance tracks completion automatically.
        /// </summary>
        /// <value>Whether this activity module instance tracks completion automatically.</value>
        [DataMember(Name = "isautomatic", EmitDefaultValue = true)]
        public bool Isautomatic { get; set; }

        /// <summary>
        /// Whether completion is being tracked for this user.
        /// </summary>
        /// <value>Whether completion is being tracked for this user.</value>
        [DataMember(Name = "istrackeduser", EmitDefaultValue = true)]
        public bool Istrackeduser { get; set; }

        /// <summary>
        /// activity module name
        /// </summary>
        /// <value>activity module name</value>
        [DataMember(Name = "modname", EmitDefaultValue = false)]
        public string Modname { get; set; }

        /// <summary>
        /// The user id who has overriden the status, or null
        /// </summary>
        /// <value>The user id who has overriden the status, or null</value>
        [DataMember(Name = "overrideby", EmitDefaultValue = false)]
        public int Overrideby { get; set; }

        /// <summary>
        /// Completion state value:                                     0 means incomplete,                                     1 complete,                                     2 complete pass,                                     3 complete fail
        /// </summary>
        /// <value>Completion state value:                                     0 means incomplete,                                     1 complete,                                     2 complete pass,                                     3 complete fail</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public int State { get; set; }

        /// <summary>
        /// timestamp for completed activity
        /// </summary>
        /// <value>timestamp for completed activity</value>
        [DataMember(Name = "timecompleted", EmitDefaultValue = false)]
        public int Timecompleted { get; set; }

        /// <summary>
        /// type of tracking:                                     0 means none,                                     1 manual,                                     2 automatic
        /// </summary>
        /// <value>type of tracking:                                     0 means none,                                     1 manual,                                     2 automatic</value>
        [DataMember(Name = "tracking", EmitDefaultValue = false)]
        public int Tracking { get; set; }

        /// <summary>
        /// Whether this activity is visible to the user.
        /// </summary>
        /// <value>Whether this activity is visible to the user.</value>
        [DataMember(Name = "uservisible", EmitDefaultValue = true)]
        public bool Uservisible { get; set; }

        /// <summary>
        /// Whether the completion status affects the availability of another activity.
        /// </summary>
        /// <value>Whether the completion status affects the availability of another activity.</value>
        [DataMember(Name = "valueused", EmitDefaultValue = true)]
        public bool Valueused { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner {\n");
            sb.Append("  Cmid: ").Append(Cmid).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Hascompletion: ").Append(Hascompletion).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  Isautomatic: ").Append(Isautomatic).Append("\n");
            sb.Append("  Istrackeduser: ").Append(Istrackeduser).Append("\n");
            sb.Append("  Modname: ").Append(Modname).Append("\n");
            sb.Append("  Overrideby: ").Append(Overrideby).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Timecompleted: ").Append(Timecompleted).Append("\n");
            sb.Append("  Tracking: ").Append(Tracking).Append("\n");
            sb.Append("  Uservisible: ").Append(Uservisible).Append("\n");
            sb.Append("  Valueused: ").Append(Valueused).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
