/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreBackupGetAsyncBackupLinksBackup200Response
    /// </summary>
    [DataContract(Name = "core_backup_get_async_backup_links_backup_200_response")]
    public partial class CoreBackupGetAsyncBackupLinksBackup200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreBackupGetAsyncBackupLinksBackup200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreBackupGetAsyncBackupLinksBackup200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreBackupGetAsyncBackupLinksBackup200Response" /> class.
        /// </summary>
        /// <param name="filesize">Backup file size (required) (default to &quot;null&quot;).</param>
        /// <param name="fileurl">Backup file URL (required) (default to &quot;null&quot;).</param>
        /// <param name="restoreurl">Backup restore URL (required) (default to &quot;null&quot;).</param>
        public CoreBackupGetAsyncBackupLinksBackup200Response(string filesize = @"null", string fileurl = @"null", string restoreurl = @"null")
        {
            // to ensure "filesize" is required (not null)
            if (filesize == null)
            {
                throw new ArgumentNullException("filesize is a required property for CoreBackupGetAsyncBackupLinksBackup200Response and cannot be null");
            }
            this.Filesize = filesize;
            // to ensure "fileurl" is required (not null)
            if (fileurl == null)
            {
                throw new ArgumentNullException("fileurl is a required property for CoreBackupGetAsyncBackupLinksBackup200Response and cannot be null");
            }
            this.Fileurl = fileurl;
            // to ensure "restoreurl" is required (not null)
            if (restoreurl == null)
            {
                throw new ArgumentNullException("restoreurl is a required property for CoreBackupGetAsyncBackupLinksBackup200Response and cannot be null");
            }
            this.Restoreurl = restoreurl;
        }

        /// <summary>
        /// Backup file size
        /// </summary>
        /// <value>Backup file size</value>
        [DataMember(Name = "filesize", IsRequired = true, EmitDefaultValue = true)]
        public string Filesize { get; set; }

        /// <summary>
        /// Backup file URL
        /// </summary>
        /// <value>Backup file URL</value>
        [DataMember(Name = "fileurl", IsRequired = true, EmitDefaultValue = true)]
        public string Fileurl { get; set; }

        /// <summary>
        /// Backup restore URL
        /// </summary>
        /// <value>Backup restore URL</value>
        [DataMember(Name = "restoreurl", IsRequired = true, EmitDefaultValue = true)]
        public string Restoreurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreBackupGetAsyncBackupLinksBackup200Response {\n");
            sb.Append("  Filesize: ").Append(Filesize).Append("\n");
            sb.Append("  Fileurl: ").Append(Fileurl).Append("\n");
            sb.Append("  Restoreurl: ").Append(Restoreurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
