/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner
    /// </summary>
    [DataContract(Name = "tool_usertours_fetch_and_start_tour_200_response_tourconfig_steps_inner")]
    public partial class ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner" /> class.
        /// </summary>
        /// <param name="backdrop">Whether a backdrop should be used (default to null).</param>
        /// <param name="content">Step Content (default to &quot;null&quot;).</param>
        /// <param name="delay">Delay before showing the step (ms) (default to null).</param>
        /// <param name="element">Step Target (default to &quot;null&quot;).</param>
        /// <param name="orphan">Whether to display the step even if it could not be found (default to null).</param>
        /// <param name="placement">Step Placement (default to &quot;null&quot;).</param>
        /// <param name="reflex">Whether to move to the next step when the target element is clicked (default to null).</param>
        /// <param name="stepid">The actual ID of the step (default to null).</param>
        /// <param name="title">Step Title (default to &quot;null&quot;).</param>
        public ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner(bool backdrop = null, string content = @"null", int delay = null, string element = @"null", bool orphan = null, string placement = @"null", bool reflex = null, int stepid = null, string title = @"null")
        {
            this.Backdrop = backdrop;
            // use default value if no "content" provided
            this.Content = content ?? @"null";
            this.Delay = delay;
            // use default value if no "element" provided
            this.Element = element ?? @"null";
            this.Orphan = orphan;
            // use default value if no "placement" provided
            this.Placement = placement ?? @"null";
            this.Reflex = reflex;
            this.Stepid = stepid;
            // use default value if no "title" provided
            this.Title = title ?? @"null";
        }

        /// <summary>
        /// Whether a backdrop should be used
        /// </summary>
        /// <value>Whether a backdrop should be used</value>
        [DataMember(Name = "backdrop", EmitDefaultValue = true)]
        public bool Backdrop { get; set; }

        /// <summary>
        /// Step Content
        /// </summary>
        /// <value>Step Content</value>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Delay before showing the step (ms)
        /// </summary>
        /// <value>Delay before showing the step (ms)</value>
        [DataMember(Name = "delay", EmitDefaultValue = false)]
        public int Delay { get; set; }

        /// <summary>
        /// Step Target
        /// </summary>
        /// <value>Step Target</value>
        [DataMember(Name = "element", EmitDefaultValue = false)]
        public string Element { get; set; }

        /// <summary>
        /// Whether to display the step even if it could not be found
        /// </summary>
        /// <value>Whether to display the step even if it could not be found</value>
        [DataMember(Name = "orphan", EmitDefaultValue = true)]
        public bool Orphan { get; set; }

        /// <summary>
        /// Step Placement
        /// </summary>
        /// <value>Step Placement</value>
        [DataMember(Name = "placement", EmitDefaultValue = false)]
        public string Placement { get; set; }

        /// <summary>
        /// Whether to move to the next step when the target element is clicked
        /// </summary>
        /// <value>Whether to move to the next step when the target element is clicked</value>
        [DataMember(Name = "reflex", EmitDefaultValue = true)]
        public bool Reflex { get; set; }

        /// <summary>
        /// The actual ID of the step
        /// </summary>
        /// <value>The actual ID of the step</value>
        [DataMember(Name = "stepid", EmitDefaultValue = false)]
        public int Stepid { get; set; }

        /// <summary>
        /// Step Title
        /// </summary>
        /// <value>Step Title</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner {\n");
            sb.Append("  Backdrop: ").Append(Backdrop).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("  Element: ").Append(Element).Append("\n");
            sb.Append("  Orphan: ").Append(Orphan).Append("\n");
            sb.Append("  Placement: ").Append(Placement).Append("\n");
            sb.Append("  Reflex: ").Append(Reflex).Append("\n");
            sb.Append("  Stepid: ").Append(Stepid).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
