/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreTagGetTagindexRequestTagindex
    /// </summary>
    [DataContract(Name = "core_tag_get_tagindex_request_tagindex")]
    public partial class CoreTagGetTagindexRequestTagindex : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreTagGetTagindexRequestTagindex" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreTagGetTagindexRequestTagindex() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreTagGetTagindexRequestTagindex" /> class.
        /// </summary>
        /// <param name="ctx">context id where to search for items (default to 0).</param>
        /// <param name="excl">exlusive mode for this tag area (default to 0).</param>
        /// <param name="from">context id where the link was displayed (default to 0).</param>
        /// <param name="page">page number (0-based) (default to 0).</param>
        /// <param name="rec">search in the context recursive (default to 1).</param>
        /// <param name="ta">tag area id (required) (default to null).</param>
        /// <param name="tag">tag name (required) (default to &quot;null&quot;).</param>
        /// <param name="tc">tag collection id (required) (default to null).</param>
        public CoreTagGetTagindexRequestTagindex(int ctx = 0, bool excl = 0, int from = 0, int page = 0, int rec = 1, int ta = null, string tag = @"null", int tc = null)
        {
            this.Ta = ta;
            // to ensure "tag" is required (not null)
            if (tag == null)
            {
                throw new ArgumentNullException("tag is a required property for CoreTagGetTagindexRequestTagindex and cannot be null");
            }
            this.Tag = tag;
            this.Tc = tc;
            this.Ctx = ctx;
            this.Excl = excl;
            this.From = from;
            this.Page = page;
            this.Rec = rec;
        }

        /// <summary>
        /// context id where to search for items
        /// </summary>
        /// <value>context id where to search for items</value>
        [DataMember(Name = "ctx", EmitDefaultValue = false)]
        public int Ctx { get; set; }

        /// <summary>
        /// exlusive mode for this tag area
        /// </summary>
        /// <value>exlusive mode for this tag area</value>
        [DataMember(Name = "excl", EmitDefaultValue = true)]
        public bool Excl { get; set; }

        /// <summary>
        /// context id where the link was displayed
        /// </summary>
        /// <value>context id where the link was displayed</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public int From { get; set; }

        /// <summary>
        /// page number (0-based)
        /// </summary>
        /// <value>page number (0-based)</value>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public int Page { get; set; }

        /// <summary>
        /// search in the context recursive
        /// </summary>
        /// <value>search in the context recursive</value>
        [DataMember(Name = "rec", EmitDefaultValue = false)]
        public int Rec { get; set; }

        /// <summary>
        /// tag area id
        /// </summary>
        /// <value>tag area id</value>
        [DataMember(Name = "ta", IsRequired = true, EmitDefaultValue = true)]
        public int Ta { get; set; }

        /// <summary>
        /// tag name
        /// </summary>
        /// <value>tag name</value>
        [DataMember(Name = "tag", IsRequired = true, EmitDefaultValue = true)]
        public string Tag { get; set; }

        /// <summary>
        /// tag collection id
        /// </summary>
        /// <value>tag collection id</value>
        [DataMember(Name = "tc", IsRequired = true, EmitDefaultValue = true)]
        public int Tc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreTagGetTagindexRequestTagindex {\n");
            sb.Append("  Ctx: ").Append(Ctx).Append("\n");
            sb.Append("  Excl: ").Append(Excl).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Rec: ").Append(Rec).Append("\n");
            sb.Append("  Ta: ").Append(Ta).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Tc: ").Append(Tc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
