/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModQuizAddRandomQuestionsRequest
    /// </summary>
    [DataContract(Name = "mod_quiz_add_random_questions_request")]
    public partial class ModQuizAddRandomQuestionsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModQuizAddRandomQuestionsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModQuizAddRandomQuestionsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModQuizAddRandomQuestionsRequest" /> class.
        /// </summary>
        /// <param name="addonpage">The page where random questions will be added to (required) (default to null).</param>
        /// <param name="cmid">The cmid of the quiz (required) (default to null).</param>
        /// <param name="filtercondition">(Optional) The filter condition used when adding random questions from an existing category.                     Not required if adding random questions from a new category. (default to &quot;&quot;).</param>
        /// <param name="newcategory">(Optional) The name of a new question category to create and use for the random questions. (default to &quot;&quot;).</param>
        /// <param name="parentcategory">(Optional) The parent of the new question category, if creating one. (default to &quot;0&quot;).</param>
        /// <param name="randomcount">Number of random questions (required) (default to null).</param>
        public ModQuizAddRandomQuestionsRequest(int addonpage = null, int cmid = null, string filtercondition = @"", string newcategory = @"", string parentcategory = @"0", int randomcount = null)
        {
            this.Addonpage = addonpage;
            this.Cmid = cmid;
            this.Randomcount = randomcount;
            // use default value if no "filtercondition" provided
            this.Filtercondition = filtercondition ?? @"";
            // use default value if no "newcategory" provided
            this.Newcategory = newcategory ?? @"";
            // use default value if no "parentcategory" provided
            this.Parentcategory = parentcategory ?? @"0";
        }

        /// <summary>
        /// The page where random questions will be added to
        /// </summary>
        /// <value>The page where random questions will be added to</value>
        [DataMember(Name = "addonpage", IsRequired = true, EmitDefaultValue = true)]
        public int Addonpage { get; set; }

        /// <summary>
        /// The cmid of the quiz
        /// </summary>
        /// <value>The cmid of the quiz</value>
        [DataMember(Name = "cmid", IsRequired = true, EmitDefaultValue = true)]
        public int Cmid { get; set; }

        /// <summary>
        /// (Optional) The filter condition used when adding random questions from an existing category.                     Not required if adding random questions from a new category.
        /// </summary>
        /// <value>(Optional) The filter condition used when adding random questions from an existing category.                     Not required if adding random questions from a new category.</value>
        [DataMember(Name = "filtercondition", EmitDefaultValue = false)]
        public string Filtercondition { get; set; }

        /// <summary>
        /// (Optional) The name of a new question category to create and use for the random questions.
        /// </summary>
        /// <value>(Optional) The name of a new question category to create and use for the random questions.</value>
        [DataMember(Name = "newcategory", EmitDefaultValue = false)]
        public string Newcategory { get; set; }

        /// <summary>
        /// (Optional) The parent of the new question category, if creating one.
        /// </summary>
        /// <value>(Optional) The parent of the new question category, if creating one.</value>
        [DataMember(Name = "parentcategory", EmitDefaultValue = false)]
        public string Parentcategory { get; set; }

        /// <summary>
        /// Number of random questions
        /// </summary>
        /// <value>Number of random questions</value>
        [DataMember(Name = "randomcount", IsRequired = true, EmitDefaultValue = true)]
        public int Randomcount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModQuizAddRandomQuestionsRequest {\n");
            sb.Append("  Addonpage: ").Append(Addonpage).Append("\n");
            sb.Append("  Cmid: ").Append(Cmid).Append("\n");
            sb.Append("  Filtercondition: ").Append(Filtercondition).Append("\n");
            sb.Append("  Newcategory: ").Append(Newcategory).Append("\n");
            sb.Append("  Parentcategory: ").Append(Parentcategory).Append("\n");
            sb.Append("  Randomcount: ").Append(Randomcount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
