/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreReportbuilderConditionsAdd200Response
    /// </summary>
    [DataContract(Name = "core_reportbuilder_conditions_add_200_response")]
    public partial class CoreReportbuilderConditionsAdd200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreReportbuilderConditionsAdd200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreReportbuilderConditionsAdd200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreReportbuilderConditionsAdd200Response" /> class.
        /// </summary>
        /// <param name="activeconditionsform">activeconditionsform (required) (default to &quot;null&quot;).</param>
        /// <param name="availableconditions">availableconditions (required).</param>
        /// <param name="hasactiveconditions">hasactiveconditions (required) (default to null).</param>
        /// <param name="hasavailableconditions">hasavailableconditions (required) (default to null).</param>
        /// <param name="helpicon">helpicon (required).</param>
        /// <param name="javascript">javascript (default to &quot;null&quot;).</param>
        public CoreReportbuilderConditionsAdd200Response(string activeconditionsform = @"null", List<CoreReportbuilderConditionsAdd200ResponseAvailableconditionsInner> availableconditions = default(List<CoreReportbuilderConditionsAdd200ResponseAvailableconditionsInner>), bool hasactiveconditions = null, bool hasavailableconditions = null, string helpicon = default(string), string javascript = @"null")
        {
            // to ensure "activeconditionsform" is required (not null)
            if (activeconditionsform == null)
            {
                throw new ArgumentNullException("activeconditionsform is a required property for CoreReportbuilderConditionsAdd200Response and cannot be null");
            }
            this.Activeconditionsform = activeconditionsform;
            // to ensure "availableconditions" is required (not null)
            if (availableconditions == null)
            {
                throw new ArgumentNullException("availableconditions is a required property for CoreReportbuilderConditionsAdd200Response and cannot be null");
            }
            this.Availableconditions = availableconditions;
            this.Hasactiveconditions = hasactiveconditions;
            this.Hasavailableconditions = hasavailableconditions;
            // to ensure "helpicon" is required (not null)
            if (helpicon == null)
            {
                throw new ArgumentNullException("helpicon is a required property for CoreReportbuilderConditionsAdd200Response and cannot be null");
            }
            this.Helpicon = helpicon;
            // use default value if no "javascript" provided
            this.Javascript = javascript ?? @"null";
        }

        /// <summary>
        /// activeconditionsform
        /// </summary>
        /// <value>activeconditionsform</value>
        [DataMember(Name = "activeconditionsform", IsRequired = true, EmitDefaultValue = true)]
        public string Activeconditionsform { get; set; }

        /// <summary>
        /// Gets or Sets Availableconditions
        /// </summary>
        [DataMember(Name = "availableconditions", IsRequired = true, EmitDefaultValue = true)]
        public List<CoreReportbuilderConditionsAdd200ResponseAvailableconditionsInner> Availableconditions { get; set; }

        /// <summary>
        /// hasactiveconditions
        /// </summary>
        /// <value>hasactiveconditions</value>
        [DataMember(Name = "hasactiveconditions", IsRequired = true, EmitDefaultValue = true)]
        public bool Hasactiveconditions { get; set; }

        /// <summary>
        /// hasavailableconditions
        /// </summary>
        /// <value>hasavailableconditions</value>
        [DataMember(Name = "hasavailableconditions", IsRequired = true, EmitDefaultValue = true)]
        public bool Hasavailableconditions { get; set; }

        /// <summary>
        /// helpicon
        /// </summary>
        /// <value>helpicon</value>
        [DataMember(Name = "helpicon", IsRequired = true, EmitDefaultValue = true)]
        public string Helpicon { get; set; }

        /// <summary>
        /// javascript
        /// </summary>
        /// <value>javascript</value>
        [DataMember(Name = "javascript", EmitDefaultValue = false)]
        public string Javascript { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreReportbuilderConditionsAdd200Response {\n");
            sb.Append("  Activeconditionsform: ").Append(Activeconditionsform).Append("\n");
            sb.Append("  Availableconditions: ").Append(Availableconditions).Append("\n");
            sb.Append("  Hasactiveconditions: ").Append(Hasactiveconditions).Append("\n");
            sb.Append("  Hasavailableconditions: ").Append(Hasavailableconditions).Append("\n");
            sb.Append("  Helpicon: ").Append(Helpicon).Append("\n");
            sb.Append("  Javascript: ").Append(Javascript).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
