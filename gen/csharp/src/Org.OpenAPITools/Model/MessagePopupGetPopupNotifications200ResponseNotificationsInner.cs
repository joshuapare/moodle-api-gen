/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// message
    /// </summary>
    [DataContract(Name = "message_popup_get_popup_notifications_200_response_notifications_inner")]
    public partial class MessagePopupGetPopupNotifications200ResponseNotificationsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessagePopupGetPopupNotifications200ResponseNotificationsInner" /> class.
        /// </summary>
        /// <param name="component">The component that generated the notification.</param>
        /// <param name="contexturl">Context URL.</param>
        /// <param name="contexturlname">Context URL link name.</param>
        /// <param name="customdata">Custom data to be passed to the message processor.                                 The data here is serialised using json_encode()..</param>
        /// <param name="deleted">notification deletion status (default to null).</param>
        /// <param name="eventtype">The type of notification.</param>
        /// <param name="fullmessage">The message.</param>
        /// <param name="fullmessageformat">fullmessage format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN).</param>
        /// <param name="fullmessagehtml">The message in html.</param>
        /// <param name="iconurl">URL for notification icon (default to &quot;null&quot;).</param>
        /// <param name="id">Notification id (this is not guaranteed to be unique                                 within this result set) (default to null).</param>
        /// <param name="read">notification read status (default to null).</param>
        /// <param name="shortenedsubject">The notification subject shortened                                 with ellipsis (default to &quot;null&quot;).</param>
        /// <param name="smallmessage">The shorten message.</param>
        /// <param name="subject">The notification subject (default to &quot;null&quot;).</param>
        /// <param name="text">The message text formated.</param>
        /// <param name="timecreated">Time created.</param>
        /// <param name="timecreatedpretty">Time created in a pretty format (default to &quot;null&quot;).</param>
        /// <param name="timeread">Time read.</param>
        /// <param name="useridfrom">User from id.</param>
        /// <param name="useridto">User to id.</param>
        public MessagePopupGetPopupNotifications200ResponseNotificationsInner(string component = default(string), string contexturl = default(string), string contexturlname = default(string), string customdata = default(string), bool deleted = null, string eventtype = default(string), string fullmessage = default(string), int fullmessageformat = default(int), string fullmessagehtml = default(string), string iconurl = @"null", int id = null, bool read = null, string shortenedsubject = @"null", string smallmessage = default(string), string subject = @"null", string text = default(string), int timecreated = default(int), string timecreatedpretty = @"null", int timeread = default(int), int useridfrom = default(int), int useridto = default(int))
        {
            this.Component = component;
            this.Contexturl = contexturl;
            this.Contexturlname = contexturlname;
            this.Customdata = customdata;
            this.Deleted = deleted;
            this.Eventtype = eventtype;
            this.Fullmessage = fullmessage;
            this.Fullmessageformat = fullmessageformat;
            this.Fullmessagehtml = fullmessagehtml;
            // use default value if no "iconurl" provided
            this.Iconurl = iconurl ?? @"null";
            this.Id = id;
            this.Read = read;
            // use default value if no "shortenedsubject" provided
            this.Shortenedsubject = shortenedsubject ?? @"null";
            this.Smallmessage = smallmessage;
            // use default value if no "subject" provided
            this.Subject = subject ?? @"null";
            this.Text = text;
            this.Timecreated = timecreated;
            // use default value if no "timecreatedpretty" provided
            this.Timecreatedpretty = timecreatedpretty ?? @"null";
            this.Timeread = timeread;
            this.Useridfrom = useridfrom;
            this.Useridto = useridto;
        }

        /// <summary>
        /// The component that generated the notification
        /// </summary>
        /// <value>The component that generated the notification</value>
        [DataMember(Name = "component", EmitDefaultValue = false)]
        public string Component { get; set; }

        /// <summary>
        /// Context URL
        /// </summary>
        /// <value>Context URL</value>
        [DataMember(Name = "contexturl", EmitDefaultValue = false)]
        public string Contexturl { get; set; }

        /// <summary>
        /// Context URL link name
        /// </summary>
        /// <value>Context URL link name</value>
        [DataMember(Name = "contexturlname", EmitDefaultValue = false)]
        public string Contexturlname { get; set; }

        /// <summary>
        /// Custom data to be passed to the message processor.                                 The data here is serialised using json_encode().
        /// </summary>
        /// <value>Custom data to be passed to the message processor.                                 The data here is serialised using json_encode().</value>
        [DataMember(Name = "customdata", EmitDefaultValue = false)]
        public string Customdata { get; set; }

        /// <summary>
        /// notification deletion status
        /// </summary>
        /// <value>notification deletion status</value>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// The type of notification
        /// </summary>
        /// <value>The type of notification</value>
        [DataMember(Name = "eventtype", EmitDefaultValue = false)]
        public string Eventtype { get; set; }

        /// <summary>
        /// The message
        /// </summary>
        /// <value>The message</value>
        [DataMember(Name = "fullmessage", EmitDefaultValue = false)]
        public string Fullmessage { get; set; }

        /// <summary>
        /// fullmessage format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>fullmessage format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "fullmessageformat", EmitDefaultValue = false)]
        public int Fullmessageformat { get; set; }

        /// <summary>
        /// The message in html
        /// </summary>
        /// <value>The message in html</value>
        [DataMember(Name = "fullmessagehtml", EmitDefaultValue = false)]
        public string Fullmessagehtml { get; set; }

        /// <summary>
        /// URL for notification icon
        /// </summary>
        /// <value>URL for notification icon</value>
        [DataMember(Name = "iconurl", EmitDefaultValue = false)]
        public string Iconurl { get; set; }

        /// <summary>
        /// Notification id (this is not guaranteed to be unique                                 within this result set)
        /// </summary>
        /// <value>Notification id (this is not guaranteed to be unique                                 within this result set)</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// notification read status
        /// </summary>
        /// <value>notification read status</value>
        [DataMember(Name = "read", EmitDefaultValue = true)]
        public bool Read { get; set; }

        /// <summary>
        /// The notification subject shortened                                 with ellipsis
        /// </summary>
        /// <value>The notification subject shortened                                 with ellipsis</value>
        [DataMember(Name = "shortenedsubject", EmitDefaultValue = false)]
        public string Shortenedsubject { get; set; }

        /// <summary>
        /// The shorten message
        /// </summary>
        /// <value>The shorten message</value>
        [DataMember(Name = "smallmessage", EmitDefaultValue = false)]
        public string Smallmessage { get; set; }

        /// <summary>
        /// The notification subject
        /// </summary>
        /// <value>The notification subject</value>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// The message text formated
        /// </summary>
        /// <value>The message text formated</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Time created
        /// </summary>
        /// <value>Time created</value>
        [DataMember(Name = "timecreated", EmitDefaultValue = false)]
        public int Timecreated { get; set; }

        /// <summary>
        /// Time created in a pretty format
        /// </summary>
        /// <value>Time created in a pretty format</value>
        [DataMember(Name = "timecreatedpretty", EmitDefaultValue = false)]
        public string Timecreatedpretty { get; set; }

        /// <summary>
        /// Time read
        /// </summary>
        /// <value>Time read</value>
        [DataMember(Name = "timeread", EmitDefaultValue = false)]
        public int Timeread { get; set; }

        /// <summary>
        /// User from id
        /// </summary>
        /// <value>User from id</value>
        [DataMember(Name = "useridfrom", EmitDefaultValue = false)]
        public int Useridfrom { get; set; }

        /// <summary>
        /// User to id
        /// </summary>
        /// <value>User to id</value>
        [DataMember(Name = "useridto", EmitDefaultValue = false)]
        public int Useridto { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessagePopupGetPopupNotifications200ResponseNotificationsInner {\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Contexturl: ").Append(Contexturl).Append("\n");
            sb.Append("  Contexturlname: ").Append(Contexturlname).Append("\n");
            sb.Append("  Customdata: ").Append(Customdata).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Eventtype: ").Append(Eventtype).Append("\n");
            sb.Append("  Fullmessage: ").Append(Fullmessage).Append("\n");
            sb.Append("  Fullmessageformat: ").Append(Fullmessageformat).Append("\n");
            sb.Append("  Fullmessagehtml: ").Append(Fullmessagehtml).Append("\n");
            sb.Append("  Iconurl: ").Append(Iconurl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  Shortenedsubject: ").Append(Shortenedsubject).Append("\n");
            sb.Append("  Smallmessage: ").Append(Smallmessage).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timecreatedpretty: ").Append(Timecreatedpretty).Append("\n");
            sb.Append("  Timeread: ").Append(Timeread).Append("\n");
            sb.Append("  Useridfrom: ").Append(Useridfrom).Append("\n");
            sb.Append("  Useridto: ").Append(Useridto).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
