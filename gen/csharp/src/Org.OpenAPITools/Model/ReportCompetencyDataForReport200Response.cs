/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ReportCompetencyDataForReport200Response
    /// </summary>
    [DataContract(Name = "report_competency_data_for_report_200_response")]
    public partial class ReportCompetencyDataForReport200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportCompetencyDataForReport200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportCompetencyDataForReport200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportCompetencyDataForReport200Response" /> class.
        /// </summary>
        /// <param name="course">course (required).</param>
        /// <param name="courseid">Course id (required).</param>
        /// <param name="pushratingstouserplans">True if rating is push to user plans (required) (default to null).</param>
        /// <param name="user">user (required).</param>
        /// <param name="usercompetencies">usercompetencies (required).</param>
        public ReportCompetencyDataForReport200Response(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse course = default(CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse), int courseid = default(int), bool pushratingstouserplans = null, CoreCompetencyGradeCompetency200ResponseActionuser user = default(CoreCompetencyGradeCompetency200ResponseActionuser), List<ReportCompetencyDataForReport200ResponseUsercompetenciesInner> usercompetencies = default(List<ReportCompetencyDataForReport200ResponseUsercompetenciesInner>))
        {
            // to ensure "course" is required (not null)
            if (course == null)
            {
                throw new ArgumentNullException("course is a required property for ReportCompetencyDataForReport200Response and cannot be null");
            }
            this.Course = course;
            this.Courseid = courseid;
            this.Pushratingstouserplans = pushratingstouserplans;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for ReportCompetencyDataForReport200Response and cannot be null");
            }
            this.User = user;
            // to ensure "usercompetencies" is required (not null)
            if (usercompetencies == null)
            {
                throw new ArgumentNullException("usercompetencies is a required property for ReportCompetencyDataForReport200Response and cannot be null");
            }
            this.Usercompetencies = usercompetencies;
        }

        /// <summary>
        /// Gets or Sets Course
        /// </summary>
        [DataMember(Name = "course", IsRequired = true, EmitDefaultValue = true)]
        public CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse Course { get; set; }

        /// <summary>
        /// Course id
        /// </summary>
        /// <value>Course id</value>
        [DataMember(Name = "courseid", IsRequired = true, EmitDefaultValue = true)]
        public int Courseid { get; set; }

        /// <summary>
        /// True if rating is push to user plans
        /// </summary>
        /// <value>True if rating is push to user plans</value>
        [DataMember(Name = "pushratingstouserplans", IsRequired = true, EmitDefaultValue = true)]
        public bool Pushratingstouserplans { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = true)]
        public CoreCompetencyGradeCompetency200ResponseActionuser User { get; set; }

        /// <summary>
        /// Gets or Sets Usercompetencies
        /// </summary>
        [DataMember(Name = "usercompetencies", IsRequired = true, EmitDefaultValue = true)]
        public List<ReportCompetencyDataForReport200ResponseUsercompetenciesInner> Usercompetencies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportCompetencyDataForReport200Response {\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Courseid: ").Append(Courseid).Append("\n");
            sb.Append("  Pushratingstouserplans: ").Append(Pushratingstouserplans).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Usercompetencies: ").Append(Usercompetencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
