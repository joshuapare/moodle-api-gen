/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ToolLpDataForUserEvidencePage200ResponseUserevidence
    /// </summary>
    [DataContract(Name = "tool_lp_data_for_user_evidence_page_200_response_userevidence")]
    public partial class ToolLpDataForUserEvidencePage200ResponseUserevidence : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForUserEvidencePage200ResponseUserevidence" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolLpDataForUserEvidencePage200ResponseUserevidence() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForUserEvidencePage200ResponseUserevidence" /> class.
        /// </summary>
        /// <param name="canmanage">canmanage (required).</param>
        /// <param name="competencycount">competencycount (required).</param>
        /// <param name="description">description (required) (default to &quot;&quot;).</param>
        /// <param name="descriptionformat">description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 1).</param>
        /// <param name="filecount">filecount (required).</param>
        /// <param name="files">files (required).</param>
        /// <param name="hasurlorfiles">hasurlorfiles (required).</param>
        /// <param name="id">id (required) (default to 0).</param>
        /// <param name="name">name (required).</param>
        /// <param name="timecreated">timecreated (required) (default to 0).</param>
        /// <param name="timemodified">timemodified (required) (default to 0).</param>
        /// <param name="url">url (required) (default to &quot;&quot;).</param>
        /// <param name="urlshort">urlshort (required).</param>
        /// <param name="usercompetencies">usercompetencies.</param>
        /// <param name="userhasplan">userhasplan (required).</param>
        /// <param name="userid">userid (required).</param>
        /// <param name="usermodified">usermodified (required) (default to 0).</param>
        public ToolLpDataForUserEvidencePage200ResponseUserevidence(bool canmanage = default(bool), int competencycount = default(int), string description = @"", int descriptionformat = 1, int filecount = default(int), List<ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner> files = default(List<ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner>), bool hasurlorfiles = default(bool), int id = 0, string name = default(string), int timecreated = 0, int timemodified = 0, string url = @"", string urlshort = default(string), List<ToolLpDataForUserEvidenceListPage200ResponseEvidenceInnerUsercompetenciesInner> usercompetencies = default(List<ToolLpDataForUserEvidenceListPage200ResponseEvidenceInnerUsercompetenciesInner>), bool userhasplan = default(bool), int userid = default(int), int usermodified = 0)
        {
            this.Canmanage = canmanage;
            this.Competencycount = competencycount;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ToolLpDataForUserEvidencePage200ResponseUserevidence and cannot be null");
            }
            this.Description = description;
            this.Filecount = filecount;
            // to ensure "files" is required (not null)
            if (files == null)
            {
                throw new ArgumentNullException("files is a required property for ToolLpDataForUserEvidencePage200ResponseUserevidence and cannot be null");
            }
            this.Files = files;
            this.Hasurlorfiles = hasurlorfiles;
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ToolLpDataForUserEvidencePage200ResponseUserevidence and cannot be null");
            }
            this.Name = name;
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for ToolLpDataForUserEvidencePage200ResponseUserevidence and cannot be null");
            }
            this.Url = url;
            // to ensure "urlshort" is required (not null)
            if (urlshort == null)
            {
                throw new ArgumentNullException("urlshort is a required property for ToolLpDataForUserEvidencePage200ResponseUserevidence and cannot be null");
            }
            this.Urlshort = urlshort;
            this.Userhasplan = userhasplan;
            this.Userid = userid;
            this.Usermodified = usermodified;
            this.Descriptionformat = descriptionformat;
            this.Usercompetencies = usercompetencies;
        }

        /// <summary>
        /// canmanage
        /// </summary>
        /// <value>canmanage</value>
        [DataMember(Name = "canmanage", IsRequired = true, EmitDefaultValue = true)]
        public bool Canmanage { get; set; }

        /// <summary>
        /// competencycount
        /// </summary>
        /// <value>competencycount</value>
        [DataMember(Name = "competencycount", IsRequired = true, EmitDefaultValue = true)]
        public int Competencycount { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "descriptionformat", EmitDefaultValue = false)]
        public int Descriptionformat { get; set; }

        /// <summary>
        /// filecount
        /// </summary>
        /// <value>filecount</value>
        [DataMember(Name = "filecount", IsRequired = true, EmitDefaultValue = true)]
        public int Filecount { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name = "files", IsRequired = true, EmitDefaultValue = true)]
        public List<ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner> Files { get; set; }

        /// <summary>
        /// hasurlorfiles
        /// </summary>
        /// <value>hasurlorfiles</value>
        [DataMember(Name = "hasurlorfiles", IsRequired = true, EmitDefaultValue = true)]
        public bool Hasurlorfiles { get; set; }

        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// timecreated
        /// </summary>
        /// <value>timecreated</value>
        [DataMember(Name = "timecreated", IsRequired = true, EmitDefaultValue = true)]
        public int Timecreated { get; set; }

        /// <summary>
        /// timemodified
        /// </summary>
        /// <value>timemodified</value>
        [DataMember(Name = "timemodified", IsRequired = true, EmitDefaultValue = true)]
        public int Timemodified { get; set; }

        /// <summary>
        /// url
        /// </summary>
        /// <value>url</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// urlshort
        /// </summary>
        /// <value>urlshort</value>
        [DataMember(Name = "urlshort", IsRequired = true, EmitDefaultValue = true)]
        public string Urlshort { get; set; }

        /// <summary>
        /// Gets or Sets Usercompetencies
        /// </summary>
        [DataMember(Name = "usercompetencies", EmitDefaultValue = false)]
        public List<ToolLpDataForUserEvidenceListPage200ResponseEvidenceInnerUsercompetenciesInner> Usercompetencies { get; set; }

        /// <summary>
        /// userhasplan
        /// </summary>
        /// <value>userhasplan</value>
        [DataMember(Name = "userhasplan", IsRequired = true, EmitDefaultValue = true)]
        public bool Userhasplan { get; set; }

        /// <summary>
        /// userid
        /// </summary>
        /// <value>userid</value>
        [DataMember(Name = "userid", IsRequired = true, EmitDefaultValue = true)]
        public int Userid { get; set; }

        /// <summary>
        /// usermodified
        /// </summary>
        /// <value>usermodified</value>
        [DataMember(Name = "usermodified", IsRequired = true, EmitDefaultValue = true)]
        public int Usermodified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolLpDataForUserEvidencePage200ResponseUserevidence {\n");
            sb.Append("  Canmanage: ").Append(Canmanage).Append("\n");
            sb.Append("  Competencycount: ").Append(Competencycount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Descriptionformat: ").Append(Descriptionformat).Append("\n");
            sb.Append("  Filecount: ").Append(Filecount).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Hasurlorfiles: ").Append(Hasurlorfiles).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Urlshort: ").Append(Urlshort).Append("\n");
            sb.Append("  Usercompetencies: ").Append(Usercompetencies).Append("\n");
            sb.Append("  Userhasplan: ").Append(Userhasplan).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("  Usermodified: ").Append(Usermodified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
