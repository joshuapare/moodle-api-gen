/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModFeedbackGetLastCompleted200ResponseCompleted
    /// </summary>
    [DataContract(Name = "mod_feedback_get_last_completed_200_response_completed")]
    public partial class ModFeedbackGetLastCompleted200ResponseCompleted : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModFeedbackGetLastCompleted200ResponseCompleted" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModFeedbackGetLastCompleted200ResponseCompleted() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModFeedbackGetLastCompleted200ResponseCompleted" /> class.
        /// </summary>
        /// <param name="anonymousResponse">Whether is an anonymous response. (required).</param>
        /// <param name="courseid">The course id where the feedback was completed. (required).</param>
        /// <param name="feedback">The feedback instance id this records belongs to. (required).</param>
        /// <param name="id">The record id. (required).</param>
        /// <param name="randomResponse">The response number (used when shuffling anonymous responses). (required).</param>
        /// <param name="timemodified">The last time the feedback was completed. (required).</param>
        /// <param name="userid">The user who completed the feedback (0 for anonymous). (required).</param>
        public ModFeedbackGetLastCompleted200ResponseCompleted(int anonymousResponse = default(int), int courseid = default(int), int feedback = default(int), int id = default(int), int randomResponse = default(int), int timemodified = default(int), int userid = default(int))
        {
            this.AnonymousResponse = anonymousResponse;
            this.Courseid = courseid;
            this.Feedback = feedback;
            this.Id = id;
            this.RandomResponse = randomResponse;
            this.Timemodified = timemodified;
            this.Userid = userid;
        }

        /// <summary>
        /// Whether is an anonymous response.
        /// </summary>
        /// <value>Whether is an anonymous response.</value>
        [DataMember(Name = "anonymous_response", IsRequired = true, EmitDefaultValue = true)]
        public int AnonymousResponse { get; set; }

        /// <summary>
        /// The course id where the feedback was completed.
        /// </summary>
        /// <value>The course id where the feedback was completed.</value>
        [DataMember(Name = "courseid", IsRequired = true, EmitDefaultValue = true)]
        public int Courseid { get; set; }

        /// <summary>
        /// The feedback instance id this records belongs to.
        /// </summary>
        /// <value>The feedback instance id this records belongs to.</value>
        [DataMember(Name = "feedback", IsRequired = true, EmitDefaultValue = true)]
        public int Feedback { get; set; }

        /// <summary>
        /// The record id.
        /// </summary>
        /// <value>The record id.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// The response number (used when shuffling anonymous responses).
        /// </summary>
        /// <value>The response number (used when shuffling anonymous responses).</value>
        [DataMember(Name = "random_response", IsRequired = true, EmitDefaultValue = true)]
        public int RandomResponse { get; set; }

        /// <summary>
        /// The last time the feedback was completed.
        /// </summary>
        /// <value>The last time the feedback was completed.</value>
        [DataMember(Name = "timemodified", IsRequired = true, EmitDefaultValue = true)]
        public int Timemodified { get; set; }

        /// <summary>
        /// The user who completed the feedback (0 for anonymous).
        /// </summary>
        /// <value>The user who completed the feedback (0 for anonymous).</value>
        [DataMember(Name = "userid", IsRequired = true, EmitDefaultValue = true)]
        public int Userid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModFeedbackGetLastCompleted200ResponseCompleted {\n");
            sb.Append("  AnonymousResponse: ").Append(AnonymousResponse).Append("\n");
            sb.Append("  Courseid: ").Append(Courseid).Append("\n");
            sb.Append("  Feedback: ").Append(Feedback).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RandomResponse: ").Append(RandomResponse).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
