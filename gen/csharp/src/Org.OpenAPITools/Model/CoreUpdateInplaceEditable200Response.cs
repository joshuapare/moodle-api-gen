/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CoreUpdateInplaceEditable200Response
    /// </summary>
    [DataContract(Name = "core_update_inplace_editable_200_response")]
    public partial class CoreUpdateInplaceEditable200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreUpdateInplaceEditable200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreUpdateInplaceEditable200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreUpdateInplaceEditable200Response" /> class.
        /// </summary>
        /// <param name="component">component responsible for the update.</param>
        /// <param name="displayvalue">display value (may contain link or other html tags) (required) (default to &quot;null&quot;).</param>
        /// <param name="edithint">hint for editing element (default to &quot;null&quot;).</param>
        /// <param name="editicon">editicon.</param>
        /// <param name="editlabel">label for editing element (default to &quot;null&quot;).</param>
        /// <param name="itemid">identifier of the updated item.</param>
        /// <param name="itemtype">itemtype.</param>
        /// <param name="linkeverything">Should everything be wrapped in the edit link or link displayed separately (default to null).</param>
        /// <param name="options">options of the element, format depends on type (default to &quot;null&quot;).</param>
        /// <param name="type">type of the element (text, toggle, select) (default to &quot;null&quot;).</param>
        /// <param name="value">value of the item as it is stored (default to &quot;null&quot;).</param>
        public CoreUpdateInplaceEditable200Response(string component = default(string), string displayvalue = @"null", string edithint = @"null", CoreUpdateInplaceEditable200ResponseEditicon editicon = default(CoreUpdateInplaceEditable200ResponseEditicon), string editlabel = @"null", string itemid = default(string), string itemtype = default(string), int linkeverything = null, string options = @"null", string type = @"null", string value = @"null")
        {
            // to ensure "displayvalue" is required (not null)
            if (displayvalue == null)
            {
                throw new ArgumentNullException("displayvalue is a required property for CoreUpdateInplaceEditable200Response and cannot be null");
            }
            this.Displayvalue = displayvalue;
            this.Component = component;
            // use default value if no "edithint" provided
            this.Edithint = edithint ?? @"null";
            this.Editicon = editicon;
            // use default value if no "editlabel" provided
            this.Editlabel = editlabel ?? @"null";
            this.Itemid = itemid;
            this.Itemtype = itemtype;
            this.Linkeverything = linkeverything;
            // use default value if no "options" provided
            this.Options = options ?? @"null";
            // use default value if no "type" provided
            this.Type = type ?? @"null";
            // use default value if no "value" provided
            this.Value = value ?? @"null";
        }

        /// <summary>
        /// component responsible for the update
        /// </summary>
        /// <value>component responsible for the update</value>
        [DataMember(Name = "component", EmitDefaultValue = false)]
        public string Component { get; set; }

        /// <summary>
        /// display value (may contain link or other html tags)
        /// </summary>
        /// <value>display value (may contain link or other html tags)</value>
        [DataMember(Name = "displayvalue", IsRequired = true, EmitDefaultValue = true)]
        public string Displayvalue { get; set; }

        /// <summary>
        /// hint for editing element
        /// </summary>
        /// <value>hint for editing element</value>
        [DataMember(Name = "edithint", EmitDefaultValue = false)]
        public string Edithint { get; set; }

        /// <summary>
        /// Gets or Sets Editicon
        /// </summary>
        [DataMember(Name = "editicon", EmitDefaultValue = false)]
        public CoreUpdateInplaceEditable200ResponseEditicon Editicon { get; set; }

        /// <summary>
        /// label for editing element
        /// </summary>
        /// <value>label for editing element</value>
        [DataMember(Name = "editlabel", EmitDefaultValue = false)]
        public string Editlabel { get; set; }

        /// <summary>
        /// identifier of the updated item
        /// </summary>
        /// <value>identifier of the updated item</value>
        [DataMember(Name = "itemid", EmitDefaultValue = false)]
        public string Itemid { get; set; }

        /// <summary>
        /// itemtype
        /// </summary>
        /// <value>itemtype</value>
        [DataMember(Name = "itemtype", EmitDefaultValue = false)]
        public string Itemtype { get; set; }

        /// <summary>
        /// Should everything be wrapped in the edit link or link displayed separately
        /// </summary>
        /// <value>Should everything be wrapped in the edit link or link displayed separately</value>
        [DataMember(Name = "linkeverything", EmitDefaultValue = false)]
        public int Linkeverything { get; set; }

        /// <summary>
        /// options of the element, format depends on type
        /// </summary>
        /// <value>options of the element, format depends on type</value>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public string Options { get; set; }

        /// <summary>
        /// type of the element (text, toggle, select)
        /// </summary>
        /// <value>type of the element (text, toggle, select)</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// value of the item as it is stored
        /// </summary>
        /// <value>value of the item as it is stored</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreUpdateInplaceEditable200Response {\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Displayvalue: ").Append(Displayvalue).Append("\n");
            sb.Append("  Edithint: ").Append(Edithint).Append("\n");
            sb.Append("  Editicon: ").Append(Editicon).Append("\n");
            sb.Append("  Editlabel: ").Append(Editlabel).Append("\n");
            sb.Append("  Itemid: ").Append(Itemid).Append("\n");
            sb.Append("  Itemtype: ").Append(Itemtype).Append("\n");
            sb.Append("  Linkeverything: ").Append(Linkeverything).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
