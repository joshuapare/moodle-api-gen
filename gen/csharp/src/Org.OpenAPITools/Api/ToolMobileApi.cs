/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolMobileApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Call multiple external functions and return all responses.
        /// </summary>
        /// <remarks>
        /// Call multiple external functions and return all responses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileCallExternalFunctionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileCallExternalFunctions200Response</returns>
        ToolMobileCallExternalFunctions200Response ToolMobileCallExternalFunctions(ToolMobileCallExternalFunctionsRequest toolMobileCallExternalFunctionsRequest, int operationIndex = 0);

        /// <summary>
        /// Call multiple external functions and return all responses.
        /// </summary>
        /// <remarks>
        /// Call multiple external functions and return all responses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileCallExternalFunctionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileCallExternalFunctions200Response</returns>
        ApiResponse<ToolMobileCallExternalFunctions200Response> ToolMobileCallExternalFunctionsWithHttpInfo(ToolMobileCallExternalFunctionsRequest toolMobileCallExternalFunctionsRequest, int operationIndex = 0);
        /// <summary>
        /// Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
        /// </summary>
        /// <remarks>
        /// Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetAutologinKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileGetAutologinKey200Response</returns>
        ToolMobileGetAutologinKey200Response ToolMobileGetAutologinKey(ToolMobileGetAutologinKeyRequest toolMobileGetAutologinKeyRequest, int operationIndex = 0);

        /// <summary>
        /// Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
        /// </summary>
        /// <remarks>
        /// Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetAutologinKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileGetAutologinKey200Response</returns>
        ApiResponse<ToolMobileGetAutologinKey200Response> ToolMobileGetAutologinKeyWithHttpInfo(ToolMobileGetAutologinKeyRequest toolMobileGetAutologinKeyRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of the site configurations, filtering by section.
        /// </summary>
        /// <remarks>
        /// Returns a list of the site configurations, filtering by section.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetConfigRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileGetConfig200Response</returns>
        ToolMobileGetConfig200Response ToolMobileGetConfig(ToolMobileGetConfigRequest toolMobileGetConfigRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of the site configurations, filtering by section.
        /// </summary>
        /// <remarks>
        /// Returns a list of the site configurations, filtering by section.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetConfigRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileGetConfig200Response</returns>
        ApiResponse<ToolMobileGetConfig200Response> ToolMobileGetConfigWithHttpInfo(ToolMobileGetConfigRequest toolMobileGetConfigRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a piece of content to be displayed in the Mobile app.
        /// </summary>
        /// <remarks>
        /// Returns a piece of content to be displayed in the Mobile app.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetContentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileGetContent200Response</returns>
        ToolMobileGetContent200Response ToolMobileGetContent(ToolMobileGetContentRequest toolMobileGetContentRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a piece of content to be displayed in the Mobile app.
        /// </summary>
        /// <remarks>
        /// Returns a piece of content to be displayed in the Mobile app.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetContentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileGetContent200Response</returns>
        ApiResponse<ToolMobileGetContent200Response> ToolMobileGetContentWithHttpInfo(ToolMobileGetContentRequest toolMobileGetContentRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of Moodle plugins supporting the mobile app.
        /// </summary>
        /// <remarks>
        /// Returns a list of Moodle plugins supporting the mobile app.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileGetPluginsSupportingMobile200Response</returns>
        ToolMobileGetPluginsSupportingMobile200Response ToolMobileGetPluginsSupportingMobile(int operationIndex = 0);

        /// <summary>
        /// Returns a list of Moodle plugins supporting the mobile app.
        /// </summary>
        /// <remarks>
        /// Returns a list of Moodle plugins supporting the mobile app.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileGetPluginsSupportingMobile200Response</returns>
        ApiResponse<ToolMobileGetPluginsSupportingMobile200Response> ToolMobileGetPluginsSupportingMobileWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Returns a list of the site public settings, those not requiring authentication.
        /// </summary>
        /// <remarks>
        /// Returns a list of the site public settings, those not requiring authentication.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileGetPublicConfig200Response</returns>
        ToolMobileGetPublicConfig200Response ToolMobileGetPublicConfig(int operationIndex = 0);

        /// <summary>
        /// Returns a list of the site public settings, those not requiring authentication.
        /// </summary>
        /// <remarks>
        /// Returns a list of the site public settings, those not requiring authentication.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileGetPublicConfig200Response</returns>
        ApiResponse<ToolMobileGetPublicConfig200Response> ToolMobileGetPublicConfigWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Returns a WebService token (and private token) for QR login.
        /// </summary>
        /// <remarks>
        /// Returns a WebService token (and private token) for QR login.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetTokensForQrLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileGetTokensForQrLogin200Response</returns>
        ToolMobileGetTokensForQrLogin200Response ToolMobileGetTokensForQrLogin(ToolMobileGetTokensForQrLoginRequest toolMobileGetTokensForQrLoginRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a WebService token (and private token) for QR login.
        /// </summary>
        /// <remarks>
        /// Returns a WebService token (and private token) for QR login.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetTokensForQrLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileGetTokensForQrLogin200Response</returns>
        ApiResponse<ToolMobileGetTokensForQrLogin200Response> ToolMobileGetTokensForQrLoginWithHttpInfo(ToolMobileGetTokensForQrLoginRequest toolMobileGetTokensForQrLoginRequest, int operationIndex = 0);
        /// <summary>
        /// Check if the given site subscription key is valid.
        /// </summary>
        /// <remarks>
        /// Check if the given site subscription key is valid.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileValidateSubscriptionKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileValidateSubscriptionKey200Response</returns>
        ToolMobileValidateSubscriptionKey200Response ToolMobileValidateSubscriptionKey(ToolMobileValidateSubscriptionKeyRequest toolMobileValidateSubscriptionKeyRequest, int operationIndex = 0);

        /// <summary>
        /// Check if the given site subscription key is valid.
        /// </summary>
        /// <remarks>
        /// Check if the given site subscription key is valid.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileValidateSubscriptionKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileValidateSubscriptionKey200Response</returns>
        ApiResponse<ToolMobileValidateSubscriptionKey200Response> ToolMobileValidateSubscriptionKeyWithHttpInfo(ToolMobileValidateSubscriptionKeyRequest toolMobileValidateSubscriptionKeyRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolMobileApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Call multiple external functions and return all responses.
        /// </summary>
        /// <remarks>
        /// Call multiple external functions and return all responses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileCallExternalFunctionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileCallExternalFunctions200Response</returns>
        System.Threading.Tasks.Task<ToolMobileCallExternalFunctions200Response> ToolMobileCallExternalFunctionsAsync(ToolMobileCallExternalFunctionsRequest toolMobileCallExternalFunctionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Call multiple external functions and return all responses.
        /// </summary>
        /// <remarks>
        /// Call multiple external functions and return all responses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileCallExternalFunctionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileCallExternalFunctions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolMobileCallExternalFunctions200Response>> ToolMobileCallExternalFunctionsWithHttpInfoAsync(ToolMobileCallExternalFunctionsRequest toolMobileCallExternalFunctionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
        /// </summary>
        /// <remarks>
        /// Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetAutologinKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileGetAutologinKey200Response</returns>
        System.Threading.Tasks.Task<ToolMobileGetAutologinKey200Response> ToolMobileGetAutologinKeyAsync(ToolMobileGetAutologinKeyRequest toolMobileGetAutologinKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
        /// </summary>
        /// <remarks>
        /// Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetAutologinKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileGetAutologinKey200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolMobileGetAutologinKey200Response>> ToolMobileGetAutologinKeyWithHttpInfoAsync(ToolMobileGetAutologinKeyRequest toolMobileGetAutologinKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of the site configurations, filtering by section.
        /// </summary>
        /// <remarks>
        /// Returns a list of the site configurations, filtering by section.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetConfigRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileGetConfig200Response</returns>
        System.Threading.Tasks.Task<ToolMobileGetConfig200Response> ToolMobileGetConfigAsync(ToolMobileGetConfigRequest toolMobileGetConfigRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of the site configurations, filtering by section.
        /// </summary>
        /// <remarks>
        /// Returns a list of the site configurations, filtering by section.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetConfigRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileGetConfig200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolMobileGetConfig200Response>> ToolMobileGetConfigWithHttpInfoAsync(ToolMobileGetConfigRequest toolMobileGetConfigRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a piece of content to be displayed in the Mobile app.
        /// </summary>
        /// <remarks>
        /// Returns a piece of content to be displayed in the Mobile app.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetContentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileGetContent200Response</returns>
        System.Threading.Tasks.Task<ToolMobileGetContent200Response> ToolMobileGetContentAsync(ToolMobileGetContentRequest toolMobileGetContentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a piece of content to be displayed in the Mobile app.
        /// </summary>
        /// <remarks>
        /// Returns a piece of content to be displayed in the Mobile app.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetContentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileGetContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolMobileGetContent200Response>> ToolMobileGetContentWithHttpInfoAsync(ToolMobileGetContentRequest toolMobileGetContentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of Moodle plugins supporting the mobile app.
        /// </summary>
        /// <remarks>
        /// Returns a list of Moodle plugins supporting the mobile app.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileGetPluginsSupportingMobile200Response</returns>
        System.Threading.Tasks.Task<ToolMobileGetPluginsSupportingMobile200Response> ToolMobileGetPluginsSupportingMobileAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of Moodle plugins supporting the mobile app.
        /// </summary>
        /// <remarks>
        /// Returns a list of Moodle plugins supporting the mobile app.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileGetPluginsSupportingMobile200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolMobileGetPluginsSupportingMobile200Response>> ToolMobileGetPluginsSupportingMobileWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of the site public settings, those not requiring authentication.
        /// </summary>
        /// <remarks>
        /// Returns a list of the site public settings, those not requiring authentication.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileGetPublicConfig200Response</returns>
        System.Threading.Tasks.Task<ToolMobileGetPublicConfig200Response> ToolMobileGetPublicConfigAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of the site public settings, those not requiring authentication.
        /// </summary>
        /// <remarks>
        /// Returns a list of the site public settings, those not requiring authentication.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileGetPublicConfig200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolMobileGetPublicConfig200Response>> ToolMobileGetPublicConfigWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a WebService token (and private token) for QR login.
        /// </summary>
        /// <remarks>
        /// Returns a WebService token (and private token) for QR login.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetTokensForQrLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileGetTokensForQrLogin200Response</returns>
        System.Threading.Tasks.Task<ToolMobileGetTokensForQrLogin200Response> ToolMobileGetTokensForQrLoginAsync(ToolMobileGetTokensForQrLoginRequest toolMobileGetTokensForQrLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a WebService token (and private token) for QR login.
        /// </summary>
        /// <remarks>
        /// Returns a WebService token (and private token) for QR login.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetTokensForQrLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileGetTokensForQrLogin200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolMobileGetTokensForQrLogin200Response>> ToolMobileGetTokensForQrLoginWithHttpInfoAsync(ToolMobileGetTokensForQrLoginRequest toolMobileGetTokensForQrLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check if the given site subscription key is valid.
        /// </summary>
        /// <remarks>
        /// Check if the given site subscription key is valid.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileValidateSubscriptionKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileValidateSubscriptionKey200Response</returns>
        System.Threading.Tasks.Task<ToolMobileValidateSubscriptionKey200Response> ToolMobileValidateSubscriptionKeyAsync(ToolMobileValidateSubscriptionKeyRequest toolMobileValidateSubscriptionKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check if the given site subscription key is valid.
        /// </summary>
        /// <remarks>
        /// Check if the given site subscription key is valid.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileValidateSubscriptionKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileValidateSubscriptionKey200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolMobileValidateSubscriptionKey200Response>> ToolMobileValidateSubscriptionKeyWithHttpInfoAsync(ToolMobileValidateSubscriptionKeyRequest toolMobileValidateSubscriptionKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolMobileApi : IToolMobileApiSync, IToolMobileApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ToolMobileApi : IToolMobileApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolMobileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolMobileApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolMobileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolMobileApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolMobileApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ToolMobileApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolMobileApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ToolMobileApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Call multiple external functions and return all responses. Call multiple external functions and return all responses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileCallExternalFunctionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileCallExternalFunctions200Response</returns>
        public ToolMobileCallExternalFunctions200Response ToolMobileCallExternalFunctions(ToolMobileCallExternalFunctionsRequest toolMobileCallExternalFunctionsRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileCallExternalFunctions200Response> localVarResponse = ToolMobileCallExternalFunctionsWithHttpInfo(toolMobileCallExternalFunctionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Call multiple external functions and return all responses. Call multiple external functions and return all responses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileCallExternalFunctionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileCallExternalFunctions200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolMobileCallExternalFunctions200Response> ToolMobileCallExternalFunctionsWithHttpInfo(ToolMobileCallExternalFunctionsRequest toolMobileCallExternalFunctionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolMobileCallExternalFunctionsRequest' is set
            if (toolMobileCallExternalFunctionsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolMobileCallExternalFunctionsRequest' when calling ToolMobileApi->ToolMobileCallExternalFunctions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolMobileCallExternalFunctionsRequest;

            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileCallExternalFunctions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolMobileCallExternalFunctions200Response>("/tool_mobile_call_external_functions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileCallExternalFunctions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Call multiple external functions and return all responses. Call multiple external functions and return all responses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileCallExternalFunctionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileCallExternalFunctions200Response</returns>
        public async System.Threading.Tasks.Task<ToolMobileCallExternalFunctions200Response> ToolMobileCallExternalFunctionsAsync(ToolMobileCallExternalFunctionsRequest toolMobileCallExternalFunctionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileCallExternalFunctions200Response> localVarResponse = await ToolMobileCallExternalFunctionsWithHttpInfoAsync(toolMobileCallExternalFunctionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Call multiple external functions and return all responses. Call multiple external functions and return all responses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileCallExternalFunctionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileCallExternalFunctions200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolMobileCallExternalFunctions200Response>> ToolMobileCallExternalFunctionsWithHttpInfoAsync(ToolMobileCallExternalFunctionsRequest toolMobileCallExternalFunctionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolMobileCallExternalFunctionsRequest' is set
            if (toolMobileCallExternalFunctionsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolMobileCallExternalFunctionsRequest' when calling ToolMobileApi->ToolMobileCallExternalFunctions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolMobileCallExternalFunctionsRequest;

            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileCallExternalFunctions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolMobileCallExternalFunctions200Response>("/tool_mobile_call_external_functions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileCallExternalFunctions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app. Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetAutologinKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileGetAutologinKey200Response</returns>
        public ToolMobileGetAutologinKey200Response ToolMobileGetAutologinKey(ToolMobileGetAutologinKeyRequest toolMobileGetAutologinKeyRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileGetAutologinKey200Response> localVarResponse = ToolMobileGetAutologinKeyWithHttpInfo(toolMobileGetAutologinKeyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app. Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetAutologinKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileGetAutologinKey200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolMobileGetAutologinKey200Response> ToolMobileGetAutologinKeyWithHttpInfo(ToolMobileGetAutologinKeyRequest toolMobileGetAutologinKeyRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolMobileGetAutologinKeyRequest' is set
            if (toolMobileGetAutologinKeyRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolMobileGetAutologinKeyRequest' when calling ToolMobileApi->ToolMobileGetAutologinKey");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolMobileGetAutologinKeyRequest;

            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileGetAutologinKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolMobileGetAutologinKey200Response>("/tool_mobile_get_autologin_key", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileGetAutologinKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app. Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetAutologinKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileGetAutologinKey200Response</returns>
        public async System.Threading.Tasks.Task<ToolMobileGetAutologinKey200Response> ToolMobileGetAutologinKeyAsync(ToolMobileGetAutologinKeyRequest toolMobileGetAutologinKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileGetAutologinKey200Response> localVarResponse = await ToolMobileGetAutologinKeyWithHttpInfoAsync(toolMobileGetAutologinKeyRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app. Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetAutologinKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileGetAutologinKey200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolMobileGetAutologinKey200Response>> ToolMobileGetAutologinKeyWithHttpInfoAsync(ToolMobileGetAutologinKeyRequest toolMobileGetAutologinKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolMobileGetAutologinKeyRequest' is set
            if (toolMobileGetAutologinKeyRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolMobileGetAutologinKeyRequest' when calling ToolMobileApi->ToolMobileGetAutologinKey");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolMobileGetAutologinKeyRequest;

            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileGetAutologinKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolMobileGetAutologinKey200Response>("/tool_mobile_get_autologin_key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileGetAutologinKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of the site configurations, filtering by section. Returns a list of the site configurations, filtering by section.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetConfigRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileGetConfig200Response</returns>
        public ToolMobileGetConfig200Response ToolMobileGetConfig(ToolMobileGetConfigRequest toolMobileGetConfigRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileGetConfig200Response> localVarResponse = ToolMobileGetConfigWithHttpInfo(toolMobileGetConfigRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of the site configurations, filtering by section. Returns a list of the site configurations, filtering by section.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetConfigRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileGetConfig200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolMobileGetConfig200Response> ToolMobileGetConfigWithHttpInfo(ToolMobileGetConfigRequest toolMobileGetConfigRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolMobileGetConfigRequest' is set
            if (toolMobileGetConfigRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolMobileGetConfigRequest' when calling ToolMobileApi->ToolMobileGetConfig");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolMobileGetConfigRequest;

            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileGetConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolMobileGetConfig200Response>("/tool_mobile_get_config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileGetConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of the site configurations, filtering by section. Returns a list of the site configurations, filtering by section.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetConfigRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileGetConfig200Response</returns>
        public async System.Threading.Tasks.Task<ToolMobileGetConfig200Response> ToolMobileGetConfigAsync(ToolMobileGetConfigRequest toolMobileGetConfigRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileGetConfig200Response> localVarResponse = await ToolMobileGetConfigWithHttpInfoAsync(toolMobileGetConfigRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of the site configurations, filtering by section. Returns a list of the site configurations, filtering by section.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetConfigRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileGetConfig200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolMobileGetConfig200Response>> ToolMobileGetConfigWithHttpInfoAsync(ToolMobileGetConfigRequest toolMobileGetConfigRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolMobileGetConfigRequest' is set
            if (toolMobileGetConfigRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolMobileGetConfigRequest' when calling ToolMobileApi->ToolMobileGetConfig");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolMobileGetConfigRequest;

            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileGetConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolMobileGetConfig200Response>("/tool_mobile_get_config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileGetConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a piece of content to be displayed in the Mobile app. Returns a piece of content to be displayed in the Mobile app.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetContentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileGetContent200Response</returns>
        public ToolMobileGetContent200Response ToolMobileGetContent(ToolMobileGetContentRequest toolMobileGetContentRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileGetContent200Response> localVarResponse = ToolMobileGetContentWithHttpInfo(toolMobileGetContentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a piece of content to be displayed in the Mobile app. Returns a piece of content to be displayed in the Mobile app.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetContentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileGetContent200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolMobileGetContent200Response> ToolMobileGetContentWithHttpInfo(ToolMobileGetContentRequest toolMobileGetContentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolMobileGetContentRequest' is set
            if (toolMobileGetContentRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolMobileGetContentRequest' when calling ToolMobileApi->ToolMobileGetContent");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolMobileGetContentRequest;

            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileGetContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolMobileGetContent200Response>("/tool_mobile_get_content", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileGetContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a piece of content to be displayed in the Mobile app. Returns a piece of content to be displayed in the Mobile app.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetContentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileGetContent200Response</returns>
        public async System.Threading.Tasks.Task<ToolMobileGetContent200Response> ToolMobileGetContentAsync(ToolMobileGetContentRequest toolMobileGetContentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileGetContent200Response> localVarResponse = await ToolMobileGetContentWithHttpInfoAsync(toolMobileGetContentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a piece of content to be displayed in the Mobile app. Returns a piece of content to be displayed in the Mobile app.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetContentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileGetContent200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolMobileGetContent200Response>> ToolMobileGetContentWithHttpInfoAsync(ToolMobileGetContentRequest toolMobileGetContentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolMobileGetContentRequest' is set
            if (toolMobileGetContentRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolMobileGetContentRequest' when calling ToolMobileApi->ToolMobileGetContent");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolMobileGetContentRequest;

            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileGetContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolMobileGetContent200Response>("/tool_mobile_get_content", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileGetContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of Moodle plugins supporting the mobile app. Returns a list of Moodle plugins supporting the mobile app.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileGetPluginsSupportingMobile200Response</returns>
        public ToolMobileGetPluginsSupportingMobile200Response ToolMobileGetPluginsSupportingMobile(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileGetPluginsSupportingMobile200Response> localVarResponse = ToolMobileGetPluginsSupportingMobileWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of Moodle plugins supporting the mobile app. Returns a list of Moodle plugins supporting the mobile app.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileGetPluginsSupportingMobile200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolMobileGetPluginsSupportingMobile200Response> ToolMobileGetPluginsSupportingMobileWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileGetPluginsSupportingMobile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolMobileGetPluginsSupportingMobile200Response>("/tool_mobile_get_plugins_supporting_mobile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileGetPluginsSupportingMobile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of Moodle plugins supporting the mobile app. Returns a list of Moodle plugins supporting the mobile app.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileGetPluginsSupportingMobile200Response</returns>
        public async System.Threading.Tasks.Task<ToolMobileGetPluginsSupportingMobile200Response> ToolMobileGetPluginsSupportingMobileAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileGetPluginsSupportingMobile200Response> localVarResponse = await ToolMobileGetPluginsSupportingMobileWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of Moodle plugins supporting the mobile app. Returns a list of Moodle plugins supporting the mobile app.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileGetPluginsSupportingMobile200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolMobileGetPluginsSupportingMobile200Response>> ToolMobileGetPluginsSupportingMobileWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileGetPluginsSupportingMobile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolMobileGetPluginsSupportingMobile200Response>("/tool_mobile_get_plugins_supporting_mobile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileGetPluginsSupportingMobile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of the site public settings, those not requiring authentication. Returns a list of the site public settings, those not requiring authentication.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileGetPublicConfig200Response</returns>
        public ToolMobileGetPublicConfig200Response ToolMobileGetPublicConfig(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileGetPublicConfig200Response> localVarResponse = ToolMobileGetPublicConfigWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of the site public settings, those not requiring authentication. Returns a list of the site public settings, those not requiring authentication.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileGetPublicConfig200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolMobileGetPublicConfig200Response> ToolMobileGetPublicConfigWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileGetPublicConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolMobileGetPublicConfig200Response>("/tool_mobile_get_public_config", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileGetPublicConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of the site public settings, those not requiring authentication. Returns a list of the site public settings, those not requiring authentication.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileGetPublicConfig200Response</returns>
        public async System.Threading.Tasks.Task<ToolMobileGetPublicConfig200Response> ToolMobileGetPublicConfigAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileGetPublicConfig200Response> localVarResponse = await ToolMobileGetPublicConfigWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of the site public settings, those not requiring authentication. Returns a list of the site public settings, those not requiring authentication.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileGetPublicConfig200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolMobileGetPublicConfig200Response>> ToolMobileGetPublicConfigWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileGetPublicConfig";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolMobileGetPublicConfig200Response>("/tool_mobile_get_public_config", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileGetPublicConfig", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a WebService token (and private token) for QR login. Returns a WebService token (and private token) for QR login.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetTokensForQrLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileGetTokensForQrLogin200Response</returns>
        public ToolMobileGetTokensForQrLogin200Response ToolMobileGetTokensForQrLogin(ToolMobileGetTokensForQrLoginRequest toolMobileGetTokensForQrLoginRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileGetTokensForQrLogin200Response> localVarResponse = ToolMobileGetTokensForQrLoginWithHttpInfo(toolMobileGetTokensForQrLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a WebService token (and private token) for QR login. Returns a WebService token (and private token) for QR login.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetTokensForQrLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileGetTokensForQrLogin200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolMobileGetTokensForQrLogin200Response> ToolMobileGetTokensForQrLoginWithHttpInfo(ToolMobileGetTokensForQrLoginRequest toolMobileGetTokensForQrLoginRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolMobileGetTokensForQrLoginRequest' is set
            if (toolMobileGetTokensForQrLoginRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolMobileGetTokensForQrLoginRequest' when calling ToolMobileApi->ToolMobileGetTokensForQrLogin");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolMobileGetTokensForQrLoginRequest;

            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileGetTokensForQrLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolMobileGetTokensForQrLogin200Response>("/tool_mobile_get_tokens_for_qr_login", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileGetTokensForQrLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a WebService token (and private token) for QR login. Returns a WebService token (and private token) for QR login.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetTokensForQrLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileGetTokensForQrLogin200Response</returns>
        public async System.Threading.Tasks.Task<ToolMobileGetTokensForQrLogin200Response> ToolMobileGetTokensForQrLoginAsync(ToolMobileGetTokensForQrLoginRequest toolMobileGetTokensForQrLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileGetTokensForQrLogin200Response> localVarResponse = await ToolMobileGetTokensForQrLoginWithHttpInfoAsync(toolMobileGetTokensForQrLoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a WebService token (and private token) for QR login. Returns a WebService token (and private token) for QR login.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileGetTokensForQrLoginRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileGetTokensForQrLogin200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolMobileGetTokensForQrLogin200Response>> ToolMobileGetTokensForQrLoginWithHttpInfoAsync(ToolMobileGetTokensForQrLoginRequest toolMobileGetTokensForQrLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolMobileGetTokensForQrLoginRequest' is set
            if (toolMobileGetTokensForQrLoginRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolMobileGetTokensForQrLoginRequest' when calling ToolMobileApi->ToolMobileGetTokensForQrLogin");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolMobileGetTokensForQrLoginRequest;

            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileGetTokensForQrLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolMobileGetTokensForQrLogin200Response>("/tool_mobile_get_tokens_for_qr_login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileGetTokensForQrLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if the given site subscription key is valid. Check if the given site subscription key is valid.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileValidateSubscriptionKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolMobileValidateSubscriptionKey200Response</returns>
        public ToolMobileValidateSubscriptionKey200Response ToolMobileValidateSubscriptionKey(ToolMobileValidateSubscriptionKeyRequest toolMobileValidateSubscriptionKeyRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileValidateSubscriptionKey200Response> localVarResponse = ToolMobileValidateSubscriptionKeyWithHttpInfo(toolMobileValidateSubscriptionKeyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if the given site subscription key is valid. Check if the given site subscription key is valid.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileValidateSubscriptionKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolMobileValidateSubscriptionKey200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolMobileValidateSubscriptionKey200Response> ToolMobileValidateSubscriptionKeyWithHttpInfo(ToolMobileValidateSubscriptionKeyRequest toolMobileValidateSubscriptionKeyRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolMobileValidateSubscriptionKeyRequest' is set
            if (toolMobileValidateSubscriptionKeyRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolMobileValidateSubscriptionKeyRequest' when calling ToolMobileApi->ToolMobileValidateSubscriptionKey");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolMobileValidateSubscriptionKeyRequest;

            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileValidateSubscriptionKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolMobileValidateSubscriptionKey200Response>("/tool_mobile_validate_subscription_key", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileValidateSubscriptionKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if the given site subscription key is valid. Check if the given site subscription key is valid.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileValidateSubscriptionKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolMobileValidateSubscriptionKey200Response</returns>
        public async System.Threading.Tasks.Task<ToolMobileValidateSubscriptionKey200Response> ToolMobileValidateSubscriptionKeyAsync(ToolMobileValidateSubscriptionKeyRequest toolMobileValidateSubscriptionKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolMobileValidateSubscriptionKey200Response> localVarResponse = await ToolMobileValidateSubscriptionKeyWithHttpInfoAsync(toolMobileValidateSubscriptionKeyRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if the given site subscription key is valid. Check if the given site subscription key is valid.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolMobileValidateSubscriptionKeyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolMobileValidateSubscriptionKey200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolMobileValidateSubscriptionKey200Response>> ToolMobileValidateSubscriptionKeyWithHttpInfoAsync(ToolMobileValidateSubscriptionKeyRequest toolMobileValidateSubscriptionKeyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolMobileValidateSubscriptionKeyRequest' is set
            if (toolMobileValidateSubscriptionKeyRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolMobileValidateSubscriptionKeyRequest' when calling ToolMobileApi->ToolMobileValidateSubscriptionKey");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolMobileValidateSubscriptionKeyRequest;

            localVarRequestOptions.Operation = "ToolMobileApi.ToolMobileValidateSubscriptionKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolMobileValidateSubscriptionKey200Response>("/tool_mobile_validate_subscription_key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolMobileValidateSubscriptionKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
