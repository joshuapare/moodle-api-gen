/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModLessonApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Finishes the current attempt.
        /// </summary>
        /// <remarks>
        /// Finishes the current attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonFinishAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonFinishAttempt200Response</returns>
        ModLessonFinishAttempt200Response ModLessonFinishAttempt(ModLessonFinishAttemptRequest modLessonFinishAttemptRequest, int operationIndex = 0);

        /// <summary>
        /// Finishes the current attempt.
        /// </summary>
        /// <remarks>
        /// Finishes the current attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonFinishAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonFinishAttempt200Response</returns>
        ApiResponse<ModLessonFinishAttempt200Response> ModLessonFinishAttemptWithHttpInfo(ModLessonFinishAttemptRequest modLessonFinishAttemptRequest, int operationIndex = 0);
        /// <summary>
        /// Get a list of all the attempts made by users in a lesson.
        /// </summary>
        /// <remarks>
        /// Get a list of all the attempts made by users in a lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetAttemptsOverviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetAttemptsOverview200Response</returns>
        ModLessonGetAttemptsOverview200Response ModLessonGetAttemptsOverview(ModLessonGetAttemptsOverviewRequest modLessonGetAttemptsOverviewRequest, int operationIndex = 0);

        /// <summary>
        /// Get a list of all the attempts made by users in a lesson.
        /// </summary>
        /// <remarks>
        /// Get a list of all the attempts made by users in a lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetAttemptsOverviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetAttemptsOverview200Response</returns>
        ApiResponse<ModLessonGetAttemptsOverview200Response> ModLessonGetAttemptsOverviewWithHttpInfo(ModLessonGetAttemptsOverviewRequest modLessonGetAttemptsOverviewRequest, int operationIndex = 0);
        /// <summary>
        /// Return the list of content pages viewed by a user during a lesson attempt.
        /// </summary>
        /// <remarks>
        /// Return the list of content pages viewed by a user during a lesson attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetContentPagesViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetContentPagesViewed200Response</returns>
        ModLessonGetContentPagesViewed200Response ModLessonGetContentPagesViewed(ModLessonGetContentPagesViewedRequest modLessonGetContentPagesViewedRequest, int operationIndex = 0);

        /// <summary>
        /// Return the list of content pages viewed by a user during a lesson attempt.
        /// </summary>
        /// <remarks>
        /// Return the list of content pages viewed by a user during a lesson attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetContentPagesViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetContentPagesViewed200Response</returns>
        ApiResponse<ModLessonGetContentPagesViewed200Response> ModLessonGetContentPagesViewedWithHttpInfo(ModLessonGetContentPagesViewedRequest modLessonGetContentPagesViewedRequest, int operationIndex = 0);
        /// <summary>
        /// Return information of a given lesson.
        /// </summary>
        /// <remarks>
        /// Return information of a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetLesson200Response</returns>
        ModLessonGetLesson200Response ModLessonGetLesson(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0);

        /// <summary>
        /// Return information of a given lesson.
        /// </summary>
        /// <remarks>
        /// Return information of a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetLesson200Response</returns>
        ApiResponse<ModLessonGetLesson200Response> ModLessonGetLessonWithHttpInfo(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0);
        /// <summary>
        /// Return access information for a given lesson.
        /// </summary>
        /// <remarks>
        /// Return access information for a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetLessonAccessInformation200Response</returns>
        ModLessonGetLessonAccessInformation200Response ModLessonGetLessonAccessInformation(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0);

        /// <summary>
        /// Return access information for a given lesson.
        /// </summary>
        /// <remarks>
        /// Return access information for a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetLessonAccessInformation200Response</returns>
        ApiResponse<ModLessonGetLessonAccessInformation200Response> ModLessonGetLessonAccessInformationWithHttpInfo(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetLessonsByCourses200Response</returns>
        ModLessonGetLessonsByCourses200Response ModLessonGetLessonsByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetLessonsByCourses200Response</returns>
        ApiResponse<ModLessonGetLessonsByCourses200Response> ModLessonGetLessonsByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Return information of a given page, including its contents.
        /// </summary>
        /// <remarks>
        /// Return information of a given page, including its contents.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPageDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetPageData200Response</returns>
        ModLessonGetPageData200Response ModLessonGetPageData(ModLessonGetPageDataRequest modLessonGetPageDataRequest, int operationIndex = 0);

        /// <summary>
        /// Return information of a given page, including its contents.
        /// </summary>
        /// <remarks>
        /// Return information of a given page, including its contents.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPageDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetPageData200Response</returns>
        ApiResponse<ModLessonGetPageData200Response> ModLessonGetPageDataWithHttpInfo(ModLessonGetPageDataRequest modLessonGetPageDataRequest, int operationIndex = 0);
        /// <summary>
        /// Return the list of pages in a lesson (based on the user permissions).
        /// </summary>
        /// <remarks>
        /// Return the list of pages in a lesson (based on the user permissions).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetPages200Response</returns>
        ModLessonGetPages200Response ModLessonGetPages(ModLessonGetPagesRequest modLessonGetPagesRequest, int operationIndex = 0);

        /// <summary>
        /// Return the list of pages in a lesson (based on the user permissions).
        /// </summary>
        /// <remarks>
        /// Return the list of pages in a lesson (based on the user permissions).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetPages200Response</returns>
        ApiResponse<ModLessonGetPages200Response> ModLessonGetPagesWithHttpInfo(ModLessonGetPagesRequest modLessonGetPagesRequest, int operationIndex = 0);
        /// <summary>
        /// Return all the possible jumps for the pages in a given lesson.
        /// </summary>
        /// <remarks>
        /// Return all the possible jumps for the pages in a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetPagesPossibleJumps200Response</returns>
        ModLessonGetPagesPossibleJumps200Response ModLessonGetPagesPossibleJumps(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0);

        /// <summary>
        /// Return all the possible jumps for the pages in a given lesson.
        /// </summary>
        /// <remarks>
        /// Return all the possible jumps for the pages in a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetPagesPossibleJumps200Response</returns>
        ApiResponse<ModLessonGetPagesPossibleJumps200Response> ModLessonGetPagesPossibleJumpsWithHttpInfo(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0);
        /// <summary>
        /// Return the list of questions attempts in a given lesson.
        /// </summary>
        /// <remarks>
        /// Return the list of questions attempts in a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetQuestionsAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetQuestionsAttempts200Response</returns>
        ModLessonGetQuestionsAttempts200Response ModLessonGetQuestionsAttempts(ModLessonGetQuestionsAttemptsRequest modLessonGetQuestionsAttemptsRequest, int operationIndex = 0);

        /// <summary>
        /// Return the list of questions attempts in a given lesson.
        /// </summary>
        /// <remarks>
        /// Return the list of questions attempts in a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetQuestionsAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetQuestionsAttempts200Response</returns>
        ApiResponse<ModLessonGetQuestionsAttempts200Response> ModLessonGetQuestionsAttemptsWithHttpInfo(ModLessonGetQuestionsAttemptsRequest modLessonGetQuestionsAttemptsRequest, int operationIndex = 0);
        /// <summary>
        /// Return information about the given user attempt (including answers).
        /// </summary>
        /// <remarks>
        /// Return information about the given user attempt (including answers).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetUserAttempt200Response</returns>
        ModLessonGetUserAttempt200Response ModLessonGetUserAttempt(ModLessonGetUserAttemptRequest modLessonGetUserAttemptRequest, int operationIndex = 0);

        /// <summary>
        /// Return information about the given user attempt (including answers).
        /// </summary>
        /// <remarks>
        /// Return information about the given user attempt (including answers).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetUserAttempt200Response</returns>
        ApiResponse<ModLessonGetUserAttempt200Response> ModLessonGetUserAttemptWithHttpInfo(ModLessonGetUserAttemptRequest modLessonGetUserAttemptRequest, int operationIndex = 0);
        /// <summary>
        /// Return grade information in the attempt for a given user.
        /// </summary>
        /// <remarks>
        /// Return grade information in the attempt for a given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetUserAttemptGrade200Response</returns>
        ModLessonGetUserAttemptGrade200Response ModLessonGetUserAttemptGrade(ModLessonGetUserAttemptGradeRequest modLessonGetUserAttemptGradeRequest, int operationIndex = 0);

        /// <summary>
        /// Return grade information in the attempt for a given user.
        /// </summary>
        /// <remarks>
        /// Return grade information in the attempt for a given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetUserAttemptGrade200Response</returns>
        ApiResponse<ModLessonGetUserAttemptGrade200Response> ModLessonGetUserAttemptGradeWithHttpInfo(ModLessonGetUserAttemptGradeRequest modLessonGetUserAttemptGradeRequest, int operationIndex = 0);
        /// <summary>
        /// Return the final grade in the lesson for the given user.
        /// </summary>
        /// <remarks>
        /// Return the final grade in the lesson for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetUserGrade200Response</returns>
        ModLessonGetUserGrade200Response ModLessonGetUserGrade(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0);

        /// <summary>
        /// Return the final grade in the lesson for the given user.
        /// </summary>
        /// <remarks>
        /// Return the final grade in the lesson for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetUserGrade200Response</returns>
        ApiResponse<ModLessonGetUserGrade200Response> ModLessonGetUserGradeWithHttpInfo(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0);
        /// <summary>
        /// Return the timers in the current lesson for the given user.
        /// </summary>
        /// <remarks>
        /// Return the timers in the current lesson for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetUserTimers200Response</returns>
        ModLessonGetUserTimers200Response ModLessonGetUserTimers(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0);

        /// <summary>
        /// Return the timers in the current lesson for the given user.
        /// </summary>
        /// <remarks>
        /// Return the timers in the current lesson for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetUserTimers200Response</returns>
        ApiResponse<ModLessonGetUserTimers200Response> ModLessonGetUserTimersWithHttpInfo(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0);
        /// <summary>
        /// Starts a new attempt or continues an existing one.
        /// </summary>
        /// <remarks>
        /// Starts a new attempt or continues an existing one.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonLaunchAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonLaunchAttempt200Response</returns>
        ModLessonLaunchAttempt200Response ModLessonLaunchAttempt(ModLessonLaunchAttemptRequest modLessonLaunchAttemptRequest, int operationIndex = 0);

        /// <summary>
        /// Starts a new attempt or continues an existing one.
        /// </summary>
        /// <remarks>
        /// Starts a new attempt or continues an existing one.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonLaunchAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonLaunchAttempt200Response</returns>
        ApiResponse<ModLessonLaunchAttempt200Response> ModLessonLaunchAttemptWithHttpInfo(ModLessonLaunchAttemptRequest modLessonLaunchAttemptRequest, int operationIndex = 0);
        /// <summary>
        /// Processes page responses.
        /// </summary>
        /// <remarks>
        /// Processes page responses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonProcessPage200Response</returns>
        ModLessonProcessPage200Response ModLessonProcessPage(ModLessonProcessPageRequest modLessonProcessPageRequest, int operationIndex = 0);

        /// <summary>
        /// Processes page responses.
        /// </summary>
        /// <remarks>
        /// Processes page responses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonProcessPage200Response</returns>
        ApiResponse<ModLessonProcessPage200Response> ModLessonProcessPageWithHttpInfo(ModLessonProcessPageRequest modLessonProcessPageRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModLessonViewLesson(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModLessonViewLessonWithHttpInfo(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModLessonApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Finishes the current attempt.
        /// </summary>
        /// <remarks>
        /// Finishes the current attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonFinishAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonFinishAttempt200Response</returns>
        System.Threading.Tasks.Task<ModLessonFinishAttempt200Response> ModLessonFinishAttemptAsync(ModLessonFinishAttemptRequest modLessonFinishAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Finishes the current attempt.
        /// </summary>
        /// <remarks>
        /// Finishes the current attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonFinishAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonFinishAttempt200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonFinishAttempt200Response>> ModLessonFinishAttemptWithHttpInfoAsync(ModLessonFinishAttemptRequest modLessonFinishAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of all the attempts made by users in a lesson.
        /// </summary>
        /// <remarks>
        /// Get a list of all the attempts made by users in a lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetAttemptsOverviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetAttemptsOverview200Response</returns>
        System.Threading.Tasks.Task<ModLessonGetAttemptsOverview200Response> ModLessonGetAttemptsOverviewAsync(ModLessonGetAttemptsOverviewRequest modLessonGetAttemptsOverviewRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of all the attempts made by users in a lesson.
        /// </summary>
        /// <remarks>
        /// Get a list of all the attempts made by users in a lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetAttemptsOverviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetAttemptsOverview200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonGetAttemptsOverview200Response>> ModLessonGetAttemptsOverviewWithHttpInfoAsync(ModLessonGetAttemptsOverviewRequest modLessonGetAttemptsOverviewRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the list of content pages viewed by a user during a lesson attempt.
        /// </summary>
        /// <remarks>
        /// Return the list of content pages viewed by a user during a lesson attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetContentPagesViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetContentPagesViewed200Response</returns>
        System.Threading.Tasks.Task<ModLessonGetContentPagesViewed200Response> ModLessonGetContentPagesViewedAsync(ModLessonGetContentPagesViewedRequest modLessonGetContentPagesViewedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the list of content pages viewed by a user during a lesson attempt.
        /// </summary>
        /// <remarks>
        /// Return the list of content pages viewed by a user during a lesson attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetContentPagesViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetContentPagesViewed200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonGetContentPagesViewed200Response>> ModLessonGetContentPagesViewedWithHttpInfoAsync(ModLessonGetContentPagesViewedRequest modLessonGetContentPagesViewedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return information of a given lesson.
        /// </summary>
        /// <remarks>
        /// Return information of a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetLesson200Response</returns>
        System.Threading.Tasks.Task<ModLessonGetLesson200Response> ModLessonGetLessonAsync(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return information of a given lesson.
        /// </summary>
        /// <remarks>
        /// Return information of a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetLesson200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonGetLesson200Response>> ModLessonGetLessonWithHttpInfoAsync(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return access information for a given lesson.
        /// </summary>
        /// <remarks>
        /// Return access information for a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetLessonAccessInformation200Response</returns>
        System.Threading.Tasks.Task<ModLessonGetLessonAccessInformation200Response> ModLessonGetLessonAccessInformationAsync(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return access information for a given lesson.
        /// </summary>
        /// <remarks>
        /// Return access information for a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetLessonAccessInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonGetLessonAccessInformation200Response>> ModLessonGetLessonAccessInformationWithHttpInfoAsync(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetLessonsByCourses200Response</returns>
        System.Threading.Tasks.Task<ModLessonGetLessonsByCourses200Response> ModLessonGetLessonsByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetLessonsByCourses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonGetLessonsByCourses200Response>> ModLessonGetLessonsByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return information of a given page, including its contents.
        /// </summary>
        /// <remarks>
        /// Return information of a given page, including its contents.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPageDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetPageData200Response</returns>
        System.Threading.Tasks.Task<ModLessonGetPageData200Response> ModLessonGetPageDataAsync(ModLessonGetPageDataRequest modLessonGetPageDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return information of a given page, including its contents.
        /// </summary>
        /// <remarks>
        /// Return information of a given page, including its contents.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPageDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetPageData200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonGetPageData200Response>> ModLessonGetPageDataWithHttpInfoAsync(ModLessonGetPageDataRequest modLessonGetPageDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the list of pages in a lesson (based on the user permissions).
        /// </summary>
        /// <remarks>
        /// Return the list of pages in a lesson (based on the user permissions).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetPages200Response</returns>
        System.Threading.Tasks.Task<ModLessonGetPages200Response> ModLessonGetPagesAsync(ModLessonGetPagesRequest modLessonGetPagesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the list of pages in a lesson (based on the user permissions).
        /// </summary>
        /// <remarks>
        /// Return the list of pages in a lesson (based on the user permissions).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetPages200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonGetPages200Response>> ModLessonGetPagesWithHttpInfoAsync(ModLessonGetPagesRequest modLessonGetPagesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return all the possible jumps for the pages in a given lesson.
        /// </summary>
        /// <remarks>
        /// Return all the possible jumps for the pages in a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetPagesPossibleJumps200Response</returns>
        System.Threading.Tasks.Task<ModLessonGetPagesPossibleJumps200Response> ModLessonGetPagesPossibleJumpsAsync(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return all the possible jumps for the pages in a given lesson.
        /// </summary>
        /// <remarks>
        /// Return all the possible jumps for the pages in a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetPagesPossibleJumps200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonGetPagesPossibleJumps200Response>> ModLessonGetPagesPossibleJumpsWithHttpInfoAsync(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the list of questions attempts in a given lesson.
        /// </summary>
        /// <remarks>
        /// Return the list of questions attempts in a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetQuestionsAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetQuestionsAttempts200Response</returns>
        System.Threading.Tasks.Task<ModLessonGetQuestionsAttempts200Response> ModLessonGetQuestionsAttemptsAsync(ModLessonGetQuestionsAttemptsRequest modLessonGetQuestionsAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the list of questions attempts in a given lesson.
        /// </summary>
        /// <remarks>
        /// Return the list of questions attempts in a given lesson.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetQuestionsAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetQuestionsAttempts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonGetQuestionsAttempts200Response>> ModLessonGetQuestionsAttemptsWithHttpInfoAsync(ModLessonGetQuestionsAttemptsRequest modLessonGetQuestionsAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return information about the given user attempt (including answers).
        /// </summary>
        /// <remarks>
        /// Return information about the given user attempt (including answers).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetUserAttempt200Response</returns>
        System.Threading.Tasks.Task<ModLessonGetUserAttempt200Response> ModLessonGetUserAttemptAsync(ModLessonGetUserAttemptRequest modLessonGetUserAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return information about the given user attempt (including answers).
        /// </summary>
        /// <remarks>
        /// Return information about the given user attempt (including answers).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetUserAttempt200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonGetUserAttempt200Response>> ModLessonGetUserAttemptWithHttpInfoAsync(ModLessonGetUserAttemptRequest modLessonGetUserAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return grade information in the attempt for a given user.
        /// </summary>
        /// <remarks>
        /// Return grade information in the attempt for a given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetUserAttemptGrade200Response</returns>
        System.Threading.Tasks.Task<ModLessonGetUserAttemptGrade200Response> ModLessonGetUserAttemptGradeAsync(ModLessonGetUserAttemptGradeRequest modLessonGetUserAttemptGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return grade information in the attempt for a given user.
        /// </summary>
        /// <remarks>
        /// Return grade information in the attempt for a given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetUserAttemptGrade200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonGetUserAttemptGrade200Response>> ModLessonGetUserAttemptGradeWithHttpInfoAsync(ModLessonGetUserAttemptGradeRequest modLessonGetUserAttemptGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the final grade in the lesson for the given user.
        /// </summary>
        /// <remarks>
        /// Return the final grade in the lesson for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetUserGrade200Response</returns>
        System.Threading.Tasks.Task<ModLessonGetUserGrade200Response> ModLessonGetUserGradeAsync(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the final grade in the lesson for the given user.
        /// </summary>
        /// <remarks>
        /// Return the final grade in the lesson for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetUserGrade200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonGetUserGrade200Response>> ModLessonGetUserGradeWithHttpInfoAsync(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the timers in the current lesson for the given user.
        /// </summary>
        /// <remarks>
        /// Return the timers in the current lesson for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetUserTimers200Response</returns>
        System.Threading.Tasks.Task<ModLessonGetUserTimers200Response> ModLessonGetUserTimersAsync(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the timers in the current lesson for the given user.
        /// </summary>
        /// <remarks>
        /// Return the timers in the current lesson for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetUserTimers200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonGetUserTimers200Response>> ModLessonGetUserTimersWithHttpInfoAsync(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Starts a new attempt or continues an existing one.
        /// </summary>
        /// <remarks>
        /// Starts a new attempt or continues an existing one.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonLaunchAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonLaunchAttempt200Response</returns>
        System.Threading.Tasks.Task<ModLessonLaunchAttempt200Response> ModLessonLaunchAttemptAsync(ModLessonLaunchAttemptRequest modLessonLaunchAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Starts a new attempt or continues an existing one.
        /// </summary>
        /// <remarks>
        /// Starts a new attempt or continues an existing one.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonLaunchAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonLaunchAttempt200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonLaunchAttempt200Response>> ModLessonLaunchAttemptWithHttpInfoAsync(ModLessonLaunchAttemptRequest modLessonLaunchAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Processes page responses.
        /// </summary>
        /// <remarks>
        /// Processes page responses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonProcessPage200Response</returns>
        System.Threading.Tasks.Task<ModLessonProcessPage200Response> ModLessonProcessPageAsync(ModLessonProcessPageRequest modLessonProcessPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Processes page responses.
        /// </summary>
        /// <remarks>
        /// Processes page responses.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonProcessPage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLessonProcessPage200Response>> ModLessonProcessPageWithHttpInfoAsync(ModLessonProcessPageRequest modLessonProcessPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModLessonViewLessonAsync(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModLessonViewLessonWithHttpInfoAsync(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModLessonApi : IModLessonApiSync, IModLessonApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModLessonApi : IModLessonApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModLessonApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModLessonApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModLessonApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModLessonApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Finishes the current attempt. Finishes the current attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonFinishAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonFinishAttempt200Response</returns>
        public ModLessonFinishAttempt200Response ModLessonFinishAttempt(ModLessonFinishAttemptRequest modLessonFinishAttemptRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonFinishAttempt200Response> localVarResponse = ModLessonFinishAttemptWithHttpInfo(modLessonFinishAttemptRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finishes the current attempt. Finishes the current attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonFinishAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonFinishAttempt200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonFinishAttempt200Response> ModLessonFinishAttemptWithHttpInfo(ModLessonFinishAttemptRequest modLessonFinishAttemptRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonFinishAttemptRequest' is set
            if (modLessonFinishAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonFinishAttemptRequest' when calling ModLessonApi->ModLessonFinishAttempt");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonFinishAttemptRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonFinishAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonFinishAttempt200Response>("/mod_lesson_finish_attempt", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonFinishAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finishes the current attempt. Finishes the current attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonFinishAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonFinishAttempt200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonFinishAttempt200Response> ModLessonFinishAttemptAsync(ModLessonFinishAttemptRequest modLessonFinishAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonFinishAttempt200Response> localVarResponse = await ModLessonFinishAttemptWithHttpInfoAsync(modLessonFinishAttemptRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finishes the current attempt. Finishes the current attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonFinishAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonFinishAttempt200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonFinishAttempt200Response>> ModLessonFinishAttemptWithHttpInfoAsync(ModLessonFinishAttemptRequest modLessonFinishAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonFinishAttemptRequest' is set
            if (modLessonFinishAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonFinishAttemptRequest' when calling ModLessonApi->ModLessonFinishAttempt");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonFinishAttemptRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonFinishAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonFinishAttempt200Response>("/mod_lesson_finish_attempt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonFinishAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all the attempts made by users in a lesson. Get a list of all the attempts made by users in a lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetAttemptsOverviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetAttemptsOverview200Response</returns>
        public ModLessonGetAttemptsOverview200Response ModLessonGetAttemptsOverview(ModLessonGetAttemptsOverviewRequest modLessonGetAttemptsOverviewRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetAttemptsOverview200Response> localVarResponse = ModLessonGetAttemptsOverviewWithHttpInfo(modLessonGetAttemptsOverviewRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all the attempts made by users in a lesson. Get a list of all the attempts made by users in a lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetAttemptsOverviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetAttemptsOverview200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonGetAttemptsOverview200Response> ModLessonGetAttemptsOverviewWithHttpInfo(ModLessonGetAttemptsOverviewRequest modLessonGetAttemptsOverviewRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonGetAttemptsOverviewRequest' is set
            if (modLessonGetAttemptsOverviewRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetAttemptsOverviewRequest' when calling ModLessonApi->ModLessonGetAttemptsOverview");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetAttemptsOverviewRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetAttemptsOverview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonGetAttemptsOverview200Response>("/mod_lesson_get_attempts_overview", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetAttemptsOverview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all the attempts made by users in a lesson. Get a list of all the attempts made by users in a lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetAttemptsOverviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetAttemptsOverview200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonGetAttemptsOverview200Response> ModLessonGetAttemptsOverviewAsync(ModLessonGetAttemptsOverviewRequest modLessonGetAttemptsOverviewRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetAttemptsOverview200Response> localVarResponse = await ModLessonGetAttemptsOverviewWithHttpInfoAsync(modLessonGetAttemptsOverviewRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all the attempts made by users in a lesson. Get a list of all the attempts made by users in a lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetAttemptsOverviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetAttemptsOverview200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonGetAttemptsOverview200Response>> ModLessonGetAttemptsOverviewWithHttpInfoAsync(ModLessonGetAttemptsOverviewRequest modLessonGetAttemptsOverviewRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonGetAttemptsOverviewRequest' is set
            if (modLessonGetAttemptsOverviewRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetAttemptsOverviewRequest' when calling ModLessonApi->ModLessonGetAttemptsOverview");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetAttemptsOverviewRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetAttemptsOverview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonGetAttemptsOverview200Response>("/mod_lesson_get_attempts_overview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetAttemptsOverview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the list of content pages viewed by a user during a lesson attempt. Return the list of content pages viewed by a user during a lesson attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetContentPagesViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetContentPagesViewed200Response</returns>
        public ModLessonGetContentPagesViewed200Response ModLessonGetContentPagesViewed(ModLessonGetContentPagesViewedRequest modLessonGetContentPagesViewedRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetContentPagesViewed200Response> localVarResponse = ModLessonGetContentPagesViewedWithHttpInfo(modLessonGetContentPagesViewedRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the list of content pages viewed by a user during a lesson attempt. Return the list of content pages viewed by a user during a lesson attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetContentPagesViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetContentPagesViewed200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonGetContentPagesViewed200Response> ModLessonGetContentPagesViewedWithHttpInfo(ModLessonGetContentPagesViewedRequest modLessonGetContentPagesViewedRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonGetContentPagesViewedRequest' is set
            if (modLessonGetContentPagesViewedRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetContentPagesViewedRequest' when calling ModLessonApi->ModLessonGetContentPagesViewed");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetContentPagesViewedRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetContentPagesViewed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonGetContentPagesViewed200Response>("/mod_lesson_get_content_pages_viewed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetContentPagesViewed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the list of content pages viewed by a user during a lesson attempt. Return the list of content pages viewed by a user during a lesson attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetContentPagesViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetContentPagesViewed200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonGetContentPagesViewed200Response> ModLessonGetContentPagesViewedAsync(ModLessonGetContentPagesViewedRequest modLessonGetContentPagesViewedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetContentPagesViewed200Response> localVarResponse = await ModLessonGetContentPagesViewedWithHttpInfoAsync(modLessonGetContentPagesViewedRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the list of content pages viewed by a user during a lesson attempt. Return the list of content pages viewed by a user during a lesson attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetContentPagesViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetContentPagesViewed200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonGetContentPagesViewed200Response>> ModLessonGetContentPagesViewedWithHttpInfoAsync(ModLessonGetContentPagesViewedRequest modLessonGetContentPagesViewedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonGetContentPagesViewedRequest' is set
            if (modLessonGetContentPagesViewedRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetContentPagesViewedRequest' when calling ModLessonApi->ModLessonGetContentPagesViewed");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetContentPagesViewedRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetContentPagesViewed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonGetContentPagesViewed200Response>("/mod_lesson_get_content_pages_viewed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetContentPagesViewed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return information of a given lesson. Return information of a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetLesson200Response</returns>
        public ModLessonGetLesson200Response ModLessonGetLesson(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetLesson200Response> localVarResponse = ModLessonGetLessonWithHttpInfo(modLessonGetLessonRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return information of a given lesson. Return information of a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetLesson200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonGetLesson200Response> ModLessonGetLessonWithHttpInfo(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonGetLessonRequest' is set
            if (modLessonGetLessonRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetLessonRequest' when calling ModLessonApi->ModLessonGetLesson");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetLessonRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetLesson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonGetLesson200Response>("/mod_lesson_get_lesson", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetLesson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return information of a given lesson. Return information of a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetLesson200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonGetLesson200Response> ModLessonGetLessonAsync(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetLesson200Response> localVarResponse = await ModLessonGetLessonWithHttpInfoAsync(modLessonGetLessonRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return information of a given lesson. Return information of a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetLesson200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonGetLesson200Response>> ModLessonGetLessonWithHttpInfoAsync(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonGetLessonRequest' is set
            if (modLessonGetLessonRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetLessonRequest' when calling ModLessonApi->ModLessonGetLesson");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetLessonRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetLesson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonGetLesson200Response>("/mod_lesson_get_lesson", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetLesson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return access information for a given lesson. Return access information for a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetLessonAccessInformation200Response</returns>
        public ModLessonGetLessonAccessInformation200Response ModLessonGetLessonAccessInformation(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetLessonAccessInformation200Response> localVarResponse = ModLessonGetLessonAccessInformationWithHttpInfo(modLessonGetLessonAccessInformationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return access information for a given lesson. Return access information for a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetLessonAccessInformation200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonGetLessonAccessInformation200Response> ModLessonGetLessonAccessInformationWithHttpInfo(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonGetLessonAccessInformationRequest' is set
            if (modLessonGetLessonAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetLessonAccessInformationRequest' when calling ModLessonApi->ModLessonGetLessonAccessInformation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetLessonAccessInformationRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetLessonAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonGetLessonAccessInformation200Response>("/mod_lesson_get_lesson_access_information", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetLessonAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return access information for a given lesson. Return access information for a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetLessonAccessInformation200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonGetLessonAccessInformation200Response> ModLessonGetLessonAccessInformationAsync(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetLessonAccessInformation200Response> localVarResponse = await ModLessonGetLessonAccessInformationWithHttpInfoAsync(modLessonGetLessonAccessInformationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return access information for a given lesson. Return access information for a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetLessonAccessInformation200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonGetLessonAccessInformation200Response>> ModLessonGetLessonAccessInformationWithHttpInfoAsync(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonGetLessonAccessInformationRequest' is set
            if (modLessonGetLessonAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetLessonAccessInformationRequest' when calling ModLessonApi->ModLessonGetLessonAccessInformation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetLessonAccessInformationRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetLessonAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonGetLessonAccessInformation200Response>("/mod_lesson_get_lesson_access_information", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetLessonAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned. Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetLessonsByCourses200Response</returns>
        public ModLessonGetLessonsByCourses200Response ModLessonGetLessonsByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetLessonsByCourses200Response> localVarResponse = ModLessonGetLessonsByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned. Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetLessonsByCourses200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonGetLessonsByCourses200Response> ModLessonGetLessonsByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModLessonApi->ModLessonGetLessonsByCourses");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetLessonsByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonGetLessonsByCourses200Response>("/mod_lesson_get_lessons_by_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetLessonsByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned. Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetLessonsByCourses200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonGetLessonsByCourses200Response> ModLessonGetLessonsByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetLessonsByCourses200Response> localVarResponse = await ModLessonGetLessonsByCoursesWithHttpInfoAsync(modChatGetChatsByCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned. Returns a list of lessons in a provided list of courses,                             if no list is provided all lessons that the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetLessonsByCourses200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonGetLessonsByCourses200Response>> ModLessonGetLessonsByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModLessonApi->ModLessonGetLessonsByCourses");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetLessonsByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonGetLessonsByCourses200Response>("/mod_lesson_get_lessons_by_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetLessonsByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return information of a given page, including its contents. Return information of a given page, including its contents.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPageDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetPageData200Response</returns>
        public ModLessonGetPageData200Response ModLessonGetPageData(ModLessonGetPageDataRequest modLessonGetPageDataRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetPageData200Response> localVarResponse = ModLessonGetPageDataWithHttpInfo(modLessonGetPageDataRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return information of a given page, including its contents. Return information of a given page, including its contents.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPageDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetPageData200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonGetPageData200Response> ModLessonGetPageDataWithHttpInfo(ModLessonGetPageDataRequest modLessonGetPageDataRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonGetPageDataRequest' is set
            if (modLessonGetPageDataRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetPageDataRequest' when calling ModLessonApi->ModLessonGetPageData");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetPageDataRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetPageData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonGetPageData200Response>("/mod_lesson_get_page_data", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetPageData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return information of a given page, including its contents. Return information of a given page, including its contents.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPageDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetPageData200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonGetPageData200Response> ModLessonGetPageDataAsync(ModLessonGetPageDataRequest modLessonGetPageDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetPageData200Response> localVarResponse = await ModLessonGetPageDataWithHttpInfoAsync(modLessonGetPageDataRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return information of a given page, including its contents. Return information of a given page, including its contents.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPageDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetPageData200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonGetPageData200Response>> ModLessonGetPageDataWithHttpInfoAsync(ModLessonGetPageDataRequest modLessonGetPageDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonGetPageDataRequest' is set
            if (modLessonGetPageDataRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetPageDataRequest' when calling ModLessonApi->ModLessonGetPageData");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetPageDataRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetPageData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonGetPageData200Response>("/mod_lesson_get_page_data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetPageData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the list of pages in a lesson (based on the user permissions). Return the list of pages in a lesson (based on the user permissions).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetPages200Response</returns>
        public ModLessonGetPages200Response ModLessonGetPages(ModLessonGetPagesRequest modLessonGetPagesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetPages200Response> localVarResponse = ModLessonGetPagesWithHttpInfo(modLessonGetPagesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the list of pages in a lesson (based on the user permissions). Return the list of pages in a lesson (based on the user permissions).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetPages200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonGetPages200Response> ModLessonGetPagesWithHttpInfo(ModLessonGetPagesRequest modLessonGetPagesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonGetPagesRequest' is set
            if (modLessonGetPagesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetPagesRequest' when calling ModLessonApi->ModLessonGetPages");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetPagesRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetPages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonGetPages200Response>("/mod_lesson_get_pages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetPages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the list of pages in a lesson (based on the user permissions). Return the list of pages in a lesson (based on the user permissions).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetPages200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonGetPages200Response> ModLessonGetPagesAsync(ModLessonGetPagesRequest modLessonGetPagesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetPages200Response> localVarResponse = await ModLessonGetPagesWithHttpInfoAsync(modLessonGetPagesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the list of pages in a lesson (based on the user permissions). Return the list of pages in a lesson (based on the user permissions).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetPages200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonGetPages200Response>> ModLessonGetPagesWithHttpInfoAsync(ModLessonGetPagesRequest modLessonGetPagesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonGetPagesRequest' is set
            if (modLessonGetPagesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetPagesRequest' when calling ModLessonApi->ModLessonGetPages");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetPagesRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetPages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonGetPages200Response>("/mod_lesson_get_pages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetPages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return all the possible jumps for the pages in a given lesson. Return all the possible jumps for the pages in a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetPagesPossibleJumps200Response</returns>
        public ModLessonGetPagesPossibleJumps200Response ModLessonGetPagesPossibleJumps(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetPagesPossibleJumps200Response> localVarResponse = ModLessonGetPagesPossibleJumpsWithHttpInfo(modLessonGetLessonAccessInformationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return all the possible jumps for the pages in a given lesson. Return all the possible jumps for the pages in a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetPagesPossibleJumps200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonGetPagesPossibleJumps200Response> ModLessonGetPagesPossibleJumpsWithHttpInfo(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonGetLessonAccessInformationRequest' is set
            if (modLessonGetLessonAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetLessonAccessInformationRequest' when calling ModLessonApi->ModLessonGetPagesPossibleJumps");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetLessonAccessInformationRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetPagesPossibleJumps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonGetPagesPossibleJumps200Response>("/mod_lesson_get_pages_possible_jumps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetPagesPossibleJumps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return all the possible jumps for the pages in a given lesson. Return all the possible jumps for the pages in a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetPagesPossibleJumps200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonGetPagesPossibleJumps200Response> ModLessonGetPagesPossibleJumpsAsync(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetPagesPossibleJumps200Response> localVarResponse = await ModLessonGetPagesPossibleJumpsWithHttpInfoAsync(modLessonGetLessonAccessInformationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return all the possible jumps for the pages in a given lesson. Return all the possible jumps for the pages in a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetPagesPossibleJumps200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonGetPagesPossibleJumps200Response>> ModLessonGetPagesPossibleJumpsWithHttpInfoAsync(ModLessonGetLessonAccessInformationRequest modLessonGetLessonAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonGetLessonAccessInformationRequest' is set
            if (modLessonGetLessonAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetLessonAccessInformationRequest' when calling ModLessonApi->ModLessonGetPagesPossibleJumps");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetLessonAccessInformationRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetPagesPossibleJumps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonGetPagesPossibleJumps200Response>("/mod_lesson_get_pages_possible_jumps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetPagesPossibleJumps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the list of questions attempts in a given lesson. Return the list of questions attempts in a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetQuestionsAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetQuestionsAttempts200Response</returns>
        public ModLessonGetQuestionsAttempts200Response ModLessonGetQuestionsAttempts(ModLessonGetQuestionsAttemptsRequest modLessonGetQuestionsAttemptsRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetQuestionsAttempts200Response> localVarResponse = ModLessonGetQuestionsAttemptsWithHttpInfo(modLessonGetQuestionsAttemptsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the list of questions attempts in a given lesson. Return the list of questions attempts in a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetQuestionsAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetQuestionsAttempts200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonGetQuestionsAttempts200Response> ModLessonGetQuestionsAttemptsWithHttpInfo(ModLessonGetQuestionsAttemptsRequest modLessonGetQuestionsAttemptsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonGetQuestionsAttemptsRequest' is set
            if (modLessonGetQuestionsAttemptsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetQuestionsAttemptsRequest' when calling ModLessonApi->ModLessonGetQuestionsAttempts");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetQuestionsAttemptsRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetQuestionsAttempts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonGetQuestionsAttempts200Response>("/mod_lesson_get_questions_attempts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetQuestionsAttempts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the list of questions attempts in a given lesson. Return the list of questions attempts in a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetQuestionsAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetQuestionsAttempts200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonGetQuestionsAttempts200Response> ModLessonGetQuestionsAttemptsAsync(ModLessonGetQuestionsAttemptsRequest modLessonGetQuestionsAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetQuestionsAttempts200Response> localVarResponse = await ModLessonGetQuestionsAttemptsWithHttpInfoAsync(modLessonGetQuestionsAttemptsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the list of questions attempts in a given lesson. Return the list of questions attempts in a given lesson.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetQuestionsAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetQuestionsAttempts200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonGetQuestionsAttempts200Response>> ModLessonGetQuestionsAttemptsWithHttpInfoAsync(ModLessonGetQuestionsAttemptsRequest modLessonGetQuestionsAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonGetQuestionsAttemptsRequest' is set
            if (modLessonGetQuestionsAttemptsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetQuestionsAttemptsRequest' when calling ModLessonApi->ModLessonGetQuestionsAttempts");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetQuestionsAttemptsRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetQuestionsAttempts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonGetQuestionsAttempts200Response>("/mod_lesson_get_questions_attempts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetQuestionsAttempts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return information about the given user attempt (including answers). Return information about the given user attempt (including answers).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetUserAttempt200Response</returns>
        public ModLessonGetUserAttempt200Response ModLessonGetUserAttempt(ModLessonGetUserAttemptRequest modLessonGetUserAttemptRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserAttempt200Response> localVarResponse = ModLessonGetUserAttemptWithHttpInfo(modLessonGetUserAttemptRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return information about the given user attempt (including answers). Return information about the given user attempt (including answers).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetUserAttempt200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserAttempt200Response> ModLessonGetUserAttemptWithHttpInfo(ModLessonGetUserAttemptRequest modLessonGetUserAttemptRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonGetUserAttemptRequest' is set
            if (modLessonGetUserAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetUserAttemptRequest' when calling ModLessonApi->ModLessonGetUserAttempt");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetUserAttemptRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetUserAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonGetUserAttempt200Response>("/mod_lesson_get_user_attempt", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetUserAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return information about the given user attempt (including answers). Return information about the given user attempt (including answers).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetUserAttempt200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonGetUserAttempt200Response> ModLessonGetUserAttemptAsync(ModLessonGetUserAttemptRequest modLessonGetUserAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserAttempt200Response> localVarResponse = await ModLessonGetUserAttemptWithHttpInfoAsync(modLessonGetUserAttemptRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return information about the given user attempt (including answers). Return information about the given user attempt (including answers).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetUserAttempt200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserAttempt200Response>> ModLessonGetUserAttemptWithHttpInfoAsync(ModLessonGetUserAttemptRequest modLessonGetUserAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonGetUserAttemptRequest' is set
            if (modLessonGetUserAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetUserAttemptRequest' when calling ModLessonApi->ModLessonGetUserAttempt");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetUserAttemptRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetUserAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonGetUserAttempt200Response>("/mod_lesson_get_user_attempt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetUserAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return grade information in the attempt for a given user. Return grade information in the attempt for a given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetUserAttemptGrade200Response</returns>
        public ModLessonGetUserAttemptGrade200Response ModLessonGetUserAttemptGrade(ModLessonGetUserAttemptGradeRequest modLessonGetUserAttemptGradeRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserAttemptGrade200Response> localVarResponse = ModLessonGetUserAttemptGradeWithHttpInfo(modLessonGetUserAttemptGradeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return grade information in the attempt for a given user. Return grade information in the attempt for a given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetUserAttemptGrade200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserAttemptGrade200Response> ModLessonGetUserAttemptGradeWithHttpInfo(ModLessonGetUserAttemptGradeRequest modLessonGetUserAttemptGradeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonGetUserAttemptGradeRequest' is set
            if (modLessonGetUserAttemptGradeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetUserAttemptGradeRequest' when calling ModLessonApi->ModLessonGetUserAttemptGrade");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetUserAttemptGradeRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetUserAttemptGrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonGetUserAttemptGrade200Response>("/mod_lesson_get_user_attempt_grade", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetUserAttemptGrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return grade information in the attempt for a given user. Return grade information in the attempt for a given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetUserAttemptGrade200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonGetUserAttemptGrade200Response> ModLessonGetUserAttemptGradeAsync(ModLessonGetUserAttemptGradeRequest modLessonGetUserAttemptGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserAttemptGrade200Response> localVarResponse = await ModLessonGetUserAttemptGradeWithHttpInfoAsync(modLessonGetUserAttemptGradeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return grade information in the attempt for a given user. Return grade information in the attempt for a given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserAttemptGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetUserAttemptGrade200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserAttemptGrade200Response>> ModLessonGetUserAttemptGradeWithHttpInfoAsync(ModLessonGetUserAttemptGradeRequest modLessonGetUserAttemptGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonGetUserAttemptGradeRequest' is set
            if (modLessonGetUserAttemptGradeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetUserAttemptGradeRequest' when calling ModLessonApi->ModLessonGetUserAttemptGrade");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetUserAttemptGradeRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetUserAttemptGrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonGetUserAttemptGrade200Response>("/mod_lesson_get_user_attempt_grade", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetUserAttemptGrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the final grade in the lesson for the given user. Return the final grade in the lesson for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetUserGrade200Response</returns>
        public ModLessonGetUserGrade200Response ModLessonGetUserGrade(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserGrade200Response> localVarResponse = ModLessonGetUserGradeWithHttpInfo(modLessonGetUserGradeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the final grade in the lesson for the given user. Return the final grade in the lesson for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetUserGrade200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserGrade200Response> ModLessonGetUserGradeWithHttpInfo(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonGetUserGradeRequest' is set
            if (modLessonGetUserGradeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetUserGradeRequest' when calling ModLessonApi->ModLessonGetUserGrade");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetUserGradeRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetUserGrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonGetUserGrade200Response>("/mod_lesson_get_user_grade", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetUserGrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the final grade in the lesson for the given user. Return the final grade in the lesson for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetUserGrade200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonGetUserGrade200Response> ModLessonGetUserGradeAsync(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserGrade200Response> localVarResponse = await ModLessonGetUserGradeWithHttpInfoAsync(modLessonGetUserGradeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the final grade in the lesson for the given user. Return the final grade in the lesson for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetUserGrade200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserGrade200Response>> ModLessonGetUserGradeWithHttpInfoAsync(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonGetUserGradeRequest' is set
            if (modLessonGetUserGradeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetUserGradeRequest' when calling ModLessonApi->ModLessonGetUserGrade");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetUserGradeRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetUserGrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonGetUserGrade200Response>("/mod_lesson_get_user_grade", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetUserGrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the timers in the current lesson for the given user. Return the timers in the current lesson for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonGetUserTimers200Response</returns>
        public ModLessonGetUserTimers200Response ModLessonGetUserTimers(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserTimers200Response> localVarResponse = ModLessonGetUserTimersWithHttpInfo(modLessonGetUserGradeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the timers in the current lesson for the given user. Return the timers in the current lesson for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonGetUserTimers200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserTimers200Response> ModLessonGetUserTimersWithHttpInfo(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonGetUserGradeRequest' is set
            if (modLessonGetUserGradeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetUserGradeRequest' when calling ModLessonApi->ModLessonGetUserTimers");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetUserGradeRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetUserTimers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonGetUserTimers200Response>("/mod_lesson_get_user_timers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetUserTimers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the timers in the current lesson for the given user. Return the timers in the current lesson for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonGetUserTimers200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonGetUserTimers200Response> ModLessonGetUserTimersAsync(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserTimers200Response> localVarResponse = await ModLessonGetUserTimersWithHttpInfoAsync(modLessonGetUserGradeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the timers in the current lesson for the given user. Return the timers in the current lesson for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetUserGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonGetUserTimers200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonGetUserTimers200Response>> ModLessonGetUserTimersWithHttpInfoAsync(ModLessonGetUserGradeRequest modLessonGetUserGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonGetUserGradeRequest' is set
            if (modLessonGetUserGradeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetUserGradeRequest' when calling ModLessonApi->ModLessonGetUserTimers");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetUserGradeRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonGetUserTimers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonGetUserTimers200Response>("/mod_lesson_get_user_timers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonGetUserTimers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts a new attempt or continues an existing one. Starts a new attempt or continues an existing one.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonLaunchAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonLaunchAttempt200Response</returns>
        public ModLessonLaunchAttempt200Response ModLessonLaunchAttempt(ModLessonLaunchAttemptRequest modLessonLaunchAttemptRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonLaunchAttempt200Response> localVarResponse = ModLessonLaunchAttemptWithHttpInfo(modLessonLaunchAttemptRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a new attempt or continues an existing one. Starts a new attempt or continues an existing one.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonLaunchAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonLaunchAttempt200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonLaunchAttempt200Response> ModLessonLaunchAttemptWithHttpInfo(ModLessonLaunchAttemptRequest modLessonLaunchAttemptRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonLaunchAttemptRequest' is set
            if (modLessonLaunchAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonLaunchAttemptRequest' when calling ModLessonApi->ModLessonLaunchAttempt");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonLaunchAttemptRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonLaunchAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonLaunchAttempt200Response>("/mod_lesson_launch_attempt", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonLaunchAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts a new attempt or continues an existing one. Starts a new attempt or continues an existing one.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonLaunchAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonLaunchAttempt200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonLaunchAttempt200Response> ModLessonLaunchAttemptAsync(ModLessonLaunchAttemptRequest modLessonLaunchAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonLaunchAttempt200Response> localVarResponse = await ModLessonLaunchAttemptWithHttpInfoAsync(modLessonLaunchAttemptRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a new attempt or continues an existing one. Starts a new attempt or continues an existing one.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonLaunchAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonLaunchAttempt200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonLaunchAttempt200Response>> ModLessonLaunchAttemptWithHttpInfoAsync(ModLessonLaunchAttemptRequest modLessonLaunchAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonLaunchAttemptRequest' is set
            if (modLessonLaunchAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonLaunchAttemptRequest' when calling ModLessonApi->ModLessonLaunchAttempt");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonLaunchAttemptRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonLaunchAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonLaunchAttempt200Response>("/mod_lesson_launch_attempt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonLaunchAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Processes page responses. Processes page responses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLessonProcessPage200Response</returns>
        public ModLessonProcessPage200Response ModLessonProcessPage(ModLessonProcessPageRequest modLessonProcessPageRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonProcessPage200Response> localVarResponse = ModLessonProcessPageWithHttpInfo(modLessonProcessPageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Processes page responses. Processes page responses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLessonProcessPage200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLessonProcessPage200Response> ModLessonProcessPageWithHttpInfo(ModLessonProcessPageRequest modLessonProcessPageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonProcessPageRequest' is set
            if (modLessonProcessPageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonProcessPageRequest' when calling ModLessonApi->ModLessonProcessPage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonProcessPageRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonProcessPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLessonProcessPage200Response>("/mod_lesson_process_page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonProcessPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Processes page responses. Processes page responses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLessonProcessPage200Response</returns>
        public async System.Threading.Tasks.Task<ModLessonProcessPage200Response> ModLessonProcessPageAsync(ModLessonProcessPageRequest modLessonProcessPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLessonProcessPage200Response> localVarResponse = await ModLessonProcessPageWithHttpInfoAsync(modLessonProcessPageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Processes page responses. Processes page responses.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLessonProcessPage200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLessonProcessPage200Response>> ModLessonProcessPageWithHttpInfoAsync(ModLessonProcessPageRequest modLessonProcessPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonProcessPageRequest' is set
            if (modLessonProcessPageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonProcessPageRequest' when calling ModLessonApi->ModLessonProcessPage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonProcessPageRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonProcessPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLessonProcessPage200Response>("/mod_lesson_process_page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonProcessPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModLessonViewLesson(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModLessonViewLessonWithHttpInfo(modLessonGetLessonRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModLessonViewLessonWithHttpInfo(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLessonGetLessonRequest' is set
            if (modLessonGetLessonRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetLessonRequest' when calling ModLessonApi->ModLessonViewLesson");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetLessonRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonViewLesson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_lesson_view_lesson", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonViewLesson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModLessonViewLessonAsync(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModLessonViewLessonWithHttpInfoAsync(modLessonGetLessonRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLessonGetLessonRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModLessonViewLessonWithHttpInfoAsync(ModLessonGetLessonRequest modLessonGetLessonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLessonGetLessonRequest' is set
            if (modLessonGetLessonRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLessonGetLessonRequest' when calling ModLessonApi->ModLessonViewLesson");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLessonGetLessonRequest;

            localVarRequestOptions.Operation = "ModLessonApi.ModLessonViewLesson";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_lesson_view_lesson", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLessonViewLesson", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
