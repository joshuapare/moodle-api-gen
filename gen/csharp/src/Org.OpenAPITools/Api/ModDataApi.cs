/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModDataApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a new entry.
        /// </summary>
        /// <remarks>
        /// Adds a new entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataAddEntry200Response</returns>
        ModDataAddEntry200Response ModDataAddEntry(ModDataAddEntryRequest modDataAddEntryRequest, int operationIndex = 0);

        /// <summary>
        /// Adds a new entry.
        /// </summary>
        /// <remarks>
        /// Adds a new entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataAddEntry200Response</returns>
        ApiResponse<ModDataAddEntry200Response> ModDataAddEntryWithHttpInfo(ModDataAddEntryRequest modDataAddEntryRequest, int operationIndex = 0);
        /// <summary>
        /// Approves or unapproves an entry.
        /// </summary>
        /// <remarks>
        /// Approves or unapproves an entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataApproveEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModDataApproveEntry(ModDataApproveEntryRequest modDataApproveEntryRequest, int operationIndex = 0);

        /// <summary>
        /// Approves or unapproves an entry.
        /// </summary>
        /// <remarks>
        /// Approves or unapproves an entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataApproveEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModDataApproveEntryWithHttpInfo(ModDataApproveEntryRequest modDataApproveEntryRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes an entry.
        /// </summary>
        /// <remarks>
        /// Deletes an entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataDeleteEntry200Response</returns>
        ModDataDeleteEntry200Response ModDataDeleteEntry(ModDataDeleteEntryRequest modDataDeleteEntryRequest, int operationIndex = 0);

        /// <summary>
        /// Deletes an entry.
        /// </summary>
        /// <remarks>
        /// Deletes an entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataDeleteEntry200Response</returns>
        ApiResponse<ModDataDeleteEntry200Response> ModDataDeleteEntryWithHttpInfo(ModDataDeleteEntryRequest modDataDeleteEntryRequest, int operationIndex = 0);
        /// <summary>
        /// Delete site user preset.
        /// </summary>
        /// <remarks>
        /// Delete site user preset.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteSavedPresetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        CoreContentbankRenameContent200Response ModDataDeleteSavedPreset(ModDataDeleteSavedPresetRequest modDataDeleteSavedPresetRequest, int operationIndex = 0);

        /// <summary>
        /// Delete site user preset.
        /// </summary>
        /// <remarks>
        /// Delete site user preset.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteSavedPresetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        ApiResponse<CoreContentbankRenameContent200Response> ModDataDeleteSavedPresetWithHttpInfo(ModDataDeleteSavedPresetRequest modDataDeleteSavedPresetRequest, int operationIndex = 0);
        /// <summary>
        /// Return access information for a given database.
        /// </summary>
        /// <remarks>
        /// Return access information for a given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetDataAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataGetDataAccessInformation200Response</returns>
        ModDataGetDataAccessInformation200Response ModDataGetDataAccessInformation(ModDataGetDataAccessInformationRequest modDataGetDataAccessInformationRequest, int operationIndex = 0);

        /// <summary>
        /// Return access information for a given database.
        /// </summary>
        /// <remarks>
        /// Return access information for a given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetDataAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataGetDataAccessInformation200Response</returns>
        ApiResponse<ModDataGetDataAccessInformation200Response> ModDataGetDataAccessInformationWithHttpInfo(ModDataGetDataAccessInformationRequest modDataGetDataAccessInformationRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataGetDatabasesByCourses200Response</returns>
        ModDataGetDatabasesByCourses200Response ModDataGetDatabasesByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataGetDatabasesByCourses200Response</returns>
        ApiResponse<ModDataGetDatabasesByCourses200Response> ModDataGetDatabasesByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Return the complete list of entries of the given database.
        /// </summary>
        /// <remarks>
        /// Return the complete list of entries of the given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataGetEntries200Response</returns>
        ModDataGetEntries200Response ModDataGetEntries(ModDataGetEntriesRequest modDataGetEntriesRequest, int operationIndex = 0);

        /// <summary>
        /// Return the complete list of entries of the given database.
        /// </summary>
        /// <remarks>
        /// Return the complete list of entries of the given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataGetEntries200Response</returns>
        ApiResponse<ModDataGetEntries200Response> ModDataGetEntriesWithHttpInfo(ModDataGetEntriesRequest modDataGetEntriesRequest, int operationIndex = 0);
        /// <summary>
        /// Return one entry record from the database, including contents optionally.
        /// </summary>
        /// <remarks>
        /// Return one entry record from the database, including contents optionally.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataGetEntry200Response</returns>
        ModDataGetEntry200Response ModDataGetEntry(ModDataGetEntryRequest modDataGetEntryRequest, int operationIndex = 0);

        /// <summary>
        /// Return one entry record from the database, including contents optionally.
        /// </summary>
        /// <remarks>
        /// Return one entry record from the database, including contents optionally.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataGetEntry200Response</returns>
        ApiResponse<ModDataGetEntry200Response> ModDataGetEntryWithHttpInfo(ModDataGetEntryRequest modDataGetEntryRequest, int operationIndex = 0);
        /// <summary>
        /// Return the list of configured fields for the given database.
        /// </summary>
        /// <remarks>
        /// Return the list of configured fields for the given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetFieldsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataGetFields200Response</returns>
        ModDataGetFields200Response ModDataGetFields(ModDataGetFieldsRequest modDataGetFieldsRequest, int operationIndex = 0);

        /// <summary>
        /// Return the list of configured fields for the given database.
        /// </summary>
        /// <remarks>
        /// Return the list of configured fields for the given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetFieldsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataGetFields200Response</returns>
        ApiResponse<ModDataGetFields200Response> ModDataGetFieldsWithHttpInfo(ModDataGetFieldsRequest modDataGetFieldsRequest, int operationIndex = 0);
        /// <summary>
        /// Get importing information
        /// </summary>
        /// <remarks>
        /// Get importing information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetMappingInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataGetMappingInformation200Response</returns>
        ModDataGetMappingInformation200Response ModDataGetMappingInformation(ModDataGetMappingInformationRequest modDataGetMappingInformationRequest, int operationIndex = 0);

        /// <summary>
        /// Get importing information
        /// </summary>
        /// <remarks>
        /// Get importing information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetMappingInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataGetMappingInformation200Response</returns>
        ApiResponse<ModDataGetMappingInformation200Response> ModDataGetMappingInformationWithHttpInfo(ModDataGetMappingInformationRequest modDataGetMappingInformationRequest, int operationIndex = 0);
        /// <summary>
        /// Search for entries in the given database.
        /// </summary>
        /// <remarks>
        /// Search for entries in the given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataSearchEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataSearchEntries200Response</returns>
        ModDataSearchEntries200Response ModDataSearchEntries(ModDataSearchEntriesRequest modDataSearchEntriesRequest, int operationIndex = 0);

        /// <summary>
        /// Search for entries in the given database.
        /// </summary>
        /// <remarks>
        /// Search for entries in the given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataSearchEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataSearchEntries200Response</returns>
        ApiResponse<ModDataSearchEntries200Response> ModDataSearchEntriesWithHttpInfo(ModDataSearchEntriesRequest modDataSearchEntriesRequest, int operationIndex = 0);
        /// <summary>
        /// Updates an existing entry.
        /// </summary>
        /// <remarks>
        /// Updates an existing entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataUpdateEntry200Response</returns>
        ModDataUpdateEntry200Response ModDataUpdateEntry(ModDataUpdateEntryRequest modDataUpdateEntryRequest, int operationIndex = 0);

        /// <summary>
        /// Updates an existing entry.
        /// </summary>
        /// <remarks>
        /// Updates an existing entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataUpdateEntry200Response</returns>
        ApiResponse<ModDataUpdateEntry200Response> ModDataUpdateEntryWithHttpInfo(ModDataUpdateEntryRequest modDataUpdateEntryRequest, int operationIndex = 0);
        /// <summary>
        /// Simulate the view.php web interface data: trigger events, completion, etc...
        /// </summary>
        /// <remarks>
        /// Simulate the view.php web interface data: trigger events, completion, etc...
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataViewDatabaseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModDataViewDatabase(ModDataViewDatabaseRequest modDataViewDatabaseRequest, int operationIndex = 0);

        /// <summary>
        /// Simulate the view.php web interface data: trigger events, completion, etc...
        /// </summary>
        /// <remarks>
        /// Simulate the view.php web interface data: trigger events, completion, etc...
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataViewDatabaseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModDataViewDatabaseWithHttpInfo(ModDataViewDatabaseRequest modDataViewDatabaseRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModDataApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds a new entry.
        /// </summary>
        /// <remarks>
        /// Adds a new entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataAddEntry200Response</returns>
        System.Threading.Tasks.Task<ModDataAddEntry200Response> ModDataAddEntryAsync(ModDataAddEntryRequest modDataAddEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a new entry.
        /// </summary>
        /// <remarks>
        /// Adds a new entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataAddEntry200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModDataAddEntry200Response>> ModDataAddEntryWithHttpInfoAsync(ModDataAddEntryRequest modDataAddEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Approves or unapproves an entry.
        /// </summary>
        /// <remarks>
        /// Approves or unapproves an entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataApproveEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModDataApproveEntryAsync(ModDataApproveEntryRequest modDataApproveEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Approves or unapproves an entry.
        /// </summary>
        /// <remarks>
        /// Approves or unapproves an entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataApproveEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModDataApproveEntryWithHttpInfoAsync(ModDataApproveEntryRequest modDataApproveEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an entry.
        /// </summary>
        /// <remarks>
        /// Deletes an entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataDeleteEntry200Response</returns>
        System.Threading.Tasks.Task<ModDataDeleteEntry200Response> ModDataDeleteEntryAsync(ModDataDeleteEntryRequest modDataDeleteEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an entry.
        /// </summary>
        /// <remarks>
        /// Deletes an entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataDeleteEntry200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModDataDeleteEntry200Response>> ModDataDeleteEntryWithHttpInfoAsync(ModDataDeleteEntryRequest modDataDeleteEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete site user preset.
        /// </summary>
        /// <remarks>
        /// Delete site user preset.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteSavedPresetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ModDataDeleteSavedPresetAsync(ModDataDeleteSavedPresetRequest modDataDeleteSavedPresetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete site user preset.
        /// </summary>
        /// <remarks>
        /// Delete site user preset.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteSavedPresetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreContentbankRenameContent200Response>> ModDataDeleteSavedPresetWithHttpInfoAsync(ModDataDeleteSavedPresetRequest modDataDeleteSavedPresetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return access information for a given database.
        /// </summary>
        /// <remarks>
        /// Return access information for a given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetDataAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataGetDataAccessInformation200Response</returns>
        System.Threading.Tasks.Task<ModDataGetDataAccessInformation200Response> ModDataGetDataAccessInformationAsync(ModDataGetDataAccessInformationRequest modDataGetDataAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return access information for a given database.
        /// </summary>
        /// <remarks>
        /// Return access information for a given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetDataAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataGetDataAccessInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModDataGetDataAccessInformation200Response>> ModDataGetDataAccessInformationWithHttpInfoAsync(ModDataGetDataAccessInformationRequest modDataGetDataAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataGetDatabasesByCourses200Response</returns>
        System.Threading.Tasks.Task<ModDataGetDatabasesByCourses200Response> ModDataGetDatabasesByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataGetDatabasesByCourses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModDataGetDatabasesByCourses200Response>> ModDataGetDatabasesByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the complete list of entries of the given database.
        /// </summary>
        /// <remarks>
        /// Return the complete list of entries of the given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataGetEntries200Response</returns>
        System.Threading.Tasks.Task<ModDataGetEntries200Response> ModDataGetEntriesAsync(ModDataGetEntriesRequest modDataGetEntriesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the complete list of entries of the given database.
        /// </summary>
        /// <remarks>
        /// Return the complete list of entries of the given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataGetEntries200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModDataGetEntries200Response>> ModDataGetEntriesWithHttpInfoAsync(ModDataGetEntriesRequest modDataGetEntriesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return one entry record from the database, including contents optionally.
        /// </summary>
        /// <remarks>
        /// Return one entry record from the database, including contents optionally.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataGetEntry200Response</returns>
        System.Threading.Tasks.Task<ModDataGetEntry200Response> ModDataGetEntryAsync(ModDataGetEntryRequest modDataGetEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return one entry record from the database, including contents optionally.
        /// </summary>
        /// <remarks>
        /// Return one entry record from the database, including contents optionally.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataGetEntry200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModDataGetEntry200Response>> ModDataGetEntryWithHttpInfoAsync(ModDataGetEntryRequest modDataGetEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the list of configured fields for the given database.
        /// </summary>
        /// <remarks>
        /// Return the list of configured fields for the given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetFieldsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataGetFields200Response</returns>
        System.Threading.Tasks.Task<ModDataGetFields200Response> ModDataGetFieldsAsync(ModDataGetFieldsRequest modDataGetFieldsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the list of configured fields for the given database.
        /// </summary>
        /// <remarks>
        /// Return the list of configured fields for the given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetFieldsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataGetFields200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModDataGetFields200Response>> ModDataGetFieldsWithHttpInfoAsync(ModDataGetFieldsRequest modDataGetFieldsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get importing information
        /// </summary>
        /// <remarks>
        /// Get importing information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetMappingInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataGetMappingInformation200Response</returns>
        System.Threading.Tasks.Task<ModDataGetMappingInformation200Response> ModDataGetMappingInformationAsync(ModDataGetMappingInformationRequest modDataGetMappingInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get importing information
        /// </summary>
        /// <remarks>
        /// Get importing information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetMappingInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataGetMappingInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModDataGetMappingInformation200Response>> ModDataGetMappingInformationWithHttpInfoAsync(ModDataGetMappingInformationRequest modDataGetMappingInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for entries in the given database.
        /// </summary>
        /// <remarks>
        /// Search for entries in the given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataSearchEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataSearchEntries200Response</returns>
        System.Threading.Tasks.Task<ModDataSearchEntries200Response> ModDataSearchEntriesAsync(ModDataSearchEntriesRequest modDataSearchEntriesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for entries in the given database.
        /// </summary>
        /// <remarks>
        /// Search for entries in the given database.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataSearchEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataSearchEntries200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModDataSearchEntries200Response>> ModDataSearchEntriesWithHttpInfoAsync(ModDataSearchEntriesRequest modDataSearchEntriesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates an existing entry.
        /// </summary>
        /// <remarks>
        /// Updates an existing entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataUpdateEntry200Response</returns>
        System.Threading.Tasks.Task<ModDataUpdateEntry200Response> ModDataUpdateEntryAsync(ModDataUpdateEntryRequest modDataUpdateEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates an existing entry.
        /// </summary>
        /// <remarks>
        /// Updates an existing entry.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataUpdateEntry200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModDataUpdateEntry200Response>> ModDataUpdateEntryWithHttpInfoAsync(ModDataUpdateEntryRequest modDataUpdateEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Simulate the view.php web interface data: trigger events, completion, etc...
        /// </summary>
        /// <remarks>
        /// Simulate the view.php web interface data: trigger events, completion, etc...
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataViewDatabaseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModDataViewDatabaseAsync(ModDataViewDatabaseRequest modDataViewDatabaseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Simulate the view.php web interface data: trigger events, completion, etc...
        /// </summary>
        /// <remarks>
        /// Simulate the view.php web interface data: trigger events, completion, etc...
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataViewDatabaseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModDataViewDatabaseWithHttpInfoAsync(ModDataViewDatabaseRequest modDataViewDatabaseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModDataApi : IModDataApiSync, IModDataApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModDataApi : IModDataApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModDataApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModDataApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModDataApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModDataApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModDataApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds a new entry. Adds a new entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataAddEntry200Response</returns>
        public ModDataAddEntry200Response ModDataAddEntry(ModDataAddEntryRequest modDataAddEntryRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataAddEntry200Response> localVarResponse = ModDataAddEntryWithHttpInfo(modDataAddEntryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new entry. Adds a new entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataAddEntry200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModDataAddEntry200Response> ModDataAddEntryWithHttpInfo(ModDataAddEntryRequest modDataAddEntryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modDataAddEntryRequest' is set
            if (modDataAddEntryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataAddEntryRequest' when calling ModDataApi->ModDataAddEntry");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataAddEntryRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataAddEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModDataAddEntry200Response>("/mod_data_add_entry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataAddEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a new entry. Adds a new entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataAddEntry200Response</returns>
        public async System.Threading.Tasks.Task<ModDataAddEntry200Response> ModDataAddEntryAsync(ModDataAddEntryRequest modDataAddEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataAddEntry200Response> localVarResponse = await ModDataAddEntryWithHttpInfoAsync(modDataAddEntryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new entry. Adds a new entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataAddEntry200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModDataAddEntry200Response>> ModDataAddEntryWithHttpInfoAsync(ModDataAddEntryRequest modDataAddEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modDataAddEntryRequest' is set
            if (modDataAddEntryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataAddEntryRequest' when calling ModDataApi->ModDataAddEntry");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataAddEntryRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataAddEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModDataAddEntry200Response>("/mod_data_add_entry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataAddEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approves or unapproves an entry. Approves or unapproves an entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataApproveEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModDataApproveEntry(ModDataApproveEntryRequest modDataApproveEntryRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModDataApproveEntryWithHttpInfo(modDataApproveEntryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Approves or unapproves an entry. Approves or unapproves an entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataApproveEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModDataApproveEntryWithHttpInfo(ModDataApproveEntryRequest modDataApproveEntryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modDataApproveEntryRequest' is set
            if (modDataApproveEntryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataApproveEntryRequest' when calling ModDataApi->ModDataApproveEntry");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataApproveEntryRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataApproveEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_data_approve_entry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataApproveEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approves or unapproves an entry. Approves or unapproves an entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataApproveEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModDataApproveEntryAsync(ModDataApproveEntryRequest modDataApproveEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModDataApproveEntryWithHttpInfoAsync(modDataApproveEntryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Approves or unapproves an entry. Approves or unapproves an entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataApproveEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModDataApproveEntryWithHttpInfoAsync(ModDataApproveEntryRequest modDataApproveEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modDataApproveEntryRequest' is set
            if (modDataApproveEntryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataApproveEntryRequest' when calling ModDataApi->ModDataApproveEntry");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataApproveEntryRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataApproveEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_data_approve_entry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataApproveEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an entry. Deletes an entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataDeleteEntry200Response</returns>
        public ModDataDeleteEntry200Response ModDataDeleteEntry(ModDataDeleteEntryRequest modDataDeleteEntryRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataDeleteEntry200Response> localVarResponse = ModDataDeleteEntryWithHttpInfo(modDataDeleteEntryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an entry. Deletes an entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataDeleteEntry200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModDataDeleteEntry200Response> ModDataDeleteEntryWithHttpInfo(ModDataDeleteEntryRequest modDataDeleteEntryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modDataDeleteEntryRequest' is set
            if (modDataDeleteEntryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataDeleteEntryRequest' when calling ModDataApi->ModDataDeleteEntry");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataDeleteEntryRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataDeleteEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModDataDeleteEntry200Response>("/mod_data_delete_entry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataDeleteEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an entry. Deletes an entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataDeleteEntry200Response</returns>
        public async System.Threading.Tasks.Task<ModDataDeleteEntry200Response> ModDataDeleteEntryAsync(ModDataDeleteEntryRequest modDataDeleteEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataDeleteEntry200Response> localVarResponse = await ModDataDeleteEntryWithHttpInfoAsync(modDataDeleteEntryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an entry. Deletes an entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataDeleteEntry200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModDataDeleteEntry200Response>> ModDataDeleteEntryWithHttpInfoAsync(ModDataDeleteEntryRequest modDataDeleteEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modDataDeleteEntryRequest' is set
            if (modDataDeleteEntryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataDeleteEntryRequest' when calling ModDataApi->ModDataDeleteEntry");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataDeleteEntryRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataDeleteEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModDataDeleteEntry200Response>("/mod_data_delete_entry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataDeleteEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete site user preset. Delete site user preset.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteSavedPresetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        public CoreContentbankRenameContent200Response ModDataDeleteSavedPreset(ModDataDeleteSavedPresetRequest modDataDeleteSavedPresetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = ModDataDeleteSavedPresetWithHttpInfo(modDataDeleteSavedPresetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete site user preset. Delete site user preset.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteSavedPresetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CoreContentbankRenameContent200Response> ModDataDeleteSavedPresetWithHttpInfo(ModDataDeleteSavedPresetRequest modDataDeleteSavedPresetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modDataDeleteSavedPresetRequest' is set
            if (modDataDeleteSavedPresetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataDeleteSavedPresetRequest' when calling ModDataApi->ModDataDeleteSavedPreset");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataDeleteSavedPresetRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataDeleteSavedPreset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreContentbankRenameContent200Response>("/mod_data_delete_saved_preset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataDeleteSavedPreset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete site user preset. Delete site user preset.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteSavedPresetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        public async System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ModDataDeleteSavedPresetAsync(ModDataDeleteSavedPresetRequest modDataDeleteSavedPresetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = await ModDataDeleteSavedPresetWithHttpInfoAsync(modDataDeleteSavedPresetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete site user preset. Delete site user preset.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataDeleteSavedPresetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CoreContentbankRenameContent200Response>> ModDataDeleteSavedPresetWithHttpInfoAsync(ModDataDeleteSavedPresetRequest modDataDeleteSavedPresetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modDataDeleteSavedPresetRequest' is set
            if (modDataDeleteSavedPresetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataDeleteSavedPresetRequest' when calling ModDataApi->ModDataDeleteSavedPreset");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataDeleteSavedPresetRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataDeleteSavedPreset";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreContentbankRenameContent200Response>("/mod_data_delete_saved_preset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataDeleteSavedPreset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return access information for a given database. Return access information for a given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetDataAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataGetDataAccessInformation200Response</returns>
        public ModDataGetDataAccessInformation200Response ModDataGetDataAccessInformation(ModDataGetDataAccessInformationRequest modDataGetDataAccessInformationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataGetDataAccessInformation200Response> localVarResponse = ModDataGetDataAccessInformationWithHttpInfo(modDataGetDataAccessInformationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return access information for a given database. Return access information for a given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetDataAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataGetDataAccessInformation200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModDataGetDataAccessInformation200Response> ModDataGetDataAccessInformationWithHttpInfo(ModDataGetDataAccessInformationRequest modDataGetDataAccessInformationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modDataGetDataAccessInformationRequest' is set
            if (modDataGetDataAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataGetDataAccessInformationRequest' when calling ModDataApi->ModDataGetDataAccessInformation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataGetDataAccessInformationRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataGetDataAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModDataGetDataAccessInformation200Response>("/mod_data_get_data_access_information", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataGetDataAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return access information for a given database. Return access information for a given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetDataAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataGetDataAccessInformation200Response</returns>
        public async System.Threading.Tasks.Task<ModDataGetDataAccessInformation200Response> ModDataGetDataAccessInformationAsync(ModDataGetDataAccessInformationRequest modDataGetDataAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataGetDataAccessInformation200Response> localVarResponse = await ModDataGetDataAccessInformationWithHttpInfoAsync(modDataGetDataAccessInformationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return access information for a given database. Return access information for a given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetDataAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataGetDataAccessInformation200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModDataGetDataAccessInformation200Response>> ModDataGetDataAccessInformationWithHttpInfoAsync(ModDataGetDataAccessInformationRequest modDataGetDataAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modDataGetDataAccessInformationRequest' is set
            if (modDataGetDataAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataGetDataAccessInformationRequest' when calling ModDataApi->ModDataGetDataAccessInformation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataGetDataAccessInformationRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataGetDataAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModDataGetDataAccessInformation200Response>("/mod_data_get_data_access_information", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataGetDataAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned. Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataGetDatabasesByCourses200Response</returns>
        public ModDataGetDatabasesByCourses200Response ModDataGetDatabasesByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataGetDatabasesByCourses200Response> localVarResponse = ModDataGetDatabasesByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned. Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataGetDatabasesByCourses200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModDataGetDatabasesByCourses200Response> ModDataGetDatabasesByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModDataApi->ModDataGetDatabasesByCourses");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataGetDatabasesByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModDataGetDatabasesByCourses200Response>("/mod_data_get_databases_by_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataGetDatabasesByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned. Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataGetDatabasesByCourses200Response</returns>
        public async System.Threading.Tasks.Task<ModDataGetDatabasesByCourses200Response> ModDataGetDatabasesByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataGetDatabasesByCourses200Response> localVarResponse = await ModDataGetDatabasesByCoursesWithHttpInfoAsync(modChatGetChatsByCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned. Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataGetDatabasesByCourses200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModDataGetDatabasesByCourses200Response>> ModDataGetDatabasesByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModDataApi->ModDataGetDatabasesByCourses");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataGetDatabasesByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModDataGetDatabasesByCourses200Response>("/mod_data_get_databases_by_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataGetDatabasesByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the complete list of entries of the given database. Return the complete list of entries of the given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataGetEntries200Response</returns>
        public ModDataGetEntries200Response ModDataGetEntries(ModDataGetEntriesRequest modDataGetEntriesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataGetEntries200Response> localVarResponse = ModDataGetEntriesWithHttpInfo(modDataGetEntriesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the complete list of entries of the given database. Return the complete list of entries of the given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataGetEntries200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModDataGetEntries200Response> ModDataGetEntriesWithHttpInfo(ModDataGetEntriesRequest modDataGetEntriesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modDataGetEntriesRequest' is set
            if (modDataGetEntriesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataGetEntriesRequest' when calling ModDataApi->ModDataGetEntries");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataGetEntriesRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataGetEntries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModDataGetEntries200Response>("/mod_data_get_entries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataGetEntries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the complete list of entries of the given database. Return the complete list of entries of the given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataGetEntries200Response</returns>
        public async System.Threading.Tasks.Task<ModDataGetEntries200Response> ModDataGetEntriesAsync(ModDataGetEntriesRequest modDataGetEntriesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataGetEntries200Response> localVarResponse = await ModDataGetEntriesWithHttpInfoAsync(modDataGetEntriesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the complete list of entries of the given database. Return the complete list of entries of the given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataGetEntries200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModDataGetEntries200Response>> ModDataGetEntriesWithHttpInfoAsync(ModDataGetEntriesRequest modDataGetEntriesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modDataGetEntriesRequest' is set
            if (modDataGetEntriesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataGetEntriesRequest' when calling ModDataApi->ModDataGetEntries");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataGetEntriesRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataGetEntries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModDataGetEntries200Response>("/mod_data_get_entries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataGetEntries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return one entry record from the database, including contents optionally. Return one entry record from the database, including contents optionally.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataGetEntry200Response</returns>
        public ModDataGetEntry200Response ModDataGetEntry(ModDataGetEntryRequest modDataGetEntryRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataGetEntry200Response> localVarResponse = ModDataGetEntryWithHttpInfo(modDataGetEntryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return one entry record from the database, including contents optionally. Return one entry record from the database, including contents optionally.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataGetEntry200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModDataGetEntry200Response> ModDataGetEntryWithHttpInfo(ModDataGetEntryRequest modDataGetEntryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modDataGetEntryRequest' is set
            if (modDataGetEntryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataGetEntryRequest' when calling ModDataApi->ModDataGetEntry");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataGetEntryRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataGetEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModDataGetEntry200Response>("/mod_data_get_entry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataGetEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return one entry record from the database, including contents optionally. Return one entry record from the database, including contents optionally.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataGetEntry200Response</returns>
        public async System.Threading.Tasks.Task<ModDataGetEntry200Response> ModDataGetEntryAsync(ModDataGetEntryRequest modDataGetEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataGetEntry200Response> localVarResponse = await ModDataGetEntryWithHttpInfoAsync(modDataGetEntryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return one entry record from the database, including contents optionally. Return one entry record from the database, including contents optionally.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataGetEntry200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModDataGetEntry200Response>> ModDataGetEntryWithHttpInfoAsync(ModDataGetEntryRequest modDataGetEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modDataGetEntryRequest' is set
            if (modDataGetEntryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataGetEntryRequest' when calling ModDataApi->ModDataGetEntry");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataGetEntryRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataGetEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModDataGetEntry200Response>("/mod_data_get_entry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataGetEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the list of configured fields for the given database. Return the list of configured fields for the given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetFieldsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataGetFields200Response</returns>
        public ModDataGetFields200Response ModDataGetFields(ModDataGetFieldsRequest modDataGetFieldsRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataGetFields200Response> localVarResponse = ModDataGetFieldsWithHttpInfo(modDataGetFieldsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the list of configured fields for the given database. Return the list of configured fields for the given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetFieldsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataGetFields200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModDataGetFields200Response> ModDataGetFieldsWithHttpInfo(ModDataGetFieldsRequest modDataGetFieldsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modDataGetFieldsRequest' is set
            if (modDataGetFieldsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataGetFieldsRequest' when calling ModDataApi->ModDataGetFields");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataGetFieldsRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataGetFields";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModDataGetFields200Response>("/mod_data_get_fields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataGetFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the list of configured fields for the given database. Return the list of configured fields for the given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetFieldsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataGetFields200Response</returns>
        public async System.Threading.Tasks.Task<ModDataGetFields200Response> ModDataGetFieldsAsync(ModDataGetFieldsRequest modDataGetFieldsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataGetFields200Response> localVarResponse = await ModDataGetFieldsWithHttpInfoAsync(modDataGetFieldsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the list of configured fields for the given database. Return the list of configured fields for the given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetFieldsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataGetFields200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModDataGetFields200Response>> ModDataGetFieldsWithHttpInfoAsync(ModDataGetFieldsRequest modDataGetFieldsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modDataGetFieldsRequest' is set
            if (modDataGetFieldsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataGetFieldsRequest' when calling ModDataApi->ModDataGetFields");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataGetFieldsRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataGetFields";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModDataGetFields200Response>("/mod_data_get_fields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataGetFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get importing information Get importing information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetMappingInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataGetMappingInformation200Response</returns>
        public ModDataGetMappingInformation200Response ModDataGetMappingInformation(ModDataGetMappingInformationRequest modDataGetMappingInformationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataGetMappingInformation200Response> localVarResponse = ModDataGetMappingInformationWithHttpInfo(modDataGetMappingInformationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get importing information Get importing information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetMappingInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataGetMappingInformation200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModDataGetMappingInformation200Response> ModDataGetMappingInformationWithHttpInfo(ModDataGetMappingInformationRequest modDataGetMappingInformationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modDataGetMappingInformationRequest' is set
            if (modDataGetMappingInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataGetMappingInformationRequest' when calling ModDataApi->ModDataGetMappingInformation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataGetMappingInformationRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataGetMappingInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModDataGetMappingInformation200Response>("/mod_data_get_mapping_information", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataGetMappingInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get importing information Get importing information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetMappingInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataGetMappingInformation200Response</returns>
        public async System.Threading.Tasks.Task<ModDataGetMappingInformation200Response> ModDataGetMappingInformationAsync(ModDataGetMappingInformationRequest modDataGetMappingInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataGetMappingInformation200Response> localVarResponse = await ModDataGetMappingInformationWithHttpInfoAsync(modDataGetMappingInformationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get importing information Get importing information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataGetMappingInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataGetMappingInformation200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModDataGetMappingInformation200Response>> ModDataGetMappingInformationWithHttpInfoAsync(ModDataGetMappingInformationRequest modDataGetMappingInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modDataGetMappingInformationRequest' is set
            if (modDataGetMappingInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataGetMappingInformationRequest' when calling ModDataApi->ModDataGetMappingInformation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataGetMappingInformationRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataGetMappingInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModDataGetMappingInformation200Response>("/mod_data_get_mapping_information", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataGetMappingInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for entries in the given database. Search for entries in the given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataSearchEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataSearchEntries200Response</returns>
        public ModDataSearchEntries200Response ModDataSearchEntries(ModDataSearchEntriesRequest modDataSearchEntriesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataSearchEntries200Response> localVarResponse = ModDataSearchEntriesWithHttpInfo(modDataSearchEntriesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for entries in the given database. Search for entries in the given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataSearchEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataSearchEntries200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModDataSearchEntries200Response> ModDataSearchEntriesWithHttpInfo(ModDataSearchEntriesRequest modDataSearchEntriesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modDataSearchEntriesRequest' is set
            if (modDataSearchEntriesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataSearchEntriesRequest' when calling ModDataApi->ModDataSearchEntries");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataSearchEntriesRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataSearchEntries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModDataSearchEntries200Response>("/mod_data_search_entries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataSearchEntries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for entries in the given database. Search for entries in the given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataSearchEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataSearchEntries200Response</returns>
        public async System.Threading.Tasks.Task<ModDataSearchEntries200Response> ModDataSearchEntriesAsync(ModDataSearchEntriesRequest modDataSearchEntriesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataSearchEntries200Response> localVarResponse = await ModDataSearchEntriesWithHttpInfoAsync(modDataSearchEntriesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for entries in the given database. Search for entries in the given database.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataSearchEntriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataSearchEntries200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModDataSearchEntries200Response>> ModDataSearchEntriesWithHttpInfoAsync(ModDataSearchEntriesRequest modDataSearchEntriesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modDataSearchEntriesRequest' is set
            if (modDataSearchEntriesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataSearchEntriesRequest' when calling ModDataApi->ModDataSearchEntries");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataSearchEntriesRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataSearchEntries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModDataSearchEntries200Response>("/mod_data_search_entries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataSearchEntries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an existing entry. Updates an existing entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModDataUpdateEntry200Response</returns>
        public ModDataUpdateEntry200Response ModDataUpdateEntry(ModDataUpdateEntryRequest modDataUpdateEntryRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataUpdateEntry200Response> localVarResponse = ModDataUpdateEntryWithHttpInfo(modDataUpdateEntryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing entry. Updates an existing entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModDataUpdateEntry200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModDataUpdateEntry200Response> ModDataUpdateEntryWithHttpInfo(ModDataUpdateEntryRequest modDataUpdateEntryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modDataUpdateEntryRequest' is set
            if (modDataUpdateEntryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataUpdateEntryRequest' when calling ModDataApi->ModDataUpdateEntry");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataUpdateEntryRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataUpdateEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModDataUpdateEntry200Response>("/mod_data_update_entry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataUpdateEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an existing entry. Updates an existing entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModDataUpdateEntry200Response</returns>
        public async System.Threading.Tasks.Task<ModDataUpdateEntry200Response> ModDataUpdateEntryAsync(ModDataUpdateEntryRequest modDataUpdateEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModDataUpdateEntry200Response> localVarResponse = await ModDataUpdateEntryWithHttpInfoAsync(modDataUpdateEntryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing entry. Updates an existing entry.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModDataUpdateEntry200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModDataUpdateEntry200Response>> ModDataUpdateEntryWithHttpInfoAsync(ModDataUpdateEntryRequest modDataUpdateEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modDataUpdateEntryRequest' is set
            if (modDataUpdateEntryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataUpdateEntryRequest' when calling ModDataApi->ModDataUpdateEntry");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataUpdateEntryRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataUpdateEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModDataUpdateEntry200Response>("/mod_data_update_entry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataUpdateEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Simulate the view.php web interface data: trigger events, completion, etc... Simulate the view.php web interface data: trigger events, completion, etc...
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataViewDatabaseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModDataViewDatabase(ModDataViewDatabaseRequest modDataViewDatabaseRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModDataViewDatabaseWithHttpInfo(modDataViewDatabaseRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate the view.php web interface data: trigger events, completion, etc... Simulate the view.php web interface data: trigger events, completion, etc...
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataViewDatabaseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModDataViewDatabaseWithHttpInfo(ModDataViewDatabaseRequest modDataViewDatabaseRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modDataViewDatabaseRequest' is set
            if (modDataViewDatabaseRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataViewDatabaseRequest' when calling ModDataApi->ModDataViewDatabase");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataViewDatabaseRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataViewDatabase";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_data_view_database", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataViewDatabase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Simulate the view.php web interface data: trigger events, completion, etc... Simulate the view.php web interface data: trigger events, completion, etc...
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataViewDatabaseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModDataViewDatabaseAsync(ModDataViewDatabaseRequest modDataViewDatabaseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModDataViewDatabaseWithHttpInfoAsync(modDataViewDatabaseRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate the view.php web interface data: trigger events, completion, etc... Simulate the view.php web interface data: trigger events, completion, etc...
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modDataViewDatabaseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModDataViewDatabaseWithHttpInfoAsync(ModDataViewDatabaseRequest modDataViewDatabaseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modDataViewDatabaseRequest' is set
            if (modDataViewDatabaseRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modDataViewDatabaseRequest' when calling ModDataApi->ModDataViewDatabase");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modDataViewDatabaseRequest;

            localVarRequestOptions.Operation = "ModDataApi.ModDataViewDatabase";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_data_view_database", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModDataViewDatabase", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
