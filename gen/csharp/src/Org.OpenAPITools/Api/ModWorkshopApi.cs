/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModWorkshopApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new submission to a given workshop.
        /// </summary>
        /// <remarks>
        /// Add a new submission to a given workshop.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopAddSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopAddSubmission200Response</returns>
        ModWorkshopAddSubmission200Response ModWorkshopAddSubmission(ModWorkshopAddSubmissionRequest modWorkshopAddSubmissionRequest, int operationIndex = 0);

        /// <summary>
        /// Add a new submission to a given workshop.
        /// </summary>
        /// <remarks>
        /// Add a new submission to a given workshop.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopAddSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopAddSubmission200Response</returns>
        ApiResponse<ModWorkshopAddSubmission200Response> ModWorkshopAddSubmissionWithHttpInfo(ModWorkshopAddSubmissionRequest modWorkshopAddSubmissionRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes the given submission.
        /// </summary>
        /// <remarks>
        /// Deletes the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopDeleteSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopDeleteSubmission200Response</returns>
        ModWorkshopDeleteSubmission200Response ModWorkshopDeleteSubmission(ModWorkshopDeleteSubmissionRequest modWorkshopDeleteSubmissionRequest, int operationIndex = 0);

        /// <summary>
        /// Deletes the given submission.
        /// </summary>
        /// <remarks>
        /// Deletes the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopDeleteSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopDeleteSubmission200Response</returns>
        ApiResponse<ModWorkshopDeleteSubmission200Response> ModWorkshopDeleteSubmissionWithHttpInfo(ModWorkshopDeleteSubmissionRequest modWorkshopDeleteSubmissionRequest, int operationIndex = 0);
        /// <summary>
        /// Evaluates an assessment (used by teachers for provide feedback to the reviewer).
        /// </summary>
        /// <remarks>
        /// Evaluates an assessment (used by teachers for provide feedback to the reviewer).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopEvaluateAssessment200Response</returns>
        ModWorkshopEvaluateAssessment200Response ModWorkshopEvaluateAssessment(ModWorkshopEvaluateAssessmentRequest modWorkshopEvaluateAssessmentRequest, int operationIndex = 0);

        /// <summary>
        /// Evaluates an assessment (used by teachers for provide feedback to the reviewer).
        /// </summary>
        /// <remarks>
        /// Evaluates an assessment (used by teachers for provide feedback to the reviewer).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopEvaluateAssessment200Response</returns>
        ApiResponse<ModWorkshopEvaluateAssessment200Response> ModWorkshopEvaluateAssessmentWithHttpInfo(ModWorkshopEvaluateAssessmentRequest modWorkshopEvaluateAssessmentRequest, int operationIndex = 0);
        /// <summary>
        /// Evaluates a submission (used by teachers for provide feedback or override the submission grade).
        /// </summary>
        /// <remarks>
        /// Evaluates a submission (used by teachers for provide feedback or override the submission grade).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopEvaluateSubmission200Response</returns>
        ModWorkshopEvaluateSubmission200Response ModWorkshopEvaluateSubmission(ModWorkshopEvaluateSubmissionRequest modWorkshopEvaluateSubmissionRequest, int operationIndex = 0);

        /// <summary>
        /// Evaluates a submission (used by teachers for provide feedback or override the submission grade).
        /// </summary>
        /// <remarks>
        /// Evaluates a submission (used by teachers for provide feedback or override the submission grade).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopEvaluateSubmission200Response</returns>
        ApiResponse<ModWorkshopEvaluateSubmission200Response> ModWorkshopEvaluateSubmissionWithHttpInfo(ModWorkshopEvaluateSubmissionRequest modWorkshopEvaluateSubmissionRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves the given assessment.
        /// </summary>
        /// <remarks>
        /// Retrieves the given assessment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetAssessment200Response</returns>
        ModWorkshopGetAssessment200Response ModWorkshopGetAssessment(ModWorkshopGetAssessmentRequest modWorkshopGetAssessmentRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves the given assessment.
        /// </summary>
        /// <remarks>
        /// Retrieves the given assessment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetAssessment200Response</returns>
        ApiResponse<ModWorkshopGetAssessment200Response> ModWorkshopGetAssessmentWithHttpInfo(ModWorkshopGetAssessmentRequest modWorkshopGetAssessmentRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves the assessment form definition.
        /// </summary>
        /// <remarks>
        /// Retrieves the assessment form definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentFormDefinitionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetAssessmentFormDefinition200Response</returns>
        ModWorkshopGetAssessmentFormDefinition200Response ModWorkshopGetAssessmentFormDefinition(ModWorkshopGetAssessmentFormDefinitionRequest modWorkshopGetAssessmentFormDefinitionRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves the assessment form definition.
        /// </summary>
        /// <remarks>
        /// Retrieves the assessment form definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentFormDefinitionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetAssessmentFormDefinition200Response</returns>
        ApiResponse<ModWorkshopGetAssessmentFormDefinition200Response> ModWorkshopGetAssessmentFormDefinitionWithHttpInfo(ModWorkshopGetAssessmentFormDefinitionRequest modWorkshopGetAssessmentFormDefinitionRequest, int operationIndex = 0);
        /// <summary>
        /// Returns the assessment and submission grade for the given user.
        /// </summary>
        /// <remarks>
        /// Returns the assessment and submission grade for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetGrades200Response</returns>
        ModWorkshopGetGrades200Response ModWorkshopGetGrades(ModWorkshopGetGradesRequest modWorkshopGetGradesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns the assessment and submission grade for the given user.
        /// </summary>
        /// <remarks>
        /// Returns the assessment and submission grade for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetGrades200Response</returns>
        ApiResponse<ModWorkshopGetGrades200Response> ModWorkshopGetGradesWithHttpInfo(ModWorkshopGetGradesRequest modWorkshopGetGradesRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves the assessment grades report.
        /// </summary>
        /// <remarks>
        /// Retrieves the assessment grades report.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetGradesReport200Response</returns>
        ModWorkshopGetGradesReport200Response ModWorkshopGetGradesReport(ModWorkshopGetGradesReportRequest modWorkshopGetGradesReportRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves the assessment grades report.
        /// </summary>
        /// <remarks>
        /// Retrieves the assessment grades report.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetGradesReport200Response</returns>
        ApiResponse<ModWorkshopGetGradesReport200Response> ModWorkshopGetGradesReportWithHttpInfo(ModWorkshopGetGradesReportRequest modWorkshopGetGradesReportRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves all the assessments reviewed by the given user.
        /// </summary>
        /// <remarks>
        /// Retrieves all the assessments reviewed by the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetReviewerAssessmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetReviewerAssessments200Response</returns>
        ModWorkshopGetReviewerAssessments200Response ModWorkshopGetReviewerAssessments(ModWorkshopGetReviewerAssessmentsRequest modWorkshopGetReviewerAssessmentsRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves all the assessments reviewed by the given user.
        /// </summary>
        /// <remarks>
        /// Retrieves all the assessments reviewed by the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetReviewerAssessmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetReviewerAssessments200Response</returns>
        ApiResponse<ModWorkshopGetReviewerAssessments200Response> ModWorkshopGetReviewerAssessmentsWithHttpInfo(ModWorkshopGetReviewerAssessmentsRequest modWorkshopGetReviewerAssessmentsRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves the given submission.
        /// </summary>
        /// <remarks>
        /// Retrieves the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetSubmission200Response</returns>
        ModWorkshopGetSubmission200Response ModWorkshopGetSubmission(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves the given submission.
        /// </summary>
        /// <remarks>
        /// Retrieves the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetSubmission200Response</returns>
        ApiResponse<ModWorkshopGetSubmission200Response> ModWorkshopGetSubmissionWithHttpInfo(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves all the assessments of the given submission.
        /// </summary>
        /// <remarks>
        /// Retrieves all the assessments of the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetReviewerAssessments200Response</returns>
        ModWorkshopGetReviewerAssessments200Response ModWorkshopGetSubmissionAssessments(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves all the assessments of the given submission.
        /// </summary>
        /// <remarks>
        /// Retrieves all the assessments of the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetReviewerAssessments200Response</returns>
        ApiResponse<ModWorkshopGetReviewerAssessments200Response> ModWorkshopGetSubmissionAssessmentsWithHttpInfo(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves all the workshop submissions or the one done by the given user (except example submissions).
        /// </summary>
        /// <remarks>
        /// Retrieves all the workshop submissions or the one done by the given user (except example submissions).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetSubmissions200Response</returns>
        ModWorkshopGetSubmissions200Response ModWorkshopGetSubmissions(ModWorkshopGetSubmissionsRequest modWorkshopGetSubmissionsRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves all the workshop submissions or the one done by the given user (except example submissions).
        /// </summary>
        /// <remarks>
        /// Retrieves all the workshop submissions or the one done by the given user (except example submissions).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetSubmissions200Response</returns>
        ApiResponse<ModWorkshopGetSubmissions200Response> ModWorkshopGetSubmissionsWithHttpInfo(ModWorkshopGetSubmissionsRequest modWorkshopGetSubmissionsRequest, int operationIndex = 0);
        /// <summary>
        /// Return the planner information for the given user.
        /// </summary>
        /// <remarks>
        /// Return the planner information for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetUserPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetUserPlan200Response</returns>
        ModWorkshopGetUserPlan200Response ModWorkshopGetUserPlan(ModWorkshopGetUserPlanRequest modWorkshopGetUserPlanRequest, int operationIndex = 0);

        /// <summary>
        /// Return the planner information for the given user.
        /// </summary>
        /// <remarks>
        /// Return the planner information for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetUserPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetUserPlan200Response</returns>
        ApiResponse<ModWorkshopGetUserPlan200Response> ModWorkshopGetUserPlanWithHttpInfo(ModWorkshopGetUserPlanRequest modWorkshopGetUserPlanRequest, int operationIndex = 0);
        /// <summary>
        /// Return access information for a given workshop.
        /// </summary>
        /// <remarks>
        /// Return access information for a given workshop.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetWorkshopAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetWorkshopAccessInformation200Response</returns>
        ModWorkshopGetWorkshopAccessInformation200Response ModWorkshopGetWorkshopAccessInformation(ModWorkshopGetWorkshopAccessInformationRequest modWorkshopGetWorkshopAccessInformationRequest, int operationIndex = 0);

        /// <summary>
        /// Return access information for a given workshop.
        /// </summary>
        /// <remarks>
        /// Return access information for a given workshop.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetWorkshopAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetWorkshopAccessInformation200Response</returns>
        ApiResponse<ModWorkshopGetWorkshopAccessInformation200Response> ModWorkshopGetWorkshopAccessInformationWithHttpInfo(ModWorkshopGetWorkshopAccessInformationRequest modWorkshopGetWorkshopAccessInformationRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetWorkshopsByCourses200Response</returns>
        ModWorkshopGetWorkshopsByCourses200Response ModWorkshopGetWorkshopsByCourses(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetWorkshopsByCourses200Response</returns>
        ApiResponse<ModWorkshopGetWorkshopsByCourses200Response> ModWorkshopGetWorkshopsByCoursesWithHttpInfo(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Add information to an allocated assessment.
        /// </summary>
        /// <remarks>
        /// Add information to an allocated assessment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopUpdateAssessment200Response</returns>
        ModWorkshopUpdateAssessment200Response ModWorkshopUpdateAssessment(ModWorkshopUpdateAssessmentRequest modWorkshopUpdateAssessmentRequest, int operationIndex = 0);

        /// <summary>
        /// Add information to an allocated assessment.
        /// </summary>
        /// <remarks>
        /// Add information to an allocated assessment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopUpdateAssessment200Response</returns>
        ApiResponse<ModWorkshopUpdateAssessment200Response> ModWorkshopUpdateAssessmentWithHttpInfo(ModWorkshopUpdateAssessmentRequest modWorkshopUpdateAssessmentRequest, int operationIndex = 0);
        /// <summary>
        /// Update the given submission.
        /// </summary>
        /// <remarks>
        /// Update the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopUpdateSubmission200Response</returns>
        ModWorkshopUpdateSubmission200Response ModWorkshopUpdateSubmission(ModWorkshopUpdateSubmissionRequest modWorkshopUpdateSubmissionRequest, int operationIndex = 0);

        /// <summary>
        /// Update the given submission.
        /// </summary>
        /// <remarks>
        /// Update the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopUpdateSubmission200Response</returns>
        ApiResponse<ModWorkshopUpdateSubmission200Response> ModWorkshopUpdateSubmissionWithHttpInfo(ModWorkshopUpdateSubmissionRequest modWorkshopUpdateSubmissionRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the submission viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the submission viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModWorkshopViewSubmission(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the submission viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the submission viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModWorkshopViewSubmissionWithHttpInfo(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopViewWorkshopRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModWorkshopViewWorkshop(ModWorkshopViewWorkshopRequest modWorkshopViewWorkshopRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopViewWorkshopRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModWorkshopViewWorkshopWithHttpInfo(ModWorkshopViewWorkshopRequest modWorkshopViewWorkshopRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModWorkshopApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a new submission to a given workshop.
        /// </summary>
        /// <remarks>
        /// Add a new submission to a given workshop.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopAddSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopAddSubmission200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopAddSubmission200Response> ModWorkshopAddSubmissionAsync(ModWorkshopAddSubmissionRequest modWorkshopAddSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new submission to a given workshop.
        /// </summary>
        /// <remarks>
        /// Add a new submission to a given workshop.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopAddSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopAddSubmission200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopAddSubmission200Response>> ModWorkshopAddSubmissionWithHttpInfoAsync(ModWorkshopAddSubmissionRequest modWorkshopAddSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes the given submission.
        /// </summary>
        /// <remarks>
        /// Deletes the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopDeleteSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopDeleteSubmission200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopDeleteSubmission200Response> ModWorkshopDeleteSubmissionAsync(ModWorkshopDeleteSubmissionRequest modWorkshopDeleteSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes the given submission.
        /// </summary>
        /// <remarks>
        /// Deletes the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopDeleteSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopDeleteSubmission200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopDeleteSubmission200Response>> ModWorkshopDeleteSubmissionWithHttpInfoAsync(ModWorkshopDeleteSubmissionRequest modWorkshopDeleteSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Evaluates an assessment (used by teachers for provide feedback to the reviewer).
        /// </summary>
        /// <remarks>
        /// Evaluates an assessment (used by teachers for provide feedback to the reviewer).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopEvaluateAssessment200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopEvaluateAssessment200Response> ModWorkshopEvaluateAssessmentAsync(ModWorkshopEvaluateAssessmentRequest modWorkshopEvaluateAssessmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Evaluates an assessment (used by teachers for provide feedback to the reviewer).
        /// </summary>
        /// <remarks>
        /// Evaluates an assessment (used by teachers for provide feedback to the reviewer).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopEvaluateAssessment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopEvaluateAssessment200Response>> ModWorkshopEvaluateAssessmentWithHttpInfoAsync(ModWorkshopEvaluateAssessmentRequest modWorkshopEvaluateAssessmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Evaluates a submission (used by teachers for provide feedback or override the submission grade).
        /// </summary>
        /// <remarks>
        /// Evaluates a submission (used by teachers for provide feedback or override the submission grade).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopEvaluateSubmission200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopEvaluateSubmission200Response> ModWorkshopEvaluateSubmissionAsync(ModWorkshopEvaluateSubmissionRequest modWorkshopEvaluateSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Evaluates a submission (used by teachers for provide feedback or override the submission grade).
        /// </summary>
        /// <remarks>
        /// Evaluates a submission (used by teachers for provide feedback or override the submission grade).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopEvaluateSubmission200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopEvaluateSubmission200Response>> ModWorkshopEvaluateSubmissionWithHttpInfoAsync(ModWorkshopEvaluateSubmissionRequest modWorkshopEvaluateSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the given assessment.
        /// </summary>
        /// <remarks>
        /// Retrieves the given assessment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetAssessment200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopGetAssessment200Response> ModWorkshopGetAssessmentAsync(ModWorkshopGetAssessmentRequest modWorkshopGetAssessmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the given assessment.
        /// </summary>
        /// <remarks>
        /// Retrieves the given assessment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetAssessment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopGetAssessment200Response>> ModWorkshopGetAssessmentWithHttpInfoAsync(ModWorkshopGetAssessmentRequest modWorkshopGetAssessmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the assessment form definition.
        /// </summary>
        /// <remarks>
        /// Retrieves the assessment form definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentFormDefinitionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetAssessmentFormDefinition200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopGetAssessmentFormDefinition200Response> ModWorkshopGetAssessmentFormDefinitionAsync(ModWorkshopGetAssessmentFormDefinitionRequest modWorkshopGetAssessmentFormDefinitionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the assessment form definition.
        /// </summary>
        /// <remarks>
        /// Retrieves the assessment form definition.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentFormDefinitionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetAssessmentFormDefinition200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopGetAssessmentFormDefinition200Response>> ModWorkshopGetAssessmentFormDefinitionWithHttpInfoAsync(ModWorkshopGetAssessmentFormDefinitionRequest modWorkshopGetAssessmentFormDefinitionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the assessment and submission grade for the given user.
        /// </summary>
        /// <remarks>
        /// Returns the assessment and submission grade for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetGrades200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopGetGrades200Response> ModWorkshopGetGradesAsync(ModWorkshopGetGradesRequest modWorkshopGetGradesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the assessment and submission grade for the given user.
        /// </summary>
        /// <remarks>
        /// Returns the assessment and submission grade for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetGrades200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopGetGrades200Response>> ModWorkshopGetGradesWithHttpInfoAsync(ModWorkshopGetGradesRequest modWorkshopGetGradesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the assessment grades report.
        /// </summary>
        /// <remarks>
        /// Retrieves the assessment grades report.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetGradesReport200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopGetGradesReport200Response> ModWorkshopGetGradesReportAsync(ModWorkshopGetGradesReportRequest modWorkshopGetGradesReportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the assessment grades report.
        /// </summary>
        /// <remarks>
        /// Retrieves the assessment grades report.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetGradesReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopGetGradesReport200Response>> ModWorkshopGetGradesReportWithHttpInfoAsync(ModWorkshopGetGradesReportRequest modWorkshopGetGradesReportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves all the assessments reviewed by the given user.
        /// </summary>
        /// <remarks>
        /// Retrieves all the assessments reviewed by the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetReviewerAssessmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetReviewerAssessments200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopGetReviewerAssessments200Response> ModWorkshopGetReviewerAssessmentsAsync(ModWorkshopGetReviewerAssessmentsRequest modWorkshopGetReviewerAssessmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all the assessments reviewed by the given user.
        /// </summary>
        /// <remarks>
        /// Retrieves all the assessments reviewed by the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetReviewerAssessmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetReviewerAssessments200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopGetReviewerAssessments200Response>> ModWorkshopGetReviewerAssessmentsWithHttpInfoAsync(ModWorkshopGetReviewerAssessmentsRequest modWorkshopGetReviewerAssessmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the given submission.
        /// </summary>
        /// <remarks>
        /// Retrieves the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetSubmission200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopGetSubmission200Response> ModWorkshopGetSubmissionAsync(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the given submission.
        /// </summary>
        /// <remarks>
        /// Retrieves the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetSubmission200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopGetSubmission200Response>> ModWorkshopGetSubmissionWithHttpInfoAsync(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves all the assessments of the given submission.
        /// </summary>
        /// <remarks>
        /// Retrieves all the assessments of the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetReviewerAssessments200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopGetReviewerAssessments200Response> ModWorkshopGetSubmissionAssessmentsAsync(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all the assessments of the given submission.
        /// </summary>
        /// <remarks>
        /// Retrieves all the assessments of the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetReviewerAssessments200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopGetReviewerAssessments200Response>> ModWorkshopGetSubmissionAssessmentsWithHttpInfoAsync(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves all the workshop submissions or the one done by the given user (except example submissions).
        /// </summary>
        /// <remarks>
        /// Retrieves all the workshop submissions or the one done by the given user (except example submissions).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetSubmissions200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopGetSubmissions200Response> ModWorkshopGetSubmissionsAsync(ModWorkshopGetSubmissionsRequest modWorkshopGetSubmissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all the workshop submissions or the one done by the given user (except example submissions).
        /// </summary>
        /// <remarks>
        /// Retrieves all the workshop submissions or the one done by the given user (except example submissions).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetSubmissions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopGetSubmissions200Response>> ModWorkshopGetSubmissionsWithHttpInfoAsync(ModWorkshopGetSubmissionsRequest modWorkshopGetSubmissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the planner information for the given user.
        /// </summary>
        /// <remarks>
        /// Return the planner information for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetUserPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetUserPlan200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopGetUserPlan200Response> ModWorkshopGetUserPlanAsync(ModWorkshopGetUserPlanRequest modWorkshopGetUserPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the planner information for the given user.
        /// </summary>
        /// <remarks>
        /// Return the planner information for the given user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetUserPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetUserPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopGetUserPlan200Response>> ModWorkshopGetUserPlanWithHttpInfoAsync(ModWorkshopGetUserPlanRequest modWorkshopGetUserPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return access information for a given workshop.
        /// </summary>
        /// <remarks>
        /// Return access information for a given workshop.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetWorkshopAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetWorkshopAccessInformation200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopGetWorkshopAccessInformation200Response> ModWorkshopGetWorkshopAccessInformationAsync(ModWorkshopGetWorkshopAccessInformationRequest modWorkshopGetWorkshopAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return access information for a given workshop.
        /// </summary>
        /// <remarks>
        /// Return access information for a given workshop.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetWorkshopAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetWorkshopAccessInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopGetWorkshopAccessInformation200Response>> ModWorkshopGetWorkshopAccessInformationWithHttpInfoAsync(ModWorkshopGetWorkshopAccessInformationRequest modWorkshopGetWorkshopAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetWorkshopsByCourses200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopGetWorkshopsByCourses200Response> ModWorkshopGetWorkshopsByCoursesAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetWorkshopsByCourses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopGetWorkshopsByCourses200Response>> ModWorkshopGetWorkshopsByCoursesWithHttpInfoAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add information to an allocated assessment.
        /// </summary>
        /// <remarks>
        /// Add information to an allocated assessment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopUpdateAssessment200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopUpdateAssessment200Response> ModWorkshopUpdateAssessmentAsync(ModWorkshopUpdateAssessmentRequest modWorkshopUpdateAssessmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add information to an allocated assessment.
        /// </summary>
        /// <remarks>
        /// Add information to an allocated assessment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopUpdateAssessment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopUpdateAssessment200Response>> ModWorkshopUpdateAssessmentWithHttpInfoAsync(ModWorkshopUpdateAssessmentRequest modWorkshopUpdateAssessmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the given submission.
        /// </summary>
        /// <remarks>
        /// Update the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopUpdateSubmission200Response</returns>
        System.Threading.Tasks.Task<ModWorkshopUpdateSubmission200Response> ModWorkshopUpdateSubmissionAsync(ModWorkshopUpdateSubmissionRequest modWorkshopUpdateSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the given submission.
        /// </summary>
        /// <remarks>
        /// Update the given submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopUpdateSubmission200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWorkshopUpdateSubmission200Response>> ModWorkshopUpdateSubmissionWithHttpInfoAsync(ModWorkshopUpdateSubmissionRequest modWorkshopUpdateSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the submission viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the submission viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModWorkshopViewSubmissionAsync(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the submission viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the submission viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModWorkshopViewSubmissionWithHttpInfoAsync(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopViewWorkshopRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModWorkshopViewWorkshopAsync(ModWorkshopViewWorkshopRequest modWorkshopViewWorkshopRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopViewWorkshopRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModWorkshopViewWorkshopWithHttpInfoAsync(ModWorkshopViewWorkshopRequest modWorkshopViewWorkshopRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModWorkshopApi : IModWorkshopApiSync, IModWorkshopApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModWorkshopApi : IModWorkshopApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModWorkshopApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModWorkshopApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModWorkshopApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModWorkshopApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModWorkshopApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModWorkshopApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModWorkshopApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModWorkshopApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a new submission to a given workshop. Add a new submission to a given workshop.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopAddSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopAddSubmission200Response</returns>
        public ModWorkshopAddSubmission200Response ModWorkshopAddSubmission(ModWorkshopAddSubmissionRequest modWorkshopAddSubmissionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopAddSubmission200Response> localVarResponse = ModWorkshopAddSubmissionWithHttpInfo(modWorkshopAddSubmissionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new submission to a given workshop. Add a new submission to a given workshop.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopAddSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopAddSubmission200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopAddSubmission200Response> ModWorkshopAddSubmissionWithHttpInfo(ModWorkshopAddSubmissionRequest modWorkshopAddSubmissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopAddSubmissionRequest' is set
            if (modWorkshopAddSubmissionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopAddSubmissionRequest' when calling ModWorkshopApi->ModWorkshopAddSubmission");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopAddSubmissionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopAddSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopAddSubmission200Response>("/mod_workshop_add_submission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopAddSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new submission to a given workshop. Add a new submission to a given workshop.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopAddSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopAddSubmission200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopAddSubmission200Response> ModWorkshopAddSubmissionAsync(ModWorkshopAddSubmissionRequest modWorkshopAddSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopAddSubmission200Response> localVarResponse = await ModWorkshopAddSubmissionWithHttpInfoAsync(modWorkshopAddSubmissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new submission to a given workshop. Add a new submission to a given workshop.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopAddSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopAddSubmission200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopAddSubmission200Response>> ModWorkshopAddSubmissionWithHttpInfoAsync(ModWorkshopAddSubmissionRequest modWorkshopAddSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopAddSubmissionRequest' is set
            if (modWorkshopAddSubmissionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopAddSubmissionRequest' when calling ModWorkshopApi->ModWorkshopAddSubmission");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopAddSubmissionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopAddSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopAddSubmission200Response>("/mod_workshop_add_submission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopAddSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes the given submission. Deletes the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopDeleteSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopDeleteSubmission200Response</returns>
        public ModWorkshopDeleteSubmission200Response ModWorkshopDeleteSubmission(ModWorkshopDeleteSubmissionRequest modWorkshopDeleteSubmissionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopDeleteSubmission200Response> localVarResponse = ModWorkshopDeleteSubmissionWithHttpInfo(modWorkshopDeleteSubmissionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the given submission. Deletes the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopDeleteSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopDeleteSubmission200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopDeleteSubmission200Response> ModWorkshopDeleteSubmissionWithHttpInfo(ModWorkshopDeleteSubmissionRequest modWorkshopDeleteSubmissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopDeleteSubmissionRequest' is set
            if (modWorkshopDeleteSubmissionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopDeleteSubmissionRequest' when calling ModWorkshopApi->ModWorkshopDeleteSubmission");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopDeleteSubmissionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopDeleteSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopDeleteSubmission200Response>("/mod_workshop_delete_submission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopDeleteSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes the given submission. Deletes the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopDeleteSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopDeleteSubmission200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopDeleteSubmission200Response> ModWorkshopDeleteSubmissionAsync(ModWorkshopDeleteSubmissionRequest modWorkshopDeleteSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopDeleteSubmission200Response> localVarResponse = await ModWorkshopDeleteSubmissionWithHttpInfoAsync(modWorkshopDeleteSubmissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the given submission. Deletes the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopDeleteSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopDeleteSubmission200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopDeleteSubmission200Response>> ModWorkshopDeleteSubmissionWithHttpInfoAsync(ModWorkshopDeleteSubmissionRequest modWorkshopDeleteSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopDeleteSubmissionRequest' is set
            if (modWorkshopDeleteSubmissionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopDeleteSubmissionRequest' when calling ModWorkshopApi->ModWorkshopDeleteSubmission");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopDeleteSubmissionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopDeleteSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopDeleteSubmission200Response>("/mod_workshop_delete_submission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopDeleteSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Evaluates an assessment (used by teachers for provide feedback to the reviewer). Evaluates an assessment (used by teachers for provide feedback to the reviewer).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopEvaluateAssessment200Response</returns>
        public ModWorkshopEvaluateAssessment200Response ModWorkshopEvaluateAssessment(ModWorkshopEvaluateAssessmentRequest modWorkshopEvaluateAssessmentRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopEvaluateAssessment200Response> localVarResponse = ModWorkshopEvaluateAssessmentWithHttpInfo(modWorkshopEvaluateAssessmentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluates an assessment (used by teachers for provide feedback to the reviewer). Evaluates an assessment (used by teachers for provide feedback to the reviewer).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopEvaluateAssessment200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopEvaluateAssessment200Response> ModWorkshopEvaluateAssessmentWithHttpInfo(ModWorkshopEvaluateAssessmentRequest modWorkshopEvaluateAssessmentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopEvaluateAssessmentRequest' is set
            if (modWorkshopEvaluateAssessmentRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopEvaluateAssessmentRequest' when calling ModWorkshopApi->ModWorkshopEvaluateAssessment");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopEvaluateAssessmentRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopEvaluateAssessment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopEvaluateAssessment200Response>("/mod_workshop_evaluate_assessment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopEvaluateAssessment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Evaluates an assessment (used by teachers for provide feedback to the reviewer). Evaluates an assessment (used by teachers for provide feedback to the reviewer).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopEvaluateAssessment200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopEvaluateAssessment200Response> ModWorkshopEvaluateAssessmentAsync(ModWorkshopEvaluateAssessmentRequest modWorkshopEvaluateAssessmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopEvaluateAssessment200Response> localVarResponse = await ModWorkshopEvaluateAssessmentWithHttpInfoAsync(modWorkshopEvaluateAssessmentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluates an assessment (used by teachers for provide feedback to the reviewer). Evaluates an assessment (used by teachers for provide feedback to the reviewer).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopEvaluateAssessment200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopEvaluateAssessment200Response>> ModWorkshopEvaluateAssessmentWithHttpInfoAsync(ModWorkshopEvaluateAssessmentRequest modWorkshopEvaluateAssessmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopEvaluateAssessmentRequest' is set
            if (modWorkshopEvaluateAssessmentRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopEvaluateAssessmentRequest' when calling ModWorkshopApi->ModWorkshopEvaluateAssessment");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopEvaluateAssessmentRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopEvaluateAssessment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopEvaluateAssessment200Response>("/mod_workshop_evaluate_assessment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopEvaluateAssessment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Evaluates a submission (used by teachers for provide feedback or override the submission grade). Evaluates a submission (used by teachers for provide feedback or override the submission grade).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopEvaluateSubmission200Response</returns>
        public ModWorkshopEvaluateSubmission200Response ModWorkshopEvaluateSubmission(ModWorkshopEvaluateSubmissionRequest modWorkshopEvaluateSubmissionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopEvaluateSubmission200Response> localVarResponse = ModWorkshopEvaluateSubmissionWithHttpInfo(modWorkshopEvaluateSubmissionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluates a submission (used by teachers for provide feedback or override the submission grade). Evaluates a submission (used by teachers for provide feedback or override the submission grade).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopEvaluateSubmission200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopEvaluateSubmission200Response> ModWorkshopEvaluateSubmissionWithHttpInfo(ModWorkshopEvaluateSubmissionRequest modWorkshopEvaluateSubmissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopEvaluateSubmissionRequest' is set
            if (modWorkshopEvaluateSubmissionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopEvaluateSubmissionRequest' when calling ModWorkshopApi->ModWorkshopEvaluateSubmission");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopEvaluateSubmissionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopEvaluateSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopEvaluateSubmission200Response>("/mod_workshop_evaluate_submission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopEvaluateSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Evaluates a submission (used by teachers for provide feedback or override the submission grade). Evaluates a submission (used by teachers for provide feedback or override the submission grade).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopEvaluateSubmission200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopEvaluateSubmission200Response> ModWorkshopEvaluateSubmissionAsync(ModWorkshopEvaluateSubmissionRequest modWorkshopEvaluateSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopEvaluateSubmission200Response> localVarResponse = await ModWorkshopEvaluateSubmissionWithHttpInfoAsync(modWorkshopEvaluateSubmissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Evaluates a submission (used by teachers for provide feedback or override the submission grade). Evaluates a submission (used by teachers for provide feedback or override the submission grade).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopEvaluateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopEvaluateSubmission200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopEvaluateSubmission200Response>> ModWorkshopEvaluateSubmissionWithHttpInfoAsync(ModWorkshopEvaluateSubmissionRequest modWorkshopEvaluateSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopEvaluateSubmissionRequest' is set
            if (modWorkshopEvaluateSubmissionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopEvaluateSubmissionRequest' when calling ModWorkshopApi->ModWorkshopEvaluateSubmission");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopEvaluateSubmissionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopEvaluateSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopEvaluateSubmission200Response>("/mod_workshop_evaluate_submission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopEvaluateSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the given assessment. Retrieves the given assessment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetAssessment200Response</returns>
        public ModWorkshopGetAssessment200Response ModWorkshopGetAssessment(ModWorkshopGetAssessmentRequest modWorkshopGetAssessmentRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetAssessment200Response> localVarResponse = ModWorkshopGetAssessmentWithHttpInfo(modWorkshopGetAssessmentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the given assessment. Retrieves the given assessment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetAssessment200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetAssessment200Response> ModWorkshopGetAssessmentWithHttpInfo(ModWorkshopGetAssessmentRequest modWorkshopGetAssessmentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopGetAssessmentRequest' is set
            if (modWorkshopGetAssessmentRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetAssessmentRequest' when calling ModWorkshopApi->ModWorkshopGetAssessment");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetAssessmentRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetAssessment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopGetAssessment200Response>("/mod_workshop_get_assessment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetAssessment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the given assessment. Retrieves the given assessment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetAssessment200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopGetAssessment200Response> ModWorkshopGetAssessmentAsync(ModWorkshopGetAssessmentRequest modWorkshopGetAssessmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetAssessment200Response> localVarResponse = await ModWorkshopGetAssessmentWithHttpInfoAsync(modWorkshopGetAssessmentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the given assessment. Retrieves the given assessment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetAssessment200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetAssessment200Response>> ModWorkshopGetAssessmentWithHttpInfoAsync(ModWorkshopGetAssessmentRequest modWorkshopGetAssessmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopGetAssessmentRequest' is set
            if (modWorkshopGetAssessmentRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetAssessmentRequest' when calling ModWorkshopApi->ModWorkshopGetAssessment");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetAssessmentRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetAssessment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopGetAssessment200Response>("/mod_workshop_get_assessment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetAssessment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the assessment form definition. Retrieves the assessment form definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentFormDefinitionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetAssessmentFormDefinition200Response</returns>
        public ModWorkshopGetAssessmentFormDefinition200Response ModWorkshopGetAssessmentFormDefinition(ModWorkshopGetAssessmentFormDefinitionRequest modWorkshopGetAssessmentFormDefinitionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetAssessmentFormDefinition200Response> localVarResponse = ModWorkshopGetAssessmentFormDefinitionWithHttpInfo(modWorkshopGetAssessmentFormDefinitionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the assessment form definition. Retrieves the assessment form definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentFormDefinitionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetAssessmentFormDefinition200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetAssessmentFormDefinition200Response> ModWorkshopGetAssessmentFormDefinitionWithHttpInfo(ModWorkshopGetAssessmentFormDefinitionRequest modWorkshopGetAssessmentFormDefinitionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopGetAssessmentFormDefinitionRequest' is set
            if (modWorkshopGetAssessmentFormDefinitionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetAssessmentFormDefinitionRequest' when calling ModWorkshopApi->ModWorkshopGetAssessmentFormDefinition");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetAssessmentFormDefinitionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetAssessmentFormDefinition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopGetAssessmentFormDefinition200Response>("/mod_workshop_get_assessment_form_definition", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetAssessmentFormDefinition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the assessment form definition. Retrieves the assessment form definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentFormDefinitionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetAssessmentFormDefinition200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopGetAssessmentFormDefinition200Response> ModWorkshopGetAssessmentFormDefinitionAsync(ModWorkshopGetAssessmentFormDefinitionRequest modWorkshopGetAssessmentFormDefinitionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetAssessmentFormDefinition200Response> localVarResponse = await ModWorkshopGetAssessmentFormDefinitionWithHttpInfoAsync(modWorkshopGetAssessmentFormDefinitionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the assessment form definition. Retrieves the assessment form definition.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetAssessmentFormDefinitionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetAssessmentFormDefinition200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetAssessmentFormDefinition200Response>> ModWorkshopGetAssessmentFormDefinitionWithHttpInfoAsync(ModWorkshopGetAssessmentFormDefinitionRequest modWorkshopGetAssessmentFormDefinitionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopGetAssessmentFormDefinitionRequest' is set
            if (modWorkshopGetAssessmentFormDefinitionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetAssessmentFormDefinitionRequest' when calling ModWorkshopApi->ModWorkshopGetAssessmentFormDefinition");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetAssessmentFormDefinitionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetAssessmentFormDefinition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopGetAssessmentFormDefinition200Response>("/mod_workshop_get_assessment_form_definition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetAssessmentFormDefinition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the assessment and submission grade for the given user. Returns the assessment and submission grade for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetGrades200Response</returns>
        public ModWorkshopGetGrades200Response ModWorkshopGetGrades(ModWorkshopGetGradesRequest modWorkshopGetGradesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetGrades200Response> localVarResponse = ModWorkshopGetGradesWithHttpInfo(modWorkshopGetGradesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the assessment and submission grade for the given user. Returns the assessment and submission grade for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetGrades200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetGrades200Response> ModWorkshopGetGradesWithHttpInfo(ModWorkshopGetGradesRequest modWorkshopGetGradesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopGetGradesRequest' is set
            if (modWorkshopGetGradesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetGradesRequest' when calling ModWorkshopApi->ModWorkshopGetGrades");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetGradesRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetGrades";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopGetGrades200Response>("/mod_workshop_get_grades", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetGrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the assessment and submission grade for the given user. Returns the assessment and submission grade for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetGrades200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopGetGrades200Response> ModWorkshopGetGradesAsync(ModWorkshopGetGradesRequest modWorkshopGetGradesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetGrades200Response> localVarResponse = await ModWorkshopGetGradesWithHttpInfoAsync(modWorkshopGetGradesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the assessment and submission grade for the given user. Returns the assessment and submission grade for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetGrades200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetGrades200Response>> ModWorkshopGetGradesWithHttpInfoAsync(ModWorkshopGetGradesRequest modWorkshopGetGradesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopGetGradesRequest' is set
            if (modWorkshopGetGradesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetGradesRequest' when calling ModWorkshopApi->ModWorkshopGetGrades");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetGradesRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetGrades";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopGetGrades200Response>("/mod_workshop_get_grades", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetGrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the assessment grades report. Retrieves the assessment grades report.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetGradesReport200Response</returns>
        public ModWorkshopGetGradesReport200Response ModWorkshopGetGradesReport(ModWorkshopGetGradesReportRequest modWorkshopGetGradesReportRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetGradesReport200Response> localVarResponse = ModWorkshopGetGradesReportWithHttpInfo(modWorkshopGetGradesReportRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the assessment grades report. Retrieves the assessment grades report.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetGradesReport200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetGradesReport200Response> ModWorkshopGetGradesReportWithHttpInfo(ModWorkshopGetGradesReportRequest modWorkshopGetGradesReportRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopGetGradesReportRequest' is set
            if (modWorkshopGetGradesReportRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetGradesReportRequest' when calling ModWorkshopApi->ModWorkshopGetGradesReport");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetGradesReportRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetGradesReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopGetGradesReport200Response>("/mod_workshop_get_grades_report", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetGradesReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the assessment grades report. Retrieves the assessment grades report.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetGradesReport200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopGetGradesReport200Response> ModWorkshopGetGradesReportAsync(ModWorkshopGetGradesReportRequest modWorkshopGetGradesReportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetGradesReport200Response> localVarResponse = await ModWorkshopGetGradesReportWithHttpInfoAsync(modWorkshopGetGradesReportRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the assessment grades report. Retrieves the assessment grades report.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetGradesReportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetGradesReport200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetGradesReport200Response>> ModWorkshopGetGradesReportWithHttpInfoAsync(ModWorkshopGetGradesReportRequest modWorkshopGetGradesReportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopGetGradesReportRequest' is set
            if (modWorkshopGetGradesReportRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetGradesReportRequest' when calling ModWorkshopApi->ModWorkshopGetGradesReport");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetGradesReportRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetGradesReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopGetGradesReport200Response>("/mod_workshop_get_grades_report", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetGradesReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all the assessments reviewed by the given user. Retrieves all the assessments reviewed by the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetReviewerAssessmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetReviewerAssessments200Response</returns>
        public ModWorkshopGetReviewerAssessments200Response ModWorkshopGetReviewerAssessments(ModWorkshopGetReviewerAssessmentsRequest modWorkshopGetReviewerAssessmentsRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetReviewerAssessments200Response> localVarResponse = ModWorkshopGetReviewerAssessmentsWithHttpInfo(modWorkshopGetReviewerAssessmentsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all the assessments reviewed by the given user. Retrieves all the assessments reviewed by the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetReviewerAssessmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetReviewerAssessments200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetReviewerAssessments200Response> ModWorkshopGetReviewerAssessmentsWithHttpInfo(ModWorkshopGetReviewerAssessmentsRequest modWorkshopGetReviewerAssessmentsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopGetReviewerAssessmentsRequest' is set
            if (modWorkshopGetReviewerAssessmentsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetReviewerAssessmentsRequest' when calling ModWorkshopApi->ModWorkshopGetReviewerAssessments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetReviewerAssessmentsRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetReviewerAssessments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopGetReviewerAssessments200Response>("/mod_workshop_get_reviewer_assessments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetReviewerAssessments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all the assessments reviewed by the given user. Retrieves all the assessments reviewed by the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetReviewerAssessmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetReviewerAssessments200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopGetReviewerAssessments200Response> ModWorkshopGetReviewerAssessmentsAsync(ModWorkshopGetReviewerAssessmentsRequest modWorkshopGetReviewerAssessmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetReviewerAssessments200Response> localVarResponse = await ModWorkshopGetReviewerAssessmentsWithHttpInfoAsync(modWorkshopGetReviewerAssessmentsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all the assessments reviewed by the given user. Retrieves all the assessments reviewed by the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetReviewerAssessmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetReviewerAssessments200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetReviewerAssessments200Response>> ModWorkshopGetReviewerAssessmentsWithHttpInfoAsync(ModWorkshopGetReviewerAssessmentsRequest modWorkshopGetReviewerAssessmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopGetReviewerAssessmentsRequest' is set
            if (modWorkshopGetReviewerAssessmentsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetReviewerAssessmentsRequest' when calling ModWorkshopApi->ModWorkshopGetReviewerAssessments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetReviewerAssessmentsRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetReviewerAssessments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopGetReviewerAssessments200Response>("/mod_workshop_get_reviewer_assessments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetReviewerAssessments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the given submission. Retrieves the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetSubmission200Response</returns>
        public ModWorkshopGetSubmission200Response ModWorkshopGetSubmission(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetSubmission200Response> localVarResponse = ModWorkshopGetSubmissionWithHttpInfo(modWorkshopGetSubmissionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the given submission. Retrieves the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetSubmission200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetSubmission200Response> ModWorkshopGetSubmissionWithHttpInfo(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopGetSubmissionRequest' is set
            if (modWorkshopGetSubmissionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetSubmissionRequest' when calling ModWorkshopApi->ModWorkshopGetSubmission");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetSubmissionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopGetSubmission200Response>("/mod_workshop_get_submission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the given submission. Retrieves the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetSubmission200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopGetSubmission200Response> ModWorkshopGetSubmissionAsync(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetSubmission200Response> localVarResponse = await ModWorkshopGetSubmissionWithHttpInfoAsync(modWorkshopGetSubmissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the given submission. Retrieves the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetSubmission200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetSubmission200Response>> ModWorkshopGetSubmissionWithHttpInfoAsync(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopGetSubmissionRequest' is set
            if (modWorkshopGetSubmissionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetSubmissionRequest' when calling ModWorkshopApi->ModWorkshopGetSubmission");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetSubmissionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopGetSubmission200Response>("/mod_workshop_get_submission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all the assessments of the given submission. Retrieves all the assessments of the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetReviewerAssessments200Response</returns>
        public ModWorkshopGetReviewerAssessments200Response ModWorkshopGetSubmissionAssessments(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetReviewerAssessments200Response> localVarResponse = ModWorkshopGetSubmissionAssessmentsWithHttpInfo(modWorkshopGetSubmissionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all the assessments of the given submission. Retrieves all the assessments of the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetReviewerAssessments200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetReviewerAssessments200Response> ModWorkshopGetSubmissionAssessmentsWithHttpInfo(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopGetSubmissionRequest' is set
            if (modWorkshopGetSubmissionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetSubmissionRequest' when calling ModWorkshopApi->ModWorkshopGetSubmissionAssessments");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetSubmissionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetSubmissionAssessments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopGetReviewerAssessments200Response>("/mod_workshop_get_submission_assessments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetSubmissionAssessments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all the assessments of the given submission. Retrieves all the assessments of the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetReviewerAssessments200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopGetReviewerAssessments200Response> ModWorkshopGetSubmissionAssessmentsAsync(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetReviewerAssessments200Response> localVarResponse = await ModWorkshopGetSubmissionAssessmentsWithHttpInfoAsync(modWorkshopGetSubmissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all the assessments of the given submission. Retrieves all the assessments of the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetReviewerAssessments200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetReviewerAssessments200Response>> ModWorkshopGetSubmissionAssessmentsWithHttpInfoAsync(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopGetSubmissionRequest' is set
            if (modWorkshopGetSubmissionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetSubmissionRequest' when calling ModWorkshopApi->ModWorkshopGetSubmissionAssessments");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetSubmissionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetSubmissionAssessments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopGetReviewerAssessments200Response>("/mod_workshop_get_submission_assessments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetSubmissionAssessments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all the workshop submissions or the one done by the given user (except example submissions). Retrieves all the workshop submissions or the one done by the given user (except example submissions).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetSubmissions200Response</returns>
        public ModWorkshopGetSubmissions200Response ModWorkshopGetSubmissions(ModWorkshopGetSubmissionsRequest modWorkshopGetSubmissionsRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetSubmissions200Response> localVarResponse = ModWorkshopGetSubmissionsWithHttpInfo(modWorkshopGetSubmissionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all the workshop submissions or the one done by the given user (except example submissions). Retrieves all the workshop submissions or the one done by the given user (except example submissions).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetSubmissions200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetSubmissions200Response> ModWorkshopGetSubmissionsWithHttpInfo(ModWorkshopGetSubmissionsRequest modWorkshopGetSubmissionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopGetSubmissionsRequest' is set
            if (modWorkshopGetSubmissionsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetSubmissionsRequest' when calling ModWorkshopApi->ModWorkshopGetSubmissions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetSubmissionsRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopGetSubmissions200Response>("/mod_workshop_get_submissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all the workshop submissions or the one done by the given user (except example submissions). Retrieves all the workshop submissions or the one done by the given user (except example submissions).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetSubmissions200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopGetSubmissions200Response> ModWorkshopGetSubmissionsAsync(ModWorkshopGetSubmissionsRequest modWorkshopGetSubmissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetSubmissions200Response> localVarResponse = await ModWorkshopGetSubmissionsWithHttpInfoAsync(modWorkshopGetSubmissionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all the workshop submissions or the one done by the given user (except example submissions). Retrieves all the workshop submissions or the one done by the given user (except example submissions).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetSubmissions200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetSubmissions200Response>> ModWorkshopGetSubmissionsWithHttpInfoAsync(ModWorkshopGetSubmissionsRequest modWorkshopGetSubmissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopGetSubmissionsRequest' is set
            if (modWorkshopGetSubmissionsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetSubmissionsRequest' when calling ModWorkshopApi->ModWorkshopGetSubmissions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetSubmissionsRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopGetSubmissions200Response>("/mod_workshop_get_submissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the planner information for the given user. Return the planner information for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetUserPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetUserPlan200Response</returns>
        public ModWorkshopGetUserPlan200Response ModWorkshopGetUserPlan(ModWorkshopGetUserPlanRequest modWorkshopGetUserPlanRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetUserPlan200Response> localVarResponse = ModWorkshopGetUserPlanWithHttpInfo(modWorkshopGetUserPlanRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the planner information for the given user. Return the planner information for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetUserPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetUserPlan200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetUserPlan200Response> ModWorkshopGetUserPlanWithHttpInfo(ModWorkshopGetUserPlanRequest modWorkshopGetUserPlanRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopGetUserPlanRequest' is set
            if (modWorkshopGetUserPlanRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetUserPlanRequest' when calling ModWorkshopApi->ModWorkshopGetUserPlan");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetUserPlanRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetUserPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopGetUserPlan200Response>("/mod_workshop_get_user_plan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetUserPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the planner information for the given user. Return the planner information for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetUserPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetUserPlan200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopGetUserPlan200Response> ModWorkshopGetUserPlanAsync(ModWorkshopGetUserPlanRequest modWorkshopGetUserPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetUserPlan200Response> localVarResponse = await ModWorkshopGetUserPlanWithHttpInfoAsync(modWorkshopGetUserPlanRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the planner information for the given user. Return the planner information for the given user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetUserPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetUserPlan200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetUserPlan200Response>> ModWorkshopGetUserPlanWithHttpInfoAsync(ModWorkshopGetUserPlanRequest modWorkshopGetUserPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopGetUserPlanRequest' is set
            if (modWorkshopGetUserPlanRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetUserPlanRequest' when calling ModWorkshopApi->ModWorkshopGetUserPlan");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetUserPlanRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetUserPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopGetUserPlan200Response>("/mod_workshop_get_user_plan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetUserPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return access information for a given workshop. Return access information for a given workshop.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetWorkshopAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetWorkshopAccessInformation200Response</returns>
        public ModWorkshopGetWorkshopAccessInformation200Response ModWorkshopGetWorkshopAccessInformation(ModWorkshopGetWorkshopAccessInformationRequest modWorkshopGetWorkshopAccessInformationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetWorkshopAccessInformation200Response> localVarResponse = ModWorkshopGetWorkshopAccessInformationWithHttpInfo(modWorkshopGetWorkshopAccessInformationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return access information for a given workshop. Return access information for a given workshop.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetWorkshopAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetWorkshopAccessInformation200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetWorkshopAccessInformation200Response> ModWorkshopGetWorkshopAccessInformationWithHttpInfo(ModWorkshopGetWorkshopAccessInformationRequest modWorkshopGetWorkshopAccessInformationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopGetWorkshopAccessInformationRequest' is set
            if (modWorkshopGetWorkshopAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetWorkshopAccessInformationRequest' when calling ModWorkshopApi->ModWorkshopGetWorkshopAccessInformation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetWorkshopAccessInformationRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetWorkshopAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopGetWorkshopAccessInformation200Response>("/mod_workshop_get_workshop_access_information", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetWorkshopAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return access information for a given workshop. Return access information for a given workshop.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetWorkshopAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetWorkshopAccessInformation200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopGetWorkshopAccessInformation200Response> ModWorkshopGetWorkshopAccessInformationAsync(ModWorkshopGetWorkshopAccessInformationRequest modWorkshopGetWorkshopAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetWorkshopAccessInformation200Response> localVarResponse = await ModWorkshopGetWorkshopAccessInformationWithHttpInfoAsync(modWorkshopGetWorkshopAccessInformationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return access information for a given workshop. Return access information for a given workshop.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetWorkshopAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetWorkshopAccessInformation200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetWorkshopAccessInformation200Response>> ModWorkshopGetWorkshopAccessInformationWithHttpInfoAsync(ModWorkshopGetWorkshopAccessInformationRequest modWorkshopGetWorkshopAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopGetWorkshopAccessInformationRequest' is set
            if (modWorkshopGetWorkshopAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetWorkshopAccessInformationRequest' when calling ModWorkshopApi->ModWorkshopGetWorkshopAccessInformation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetWorkshopAccessInformationRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetWorkshopAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopGetWorkshopAccessInformation200Response>("/mod_workshop_get_workshop_access_information", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetWorkshopAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned. Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopGetWorkshopsByCourses200Response</returns>
        public ModWorkshopGetWorkshopsByCourses200Response ModWorkshopGetWorkshopsByCourses(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetWorkshopsByCourses200Response> localVarResponse = ModWorkshopGetWorkshopsByCoursesWithHttpInfo(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned. Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopGetWorkshopsByCourses200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetWorkshopsByCourses200Response> ModWorkshopGetWorkshopsByCoursesWithHttpInfo(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' is set
            if (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' when calling ModWorkshopApi->ModWorkshopGetWorkshopsByCourses");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetWorkshopsByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopGetWorkshopsByCourses200Response>("/mod_workshop_get_workshops_by_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetWorkshopsByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned. Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopGetWorkshopsByCourses200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopGetWorkshopsByCourses200Response> ModWorkshopGetWorkshopsByCoursesAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetWorkshopsByCourses200Response> localVarResponse = await ModWorkshopGetWorkshopsByCoursesWithHttpInfoAsync(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned. Returns a list of workshops in a provided list of courses, if no list is provided all workshops that                             the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopGetWorkshopsByCourses200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopGetWorkshopsByCourses200Response>> ModWorkshopGetWorkshopsByCoursesWithHttpInfoAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' is set
            if (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' when calling ModWorkshopApi->ModWorkshopGetWorkshopsByCourses");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopGetWorkshopsByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopGetWorkshopsByCourses200Response>("/mod_workshop_get_workshops_by_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopGetWorkshopsByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add information to an allocated assessment. Add information to an allocated assessment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopUpdateAssessment200Response</returns>
        public ModWorkshopUpdateAssessment200Response ModWorkshopUpdateAssessment(ModWorkshopUpdateAssessmentRequest modWorkshopUpdateAssessmentRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopUpdateAssessment200Response> localVarResponse = ModWorkshopUpdateAssessmentWithHttpInfo(modWorkshopUpdateAssessmentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add information to an allocated assessment. Add information to an allocated assessment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopUpdateAssessment200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopUpdateAssessment200Response> ModWorkshopUpdateAssessmentWithHttpInfo(ModWorkshopUpdateAssessmentRequest modWorkshopUpdateAssessmentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopUpdateAssessmentRequest' is set
            if (modWorkshopUpdateAssessmentRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopUpdateAssessmentRequest' when calling ModWorkshopApi->ModWorkshopUpdateAssessment");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopUpdateAssessmentRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopUpdateAssessment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopUpdateAssessment200Response>("/mod_workshop_update_assessment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopUpdateAssessment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add information to an allocated assessment. Add information to an allocated assessment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopUpdateAssessment200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopUpdateAssessment200Response> ModWorkshopUpdateAssessmentAsync(ModWorkshopUpdateAssessmentRequest modWorkshopUpdateAssessmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopUpdateAssessment200Response> localVarResponse = await ModWorkshopUpdateAssessmentWithHttpInfoAsync(modWorkshopUpdateAssessmentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add information to an allocated assessment. Add information to an allocated assessment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateAssessmentRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopUpdateAssessment200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopUpdateAssessment200Response>> ModWorkshopUpdateAssessmentWithHttpInfoAsync(ModWorkshopUpdateAssessmentRequest modWorkshopUpdateAssessmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopUpdateAssessmentRequest' is set
            if (modWorkshopUpdateAssessmentRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopUpdateAssessmentRequest' when calling ModWorkshopApi->ModWorkshopUpdateAssessment");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopUpdateAssessmentRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopUpdateAssessment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopUpdateAssessment200Response>("/mod_workshop_update_assessment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopUpdateAssessment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the given submission. Update the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWorkshopUpdateSubmission200Response</returns>
        public ModWorkshopUpdateSubmission200Response ModWorkshopUpdateSubmission(ModWorkshopUpdateSubmissionRequest modWorkshopUpdateSubmissionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopUpdateSubmission200Response> localVarResponse = ModWorkshopUpdateSubmissionWithHttpInfo(modWorkshopUpdateSubmissionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the given submission. Update the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWorkshopUpdateSubmission200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModWorkshopUpdateSubmission200Response> ModWorkshopUpdateSubmissionWithHttpInfo(ModWorkshopUpdateSubmissionRequest modWorkshopUpdateSubmissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopUpdateSubmissionRequest' is set
            if (modWorkshopUpdateSubmissionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopUpdateSubmissionRequest' when calling ModWorkshopApi->ModWorkshopUpdateSubmission");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopUpdateSubmissionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopUpdateSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWorkshopUpdateSubmission200Response>("/mod_workshop_update_submission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopUpdateSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the given submission. Update the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWorkshopUpdateSubmission200Response</returns>
        public async System.Threading.Tasks.Task<ModWorkshopUpdateSubmission200Response> ModWorkshopUpdateSubmissionAsync(ModWorkshopUpdateSubmissionRequest modWorkshopUpdateSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModWorkshopUpdateSubmission200Response> localVarResponse = await ModWorkshopUpdateSubmissionWithHttpInfoAsync(modWorkshopUpdateSubmissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the given submission. Update the given submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopUpdateSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWorkshopUpdateSubmission200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModWorkshopUpdateSubmission200Response>> ModWorkshopUpdateSubmissionWithHttpInfoAsync(ModWorkshopUpdateSubmissionRequest modWorkshopUpdateSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopUpdateSubmissionRequest' is set
            if (modWorkshopUpdateSubmissionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopUpdateSubmissionRequest' when calling ModWorkshopApi->ModWorkshopUpdateSubmission");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopUpdateSubmissionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopUpdateSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWorkshopUpdateSubmission200Response>("/mod_workshop_update_submission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopUpdateSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the submission viewed event. Trigger the submission viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModWorkshopViewSubmission(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModWorkshopViewSubmissionWithHttpInfo(modWorkshopGetSubmissionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the submission viewed event. Trigger the submission viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModWorkshopViewSubmissionWithHttpInfo(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopGetSubmissionRequest' is set
            if (modWorkshopGetSubmissionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetSubmissionRequest' when calling ModWorkshopApi->ModWorkshopViewSubmission");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetSubmissionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopViewSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_workshop_view_submission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopViewSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the submission viewed event. Trigger the submission viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModWorkshopViewSubmissionAsync(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModWorkshopViewSubmissionWithHttpInfoAsync(modWorkshopGetSubmissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the submission viewed event. Trigger the submission viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopGetSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModWorkshopViewSubmissionWithHttpInfoAsync(ModWorkshopGetSubmissionRequest modWorkshopGetSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopGetSubmissionRequest' is set
            if (modWorkshopGetSubmissionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopGetSubmissionRequest' when calling ModWorkshopApi->ModWorkshopViewSubmission");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopGetSubmissionRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopViewSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_workshop_view_submission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopViewSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopViewWorkshopRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModWorkshopViewWorkshop(ModWorkshopViewWorkshopRequest modWorkshopViewWorkshopRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModWorkshopViewWorkshopWithHttpInfo(modWorkshopViewWorkshopRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopViewWorkshopRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModWorkshopViewWorkshopWithHttpInfo(ModWorkshopViewWorkshopRequest modWorkshopViewWorkshopRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWorkshopViewWorkshopRequest' is set
            if (modWorkshopViewWorkshopRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopViewWorkshopRequest' when calling ModWorkshopApi->ModWorkshopViewWorkshop");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopViewWorkshopRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopViewWorkshop";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_workshop_view_workshop", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopViewWorkshop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopViewWorkshopRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModWorkshopViewWorkshopAsync(ModWorkshopViewWorkshopRequest modWorkshopViewWorkshopRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModWorkshopViewWorkshopWithHttpInfoAsync(modWorkshopViewWorkshopRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWorkshopViewWorkshopRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModWorkshopViewWorkshopWithHttpInfoAsync(ModWorkshopViewWorkshopRequest modWorkshopViewWorkshopRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWorkshopViewWorkshopRequest' is set
            if (modWorkshopViewWorkshopRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modWorkshopViewWorkshopRequest' when calling ModWorkshopApi->ModWorkshopViewWorkshop");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWorkshopViewWorkshopRequest;

            localVarRequestOptions.Operation = "ModWorkshopApi.ModWorkshopViewWorkshop";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_workshop_view_workshop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWorkshopViewWorkshop", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
