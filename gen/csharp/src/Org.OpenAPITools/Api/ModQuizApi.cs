/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModQuizApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a number of random questions to a quiz.
        /// </summary>
        /// <remarks>
        /// Add a number of random questions to a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizAddRandomQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizAddRandomQuestions200Response</returns>
        ModQuizAddRandomQuestions200Response ModQuizAddRandomQuestions(ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest, int operationIndex = 0);

        /// <summary>
        /// Add a number of random questions to a quiz.
        /// </summary>
        /// <remarks>
        /// Add a number of random questions to a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizAddRandomQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizAddRandomQuestions200Response</returns>
        ApiResponse<ModQuizAddRandomQuestions200Response> ModQuizAddRandomQuestionsWithHttpInfo(ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest, int operationIndex = 0);
        /// <summary>
        /// Return access information for a given attempt in a quiz.
        /// </summary>
        /// <remarks>
        /// Return access information for a given attempt in a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetAttemptAccessInformation200Response</returns>
        ModQuizGetAttemptAccessInformation200Response ModQuizGetAttemptAccessInformation(ModQuizGetAttemptAccessInformationRequest modQuizGetAttemptAccessInformationRequest, int operationIndex = 0);

        /// <summary>
        /// Return access information for a given attempt in a quiz.
        /// </summary>
        /// <remarks>
        /// Return access information for a given attempt in a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetAttemptAccessInformation200Response</returns>
        ApiResponse<ModQuizGetAttemptAccessInformation200Response> ModQuizGetAttemptAccessInformationWithHttpInfo(ModQuizGetAttemptAccessInformationRequest modQuizGetAttemptAccessInformationRequest, int operationIndex = 0);
        /// <summary>
        /// Returns information for the given attempt page for a quiz attempt in progress.
        /// </summary>
        /// <remarks>
        /// Returns information for the given attempt page for a quiz attempt in progress.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetAttemptData200Response</returns>
        ModQuizGetAttemptData200Response ModQuizGetAttemptData(ModQuizGetAttemptDataRequest modQuizGetAttemptDataRequest, int operationIndex = 0);

        /// <summary>
        /// Returns information for the given attempt page for a quiz attempt in progress.
        /// </summary>
        /// <remarks>
        /// Returns information for the given attempt page for a quiz attempt in progress.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetAttemptData200Response</returns>
        ApiResponse<ModQuizGetAttemptData200Response> ModQuizGetAttemptDataWithHttpInfo(ModQuizGetAttemptDataRequest modQuizGetAttemptDataRequest, int operationIndex = 0);
        /// <summary>
        /// Returns review information for the given finished attempt, can be used by users or teachers.
        /// </summary>
        /// <remarks>
        /// Returns review information for the given finished attempt, can be used by users or teachers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetAttemptReview200Response</returns>
        ModQuizGetAttemptReview200Response ModQuizGetAttemptReview(ModQuizGetAttemptReviewRequest modQuizGetAttemptReviewRequest, int operationIndex = 0);

        /// <summary>
        /// Returns review information for the given finished attempt, can be used by users or teachers.
        /// </summary>
        /// <remarks>
        /// Returns review information for the given finished attempt, can be used by users or teachers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetAttemptReview200Response</returns>
        ApiResponse<ModQuizGetAttemptReview200Response> ModQuizGetAttemptReviewWithHttpInfo(ModQuizGetAttemptReviewRequest modQuizGetAttemptReviewRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a summary of a quiz attempt before it is submitted.
        /// </summary>
        /// <remarks>
        /// Returns a summary of a quiz attempt before it is submitted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetAttemptSummary200Response</returns>
        ModQuizGetAttemptSummary200Response ModQuizGetAttemptSummary(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a summary of a quiz attempt before it is submitted.
        /// </summary>
        /// <remarks>
        /// Returns a summary of a quiz attempt before it is submitted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetAttemptSummary200Response</returns>
        ApiResponse<ModQuizGetAttemptSummary200Response> ModQuizGetAttemptSummaryWithHttpInfo(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0);
        /// <summary>
        /// Combines the review options from a number of different quiz attempts.
        /// </summary>
        /// <remarks>
        /// Combines the review options from a number of different quiz attempts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetCombinedReviewOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetCombinedReviewOptions200Response</returns>
        ModQuizGetCombinedReviewOptions200Response ModQuizGetCombinedReviewOptions(ModQuizGetCombinedReviewOptionsRequest modQuizGetCombinedReviewOptionsRequest, int operationIndex = 0);

        /// <summary>
        /// Combines the review options from a number of different quiz attempts.
        /// </summary>
        /// <remarks>
        /// Combines the review options from a number of different quiz attempts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetCombinedReviewOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetCombinedReviewOptions200Response</returns>
        ApiResponse<ModQuizGetCombinedReviewOptions200Response> ModQuizGetCombinedReviewOptionsWithHttpInfo(ModQuizGetCombinedReviewOptionsRequest modQuizGetCombinedReviewOptionsRequest, int operationIndex = 0);
        /// <summary>
        /// Return access information for a given quiz.
        /// </summary>
        /// <remarks>
        /// Return access information for a given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetQuizAccessInformation200Response</returns>
        ModQuizGetQuizAccessInformation200Response ModQuizGetQuizAccessInformation(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0);

        /// <summary>
        /// Return access information for a given quiz.
        /// </summary>
        /// <remarks>
        /// Return access information for a given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetQuizAccessInformation200Response</returns>
        ApiResponse<ModQuizGetQuizAccessInformation200Response> ModQuizGetQuizAccessInformationWithHttpInfo(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0);
        /// <summary>
        /// Get the feedback text that should be show to a student who got the given grade in the given quiz.
        /// </summary>
        /// <remarks>
        /// Get the feedback text that should be show to a student who got the given grade in the given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizFeedbackForGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetQuizFeedbackForGrade200Response</returns>
        ModQuizGetQuizFeedbackForGrade200Response ModQuizGetQuizFeedbackForGrade(ModQuizGetQuizFeedbackForGradeRequest modQuizGetQuizFeedbackForGradeRequest, int operationIndex = 0);

        /// <summary>
        /// Get the feedback text that should be show to a student who got the given grade in the given quiz.
        /// </summary>
        /// <remarks>
        /// Get the feedback text that should be show to a student who got the given grade in the given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizFeedbackForGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetQuizFeedbackForGrade200Response</returns>
        ApiResponse<ModQuizGetQuizFeedbackForGrade200Response> ModQuizGetQuizFeedbackForGradeWithHttpInfo(ModQuizGetQuizFeedbackForGradeRequest modQuizGetQuizFeedbackForGradeRequest, int operationIndex = 0);
        /// <summary>
        /// Return the potential question types that would be required for a given quiz.
        /// </summary>
        /// <remarks>
        /// Return the potential question types that would be required for a given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetQuizRequiredQtypes200Response</returns>
        ModQuizGetQuizRequiredQtypes200Response ModQuizGetQuizRequiredQtypes(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0);

        /// <summary>
        /// Return the potential question types that would be required for a given quiz.
        /// </summary>
        /// <remarks>
        /// Return the potential question types that would be required for a given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetQuizRequiredQtypes200Response</returns>
        ApiResponse<ModQuizGetQuizRequiredQtypes200Response> ModQuizGetQuizRequiredQtypesWithHttpInfo(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetQuizzesByCourses200Response</returns>
        ModQuizGetQuizzesByCourses200Response ModQuizGetQuizzesByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetQuizzesByCourses200Response</returns>
        ApiResponse<ModQuizGetQuizzesByCourses200Response> ModQuizGetQuizzesByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
        /// </summary>
        /// <remarks>
        /// Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetReopenAttemptConfirmationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModQuizGetReopenAttemptConfirmation(ModQuizGetReopenAttemptConfirmationRequest modQuizGetReopenAttemptConfirmationRequest, int operationIndex = 0);

        /// <summary>
        /// Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
        /// </summary>
        /// <remarks>
        /// Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetReopenAttemptConfirmationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModQuizGetReopenAttemptConfirmationWithHttpInfo(ModQuizGetReopenAttemptConfirmationRequest modQuizGetReopenAttemptConfirmationRequest, int operationIndex = 0);
        /// <summary>
        /// Return a list of attempts for the given quiz and user.
        /// </summary>
        /// <remarks>
        /// Return a list of attempts for the given quiz and user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetUserAttempts200Response</returns>
        ModQuizGetUserAttempts200Response ModQuizGetUserAttempts(ModQuizGetUserAttemptsRequest modQuizGetUserAttemptsRequest, int operationIndex = 0);

        /// <summary>
        /// Return a list of attempts for the given quiz and user.
        /// </summary>
        /// <remarks>
        /// Return a list of attempts for the given quiz and user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetUserAttempts200Response</returns>
        ApiResponse<ModQuizGetUserAttempts200Response> ModQuizGetUserAttemptsWithHttpInfo(ModQuizGetUserAttemptsRequest modQuizGetUserAttemptsRequest, int operationIndex = 0);
        /// <summary>
        /// Get the best current grade for the given user on a quiz.
        /// </summary>
        /// <remarks>
        /// Get the best current grade for the given user on a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserBestGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetUserBestGrade200Response</returns>
        ModQuizGetUserBestGrade200Response ModQuizGetUserBestGrade(ModQuizGetUserBestGradeRequest modQuizGetUserBestGradeRequest, int operationIndex = 0);

        /// <summary>
        /// Get the best current grade for the given user on a quiz.
        /// </summary>
        /// <remarks>
        /// Get the best current grade for the given user on a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserBestGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetUserBestGrade200Response</returns>
        ApiResponse<ModQuizGetUserBestGrade200Response> ModQuizGetUserBestGradeWithHttpInfo(ModQuizGetUserBestGradeRequest modQuizGetUserBestGradeRequest, int operationIndex = 0);
        /// <summary>
        /// Process responses during an attempt at a quiz and also deals with attempts finishing.
        /// </summary>
        /// <remarks>
        /// Process responses during an attempt at a quiz and also deals with attempts finishing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizProcessAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizProcessAttempt200Response</returns>
        ModQuizProcessAttempt200Response ModQuizProcessAttempt(ModQuizProcessAttemptRequest modQuizProcessAttemptRequest, int operationIndex = 0);

        /// <summary>
        /// Process responses during an attempt at a quiz and also deals with attempts finishing.
        /// </summary>
        /// <remarks>
        /// Process responses during an attempt at a quiz and also deals with attempts finishing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizProcessAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizProcessAttempt200Response</returns>
        ApiResponse<ModQuizProcessAttempt200Response> ModQuizProcessAttemptWithHttpInfo(ModQuizProcessAttemptRequest modQuizProcessAttemptRequest, int operationIndex = 0);
        /// <summary>
        /// Re-open an attempt that is currently in the never submitted state.
        /// </summary>
        /// <remarks>
        /// Re-open an attempt that is currently in the never submitted state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizReopenAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModQuizReopenAttempt(ModQuizReopenAttemptRequest modQuizReopenAttemptRequest, int operationIndex = 0);

        /// <summary>
        /// Re-open an attempt that is currently in the never submitted state.
        /// </summary>
        /// <remarks>
        /// Re-open an attempt that is currently in the never submitted state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizReopenAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModQuizReopenAttemptWithHttpInfo(ModQuizReopenAttemptRequest modQuizReopenAttemptRequest, int operationIndex = 0);
        /// <summary>
        /// Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
        /// </summary>
        /// <remarks>
        /// Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSaveAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModQuizSaveAttempt(ModQuizSaveAttemptRequest modQuizSaveAttemptRequest, int operationIndex = 0);

        /// <summary>
        /// Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
        /// </summary>
        /// <remarks>
        /// Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSaveAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModQuizSaveAttemptWithHttpInfo(ModQuizSaveAttemptRequest modQuizSaveAttemptRequest, int operationIndex = 0);
        /// <summary>
        /// Set the version of question that would be required for a given quiz.
        /// </summary>
        /// <remarks>
        /// Set the version of question that would be required for a given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSetQuestionVersionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizSetQuestionVersion200Response</returns>
        ModQuizSetQuestionVersion200Response ModQuizSetQuestionVersion(ModQuizSetQuestionVersionRequest modQuizSetQuestionVersionRequest, int operationIndex = 0);

        /// <summary>
        /// Set the version of question that would be required for a given quiz.
        /// </summary>
        /// <remarks>
        /// Set the version of question that would be required for a given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSetQuestionVersionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizSetQuestionVersion200Response</returns>
        ApiResponse<ModQuizSetQuestionVersion200Response> ModQuizSetQuestionVersionWithHttpInfo(ModQuizSetQuestionVersionRequest modQuizSetQuestionVersionRequest, int operationIndex = 0);
        /// <summary>
        /// Starts a new attempt at a quiz.
        /// </summary>
        /// <remarks>
        /// Starts a new attempt at a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizStartAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizStartAttempt200Response</returns>
        ModQuizStartAttempt200Response ModQuizStartAttempt(ModQuizStartAttemptRequest modQuizStartAttemptRequest, int operationIndex = 0);

        /// <summary>
        /// Starts a new attempt at a quiz.
        /// </summary>
        /// <remarks>
        /// Starts a new attempt at a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizStartAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizStartAttempt200Response</returns>
        ApiResponse<ModQuizStartAttempt200Response> ModQuizStartAttemptWithHttpInfo(ModQuizStartAttemptRequest modQuizStartAttemptRequest, int operationIndex = 0);
        /// <summary>
        /// Update filter condition for a random question slot.
        /// </summary>
        /// <remarks>
        /// Update filter condition for a random question slot.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizUpdateFilterConditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizAddRandomQuestions200Response</returns>
        ModQuizAddRandomQuestions200Response ModQuizUpdateFilterCondition(ModQuizUpdateFilterConditionRequest modQuizUpdateFilterConditionRequest, int operationIndex = 0);

        /// <summary>
        /// Update filter condition for a random question slot.
        /// </summary>
        /// <remarks>
        /// Update filter condition for a random question slot.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizUpdateFilterConditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizAddRandomQuestions200Response</returns>
        ApiResponse<ModQuizAddRandomQuestions200Response> ModQuizUpdateFilterConditionWithHttpInfo(ModQuizUpdateFilterConditionRequest modQuizUpdateFilterConditionRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the attempt viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the attempt viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModQuizViewAttempt(ModQuizViewAttemptRequest modQuizViewAttemptRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the attempt viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the attempt viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModQuizViewAttemptWithHttpInfo(ModQuizViewAttemptRequest modQuizViewAttemptRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the attempt reviewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the attempt reviewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModQuizViewAttemptReview(ModQuizViewAttemptReviewRequest modQuizViewAttemptReviewRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the attempt reviewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the attempt reviewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModQuizViewAttemptReviewWithHttpInfo(ModQuizViewAttemptReviewRequest modQuizViewAttemptReviewRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the attempt summary viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the attempt summary viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModQuizViewAttemptSummary(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the attempt summary viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the attempt summary viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModQuizViewAttemptSummaryWithHttpInfo(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModQuizViewQuiz(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModQuizViewQuizWithHttpInfo(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModQuizApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a number of random questions to a quiz.
        /// </summary>
        /// <remarks>
        /// Add a number of random questions to a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizAddRandomQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizAddRandomQuestions200Response</returns>
        System.Threading.Tasks.Task<ModQuizAddRandomQuestions200Response> ModQuizAddRandomQuestionsAsync(ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a number of random questions to a quiz.
        /// </summary>
        /// <remarks>
        /// Add a number of random questions to a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizAddRandomQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizAddRandomQuestions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizAddRandomQuestions200Response>> ModQuizAddRandomQuestionsWithHttpInfoAsync(ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return access information for a given attempt in a quiz.
        /// </summary>
        /// <remarks>
        /// Return access information for a given attempt in a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetAttemptAccessInformation200Response</returns>
        System.Threading.Tasks.Task<ModQuizGetAttemptAccessInformation200Response> ModQuizGetAttemptAccessInformationAsync(ModQuizGetAttemptAccessInformationRequest modQuizGetAttemptAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return access information for a given attempt in a quiz.
        /// </summary>
        /// <remarks>
        /// Return access information for a given attempt in a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetAttemptAccessInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizGetAttemptAccessInformation200Response>> ModQuizGetAttemptAccessInformationWithHttpInfoAsync(ModQuizGetAttemptAccessInformationRequest modQuizGetAttemptAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns information for the given attempt page for a quiz attempt in progress.
        /// </summary>
        /// <remarks>
        /// Returns information for the given attempt page for a quiz attempt in progress.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetAttemptData200Response</returns>
        System.Threading.Tasks.Task<ModQuizGetAttemptData200Response> ModQuizGetAttemptDataAsync(ModQuizGetAttemptDataRequest modQuizGetAttemptDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns information for the given attempt page for a quiz attempt in progress.
        /// </summary>
        /// <remarks>
        /// Returns information for the given attempt page for a quiz attempt in progress.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetAttemptData200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizGetAttemptData200Response>> ModQuizGetAttemptDataWithHttpInfoAsync(ModQuizGetAttemptDataRequest modQuizGetAttemptDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns review information for the given finished attempt, can be used by users or teachers.
        /// </summary>
        /// <remarks>
        /// Returns review information for the given finished attempt, can be used by users or teachers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetAttemptReview200Response</returns>
        System.Threading.Tasks.Task<ModQuizGetAttemptReview200Response> ModQuizGetAttemptReviewAsync(ModQuizGetAttemptReviewRequest modQuizGetAttemptReviewRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns review information for the given finished attempt, can be used by users or teachers.
        /// </summary>
        /// <remarks>
        /// Returns review information for the given finished attempt, can be used by users or teachers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetAttemptReview200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizGetAttemptReview200Response>> ModQuizGetAttemptReviewWithHttpInfoAsync(ModQuizGetAttemptReviewRequest modQuizGetAttemptReviewRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a summary of a quiz attempt before it is submitted.
        /// </summary>
        /// <remarks>
        /// Returns a summary of a quiz attempt before it is submitted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetAttemptSummary200Response</returns>
        System.Threading.Tasks.Task<ModQuizGetAttemptSummary200Response> ModQuizGetAttemptSummaryAsync(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a summary of a quiz attempt before it is submitted.
        /// </summary>
        /// <remarks>
        /// Returns a summary of a quiz attempt before it is submitted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetAttemptSummary200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizGetAttemptSummary200Response>> ModQuizGetAttemptSummaryWithHttpInfoAsync(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Combines the review options from a number of different quiz attempts.
        /// </summary>
        /// <remarks>
        /// Combines the review options from a number of different quiz attempts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetCombinedReviewOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetCombinedReviewOptions200Response</returns>
        System.Threading.Tasks.Task<ModQuizGetCombinedReviewOptions200Response> ModQuizGetCombinedReviewOptionsAsync(ModQuizGetCombinedReviewOptionsRequest modQuizGetCombinedReviewOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Combines the review options from a number of different quiz attempts.
        /// </summary>
        /// <remarks>
        /// Combines the review options from a number of different quiz attempts.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetCombinedReviewOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetCombinedReviewOptions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizGetCombinedReviewOptions200Response>> ModQuizGetCombinedReviewOptionsWithHttpInfoAsync(ModQuizGetCombinedReviewOptionsRequest modQuizGetCombinedReviewOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return access information for a given quiz.
        /// </summary>
        /// <remarks>
        /// Return access information for a given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetQuizAccessInformation200Response</returns>
        System.Threading.Tasks.Task<ModQuizGetQuizAccessInformation200Response> ModQuizGetQuizAccessInformationAsync(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return access information for a given quiz.
        /// </summary>
        /// <remarks>
        /// Return access information for a given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetQuizAccessInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizGetQuizAccessInformation200Response>> ModQuizGetQuizAccessInformationWithHttpInfoAsync(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the feedback text that should be show to a student who got the given grade in the given quiz.
        /// </summary>
        /// <remarks>
        /// Get the feedback text that should be show to a student who got the given grade in the given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizFeedbackForGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetQuizFeedbackForGrade200Response</returns>
        System.Threading.Tasks.Task<ModQuizGetQuizFeedbackForGrade200Response> ModQuizGetQuizFeedbackForGradeAsync(ModQuizGetQuizFeedbackForGradeRequest modQuizGetQuizFeedbackForGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the feedback text that should be show to a student who got the given grade in the given quiz.
        /// </summary>
        /// <remarks>
        /// Get the feedback text that should be show to a student who got the given grade in the given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizFeedbackForGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetQuizFeedbackForGrade200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizGetQuizFeedbackForGrade200Response>> ModQuizGetQuizFeedbackForGradeWithHttpInfoAsync(ModQuizGetQuizFeedbackForGradeRequest modQuizGetQuizFeedbackForGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the potential question types that would be required for a given quiz.
        /// </summary>
        /// <remarks>
        /// Return the potential question types that would be required for a given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetQuizRequiredQtypes200Response</returns>
        System.Threading.Tasks.Task<ModQuizGetQuizRequiredQtypes200Response> ModQuizGetQuizRequiredQtypesAsync(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the potential question types that would be required for a given quiz.
        /// </summary>
        /// <remarks>
        /// Return the potential question types that would be required for a given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetQuizRequiredQtypes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizGetQuizRequiredQtypes200Response>> ModQuizGetQuizRequiredQtypesWithHttpInfoAsync(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetQuizzesByCourses200Response</returns>
        System.Threading.Tasks.Task<ModQuizGetQuizzesByCourses200Response> ModQuizGetQuizzesByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetQuizzesByCourses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizGetQuizzesByCourses200Response>> ModQuizGetQuizzesByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
        /// </summary>
        /// <remarks>
        /// Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetReopenAttemptConfirmationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModQuizGetReopenAttemptConfirmationAsync(ModQuizGetReopenAttemptConfirmationRequest modQuizGetReopenAttemptConfirmationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
        /// </summary>
        /// <remarks>
        /// Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetReopenAttemptConfirmationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModQuizGetReopenAttemptConfirmationWithHttpInfoAsync(ModQuizGetReopenAttemptConfirmationRequest modQuizGetReopenAttemptConfirmationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return a list of attempts for the given quiz and user.
        /// </summary>
        /// <remarks>
        /// Return a list of attempts for the given quiz and user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetUserAttempts200Response</returns>
        System.Threading.Tasks.Task<ModQuizGetUserAttempts200Response> ModQuizGetUserAttemptsAsync(ModQuizGetUserAttemptsRequest modQuizGetUserAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return a list of attempts for the given quiz and user.
        /// </summary>
        /// <remarks>
        /// Return a list of attempts for the given quiz and user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetUserAttempts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizGetUserAttempts200Response>> ModQuizGetUserAttemptsWithHttpInfoAsync(ModQuizGetUserAttemptsRequest modQuizGetUserAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the best current grade for the given user on a quiz.
        /// </summary>
        /// <remarks>
        /// Get the best current grade for the given user on a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserBestGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetUserBestGrade200Response</returns>
        System.Threading.Tasks.Task<ModQuizGetUserBestGrade200Response> ModQuizGetUserBestGradeAsync(ModQuizGetUserBestGradeRequest modQuizGetUserBestGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the best current grade for the given user on a quiz.
        /// </summary>
        /// <remarks>
        /// Get the best current grade for the given user on a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserBestGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetUserBestGrade200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizGetUserBestGrade200Response>> ModQuizGetUserBestGradeWithHttpInfoAsync(ModQuizGetUserBestGradeRequest modQuizGetUserBestGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Process responses during an attempt at a quiz and also deals with attempts finishing.
        /// </summary>
        /// <remarks>
        /// Process responses during an attempt at a quiz and also deals with attempts finishing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizProcessAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizProcessAttempt200Response</returns>
        System.Threading.Tasks.Task<ModQuizProcessAttempt200Response> ModQuizProcessAttemptAsync(ModQuizProcessAttemptRequest modQuizProcessAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Process responses during an attempt at a quiz and also deals with attempts finishing.
        /// </summary>
        /// <remarks>
        /// Process responses during an attempt at a quiz and also deals with attempts finishing.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizProcessAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizProcessAttempt200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizProcessAttempt200Response>> ModQuizProcessAttemptWithHttpInfoAsync(ModQuizProcessAttemptRequest modQuizProcessAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Re-open an attempt that is currently in the never submitted state.
        /// </summary>
        /// <remarks>
        /// Re-open an attempt that is currently in the never submitted state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizReopenAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModQuizReopenAttemptAsync(ModQuizReopenAttemptRequest modQuizReopenAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Re-open an attempt that is currently in the never submitted state.
        /// </summary>
        /// <remarks>
        /// Re-open an attempt that is currently in the never submitted state.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizReopenAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModQuizReopenAttemptWithHttpInfoAsync(ModQuizReopenAttemptRequest modQuizReopenAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
        /// </summary>
        /// <remarks>
        /// Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSaveAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModQuizSaveAttemptAsync(ModQuizSaveAttemptRequest modQuizSaveAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
        /// </summary>
        /// <remarks>
        /// Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSaveAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModQuizSaveAttemptWithHttpInfoAsync(ModQuizSaveAttemptRequest modQuizSaveAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set the version of question that would be required for a given quiz.
        /// </summary>
        /// <remarks>
        /// Set the version of question that would be required for a given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSetQuestionVersionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizSetQuestionVersion200Response</returns>
        System.Threading.Tasks.Task<ModQuizSetQuestionVersion200Response> ModQuizSetQuestionVersionAsync(ModQuizSetQuestionVersionRequest modQuizSetQuestionVersionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set the version of question that would be required for a given quiz.
        /// </summary>
        /// <remarks>
        /// Set the version of question that would be required for a given quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSetQuestionVersionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizSetQuestionVersion200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizSetQuestionVersion200Response>> ModQuizSetQuestionVersionWithHttpInfoAsync(ModQuizSetQuestionVersionRequest modQuizSetQuestionVersionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Starts a new attempt at a quiz.
        /// </summary>
        /// <remarks>
        /// Starts a new attempt at a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizStartAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizStartAttempt200Response</returns>
        System.Threading.Tasks.Task<ModQuizStartAttempt200Response> ModQuizStartAttemptAsync(ModQuizStartAttemptRequest modQuizStartAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Starts a new attempt at a quiz.
        /// </summary>
        /// <remarks>
        /// Starts a new attempt at a quiz.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizStartAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizStartAttempt200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizStartAttempt200Response>> ModQuizStartAttemptWithHttpInfoAsync(ModQuizStartAttemptRequest modQuizStartAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update filter condition for a random question slot.
        /// </summary>
        /// <remarks>
        /// Update filter condition for a random question slot.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizUpdateFilterConditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizAddRandomQuestions200Response</returns>
        System.Threading.Tasks.Task<ModQuizAddRandomQuestions200Response> ModQuizUpdateFilterConditionAsync(ModQuizUpdateFilterConditionRequest modQuizUpdateFilterConditionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update filter condition for a random question slot.
        /// </summary>
        /// <remarks>
        /// Update filter condition for a random question slot.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizUpdateFilterConditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizAddRandomQuestions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModQuizAddRandomQuestions200Response>> ModQuizUpdateFilterConditionWithHttpInfoAsync(ModQuizUpdateFilterConditionRequest modQuizUpdateFilterConditionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the attempt viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the attempt viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModQuizViewAttemptAsync(ModQuizViewAttemptRequest modQuizViewAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the attempt viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the attempt viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModQuizViewAttemptWithHttpInfoAsync(ModQuizViewAttemptRequest modQuizViewAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the attempt reviewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the attempt reviewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModQuizViewAttemptReviewAsync(ModQuizViewAttemptReviewRequest modQuizViewAttemptReviewRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the attempt reviewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the attempt reviewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModQuizViewAttemptReviewWithHttpInfoAsync(ModQuizViewAttemptReviewRequest modQuizViewAttemptReviewRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the attempt summary viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the attempt summary viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModQuizViewAttemptSummaryAsync(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the attempt summary viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the attempt summary viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModQuizViewAttemptSummaryWithHttpInfoAsync(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModQuizViewQuizAsync(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModQuizViewQuizWithHttpInfoAsync(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModQuizApi : IModQuizApiSync, IModQuizApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModQuizApi : IModQuizApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModQuizApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModQuizApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModQuizApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModQuizApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModQuizApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModQuizApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModQuizApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModQuizApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a number of random questions to a quiz. Add a number of random questions to a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizAddRandomQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizAddRandomQuestions200Response</returns>
        public ModQuizAddRandomQuestions200Response ModQuizAddRandomQuestions(ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizAddRandomQuestions200Response> localVarResponse = ModQuizAddRandomQuestionsWithHttpInfo(modQuizAddRandomQuestionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a number of random questions to a quiz. Add a number of random questions to a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizAddRandomQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizAddRandomQuestions200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizAddRandomQuestions200Response> ModQuizAddRandomQuestionsWithHttpInfo(ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizAddRandomQuestionsRequest' is set
            if (modQuizAddRandomQuestionsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizAddRandomQuestionsRequest' when calling ModQuizApi->ModQuizAddRandomQuestions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizAddRandomQuestionsRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizAddRandomQuestions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizAddRandomQuestions200Response>("/mod_quiz_add_random_questions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizAddRandomQuestions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a number of random questions to a quiz. Add a number of random questions to a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizAddRandomQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizAddRandomQuestions200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizAddRandomQuestions200Response> ModQuizAddRandomQuestionsAsync(ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizAddRandomQuestions200Response> localVarResponse = await ModQuizAddRandomQuestionsWithHttpInfoAsync(modQuizAddRandomQuestionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a number of random questions to a quiz. Add a number of random questions to a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizAddRandomQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizAddRandomQuestions200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizAddRandomQuestions200Response>> ModQuizAddRandomQuestionsWithHttpInfoAsync(ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizAddRandomQuestionsRequest' is set
            if (modQuizAddRandomQuestionsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizAddRandomQuestionsRequest' when calling ModQuizApi->ModQuizAddRandomQuestions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizAddRandomQuestionsRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizAddRandomQuestions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizAddRandomQuestions200Response>("/mod_quiz_add_random_questions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizAddRandomQuestions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return access information for a given attempt in a quiz. Return access information for a given attempt in a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetAttemptAccessInformation200Response</returns>
        public ModQuizGetAttemptAccessInformation200Response ModQuizGetAttemptAccessInformation(ModQuizGetAttemptAccessInformationRequest modQuizGetAttemptAccessInformationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptAccessInformation200Response> localVarResponse = ModQuizGetAttemptAccessInformationWithHttpInfo(modQuizGetAttemptAccessInformationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return access information for a given attempt in a quiz. Return access information for a given attempt in a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetAttemptAccessInformation200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptAccessInformation200Response> ModQuizGetAttemptAccessInformationWithHttpInfo(ModQuizGetAttemptAccessInformationRequest modQuizGetAttemptAccessInformationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizGetAttemptAccessInformationRequest' is set
            if (modQuizGetAttemptAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetAttemptAccessInformationRequest' when calling ModQuizApi->ModQuizGetAttemptAccessInformation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetAttemptAccessInformationRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetAttemptAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizGetAttemptAccessInformation200Response>("/mod_quiz_get_attempt_access_information", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetAttemptAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return access information for a given attempt in a quiz. Return access information for a given attempt in a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetAttemptAccessInformation200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizGetAttemptAccessInformation200Response> ModQuizGetAttemptAccessInformationAsync(ModQuizGetAttemptAccessInformationRequest modQuizGetAttemptAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptAccessInformation200Response> localVarResponse = await ModQuizGetAttemptAccessInformationWithHttpInfoAsync(modQuizGetAttemptAccessInformationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return access information for a given attempt in a quiz. Return access information for a given attempt in a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetAttemptAccessInformation200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptAccessInformation200Response>> ModQuizGetAttemptAccessInformationWithHttpInfoAsync(ModQuizGetAttemptAccessInformationRequest modQuizGetAttemptAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizGetAttemptAccessInformationRequest' is set
            if (modQuizGetAttemptAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetAttemptAccessInformationRequest' when calling ModQuizApi->ModQuizGetAttemptAccessInformation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetAttemptAccessInformationRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetAttemptAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizGetAttemptAccessInformation200Response>("/mod_quiz_get_attempt_access_information", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetAttemptAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information for the given attempt page for a quiz attempt in progress. Returns information for the given attempt page for a quiz attempt in progress.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetAttemptData200Response</returns>
        public ModQuizGetAttemptData200Response ModQuizGetAttemptData(ModQuizGetAttemptDataRequest modQuizGetAttemptDataRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptData200Response> localVarResponse = ModQuizGetAttemptDataWithHttpInfo(modQuizGetAttemptDataRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information for the given attempt page for a quiz attempt in progress. Returns information for the given attempt page for a quiz attempt in progress.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetAttemptData200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptData200Response> ModQuizGetAttemptDataWithHttpInfo(ModQuizGetAttemptDataRequest modQuizGetAttemptDataRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizGetAttemptDataRequest' is set
            if (modQuizGetAttemptDataRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetAttemptDataRequest' when calling ModQuizApi->ModQuizGetAttemptData");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetAttemptDataRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetAttemptData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizGetAttemptData200Response>("/mod_quiz_get_attempt_data", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetAttemptData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information for the given attempt page for a quiz attempt in progress. Returns information for the given attempt page for a quiz attempt in progress.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetAttemptData200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizGetAttemptData200Response> ModQuizGetAttemptDataAsync(ModQuizGetAttemptDataRequest modQuizGetAttemptDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptData200Response> localVarResponse = await ModQuizGetAttemptDataWithHttpInfoAsync(modQuizGetAttemptDataRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information for the given attempt page for a quiz attempt in progress. Returns information for the given attempt page for a quiz attempt in progress.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetAttemptData200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptData200Response>> ModQuizGetAttemptDataWithHttpInfoAsync(ModQuizGetAttemptDataRequest modQuizGetAttemptDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizGetAttemptDataRequest' is set
            if (modQuizGetAttemptDataRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetAttemptDataRequest' when calling ModQuizApi->ModQuizGetAttemptData");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetAttemptDataRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetAttemptData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizGetAttemptData200Response>("/mod_quiz_get_attempt_data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetAttemptData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns review information for the given finished attempt, can be used by users or teachers. Returns review information for the given finished attempt, can be used by users or teachers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetAttemptReview200Response</returns>
        public ModQuizGetAttemptReview200Response ModQuizGetAttemptReview(ModQuizGetAttemptReviewRequest modQuizGetAttemptReviewRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptReview200Response> localVarResponse = ModQuizGetAttemptReviewWithHttpInfo(modQuizGetAttemptReviewRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns review information for the given finished attempt, can be used by users or teachers. Returns review information for the given finished attempt, can be used by users or teachers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetAttemptReview200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptReview200Response> ModQuizGetAttemptReviewWithHttpInfo(ModQuizGetAttemptReviewRequest modQuizGetAttemptReviewRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizGetAttemptReviewRequest' is set
            if (modQuizGetAttemptReviewRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetAttemptReviewRequest' when calling ModQuizApi->ModQuizGetAttemptReview");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetAttemptReviewRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetAttemptReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizGetAttemptReview200Response>("/mod_quiz_get_attempt_review", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetAttemptReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns review information for the given finished attempt, can be used by users or teachers. Returns review information for the given finished attempt, can be used by users or teachers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetAttemptReview200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizGetAttemptReview200Response> ModQuizGetAttemptReviewAsync(ModQuizGetAttemptReviewRequest modQuizGetAttemptReviewRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptReview200Response> localVarResponse = await ModQuizGetAttemptReviewWithHttpInfoAsync(modQuizGetAttemptReviewRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns review information for the given finished attempt, can be used by users or teachers. Returns review information for the given finished attempt, can be used by users or teachers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetAttemptReview200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptReview200Response>> ModQuizGetAttemptReviewWithHttpInfoAsync(ModQuizGetAttemptReviewRequest modQuizGetAttemptReviewRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizGetAttemptReviewRequest' is set
            if (modQuizGetAttemptReviewRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetAttemptReviewRequest' when calling ModQuizApi->ModQuizGetAttemptReview");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetAttemptReviewRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetAttemptReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizGetAttemptReview200Response>("/mod_quiz_get_attempt_review", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetAttemptReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a summary of a quiz attempt before it is submitted. Returns a summary of a quiz attempt before it is submitted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetAttemptSummary200Response</returns>
        public ModQuizGetAttemptSummary200Response ModQuizGetAttemptSummary(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptSummary200Response> localVarResponse = ModQuizGetAttemptSummaryWithHttpInfo(modQuizGetAttemptSummaryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a summary of a quiz attempt before it is submitted. Returns a summary of a quiz attempt before it is submitted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetAttemptSummary200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptSummary200Response> ModQuizGetAttemptSummaryWithHttpInfo(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizGetAttemptSummaryRequest' is set
            if (modQuizGetAttemptSummaryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetAttemptSummaryRequest' when calling ModQuizApi->ModQuizGetAttemptSummary");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetAttemptSummaryRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetAttemptSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizGetAttemptSummary200Response>("/mod_quiz_get_attempt_summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetAttemptSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a summary of a quiz attempt before it is submitted. Returns a summary of a quiz attempt before it is submitted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetAttemptSummary200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizGetAttemptSummary200Response> ModQuizGetAttemptSummaryAsync(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptSummary200Response> localVarResponse = await ModQuizGetAttemptSummaryWithHttpInfoAsync(modQuizGetAttemptSummaryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a summary of a quiz attempt before it is submitted. Returns a summary of a quiz attempt before it is submitted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetAttemptSummary200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizGetAttemptSummary200Response>> ModQuizGetAttemptSummaryWithHttpInfoAsync(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizGetAttemptSummaryRequest' is set
            if (modQuizGetAttemptSummaryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetAttemptSummaryRequest' when calling ModQuizApi->ModQuizGetAttemptSummary");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetAttemptSummaryRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetAttemptSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizGetAttemptSummary200Response>("/mod_quiz_get_attempt_summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetAttemptSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Combines the review options from a number of different quiz attempts. Combines the review options from a number of different quiz attempts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetCombinedReviewOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetCombinedReviewOptions200Response</returns>
        public ModQuizGetCombinedReviewOptions200Response ModQuizGetCombinedReviewOptions(ModQuizGetCombinedReviewOptionsRequest modQuizGetCombinedReviewOptionsRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetCombinedReviewOptions200Response> localVarResponse = ModQuizGetCombinedReviewOptionsWithHttpInfo(modQuizGetCombinedReviewOptionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Combines the review options from a number of different quiz attempts. Combines the review options from a number of different quiz attempts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetCombinedReviewOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetCombinedReviewOptions200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizGetCombinedReviewOptions200Response> ModQuizGetCombinedReviewOptionsWithHttpInfo(ModQuizGetCombinedReviewOptionsRequest modQuizGetCombinedReviewOptionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizGetCombinedReviewOptionsRequest' is set
            if (modQuizGetCombinedReviewOptionsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetCombinedReviewOptionsRequest' when calling ModQuizApi->ModQuizGetCombinedReviewOptions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetCombinedReviewOptionsRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetCombinedReviewOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizGetCombinedReviewOptions200Response>("/mod_quiz_get_combined_review_options", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetCombinedReviewOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Combines the review options from a number of different quiz attempts. Combines the review options from a number of different quiz attempts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetCombinedReviewOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetCombinedReviewOptions200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizGetCombinedReviewOptions200Response> ModQuizGetCombinedReviewOptionsAsync(ModQuizGetCombinedReviewOptionsRequest modQuizGetCombinedReviewOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetCombinedReviewOptions200Response> localVarResponse = await ModQuizGetCombinedReviewOptionsWithHttpInfoAsync(modQuizGetCombinedReviewOptionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Combines the review options from a number of different quiz attempts. Combines the review options from a number of different quiz attempts.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetCombinedReviewOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetCombinedReviewOptions200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizGetCombinedReviewOptions200Response>> ModQuizGetCombinedReviewOptionsWithHttpInfoAsync(ModQuizGetCombinedReviewOptionsRequest modQuizGetCombinedReviewOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizGetCombinedReviewOptionsRequest' is set
            if (modQuizGetCombinedReviewOptionsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetCombinedReviewOptionsRequest' when calling ModQuizApi->ModQuizGetCombinedReviewOptions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetCombinedReviewOptionsRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetCombinedReviewOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizGetCombinedReviewOptions200Response>("/mod_quiz_get_combined_review_options", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetCombinedReviewOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return access information for a given quiz. Return access information for a given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetQuizAccessInformation200Response</returns>
        public ModQuizGetQuizAccessInformation200Response ModQuizGetQuizAccessInformation(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizAccessInformation200Response> localVarResponse = ModQuizGetQuizAccessInformationWithHttpInfo(modQuizGetQuizAccessInformationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return access information for a given quiz. Return access information for a given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetQuizAccessInformation200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizAccessInformation200Response> ModQuizGetQuizAccessInformationWithHttpInfo(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizGetQuizAccessInformationRequest' is set
            if (modQuizGetQuizAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetQuizAccessInformationRequest' when calling ModQuizApi->ModQuizGetQuizAccessInformation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetQuizAccessInformationRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetQuizAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizGetQuizAccessInformation200Response>("/mod_quiz_get_quiz_access_information", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetQuizAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return access information for a given quiz. Return access information for a given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetQuizAccessInformation200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizGetQuizAccessInformation200Response> ModQuizGetQuizAccessInformationAsync(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizAccessInformation200Response> localVarResponse = await ModQuizGetQuizAccessInformationWithHttpInfoAsync(modQuizGetQuizAccessInformationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return access information for a given quiz. Return access information for a given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetQuizAccessInformation200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizAccessInformation200Response>> ModQuizGetQuizAccessInformationWithHttpInfoAsync(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizGetQuizAccessInformationRequest' is set
            if (modQuizGetQuizAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetQuizAccessInformationRequest' when calling ModQuizApi->ModQuizGetQuizAccessInformation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetQuizAccessInformationRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetQuizAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizGetQuizAccessInformation200Response>("/mod_quiz_get_quiz_access_information", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetQuizAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the feedback text that should be show to a student who got the given grade in the given quiz. Get the feedback text that should be show to a student who got the given grade in the given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizFeedbackForGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetQuizFeedbackForGrade200Response</returns>
        public ModQuizGetQuizFeedbackForGrade200Response ModQuizGetQuizFeedbackForGrade(ModQuizGetQuizFeedbackForGradeRequest modQuizGetQuizFeedbackForGradeRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizFeedbackForGrade200Response> localVarResponse = ModQuizGetQuizFeedbackForGradeWithHttpInfo(modQuizGetQuizFeedbackForGradeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the feedback text that should be show to a student who got the given grade in the given quiz. Get the feedback text that should be show to a student who got the given grade in the given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizFeedbackForGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetQuizFeedbackForGrade200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizFeedbackForGrade200Response> ModQuizGetQuizFeedbackForGradeWithHttpInfo(ModQuizGetQuizFeedbackForGradeRequest modQuizGetQuizFeedbackForGradeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizGetQuizFeedbackForGradeRequest' is set
            if (modQuizGetQuizFeedbackForGradeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetQuizFeedbackForGradeRequest' when calling ModQuizApi->ModQuizGetQuizFeedbackForGrade");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetQuizFeedbackForGradeRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetQuizFeedbackForGrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizGetQuizFeedbackForGrade200Response>("/mod_quiz_get_quiz_feedback_for_grade", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetQuizFeedbackForGrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the feedback text that should be show to a student who got the given grade in the given quiz. Get the feedback text that should be show to a student who got the given grade in the given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizFeedbackForGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetQuizFeedbackForGrade200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizGetQuizFeedbackForGrade200Response> ModQuizGetQuizFeedbackForGradeAsync(ModQuizGetQuizFeedbackForGradeRequest modQuizGetQuizFeedbackForGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizFeedbackForGrade200Response> localVarResponse = await ModQuizGetQuizFeedbackForGradeWithHttpInfoAsync(modQuizGetQuizFeedbackForGradeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the feedback text that should be show to a student who got the given grade in the given quiz. Get the feedback text that should be show to a student who got the given grade in the given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizFeedbackForGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetQuizFeedbackForGrade200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizFeedbackForGrade200Response>> ModQuizGetQuizFeedbackForGradeWithHttpInfoAsync(ModQuizGetQuizFeedbackForGradeRequest modQuizGetQuizFeedbackForGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizGetQuizFeedbackForGradeRequest' is set
            if (modQuizGetQuizFeedbackForGradeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetQuizFeedbackForGradeRequest' when calling ModQuizApi->ModQuizGetQuizFeedbackForGrade");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetQuizFeedbackForGradeRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetQuizFeedbackForGrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizGetQuizFeedbackForGrade200Response>("/mod_quiz_get_quiz_feedback_for_grade", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetQuizFeedbackForGrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the potential question types that would be required for a given quiz. Return the potential question types that would be required for a given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetQuizRequiredQtypes200Response</returns>
        public ModQuizGetQuizRequiredQtypes200Response ModQuizGetQuizRequiredQtypes(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizRequiredQtypes200Response> localVarResponse = ModQuizGetQuizRequiredQtypesWithHttpInfo(modQuizGetQuizAccessInformationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the potential question types that would be required for a given quiz. Return the potential question types that would be required for a given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetQuizRequiredQtypes200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizRequiredQtypes200Response> ModQuizGetQuizRequiredQtypesWithHttpInfo(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizGetQuizAccessInformationRequest' is set
            if (modQuizGetQuizAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetQuizAccessInformationRequest' when calling ModQuizApi->ModQuizGetQuizRequiredQtypes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetQuizAccessInformationRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetQuizRequiredQtypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizGetQuizRequiredQtypes200Response>("/mod_quiz_get_quiz_required_qtypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetQuizRequiredQtypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the potential question types that would be required for a given quiz. Return the potential question types that would be required for a given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetQuizRequiredQtypes200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizGetQuizRequiredQtypes200Response> ModQuizGetQuizRequiredQtypesAsync(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizRequiredQtypes200Response> localVarResponse = await ModQuizGetQuizRequiredQtypesWithHttpInfoAsync(modQuizGetQuizAccessInformationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the potential question types that would be required for a given quiz. Return the potential question types that would be required for a given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetQuizRequiredQtypes200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizRequiredQtypes200Response>> ModQuizGetQuizRequiredQtypesWithHttpInfoAsync(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizGetQuizAccessInformationRequest' is set
            if (modQuizGetQuizAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetQuizAccessInformationRequest' when calling ModQuizApi->ModQuizGetQuizRequiredQtypes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetQuizAccessInformationRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetQuizRequiredQtypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizGetQuizRequiredQtypes200Response>("/mod_quiz_get_quiz_required_qtypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetQuizRequiredQtypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned. Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetQuizzesByCourses200Response</returns>
        public ModQuizGetQuizzesByCourses200Response ModQuizGetQuizzesByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizzesByCourses200Response> localVarResponse = ModQuizGetQuizzesByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned. Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetQuizzesByCourses200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizzesByCourses200Response> ModQuizGetQuizzesByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModQuizApi->ModQuizGetQuizzesByCourses");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetQuizzesByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizGetQuizzesByCourses200Response>("/mod_quiz_get_quizzes_by_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetQuizzesByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned. Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetQuizzesByCourses200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizGetQuizzesByCourses200Response> ModQuizGetQuizzesByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizzesByCourses200Response> localVarResponse = await ModQuizGetQuizzesByCoursesWithHttpInfoAsync(modChatGetChatsByCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned. Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetQuizzesByCourses200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizGetQuizzesByCourses200Response>> ModQuizGetQuizzesByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModQuizApi->ModQuizGetQuizzesByCourses");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetQuizzesByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizGetQuizzesByCourses200Response>("/mod_quiz_get_quizzes_by_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetQuizzesByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message. Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetReopenAttemptConfirmationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModQuizGetReopenAttemptConfirmation(ModQuizGetReopenAttemptConfirmationRequest modQuizGetReopenAttemptConfirmationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = ModQuizGetReopenAttemptConfirmationWithHttpInfo(modQuizGetReopenAttemptConfirmationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message. Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetReopenAttemptConfirmationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ModQuizGetReopenAttemptConfirmationWithHttpInfo(ModQuizGetReopenAttemptConfirmationRequest modQuizGetReopenAttemptConfirmationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizGetReopenAttemptConfirmationRequest' is set
            if (modQuizGetReopenAttemptConfirmationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetReopenAttemptConfirmationRequest' when calling ModQuizApi->ModQuizGetReopenAttemptConfirmation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetReopenAttemptConfirmationRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetReopenAttemptConfirmation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_quiz_get_reopen_attempt_confirmation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetReopenAttemptConfirmation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message. Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetReopenAttemptConfirmationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModQuizGetReopenAttemptConfirmationAsync(ModQuizGetReopenAttemptConfirmationRequest modQuizGetReopenAttemptConfirmationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await ModQuizGetReopenAttemptConfirmationWithHttpInfoAsync(modQuizGetReopenAttemptConfirmationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message. Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetReopenAttemptConfirmationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ModQuizGetReopenAttemptConfirmationWithHttpInfoAsync(ModQuizGetReopenAttemptConfirmationRequest modQuizGetReopenAttemptConfirmationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizGetReopenAttemptConfirmationRequest' is set
            if (modQuizGetReopenAttemptConfirmationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetReopenAttemptConfirmationRequest' when calling ModQuizApi->ModQuizGetReopenAttemptConfirmation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetReopenAttemptConfirmationRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetReopenAttemptConfirmation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_quiz_get_reopen_attempt_confirmation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetReopenAttemptConfirmation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a list of attempts for the given quiz and user. Return a list of attempts for the given quiz and user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetUserAttempts200Response</returns>
        public ModQuizGetUserAttempts200Response ModQuizGetUserAttempts(ModQuizGetUserAttemptsRequest modQuizGetUserAttemptsRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetUserAttempts200Response> localVarResponse = ModQuizGetUserAttemptsWithHttpInfo(modQuizGetUserAttemptsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a list of attempts for the given quiz and user. Return a list of attempts for the given quiz and user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetUserAttempts200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizGetUserAttempts200Response> ModQuizGetUserAttemptsWithHttpInfo(ModQuizGetUserAttemptsRequest modQuizGetUserAttemptsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizGetUserAttemptsRequest' is set
            if (modQuizGetUserAttemptsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetUserAttemptsRequest' when calling ModQuizApi->ModQuizGetUserAttempts");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetUserAttemptsRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetUserAttempts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizGetUserAttempts200Response>("/mod_quiz_get_user_attempts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetUserAttempts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return a list of attempts for the given quiz and user. Return a list of attempts for the given quiz and user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetUserAttempts200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizGetUserAttempts200Response> ModQuizGetUserAttemptsAsync(ModQuizGetUserAttemptsRequest modQuizGetUserAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetUserAttempts200Response> localVarResponse = await ModQuizGetUserAttemptsWithHttpInfoAsync(modQuizGetUserAttemptsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return a list of attempts for the given quiz and user. Return a list of attempts for the given quiz and user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetUserAttempts200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizGetUserAttempts200Response>> ModQuizGetUserAttemptsWithHttpInfoAsync(ModQuizGetUserAttemptsRequest modQuizGetUserAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizGetUserAttemptsRequest' is set
            if (modQuizGetUserAttemptsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetUserAttemptsRequest' when calling ModQuizApi->ModQuizGetUserAttempts");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetUserAttemptsRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetUserAttempts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizGetUserAttempts200Response>("/mod_quiz_get_user_attempts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetUserAttempts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the best current grade for the given user on a quiz. Get the best current grade for the given user on a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserBestGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizGetUserBestGrade200Response</returns>
        public ModQuizGetUserBestGrade200Response ModQuizGetUserBestGrade(ModQuizGetUserBestGradeRequest modQuizGetUserBestGradeRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetUserBestGrade200Response> localVarResponse = ModQuizGetUserBestGradeWithHttpInfo(modQuizGetUserBestGradeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the best current grade for the given user on a quiz. Get the best current grade for the given user on a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserBestGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizGetUserBestGrade200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizGetUserBestGrade200Response> ModQuizGetUserBestGradeWithHttpInfo(ModQuizGetUserBestGradeRequest modQuizGetUserBestGradeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizGetUserBestGradeRequest' is set
            if (modQuizGetUserBestGradeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetUserBestGradeRequest' when calling ModQuizApi->ModQuizGetUserBestGrade");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetUserBestGradeRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetUserBestGrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizGetUserBestGrade200Response>("/mod_quiz_get_user_best_grade", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetUserBestGrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the best current grade for the given user on a quiz. Get the best current grade for the given user on a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserBestGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizGetUserBestGrade200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizGetUserBestGrade200Response> ModQuizGetUserBestGradeAsync(ModQuizGetUserBestGradeRequest modQuizGetUserBestGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizGetUserBestGrade200Response> localVarResponse = await ModQuizGetUserBestGradeWithHttpInfoAsync(modQuizGetUserBestGradeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the best current grade for the given user on a quiz. Get the best current grade for the given user on a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetUserBestGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizGetUserBestGrade200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizGetUserBestGrade200Response>> ModQuizGetUserBestGradeWithHttpInfoAsync(ModQuizGetUserBestGradeRequest modQuizGetUserBestGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizGetUserBestGradeRequest' is set
            if (modQuizGetUserBestGradeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetUserBestGradeRequest' when calling ModQuizApi->ModQuizGetUserBestGrade");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetUserBestGradeRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizGetUserBestGrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizGetUserBestGrade200Response>("/mod_quiz_get_user_best_grade", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizGetUserBestGrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process responses during an attempt at a quiz and also deals with attempts finishing. Process responses during an attempt at a quiz and also deals with attempts finishing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizProcessAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizProcessAttempt200Response</returns>
        public ModQuizProcessAttempt200Response ModQuizProcessAttempt(ModQuizProcessAttemptRequest modQuizProcessAttemptRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizProcessAttempt200Response> localVarResponse = ModQuizProcessAttemptWithHttpInfo(modQuizProcessAttemptRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process responses during an attempt at a quiz and also deals with attempts finishing. Process responses during an attempt at a quiz and also deals with attempts finishing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizProcessAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizProcessAttempt200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizProcessAttempt200Response> ModQuizProcessAttemptWithHttpInfo(ModQuizProcessAttemptRequest modQuizProcessAttemptRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizProcessAttemptRequest' is set
            if (modQuizProcessAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizProcessAttemptRequest' when calling ModQuizApi->ModQuizProcessAttempt");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizProcessAttemptRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizProcessAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizProcessAttempt200Response>("/mod_quiz_process_attempt", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizProcessAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process responses during an attempt at a quiz and also deals with attempts finishing. Process responses during an attempt at a quiz and also deals with attempts finishing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizProcessAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizProcessAttempt200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizProcessAttempt200Response> ModQuizProcessAttemptAsync(ModQuizProcessAttemptRequest modQuizProcessAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizProcessAttempt200Response> localVarResponse = await ModQuizProcessAttemptWithHttpInfoAsync(modQuizProcessAttemptRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process responses during an attempt at a quiz and also deals with attempts finishing. Process responses during an attempt at a quiz and also deals with attempts finishing.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizProcessAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizProcessAttempt200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizProcessAttempt200Response>> ModQuizProcessAttemptWithHttpInfoAsync(ModQuizProcessAttemptRequest modQuizProcessAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizProcessAttemptRequest' is set
            if (modQuizProcessAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizProcessAttemptRequest' when calling ModQuizApi->ModQuizProcessAttempt");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizProcessAttemptRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizProcessAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizProcessAttempt200Response>("/mod_quiz_process_attempt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizProcessAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Re-open an attempt that is currently in the never submitted state. Re-open an attempt that is currently in the never submitted state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizReopenAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModQuizReopenAttempt(ModQuizReopenAttemptRequest modQuizReopenAttemptRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = ModQuizReopenAttemptWithHttpInfo(modQuizReopenAttemptRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Re-open an attempt that is currently in the never submitted state. Re-open an attempt that is currently in the never submitted state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizReopenAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ModQuizReopenAttemptWithHttpInfo(ModQuizReopenAttemptRequest modQuizReopenAttemptRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizReopenAttemptRequest' is set
            if (modQuizReopenAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizReopenAttemptRequest' when calling ModQuizApi->ModQuizReopenAttempt");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizReopenAttemptRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizReopenAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_quiz_reopen_attempt", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizReopenAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Re-open an attempt that is currently in the never submitted state. Re-open an attempt that is currently in the never submitted state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizReopenAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModQuizReopenAttemptAsync(ModQuizReopenAttemptRequest modQuizReopenAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await ModQuizReopenAttemptWithHttpInfoAsync(modQuizReopenAttemptRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Re-open an attempt that is currently in the never submitted state. Re-open an attempt that is currently in the never submitted state.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizReopenAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ModQuizReopenAttemptWithHttpInfoAsync(ModQuizReopenAttemptRequest modQuizReopenAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizReopenAttemptRequest' is set
            if (modQuizReopenAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizReopenAttemptRequest' when calling ModQuizApi->ModQuizReopenAttempt");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizReopenAttemptRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizReopenAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_quiz_reopen_attempt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizReopenAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature. Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSaveAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModQuizSaveAttempt(ModQuizSaveAttemptRequest modQuizSaveAttemptRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModQuizSaveAttemptWithHttpInfo(modQuizSaveAttemptRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature. Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSaveAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModQuizSaveAttemptWithHttpInfo(ModQuizSaveAttemptRequest modQuizSaveAttemptRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizSaveAttemptRequest' is set
            if (modQuizSaveAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizSaveAttemptRequest' when calling ModQuizApi->ModQuizSaveAttempt");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizSaveAttemptRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizSaveAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_quiz_save_attempt", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizSaveAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature. Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSaveAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModQuizSaveAttemptAsync(ModQuizSaveAttemptRequest modQuizSaveAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModQuizSaveAttemptWithHttpInfoAsync(modQuizSaveAttemptRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature. Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSaveAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModQuizSaveAttemptWithHttpInfoAsync(ModQuizSaveAttemptRequest modQuizSaveAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizSaveAttemptRequest' is set
            if (modQuizSaveAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizSaveAttemptRequest' when calling ModQuizApi->ModQuizSaveAttempt");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizSaveAttemptRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizSaveAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_quiz_save_attempt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizSaveAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the version of question that would be required for a given quiz. Set the version of question that would be required for a given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSetQuestionVersionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizSetQuestionVersion200Response</returns>
        public ModQuizSetQuestionVersion200Response ModQuizSetQuestionVersion(ModQuizSetQuestionVersionRequest modQuizSetQuestionVersionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizSetQuestionVersion200Response> localVarResponse = ModQuizSetQuestionVersionWithHttpInfo(modQuizSetQuestionVersionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the version of question that would be required for a given quiz. Set the version of question that would be required for a given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSetQuestionVersionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizSetQuestionVersion200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizSetQuestionVersion200Response> ModQuizSetQuestionVersionWithHttpInfo(ModQuizSetQuestionVersionRequest modQuizSetQuestionVersionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizSetQuestionVersionRequest' is set
            if (modQuizSetQuestionVersionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizSetQuestionVersionRequest' when calling ModQuizApi->ModQuizSetQuestionVersion");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizSetQuestionVersionRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizSetQuestionVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizSetQuestionVersion200Response>("/mod_quiz_set_question_version", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizSetQuestionVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the version of question that would be required for a given quiz. Set the version of question that would be required for a given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSetQuestionVersionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizSetQuestionVersion200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizSetQuestionVersion200Response> ModQuizSetQuestionVersionAsync(ModQuizSetQuestionVersionRequest modQuizSetQuestionVersionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizSetQuestionVersion200Response> localVarResponse = await ModQuizSetQuestionVersionWithHttpInfoAsync(modQuizSetQuestionVersionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the version of question that would be required for a given quiz. Set the version of question that would be required for a given quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizSetQuestionVersionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizSetQuestionVersion200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizSetQuestionVersion200Response>> ModQuizSetQuestionVersionWithHttpInfoAsync(ModQuizSetQuestionVersionRequest modQuizSetQuestionVersionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizSetQuestionVersionRequest' is set
            if (modQuizSetQuestionVersionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizSetQuestionVersionRequest' when calling ModQuizApi->ModQuizSetQuestionVersion");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizSetQuestionVersionRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizSetQuestionVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizSetQuestionVersion200Response>("/mod_quiz_set_question_version", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizSetQuestionVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts a new attempt at a quiz. Starts a new attempt at a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizStartAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizStartAttempt200Response</returns>
        public ModQuizStartAttempt200Response ModQuizStartAttempt(ModQuizStartAttemptRequest modQuizStartAttemptRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizStartAttempt200Response> localVarResponse = ModQuizStartAttemptWithHttpInfo(modQuizStartAttemptRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a new attempt at a quiz. Starts a new attempt at a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizStartAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizStartAttempt200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizStartAttempt200Response> ModQuizStartAttemptWithHttpInfo(ModQuizStartAttemptRequest modQuizStartAttemptRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizStartAttemptRequest' is set
            if (modQuizStartAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizStartAttemptRequest' when calling ModQuizApi->ModQuizStartAttempt");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizStartAttemptRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizStartAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizStartAttempt200Response>("/mod_quiz_start_attempt", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizStartAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts a new attempt at a quiz. Starts a new attempt at a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizStartAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizStartAttempt200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizStartAttempt200Response> ModQuizStartAttemptAsync(ModQuizStartAttemptRequest modQuizStartAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizStartAttempt200Response> localVarResponse = await ModQuizStartAttemptWithHttpInfoAsync(modQuizStartAttemptRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts a new attempt at a quiz. Starts a new attempt at a quiz.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizStartAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizStartAttempt200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizStartAttempt200Response>> ModQuizStartAttemptWithHttpInfoAsync(ModQuizStartAttemptRequest modQuizStartAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizStartAttemptRequest' is set
            if (modQuizStartAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizStartAttemptRequest' when calling ModQuizApi->ModQuizStartAttempt");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizStartAttemptRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizStartAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizStartAttempt200Response>("/mod_quiz_start_attempt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizStartAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update filter condition for a random question slot. Update filter condition for a random question slot.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizUpdateFilterConditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModQuizAddRandomQuestions200Response</returns>
        public ModQuizAddRandomQuestions200Response ModQuizUpdateFilterCondition(ModQuizUpdateFilterConditionRequest modQuizUpdateFilterConditionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizAddRandomQuestions200Response> localVarResponse = ModQuizUpdateFilterConditionWithHttpInfo(modQuizUpdateFilterConditionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update filter condition for a random question slot. Update filter condition for a random question slot.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizUpdateFilterConditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModQuizAddRandomQuestions200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModQuizAddRandomQuestions200Response> ModQuizUpdateFilterConditionWithHttpInfo(ModQuizUpdateFilterConditionRequest modQuizUpdateFilterConditionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizUpdateFilterConditionRequest' is set
            if (modQuizUpdateFilterConditionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizUpdateFilterConditionRequest' when calling ModQuizApi->ModQuizUpdateFilterCondition");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizUpdateFilterConditionRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizUpdateFilterCondition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModQuizAddRandomQuestions200Response>("/mod_quiz_update_filter_condition", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizUpdateFilterCondition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update filter condition for a random question slot. Update filter condition for a random question slot.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizUpdateFilterConditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModQuizAddRandomQuestions200Response</returns>
        public async System.Threading.Tasks.Task<ModQuizAddRandomQuestions200Response> ModQuizUpdateFilterConditionAsync(ModQuizUpdateFilterConditionRequest modQuizUpdateFilterConditionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModQuizAddRandomQuestions200Response> localVarResponse = await ModQuizUpdateFilterConditionWithHttpInfoAsync(modQuizUpdateFilterConditionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update filter condition for a random question slot. Update filter condition for a random question slot.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizUpdateFilterConditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModQuizAddRandomQuestions200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModQuizAddRandomQuestions200Response>> ModQuizUpdateFilterConditionWithHttpInfoAsync(ModQuizUpdateFilterConditionRequest modQuizUpdateFilterConditionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizUpdateFilterConditionRequest' is set
            if (modQuizUpdateFilterConditionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizUpdateFilterConditionRequest' when calling ModQuizApi->ModQuizUpdateFilterCondition");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizUpdateFilterConditionRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizUpdateFilterCondition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModQuizAddRandomQuestions200Response>("/mod_quiz_update_filter_condition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizUpdateFilterCondition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the attempt viewed event. Trigger the attempt viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModQuizViewAttempt(ModQuizViewAttemptRequest modQuizViewAttemptRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModQuizViewAttemptWithHttpInfo(modQuizViewAttemptRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the attempt viewed event. Trigger the attempt viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModQuizViewAttemptWithHttpInfo(ModQuizViewAttemptRequest modQuizViewAttemptRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizViewAttemptRequest' is set
            if (modQuizViewAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizViewAttemptRequest' when calling ModQuizApi->ModQuizViewAttempt");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizViewAttemptRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizViewAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_quiz_view_attempt", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizViewAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the attempt viewed event. Trigger the attempt viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModQuizViewAttemptAsync(ModQuizViewAttemptRequest modQuizViewAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModQuizViewAttemptWithHttpInfoAsync(modQuizViewAttemptRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the attempt viewed event. Trigger the attempt viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModQuizViewAttemptWithHttpInfoAsync(ModQuizViewAttemptRequest modQuizViewAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizViewAttemptRequest' is set
            if (modQuizViewAttemptRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizViewAttemptRequest' when calling ModQuizApi->ModQuizViewAttempt");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizViewAttemptRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizViewAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_quiz_view_attempt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizViewAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the attempt reviewed event. Trigger the attempt reviewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModQuizViewAttemptReview(ModQuizViewAttemptReviewRequest modQuizViewAttemptReviewRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModQuizViewAttemptReviewWithHttpInfo(modQuizViewAttemptReviewRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the attempt reviewed event. Trigger the attempt reviewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModQuizViewAttemptReviewWithHttpInfo(ModQuizViewAttemptReviewRequest modQuizViewAttemptReviewRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizViewAttemptReviewRequest' is set
            if (modQuizViewAttemptReviewRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizViewAttemptReviewRequest' when calling ModQuizApi->ModQuizViewAttemptReview");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizViewAttemptReviewRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizViewAttemptReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_quiz_view_attempt_review", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizViewAttemptReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the attempt reviewed event. Trigger the attempt reviewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModQuizViewAttemptReviewAsync(ModQuizViewAttemptReviewRequest modQuizViewAttemptReviewRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModQuizViewAttemptReviewWithHttpInfoAsync(modQuizViewAttemptReviewRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the attempt reviewed event. Trigger the attempt reviewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizViewAttemptReviewRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModQuizViewAttemptReviewWithHttpInfoAsync(ModQuizViewAttemptReviewRequest modQuizViewAttemptReviewRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizViewAttemptReviewRequest' is set
            if (modQuizViewAttemptReviewRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizViewAttemptReviewRequest' when calling ModQuizApi->ModQuizViewAttemptReview");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizViewAttemptReviewRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizViewAttemptReview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_quiz_view_attempt_review", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizViewAttemptReview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the attempt summary viewed event. Trigger the attempt summary viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModQuizViewAttemptSummary(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModQuizViewAttemptSummaryWithHttpInfo(modQuizGetAttemptSummaryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the attempt summary viewed event. Trigger the attempt summary viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModQuizViewAttemptSummaryWithHttpInfo(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizGetAttemptSummaryRequest' is set
            if (modQuizGetAttemptSummaryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetAttemptSummaryRequest' when calling ModQuizApi->ModQuizViewAttemptSummary");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetAttemptSummaryRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizViewAttemptSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_quiz_view_attempt_summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizViewAttemptSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the attempt summary viewed event. Trigger the attempt summary viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModQuizViewAttemptSummaryAsync(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModQuizViewAttemptSummaryWithHttpInfoAsync(modQuizGetAttemptSummaryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the attempt summary viewed event. Trigger the attempt summary viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetAttemptSummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModQuizViewAttemptSummaryWithHttpInfoAsync(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizGetAttemptSummaryRequest' is set
            if (modQuizGetAttemptSummaryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetAttemptSummaryRequest' when calling ModQuizApi->ModQuizViewAttemptSummary");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetAttemptSummaryRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizViewAttemptSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_quiz_view_attempt_summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizViewAttemptSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModQuizViewQuiz(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModQuizViewQuizWithHttpInfo(modQuizGetQuizAccessInformationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModQuizViewQuizWithHttpInfo(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modQuizGetQuizAccessInformationRequest' is set
            if (modQuizGetQuizAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetQuizAccessInformationRequest' when calling ModQuizApi->ModQuizViewQuiz");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetQuizAccessInformationRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizViewQuiz";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_quiz_view_quiz", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizViewQuiz", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModQuizViewQuizAsync(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModQuizViewQuizWithHttpInfoAsync(modQuizGetQuizAccessInformationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modQuizGetQuizAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModQuizViewQuizWithHttpInfoAsync(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modQuizGetQuizAccessInformationRequest' is set
            if (modQuizGetQuizAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modQuizGetQuizAccessInformationRequest' when calling ModQuizApi->ModQuizViewQuiz");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modQuizGetQuizAccessInformationRequest;

            localVarRequestOptions.Operation = "ModQuizApi.ModQuizViewQuiz";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_quiz_view_quiz", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModQuizViewQuiz", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
