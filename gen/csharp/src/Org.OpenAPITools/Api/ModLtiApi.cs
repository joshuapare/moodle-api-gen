/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModLtiApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a tool proxy
        /// </summary>
        /// <remarks>
        /// Create a tool proxy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiCreateToolProxy200Response</returns>
        ModLtiCreateToolProxy200Response ModLtiCreateToolProxy(ModLtiCreateToolProxyRequest modLtiCreateToolProxyRequest, int operationIndex = 0);

        /// <summary>
        /// Create a tool proxy
        /// </summary>
        /// <remarks>
        /// Create a tool proxy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiCreateToolProxy200Response</returns>
        ApiResponse<ModLtiCreateToolProxy200Response> ModLtiCreateToolProxyWithHttpInfo(ModLtiCreateToolProxyRequest modLtiCreateToolProxyRequest, int operationIndex = 0);
        /// <summary>
        /// Create a tool type
        /// </summary>
        /// <remarks>
        /// Create a tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiCreateToolType200Response</returns>
        ModLtiCreateToolType200Response ModLtiCreateToolType(ModLtiCreateToolTypeRequest modLtiCreateToolTypeRequest, int operationIndex = 0);

        /// <summary>
        /// Create a tool type
        /// </summary>
        /// <remarks>
        /// Create a tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiCreateToolType200Response</returns>
        ApiResponse<ModLtiCreateToolType200Response> ModLtiCreateToolTypeWithHttpInfo(ModLtiCreateToolTypeRequest modLtiCreateToolTypeRequest, int operationIndex = 0);
        /// <summary>
        /// Delete a course tool type
        /// </summary>
        /// <remarks>
        /// Delete a course tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteCourseToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModLtiDeleteCourseToolType(ModLtiDeleteCourseToolTypeRequest modLtiDeleteCourseToolTypeRequest, int operationIndex = 0);

        /// <summary>
        /// Delete a course tool type
        /// </summary>
        /// <remarks>
        /// Delete a course tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteCourseToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModLtiDeleteCourseToolTypeWithHttpInfo(ModLtiDeleteCourseToolTypeRequest modLtiDeleteCourseToolTypeRequest, int operationIndex = 0);
        /// <summary>
        /// Delete a tool proxy
        /// </summary>
        /// <remarks>
        /// Delete a tool proxy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiDeleteToolProxy200Response</returns>
        ModLtiDeleteToolProxy200Response ModLtiDeleteToolProxy(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0);

        /// <summary>
        /// Delete a tool proxy
        /// </summary>
        /// <remarks>
        /// Delete a tool proxy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiDeleteToolProxy200Response</returns>
        ApiResponse<ModLtiDeleteToolProxy200Response> ModLtiDeleteToolProxyWithHttpInfo(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0);
        /// <summary>
        /// Delete a tool type
        /// </summary>
        /// <remarks>
        /// Delete a tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiDeleteToolTypeRequest</returns>
        ModLtiDeleteToolTypeRequest ModLtiDeleteToolType(ModLtiDeleteToolTypeRequest modLtiDeleteToolTypeRequest, int operationIndex = 0);

        /// <summary>
        /// Delete a tool type
        /// </summary>
        /// <remarks>
        /// Delete a tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiDeleteToolTypeRequest</returns>
        ApiResponse<ModLtiDeleteToolTypeRequest> ModLtiDeleteToolTypeWithHttpInfo(ModLtiDeleteToolTypeRequest modLtiDeleteToolTypeRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiGetLtisByCourses200Response</returns>
        ModLtiGetLtisByCourses200Response ModLtiGetLtisByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiGetLtisByCourses200Response</returns>
        ApiResponse<ModLtiGetLtisByCourses200Response> ModLtiGetLtisByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Return the launch data for a given external tool.
        /// </summary>
        /// <remarks>
        /// Return the launch data for a given external tool.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolLaunchDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiGetToolLaunchData200Response</returns>
        ModLtiGetToolLaunchData200Response ModLtiGetToolLaunchData(ModLtiGetToolLaunchDataRequest modLtiGetToolLaunchDataRequest, int operationIndex = 0);

        /// <summary>
        /// Return the launch data for a given external tool.
        /// </summary>
        /// <remarks>
        /// Return the launch data for a given external tool.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolLaunchDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiGetToolLaunchData200Response</returns>
        ApiResponse<ModLtiGetToolLaunchData200Response> ModLtiGetToolLaunchDataWithHttpInfo(ModLtiGetToolLaunchDataRequest modLtiGetToolLaunchDataRequest, int operationIndex = 0);
        /// <summary>
        /// Get a list of the tool proxies
        /// </summary>
        /// <remarks>
        /// Get a list of the tool proxies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModLtiGetToolProxies(ModLtiGetToolProxiesRequest modLtiGetToolProxiesRequest, int operationIndex = 0);

        /// <summary>
        /// Get a list of the tool proxies
        /// </summary>
        /// <remarks>
        /// Get a list of the tool proxies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModLtiGetToolProxiesWithHttpInfo(ModLtiGetToolProxiesRequest modLtiGetToolProxiesRequest, int operationIndex = 0);
        /// <summary>
        /// Get a registration request for a tool proxy
        /// </summary>
        /// <remarks>
        /// Get a registration request for a tool proxy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiGetToolProxyRegistrationRequest200Response</returns>
        ModLtiGetToolProxyRegistrationRequest200Response ModLtiGetToolProxyRegistrationRequest(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0);

        /// <summary>
        /// Get a registration request for a tool proxy
        /// </summary>
        /// <remarks>
        /// Get a registration request for a tool proxy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiGetToolProxyRegistrationRequest200Response</returns>
        ApiResponse<ModLtiGetToolProxyRegistrationRequest200Response> ModLtiGetToolProxyRegistrationRequestWithHttpInfo(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0);
        /// <summary>
        /// Get a list of the tool types
        /// </summary>
        /// <remarks>
        /// Get a list of the tool types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModLtiGetToolTypes(ModLtiGetToolTypesRequest modLtiGetToolTypesRequest, int operationIndex = 0);

        /// <summary>
        /// Get a list of the tool types
        /// </summary>
        /// <remarks>
        /// Get a list of the tool types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModLtiGetToolTypesWithHttpInfo(ModLtiGetToolTypesRequest modLtiGetToolTypesRequest, int operationIndex = 0);
        /// <summary>
        /// Get a list of the tool types and tool proxies
        /// </summary>
        /// <remarks>
        /// Get a list of the tool types and tool proxies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiGetToolTypesAndProxies200Response</returns>
        ModLtiGetToolTypesAndProxies200Response ModLtiGetToolTypesAndProxies(ModLtiGetToolTypesAndProxiesRequest modLtiGetToolTypesAndProxiesRequest, int operationIndex = 0);

        /// <summary>
        /// Get a list of the tool types and tool proxies
        /// </summary>
        /// <remarks>
        /// Get a list of the tool types and tool proxies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiGetToolTypesAndProxies200Response</returns>
        ApiResponse<ModLtiGetToolTypesAndProxies200Response> ModLtiGetToolTypesAndProxiesWithHttpInfo(ModLtiGetToolTypesAndProxiesRequest modLtiGetToolTypesAndProxiesRequest, int operationIndex = 0);
        /// <summary>
        /// Get total number of the tool types and tool proxies
        /// </summary>
        /// <remarks>
        /// Get total number of the tool types and tool proxies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiGetToolTypesAndProxiesCount200Response</returns>
        ModLtiGetToolTypesAndProxiesCount200Response ModLtiGetToolTypesAndProxiesCount(ModLtiGetToolTypesAndProxiesCountRequest modLtiGetToolTypesAndProxiesCountRequest, int operationIndex = 0);

        /// <summary>
        /// Get total number of the tool types and tool proxies
        /// </summary>
        /// <remarks>
        /// Get total number of the tool types and tool proxies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiGetToolTypesAndProxiesCount200Response</returns>
        ApiResponse<ModLtiGetToolTypesAndProxiesCount200Response> ModLtiGetToolTypesAndProxiesCountWithHttpInfo(ModLtiGetToolTypesAndProxiesCountRequest modLtiGetToolTypesAndProxiesCountRequest, int operationIndex = 0);
        /// <summary>
        /// Determine if the given url is for a cartridge
        /// </summary>
        /// <remarks>
        /// Determine if the given url is for a cartridge
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiIsCartridgeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiIsCartridge200Response</returns>
        ModLtiIsCartridge200Response ModLtiIsCartridge(ModLtiIsCartridgeRequest modLtiIsCartridgeRequest, int operationIndex = 0);

        /// <summary>
        /// Determine if the given url is for a cartridge
        /// </summary>
        /// <remarks>
        /// Determine if the given url is for a cartridge
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiIsCartridgeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiIsCartridge200Response</returns>
        ApiResponse<ModLtiIsCartridge200Response> ModLtiIsCartridgeWithHttpInfo(ModLtiIsCartridgeRequest modLtiIsCartridgeRequest, int operationIndex = 0);
        /// <summary>
        /// Toggle showinactivitychooser for a tool type in a course
        /// </summary>
        /// <remarks>
        /// Toggle showinactivitychooser for a tool type in a course
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiToggleShowinactivitychooserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModLtiToggleShowinactivitychooser(ModLtiToggleShowinactivitychooserRequest modLtiToggleShowinactivitychooserRequest, int operationIndex = 0);

        /// <summary>
        /// Toggle showinactivitychooser for a tool type in a course
        /// </summary>
        /// <remarks>
        /// Toggle showinactivitychooser for a tool type in a course
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiToggleShowinactivitychooserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModLtiToggleShowinactivitychooserWithHttpInfo(ModLtiToggleShowinactivitychooserRequest modLtiToggleShowinactivitychooserRequest, int operationIndex = 0);
        /// <summary>
        /// Update a tool type
        /// </summary>
        /// <remarks>
        /// Update a tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiUpdateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiUpdateToolType200Response</returns>
        ModLtiUpdateToolType200Response ModLtiUpdateToolType(ModLtiUpdateToolTypeRequest modLtiUpdateToolTypeRequest, int operationIndex = 0);

        /// <summary>
        /// Update a tool type
        /// </summary>
        /// <remarks>
        /// Update a tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiUpdateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiUpdateToolType200Response</returns>
        ApiResponse<ModLtiUpdateToolType200Response> ModLtiUpdateToolTypeWithHttpInfo(ModLtiUpdateToolTypeRequest modLtiUpdateToolTypeRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiViewLtiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModLtiViewLti(ModLtiViewLtiRequest modLtiViewLtiRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiViewLtiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModLtiViewLtiWithHttpInfo(ModLtiViewLtiRequest modLtiViewLtiRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModLtiApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a tool proxy
        /// </summary>
        /// <remarks>
        /// Create a tool proxy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiCreateToolProxy200Response</returns>
        System.Threading.Tasks.Task<ModLtiCreateToolProxy200Response> ModLtiCreateToolProxyAsync(ModLtiCreateToolProxyRequest modLtiCreateToolProxyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a tool proxy
        /// </summary>
        /// <remarks>
        /// Create a tool proxy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiCreateToolProxy200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLtiCreateToolProxy200Response>> ModLtiCreateToolProxyWithHttpInfoAsync(ModLtiCreateToolProxyRequest modLtiCreateToolProxyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a tool type
        /// </summary>
        /// <remarks>
        /// Create a tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiCreateToolType200Response</returns>
        System.Threading.Tasks.Task<ModLtiCreateToolType200Response> ModLtiCreateToolTypeAsync(ModLtiCreateToolTypeRequest modLtiCreateToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a tool type
        /// </summary>
        /// <remarks>
        /// Create a tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiCreateToolType200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLtiCreateToolType200Response>> ModLtiCreateToolTypeWithHttpInfoAsync(ModLtiCreateToolTypeRequest modLtiCreateToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a course tool type
        /// </summary>
        /// <remarks>
        /// Delete a course tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteCourseToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModLtiDeleteCourseToolTypeAsync(ModLtiDeleteCourseToolTypeRequest modLtiDeleteCourseToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a course tool type
        /// </summary>
        /// <remarks>
        /// Delete a course tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteCourseToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModLtiDeleteCourseToolTypeWithHttpInfoAsync(ModLtiDeleteCourseToolTypeRequest modLtiDeleteCourseToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a tool proxy
        /// </summary>
        /// <remarks>
        /// Delete a tool proxy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiDeleteToolProxy200Response</returns>
        System.Threading.Tasks.Task<ModLtiDeleteToolProxy200Response> ModLtiDeleteToolProxyAsync(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a tool proxy
        /// </summary>
        /// <remarks>
        /// Delete a tool proxy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiDeleteToolProxy200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLtiDeleteToolProxy200Response>> ModLtiDeleteToolProxyWithHttpInfoAsync(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a tool type
        /// </summary>
        /// <remarks>
        /// Delete a tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiDeleteToolTypeRequest</returns>
        System.Threading.Tasks.Task<ModLtiDeleteToolTypeRequest> ModLtiDeleteToolTypeAsync(ModLtiDeleteToolTypeRequest modLtiDeleteToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a tool type
        /// </summary>
        /// <remarks>
        /// Delete a tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiDeleteToolTypeRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLtiDeleteToolTypeRequest>> ModLtiDeleteToolTypeWithHttpInfoAsync(ModLtiDeleteToolTypeRequest modLtiDeleteToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiGetLtisByCourses200Response</returns>
        System.Threading.Tasks.Task<ModLtiGetLtisByCourses200Response> ModLtiGetLtisByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiGetLtisByCourses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLtiGetLtisByCourses200Response>> ModLtiGetLtisByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the launch data for a given external tool.
        /// </summary>
        /// <remarks>
        /// Return the launch data for a given external tool.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolLaunchDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiGetToolLaunchData200Response</returns>
        System.Threading.Tasks.Task<ModLtiGetToolLaunchData200Response> ModLtiGetToolLaunchDataAsync(ModLtiGetToolLaunchDataRequest modLtiGetToolLaunchDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the launch data for a given external tool.
        /// </summary>
        /// <remarks>
        /// Return the launch data for a given external tool.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolLaunchDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiGetToolLaunchData200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLtiGetToolLaunchData200Response>> ModLtiGetToolLaunchDataWithHttpInfoAsync(ModLtiGetToolLaunchDataRequest modLtiGetToolLaunchDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of the tool proxies
        /// </summary>
        /// <remarks>
        /// Get a list of the tool proxies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModLtiGetToolProxiesAsync(ModLtiGetToolProxiesRequest modLtiGetToolProxiesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of the tool proxies
        /// </summary>
        /// <remarks>
        /// Get a list of the tool proxies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModLtiGetToolProxiesWithHttpInfoAsync(ModLtiGetToolProxiesRequest modLtiGetToolProxiesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a registration request for a tool proxy
        /// </summary>
        /// <remarks>
        /// Get a registration request for a tool proxy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiGetToolProxyRegistrationRequest200Response</returns>
        System.Threading.Tasks.Task<ModLtiGetToolProxyRegistrationRequest200Response> ModLtiGetToolProxyRegistrationRequestAsync(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a registration request for a tool proxy
        /// </summary>
        /// <remarks>
        /// Get a registration request for a tool proxy
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiGetToolProxyRegistrationRequest200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLtiGetToolProxyRegistrationRequest200Response>> ModLtiGetToolProxyRegistrationRequestWithHttpInfoAsync(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of the tool types
        /// </summary>
        /// <remarks>
        /// Get a list of the tool types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModLtiGetToolTypesAsync(ModLtiGetToolTypesRequest modLtiGetToolTypesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of the tool types
        /// </summary>
        /// <remarks>
        /// Get a list of the tool types
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModLtiGetToolTypesWithHttpInfoAsync(ModLtiGetToolTypesRequest modLtiGetToolTypesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of the tool types and tool proxies
        /// </summary>
        /// <remarks>
        /// Get a list of the tool types and tool proxies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiGetToolTypesAndProxies200Response</returns>
        System.Threading.Tasks.Task<ModLtiGetToolTypesAndProxies200Response> ModLtiGetToolTypesAndProxiesAsync(ModLtiGetToolTypesAndProxiesRequest modLtiGetToolTypesAndProxiesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of the tool types and tool proxies
        /// </summary>
        /// <remarks>
        /// Get a list of the tool types and tool proxies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiGetToolTypesAndProxies200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLtiGetToolTypesAndProxies200Response>> ModLtiGetToolTypesAndProxiesWithHttpInfoAsync(ModLtiGetToolTypesAndProxiesRequest modLtiGetToolTypesAndProxiesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get total number of the tool types and tool proxies
        /// </summary>
        /// <remarks>
        /// Get total number of the tool types and tool proxies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiGetToolTypesAndProxiesCount200Response</returns>
        System.Threading.Tasks.Task<ModLtiGetToolTypesAndProxiesCount200Response> ModLtiGetToolTypesAndProxiesCountAsync(ModLtiGetToolTypesAndProxiesCountRequest modLtiGetToolTypesAndProxiesCountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get total number of the tool types and tool proxies
        /// </summary>
        /// <remarks>
        /// Get total number of the tool types and tool proxies
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiGetToolTypesAndProxiesCount200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLtiGetToolTypesAndProxiesCount200Response>> ModLtiGetToolTypesAndProxiesCountWithHttpInfoAsync(ModLtiGetToolTypesAndProxiesCountRequest modLtiGetToolTypesAndProxiesCountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Determine if the given url is for a cartridge
        /// </summary>
        /// <remarks>
        /// Determine if the given url is for a cartridge
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiIsCartridgeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiIsCartridge200Response</returns>
        System.Threading.Tasks.Task<ModLtiIsCartridge200Response> ModLtiIsCartridgeAsync(ModLtiIsCartridgeRequest modLtiIsCartridgeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Determine if the given url is for a cartridge
        /// </summary>
        /// <remarks>
        /// Determine if the given url is for a cartridge
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiIsCartridgeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiIsCartridge200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLtiIsCartridge200Response>> ModLtiIsCartridgeWithHttpInfoAsync(ModLtiIsCartridgeRequest modLtiIsCartridgeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Toggle showinactivitychooser for a tool type in a course
        /// </summary>
        /// <remarks>
        /// Toggle showinactivitychooser for a tool type in a course
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiToggleShowinactivitychooserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModLtiToggleShowinactivitychooserAsync(ModLtiToggleShowinactivitychooserRequest modLtiToggleShowinactivitychooserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Toggle showinactivitychooser for a tool type in a course
        /// </summary>
        /// <remarks>
        /// Toggle showinactivitychooser for a tool type in a course
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiToggleShowinactivitychooserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModLtiToggleShowinactivitychooserWithHttpInfoAsync(ModLtiToggleShowinactivitychooserRequest modLtiToggleShowinactivitychooserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a tool type
        /// </summary>
        /// <remarks>
        /// Update a tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiUpdateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiUpdateToolType200Response</returns>
        System.Threading.Tasks.Task<ModLtiUpdateToolType200Response> ModLtiUpdateToolTypeAsync(ModLtiUpdateToolTypeRequest modLtiUpdateToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a tool type
        /// </summary>
        /// <remarks>
        /// Update a tool type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiUpdateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiUpdateToolType200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModLtiUpdateToolType200Response>> ModLtiUpdateToolTypeWithHttpInfoAsync(ModLtiUpdateToolTypeRequest modLtiUpdateToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiViewLtiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModLtiViewLtiAsync(ModLtiViewLtiRequest modLtiViewLtiRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiViewLtiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModLtiViewLtiWithHttpInfoAsync(ModLtiViewLtiRequest modLtiViewLtiRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModLtiApi : IModLtiApiSync, IModLtiApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModLtiApi : IModLtiApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModLtiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModLtiApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModLtiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModLtiApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModLtiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModLtiApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModLtiApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModLtiApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a tool proxy Create a tool proxy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiCreateToolProxy200Response</returns>
        public ModLtiCreateToolProxy200Response ModLtiCreateToolProxy(ModLtiCreateToolProxyRequest modLtiCreateToolProxyRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiCreateToolProxy200Response> localVarResponse = ModLtiCreateToolProxyWithHttpInfo(modLtiCreateToolProxyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a tool proxy Create a tool proxy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiCreateToolProxy200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLtiCreateToolProxy200Response> ModLtiCreateToolProxyWithHttpInfo(ModLtiCreateToolProxyRequest modLtiCreateToolProxyRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLtiCreateToolProxyRequest' is set
            if (modLtiCreateToolProxyRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiCreateToolProxyRequest' when calling ModLtiApi->ModLtiCreateToolProxy");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiCreateToolProxyRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiCreateToolProxy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLtiCreateToolProxy200Response>("/mod_lti_create_tool_proxy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiCreateToolProxy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a tool proxy Create a tool proxy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiCreateToolProxy200Response</returns>
        public async System.Threading.Tasks.Task<ModLtiCreateToolProxy200Response> ModLtiCreateToolProxyAsync(ModLtiCreateToolProxyRequest modLtiCreateToolProxyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiCreateToolProxy200Response> localVarResponse = await ModLtiCreateToolProxyWithHttpInfoAsync(modLtiCreateToolProxyRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a tool proxy Create a tool proxy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiCreateToolProxy200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLtiCreateToolProxy200Response>> ModLtiCreateToolProxyWithHttpInfoAsync(ModLtiCreateToolProxyRequest modLtiCreateToolProxyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLtiCreateToolProxyRequest' is set
            if (modLtiCreateToolProxyRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiCreateToolProxyRequest' when calling ModLtiApi->ModLtiCreateToolProxy");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiCreateToolProxyRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiCreateToolProxy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLtiCreateToolProxy200Response>("/mod_lti_create_tool_proxy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiCreateToolProxy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a tool type Create a tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiCreateToolType200Response</returns>
        public ModLtiCreateToolType200Response ModLtiCreateToolType(ModLtiCreateToolTypeRequest modLtiCreateToolTypeRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiCreateToolType200Response> localVarResponse = ModLtiCreateToolTypeWithHttpInfo(modLtiCreateToolTypeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a tool type Create a tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiCreateToolType200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLtiCreateToolType200Response> ModLtiCreateToolTypeWithHttpInfo(ModLtiCreateToolTypeRequest modLtiCreateToolTypeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLtiCreateToolTypeRequest' is set
            if (modLtiCreateToolTypeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiCreateToolTypeRequest' when calling ModLtiApi->ModLtiCreateToolType");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiCreateToolTypeRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiCreateToolType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLtiCreateToolType200Response>("/mod_lti_create_tool_type", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiCreateToolType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a tool type Create a tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiCreateToolType200Response</returns>
        public async System.Threading.Tasks.Task<ModLtiCreateToolType200Response> ModLtiCreateToolTypeAsync(ModLtiCreateToolTypeRequest modLtiCreateToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiCreateToolType200Response> localVarResponse = await ModLtiCreateToolTypeWithHttpInfoAsync(modLtiCreateToolTypeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a tool type Create a tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiCreateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiCreateToolType200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLtiCreateToolType200Response>> ModLtiCreateToolTypeWithHttpInfoAsync(ModLtiCreateToolTypeRequest modLtiCreateToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLtiCreateToolTypeRequest' is set
            if (modLtiCreateToolTypeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiCreateToolTypeRequest' when calling ModLtiApi->ModLtiCreateToolType");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiCreateToolTypeRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiCreateToolType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLtiCreateToolType200Response>("/mod_lti_create_tool_type", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiCreateToolType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a course tool type Delete a course tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteCourseToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModLtiDeleteCourseToolType(ModLtiDeleteCourseToolTypeRequest modLtiDeleteCourseToolTypeRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = ModLtiDeleteCourseToolTypeWithHttpInfo(modLtiDeleteCourseToolTypeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a course tool type Delete a course tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteCourseToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ModLtiDeleteCourseToolTypeWithHttpInfo(ModLtiDeleteCourseToolTypeRequest modLtiDeleteCourseToolTypeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLtiDeleteCourseToolTypeRequest' is set
            if (modLtiDeleteCourseToolTypeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiDeleteCourseToolTypeRequest' when calling ModLtiApi->ModLtiDeleteCourseToolType");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiDeleteCourseToolTypeRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiDeleteCourseToolType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_lti_delete_course_tool_type", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiDeleteCourseToolType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a course tool type Delete a course tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteCourseToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModLtiDeleteCourseToolTypeAsync(ModLtiDeleteCourseToolTypeRequest modLtiDeleteCourseToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await ModLtiDeleteCourseToolTypeWithHttpInfoAsync(modLtiDeleteCourseToolTypeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a course tool type Delete a course tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteCourseToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ModLtiDeleteCourseToolTypeWithHttpInfoAsync(ModLtiDeleteCourseToolTypeRequest modLtiDeleteCourseToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLtiDeleteCourseToolTypeRequest' is set
            if (modLtiDeleteCourseToolTypeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiDeleteCourseToolTypeRequest' when calling ModLtiApi->ModLtiDeleteCourseToolType");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiDeleteCourseToolTypeRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiDeleteCourseToolType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_lti_delete_course_tool_type", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiDeleteCourseToolType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a tool proxy Delete a tool proxy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiDeleteToolProxy200Response</returns>
        public ModLtiDeleteToolProxy200Response ModLtiDeleteToolProxy(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiDeleteToolProxy200Response> localVarResponse = ModLtiDeleteToolProxyWithHttpInfo(modLtiDeleteToolProxyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a tool proxy Delete a tool proxy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiDeleteToolProxy200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLtiDeleteToolProxy200Response> ModLtiDeleteToolProxyWithHttpInfo(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLtiDeleteToolProxyRequest' is set
            if (modLtiDeleteToolProxyRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiDeleteToolProxyRequest' when calling ModLtiApi->ModLtiDeleteToolProxy");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiDeleteToolProxyRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiDeleteToolProxy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLtiDeleteToolProxy200Response>("/mod_lti_delete_tool_proxy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiDeleteToolProxy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a tool proxy Delete a tool proxy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiDeleteToolProxy200Response</returns>
        public async System.Threading.Tasks.Task<ModLtiDeleteToolProxy200Response> ModLtiDeleteToolProxyAsync(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiDeleteToolProxy200Response> localVarResponse = await ModLtiDeleteToolProxyWithHttpInfoAsync(modLtiDeleteToolProxyRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a tool proxy Delete a tool proxy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiDeleteToolProxy200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLtiDeleteToolProxy200Response>> ModLtiDeleteToolProxyWithHttpInfoAsync(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLtiDeleteToolProxyRequest' is set
            if (modLtiDeleteToolProxyRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiDeleteToolProxyRequest' when calling ModLtiApi->ModLtiDeleteToolProxy");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiDeleteToolProxyRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiDeleteToolProxy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLtiDeleteToolProxy200Response>("/mod_lti_delete_tool_proxy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiDeleteToolProxy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a tool type Delete a tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiDeleteToolTypeRequest</returns>
        public ModLtiDeleteToolTypeRequest ModLtiDeleteToolType(ModLtiDeleteToolTypeRequest modLtiDeleteToolTypeRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiDeleteToolTypeRequest> localVarResponse = ModLtiDeleteToolTypeWithHttpInfo(modLtiDeleteToolTypeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a tool type Delete a tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiDeleteToolTypeRequest</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLtiDeleteToolTypeRequest> ModLtiDeleteToolTypeWithHttpInfo(ModLtiDeleteToolTypeRequest modLtiDeleteToolTypeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLtiDeleteToolTypeRequest' is set
            if (modLtiDeleteToolTypeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiDeleteToolTypeRequest' when calling ModLtiApi->ModLtiDeleteToolType");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiDeleteToolTypeRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiDeleteToolType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLtiDeleteToolTypeRequest>("/mod_lti_delete_tool_type", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiDeleteToolType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a tool type Delete a tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiDeleteToolTypeRequest</returns>
        public async System.Threading.Tasks.Task<ModLtiDeleteToolTypeRequest> ModLtiDeleteToolTypeAsync(ModLtiDeleteToolTypeRequest modLtiDeleteToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiDeleteToolTypeRequest> localVarResponse = await ModLtiDeleteToolTypeWithHttpInfoAsync(modLtiDeleteToolTypeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a tool type Delete a tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiDeleteToolTypeRequest)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLtiDeleteToolTypeRequest>> ModLtiDeleteToolTypeWithHttpInfoAsync(ModLtiDeleteToolTypeRequest modLtiDeleteToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLtiDeleteToolTypeRequest' is set
            if (modLtiDeleteToolTypeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiDeleteToolTypeRequest' when calling ModLtiApi->ModLtiDeleteToolType");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiDeleteToolTypeRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiDeleteToolType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLtiDeleteToolTypeRequest>("/mod_lti_delete_tool_type", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiDeleteToolType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned. Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiGetLtisByCourses200Response</returns>
        public ModLtiGetLtisByCourses200Response ModLtiGetLtisByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiGetLtisByCourses200Response> localVarResponse = ModLtiGetLtisByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned. Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiGetLtisByCourses200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLtiGetLtisByCourses200Response> ModLtiGetLtisByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModLtiApi->ModLtiGetLtisByCourses");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiGetLtisByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLtiGetLtisByCourses200Response>("/mod_lti_get_ltis_by_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiGetLtisByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned. Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiGetLtisByCourses200Response</returns>
        public async System.Threading.Tasks.Task<ModLtiGetLtisByCourses200Response> ModLtiGetLtisByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiGetLtisByCourses200Response> localVarResponse = await ModLtiGetLtisByCoursesWithHttpInfoAsync(modChatGetChatsByCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned. Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiGetLtisByCourses200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLtiGetLtisByCourses200Response>> ModLtiGetLtisByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModLtiApi->ModLtiGetLtisByCourses");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiGetLtisByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLtiGetLtisByCourses200Response>("/mod_lti_get_ltis_by_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiGetLtisByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the launch data for a given external tool. Return the launch data for a given external tool.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolLaunchDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiGetToolLaunchData200Response</returns>
        public ModLtiGetToolLaunchData200Response ModLtiGetToolLaunchData(ModLtiGetToolLaunchDataRequest modLtiGetToolLaunchDataRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolLaunchData200Response> localVarResponse = ModLtiGetToolLaunchDataWithHttpInfo(modLtiGetToolLaunchDataRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the launch data for a given external tool. Return the launch data for a given external tool.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolLaunchDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiGetToolLaunchData200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolLaunchData200Response> ModLtiGetToolLaunchDataWithHttpInfo(ModLtiGetToolLaunchDataRequest modLtiGetToolLaunchDataRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLtiGetToolLaunchDataRequest' is set
            if (modLtiGetToolLaunchDataRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiGetToolLaunchDataRequest' when calling ModLtiApi->ModLtiGetToolLaunchData");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiGetToolLaunchDataRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiGetToolLaunchData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLtiGetToolLaunchData200Response>("/mod_lti_get_tool_launch_data", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiGetToolLaunchData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the launch data for a given external tool. Return the launch data for a given external tool.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolLaunchDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiGetToolLaunchData200Response</returns>
        public async System.Threading.Tasks.Task<ModLtiGetToolLaunchData200Response> ModLtiGetToolLaunchDataAsync(ModLtiGetToolLaunchDataRequest modLtiGetToolLaunchDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolLaunchData200Response> localVarResponse = await ModLtiGetToolLaunchDataWithHttpInfoAsync(modLtiGetToolLaunchDataRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the launch data for a given external tool. Return the launch data for a given external tool.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolLaunchDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiGetToolLaunchData200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolLaunchData200Response>> ModLtiGetToolLaunchDataWithHttpInfoAsync(ModLtiGetToolLaunchDataRequest modLtiGetToolLaunchDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLtiGetToolLaunchDataRequest' is set
            if (modLtiGetToolLaunchDataRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiGetToolLaunchDataRequest' when calling ModLtiApi->ModLtiGetToolLaunchData");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiGetToolLaunchDataRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiGetToolLaunchData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLtiGetToolLaunchData200Response>("/mod_lti_get_tool_launch_data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiGetToolLaunchData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of the tool proxies Get a list of the tool proxies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModLtiGetToolProxies(ModLtiGetToolProxiesRequest modLtiGetToolProxiesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = ModLtiGetToolProxiesWithHttpInfo(modLtiGetToolProxiesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of the tool proxies Get a list of the tool proxies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ModLtiGetToolProxiesWithHttpInfo(ModLtiGetToolProxiesRequest modLtiGetToolProxiesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLtiGetToolProxiesRequest' is set
            if (modLtiGetToolProxiesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiGetToolProxiesRequest' when calling ModLtiApi->ModLtiGetToolProxies");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiGetToolProxiesRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiGetToolProxies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_lti_get_tool_proxies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiGetToolProxies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of the tool proxies Get a list of the tool proxies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModLtiGetToolProxiesAsync(ModLtiGetToolProxiesRequest modLtiGetToolProxiesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await ModLtiGetToolProxiesWithHttpInfoAsync(modLtiGetToolProxiesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of the tool proxies Get a list of the tool proxies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ModLtiGetToolProxiesWithHttpInfoAsync(ModLtiGetToolProxiesRequest modLtiGetToolProxiesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLtiGetToolProxiesRequest' is set
            if (modLtiGetToolProxiesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiGetToolProxiesRequest' when calling ModLtiApi->ModLtiGetToolProxies");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiGetToolProxiesRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiGetToolProxies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_lti_get_tool_proxies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiGetToolProxies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a registration request for a tool proxy Get a registration request for a tool proxy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiGetToolProxyRegistrationRequest200Response</returns>
        public ModLtiGetToolProxyRegistrationRequest200Response ModLtiGetToolProxyRegistrationRequest(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolProxyRegistrationRequest200Response> localVarResponse = ModLtiGetToolProxyRegistrationRequestWithHttpInfo(modLtiDeleteToolProxyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a registration request for a tool proxy Get a registration request for a tool proxy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiGetToolProxyRegistrationRequest200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolProxyRegistrationRequest200Response> ModLtiGetToolProxyRegistrationRequestWithHttpInfo(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLtiDeleteToolProxyRequest' is set
            if (modLtiDeleteToolProxyRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiDeleteToolProxyRequest' when calling ModLtiApi->ModLtiGetToolProxyRegistrationRequest");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiDeleteToolProxyRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiGetToolProxyRegistrationRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLtiGetToolProxyRegistrationRequest200Response>("/mod_lti_get_tool_proxy_registration_request", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiGetToolProxyRegistrationRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a registration request for a tool proxy Get a registration request for a tool proxy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiGetToolProxyRegistrationRequest200Response</returns>
        public async System.Threading.Tasks.Task<ModLtiGetToolProxyRegistrationRequest200Response> ModLtiGetToolProxyRegistrationRequestAsync(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolProxyRegistrationRequest200Response> localVarResponse = await ModLtiGetToolProxyRegistrationRequestWithHttpInfoAsync(modLtiDeleteToolProxyRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a registration request for a tool proxy Get a registration request for a tool proxy
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiDeleteToolProxyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiGetToolProxyRegistrationRequest200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolProxyRegistrationRequest200Response>> ModLtiGetToolProxyRegistrationRequestWithHttpInfoAsync(ModLtiDeleteToolProxyRequest modLtiDeleteToolProxyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLtiDeleteToolProxyRequest' is set
            if (modLtiDeleteToolProxyRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiDeleteToolProxyRequest' when calling ModLtiApi->ModLtiGetToolProxyRegistrationRequest");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiDeleteToolProxyRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiGetToolProxyRegistrationRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLtiGetToolProxyRegistrationRequest200Response>("/mod_lti_get_tool_proxy_registration_request", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiGetToolProxyRegistrationRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of the tool types Get a list of the tool types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModLtiGetToolTypes(ModLtiGetToolTypesRequest modLtiGetToolTypesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = ModLtiGetToolTypesWithHttpInfo(modLtiGetToolTypesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of the tool types Get a list of the tool types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ModLtiGetToolTypesWithHttpInfo(ModLtiGetToolTypesRequest modLtiGetToolTypesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLtiGetToolTypesRequest' is set
            if (modLtiGetToolTypesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiGetToolTypesRequest' when calling ModLtiApi->ModLtiGetToolTypes");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiGetToolTypesRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiGetToolTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_lti_get_tool_types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiGetToolTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of the tool types Get a list of the tool types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModLtiGetToolTypesAsync(ModLtiGetToolTypesRequest modLtiGetToolTypesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await ModLtiGetToolTypesWithHttpInfoAsync(modLtiGetToolTypesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of the tool types Get a list of the tool types
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ModLtiGetToolTypesWithHttpInfoAsync(ModLtiGetToolTypesRequest modLtiGetToolTypesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLtiGetToolTypesRequest' is set
            if (modLtiGetToolTypesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiGetToolTypesRequest' when calling ModLtiApi->ModLtiGetToolTypes");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiGetToolTypesRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiGetToolTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_lti_get_tool_types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiGetToolTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of the tool types and tool proxies Get a list of the tool types and tool proxies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiGetToolTypesAndProxies200Response</returns>
        public ModLtiGetToolTypesAndProxies200Response ModLtiGetToolTypesAndProxies(ModLtiGetToolTypesAndProxiesRequest modLtiGetToolTypesAndProxiesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolTypesAndProxies200Response> localVarResponse = ModLtiGetToolTypesAndProxiesWithHttpInfo(modLtiGetToolTypesAndProxiesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of the tool types and tool proxies Get a list of the tool types and tool proxies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiGetToolTypesAndProxies200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolTypesAndProxies200Response> ModLtiGetToolTypesAndProxiesWithHttpInfo(ModLtiGetToolTypesAndProxiesRequest modLtiGetToolTypesAndProxiesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLtiGetToolTypesAndProxiesRequest' is set
            if (modLtiGetToolTypesAndProxiesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiGetToolTypesAndProxiesRequest' when calling ModLtiApi->ModLtiGetToolTypesAndProxies");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiGetToolTypesAndProxiesRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiGetToolTypesAndProxies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLtiGetToolTypesAndProxies200Response>("/mod_lti_get_tool_types_and_proxies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiGetToolTypesAndProxies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of the tool types and tool proxies Get a list of the tool types and tool proxies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiGetToolTypesAndProxies200Response</returns>
        public async System.Threading.Tasks.Task<ModLtiGetToolTypesAndProxies200Response> ModLtiGetToolTypesAndProxiesAsync(ModLtiGetToolTypesAndProxiesRequest modLtiGetToolTypesAndProxiesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolTypesAndProxies200Response> localVarResponse = await ModLtiGetToolTypesAndProxiesWithHttpInfoAsync(modLtiGetToolTypesAndProxiesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of the tool types and tool proxies Get a list of the tool types and tool proxies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiGetToolTypesAndProxies200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolTypesAndProxies200Response>> ModLtiGetToolTypesAndProxiesWithHttpInfoAsync(ModLtiGetToolTypesAndProxiesRequest modLtiGetToolTypesAndProxiesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLtiGetToolTypesAndProxiesRequest' is set
            if (modLtiGetToolTypesAndProxiesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiGetToolTypesAndProxiesRequest' when calling ModLtiApi->ModLtiGetToolTypesAndProxies");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiGetToolTypesAndProxiesRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiGetToolTypesAndProxies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLtiGetToolTypesAndProxies200Response>("/mod_lti_get_tool_types_and_proxies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiGetToolTypesAndProxies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get total number of the tool types and tool proxies Get total number of the tool types and tool proxies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiGetToolTypesAndProxiesCount200Response</returns>
        public ModLtiGetToolTypesAndProxiesCount200Response ModLtiGetToolTypesAndProxiesCount(ModLtiGetToolTypesAndProxiesCountRequest modLtiGetToolTypesAndProxiesCountRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolTypesAndProxiesCount200Response> localVarResponse = ModLtiGetToolTypesAndProxiesCountWithHttpInfo(modLtiGetToolTypesAndProxiesCountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get total number of the tool types and tool proxies Get total number of the tool types and tool proxies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiGetToolTypesAndProxiesCount200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolTypesAndProxiesCount200Response> ModLtiGetToolTypesAndProxiesCountWithHttpInfo(ModLtiGetToolTypesAndProxiesCountRequest modLtiGetToolTypesAndProxiesCountRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLtiGetToolTypesAndProxiesCountRequest' is set
            if (modLtiGetToolTypesAndProxiesCountRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiGetToolTypesAndProxiesCountRequest' when calling ModLtiApi->ModLtiGetToolTypesAndProxiesCount");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiGetToolTypesAndProxiesCountRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiGetToolTypesAndProxiesCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLtiGetToolTypesAndProxiesCount200Response>("/mod_lti_get_tool_types_and_proxies_count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiGetToolTypesAndProxiesCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get total number of the tool types and tool proxies Get total number of the tool types and tool proxies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiGetToolTypesAndProxiesCount200Response</returns>
        public async System.Threading.Tasks.Task<ModLtiGetToolTypesAndProxiesCount200Response> ModLtiGetToolTypesAndProxiesCountAsync(ModLtiGetToolTypesAndProxiesCountRequest modLtiGetToolTypesAndProxiesCountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolTypesAndProxiesCount200Response> localVarResponse = await ModLtiGetToolTypesAndProxiesCountWithHttpInfoAsync(modLtiGetToolTypesAndProxiesCountRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get total number of the tool types and tool proxies Get total number of the tool types and tool proxies
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiGetToolTypesAndProxiesCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiGetToolTypesAndProxiesCount200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLtiGetToolTypesAndProxiesCount200Response>> ModLtiGetToolTypesAndProxiesCountWithHttpInfoAsync(ModLtiGetToolTypesAndProxiesCountRequest modLtiGetToolTypesAndProxiesCountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLtiGetToolTypesAndProxiesCountRequest' is set
            if (modLtiGetToolTypesAndProxiesCountRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiGetToolTypesAndProxiesCountRequest' when calling ModLtiApi->ModLtiGetToolTypesAndProxiesCount");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiGetToolTypesAndProxiesCountRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiGetToolTypesAndProxiesCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLtiGetToolTypesAndProxiesCount200Response>("/mod_lti_get_tool_types_and_proxies_count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiGetToolTypesAndProxiesCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Determine if the given url is for a cartridge Determine if the given url is for a cartridge
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiIsCartridgeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiIsCartridge200Response</returns>
        public ModLtiIsCartridge200Response ModLtiIsCartridge(ModLtiIsCartridgeRequest modLtiIsCartridgeRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiIsCartridge200Response> localVarResponse = ModLtiIsCartridgeWithHttpInfo(modLtiIsCartridgeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Determine if the given url is for a cartridge Determine if the given url is for a cartridge
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiIsCartridgeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiIsCartridge200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLtiIsCartridge200Response> ModLtiIsCartridgeWithHttpInfo(ModLtiIsCartridgeRequest modLtiIsCartridgeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLtiIsCartridgeRequest' is set
            if (modLtiIsCartridgeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiIsCartridgeRequest' when calling ModLtiApi->ModLtiIsCartridge");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiIsCartridgeRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiIsCartridge";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLtiIsCartridge200Response>("/mod_lti_is_cartridge", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiIsCartridge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Determine if the given url is for a cartridge Determine if the given url is for a cartridge
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiIsCartridgeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiIsCartridge200Response</returns>
        public async System.Threading.Tasks.Task<ModLtiIsCartridge200Response> ModLtiIsCartridgeAsync(ModLtiIsCartridgeRequest modLtiIsCartridgeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiIsCartridge200Response> localVarResponse = await ModLtiIsCartridgeWithHttpInfoAsync(modLtiIsCartridgeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Determine if the given url is for a cartridge Determine if the given url is for a cartridge
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiIsCartridgeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiIsCartridge200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLtiIsCartridge200Response>> ModLtiIsCartridgeWithHttpInfoAsync(ModLtiIsCartridgeRequest modLtiIsCartridgeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLtiIsCartridgeRequest' is set
            if (modLtiIsCartridgeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiIsCartridgeRequest' when calling ModLtiApi->ModLtiIsCartridge");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiIsCartridgeRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiIsCartridge";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLtiIsCartridge200Response>("/mod_lti_is_cartridge", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiIsCartridge", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Toggle showinactivitychooser for a tool type in a course Toggle showinactivitychooser for a tool type in a course
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiToggleShowinactivitychooserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModLtiToggleShowinactivitychooser(ModLtiToggleShowinactivitychooserRequest modLtiToggleShowinactivitychooserRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = ModLtiToggleShowinactivitychooserWithHttpInfo(modLtiToggleShowinactivitychooserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Toggle showinactivitychooser for a tool type in a course Toggle showinactivitychooser for a tool type in a course
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiToggleShowinactivitychooserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ModLtiToggleShowinactivitychooserWithHttpInfo(ModLtiToggleShowinactivitychooserRequest modLtiToggleShowinactivitychooserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLtiToggleShowinactivitychooserRequest' is set
            if (modLtiToggleShowinactivitychooserRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiToggleShowinactivitychooserRequest' when calling ModLtiApi->ModLtiToggleShowinactivitychooser");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiToggleShowinactivitychooserRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiToggleShowinactivitychooser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_lti_toggle_showinactivitychooser", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiToggleShowinactivitychooser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Toggle showinactivitychooser for a tool type in a course Toggle showinactivitychooser for a tool type in a course
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiToggleShowinactivitychooserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModLtiToggleShowinactivitychooserAsync(ModLtiToggleShowinactivitychooserRequest modLtiToggleShowinactivitychooserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await ModLtiToggleShowinactivitychooserWithHttpInfoAsync(modLtiToggleShowinactivitychooserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Toggle showinactivitychooser for a tool type in a course Toggle showinactivitychooser for a tool type in a course
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiToggleShowinactivitychooserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ModLtiToggleShowinactivitychooserWithHttpInfoAsync(ModLtiToggleShowinactivitychooserRequest modLtiToggleShowinactivitychooserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLtiToggleShowinactivitychooserRequest' is set
            if (modLtiToggleShowinactivitychooserRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiToggleShowinactivitychooserRequest' when calling ModLtiApi->ModLtiToggleShowinactivitychooser");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiToggleShowinactivitychooserRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiToggleShowinactivitychooser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_lti_toggle_showinactivitychooser", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiToggleShowinactivitychooser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a tool type Update a tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiUpdateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModLtiUpdateToolType200Response</returns>
        public ModLtiUpdateToolType200Response ModLtiUpdateToolType(ModLtiUpdateToolTypeRequest modLtiUpdateToolTypeRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiUpdateToolType200Response> localVarResponse = ModLtiUpdateToolTypeWithHttpInfo(modLtiUpdateToolTypeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a tool type Update a tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiUpdateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModLtiUpdateToolType200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModLtiUpdateToolType200Response> ModLtiUpdateToolTypeWithHttpInfo(ModLtiUpdateToolTypeRequest modLtiUpdateToolTypeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLtiUpdateToolTypeRequest' is set
            if (modLtiUpdateToolTypeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiUpdateToolTypeRequest' when calling ModLtiApi->ModLtiUpdateToolType");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiUpdateToolTypeRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiUpdateToolType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModLtiUpdateToolType200Response>("/mod_lti_update_tool_type", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiUpdateToolType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a tool type Update a tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiUpdateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModLtiUpdateToolType200Response</returns>
        public async System.Threading.Tasks.Task<ModLtiUpdateToolType200Response> ModLtiUpdateToolTypeAsync(ModLtiUpdateToolTypeRequest modLtiUpdateToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModLtiUpdateToolType200Response> localVarResponse = await ModLtiUpdateToolTypeWithHttpInfoAsync(modLtiUpdateToolTypeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a tool type Update a tool type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiUpdateToolTypeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModLtiUpdateToolType200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModLtiUpdateToolType200Response>> ModLtiUpdateToolTypeWithHttpInfoAsync(ModLtiUpdateToolTypeRequest modLtiUpdateToolTypeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLtiUpdateToolTypeRequest' is set
            if (modLtiUpdateToolTypeRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiUpdateToolTypeRequest' when calling ModLtiApi->ModLtiUpdateToolType");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiUpdateToolTypeRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiUpdateToolType";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModLtiUpdateToolType200Response>("/mod_lti_update_tool_type", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiUpdateToolType", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiViewLtiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModLtiViewLti(ModLtiViewLtiRequest modLtiViewLtiRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModLtiViewLtiWithHttpInfo(modLtiViewLtiRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiViewLtiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModLtiViewLtiWithHttpInfo(ModLtiViewLtiRequest modLtiViewLtiRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modLtiViewLtiRequest' is set
            if (modLtiViewLtiRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiViewLtiRequest' when calling ModLtiApi->ModLtiViewLti");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiViewLtiRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiViewLti";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_lti_view_lti", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiViewLti", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiViewLtiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModLtiViewLtiAsync(ModLtiViewLtiRequest modLtiViewLtiRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModLtiViewLtiWithHttpInfoAsync(modLtiViewLtiRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modLtiViewLtiRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModLtiViewLtiWithHttpInfoAsync(ModLtiViewLtiRequest modLtiViewLtiRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modLtiViewLtiRequest' is set
            if (modLtiViewLtiRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modLtiViewLtiRequest' when calling ModLtiApi->ModLtiViewLti");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modLtiViewLtiRequest;

            localVarRequestOptions.Operation = "ModLtiApi.ModLtiViewLti";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_lti_view_lti", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModLtiViewLti", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
