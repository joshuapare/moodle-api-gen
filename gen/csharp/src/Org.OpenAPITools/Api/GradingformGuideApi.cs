/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGradingformGuideApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetch the data required to display the grader grading panel, creating the grade item if required
        /// </summary>
        /// <remarks>
        /// Fetch the data required to display the grader grading panel, creating the grade item if required
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleFetchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GradingformGuideGraderGradingpanelFetch200Response</returns>
        GradingformGuideGraderGradingpanelFetch200Response GradingformGuideGraderGradingpanelFetch(CoreGradesGraderGradingpanelScaleFetchRequest coreGradesGraderGradingpanelScaleFetchRequest, int operationIndex = 0);

        /// <summary>
        /// Fetch the data required to display the grader grading panel, creating the grade item if required
        /// </summary>
        /// <remarks>
        /// Fetch the data required to display the grader grading panel, creating the grade item if required
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleFetchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GradingformGuideGraderGradingpanelFetch200Response</returns>
        ApiResponse<GradingformGuideGraderGradingpanelFetch200Response> GradingformGuideGraderGradingpanelFetchWithHttpInfo(CoreGradesGraderGradingpanelScaleFetchRequest coreGradesGraderGradingpanelScaleFetchRequest, int operationIndex = 0);
        /// <summary>
        /// Store the grading data for a user from the grader grading panel.
        /// </summary>
        /// <remarks>
        /// Store the grading data for a user from the grader grading panel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GradingformGuideGraderGradingpanelStore200Response</returns>
        GradingformGuideGraderGradingpanelStore200Response GradingformGuideGraderGradingpanelStore(CoreGradesGraderGradingpanelScaleStoreRequest coreGradesGraderGradingpanelScaleStoreRequest, int operationIndex = 0);

        /// <summary>
        /// Store the grading data for a user from the grader grading panel.
        /// </summary>
        /// <remarks>
        /// Store the grading data for a user from the grader grading panel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GradingformGuideGraderGradingpanelStore200Response</returns>
        ApiResponse<GradingformGuideGraderGradingpanelStore200Response> GradingformGuideGraderGradingpanelStoreWithHttpInfo(CoreGradesGraderGradingpanelScaleStoreRequest coreGradesGraderGradingpanelScaleStoreRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGradingformGuideApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Fetch the data required to display the grader grading panel, creating the grade item if required
        /// </summary>
        /// <remarks>
        /// Fetch the data required to display the grader grading panel, creating the grade item if required
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleFetchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GradingformGuideGraderGradingpanelFetch200Response</returns>
        System.Threading.Tasks.Task<GradingformGuideGraderGradingpanelFetch200Response> GradingformGuideGraderGradingpanelFetchAsync(CoreGradesGraderGradingpanelScaleFetchRequest coreGradesGraderGradingpanelScaleFetchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch the data required to display the grader grading panel, creating the grade item if required
        /// </summary>
        /// <remarks>
        /// Fetch the data required to display the grader grading panel, creating the grade item if required
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleFetchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GradingformGuideGraderGradingpanelFetch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GradingformGuideGraderGradingpanelFetch200Response>> GradingformGuideGraderGradingpanelFetchWithHttpInfoAsync(CoreGradesGraderGradingpanelScaleFetchRequest coreGradesGraderGradingpanelScaleFetchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Store the grading data for a user from the grader grading panel.
        /// </summary>
        /// <remarks>
        /// Store the grading data for a user from the grader grading panel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GradingformGuideGraderGradingpanelStore200Response</returns>
        System.Threading.Tasks.Task<GradingformGuideGraderGradingpanelStore200Response> GradingformGuideGraderGradingpanelStoreAsync(CoreGradesGraderGradingpanelScaleStoreRequest coreGradesGraderGradingpanelScaleStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Store the grading data for a user from the grader grading panel.
        /// </summary>
        /// <remarks>
        /// Store the grading data for a user from the grader grading panel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GradingformGuideGraderGradingpanelStore200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GradingformGuideGraderGradingpanelStore200Response>> GradingformGuideGraderGradingpanelStoreWithHttpInfoAsync(CoreGradesGraderGradingpanelScaleStoreRequest coreGradesGraderGradingpanelScaleStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGradingformGuideApi : IGradingformGuideApiSync, IGradingformGuideApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GradingformGuideApi : IGradingformGuideApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GradingformGuideApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GradingformGuideApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GradingformGuideApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GradingformGuideApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GradingformGuideApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GradingformGuideApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GradingformGuideApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GradingformGuideApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Fetch the data required to display the grader grading panel, creating the grade item if required Fetch the data required to display the grader grading panel, creating the grade item if required
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleFetchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GradingformGuideGraderGradingpanelFetch200Response</returns>
        public GradingformGuideGraderGradingpanelFetch200Response GradingformGuideGraderGradingpanelFetch(CoreGradesGraderGradingpanelScaleFetchRequest coreGradesGraderGradingpanelScaleFetchRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GradingformGuideGraderGradingpanelFetch200Response> localVarResponse = GradingformGuideGraderGradingpanelFetchWithHttpInfo(coreGradesGraderGradingpanelScaleFetchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the data required to display the grader grading panel, creating the grade item if required Fetch the data required to display the grader grading panel, creating the grade item if required
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleFetchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GradingformGuideGraderGradingpanelFetch200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GradingformGuideGraderGradingpanelFetch200Response> GradingformGuideGraderGradingpanelFetchWithHttpInfo(CoreGradesGraderGradingpanelScaleFetchRequest coreGradesGraderGradingpanelScaleFetchRequest, int operationIndex = 0)
        {
            // verify the required parameter 'coreGradesGraderGradingpanelScaleFetchRequest' is set
            if (coreGradesGraderGradingpanelScaleFetchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'coreGradesGraderGradingpanelScaleFetchRequest' when calling GradingformGuideApi->GradingformGuideGraderGradingpanelFetch");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = coreGradesGraderGradingpanelScaleFetchRequest;

            localVarRequestOptions.Operation = "GradingformGuideApi.GradingformGuideGraderGradingpanelFetch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GradingformGuideGraderGradingpanelFetch200Response>("/gradingform_guide_grader_gradingpanel_fetch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GradingformGuideGraderGradingpanelFetch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the data required to display the grader grading panel, creating the grade item if required Fetch the data required to display the grader grading panel, creating the grade item if required
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleFetchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GradingformGuideGraderGradingpanelFetch200Response</returns>
        public async System.Threading.Tasks.Task<GradingformGuideGraderGradingpanelFetch200Response> GradingformGuideGraderGradingpanelFetchAsync(CoreGradesGraderGradingpanelScaleFetchRequest coreGradesGraderGradingpanelScaleFetchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GradingformGuideGraderGradingpanelFetch200Response> localVarResponse = await GradingformGuideGraderGradingpanelFetchWithHttpInfoAsync(coreGradesGraderGradingpanelScaleFetchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the data required to display the grader grading panel, creating the grade item if required Fetch the data required to display the grader grading panel, creating the grade item if required
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleFetchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GradingformGuideGraderGradingpanelFetch200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GradingformGuideGraderGradingpanelFetch200Response>> GradingformGuideGraderGradingpanelFetchWithHttpInfoAsync(CoreGradesGraderGradingpanelScaleFetchRequest coreGradesGraderGradingpanelScaleFetchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'coreGradesGraderGradingpanelScaleFetchRequest' is set
            if (coreGradesGraderGradingpanelScaleFetchRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'coreGradesGraderGradingpanelScaleFetchRequest' when calling GradingformGuideApi->GradingformGuideGraderGradingpanelFetch");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = coreGradesGraderGradingpanelScaleFetchRequest;

            localVarRequestOptions.Operation = "GradingformGuideApi.GradingformGuideGraderGradingpanelFetch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GradingformGuideGraderGradingpanelFetch200Response>("/gradingform_guide_grader_gradingpanel_fetch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GradingformGuideGraderGradingpanelFetch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store the grading data for a user from the grader grading panel. Store the grading data for a user from the grader grading panel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GradingformGuideGraderGradingpanelStore200Response</returns>
        public GradingformGuideGraderGradingpanelStore200Response GradingformGuideGraderGradingpanelStore(CoreGradesGraderGradingpanelScaleStoreRequest coreGradesGraderGradingpanelScaleStoreRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GradingformGuideGraderGradingpanelStore200Response> localVarResponse = GradingformGuideGraderGradingpanelStoreWithHttpInfo(coreGradesGraderGradingpanelScaleStoreRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store the grading data for a user from the grader grading panel. Store the grading data for a user from the grader grading panel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GradingformGuideGraderGradingpanelStore200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<GradingformGuideGraderGradingpanelStore200Response> GradingformGuideGraderGradingpanelStoreWithHttpInfo(CoreGradesGraderGradingpanelScaleStoreRequest coreGradesGraderGradingpanelScaleStoreRequest, int operationIndex = 0)
        {
            // verify the required parameter 'coreGradesGraderGradingpanelScaleStoreRequest' is set
            if (coreGradesGraderGradingpanelScaleStoreRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'coreGradesGraderGradingpanelScaleStoreRequest' when calling GradingformGuideApi->GradingformGuideGraderGradingpanelStore");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = coreGradesGraderGradingpanelScaleStoreRequest;

            localVarRequestOptions.Operation = "GradingformGuideApi.GradingformGuideGraderGradingpanelStore";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GradingformGuideGraderGradingpanelStore200Response>("/gradingform_guide_grader_gradingpanel_store", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GradingformGuideGraderGradingpanelStore", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store the grading data for a user from the grader grading panel. Store the grading data for a user from the grader grading panel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GradingformGuideGraderGradingpanelStore200Response</returns>
        public async System.Threading.Tasks.Task<GradingformGuideGraderGradingpanelStore200Response> GradingformGuideGraderGradingpanelStoreAsync(CoreGradesGraderGradingpanelScaleStoreRequest coreGradesGraderGradingpanelScaleStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GradingformGuideGraderGradingpanelStore200Response> localVarResponse = await GradingformGuideGraderGradingpanelStoreWithHttpInfoAsync(coreGradesGraderGradingpanelScaleStoreRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store the grading data for a user from the grader grading panel. Store the grading data for a user from the grader grading panel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreGradesGraderGradingpanelScaleStoreRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GradingformGuideGraderGradingpanelStore200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GradingformGuideGraderGradingpanelStore200Response>> GradingformGuideGraderGradingpanelStoreWithHttpInfoAsync(CoreGradesGraderGradingpanelScaleStoreRequest coreGradesGraderGradingpanelScaleStoreRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'coreGradesGraderGradingpanelScaleStoreRequest' is set
            if (coreGradesGraderGradingpanelScaleStoreRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'coreGradesGraderGradingpanelScaleStoreRequest' when calling GradingformGuideApi->GradingformGuideGraderGradingpanelStore");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = coreGradesGraderGradingpanelScaleStoreRequest;

            localVarRequestOptions.Operation = "GradingformGuideApi.GradingformGuideGraderGradingpanelStore";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GradingformGuideGraderGradingpanelStore200Response>("/gradingform_guide_grader_gradingpanel_store", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GradingformGuideGraderGradingpanelStore", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
