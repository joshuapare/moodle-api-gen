/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModFeedbackApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves the feedback analysis.
        /// </summary>
        /// <remarks>
        /// Retrieves the feedback analysis.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetAnalysis200Response</returns>
        ModFeedbackGetAnalysis200Response ModFeedbackGetAnalysis(ModFeedbackGetAnalysisRequest modFeedbackGetAnalysisRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves the feedback analysis.
        /// </summary>
        /// <remarks>
        /// Retrieves the feedback analysis.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetAnalysis200Response</returns>
        ApiResponse<ModFeedbackGetAnalysis200Response> ModFeedbackGetAnalysisWithHttpInfo(ModFeedbackGetAnalysisRequest modFeedbackGetAnalysisRequest, int operationIndex = 0);
        /// <summary>
        /// Returns the temporary completion record for the current user.
        /// </summary>
        /// <remarks>
        /// Returns the temporary completion record for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetCurrentCompletedTmp200Response</returns>
        ModFeedbackGetCurrentCompletedTmp200Response ModFeedbackGetCurrentCompletedTmp(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0);

        /// <summary>
        /// Returns the temporary completion record for the current user.
        /// </summary>
        /// <remarks>
        /// Returns the temporary completion record for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetCurrentCompletedTmp200Response</returns>
        ApiResponse<ModFeedbackGetCurrentCompletedTmp200Response> ModFeedbackGetCurrentCompletedTmpWithHttpInfo(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0);
        /// <summary>
        /// Return access information for a given feedback.
        /// </summary>
        /// <remarks>
        /// Return access information for a given feedback.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFeedbackAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetFeedbackAccessInformation200Response</returns>
        ModFeedbackGetFeedbackAccessInformation200Response ModFeedbackGetFeedbackAccessInformation(ModFeedbackGetFeedbackAccessInformationRequest modFeedbackGetFeedbackAccessInformationRequest, int operationIndex = 0);

        /// <summary>
        /// Return access information for a given feedback.
        /// </summary>
        /// <remarks>
        /// Return access information for a given feedback.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFeedbackAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetFeedbackAccessInformation200Response</returns>
        ApiResponse<ModFeedbackGetFeedbackAccessInformation200Response> ModFeedbackGetFeedbackAccessInformationWithHttpInfo(ModFeedbackGetFeedbackAccessInformationRequest modFeedbackGetFeedbackAccessInformationRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetFeedbacksByCourses200Response</returns>
        ModFeedbackGetFeedbacksByCourses200Response ModFeedbackGetFeedbacksByCourses(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetFeedbacksByCourses200Response</returns>
        ApiResponse<ModFeedbackGetFeedbacksByCourses200Response> ModFeedbackGetFeedbacksByCoursesWithHttpInfo(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves responses from the last finished attempt.
        /// </summary>
        /// <remarks>
        /// Retrieves responses from the last finished attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetFinishedResponses200Response</returns>
        ModFeedbackGetFinishedResponses200Response ModFeedbackGetFinishedResponses(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves responses from the last finished attempt.
        /// </summary>
        /// <remarks>
        /// Retrieves responses from the last finished attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetFinishedResponses200Response</returns>
        ApiResponse<ModFeedbackGetFinishedResponses200Response> ModFeedbackGetFinishedResponsesWithHttpInfo(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0);
        /// <summary>
        /// Returns the items (questions) in the given feedback.
        /// </summary>
        /// <remarks>
        /// Returns the items (questions) in the given feedback.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetItems200Response</returns>
        ModFeedbackGetItems200Response ModFeedbackGetItems(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0);

        /// <summary>
        /// Returns the items (questions) in the given feedback.
        /// </summary>
        /// <remarks>
        /// Returns the items (questions) in the given feedback.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetItems200Response</returns>
        ApiResponse<ModFeedbackGetItems200Response> ModFeedbackGetItemsWithHttpInfo(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves the last completion record for the current user.
        /// </summary>
        /// <remarks>
        /// Retrieves the last completion record for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetLastCompleted200Response</returns>
        ModFeedbackGetLastCompleted200Response ModFeedbackGetLastCompleted(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves the last completion record for the current user.
        /// </summary>
        /// <remarks>
        /// Retrieves the last completion record for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetLastCompleted200Response</returns>
        ApiResponse<ModFeedbackGetLastCompleted200Response> ModFeedbackGetLastCompletedWithHttpInfo(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves a list of students who didn&#39;t submit the feedback.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of students who didn&#39;t submit the feedback.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetNonRespondentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetNonRespondents200Response</returns>
        ModFeedbackGetNonRespondents200Response ModFeedbackGetNonRespondents(ModFeedbackGetNonRespondentsRequest modFeedbackGetNonRespondentsRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves a list of students who didn&#39;t submit the feedback.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of students who didn&#39;t submit the feedback.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetNonRespondentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetNonRespondents200Response</returns>
        ApiResponse<ModFeedbackGetNonRespondents200Response> ModFeedbackGetNonRespondentsWithHttpInfo(ModFeedbackGetNonRespondentsRequest modFeedbackGetNonRespondentsRequest, int operationIndex = 0);
        /// <summary>
        /// Get a single feedback page items.
        /// </summary>
        /// <remarks>
        /// Get a single feedback page items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetPageItemsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetPageItems200Response</returns>
        ModFeedbackGetPageItems200Response ModFeedbackGetPageItems(ModFeedbackGetPageItemsRequest modFeedbackGetPageItemsRequest, int operationIndex = 0);

        /// <summary>
        /// Get a single feedback page items.
        /// </summary>
        /// <remarks>
        /// Get a single feedback page items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetPageItemsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetPageItems200Response</returns>
        ApiResponse<ModFeedbackGetPageItems200Response> ModFeedbackGetPageItemsWithHttpInfo(ModFeedbackGetPageItemsRequest modFeedbackGetPageItemsRequest, int operationIndex = 0);
        /// <summary>
        /// Return the feedback user responses analysis.
        /// </summary>
        /// <remarks>
        /// Return the feedback user responses analysis.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetResponsesAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetResponsesAnalysis200Response</returns>
        ModFeedbackGetResponsesAnalysis200Response ModFeedbackGetResponsesAnalysis(ModFeedbackGetResponsesAnalysisRequest modFeedbackGetResponsesAnalysisRequest, int operationIndex = 0);

        /// <summary>
        /// Return the feedback user responses analysis.
        /// </summary>
        /// <remarks>
        /// Return the feedback user responses analysis.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetResponsesAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetResponsesAnalysis200Response</returns>
        ApiResponse<ModFeedbackGetResponsesAnalysis200Response> ModFeedbackGetResponsesAnalysisWithHttpInfo(ModFeedbackGetResponsesAnalysisRequest modFeedbackGetResponsesAnalysisRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves responses from the current unfinished attempt.
        /// </summary>
        /// <remarks>
        /// Retrieves responses from the current unfinished attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetUnfinishedResponses200Response</returns>
        ModFeedbackGetUnfinishedResponses200Response ModFeedbackGetUnfinishedResponses(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves responses from the current unfinished attempt.
        /// </summary>
        /// <remarks>
        /// Retrieves responses from the current unfinished attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetUnfinishedResponses200Response</returns>
        ApiResponse<ModFeedbackGetUnfinishedResponses200Response> ModFeedbackGetUnfinishedResponsesWithHttpInfo(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0);
        /// <summary>
        /// Starts or continues a feedback submission.
        /// </summary>
        /// <remarks>
        /// Starts or continues a feedback submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackLaunchFeedback200Response</returns>
        ModFeedbackLaunchFeedback200Response ModFeedbackLaunchFeedback(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0);

        /// <summary>
        /// Starts or continues a feedback submission.
        /// </summary>
        /// <remarks>
        /// Starts or continues a feedback submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackLaunchFeedback200Response</returns>
        ApiResponse<ModFeedbackLaunchFeedback200Response> ModFeedbackLaunchFeedbackWithHttpInfo(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0);
        /// <summary>
        /// Process a jump between pages.
        /// </summary>
        /// <remarks>
        /// Process a jump between pages.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackProcessPage200Response</returns>
        ModFeedbackProcessPage200Response ModFeedbackProcessPage(ModFeedbackProcessPageRequest modFeedbackProcessPageRequest, int operationIndex = 0);

        /// <summary>
        /// Process a jump between pages.
        /// </summary>
        /// <remarks>
        /// Process a jump between pages.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackProcessPage200Response</returns>
        ApiResponse<ModFeedbackProcessPage200Response> ModFeedbackProcessPageWithHttpInfo(ModFeedbackProcessPageRequest modFeedbackProcessPageRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackViewFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModFeedbackViewFeedback(ModFeedbackViewFeedbackRequest modFeedbackViewFeedbackRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackViewFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModFeedbackViewFeedbackWithHttpInfo(ModFeedbackViewFeedbackRequest modFeedbackViewFeedbackRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModFeedbackApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves the feedback analysis.
        /// </summary>
        /// <remarks>
        /// Retrieves the feedback analysis.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetAnalysis200Response</returns>
        System.Threading.Tasks.Task<ModFeedbackGetAnalysis200Response> ModFeedbackGetAnalysisAsync(ModFeedbackGetAnalysisRequest modFeedbackGetAnalysisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the feedback analysis.
        /// </summary>
        /// <remarks>
        /// Retrieves the feedback analysis.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetAnalysis200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModFeedbackGetAnalysis200Response>> ModFeedbackGetAnalysisWithHttpInfoAsync(ModFeedbackGetAnalysisRequest modFeedbackGetAnalysisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the temporary completion record for the current user.
        /// </summary>
        /// <remarks>
        /// Returns the temporary completion record for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetCurrentCompletedTmp200Response</returns>
        System.Threading.Tasks.Task<ModFeedbackGetCurrentCompletedTmp200Response> ModFeedbackGetCurrentCompletedTmpAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the temporary completion record for the current user.
        /// </summary>
        /// <remarks>
        /// Returns the temporary completion record for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetCurrentCompletedTmp200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModFeedbackGetCurrentCompletedTmp200Response>> ModFeedbackGetCurrentCompletedTmpWithHttpInfoAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return access information for a given feedback.
        /// </summary>
        /// <remarks>
        /// Return access information for a given feedback.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFeedbackAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetFeedbackAccessInformation200Response</returns>
        System.Threading.Tasks.Task<ModFeedbackGetFeedbackAccessInformation200Response> ModFeedbackGetFeedbackAccessInformationAsync(ModFeedbackGetFeedbackAccessInformationRequest modFeedbackGetFeedbackAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return access information for a given feedback.
        /// </summary>
        /// <remarks>
        /// Return access information for a given feedback.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFeedbackAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetFeedbackAccessInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModFeedbackGetFeedbackAccessInformation200Response>> ModFeedbackGetFeedbackAccessInformationWithHttpInfoAsync(ModFeedbackGetFeedbackAccessInformationRequest modFeedbackGetFeedbackAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetFeedbacksByCourses200Response</returns>
        System.Threading.Tasks.Task<ModFeedbackGetFeedbacksByCourses200Response> ModFeedbackGetFeedbacksByCoursesAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetFeedbacksByCourses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModFeedbackGetFeedbacksByCourses200Response>> ModFeedbackGetFeedbacksByCoursesWithHttpInfoAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves responses from the last finished attempt.
        /// </summary>
        /// <remarks>
        /// Retrieves responses from the last finished attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetFinishedResponses200Response</returns>
        System.Threading.Tasks.Task<ModFeedbackGetFinishedResponses200Response> ModFeedbackGetFinishedResponsesAsync(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves responses from the last finished attempt.
        /// </summary>
        /// <remarks>
        /// Retrieves responses from the last finished attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetFinishedResponses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModFeedbackGetFinishedResponses200Response>> ModFeedbackGetFinishedResponsesWithHttpInfoAsync(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the items (questions) in the given feedback.
        /// </summary>
        /// <remarks>
        /// Returns the items (questions) in the given feedback.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetItems200Response</returns>
        System.Threading.Tasks.Task<ModFeedbackGetItems200Response> ModFeedbackGetItemsAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the items (questions) in the given feedback.
        /// </summary>
        /// <remarks>
        /// Returns the items (questions) in the given feedback.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetItems200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModFeedbackGetItems200Response>> ModFeedbackGetItemsWithHttpInfoAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the last completion record for the current user.
        /// </summary>
        /// <remarks>
        /// Retrieves the last completion record for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetLastCompleted200Response</returns>
        System.Threading.Tasks.Task<ModFeedbackGetLastCompleted200Response> ModFeedbackGetLastCompletedAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the last completion record for the current user.
        /// </summary>
        /// <remarks>
        /// Retrieves the last completion record for the current user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetLastCompleted200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModFeedbackGetLastCompleted200Response>> ModFeedbackGetLastCompletedWithHttpInfoAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of students who didn&#39;t submit the feedback.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of students who didn&#39;t submit the feedback.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetNonRespondentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetNonRespondents200Response</returns>
        System.Threading.Tasks.Task<ModFeedbackGetNonRespondents200Response> ModFeedbackGetNonRespondentsAsync(ModFeedbackGetNonRespondentsRequest modFeedbackGetNonRespondentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of students who didn&#39;t submit the feedback.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of students who didn&#39;t submit the feedback.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetNonRespondentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetNonRespondents200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModFeedbackGetNonRespondents200Response>> ModFeedbackGetNonRespondentsWithHttpInfoAsync(ModFeedbackGetNonRespondentsRequest modFeedbackGetNonRespondentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a single feedback page items.
        /// </summary>
        /// <remarks>
        /// Get a single feedback page items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetPageItemsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetPageItems200Response</returns>
        System.Threading.Tasks.Task<ModFeedbackGetPageItems200Response> ModFeedbackGetPageItemsAsync(ModFeedbackGetPageItemsRequest modFeedbackGetPageItemsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a single feedback page items.
        /// </summary>
        /// <remarks>
        /// Get a single feedback page items.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetPageItemsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetPageItems200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModFeedbackGetPageItems200Response>> ModFeedbackGetPageItemsWithHttpInfoAsync(ModFeedbackGetPageItemsRequest modFeedbackGetPageItemsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the feedback user responses analysis.
        /// </summary>
        /// <remarks>
        /// Return the feedback user responses analysis.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetResponsesAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetResponsesAnalysis200Response</returns>
        System.Threading.Tasks.Task<ModFeedbackGetResponsesAnalysis200Response> ModFeedbackGetResponsesAnalysisAsync(ModFeedbackGetResponsesAnalysisRequest modFeedbackGetResponsesAnalysisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the feedback user responses analysis.
        /// </summary>
        /// <remarks>
        /// Return the feedback user responses analysis.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetResponsesAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetResponsesAnalysis200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModFeedbackGetResponsesAnalysis200Response>> ModFeedbackGetResponsesAnalysisWithHttpInfoAsync(ModFeedbackGetResponsesAnalysisRequest modFeedbackGetResponsesAnalysisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves responses from the current unfinished attempt.
        /// </summary>
        /// <remarks>
        /// Retrieves responses from the current unfinished attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetUnfinishedResponses200Response</returns>
        System.Threading.Tasks.Task<ModFeedbackGetUnfinishedResponses200Response> ModFeedbackGetUnfinishedResponsesAsync(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves responses from the current unfinished attempt.
        /// </summary>
        /// <remarks>
        /// Retrieves responses from the current unfinished attempt.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetUnfinishedResponses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModFeedbackGetUnfinishedResponses200Response>> ModFeedbackGetUnfinishedResponsesWithHttpInfoAsync(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Starts or continues a feedback submission.
        /// </summary>
        /// <remarks>
        /// Starts or continues a feedback submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackLaunchFeedback200Response</returns>
        System.Threading.Tasks.Task<ModFeedbackLaunchFeedback200Response> ModFeedbackLaunchFeedbackAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Starts or continues a feedback submission.
        /// </summary>
        /// <remarks>
        /// Starts or continues a feedback submission.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackLaunchFeedback200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModFeedbackLaunchFeedback200Response>> ModFeedbackLaunchFeedbackWithHttpInfoAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Process a jump between pages.
        /// </summary>
        /// <remarks>
        /// Process a jump between pages.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackProcessPage200Response</returns>
        System.Threading.Tasks.Task<ModFeedbackProcessPage200Response> ModFeedbackProcessPageAsync(ModFeedbackProcessPageRequest modFeedbackProcessPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Process a jump between pages.
        /// </summary>
        /// <remarks>
        /// Process a jump between pages.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackProcessPage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModFeedbackProcessPage200Response>> ModFeedbackProcessPageWithHttpInfoAsync(ModFeedbackProcessPageRequest modFeedbackProcessPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackViewFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModFeedbackViewFeedbackAsync(ModFeedbackViewFeedbackRequest modFeedbackViewFeedbackRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackViewFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModFeedbackViewFeedbackWithHttpInfoAsync(ModFeedbackViewFeedbackRequest modFeedbackViewFeedbackRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModFeedbackApi : IModFeedbackApiSync, IModFeedbackApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModFeedbackApi : IModFeedbackApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModFeedbackApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModFeedbackApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModFeedbackApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModFeedbackApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModFeedbackApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModFeedbackApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModFeedbackApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModFeedbackApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves the feedback analysis. Retrieves the feedback analysis.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetAnalysis200Response</returns>
        public ModFeedbackGetAnalysis200Response ModFeedbackGetAnalysis(ModFeedbackGetAnalysisRequest modFeedbackGetAnalysisRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetAnalysis200Response> localVarResponse = ModFeedbackGetAnalysisWithHttpInfo(modFeedbackGetAnalysisRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the feedback analysis. Retrieves the feedback analysis.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetAnalysis200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetAnalysis200Response> ModFeedbackGetAnalysisWithHttpInfo(ModFeedbackGetAnalysisRequest modFeedbackGetAnalysisRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modFeedbackGetAnalysisRequest' is set
            if (modFeedbackGetAnalysisRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetAnalysisRequest' when calling ModFeedbackApi->ModFeedbackGetAnalysis");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetAnalysisRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetAnalysis";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModFeedbackGetAnalysis200Response>("/mod_feedback_get_analysis", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetAnalysis", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the feedback analysis. Retrieves the feedback analysis.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetAnalysis200Response</returns>
        public async System.Threading.Tasks.Task<ModFeedbackGetAnalysis200Response> ModFeedbackGetAnalysisAsync(ModFeedbackGetAnalysisRequest modFeedbackGetAnalysisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetAnalysis200Response> localVarResponse = await ModFeedbackGetAnalysisWithHttpInfoAsync(modFeedbackGetAnalysisRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the feedback analysis. Retrieves the feedback analysis.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetAnalysis200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetAnalysis200Response>> ModFeedbackGetAnalysisWithHttpInfoAsync(ModFeedbackGetAnalysisRequest modFeedbackGetAnalysisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modFeedbackGetAnalysisRequest' is set
            if (modFeedbackGetAnalysisRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetAnalysisRequest' when calling ModFeedbackApi->ModFeedbackGetAnalysis");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetAnalysisRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetAnalysis";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModFeedbackGetAnalysis200Response>("/mod_feedback_get_analysis", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetAnalysis", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the temporary completion record for the current user. Returns the temporary completion record for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetCurrentCompletedTmp200Response</returns>
        public ModFeedbackGetCurrentCompletedTmp200Response ModFeedbackGetCurrentCompletedTmp(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetCurrentCompletedTmp200Response> localVarResponse = ModFeedbackGetCurrentCompletedTmpWithHttpInfo(modFeedbackGetCurrentCompletedTmpRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the temporary completion record for the current user. Returns the temporary completion record for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetCurrentCompletedTmp200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetCurrentCompletedTmp200Response> ModFeedbackGetCurrentCompletedTmpWithHttpInfo(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' is set
            if (modFeedbackGetCurrentCompletedTmpRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetCurrentCompletedTmpRequest' when calling ModFeedbackApi->ModFeedbackGetCurrentCompletedTmp");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetCurrentCompletedTmpRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetCurrentCompletedTmp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModFeedbackGetCurrentCompletedTmp200Response>("/mod_feedback_get_current_completed_tmp", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetCurrentCompletedTmp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the temporary completion record for the current user. Returns the temporary completion record for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetCurrentCompletedTmp200Response</returns>
        public async System.Threading.Tasks.Task<ModFeedbackGetCurrentCompletedTmp200Response> ModFeedbackGetCurrentCompletedTmpAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetCurrentCompletedTmp200Response> localVarResponse = await ModFeedbackGetCurrentCompletedTmpWithHttpInfoAsync(modFeedbackGetCurrentCompletedTmpRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the temporary completion record for the current user. Returns the temporary completion record for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetCurrentCompletedTmp200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetCurrentCompletedTmp200Response>> ModFeedbackGetCurrentCompletedTmpWithHttpInfoAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' is set
            if (modFeedbackGetCurrentCompletedTmpRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetCurrentCompletedTmpRequest' when calling ModFeedbackApi->ModFeedbackGetCurrentCompletedTmp");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetCurrentCompletedTmpRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetCurrentCompletedTmp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModFeedbackGetCurrentCompletedTmp200Response>("/mod_feedback_get_current_completed_tmp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetCurrentCompletedTmp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return access information for a given feedback. Return access information for a given feedback.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFeedbackAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetFeedbackAccessInformation200Response</returns>
        public ModFeedbackGetFeedbackAccessInformation200Response ModFeedbackGetFeedbackAccessInformation(ModFeedbackGetFeedbackAccessInformationRequest modFeedbackGetFeedbackAccessInformationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetFeedbackAccessInformation200Response> localVarResponse = ModFeedbackGetFeedbackAccessInformationWithHttpInfo(modFeedbackGetFeedbackAccessInformationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return access information for a given feedback. Return access information for a given feedback.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFeedbackAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetFeedbackAccessInformation200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetFeedbackAccessInformation200Response> ModFeedbackGetFeedbackAccessInformationWithHttpInfo(ModFeedbackGetFeedbackAccessInformationRequest modFeedbackGetFeedbackAccessInformationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modFeedbackGetFeedbackAccessInformationRequest' is set
            if (modFeedbackGetFeedbackAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetFeedbackAccessInformationRequest' when calling ModFeedbackApi->ModFeedbackGetFeedbackAccessInformation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetFeedbackAccessInformationRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetFeedbackAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModFeedbackGetFeedbackAccessInformation200Response>("/mod_feedback_get_feedback_access_information", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetFeedbackAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return access information for a given feedback. Return access information for a given feedback.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFeedbackAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetFeedbackAccessInformation200Response</returns>
        public async System.Threading.Tasks.Task<ModFeedbackGetFeedbackAccessInformation200Response> ModFeedbackGetFeedbackAccessInformationAsync(ModFeedbackGetFeedbackAccessInformationRequest modFeedbackGetFeedbackAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetFeedbackAccessInformation200Response> localVarResponse = await ModFeedbackGetFeedbackAccessInformationWithHttpInfoAsync(modFeedbackGetFeedbackAccessInformationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return access information for a given feedback. Return access information for a given feedback.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFeedbackAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetFeedbackAccessInformation200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetFeedbackAccessInformation200Response>> ModFeedbackGetFeedbackAccessInformationWithHttpInfoAsync(ModFeedbackGetFeedbackAccessInformationRequest modFeedbackGetFeedbackAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modFeedbackGetFeedbackAccessInformationRequest' is set
            if (modFeedbackGetFeedbackAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetFeedbackAccessInformationRequest' when calling ModFeedbackApi->ModFeedbackGetFeedbackAccessInformation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetFeedbackAccessInformationRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetFeedbackAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModFeedbackGetFeedbackAccessInformation200Response>("/mod_feedback_get_feedback_access_information", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetFeedbackAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned. Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetFeedbacksByCourses200Response</returns>
        public ModFeedbackGetFeedbacksByCourses200Response ModFeedbackGetFeedbacksByCourses(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetFeedbacksByCourses200Response> localVarResponse = ModFeedbackGetFeedbacksByCoursesWithHttpInfo(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned. Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetFeedbacksByCourses200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetFeedbacksByCourses200Response> ModFeedbackGetFeedbacksByCoursesWithHttpInfo(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' is set
            if (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' when calling ModFeedbackApi->ModFeedbackGetFeedbacksByCourses");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetFeedbacksByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModFeedbackGetFeedbacksByCourses200Response>("/mod_feedback_get_feedbacks_by_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetFeedbacksByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned. Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetFeedbacksByCourses200Response</returns>
        public async System.Threading.Tasks.Task<ModFeedbackGetFeedbacksByCourses200Response> ModFeedbackGetFeedbacksByCoursesAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetFeedbacksByCourses200Response> localVarResponse = await ModFeedbackGetFeedbacksByCoursesWithHttpInfoAsync(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned. Returns a list of feedbacks in a provided list of courses, if no list is provided all feedbacks that                             the user can view will be returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetFeedbacksByCourses200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetFeedbacksByCourses200Response>> ModFeedbackGetFeedbacksByCoursesWithHttpInfoAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' is set
            if (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' when calling ModFeedbackApi->ModFeedbackGetFeedbacksByCourses");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetFeedbacksByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModFeedbackGetFeedbacksByCourses200Response>("/mod_feedback_get_feedbacks_by_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetFeedbacksByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves responses from the last finished attempt. Retrieves responses from the last finished attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetFinishedResponses200Response</returns>
        public ModFeedbackGetFinishedResponses200Response ModFeedbackGetFinishedResponses(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetFinishedResponses200Response> localVarResponse = ModFeedbackGetFinishedResponsesWithHttpInfo(modFeedbackGetFinishedResponsesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves responses from the last finished attempt. Retrieves responses from the last finished attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetFinishedResponses200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetFinishedResponses200Response> ModFeedbackGetFinishedResponsesWithHttpInfo(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modFeedbackGetFinishedResponsesRequest' is set
            if (modFeedbackGetFinishedResponsesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetFinishedResponsesRequest' when calling ModFeedbackApi->ModFeedbackGetFinishedResponses");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetFinishedResponsesRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetFinishedResponses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModFeedbackGetFinishedResponses200Response>("/mod_feedback_get_finished_responses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetFinishedResponses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves responses from the last finished attempt. Retrieves responses from the last finished attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetFinishedResponses200Response</returns>
        public async System.Threading.Tasks.Task<ModFeedbackGetFinishedResponses200Response> ModFeedbackGetFinishedResponsesAsync(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetFinishedResponses200Response> localVarResponse = await ModFeedbackGetFinishedResponsesWithHttpInfoAsync(modFeedbackGetFinishedResponsesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves responses from the last finished attempt. Retrieves responses from the last finished attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetFinishedResponses200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetFinishedResponses200Response>> ModFeedbackGetFinishedResponsesWithHttpInfoAsync(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modFeedbackGetFinishedResponsesRequest' is set
            if (modFeedbackGetFinishedResponsesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetFinishedResponsesRequest' when calling ModFeedbackApi->ModFeedbackGetFinishedResponses");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetFinishedResponsesRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetFinishedResponses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModFeedbackGetFinishedResponses200Response>("/mod_feedback_get_finished_responses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetFinishedResponses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the items (questions) in the given feedback. Returns the items (questions) in the given feedback.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetItems200Response</returns>
        public ModFeedbackGetItems200Response ModFeedbackGetItems(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetItems200Response> localVarResponse = ModFeedbackGetItemsWithHttpInfo(modFeedbackGetCurrentCompletedTmpRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the items (questions) in the given feedback. Returns the items (questions) in the given feedback.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetItems200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetItems200Response> ModFeedbackGetItemsWithHttpInfo(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' is set
            if (modFeedbackGetCurrentCompletedTmpRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetCurrentCompletedTmpRequest' when calling ModFeedbackApi->ModFeedbackGetItems");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetCurrentCompletedTmpRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModFeedbackGetItems200Response>("/mod_feedback_get_items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the items (questions) in the given feedback. Returns the items (questions) in the given feedback.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetItems200Response</returns>
        public async System.Threading.Tasks.Task<ModFeedbackGetItems200Response> ModFeedbackGetItemsAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetItems200Response> localVarResponse = await ModFeedbackGetItemsWithHttpInfoAsync(modFeedbackGetCurrentCompletedTmpRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the items (questions) in the given feedback. Returns the items (questions) in the given feedback.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetItems200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetItems200Response>> ModFeedbackGetItemsWithHttpInfoAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' is set
            if (modFeedbackGetCurrentCompletedTmpRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetCurrentCompletedTmpRequest' when calling ModFeedbackApi->ModFeedbackGetItems");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetCurrentCompletedTmpRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModFeedbackGetItems200Response>("/mod_feedback_get_items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the last completion record for the current user. Retrieves the last completion record for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetLastCompleted200Response</returns>
        public ModFeedbackGetLastCompleted200Response ModFeedbackGetLastCompleted(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetLastCompleted200Response> localVarResponse = ModFeedbackGetLastCompletedWithHttpInfo(modFeedbackGetCurrentCompletedTmpRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the last completion record for the current user. Retrieves the last completion record for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetLastCompleted200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetLastCompleted200Response> ModFeedbackGetLastCompletedWithHttpInfo(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' is set
            if (modFeedbackGetCurrentCompletedTmpRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetCurrentCompletedTmpRequest' when calling ModFeedbackApi->ModFeedbackGetLastCompleted");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetCurrentCompletedTmpRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetLastCompleted";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModFeedbackGetLastCompleted200Response>("/mod_feedback_get_last_completed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetLastCompleted", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the last completion record for the current user. Retrieves the last completion record for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetLastCompleted200Response</returns>
        public async System.Threading.Tasks.Task<ModFeedbackGetLastCompleted200Response> ModFeedbackGetLastCompletedAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetLastCompleted200Response> localVarResponse = await ModFeedbackGetLastCompletedWithHttpInfoAsync(modFeedbackGetCurrentCompletedTmpRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the last completion record for the current user. Retrieves the last completion record for the current user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetLastCompleted200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetLastCompleted200Response>> ModFeedbackGetLastCompletedWithHttpInfoAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' is set
            if (modFeedbackGetCurrentCompletedTmpRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetCurrentCompletedTmpRequest' when calling ModFeedbackApi->ModFeedbackGetLastCompleted");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetCurrentCompletedTmpRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetLastCompleted";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModFeedbackGetLastCompleted200Response>("/mod_feedback_get_last_completed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetLastCompleted", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of students who didn&#39;t submit the feedback. Retrieves a list of students who didn&#39;t submit the feedback.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetNonRespondentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetNonRespondents200Response</returns>
        public ModFeedbackGetNonRespondents200Response ModFeedbackGetNonRespondents(ModFeedbackGetNonRespondentsRequest modFeedbackGetNonRespondentsRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetNonRespondents200Response> localVarResponse = ModFeedbackGetNonRespondentsWithHttpInfo(modFeedbackGetNonRespondentsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of students who didn&#39;t submit the feedback. Retrieves a list of students who didn&#39;t submit the feedback.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetNonRespondentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetNonRespondents200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetNonRespondents200Response> ModFeedbackGetNonRespondentsWithHttpInfo(ModFeedbackGetNonRespondentsRequest modFeedbackGetNonRespondentsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modFeedbackGetNonRespondentsRequest' is set
            if (modFeedbackGetNonRespondentsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetNonRespondentsRequest' when calling ModFeedbackApi->ModFeedbackGetNonRespondents");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetNonRespondentsRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetNonRespondents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModFeedbackGetNonRespondents200Response>("/mod_feedback_get_non_respondents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetNonRespondents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of students who didn&#39;t submit the feedback. Retrieves a list of students who didn&#39;t submit the feedback.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetNonRespondentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetNonRespondents200Response</returns>
        public async System.Threading.Tasks.Task<ModFeedbackGetNonRespondents200Response> ModFeedbackGetNonRespondentsAsync(ModFeedbackGetNonRespondentsRequest modFeedbackGetNonRespondentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetNonRespondents200Response> localVarResponse = await ModFeedbackGetNonRespondentsWithHttpInfoAsync(modFeedbackGetNonRespondentsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of students who didn&#39;t submit the feedback. Retrieves a list of students who didn&#39;t submit the feedback.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetNonRespondentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetNonRespondents200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetNonRespondents200Response>> ModFeedbackGetNonRespondentsWithHttpInfoAsync(ModFeedbackGetNonRespondentsRequest modFeedbackGetNonRespondentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modFeedbackGetNonRespondentsRequest' is set
            if (modFeedbackGetNonRespondentsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetNonRespondentsRequest' when calling ModFeedbackApi->ModFeedbackGetNonRespondents");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetNonRespondentsRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetNonRespondents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModFeedbackGetNonRespondents200Response>("/mod_feedback_get_non_respondents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetNonRespondents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single feedback page items. Get a single feedback page items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetPageItemsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetPageItems200Response</returns>
        public ModFeedbackGetPageItems200Response ModFeedbackGetPageItems(ModFeedbackGetPageItemsRequest modFeedbackGetPageItemsRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetPageItems200Response> localVarResponse = ModFeedbackGetPageItemsWithHttpInfo(modFeedbackGetPageItemsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single feedback page items. Get a single feedback page items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetPageItemsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetPageItems200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetPageItems200Response> ModFeedbackGetPageItemsWithHttpInfo(ModFeedbackGetPageItemsRequest modFeedbackGetPageItemsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modFeedbackGetPageItemsRequest' is set
            if (modFeedbackGetPageItemsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetPageItemsRequest' when calling ModFeedbackApi->ModFeedbackGetPageItems");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetPageItemsRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetPageItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModFeedbackGetPageItems200Response>("/mod_feedback_get_page_items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetPageItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single feedback page items. Get a single feedback page items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetPageItemsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetPageItems200Response</returns>
        public async System.Threading.Tasks.Task<ModFeedbackGetPageItems200Response> ModFeedbackGetPageItemsAsync(ModFeedbackGetPageItemsRequest modFeedbackGetPageItemsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetPageItems200Response> localVarResponse = await ModFeedbackGetPageItemsWithHttpInfoAsync(modFeedbackGetPageItemsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single feedback page items. Get a single feedback page items.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetPageItemsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetPageItems200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetPageItems200Response>> ModFeedbackGetPageItemsWithHttpInfoAsync(ModFeedbackGetPageItemsRequest modFeedbackGetPageItemsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modFeedbackGetPageItemsRequest' is set
            if (modFeedbackGetPageItemsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetPageItemsRequest' when calling ModFeedbackApi->ModFeedbackGetPageItems");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetPageItemsRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetPageItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModFeedbackGetPageItems200Response>("/mod_feedback_get_page_items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetPageItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the feedback user responses analysis. Return the feedback user responses analysis.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetResponsesAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetResponsesAnalysis200Response</returns>
        public ModFeedbackGetResponsesAnalysis200Response ModFeedbackGetResponsesAnalysis(ModFeedbackGetResponsesAnalysisRequest modFeedbackGetResponsesAnalysisRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetResponsesAnalysis200Response> localVarResponse = ModFeedbackGetResponsesAnalysisWithHttpInfo(modFeedbackGetResponsesAnalysisRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the feedback user responses analysis. Return the feedback user responses analysis.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetResponsesAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetResponsesAnalysis200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetResponsesAnalysis200Response> ModFeedbackGetResponsesAnalysisWithHttpInfo(ModFeedbackGetResponsesAnalysisRequest modFeedbackGetResponsesAnalysisRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modFeedbackGetResponsesAnalysisRequest' is set
            if (modFeedbackGetResponsesAnalysisRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetResponsesAnalysisRequest' when calling ModFeedbackApi->ModFeedbackGetResponsesAnalysis");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetResponsesAnalysisRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetResponsesAnalysis";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModFeedbackGetResponsesAnalysis200Response>("/mod_feedback_get_responses_analysis", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetResponsesAnalysis", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the feedback user responses analysis. Return the feedback user responses analysis.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetResponsesAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetResponsesAnalysis200Response</returns>
        public async System.Threading.Tasks.Task<ModFeedbackGetResponsesAnalysis200Response> ModFeedbackGetResponsesAnalysisAsync(ModFeedbackGetResponsesAnalysisRequest modFeedbackGetResponsesAnalysisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetResponsesAnalysis200Response> localVarResponse = await ModFeedbackGetResponsesAnalysisWithHttpInfoAsync(modFeedbackGetResponsesAnalysisRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the feedback user responses analysis. Return the feedback user responses analysis.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetResponsesAnalysisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetResponsesAnalysis200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetResponsesAnalysis200Response>> ModFeedbackGetResponsesAnalysisWithHttpInfoAsync(ModFeedbackGetResponsesAnalysisRequest modFeedbackGetResponsesAnalysisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modFeedbackGetResponsesAnalysisRequest' is set
            if (modFeedbackGetResponsesAnalysisRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetResponsesAnalysisRequest' when calling ModFeedbackApi->ModFeedbackGetResponsesAnalysis");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetResponsesAnalysisRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetResponsesAnalysis";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModFeedbackGetResponsesAnalysis200Response>("/mod_feedback_get_responses_analysis", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetResponsesAnalysis", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves responses from the current unfinished attempt. Retrieves responses from the current unfinished attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackGetUnfinishedResponses200Response</returns>
        public ModFeedbackGetUnfinishedResponses200Response ModFeedbackGetUnfinishedResponses(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetUnfinishedResponses200Response> localVarResponse = ModFeedbackGetUnfinishedResponsesWithHttpInfo(modFeedbackGetFinishedResponsesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves responses from the current unfinished attempt. Retrieves responses from the current unfinished attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackGetUnfinishedResponses200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetUnfinishedResponses200Response> ModFeedbackGetUnfinishedResponsesWithHttpInfo(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modFeedbackGetFinishedResponsesRequest' is set
            if (modFeedbackGetFinishedResponsesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetFinishedResponsesRequest' when calling ModFeedbackApi->ModFeedbackGetUnfinishedResponses");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetFinishedResponsesRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetUnfinishedResponses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModFeedbackGetUnfinishedResponses200Response>("/mod_feedback_get_unfinished_responses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetUnfinishedResponses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves responses from the current unfinished attempt. Retrieves responses from the current unfinished attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackGetUnfinishedResponses200Response</returns>
        public async System.Threading.Tasks.Task<ModFeedbackGetUnfinishedResponses200Response> ModFeedbackGetUnfinishedResponsesAsync(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetUnfinishedResponses200Response> localVarResponse = await ModFeedbackGetUnfinishedResponsesWithHttpInfoAsync(modFeedbackGetFinishedResponsesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves responses from the current unfinished attempt. Retrieves responses from the current unfinished attempt.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetFinishedResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackGetUnfinishedResponses200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModFeedbackGetUnfinishedResponses200Response>> ModFeedbackGetUnfinishedResponsesWithHttpInfoAsync(ModFeedbackGetFinishedResponsesRequest modFeedbackGetFinishedResponsesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modFeedbackGetFinishedResponsesRequest' is set
            if (modFeedbackGetFinishedResponsesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetFinishedResponsesRequest' when calling ModFeedbackApi->ModFeedbackGetUnfinishedResponses");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetFinishedResponsesRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackGetUnfinishedResponses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModFeedbackGetUnfinishedResponses200Response>("/mod_feedback_get_unfinished_responses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackGetUnfinishedResponses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts or continues a feedback submission. Starts or continues a feedback submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackLaunchFeedback200Response</returns>
        public ModFeedbackLaunchFeedback200Response ModFeedbackLaunchFeedback(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackLaunchFeedback200Response> localVarResponse = ModFeedbackLaunchFeedbackWithHttpInfo(modFeedbackGetCurrentCompletedTmpRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts or continues a feedback submission. Starts or continues a feedback submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackLaunchFeedback200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModFeedbackLaunchFeedback200Response> ModFeedbackLaunchFeedbackWithHttpInfo(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' is set
            if (modFeedbackGetCurrentCompletedTmpRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetCurrentCompletedTmpRequest' when calling ModFeedbackApi->ModFeedbackLaunchFeedback");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetCurrentCompletedTmpRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackLaunchFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModFeedbackLaunchFeedback200Response>("/mod_feedback_launch_feedback", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackLaunchFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Starts or continues a feedback submission. Starts or continues a feedback submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackLaunchFeedback200Response</returns>
        public async System.Threading.Tasks.Task<ModFeedbackLaunchFeedback200Response> ModFeedbackLaunchFeedbackAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackLaunchFeedback200Response> localVarResponse = await ModFeedbackLaunchFeedbackWithHttpInfoAsync(modFeedbackGetCurrentCompletedTmpRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Starts or continues a feedback submission. Starts or continues a feedback submission.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackGetCurrentCompletedTmpRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackLaunchFeedback200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModFeedbackLaunchFeedback200Response>> ModFeedbackLaunchFeedbackWithHttpInfoAsync(ModFeedbackGetCurrentCompletedTmpRequest modFeedbackGetCurrentCompletedTmpRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modFeedbackGetCurrentCompletedTmpRequest' is set
            if (modFeedbackGetCurrentCompletedTmpRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackGetCurrentCompletedTmpRequest' when calling ModFeedbackApi->ModFeedbackLaunchFeedback");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackGetCurrentCompletedTmpRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackLaunchFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModFeedbackLaunchFeedback200Response>("/mod_feedback_launch_feedback", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackLaunchFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process a jump between pages. Process a jump between pages.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModFeedbackProcessPage200Response</returns>
        public ModFeedbackProcessPage200Response ModFeedbackProcessPage(ModFeedbackProcessPageRequest modFeedbackProcessPageRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackProcessPage200Response> localVarResponse = ModFeedbackProcessPageWithHttpInfo(modFeedbackProcessPageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process a jump between pages. Process a jump between pages.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModFeedbackProcessPage200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModFeedbackProcessPage200Response> ModFeedbackProcessPageWithHttpInfo(ModFeedbackProcessPageRequest modFeedbackProcessPageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modFeedbackProcessPageRequest' is set
            if (modFeedbackProcessPageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackProcessPageRequest' when calling ModFeedbackApi->ModFeedbackProcessPage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackProcessPageRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackProcessPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModFeedbackProcessPage200Response>("/mod_feedback_process_page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackProcessPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Process a jump between pages. Process a jump between pages.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModFeedbackProcessPage200Response</returns>
        public async System.Threading.Tasks.Task<ModFeedbackProcessPage200Response> ModFeedbackProcessPageAsync(ModFeedbackProcessPageRequest modFeedbackProcessPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModFeedbackProcessPage200Response> localVarResponse = await ModFeedbackProcessPageWithHttpInfoAsync(modFeedbackProcessPageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Process a jump between pages. Process a jump between pages.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackProcessPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModFeedbackProcessPage200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModFeedbackProcessPage200Response>> ModFeedbackProcessPageWithHttpInfoAsync(ModFeedbackProcessPageRequest modFeedbackProcessPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modFeedbackProcessPageRequest' is set
            if (modFeedbackProcessPageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackProcessPageRequest' when calling ModFeedbackApi->ModFeedbackProcessPage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackProcessPageRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackProcessPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModFeedbackProcessPage200Response>("/mod_feedback_process_page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackProcessPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackViewFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModFeedbackViewFeedback(ModFeedbackViewFeedbackRequest modFeedbackViewFeedbackRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModFeedbackViewFeedbackWithHttpInfo(modFeedbackViewFeedbackRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackViewFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModFeedbackViewFeedbackWithHttpInfo(ModFeedbackViewFeedbackRequest modFeedbackViewFeedbackRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modFeedbackViewFeedbackRequest' is set
            if (modFeedbackViewFeedbackRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackViewFeedbackRequest' when calling ModFeedbackApi->ModFeedbackViewFeedback");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackViewFeedbackRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackViewFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_feedback_view_feedback", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackViewFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackViewFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModFeedbackViewFeedbackAsync(ModFeedbackViewFeedbackRequest modFeedbackViewFeedbackRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModFeedbackViewFeedbackWithHttpInfoAsync(modFeedbackViewFeedbackRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modFeedbackViewFeedbackRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModFeedbackViewFeedbackWithHttpInfoAsync(ModFeedbackViewFeedbackRequest modFeedbackViewFeedbackRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modFeedbackViewFeedbackRequest' is set
            if (modFeedbackViewFeedbackRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modFeedbackViewFeedbackRequest' when calling ModFeedbackApi->ModFeedbackViewFeedback");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modFeedbackViewFeedbackRequest;

            localVarRequestOptions.Operation = "ModFeedbackApi.ModFeedbackViewFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_feedback_view_feedback", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModFeedbackViewFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
