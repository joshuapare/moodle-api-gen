/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolLpApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Load the data for the competencies manage page template
        /// </summary>
        /// <remarks>
        /// Load the data for the competencies manage page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetenciesManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForCompetenciesManagePage200Response</returns>
        ToolLpDataForCompetenciesManagePage200Response ToolLpDataForCompetenciesManagePage(ToolLpDataForCompetenciesManagePageRequest toolLpDataForCompetenciesManagePageRequest, int operationIndex = 0);

        /// <summary>
        /// Load the data for the competencies manage page template
        /// </summary>
        /// <remarks>
        /// Load the data for the competencies manage page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetenciesManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForCompetenciesManagePage200Response</returns>
        ApiResponse<ToolLpDataForCompetenciesManagePage200Response> ToolLpDataForCompetenciesManagePageWithHttpInfo(ToolLpDataForCompetenciesManagePageRequest toolLpDataForCompetenciesManagePageRequest, int operationIndex = 0);
        /// <summary>
        /// Load the data for the competency frameworks manage page template
        /// </summary>
        /// <remarks>
        /// Load the data for the competency frameworks manage page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForCompetencyFrameworksManagePage200Response</returns>
        ToolLpDataForCompetencyFrameworksManagePage200Response ToolLpDataForCompetencyFrameworksManagePage(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0);

        /// <summary>
        /// Load the data for the competency frameworks manage page template
        /// </summary>
        /// <remarks>
        /// Load the data for the competency frameworks manage page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForCompetencyFrameworksManagePage200Response</returns>
        ApiResponse<ToolLpDataForCompetencyFrameworksManagePage200Response> ToolLpDataForCompetencyFrameworksManagePageWithHttpInfo(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0);
        /// <summary>
        /// Load competency data for summary template.
        /// </summary>
        /// <remarks>
        /// Load competency data for summary template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForCompetencySummary200Response</returns>
        ToolLpDataForCompetencySummary200Response ToolLpDataForCompetencySummary(ToolLpDataForCompetencySummaryRequest toolLpDataForCompetencySummaryRequest, int operationIndex = 0);

        /// <summary>
        /// Load competency data for summary template.
        /// </summary>
        /// <remarks>
        /// Load competency data for summary template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForCompetencySummary200Response</returns>
        ApiResponse<ToolLpDataForCompetencySummary200Response> ToolLpDataForCompetencySummaryWithHttpInfo(ToolLpDataForCompetencySummaryRequest toolLpDataForCompetencySummaryRequest, int operationIndex = 0);
        /// <summary>
        /// Load the data for the course competencies page template.
        /// </summary>
        /// <remarks>
        /// Load the data for the course competencies page template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCourseCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForCourseCompetenciesPage200Response</returns>
        ToolLpDataForCourseCompetenciesPage200Response ToolLpDataForCourseCompetenciesPage(ToolLpDataForCourseCompetenciesPageRequest toolLpDataForCourseCompetenciesPageRequest, int operationIndex = 0);

        /// <summary>
        /// Load the data for the course competencies page template.
        /// </summary>
        /// <remarks>
        /// Load the data for the course competencies page template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCourseCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForCourseCompetenciesPage200Response</returns>
        ApiResponse<ToolLpDataForCourseCompetenciesPage200Response> ToolLpDataForCourseCompetenciesPageWithHttpInfo(ToolLpDataForCourseCompetenciesPageRequest toolLpDataForCourseCompetenciesPageRequest, int operationIndex = 0);
        /// <summary>
        /// Load the data for the plan page template.
        /// </summary>
        /// <remarks>
        /// Load the data for the plan page template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompletePlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForPlanPage200Response</returns>
        ToolLpDataForPlanPage200Response ToolLpDataForPlanPage(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, int operationIndex = 0);

        /// <summary>
        /// Load the data for the plan page template.
        /// </summary>
        /// <remarks>
        /// Load the data for the plan page template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompletePlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForPlanPage200Response</returns>
        ApiResponse<ToolLpDataForPlanPage200Response> ToolLpDataForPlanPageWithHttpInfo(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, int operationIndex = 0);
        /// <summary>
        /// Load the data for the plans page template
        /// </summary>
        /// <remarks>
        /// Load the data for the plans page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForPlansPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForPlansPage200Response</returns>
        ToolLpDataForPlansPage200Response ToolLpDataForPlansPage(ToolLpDataForPlansPageRequest toolLpDataForPlansPageRequest, int operationIndex = 0);

        /// <summary>
        /// Load the data for the plans page template
        /// </summary>
        /// <remarks>
        /// Load the data for the plans page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForPlansPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForPlansPage200Response</returns>
        ApiResponse<ToolLpDataForPlansPage200Response> ToolLpDataForPlansPageWithHttpInfo(ToolLpDataForPlansPageRequest toolLpDataForPlansPageRequest, int operationIndex = 0);
        /// <summary>
        /// Load the data for the related competencies template.
        /// </summary>
        /// <remarks>
        /// Load the data for the related competencies template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForRelatedCompetenciesSectionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForRelatedCompetenciesSection200Response</returns>
        ToolLpDataForRelatedCompetenciesSection200Response ToolLpDataForRelatedCompetenciesSection(ToolLpDataForRelatedCompetenciesSectionRequest toolLpDataForRelatedCompetenciesSectionRequest, int operationIndex = 0);

        /// <summary>
        /// Load the data for the related competencies template.
        /// </summary>
        /// <remarks>
        /// Load the data for the related competencies template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForRelatedCompetenciesSectionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForRelatedCompetenciesSection200Response</returns>
        ApiResponse<ToolLpDataForRelatedCompetenciesSection200Response> ToolLpDataForRelatedCompetenciesSectionWithHttpInfo(ToolLpDataForRelatedCompetenciesSectionRequest toolLpDataForRelatedCompetenciesSectionRequest, int operationIndex = 0);
        /// <summary>
        /// Load the data for the template competencies page template.
        /// </summary>
        /// <remarks>
        /// Load the data for the template competencies page template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForTemplateCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForTemplateCompetenciesPage200Response</returns>
        ToolLpDataForTemplateCompetenciesPage200Response ToolLpDataForTemplateCompetenciesPage(ToolLpDataForTemplateCompetenciesPageRequest toolLpDataForTemplateCompetenciesPageRequest, int operationIndex = 0);

        /// <summary>
        /// Load the data for the template competencies page template.
        /// </summary>
        /// <remarks>
        /// Load the data for the template competencies page template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForTemplateCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForTemplateCompetenciesPage200Response</returns>
        ApiResponse<ToolLpDataForTemplateCompetenciesPage200Response> ToolLpDataForTemplateCompetenciesPageWithHttpInfo(ToolLpDataForTemplateCompetenciesPageRequest toolLpDataForTemplateCompetenciesPageRequest, int operationIndex = 0);
        /// <summary>
        /// Load the data for the learning plan templates manage page template
        /// </summary>
        /// <remarks>
        /// Load the data for the learning plan templates manage page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForTemplatesManagePage200Response</returns>
        ToolLpDataForTemplatesManagePage200Response ToolLpDataForTemplatesManagePage(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0);

        /// <summary>
        /// Load the data for the learning plan templates manage page template
        /// </summary>
        /// <remarks>
        /// Load the data for the learning plan templates manage page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForTemplatesManagePage200Response</returns>
        ApiResponse<ToolLpDataForTemplatesManagePage200Response> ToolLpDataForTemplatesManagePageWithHttpInfo(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0);
        /// <summary>
        /// Load a summary of a user competency.
        /// </summary>
        /// <remarks>
        /// Load a summary of a user competency.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForUserCompetencySummary200Response</returns>
        ToolLpDataForUserCompetencySummary200Response ToolLpDataForUserCompetencySummary(ToolLpDataForUserCompetencySummaryRequest toolLpDataForUserCompetencySummaryRequest, int operationIndex = 0);

        /// <summary>
        /// Load a summary of a user competency.
        /// </summary>
        /// <remarks>
        /// Load a summary of a user competency.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForUserCompetencySummary200Response</returns>
        ApiResponse<ToolLpDataForUserCompetencySummary200Response> ToolLpDataForUserCompetencySummaryWithHttpInfo(ToolLpDataForUserCompetencySummaryRequest toolLpDataForUserCompetencySummaryRequest, int operationIndex = 0);
        /// <summary>
        /// Load a summary of a user competency.
        /// </summary>
        /// <remarks>
        /// Load a summary of a user competency.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInCourseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForUserCompetencySummaryInCourse200Response</returns>
        ToolLpDataForUserCompetencySummaryInCourse200Response ToolLpDataForUserCompetencySummaryInCourse(ToolLpDataForUserCompetencySummaryInCourseRequest toolLpDataForUserCompetencySummaryInCourseRequest, int operationIndex = 0);

        /// <summary>
        /// Load a summary of a user competency.
        /// </summary>
        /// <remarks>
        /// Load a summary of a user competency.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInCourseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForUserCompetencySummaryInCourse200Response</returns>
        ApiResponse<ToolLpDataForUserCompetencySummaryInCourse200Response> ToolLpDataForUserCompetencySummaryInCourseWithHttpInfo(ToolLpDataForUserCompetencySummaryInCourseRequest toolLpDataForUserCompetencySummaryInCourseRequest, int operationIndex = 0);
        /// <summary>
        /// Load a summary of a user competency.
        /// </summary>
        /// <remarks>
        /// Load a summary of a user competency.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForUserCompetencySummaryInPlan200Response</returns>
        ToolLpDataForUserCompetencySummaryInPlan200Response ToolLpDataForUserCompetencySummaryInPlan(ToolLpDataForUserCompetencySummaryInPlanRequest toolLpDataForUserCompetencySummaryInPlanRequest, int operationIndex = 0);

        /// <summary>
        /// Load a summary of a user competency.
        /// </summary>
        /// <remarks>
        /// Load a summary of a user competency.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForUserCompetencySummaryInPlan200Response</returns>
        ApiResponse<ToolLpDataForUserCompetencySummaryInPlan200Response> ToolLpDataForUserCompetencySummaryInPlanWithHttpInfo(ToolLpDataForUserCompetencySummaryInPlanRequest toolLpDataForUserCompetencySummaryInPlanRequest, int operationIndex = 0);
        /// <summary>
        /// Load the data for the user evidence list page template
        /// </summary>
        /// <remarks>
        /// Load the data for the user evidence list page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidenceListPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForUserEvidenceListPage200Response</returns>
        ToolLpDataForUserEvidenceListPage200Response ToolLpDataForUserEvidenceListPage(ToolLpDataForUserEvidenceListPageRequest toolLpDataForUserEvidenceListPageRequest, int operationIndex = 0);

        /// <summary>
        /// Load the data for the user evidence list page template
        /// </summary>
        /// <remarks>
        /// Load the data for the user evidence list page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidenceListPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForUserEvidenceListPage200Response</returns>
        ApiResponse<ToolLpDataForUserEvidenceListPage200Response> ToolLpDataForUserEvidenceListPageWithHttpInfo(ToolLpDataForUserEvidenceListPageRequest toolLpDataForUserEvidenceListPageRequest, int operationIndex = 0);
        /// <summary>
        /// Load the data for the user evidence page template
        /// </summary>
        /// <remarks>
        /// Load the data for the user evidence page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidencePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForUserEvidencePage200Response</returns>
        ToolLpDataForUserEvidencePage200Response ToolLpDataForUserEvidencePage(ToolLpDataForUserEvidencePageRequest toolLpDataForUserEvidencePageRequest, int operationIndex = 0);

        /// <summary>
        /// Load the data for the user evidence page template
        /// </summary>
        /// <remarks>
        /// Load the data for the user evidence page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidencePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForUserEvidencePage200Response</returns>
        ApiResponse<ToolLpDataForUserEvidencePage200Response> ToolLpDataForUserEvidencePageWithHttpInfo(ToolLpDataForUserEvidencePageRequest toolLpDataForUserEvidencePageRequest, int operationIndex = 0);
        /// <summary>
        /// List the courses using a competency
        /// </summary>
        /// <remarks>
        /// List the courses using a competency
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompetencyViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ToolLpListCoursesUsingCompetency(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, int operationIndex = 0);

        /// <summary>
        /// List the courses using a competency
        /// </summary>
        /// <remarks>
        /// List the courses using a competency
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompetencyViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ToolLpListCoursesUsingCompetencyWithHttpInfo(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, int operationIndex = 0);
        /// <summary>
        /// Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
        /// </summary>
        /// <remarks>
        /// Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchCohortsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpSearchCohorts200Response</returns>
        ToolLpSearchCohorts200Response ToolLpSearchCohorts(ToolLpSearchCohortsRequest toolLpSearchCohortsRequest, int operationIndex = 0);

        /// <summary>
        /// Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
        /// </summary>
        /// <remarks>
        /// Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchCohortsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpSearchCohorts200Response</returns>
        ApiResponse<ToolLpSearchCohorts200Response> ToolLpSearchCohortsWithHttpInfo(ToolLpSearchCohortsRequest toolLpSearchCohortsRequest, int operationIndex = 0);
        /// <summary>
        /// Search for users.
        /// </summary>
        /// <remarks>
        /// Search for users.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpSearchUsers200Response</returns>
        ToolLpSearchUsers200Response ToolLpSearchUsers(ToolLpSearchUsersRequest toolLpSearchUsersRequest, int operationIndex = 0);

        /// <summary>
        /// Search for users.
        /// </summary>
        /// <remarks>
        /// Search for users.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpSearchUsers200Response</returns>
        ApiResponse<ToolLpSearchUsers200Response> ToolLpSearchUsersWithHttpInfo(ToolLpSearchUsersRequest toolLpSearchUsersRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolLpApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Load the data for the competencies manage page template
        /// </summary>
        /// <remarks>
        /// Load the data for the competencies manage page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetenciesManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForCompetenciesManagePage200Response</returns>
        System.Threading.Tasks.Task<ToolLpDataForCompetenciesManagePage200Response> ToolLpDataForCompetenciesManagePageAsync(ToolLpDataForCompetenciesManagePageRequest toolLpDataForCompetenciesManagePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load the data for the competencies manage page template
        /// </summary>
        /// <remarks>
        /// Load the data for the competencies manage page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetenciesManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForCompetenciesManagePage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpDataForCompetenciesManagePage200Response>> ToolLpDataForCompetenciesManagePageWithHttpInfoAsync(ToolLpDataForCompetenciesManagePageRequest toolLpDataForCompetenciesManagePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load the data for the competency frameworks manage page template
        /// </summary>
        /// <remarks>
        /// Load the data for the competency frameworks manage page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForCompetencyFrameworksManagePage200Response</returns>
        System.Threading.Tasks.Task<ToolLpDataForCompetencyFrameworksManagePage200Response> ToolLpDataForCompetencyFrameworksManagePageAsync(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load the data for the competency frameworks manage page template
        /// </summary>
        /// <remarks>
        /// Load the data for the competency frameworks manage page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForCompetencyFrameworksManagePage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpDataForCompetencyFrameworksManagePage200Response>> ToolLpDataForCompetencyFrameworksManagePageWithHttpInfoAsync(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load competency data for summary template.
        /// </summary>
        /// <remarks>
        /// Load competency data for summary template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForCompetencySummary200Response</returns>
        System.Threading.Tasks.Task<ToolLpDataForCompetencySummary200Response> ToolLpDataForCompetencySummaryAsync(ToolLpDataForCompetencySummaryRequest toolLpDataForCompetencySummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load competency data for summary template.
        /// </summary>
        /// <remarks>
        /// Load competency data for summary template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForCompetencySummary200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpDataForCompetencySummary200Response>> ToolLpDataForCompetencySummaryWithHttpInfoAsync(ToolLpDataForCompetencySummaryRequest toolLpDataForCompetencySummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load the data for the course competencies page template.
        /// </summary>
        /// <remarks>
        /// Load the data for the course competencies page template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCourseCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForCourseCompetenciesPage200Response</returns>
        System.Threading.Tasks.Task<ToolLpDataForCourseCompetenciesPage200Response> ToolLpDataForCourseCompetenciesPageAsync(ToolLpDataForCourseCompetenciesPageRequest toolLpDataForCourseCompetenciesPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load the data for the course competencies page template.
        /// </summary>
        /// <remarks>
        /// Load the data for the course competencies page template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCourseCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForCourseCompetenciesPage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpDataForCourseCompetenciesPage200Response>> ToolLpDataForCourseCompetenciesPageWithHttpInfoAsync(ToolLpDataForCourseCompetenciesPageRequest toolLpDataForCourseCompetenciesPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load the data for the plan page template.
        /// </summary>
        /// <remarks>
        /// Load the data for the plan page template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompletePlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForPlanPage200Response</returns>
        System.Threading.Tasks.Task<ToolLpDataForPlanPage200Response> ToolLpDataForPlanPageAsync(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load the data for the plan page template.
        /// </summary>
        /// <remarks>
        /// Load the data for the plan page template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompletePlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForPlanPage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpDataForPlanPage200Response>> ToolLpDataForPlanPageWithHttpInfoAsync(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load the data for the plans page template
        /// </summary>
        /// <remarks>
        /// Load the data for the plans page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForPlansPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForPlansPage200Response</returns>
        System.Threading.Tasks.Task<ToolLpDataForPlansPage200Response> ToolLpDataForPlansPageAsync(ToolLpDataForPlansPageRequest toolLpDataForPlansPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load the data for the plans page template
        /// </summary>
        /// <remarks>
        /// Load the data for the plans page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForPlansPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForPlansPage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpDataForPlansPage200Response>> ToolLpDataForPlansPageWithHttpInfoAsync(ToolLpDataForPlansPageRequest toolLpDataForPlansPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load the data for the related competencies template.
        /// </summary>
        /// <remarks>
        /// Load the data for the related competencies template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForRelatedCompetenciesSectionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForRelatedCompetenciesSection200Response</returns>
        System.Threading.Tasks.Task<ToolLpDataForRelatedCompetenciesSection200Response> ToolLpDataForRelatedCompetenciesSectionAsync(ToolLpDataForRelatedCompetenciesSectionRequest toolLpDataForRelatedCompetenciesSectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load the data for the related competencies template.
        /// </summary>
        /// <remarks>
        /// Load the data for the related competencies template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForRelatedCompetenciesSectionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForRelatedCompetenciesSection200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpDataForRelatedCompetenciesSection200Response>> ToolLpDataForRelatedCompetenciesSectionWithHttpInfoAsync(ToolLpDataForRelatedCompetenciesSectionRequest toolLpDataForRelatedCompetenciesSectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load the data for the template competencies page template.
        /// </summary>
        /// <remarks>
        /// Load the data for the template competencies page template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForTemplateCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForTemplateCompetenciesPage200Response</returns>
        System.Threading.Tasks.Task<ToolLpDataForTemplateCompetenciesPage200Response> ToolLpDataForTemplateCompetenciesPageAsync(ToolLpDataForTemplateCompetenciesPageRequest toolLpDataForTemplateCompetenciesPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load the data for the template competencies page template.
        /// </summary>
        /// <remarks>
        /// Load the data for the template competencies page template.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForTemplateCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForTemplateCompetenciesPage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpDataForTemplateCompetenciesPage200Response>> ToolLpDataForTemplateCompetenciesPageWithHttpInfoAsync(ToolLpDataForTemplateCompetenciesPageRequest toolLpDataForTemplateCompetenciesPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load the data for the learning plan templates manage page template
        /// </summary>
        /// <remarks>
        /// Load the data for the learning plan templates manage page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForTemplatesManagePage200Response</returns>
        System.Threading.Tasks.Task<ToolLpDataForTemplatesManagePage200Response> ToolLpDataForTemplatesManagePageAsync(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load the data for the learning plan templates manage page template
        /// </summary>
        /// <remarks>
        /// Load the data for the learning plan templates manage page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForTemplatesManagePage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpDataForTemplatesManagePage200Response>> ToolLpDataForTemplatesManagePageWithHttpInfoAsync(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load a summary of a user competency.
        /// </summary>
        /// <remarks>
        /// Load a summary of a user competency.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForUserCompetencySummary200Response</returns>
        System.Threading.Tasks.Task<ToolLpDataForUserCompetencySummary200Response> ToolLpDataForUserCompetencySummaryAsync(ToolLpDataForUserCompetencySummaryRequest toolLpDataForUserCompetencySummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load a summary of a user competency.
        /// </summary>
        /// <remarks>
        /// Load a summary of a user competency.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForUserCompetencySummary200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpDataForUserCompetencySummary200Response>> ToolLpDataForUserCompetencySummaryWithHttpInfoAsync(ToolLpDataForUserCompetencySummaryRequest toolLpDataForUserCompetencySummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load a summary of a user competency.
        /// </summary>
        /// <remarks>
        /// Load a summary of a user competency.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInCourseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForUserCompetencySummaryInCourse200Response</returns>
        System.Threading.Tasks.Task<ToolLpDataForUserCompetencySummaryInCourse200Response> ToolLpDataForUserCompetencySummaryInCourseAsync(ToolLpDataForUserCompetencySummaryInCourseRequest toolLpDataForUserCompetencySummaryInCourseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load a summary of a user competency.
        /// </summary>
        /// <remarks>
        /// Load a summary of a user competency.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInCourseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForUserCompetencySummaryInCourse200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpDataForUserCompetencySummaryInCourse200Response>> ToolLpDataForUserCompetencySummaryInCourseWithHttpInfoAsync(ToolLpDataForUserCompetencySummaryInCourseRequest toolLpDataForUserCompetencySummaryInCourseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load a summary of a user competency.
        /// </summary>
        /// <remarks>
        /// Load a summary of a user competency.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForUserCompetencySummaryInPlan200Response</returns>
        System.Threading.Tasks.Task<ToolLpDataForUserCompetencySummaryInPlan200Response> ToolLpDataForUserCompetencySummaryInPlanAsync(ToolLpDataForUserCompetencySummaryInPlanRequest toolLpDataForUserCompetencySummaryInPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load a summary of a user competency.
        /// </summary>
        /// <remarks>
        /// Load a summary of a user competency.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForUserCompetencySummaryInPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpDataForUserCompetencySummaryInPlan200Response>> ToolLpDataForUserCompetencySummaryInPlanWithHttpInfoAsync(ToolLpDataForUserCompetencySummaryInPlanRequest toolLpDataForUserCompetencySummaryInPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load the data for the user evidence list page template
        /// </summary>
        /// <remarks>
        /// Load the data for the user evidence list page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidenceListPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForUserEvidenceListPage200Response</returns>
        System.Threading.Tasks.Task<ToolLpDataForUserEvidenceListPage200Response> ToolLpDataForUserEvidenceListPageAsync(ToolLpDataForUserEvidenceListPageRequest toolLpDataForUserEvidenceListPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load the data for the user evidence list page template
        /// </summary>
        /// <remarks>
        /// Load the data for the user evidence list page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidenceListPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForUserEvidenceListPage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpDataForUserEvidenceListPage200Response>> ToolLpDataForUserEvidenceListPageWithHttpInfoAsync(ToolLpDataForUserEvidenceListPageRequest toolLpDataForUserEvidenceListPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load the data for the user evidence page template
        /// </summary>
        /// <remarks>
        /// Load the data for the user evidence page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidencePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForUserEvidencePage200Response</returns>
        System.Threading.Tasks.Task<ToolLpDataForUserEvidencePage200Response> ToolLpDataForUserEvidencePageAsync(ToolLpDataForUserEvidencePageRequest toolLpDataForUserEvidencePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load the data for the user evidence page template
        /// </summary>
        /// <remarks>
        /// Load the data for the user evidence page template
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidencePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForUserEvidencePage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpDataForUserEvidencePage200Response>> ToolLpDataForUserEvidencePageWithHttpInfoAsync(ToolLpDataForUserEvidencePageRequest toolLpDataForUserEvidencePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the courses using a competency
        /// </summary>
        /// <remarks>
        /// List the courses using a competency
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompetencyViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ToolLpListCoursesUsingCompetencyAsync(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the courses using a competency
        /// </summary>
        /// <remarks>
        /// List the courses using a competency
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompetencyViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ToolLpListCoursesUsingCompetencyWithHttpInfoAsync(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
        /// </summary>
        /// <remarks>
        /// Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchCohortsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpSearchCohorts200Response</returns>
        System.Threading.Tasks.Task<ToolLpSearchCohorts200Response> ToolLpSearchCohortsAsync(ToolLpSearchCohortsRequest toolLpSearchCohortsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
        /// </summary>
        /// <remarks>
        /// Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchCohortsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpSearchCohorts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpSearchCohorts200Response>> ToolLpSearchCohortsWithHttpInfoAsync(ToolLpSearchCohortsRequest toolLpSearchCohortsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search for users.
        /// </summary>
        /// <remarks>
        /// Search for users.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpSearchUsers200Response</returns>
        System.Threading.Tasks.Task<ToolLpSearchUsers200Response> ToolLpSearchUsersAsync(ToolLpSearchUsersRequest toolLpSearchUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search for users.
        /// </summary>
        /// <remarks>
        /// Search for users.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpSearchUsers200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolLpSearchUsers200Response>> ToolLpSearchUsersWithHttpInfoAsync(ToolLpSearchUsersRequest toolLpSearchUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolLpApi : IToolLpApiSync, IToolLpApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ToolLpApi : IToolLpApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolLpApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolLpApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ToolLpApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ToolLpApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Load the data for the competencies manage page template Load the data for the competencies manage page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetenciesManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForCompetenciesManagePage200Response</returns>
        public ToolLpDataForCompetenciesManagePage200Response ToolLpDataForCompetenciesManagePage(ToolLpDataForCompetenciesManagePageRequest toolLpDataForCompetenciesManagePageRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCompetenciesManagePage200Response> localVarResponse = ToolLpDataForCompetenciesManagePageWithHttpInfo(toolLpDataForCompetenciesManagePageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the competencies manage page template Load the data for the competencies manage page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetenciesManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForCompetenciesManagePage200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCompetenciesManagePage200Response> ToolLpDataForCompetenciesManagePageWithHttpInfo(ToolLpDataForCompetenciesManagePageRequest toolLpDataForCompetenciesManagePageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolLpDataForCompetenciesManagePageRequest' is set
            if (toolLpDataForCompetenciesManagePageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForCompetenciesManagePageRequest' when calling ToolLpApi->ToolLpDataForCompetenciesManagePage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForCompetenciesManagePageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForCompetenciesManagePage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpDataForCompetenciesManagePage200Response>("/tool_lp_data_for_competencies_manage_page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForCompetenciesManagePage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the competencies manage page template Load the data for the competencies manage page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetenciesManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForCompetenciesManagePage200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpDataForCompetenciesManagePage200Response> ToolLpDataForCompetenciesManagePageAsync(ToolLpDataForCompetenciesManagePageRequest toolLpDataForCompetenciesManagePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCompetenciesManagePage200Response> localVarResponse = await ToolLpDataForCompetenciesManagePageWithHttpInfoAsync(toolLpDataForCompetenciesManagePageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the competencies manage page template Load the data for the competencies manage page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetenciesManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForCompetenciesManagePage200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCompetenciesManagePage200Response>> ToolLpDataForCompetenciesManagePageWithHttpInfoAsync(ToolLpDataForCompetenciesManagePageRequest toolLpDataForCompetenciesManagePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolLpDataForCompetenciesManagePageRequest' is set
            if (toolLpDataForCompetenciesManagePageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForCompetenciesManagePageRequest' when calling ToolLpApi->ToolLpDataForCompetenciesManagePage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForCompetenciesManagePageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForCompetenciesManagePage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpDataForCompetenciesManagePage200Response>("/tool_lp_data_for_competencies_manage_page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForCompetenciesManagePage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the competency frameworks manage page template Load the data for the competency frameworks manage page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForCompetencyFrameworksManagePage200Response</returns>
        public ToolLpDataForCompetencyFrameworksManagePage200Response ToolLpDataForCompetencyFrameworksManagePage(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCompetencyFrameworksManagePage200Response> localVarResponse = ToolLpDataForCompetencyFrameworksManagePageWithHttpInfo(toolLpDataForCompetencyFrameworksManagePageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the competency frameworks manage page template Load the data for the competency frameworks manage page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForCompetencyFrameworksManagePage200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCompetencyFrameworksManagePage200Response> ToolLpDataForCompetencyFrameworksManagePageWithHttpInfo(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolLpDataForCompetencyFrameworksManagePageRequest' is set
            if (toolLpDataForCompetencyFrameworksManagePageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForCompetencyFrameworksManagePageRequest' when calling ToolLpApi->ToolLpDataForCompetencyFrameworksManagePage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForCompetencyFrameworksManagePageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForCompetencyFrameworksManagePage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpDataForCompetencyFrameworksManagePage200Response>("/tool_lp_data_for_competency_frameworks_manage_page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForCompetencyFrameworksManagePage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the competency frameworks manage page template Load the data for the competency frameworks manage page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForCompetencyFrameworksManagePage200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpDataForCompetencyFrameworksManagePage200Response> ToolLpDataForCompetencyFrameworksManagePageAsync(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCompetencyFrameworksManagePage200Response> localVarResponse = await ToolLpDataForCompetencyFrameworksManagePageWithHttpInfoAsync(toolLpDataForCompetencyFrameworksManagePageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the competency frameworks manage page template Load the data for the competency frameworks manage page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForCompetencyFrameworksManagePage200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCompetencyFrameworksManagePage200Response>> ToolLpDataForCompetencyFrameworksManagePageWithHttpInfoAsync(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolLpDataForCompetencyFrameworksManagePageRequest' is set
            if (toolLpDataForCompetencyFrameworksManagePageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForCompetencyFrameworksManagePageRequest' when calling ToolLpApi->ToolLpDataForCompetencyFrameworksManagePage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForCompetencyFrameworksManagePageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForCompetencyFrameworksManagePage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpDataForCompetencyFrameworksManagePage200Response>("/tool_lp_data_for_competency_frameworks_manage_page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForCompetencyFrameworksManagePage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load competency data for summary template. Load competency data for summary template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForCompetencySummary200Response</returns>
        public ToolLpDataForCompetencySummary200Response ToolLpDataForCompetencySummary(ToolLpDataForCompetencySummaryRequest toolLpDataForCompetencySummaryRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCompetencySummary200Response> localVarResponse = ToolLpDataForCompetencySummaryWithHttpInfo(toolLpDataForCompetencySummaryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load competency data for summary template. Load competency data for summary template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForCompetencySummary200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCompetencySummary200Response> ToolLpDataForCompetencySummaryWithHttpInfo(ToolLpDataForCompetencySummaryRequest toolLpDataForCompetencySummaryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolLpDataForCompetencySummaryRequest' is set
            if (toolLpDataForCompetencySummaryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForCompetencySummaryRequest' when calling ToolLpApi->ToolLpDataForCompetencySummary");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForCompetencySummaryRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForCompetencySummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpDataForCompetencySummary200Response>("/tool_lp_data_for_competency_summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForCompetencySummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load competency data for summary template. Load competency data for summary template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForCompetencySummary200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpDataForCompetencySummary200Response> ToolLpDataForCompetencySummaryAsync(ToolLpDataForCompetencySummaryRequest toolLpDataForCompetencySummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCompetencySummary200Response> localVarResponse = await ToolLpDataForCompetencySummaryWithHttpInfoAsync(toolLpDataForCompetencySummaryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load competency data for summary template. Load competency data for summary template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForCompetencySummary200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCompetencySummary200Response>> ToolLpDataForCompetencySummaryWithHttpInfoAsync(ToolLpDataForCompetencySummaryRequest toolLpDataForCompetencySummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolLpDataForCompetencySummaryRequest' is set
            if (toolLpDataForCompetencySummaryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForCompetencySummaryRequest' when calling ToolLpApi->ToolLpDataForCompetencySummary");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForCompetencySummaryRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForCompetencySummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpDataForCompetencySummary200Response>("/tool_lp_data_for_competency_summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForCompetencySummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the course competencies page template. Load the data for the course competencies page template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCourseCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForCourseCompetenciesPage200Response</returns>
        public ToolLpDataForCourseCompetenciesPage200Response ToolLpDataForCourseCompetenciesPage(ToolLpDataForCourseCompetenciesPageRequest toolLpDataForCourseCompetenciesPageRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCourseCompetenciesPage200Response> localVarResponse = ToolLpDataForCourseCompetenciesPageWithHttpInfo(toolLpDataForCourseCompetenciesPageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the course competencies page template. Load the data for the course competencies page template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCourseCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForCourseCompetenciesPage200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCourseCompetenciesPage200Response> ToolLpDataForCourseCompetenciesPageWithHttpInfo(ToolLpDataForCourseCompetenciesPageRequest toolLpDataForCourseCompetenciesPageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolLpDataForCourseCompetenciesPageRequest' is set
            if (toolLpDataForCourseCompetenciesPageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForCourseCompetenciesPageRequest' when calling ToolLpApi->ToolLpDataForCourseCompetenciesPage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForCourseCompetenciesPageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForCourseCompetenciesPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpDataForCourseCompetenciesPage200Response>("/tool_lp_data_for_course_competencies_page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForCourseCompetenciesPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the course competencies page template. Load the data for the course competencies page template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCourseCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForCourseCompetenciesPage200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpDataForCourseCompetenciesPage200Response> ToolLpDataForCourseCompetenciesPageAsync(ToolLpDataForCourseCompetenciesPageRequest toolLpDataForCourseCompetenciesPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCourseCompetenciesPage200Response> localVarResponse = await ToolLpDataForCourseCompetenciesPageWithHttpInfoAsync(toolLpDataForCourseCompetenciesPageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the course competencies page template. Load the data for the course competencies page template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCourseCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForCourseCompetenciesPage200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpDataForCourseCompetenciesPage200Response>> ToolLpDataForCourseCompetenciesPageWithHttpInfoAsync(ToolLpDataForCourseCompetenciesPageRequest toolLpDataForCourseCompetenciesPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolLpDataForCourseCompetenciesPageRequest' is set
            if (toolLpDataForCourseCompetenciesPageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForCourseCompetenciesPageRequest' when calling ToolLpApi->ToolLpDataForCourseCompetenciesPage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForCourseCompetenciesPageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForCourseCompetenciesPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpDataForCourseCompetenciesPage200Response>("/tool_lp_data_for_course_competencies_page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForCourseCompetenciesPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the plan page template. Load the data for the plan page template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompletePlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForPlanPage200Response</returns>
        public ToolLpDataForPlanPage200Response ToolLpDataForPlanPage(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForPlanPage200Response> localVarResponse = ToolLpDataForPlanPageWithHttpInfo(coreCompetencyCompletePlanRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the plan page template. Load the data for the plan page template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompletePlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForPlanPage200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpDataForPlanPage200Response> ToolLpDataForPlanPageWithHttpInfo(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, int operationIndex = 0)
        {
            // verify the required parameter 'coreCompetencyCompletePlanRequest' is set
            if (coreCompetencyCompletePlanRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'coreCompetencyCompletePlanRequest' when calling ToolLpApi->ToolLpDataForPlanPage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = coreCompetencyCompletePlanRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForPlanPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpDataForPlanPage200Response>("/tool_lp_data_for_plan_page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForPlanPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the plan page template. Load the data for the plan page template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompletePlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForPlanPage200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpDataForPlanPage200Response> ToolLpDataForPlanPageAsync(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForPlanPage200Response> localVarResponse = await ToolLpDataForPlanPageWithHttpInfoAsync(coreCompetencyCompletePlanRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the plan page template. Load the data for the plan page template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompletePlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForPlanPage200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpDataForPlanPage200Response>> ToolLpDataForPlanPageWithHttpInfoAsync(CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'coreCompetencyCompletePlanRequest' is set
            if (coreCompetencyCompletePlanRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'coreCompetencyCompletePlanRequest' when calling ToolLpApi->ToolLpDataForPlanPage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = coreCompetencyCompletePlanRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForPlanPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpDataForPlanPage200Response>("/tool_lp_data_for_plan_page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForPlanPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the plans page template Load the data for the plans page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForPlansPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForPlansPage200Response</returns>
        public ToolLpDataForPlansPage200Response ToolLpDataForPlansPage(ToolLpDataForPlansPageRequest toolLpDataForPlansPageRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForPlansPage200Response> localVarResponse = ToolLpDataForPlansPageWithHttpInfo(toolLpDataForPlansPageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the plans page template Load the data for the plans page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForPlansPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForPlansPage200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpDataForPlansPage200Response> ToolLpDataForPlansPageWithHttpInfo(ToolLpDataForPlansPageRequest toolLpDataForPlansPageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolLpDataForPlansPageRequest' is set
            if (toolLpDataForPlansPageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForPlansPageRequest' when calling ToolLpApi->ToolLpDataForPlansPage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForPlansPageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForPlansPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpDataForPlansPage200Response>("/tool_lp_data_for_plans_page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForPlansPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the plans page template Load the data for the plans page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForPlansPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForPlansPage200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpDataForPlansPage200Response> ToolLpDataForPlansPageAsync(ToolLpDataForPlansPageRequest toolLpDataForPlansPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForPlansPage200Response> localVarResponse = await ToolLpDataForPlansPageWithHttpInfoAsync(toolLpDataForPlansPageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the plans page template Load the data for the plans page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForPlansPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForPlansPage200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpDataForPlansPage200Response>> ToolLpDataForPlansPageWithHttpInfoAsync(ToolLpDataForPlansPageRequest toolLpDataForPlansPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolLpDataForPlansPageRequest' is set
            if (toolLpDataForPlansPageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForPlansPageRequest' when calling ToolLpApi->ToolLpDataForPlansPage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForPlansPageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForPlansPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpDataForPlansPage200Response>("/tool_lp_data_for_plans_page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForPlansPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the related competencies template. Load the data for the related competencies template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForRelatedCompetenciesSectionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForRelatedCompetenciesSection200Response</returns>
        public ToolLpDataForRelatedCompetenciesSection200Response ToolLpDataForRelatedCompetenciesSection(ToolLpDataForRelatedCompetenciesSectionRequest toolLpDataForRelatedCompetenciesSectionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForRelatedCompetenciesSection200Response> localVarResponse = ToolLpDataForRelatedCompetenciesSectionWithHttpInfo(toolLpDataForRelatedCompetenciesSectionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the related competencies template. Load the data for the related competencies template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForRelatedCompetenciesSectionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForRelatedCompetenciesSection200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpDataForRelatedCompetenciesSection200Response> ToolLpDataForRelatedCompetenciesSectionWithHttpInfo(ToolLpDataForRelatedCompetenciesSectionRequest toolLpDataForRelatedCompetenciesSectionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolLpDataForRelatedCompetenciesSectionRequest' is set
            if (toolLpDataForRelatedCompetenciesSectionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForRelatedCompetenciesSectionRequest' when calling ToolLpApi->ToolLpDataForRelatedCompetenciesSection");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForRelatedCompetenciesSectionRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForRelatedCompetenciesSection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpDataForRelatedCompetenciesSection200Response>("/tool_lp_data_for_related_competencies_section", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForRelatedCompetenciesSection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the related competencies template. Load the data for the related competencies template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForRelatedCompetenciesSectionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForRelatedCompetenciesSection200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpDataForRelatedCompetenciesSection200Response> ToolLpDataForRelatedCompetenciesSectionAsync(ToolLpDataForRelatedCompetenciesSectionRequest toolLpDataForRelatedCompetenciesSectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForRelatedCompetenciesSection200Response> localVarResponse = await ToolLpDataForRelatedCompetenciesSectionWithHttpInfoAsync(toolLpDataForRelatedCompetenciesSectionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the related competencies template. Load the data for the related competencies template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForRelatedCompetenciesSectionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForRelatedCompetenciesSection200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpDataForRelatedCompetenciesSection200Response>> ToolLpDataForRelatedCompetenciesSectionWithHttpInfoAsync(ToolLpDataForRelatedCompetenciesSectionRequest toolLpDataForRelatedCompetenciesSectionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolLpDataForRelatedCompetenciesSectionRequest' is set
            if (toolLpDataForRelatedCompetenciesSectionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForRelatedCompetenciesSectionRequest' when calling ToolLpApi->ToolLpDataForRelatedCompetenciesSection");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForRelatedCompetenciesSectionRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForRelatedCompetenciesSection";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpDataForRelatedCompetenciesSection200Response>("/tool_lp_data_for_related_competencies_section", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForRelatedCompetenciesSection", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the template competencies page template. Load the data for the template competencies page template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForTemplateCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForTemplateCompetenciesPage200Response</returns>
        public ToolLpDataForTemplateCompetenciesPage200Response ToolLpDataForTemplateCompetenciesPage(ToolLpDataForTemplateCompetenciesPageRequest toolLpDataForTemplateCompetenciesPageRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForTemplateCompetenciesPage200Response> localVarResponse = ToolLpDataForTemplateCompetenciesPageWithHttpInfo(toolLpDataForTemplateCompetenciesPageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the template competencies page template. Load the data for the template competencies page template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForTemplateCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForTemplateCompetenciesPage200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpDataForTemplateCompetenciesPage200Response> ToolLpDataForTemplateCompetenciesPageWithHttpInfo(ToolLpDataForTemplateCompetenciesPageRequest toolLpDataForTemplateCompetenciesPageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolLpDataForTemplateCompetenciesPageRequest' is set
            if (toolLpDataForTemplateCompetenciesPageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForTemplateCompetenciesPageRequest' when calling ToolLpApi->ToolLpDataForTemplateCompetenciesPage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForTemplateCompetenciesPageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForTemplateCompetenciesPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpDataForTemplateCompetenciesPage200Response>("/tool_lp_data_for_template_competencies_page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForTemplateCompetenciesPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the template competencies page template. Load the data for the template competencies page template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForTemplateCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForTemplateCompetenciesPage200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpDataForTemplateCompetenciesPage200Response> ToolLpDataForTemplateCompetenciesPageAsync(ToolLpDataForTemplateCompetenciesPageRequest toolLpDataForTemplateCompetenciesPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForTemplateCompetenciesPage200Response> localVarResponse = await ToolLpDataForTemplateCompetenciesPageWithHttpInfoAsync(toolLpDataForTemplateCompetenciesPageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the template competencies page template. Load the data for the template competencies page template.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForTemplateCompetenciesPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForTemplateCompetenciesPage200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpDataForTemplateCompetenciesPage200Response>> ToolLpDataForTemplateCompetenciesPageWithHttpInfoAsync(ToolLpDataForTemplateCompetenciesPageRequest toolLpDataForTemplateCompetenciesPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolLpDataForTemplateCompetenciesPageRequest' is set
            if (toolLpDataForTemplateCompetenciesPageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForTemplateCompetenciesPageRequest' when calling ToolLpApi->ToolLpDataForTemplateCompetenciesPage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForTemplateCompetenciesPageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForTemplateCompetenciesPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpDataForTemplateCompetenciesPage200Response>("/tool_lp_data_for_template_competencies_page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForTemplateCompetenciesPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the learning plan templates manage page template Load the data for the learning plan templates manage page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForTemplatesManagePage200Response</returns>
        public ToolLpDataForTemplatesManagePage200Response ToolLpDataForTemplatesManagePage(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForTemplatesManagePage200Response> localVarResponse = ToolLpDataForTemplatesManagePageWithHttpInfo(toolLpDataForCompetencyFrameworksManagePageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the learning plan templates manage page template Load the data for the learning plan templates manage page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForTemplatesManagePage200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpDataForTemplatesManagePage200Response> ToolLpDataForTemplatesManagePageWithHttpInfo(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolLpDataForCompetencyFrameworksManagePageRequest' is set
            if (toolLpDataForCompetencyFrameworksManagePageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForCompetencyFrameworksManagePageRequest' when calling ToolLpApi->ToolLpDataForTemplatesManagePage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForCompetencyFrameworksManagePageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForTemplatesManagePage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpDataForTemplatesManagePage200Response>("/tool_lp_data_for_templates_manage_page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForTemplatesManagePage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the learning plan templates manage page template Load the data for the learning plan templates manage page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForTemplatesManagePage200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpDataForTemplatesManagePage200Response> ToolLpDataForTemplatesManagePageAsync(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForTemplatesManagePage200Response> localVarResponse = await ToolLpDataForTemplatesManagePageWithHttpInfoAsync(toolLpDataForCompetencyFrameworksManagePageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the learning plan templates manage page template Load the data for the learning plan templates manage page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForCompetencyFrameworksManagePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForTemplatesManagePage200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpDataForTemplatesManagePage200Response>> ToolLpDataForTemplatesManagePageWithHttpInfoAsync(ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolLpDataForCompetencyFrameworksManagePageRequest' is set
            if (toolLpDataForCompetencyFrameworksManagePageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForCompetencyFrameworksManagePageRequest' when calling ToolLpApi->ToolLpDataForTemplatesManagePage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForCompetencyFrameworksManagePageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForTemplatesManagePage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpDataForTemplatesManagePage200Response>("/tool_lp_data_for_templates_manage_page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForTemplatesManagePage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load a summary of a user competency. Load a summary of a user competency.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForUserCompetencySummary200Response</returns>
        public ToolLpDataForUserCompetencySummary200Response ToolLpDataForUserCompetencySummary(ToolLpDataForUserCompetencySummaryRequest toolLpDataForUserCompetencySummaryRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserCompetencySummary200Response> localVarResponse = ToolLpDataForUserCompetencySummaryWithHttpInfo(toolLpDataForUserCompetencySummaryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load a summary of a user competency. Load a summary of a user competency.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForUserCompetencySummary200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserCompetencySummary200Response> ToolLpDataForUserCompetencySummaryWithHttpInfo(ToolLpDataForUserCompetencySummaryRequest toolLpDataForUserCompetencySummaryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolLpDataForUserCompetencySummaryRequest' is set
            if (toolLpDataForUserCompetencySummaryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForUserCompetencySummaryRequest' when calling ToolLpApi->ToolLpDataForUserCompetencySummary");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForUserCompetencySummaryRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForUserCompetencySummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpDataForUserCompetencySummary200Response>("/tool_lp_data_for_user_competency_summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForUserCompetencySummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load a summary of a user competency. Load a summary of a user competency.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForUserCompetencySummary200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpDataForUserCompetencySummary200Response> ToolLpDataForUserCompetencySummaryAsync(ToolLpDataForUserCompetencySummaryRequest toolLpDataForUserCompetencySummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserCompetencySummary200Response> localVarResponse = await ToolLpDataForUserCompetencySummaryWithHttpInfoAsync(toolLpDataForUserCompetencySummaryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load a summary of a user competency. Load a summary of a user competency.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForUserCompetencySummary200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserCompetencySummary200Response>> ToolLpDataForUserCompetencySummaryWithHttpInfoAsync(ToolLpDataForUserCompetencySummaryRequest toolLpDataForUserCompetencySummaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolLpDataForUserCompetencySummaryRequest' is set
            if (toolLpDataForUserCompetencySummaryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForUserCompetencySummaryRequest' when calling ToolLpApi->ToolLpDataForUserCompetencySummary");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForUserCompetencySummaryRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForUserCompetencySummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpDataForUserCompetencySummary200Response>("/tool_lp_data_for_user_competency_summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForUserCompetencySummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load a summary of a user competency. Load a summary of a user competency.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInCourseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForUserCompetencySummaryInCourse200Response</returns>
        public ToolLpDataForUserCompetencySummaryInCourse200Response ToolLpDataForUserCompetencySummaryInCourse(ToolLpDataForUserCompetencySummaryInCourseRequest toolLpDataForUserCompetencySummaryInCourseRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserCompetencySummaryInCourse200Response> localVarResponse = ToolLpDataForUserCompetencySummaryInCourseWithHttpInfo(toolLpDataForUserCompetencySummaryInCourseRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load a summary of a user competency. Load a summary of a user competency.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInCourseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForUserCompetencySummaryInCourse200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserCompetencySummaryInCourse200Response> ToolLpDataForUserCompetencySummaryInCourseWithHttpInfo(ToolLpDataForUserCompetencySummaryInCourseRequest toolLpDataForUserCompetencySummaryInCourseRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolLpDataForUserCompetencySummaryInCourseRequest' is set
            if (toolLpDataForUserCompetencySummaryInCourseRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForUserCompetencySummaryInCourseRequest' when calling ToolLpApi->ToolLpDataForUserCompetencySummaryInCourse");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForUserCompetencySummaryInCourseRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForUserCompetencySummaryInCourse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpDataForUserCompetencySummaryInCourse200Response>("/tool_lp_data_for_user_competency_summary_in_course", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForUserCompetencySummaryInCourse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load a summary of a user competency. Load a summary of a user competency.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInCourseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForUserCompetencySummaryInCourse200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpDataForUserCompetencySummaryInCourse200Response> ToolLpDataForUserCompetencySummaryInCourseAsync(ToolLpDataForUserCompetencySummaryInCourseRequest toolLpDataForUserCompetencySummaryInCourseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserCompetencySummaryInCourse200Response> localVarResponse = await ToolLpDataForUserCompetencySummaryInCourseWithHttpInfoAsync(toolLpDataForUserCompetencySummaryInCourseRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load a summary of a user competency. Load a summary of a user competency.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInCourseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForUserCompetencySummaryInCourse200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserCompetencySummaryInCourse200Response>> ToolLpDataForUserCompetencySummaryInCourseWithHttpInfoAsync(ToolLpDataForUserCompetencySummaryInCourseRequest toolLpDataForUserCompetencySummaryInCourseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolLpDataForUserCompetencySummaryInCourseRequest' is set
            if (toolLpDataForUserCompetencySummaryInCourseRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForUserCompetencySummaryInCourseRequest' when calling ToolLpApi->ToolLpDataForUserCompetencySummaryInCourse");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForUserCompetencySummaryInCourseRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForUserCompetencySummaryInCourse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpDataForUserCompetencySummaryInCourse200Response>("/tool_lp_data_for_user_competency_summary_in_course", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForUserCompetencySummaryInCourse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load a summary of a user competency. Load a summary of a user competency.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForUserCompetencySummaryInPlan200Response</returns>
        public ToolLpDataForUserCompetencySummaryInPlan200Response ToolLpDataForUserCompetencySummaryInPlan(ToolLpDataForUserCompetencySummaryInPlanRequest toolLpDataForUserCompetencySummaryInPlanRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserCompetencySummaryInPlan200Response> localVarResponse = ToolLpDataForUserCompetencySummaryInPlanWithHttpInfo(toolLpDataForUserCompetencySummaryInPlanRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load a summary of a user competency. Load a summary of a user competency.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForUserCompetencySummaryInPlan200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserCompetencySummaryInPlan200Response> ToolLpDataForUserCompetencySummaryInPlanWithHttpInfo(ToolLpDataForUserCompetencySummaryInPlanRequest toolLpDataForUserCompetencySummaryInPlanRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolLpDataForUserCompetencySummaryInPlanRequest' is set
            if (toolLpDataForUserCompetencySummaryInPlanRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForUserCompetencySummaryInPlanRequest' when calling ToolLpApi->ToolLpDataForUserCompetencySummaryInPlan");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForUserCompetencySummaryInPlanRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForUserCompetencySummaryInPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpDataForUserCompetencySummaryInPlan200Response>("/tool_lp_data_for_user_competency_summary_in_plan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForUserCompetencySummaryInPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load a summary of a user competency. Load a summary of a user competency.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForUserCompetencySummaryInPlan200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpDataForUserCompetencySummaryInPlan200Response> ToolLpDataForUserCompetencySummaryInPlanAsync(ToolLpDataForUserCompetencySummaryInPlanRequest toolLpDataForUserCompetencySummaryInPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserCompetencySummaryInPlan200Response> localVarResponse = await ToolLpDataForUserCompetencySummaryInPlanWithHttpInfoAsync(toolLpDataForUserCompetencySummaryInPlanRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load a summary of a user competency. Load a summary of a user competency.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserCompetencySummaryInPlanRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForUserCompetencySummaryInPlan200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserCompetencySummaryInPlan200Response>> ToolLpDataForUserCompetencySummaryInPlanWithHttpInfoAsync(ToolLpDataForUserCompetencySummaryInPlanRequest toolLpDataForUserCompetencySummaryInPlanRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolLpDataForUserCompetencySummaryInPlanRequest' is set
            if (toolLpDataForUserCompetencySummaryInPlanRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForUserCompetencySummaryInPlanRequest' when calling ToolLpApi->ToolLpDataForUserCompetencySummaryInPlan");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForUserCompetencySummaryInPlanRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForUserCompetencySummaryInPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpDataForUserCompetencySummaryInPlan200Response>("/tool_lp_data_for_user_competency_summary_in_plan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForUserCompetencySummaryInPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the user evidence list page template Load the data for the user evidence list page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidenceListPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForUserEvidenceListPage200Response</returns>
        public ToolLpDataForUserEvidenceListPage200Response ToolLpDataForUserEvidenceListPage(ToolLpDataForUserEvidenceListPageRequest toolLpDataForUserEvidenceListPageRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserEvidenceListPage200Response> localVarResponse = ToolLpDataForUserEvidenceListPageWithHttpInfo(toolLpDataForUserEvidenceListPageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the user evidence list page template Load the data for the user evidence list page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidenceListPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForUserEvidenceListPage200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserEvidenceListPage200Response> ToolLpDataForUserEvidenceListPageWithHttpInfo(ToolLpDataForUserEvidenceListPageRequest toolLpDataForUserEvidenceListPageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolLpDataForUserEvidenceListPageRequest' is set
            if (toolLpDataForUserEvidenceListPageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForUserEvidenceListPageRequest' when calling ToolLpApi->ToolLpDataForUserEvidenceListPage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForUserEvidenceListPageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForUserEvidenceListPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpDataForUserEvidenceListPage200Response>("/tool_lp_data_for_user_evidence_list_page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForUserEvidenceListPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the user evidence list page template Load the data for the user evidence list page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidenceListPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForUserEvidenceListPage200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpDataForUserEvidenceListPage200Response> ToolLpDataForUserEvidenceListPageAsync(ToolLpDataForUserEvidenceListPageRequest toolLpDataForUserEvidenceListPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserEvidenceListPage200Response> localVarResponse = await ToolLpDataForUserEvidenceListPageWithHttpInfoAsync(toolLpDataForUserEvidenceListPageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the user evidence list page template Load the data for the user evidence list page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidenceListPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForUserEvidenceListPage200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserEvidenceListPage200Response>> ToolLpDataForUserEvidenceListPageWithHttpInfoAsync(ToolLpDataForUserEvidenceListPageRequest toolLpDataForUserEvidenceListPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolLpDataForUserEvidenceListPageRequest' is set
            if (toolLpDataForUserEvidenceListPageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForUserEvidenceListPageRequest' when calling ToolLpApi->ToolLpDataForUserEvidenceListPage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForUserEvidenceListPageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForUserEvidenceListPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpDataForUserEvidenceListPage200Response>("/tool_lp_data_for_user_evidence_list_page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForUserEvidenceListPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the user evidence page template Load the data for the user evidence page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidencePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpDataForUserEvidencePage200Response</returns>
        public ToolLpDataForUserEvidencePage200Response ToolLpDataForUserEvidencePage(ToolLpDataForUserEvidencePageRequest toolLpDataForUserEvidencePageRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserEvidencePage200Response> localVarResponse = ToolLpDataForUserEvidencePageWithHttpInfo(toolLpDataForUserEvidencePageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the user evidence page template Load the data for the user evidence page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidencePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpDataForUserEvidencePage200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserEvidencePage200Response> ToolLpDataForUserEvidencePageWithHttpInfo(ToolLpDataForUserEvidencePageRequest toolLpDataForUserEvidencePageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolLpDataForUserEvidencePageRequest' is set
            if (toolLpDataForUserEvidencePageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForUserEvidencePageRequest' when calling ToolLpApi->ToolLpDataForUserEvidencePage");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForUserEvidencePageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForUserEvidencePage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpDataForUserEvidencePage200Response>("/tool_lp_data_for_user_evidence_page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForUserEvidencePage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load the data for the user evidence page template Load the data for the user evidence page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidencePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpDataForUserEvidencePage200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpDataForUserEvidencePage200Response> ToolLpDataForUserEvidencePageAsync(ToolLpDataForUserEvidencePageRequest toolLpDataForUserEvidencePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserEvidencePage200Response> localVarResponse = await ToolLpDataForUserEvidencePageWithHttpInfoAsync(toolLpDataForUserEvidencePageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Load the data for the user evidence page template Load the data for the user evidence page template
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpDataForUserEvidencePageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpDataForUserEvidencePage200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpDataForUserEvidencePage200Response>> ToolLpDataForUserEvidencePageWithHttpInfoAsync(ToolLpDataForUserEvidencePageRequest toolLpDataForUserEvidencePageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolLpDataForUserEvidencePageRequest' is set
            if (toolLpDataForUserEvidencePageRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpDataForUserEvidencePageRequest' when calling ToolLpApi->ToolLpDataForUserEvidencePage");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpDataForUserEvidencePageRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpDataForUserEvidencePage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpDataForUserEvidencePage200Response>("/tool_lp_data_for_user_evidence_page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpDataForUserEvidencePage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the courses using a competency List the courses using a competency
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompetencyViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ToolLpListCoursesUsingCompetency(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = ToolLpListCoursesUsingCompetencyWithHttpInfo(coreCompetencyCompetencyViewedRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the courses using a competency List the courses using a competency
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompetencyViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ToolLpListCoursesUsingCompetencyWithHttpInfo(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, int operationIndex = 0)
        {
            // verify the required parameter 'coreCompetencyCompetencyViewedRequest' is set
            if (coreCompetencyCompetencyViewedRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'coreCompetencyCompetencyViewedRequest' when calling ToolLpApi->ToolLpListCoursesUsingCompetency");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = coreCompetencyCompetencyViewedRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpListCoursesUsingCompetency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tool_lp_list_courses_using_competency", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpListCoursesUsingCompetency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the courses using a competency List the courses using a competency
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompetencyViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ToolLpListCoursesUsingCompetencyAsync(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await ToolLpListCoursesUsingCompetencyWithHttpInfoAsync(coreCompetencyCompetencyViewedRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the courses using a competency List the courses using a competency
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coreCompetencyCompetencyViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ToolLpListCoursesUsingCompetencyWithHttpInfoAsync(CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'coreCompetencyCompetencyViewedRequest' is set
            if (coreCompetencyCompetencyViewedRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'coreCompetencyCompetencyViewedRequest' when calling ToolLpApi->ToolLpListCoursesUsingCompetency");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = coreCompetencyCompetencyViewedRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpListCoursesUsingCompetency";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tool_lp_list_courses_using_competency", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpListCoursesUsingCompetency", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchCohortsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpSearchCohorts200Response</returns>
        public ToolLpSearchCohorts200Response ToolLpSearchCohorts(ToolLpSearchCohortsRequest toolLpSearchCohortsRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpSearchCohorts200Response> localVarResponse = ToolLpSearchCohortsWithHttpInfo(toolLpSearchCohortsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchCohortsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpSearchCohorts200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpSearchCohorts200Response> ToolLpSearchCohortsWithHttpInfo(ToolLpSearchCohortsRequest toolLpSearchCohortsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolLpSearchCohortsRequest' is set
            if (toolLpSearchCohortsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpSearchCohortsRequest' when calling ToolLpApi->ToolLpSearchCohorts");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpSearchCohortsRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpSearchCohorts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpSearchCohorts200Response>("/tool_lp_search_cohorts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpSearchCohorts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchCohortsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpSearchCohorts200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpSearchCohorts200Response> ToolLpSearchCohortsAsync(ToolLpSearchCohortsRequest toolLpSearchCohortsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpSearchCohorts200Response> localVarResponse = await ToolLpSearchCohortsWithHttpInfoAsync(toolLpSearchCohortsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead Search for cohorts. This method is deprecated, please call &#39;core_cohort_search_cohorts&#39; instead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchCohortsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpSearchCohorts200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpSearchCohorts200Response>> ToolLpSearchCohortsWithHttpInfoAsync(ToolLpSearchCohortsRequest toolLpSearchCohortsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolLpSearchCohortsRequest' is set
            if (toolLpSearchCohortsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpSearchCohortsRequest' when calling ToolLpApi->ToolLpSearchCohorts");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpSearchCohortsRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpSearchCohorts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpSearchCohorts200Response>("/tool_lp_search_cohorts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpSearchCohorts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for users. Search for users.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolLpSearchUsers200Response</returns>
        public ToolLpSearchUsers200Response ToolLpSearchUsers(ToolLpSearchUsersRequest toolLpSearchUsersRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpSearchUsers200Response> localVarResponse = ToolLpSearchUsersWithHttpInfo(toolLpSearchUsersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for users. Search for users.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolLpSearchUsers200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ToolLpSearchUsers200Response> ToolLpSearchUsersWithHttpInfo(ToolLpSearchUsersRequest toolLpSearchUsersRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolLpSearchUsersRequest' is set
            if (toolLpSearchUsersRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpSearchUsersRequest' when calling ToolLpApi->ToolLpSearchUsers");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpSearchUsersRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpSearchUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolLpSearchUsers200Response>("/tool_lp_search_users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpSearchUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for users. Search for users.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolLpSearchUsers200Response</returns>
        public async System.Threading.Tasks.Task<ToolLpSearchUsers200Response> ToolLpSearchUsersAsync(ToolLpSearchUsersRequest toolLpSearchUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ToolLpSearchUsers200Response> localVarResponse = await ToolLpSearchUsersWithHttpInfoAsync(toolLpSearchUsersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for users. Search for users.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolLpSearchUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolLpSearchUsers200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ToolLpSearchUsers200Response>> ToolLpSearchUsersWithHttpInfoAsync(ToolLpSearchUsersRequest toolLpSearchUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolLpSearchUsersRequest' is set
            if (toolLpSearchUsersRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'toolLpSearchUsersRequest' when calling ToolLpApi->ToolLpSearchUsers");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolLpSearchUsersRequest;

            localVarRequestOptions.Operation = "ToolLpApi.ToolLpSearchUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolLpSearchUsers200Response>("/tool_lp_search_users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolLpSearchUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
