/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModForumApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new discussion into an existing forum.
        /// </summary>
        /// <remarks>
        /// Add a new discussion into an existing forum.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumAddDiscussion200Response</returns>
        ModForumAddDiscussion200Response ModForumAddDiscussion(ModForumAddDiscussionRequest modForumAddDiscussionRequest, int operationIndex = 0);

        /// <summary>
        /// Add a new discussion into an existing forum.
        /// </summary>
        /// <remarks>
        /// Add a new discussion into an existing forum.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumAddDiscussion200Response</returns>
        ApiResponse<ModForumAddDiscussion200Response> ModForumAddDiscussionWithHttpInfo(ModForumAddDiscussionRequest modForumAddDiscussionRequest, int operationIndex = 0);
        /// <summary>
        /// Create new posts into an existing discussion.
        /// </summary>
        /// <remarks>
        /// Create new posts into an existing discussion.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumAddDiscussionPost200Response</returns>
        ModForumAddDiscussionPost200Response ModForumAddDiscussionPost(ModForumAddDiscussionPostRequest modForumAddDiscussionPostRequest, int operationIndex = 0);

        /// <summary>
        /// Create new posts into an existing discussion.
        /// </summary>
        /// <remarks>
        /// Create new posts into an existing discussion.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumAddDiscussionPost200Response</returns>
        ApiResponse<ModForumAddDiscussionPost200Response> ModForumAddDiscussionPostWithHttpInfo(ModForumAddDiscussionPostRequest modForumAddDiscussionPostRequest, int operationIndex = 0);
        /// <summary>
        /// Check if the current user can add discussions in the given forum (and optionally for the given group).
        /// </summary>
        /// <remarks>
        /// Check if the current user can add discussions in the given forum (and optionally for the given group).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumCanAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumCanAddDiscussion200Response</returns>
        ModForumCanAddDiscussion200Response ModForumCanAddDiscussion(ModForumCanAddDiscussionRequest modForumCanAddDiscussionRequest, int operationIndex = 0);

        /// <summary>
        /// Check if the current user can add discussions in the given forum (and optionally for the given group).
        /// </summary>
        /// <remarks>
        /// Check if the current user can add discussions in the given forum (and optionally for the given group).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumCanAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumCanAddDiscussion200Response</returns>
        ApiResponse<ModForumCanAddDiscussion200Response> ModForumCanAddDiscussionWithHttpInfo(ModForumCanAddDiscussionRequest modForumCanAddDiscussionRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes a post or a discussion completely when the post is the discussion topic.
        /// </summary>
        /// <remarks>
        /// Deletes a post or a discussion completely when the post is the discussion topic.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumDeletePostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumDeletePost200Response</returns>
        ModForumDeletePost200Response ModForumDeletePost(ModForumDeletePostRequest modForumDeletePostRequest, int operationIndex = 0);

        /// <summary>
        /// Deletes a post or a discussion completely when the post is the discussion topic.
        /// </summary>
        /// <remarks>
        /// Deletes a post or a discussion completely when the post is the discussion topic.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumDeletePostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumDeletePost200Response</returns>
        ApiResponse<ModForumDeletePost200Response> ModForumDeletePostWithHttpInfo(ModForumDeletePostRequest modForumDeletePostRequest, int operationIndex = 0);
        /// <summary>
        /// Get a particular discussion post.
        /// </summary>
        /// <remarks>
        /// Get a particular discussion post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumGetDiscussionPost200Response</returns>
        ModForumGetDiscussionPost200Response ModForumGetDiscussionPost(ModForumGetDiscussionPostRequest modForumGetDiscussionPostRequest, int operationIndex = 0);

        /// <summary>
        /// Get a particular discussion post.
        /// </summary>
        /// <remarks>
        /// Get a particular discussion post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumGetDiscussionPost200Response</returns>
        ApiResponse<ModForumGetDiscussionPost200Response> ModForumGetDiscussionPostWithHttpInfo(ModForumGetDiscussionPostRequest modForumGetDiscussionPostRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of forum posts for a discussion.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum posts for a discussion.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumGetDiscussionPosts200Response</returns>
        ModForumGetDiscussionPosts200Response ModForumGetDiscussionPosts(ModForumGetDiscussionPostsRequest modForumGetDiscussionPostsRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of forum posts for a discussion.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum posts for a discussion.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumGetDiscussionPosts200Response</returns>
        ApiResponse<ModForumGetDiscussionPosts200Response> ModForumGetDiscussionPostsWithHttpInfo(ModForumGetDiscussionPostsRequest modForumGetDiscussionPostsRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of forum posts for a discussion for a user.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum posts for a discussion for a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsByUseridRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumGetDiscussionPostsByUserid200Response</returns>
        ModForumGetDiscussionPostsByUserid200Response ModForumGetDiscussionPostsByUserid(ModForumGetDiscussionPostsByUseridRequest modForumGetDiscussionPostsByUseridRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of forum posts for a discussion for a user.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum posts for a discussion for a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsByUseridRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumGetDiscussionPostsByUserid200Response</returns>
        ApiResponse<ModForumGetDiscussionPostsByUserid200Response> ModForumGetDiscussionPostsByUseridWithHttpInfo(ModForumGetDiscussionPostsByUseridRequest modForumGetDiscussionPostsByUseridRequest, int operationIndex = 0);
        /// <summary>
        /// Return capabilities information for a given forum.
        /// </summary>
        /// <remarks>
        /// Return capabilities information for a given forum.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumGetForumAccessInformation200Response</returns>
        ModForumGetForumAccessInformation200Response ModForumGetForumAccessInformation(ModForumGetForumAccessInformationRequest modForumGetForumAccessInformationRequest, int operationIndex = 0);

        /// <summary>
        /// Return capabilities information for a given forum.
        /// </summary>
        /// <remarks>
        /// Return capabilities information for a given forum.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumGetForumAccessInformation200Response</returns>
        ApiResponse<ModForumGetForumAccessInformation200Response> ModForumGetForumAccessInformationWithHttpInfo(ModForumGetForumAccessInformationRequest modForumGetForumAccessInformationRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum discussions optionally sorted and paginated.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumGetForumDiscussions200Response</returns>
        ModForumGetForumDiscussions200Response ModForumGetForumDiscussions(ModForumGetForumDiscussionsRequest modForumGetForumDiscussionsRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum discussions optionally sorted and paginated.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumGetForumDiscussions200Response</returns>
        ApiResponse<ModForumGetForumDiscussions200Response> ModForumGetForumDiscussionsWithHttpInfo(ModForumGetForumDiscussionsRequest modForumGetForumDiscussionsRequest, int operationIndex = 0);
        /// <summary>
        /// ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <remarks>
        /// ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsPaginatedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumGetForumDiscussionsPaginated200Response</returns>
        ModForumGetForumDiscussionsPaginated200Response ModForumGetForumDiscussionsPaginated(ModForumGetForumDiscussionsPaginatedRequest modForumGetForumDiscussionsPaginatedRequest, int operationIndex = 0);

        /// <summary>
        /// ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <remarks>
        /// ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsPaginatedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumGetForumDiscussionsPaginated200Response</returns>
        ApiResponse<ModForumGetForumDiscussionsPaginated200Response> ModForumGetForumDiscussionsPaginatedWithHttpInfo(ModForumGetForumDiscussionsPaginatedRequest modForumGetForumDiscussionsPaginatedRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModForumGetForumsByCourses(ModForumGetForumsByCoursesRequest modForumGetForumsByCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModForumGetForumsByCoursesWithHttpInfo(ModForumGetForumsByCoursesRequest modForumGetForumsByCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Prepares a draft area for editing a post.
        /// </summary>
        /// <remarks>
        /// Prepares a draft area for editing a post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumPrepareDraftAreaForPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumPrepareDraftAreaForPost200Response</returns>
        ModForumPrepareDraftAreaForPost200Response ModForumPrepareDraftAreaForPost(ModForumPrepareDraftAreaForPostRequest modForumPrepareDraftAreaForPostRequest, int operationIndex = 0);

        /// <summary>
        /// Prepares a draft area for editing a post.
        /// </summary>
        /// <remarks>
        /// Prepares a draft area for editing a post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumPrepareDraftAreaForPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumPrepareDraftAreaForPost200Response</returns>
        ApiResponse<ModForumPrepareDraftAreaForPost200Response> ModForumPrepareDraftAreaForPostWithHttpInfo(ModForumPrepareDraftAreaForPostRequest modForumPrepareDraftAreaForPostRequest, int operationIndex = 0);
        /// <summary>
        /// Set the lock state for the discussion
        /// </summary>
        /// <remarks>
        /// Set the lock state for the discussion
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetLockStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumSetLockState200Response</returns>
        ModForumSetLockState200Response ModForumSetLockState(ModForumSetLockStateRequest modForumSetLockStateRequest, int operationIndex = 0);

        /// <summary>
        /// Set the lock state for the discussion
        /// </summary>
        /// <remarks>
        /// Set the lock state for the discussion
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetLockStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumSetLockState200Response</returns>
        ApiResponse<ModForumSetLockState200Response> ModForumSetLockStateWithHttpInfo(ModForumSetLockStateRequest modForumSetLockStateRequest, int operationIndex = 0);
        /// <summary>
        /// Set the pin state
        /// </summary>
        /// <remarks>
        /// Set the pin state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetPinStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumSetPinState200Response</returns>
        ModForumSetPinState200Response ModForumSetPinState(ModForumSetPinStateRequest modForumSetPinStateRequest, int operationIndex = 0);

        /// <summary>
        /// Set the pin state
        /// </summary>
        /// <remarks>
        /// Set the pin state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetPinStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumSetPinState200Response</returns>
        ApiResponse<ModForumSetPinState200Response> ModForumSetPinStateWithHttpInfo(ModForumSetPinStateRequest modForumSetPinStateRequest, int operationIndex = 0);
        /// <summary>
        /// Set the subscription state
        /// </summary>
        /// <remarks>
        /// Set the subscription state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetSubscriptionStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumSetSubscriptionState200Response</returns>
        ModForumSetSubscriptionState200Response ModForumSetSubscriptionState(ModForumSetSubscriptionStateRequest modForumSetSubscriptionStateRequest, int operationIndex = 0);

        /// <summary>
        /// Set the subscription state
        /// </summary>
        /// <remarks>
        /// Set the subscription state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetSubscriptionStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumSetSubscriptionState200Response</returns>
        ApiResponse<ModForumSetSubscriptionState200Response> ModForumSetSubscriptionStateWithHttpInfo(ModForumSetSubscriptionStateRequest modForumSetSubscriptionStateRequest, int operationIndex = 0);
        /// <summary>
        /// Toggle the favourite state
        /// </summary>
        /// <remarks>
        /// Toggle the favourite state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumToggleFavouriteStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumSetSubscriptionState200Response</returns>
        ModForumSetSubscriptionState200Response ModForumToggleFavouriteState(ModForumToggleFavouriteStateRequest modForumToggleFavouriteStateRequest, int operationIndex = 0);

        /// <summary>
        /// Toggle the favourite state
        /// </summary>
        /// <remarks>
        /// Toggle the favourite state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumToggleFavouriteStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumSetSubscriptionState200Response</returns>
        ApiResponse<ModForumSetSubscriptionState200Response> ModForumToggleFavouriteStateWithHttpInfo(ModForumToggleFavouriteStateRequest modForumToggleFavouriteStateRequest, int operationIndex = 0);
        /// <summary>
        /// Updates a post or a discussion topic post.
        /// </summary>
        /// <remarks>
        /// Updates a post or a discussion topic post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumUpdateDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumUpdateDiscussionPost200Response</returns>
        ModForumUpdateDiscussionPost200Response ModForumUpdateDiscussionPost(ModForumUpdateDiscussionPostRequest modForumUpdateDiscussionPostRequest, int operationIndex = 0);

        /// <summary>
        /// Updates a post or a discussion topic post.
        /// </summary>
        /// <remarks>
        /// Updates a post or a discussion topic post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumUpdateDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumUpdateDiscussionPost200Response</returns>
        ApiResponse<ModForumUpdateDiscussionPost200Response> ModForumUpdateDiscussionPostWithHttpInfo(ModForumUpdateDiscussionPostRequest modForumUpdateDiscussionPostRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModForumViewForum(ModForumViewForumRequest modForumViewForumRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModForumViewForumWithHttpInfo(ModForumViewForumRequest modForumViewForumRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the forum discussion viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the forum discussion viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModForumViewForumDiscussion(ModForumViewForumDiscussionRequest modForumViewForumDiscussionRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the forum discussion viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the forum discussion viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModForumViewForumDiscussionWithHttpInfo(ModForumViewForumDiscussionRequest modForumViewForumDiscussionRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModForumApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a new discussion into an existing forum.
        /// </summary>
        /// <remarks>
        /// Add a new discussion into an existing forum.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumAddDiscussion200Response</returns>
        System.Threading.Tasks.Task<ModForumAddDiscussion200Response> ModForumAddDiscussionAsync(ModForumAddDiscussionRequest modForumAddDiscussionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new discussion into an existing forum.
        /// </summary>
        /// <remarks>
        /// Add a new discussion into an existing forum.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumAddDiscussion200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumAddDiscussion200Response>> ModForumAddDiscussionWithHttpInfoAsync(ModForumAddDiscussionRequest modForumAddDiscussionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create new posts into an existing discussion.
        /// </summary>
        /// <remarks>
        /// Create new posts into an existing discussion.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumAddDiscussionPost200Response</returns>
        System.Threading.Tasks.Task<ModForumAddDiscussionPost200Response> ModForumAddDiscussionPostAsync(ModForumAddDiscussionPostRequest modForumAddDiscussionPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new posts into an existing discussion.
        /// </summary>
        /// <remarks>
        /// Create new posts into an existing discussion.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumAddDiscussionPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumAddDiscussionPost200Response>> ModForumAddDiscussionPostWithHttpInfoAsync(ModForumAddDiscussionPostRequest modForumAddDiscussionPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check if the current user can add discussions in the given forum (and optionally for the given group).
        /// </summary>
        /// <remarks>
        /// Check if the current user can add discussions in the given forum (and optionally for the given group).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumCanAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumCanAddDiscussion200Response</returns>
        System.Threading.Tasks.Task<ModForumCanAddDiscussion200Response> ModForumCanAddDiscussionAsync(ModForumCanAddDiscussionRequest modForumCanAddDiscussionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check if the current user can add discussions in the given forum (and optionally for the given group).
        /// </summary>
        /// <remarks>
        /// Check if the current user can add discussions in the given forum (and optionally for the given group).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumCanAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumCanAddDiscussion200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumCanAddDiscussion200Response>> ModForumCanAddDiscussionWithHttpInfoAsync(ModForumCanAddDiscussionRequest modForumCanAddDiscussionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a post or a discussion completely when the post is the discussion topic.
        /// </summary>
        /// <remarks>
        /// Deletes a post or a discussion completely when the post is the discussion topic.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumDeletePostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumDeletePost200Response</returns>
        System.Threading.Tasks.Task<ModForumDeletePost200Response> ModForumDeletePostAsync(ModForumDeletePostRequest modForumDeletePostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a post or a discussion completely when the post is the discussion topic.
        /// </summary>
        /// <remarks>
        /// Deletes a post or a discussion completely when the post is the discussion topic.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumDeletePostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumDeletePost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumDeletePost200Response>> ModForumDeletePostWithHttpInfoAsync(ModForumDeletePostRequest modForumDeletePostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a particular discussion post.
        /// </summary>
        /// <remarks>
        /// Get a particular discussion post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumGetDiscussionPost200Response</returns>
        System.Threading.Tasks.Task<ModForumGetDiscussionPost200Response> ModForumGetDiscussionPostAsync(ModForumGetDiscussionPostRequest modForumGetDiscussionPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a particular discussion post.
        /// </summary>
        /// <remarks>
        /// Get a particular discussion post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumGetDiscussionPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumGetDiscussionPost200Response>> ModForumGetDiscussionPostWithHttpInfoAsync(ModForumGetDiscussionPostRequest modForumGetDiscussionPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of forum posts for a discussion.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum posts for a discussion.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumGetDiscussionPosts200Response</returns>
        System.Threading.Tasks.Task<ModForumGetDiscussionPosts200Response> ModForumGetDiscussionPostsAsync(ModForumGetDiscussionPostsRequest modForumGetDiscussionPostsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of forum posts for a discussion.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum posts for a discussion.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumGetDiscussionPosts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumGetDiscussionPosts200Response>> ModForumGetDiscussionPostsWithHttpInfoAsync(ModForumGetDiscussionPostsRequest modForumGetDiscussionPostsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of forum posts for a discussion for a user.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum posts for a discussion for a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsByUseridRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumGetDiscussionPostsByUserid200Response</returns>
        System.Threading.Tasks.Task<ModForumGetDiscussionPostsByUserid200Response> ModForumGetDiscussionPostsByUseridAsync(ModForumGetDiscussionPostsByUseridRequest modForumGetDiscussionPostsByUseridRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of forum posts for a discussion for a user.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum posts for a discussion for a user.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsByUseridRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumGetDiscussionPostsByUserid200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumGetDiscussionPostsByUserid200Response>> ModForumGetDiscussionPostsByUseridWithHttpInfoAsync(ModForumGetDiscussionPostsByUseridRequest modForumGetDiscussionPostsByUseridRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return capabilities information for a given forum.
        /// </summary>
        /// <remarks>
        /// Return capabilities information for a given forum.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumGetForumAccessInformation200Response</returns>
        System.Threading.Tasks.Task<ModForumGetForumAccessInformation200Response> ModForumGetForumAccessInformationAsync(ModForumGetForumAccessInformationRequest modForumGetForumAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return capabilities information for a given forum.
        /// </summary>
        /// <remarks>
        /// Return capabilities information for a given forum.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumGetForumAccessInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumGetForumAccessInformation200Response>> ModForumGetForumAccessInformationWithHttpInfoAsync(ModForumGetForumAccessInformationRequest modForumGetForumAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum discussions optionally sorted and paginated.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumGetForumDiscussions200Response</returns>
        System.Threading.Tasks.Task<ModForumGetForumDiscussions200Response> ModForumGetForumDiscussionsAsync(ModForumGetForumDiscussionsRequest modForumGetForumDiscussionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum discussions optionally sorted and paginated.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumGetForumDiscussions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumGetForumDiscussions200Response>> ModForumGetForumDiscussionsWithHttpInfoAsync(ModForumGetForumDiscussionsRequest modForumGetForumDiscussionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <remarks>
        /// ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsPaginatedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumGetForumDiscussionsPaginated200Response</returns>
        System.Threading.Tasks.Task<ModForumGetForumDiscussionsPaginated200Response> ModForumGetForumDiscussionsPaginatedAsync(ModForumGetForumDiscussionsPaginatedRequest modForumGetForumDiscussionsPaginatedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <remarks>
        /// ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsPaginatedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumGetForumDiscussionsPaginated200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumGetForumDiscussionsPaginated200Response>> ModForumGetForumDiscussionsPaginatedWithHttpInfoAsync(ModForumGetForumDiscussionsPaginatedRequest modForumGetForumDiscussionsPaginatedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModForumGetForumsByCoursesAsync(ModForumGetForumsByCoursesRequest modForumGetForumsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModForumGetForumsByCoursesWithHttpInfoAsync(ModForumGetForumsByCoursesRequest modForumGetForumsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Prepares a draft area for editing a post.
        /// </summary>
        /// <remarks>
        /// Prepares a draft area for editing a post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumPrepareDraftAreaForPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumPrepareDraftAreaForPost200Response</returns>
        System.Threading.Tasks.Task<ModForumPrepareDraftAreaForPost200Response> ModForumPrepareDraftAreaForPostAsync(ModForumPrepareDraftAreaForPostRequest modForumPrepareDraftAreaForPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Prepares a draft area for editing a post.
        /// </summary>
        /// <remarks>
        /// Prepares a draft area for editing a post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumPrepareDraftAreaForPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumPrepareDraftAreaForPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumPrepareDraftAreaForPost200Response>> ModForumPrepareDraftAreaForPostWithHttpInfoAsync(ModForumPrepareDraftAreaForPostRequest modForumPrepareDraftAreaForPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set the lock state for the discussion
        /// </summary>
        /// <remarks>
        /// Set the lock state for the discussion
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetLockStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumSetLockState200Response</returns>
        System.Threading.Tasks.Task<ModForumSetLockState200Response> ModForumSetLockStateAsync(ModForumSetLockStateRequest modForumSetLockStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set the lock state for the discussion
        /// </summary>
        /// <remarks>
        /// Set the lock state for the discussion
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetLockStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumSetLockState200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumSetLockState200Response>> ModForumSetLockStateWithHttpInfoAsync(ModForumSetLockStateRequest modForumSetLockStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set the pin state
        /// </summary>
        /// <remarks>
        /// Set the pin state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetPinStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumSetPinState200Response</returns>
        System.Threading.Tasks.Task<ModForumSetPinState200Response> ModForumSetPinStateAsync(ModForumSetPinStateRequest modForumSetPinStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set the pin state
        /// </summary>
        /// <remarks>
        /// Set the pin state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetPinStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumSetPinState200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumSetPinState200Response>> ModForumSetPinStateWithHttpInfoAsync(ModForumSetPinStateRequest modForumSetPinStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set the subscription state
        /// </summary>
        /// <remarks>
        /// Set the subscription state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetSubscriptionStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumSetSubscriptionState200Response</returns>
        System.Threading.Tasks.Task<ModForumSetSubscriptionState200Response> ModForumSetSubscriptionStateAsync(ModForumSetSubscriptionStateRequest modForumSetSubscriptionStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set the subscription state
        /// </summary>
        /// <remarks>
        /// Set the subscription state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetSubscriptionStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumSetSubscriptionState200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumSetSubscriptionState200Response>> ModForumSetSubscriptionStateWithHttpInfoAsync(ModForumSetSubscriptionStateRequest modForumSetSubscriptionStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Toggle the favourite state
        /// </summary>
        /// <remarks>
        /// Toggle the favourite state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumToggleFavouriteStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumSetSubscriptionState200Response</returns>
        System.Threading.Tasks.Task<ModForumSetSubscriptionState200Response> ModForumToggleFavouriteStateAsync(ModForumToggleFavouriteStateRequest modForumToggleFavouriteStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Toggle the favourite state
        /// </summary>
        /// <remarks>
        /// Toggle the favourite state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumToggleFavouriteStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumSetSubscriptionState200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumSetSubscriptionState200Response>> ModForumToggleFavouriteStateWithHttpInfoAsync(ModForumToggleFavouriteStateRequest modForumToggleFavouriteStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a post or a discussion topic post.
        /// </summary>
        /// <remarks>
        /// Updates a post or a discussion topic post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumUpdateDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumUpdateDiscussionPost200Response</returns>
        System.Threading.Tasks.Task<ModForumUpdateDiscussionPost200Response> ModForumUpdateDiscussionPostAsync(ModForumUpdateDiscussionPostRequest modForumUpdateDiscussionPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a post or a discussion topic post.
        /// </summary>
        /// <remarks>
        /// Updates a post or a discussion topic post.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumUpdateDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumUpdateDiscussionPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModForumUpdateDiscussionPost200Response>> ModForumUpdateDiscussionPostWithHttpInfoAsync(ModForumUpdateDiscussionPostRequest modForumUpdateDiscussionPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModForumViewForumAsync(ModForumViewForumRequest modForumViewForumRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModForumViewForumWithHttpInfoAsync(ModForumViewForumRequest modForumViewForumRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the forum discussion viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the forum discussion viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModForumViewForumDiscussionAsync(ModForumViewForumDiscussionRequest modForumViewForumDiscussionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the forum discussion viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the forum discussion viewed event.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModForumViewForumDiscussionWithHttpInfoAsync(ModForumViewForumDiscussionRequest modForumViewForumDiscussionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModForumApi : IModForumApiSync, IModForumApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModForumApi : IModForumApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModForumApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModForumApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModForumApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModForumApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a new discussion into an existing forum. Add a new discussion into an existing forum.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumAddDiscussion200Response</returns>
        public ModForumAddDiscussion200Response ModForumAddDiscussion(ModForumAddDiscussionRequest modForumAddDiscussionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumAddDiscussion200Response> localVarResponse = ModForumAddDiscussionWithHttpInfo(modForumAddDiscussionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new discussion into an existing forum. Add a new discussion into an existing forum.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumAddDiscussion200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumAddDiscussion200Response> ModForumAddDiscussionWithHttpInfo(ModForumAddDiscussionRequest modForumAddDiscussionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumAddDiscussionRequest' is set
            if (modForumAddDiscussionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumAddDiscussionRequest' when calling ModForumApi->ModForumAddDiscussion");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumAddDiscussionRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumAddDiscussion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumAddDiscussion200Response>("/mod_forum_add_discussion", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumAddDiscussion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new discussion into an existing forum. Add a new discussion into an existing forum.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumAddDiscussion200Response</returns>
        public async System.Threading.Tasks.Task<ModForumAddDiscussion200Response> ModForumAddDiscussionAsync(ModForumAddDiscussionRequest modForumAddDiscussionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumAddDiscussion200Response> localVarResponse = await ModForumAddDiscussionWithHttpInfoAsync(modForumAddDiscussionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new discussion into an existing forum. Add a new discussion into an existing forum.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumAddDiscussion200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumAddDiscussion200Response>> ModForumAddDiscussionWithHttpInfoAsync(ModForumAddDiscussionRequest modForumAddDiscussionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumAddDiscussionRequest' is set
            if (modForumAddDiscussionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumAddDiscussionRequest' when calling ModForumApi->ModForumAddDiscussion");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumAddDiscussionRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumAddDiscussion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumAddDiscussion200Response>("/mod_forum_add_discussion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumAddDiscussion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new posts into an existing discussion. Create new posts into an existing discussion.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumAddDiscussionPost200Response</returns>
        public ModForumAddDiscussionPost200Response ModForumAddDiscussionPost(ModForumAddDiscussionPostRequest modForumAddDiscussionPostRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumAddDiscussionPost200Response> localVarResponse = ModForumAddDiscussionPostWithHttpInfo(modForumAddDiscussionPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new posts into an existing discussion. Create new posts into an existing discussion.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumAddDiscussionPost200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumAddDiscussionPost200Response> ModForumAddDiscussionPostWithHttpInfo(ModForumAddDiscussionPostRequest modForumAddDiscussionPostRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumAddDiscussionPostRequest' is set
            if (modForumAddDiscussionPostRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumAddDiscussionPostRequest' when calling ModForumApi->ModForumAddDiscussionPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumAddDiscussionPostRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumAddDiscussionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumAddDiscussionPost200Response>("/mod_forum_add_discussion_post", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumAddDiscussionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new posts into an existing discussion. Create new posts into an existing discussion.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumAddDiscussionPost200Response</returns>
        public async System.Threading.Tasks.Task<ModForumAddDiscussionPost200Response> ModForumAddDiscussionPostAsync(ModForumAddDiscussionPostRequest modForumAddDiscussionPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumAddDiscussionPost200Response> localVarResponse = await ModForumAddDiscussionPostWithHttpInfoAsync(modForumAddDiscussionPostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new posts into an existing discussion. Create new posts into an existing discussion.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumAddDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumAddDiscussionPost200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumAddDiscussionPost200Response>> ModForumAddDiscussionPostWithHttpInfoAsync(ModForumAddDiscussionPostRequest modForumAddDiscussionPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumAddDiscussionPostRequest' is set
            if (modForumAddDiscussionPostRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumAddDiscussionPostRequest' when calling ModForumApi->ModForumAddDiscussionPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumAddDiscussionPostRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumAddDiscussionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumAddDiscussionPost200Response>("/mod_forum_add_discussion_post", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumAddDiscussionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if the current user can add discussions in the given forum (and optionally for the given group). Check if the current user can add discussions in the given forum (and optionally for the given group).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumCanAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumCanAddDiscussion200Response</returns>
        public ModForumCanAddDiscussion200Response ModForumCanAddDiscussion(ModForumCanAddDiscussionRequest modForumCanAddDiscussionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumCanAddDiscussion200Response> localVarResponse = ModForumCanAddDiscussionWithHttpInfo(modForumCanAddDiscussionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if the current user can add discussions in the given forum (and optionally for the given group). Check if the current user can add discussions in the given forum (and optionally for the given group).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumCanAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumCanAddDiscussion200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumCanAddDiscussion200Response> ModForumCanAddDiscussionWithHttpInfo(ModForumCanAddDiscussionRequest modForumCanAddDiscussionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumCanAddDiscussionRequest' is set
            if (modForumCanAddDiscussionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumCanAddDiscussionRequest' when calling ModForumApi->ModForumCanAddDiscussion");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumCanAddDiscussionRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumCanAddDiscussion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumCanAddDiscussion200Response>("/mod_forum_can_add_discussion", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumCanAddDiscussion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if the current user can add discussions in the given forum (and optionally for the given group). Check if the current user can add discussions in the given forum (and optionally for the given group).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumCanAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumCanAddDiscussion200Response</returns>
        public async System.Threading.Tasks.Task<ModForumCanAddDiscussion200Response> ModForumCanAddDiscussionAsync(ModForumCanAddDiscussionRequest modForumCanAddDiscussionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumCanAddDiscussion200Response> localVarResponse = await ModForumCanAddDiscussionWithHttpInfoAsync(modForumCanAddDiscussionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if the current user can add discussions in the given forum (and optionally for the given group). Check if the current user can add discussions in the given forum (and optionally for the given group).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumCanAddDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumCanAddDiscussion200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumCanAddDiscussion200Response>> ModForumCanAddDiscussionWithHttpInfoAsync(ModForumCanAddDiscussionRequest modForumCanAddDiscussionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumCanAddDiscussionRequest' is set
            if (modForumCanAddDiscussionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumCanAddDiscussionRequest' when calling ModForumApi->ModForumCanAddDiscussion");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumCanAddDiscussionRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumCanAddDiscussion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumCanAddDiscussion200Response>("/mod_forum_can_add_discussion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumCanAddDiscussion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a post or a discussion completely when the post is the discussion topic. Deletes a post or a discussion completely when the post is the discussion topic.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumDeletePostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumDeletePost200Response</returns>
        public ModForumDeletePost200Response ModForumDeletePost(ModForumDeletePostRequest modForumDeletePostRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumDeletePost200Response> localVarResponse = ModForumDeletePostWithHttpInfo(modForumDeletePostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a post or a discussion completely when the post is the discussion topic. Deletes a post or a discussion completely when the post is the discussion topic.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumDeletePostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumDeletePost200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumDeletePost200Response> ModForumDeletePostWithHttpInfo(ModForumDeletePostRequest modForumDeletePostRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumDeletePostRequest' is set
            if (modForumDeletePostRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumDeletePostRequest' when calling ModForumApi->ModForumDeletePost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumDeletePostRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumDeletePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumDeletePost200Response>("/mod_forum_delete_post", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumDeletePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a post or a discussion completely when the post is the discussion topic. Deletes a post or a discussion completely when the post is the discussion topic.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumDeletePostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumDeletePost200Response</returns>
        public async System.Threading.Tasks.Task<ModForumDeletePost200Response> ModForumDeletePostAsync(ModForumDeletePostRequest modForumDeletePostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumDeletePost200Response> localVarResponse = await ModForumDeletePostWithHttpInfoAsync(modForumDeletePostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a post or a discussion completely when the post is the discussion topic. Deletes a post or a discussion completely when the post is the discussion topic.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumDeletePostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumDeletePost200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumDeletePost200Response>> ModForumDeletePostWithHttpInfoAsync(ModForumDeletePostRequest modForumDeletePostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumDeletePostRequest' is set
            if (modForumDeletePostRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumDeletePostRequest' when calling ModForumApi->ModForumDeletePost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumDeletePostRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumDeletePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumDeletePost200Response>("/mod_forum_delete_post", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumDeletePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a particular discussion post. Get a particular discussion post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumGetDiscussionPost200Response</returns>
        public ModForumGetDiscussionPost200Response ModForumGetDiscussionPost(ModForumGetDiscussionPostRequest modForumGetDiscussionPostRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumGetDiscussionPost200Response> localVarResponse = ModForumGetDiscussionPostWithHttpInfo(modForumGetDiscussionPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a particular discussion post. Get a particular discussion post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumGetDiscussionPost200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumGetDiscussionPost200Response> ModForumGetDiscussionPostWithHttpInfo(ModForumGetDiscussionPostRequest modForumGetDiscussionPostRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumGetDiscussionPostRequest' is set
            if (modForumGetDiscussionPostRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumGetDiscussionPostRequest' when calling ModForumApi->ModForumGetDiscussionPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumGetDiscussionPostRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumGetDiscussionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumGetDiscussionPost200Response>("/mod_forum_get_discussion_post", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumGetDiscussionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a particular discussion post. Get a particular discussion post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumGetDiscussionPost200Response</returns>
        public async System.Threading.Tasks.Task<ModForumGetDiscussionPost200Response> ModForumGetDiscussionPostAsync(ModForumGetDiscussionPostRequest modForumGetDiscussionPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumGetDiscussionPost200Response> localVarResponse = await ModForumGetDiscussionPostWithHttpInfoAsync(modForumGetDiscussionPostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a particular discussion post. Get a particular discussion post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumGetDiscussionPost200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumGetDiscussionPost200Response>> ModForumGetDiscussionPostWithHttpInfoAsync(ModForumGetDiscussionPostRequest modForumGetDiscussionPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumGetDiscussionPostRequest' is set
            if (modForumGetDiscussionPostRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumGetDiscussionPostRequest' when calling ModForumApi->ModForumGetDiscussionPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumGetDiscussionPostRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumGetDiscussionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumGetDiscussionPost200Response>("/mod_forum_get_discussion_post", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumGetDiscussionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of forum posts for a discussion. Returns a list of forum posts for a discussion.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumGetDiscussionPosts200Response</returns>
        public ModForumGetDiscussionPosts200Response ModForumGetDiscussionPosts(ModForumGetDiscussionPostsRequest modForumGetDiscussionPostsRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumGetDiscussionPosts200Response> localVarResponse = ModForumGetDiscussionPostsWithHttpInfo(modForumGetDiscussionPostsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of forum posts for a discussion. Returns a list of forum posts for a discussion.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumGetDiscussionPosts200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumGetDiscussionPosts200Response> ModForumGetDiscussionPostsWithHttpInfo(ModForumGetDiscussionPostsRequest modForumGetDiscussionPostsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumGetDiscussionPostsRequest' is set
            if (modForumGetDiscussionPostsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumGetDiscussionPostsRequest' when calling ModForumApi->ModForumGetDiscussionPosts");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumGetDiscussionPostsRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumGetDiscussionPosts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumGetDiscussionPosts200Response>("/mod_forum_get_discussion_posts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumGetDiscussionPosts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of forum posts for a discussion. Returns a list of forum posts for a discussion.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumGetDiscussionPosts200Response</returns>
        public async System.Threading.Tasks.Task<ModForumGetDiscussionPosts200Response> ModForumGetDiscussionPostsAsync(ModForumGetDiscussionPostsRequest modForumGetDiscussionPostsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumGetDiscussionPosts200Response> localVarResponse = await ModForumGetDiscussionPostsWithHttpInfoAsync(modForumGetDiscussionPostsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of forum posts for a discussion. Returns a list of forum posts for a discussion.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumGetDiscussionPosts200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumGetDiscussionPosts200Response>> ModForumGetDiscussionPostsWithHttpInfoAsync(ModForumGetDiscussionPostsRequest modForumGetDiscussionPostsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumGetDiscussionPostsRequest' is set
            if (modForumGetDiscussionPostsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumGetDiscussionPostsRequest' when calling ModForumApi->ModForumGetDiscussionPosts");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumGetDiscussionPostsRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumGetDiscussionPosts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumGetDiscussionPosts200Response>("/mod_forum_get_discussion_posts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumGetDiscussionPosts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of forum posts for a discussion for a user. Returns a list of forum posts for a discussion for a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsByUseridRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumGetDiscussionPostsByUserid200Response</returns>
        public ModForumGetDiscussionPostsByUserid200Response ModForumGetDiscussionPostsByUserid(ModForumGetDiscussionPostsByUseridRequest modForumGetDiscussionPostsByUseridRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumGetDiscussionPostsByUserid200Response> localVarResponse = ModForumGetDiscussionPostsByUseridWithHttpInfo(modForumGetDiscussionPostsByUseridRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of forum posts for a discussion for a user. Returns a list of forum posts for a discussion for a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsByUseridRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumGetDiscussionPostsByUserid200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumGetDiscussionPostsByUserid200Response> ModForumGetDiscussionPostsByUseridWithHttpInfo(ModForumGetDiscussionPostsByUseridRequest modForumGetDiscussionPostsByUseridRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumGetDiscussionPostsByUseridRequest' is set
            if (modForumGetDiscussionPostsByUseridRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumGetDiscussionPostsByUseridRequest' when calling ModForumApi->ModForumGetDiscussionPostsByUserid");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumGetDiscussionPostsByUseridRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumGetDiscussionPostsByUserid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumGetDiscussionPostsByUserid200Response>("/mod_forum_get_discussion_posts_by_userid", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumGetDiscussionPostsByUserid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of forum posts for a discussion for a user. Returns a list of forum posts for a discussion for a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsByUseridRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumGetDiscussionPostsByUserid200Response</returns>
        public async System.Threading.Tasks.Task<ModForumGetDiscussionPostsByUserid200Response> ModForumGetDiscussionPostsByUseridAsync(ModForumGetDiscussionPostsByUseridRequest modForumGetDiscussionPostsByUseridRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumGetDiscussionPostsByUserid200Response> localVarResponse = await ModForumGetDiscussionPostsByUseridWithHttpInfoAsync(modForumGetDiscussionPostsByUseridRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of forum posts for a discussion for a user. Returns a list of forum posts for a discussion for a user.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetDiscussionPostsByUseridRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumGetDiscussionPostsByUserid200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumGetDiscussionPostsByUserid200Response>> ModForumGetDiscussionPostsByUseridWithHttpInfoAsync(ModForumGetDiscussionPostsByUseridRequest modForumGetDiscussionPostsByUseridRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumGetDiscussionPostsByUseridRequest' is set
            if (modForumGetDiscussionPostsByUseridRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumGetDiscussionPostsByUseridRequest' when calling ModForumApi->ModForumGetDiscussionPostsByUserid");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumGetDiscussionPostsByUseridRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumGetDiscussionPostsByUserid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumGetDiscussionPostsByUserid200Response>("/mod_forum_get_discussion_posts_by_userid", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumGetDiscussionPostsByUserid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return capabilities information for a given forum. Return capabilities information for a given forum.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumGetForumAccessInformation200Response</returns>
        public ModForumGetForumAccessInformation200Response ModForumGetForumAccessInformation(ModForumGetForumAccessInformationRequest modForumGetForumAccessInformationRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumGetForumAccessInformation200Response> localVarResponse = ModForumGetForumAccessInformationWithHttpInfo(modForumGetForumAccessInformationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return capabilities information for a given forum. Return capabilities information for a given forum.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumGetForumAccessInformation200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumGetForumAccessInformation200Response> ModForumGetForumAccessInformationWithHttpInfo(ModForumGetForumAccessInformationRequest modForumGetForumAccessInformationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumGetForumAccessInformationRequest' is set
            if (modForumGetForumAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumGetForumAccessInformationRequest' when calling ModForumApi->ModForumGetForumAccessInformation");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumGetForumAccessInformationRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumGetForumAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumGetForumAccessInformation200Response>("/mod_forum_get_forum_access_information", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumGetForumAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return capabilities information for a given forum. Return capabilities information for a given forum.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumGetForumAccessInformation200Response</returns>
        public async System.Threading.Tasks.Task<ModForumGetForumAccessInformation200Response> ModForumGetForumAccessInformationAsync(ModForumGetForumAccessInformationRequest modForumGetForumAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumGetForumAccessInformation200Response> localVarResponse = await ModForumGetForumAccessInformationWithHttpInfoAsync(modForumGetForumAccessInformationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return capabilities information for a given forum. Return capabilities information for a given forum.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumGetForumAccessInformation200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumGetForumAccessInformation200Response>> ModForumGetForumAccessInformationWithHttpInfoAsync(ModForumGetForumAccessInformationRequest modForumGetForumAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumGetForumAccessInformationRequest' is set
            if (modForumGetForumAccessInformationRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumGetForumAccessInformationRequest' when calling ModForumApi->ModForumGetForumAccessInformation");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumGetForumAccessInformationRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumGetForumAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumGetForumAccessInformation200Response>("/mod_forum_get_forum_access_information", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumGetForumAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of forum discussions optionally sorted and paginated. Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumGetForumDiscussions200Response</returns>
        public ModForumGetForumDiscussions200Response ModForumGetForumDiscussions(ModForumGetForumDiscussionsRequest modForumGetForumDiscussionsRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumGetForumDiscussions200Response> localVarResponse = ModForumGetForumDiscussionsWithHttpInfo(modForumGetForumDiscussionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of forum discussions optionally sorted and paginated. Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumGetForumDiscussions200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumGetForumDiscussions200Response> ModForumGetForumDiscussionsWithHttpInfo(ModForumGetForumDiscussionsRequest modForumGetForumDiscussionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumGetForumDiscussionsRequest' is set
            if (modForumGetForumDiscussionsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumGetForumDiscussionsRequest' when calling ModForumApi->ModForumGetForumDiscussions");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumGetForumDiscussionsRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumGetForumDiscussions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumGetForumDiscussions200Response>("/mod_forum_get_forum_discussions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumGetForumDiscussions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of forum discussions optionally sorted and paginated. Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumGetForumDiscussions200Response</returns>
        public async System.Threading.Tasks.Task<ModForumGetForumDiscussions200Response> ModForumGetForumDiscussionsAsync(ModForumGetForumDiscussionsRequest modForumGetForumDiscussionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumGetForumDiscussions200Response> localVarResponse = await ModForumGetForumDiscussionsWithHttpInfoAsync(modForumGetForumDiscussionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of forum discussions optionally sorted and paginated. Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumGetForumDiscussions200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumGetForumDiscussions200Response>> ModForumGetForumDiscussionsWithHttpInfoAsync(ModForumGetForumDiscussionsRequest modForumGetForumDiscussionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumGetForumDiscussionsRequest' is set
            if (modForumGetForumDiscussionsRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumGetForumDiscussionsRequest' when calling ModForumApi->ModForumGetForumDiscussions");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumGetForumDiscussionsRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumGetForumDiscussions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumGetForumDiscussions200Response>("/mod_forum_get_forum_discussions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumGetForumDiscussions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated. ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsPaginatedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumGetForumDiscussionsPaginated200Response</returns>
        public ModForumGetForumDiscussionsPaginated200Response ModForumGetForumDiscussionsPaginated(ModForumGetForumDiscussionsPaginatedRequest modForumGetForumDiscussionsPaginatedRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumGetForumDiscussionsPaginated200Response> localVarResponse = ModForumGetForumDiscussionsPaginatedWithHttpInfo(modForumGetForumDiscussionsPaginatedRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated. ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsPaginatedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumGetForumDiscussionsPaginated200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumGetForumDiscussionsPaginated200Response> ModForumGetForumDiscussionsPaginatedWithHttpInfo(ModForumGetForumDiscussionsPaginatedRequest modForumGetForumDiscussionsPaginatedRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumGetForumDiscussionsPaginatedRequest' is set
            if (modForumGetForumDiscussionsPaginatedRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumGetForumDiscussionsPaginatedRequest' when calling ModForumApi->ModForumGetForumDiscussionsPaginated");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumGetForumDiscussionsPaginatedRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumGetForumDiscussionsPaginated";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumGetForumDiscussionsPaginated200Response>("/mod_forum_get_forum_discussions_paginated", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumGetForumDiscussionsPaginated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated. ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsPaginatedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumGetForumDiscussionsPaginated200Response</returns>
        public async System.Threading.Tasks.Task<ModForumGetForumDiscussionsPaginated200Response> ModForumGetForumDiscussionsPaginatedAsync(ModForumGetForumDiscussionsPaginatedRequest modForumGetForumDiscussionsPaginatedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumGetForumDiscussionsPaginated200Response> localVarResponse = await ModForumGetForumDiscussionsPaginatedWithHttpInfoAsync(modForumGetForumDiscussionsPaginatedRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated. ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumDiscussionsPaginatedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumGetForumDiscussionsPaginated200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumGetForumDiscussionsPaginated200Response>> ModForumGetForumDiscussionsPaginatedWithHttpInfoAsync(ModForumGetForumDiscussionsPaginatedRequest modForumGetForumDiscussionsPaginatedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumGetForumDiscussionsPaginatedRequest' is set
            if (modForumGetForumDiscussionsPaginatedRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumGetForumDiscussionsPaginatedRequest' when calling ModForumApi->ModForumGetForumDiscussionsPaginated");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumGetForumDiscussionsPaginatedRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumGetForumDiscussionsPaginated";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumGetForumDiscussionsPaginated200Response>("/mod_forum_get_forum_discussions_paginated", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumGetForumDiscussionsPaginated", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned. Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModForumGetForumsByCourses(ModForumGetForumsByCoursesRequest modForumGetForumsByCoursesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = ModForumGetForumsByCoursesWithHttpInfo(modForumGetForumsByCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned. Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ModForumGetForumsByCoursesWithHttpInfo(ModForumGetForumsByCoursesRequest modForumGetForumsByCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumGetForumsByCoursesRequest' is set
            if (modForumGetForumsByCoursesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumGetForumsByCoursesRequest' when calling ModForumApi->ModForumGetForumsByCourses");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumGetForumsByCoursesRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumGetForumsByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_forum_get_forums_by_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumGetForumsByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned. Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModForumGetForumsByCoursesAsync(ModForumGetForumsByCoursesRequest modForumGetForumsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await ModForumGetForumsByCoursesWithHttpInfoAsync(modForumGetForumsByCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned. Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumGetForumsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ModForumGetForumsByCoursesWithHttpInfoAsync(ModForumGetForumsByCoursesRequest modForumGetForumsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumGetForumsByCoursesRequest' is set
            if (modForumGetForumsByCoursesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumGetForumsByCoursesRequest' when calling ModForumApi->ModForumGetForumsByCourses");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumGetForumsByCoursesRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumGetForumsByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_forum_get_forums_by_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumGetForumsByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Prepares a draft area for editing a post. Prepares a draft area for editing a post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumPrepareDraftAreaForPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumPrepareDraftAreaForPost200Response</returns>
        public ModForumPrepareDraftAreaForPost200Response ModForumPrepareDraftAreaForPost(ModForumPrepareDraftAreaForPostRequest modForumPrepareDraftAreaForPostRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumPrepareDraftAreaForPost200Response> localVarResponse = ModForumPrepareDraftAreaForPostWithHttpInfo(modForumPrepareDraftAreaForPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Prepares a draft area for editing a post. Prepares a draft area for editing a post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumPrepareDraftAreaForPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumPrepareDraftAreaForPost200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumPrepareDraftAreaForPost200Response> ModForumPrepareDraftAreaForPostWithHttpInfo(ModForumPrepareDraftAreaForPostRequest modForumPrepareDraftAreaForPostRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumPrepareDraftAreaForPostRequest' is set
            if (modForumPrepareDraftAreaForPostRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumPrepareDraftAreaForPostRequest' when calling ModForumApi->ModForumPrepareDraftAreaForPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumPrepareDraftAreaForPostRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumPrepareDraftAreaForPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumPrepareDraftAreaForPost200Response>("/mod_forum_prepare_draft_area_for_post", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumPrepareDraftAreaForPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Prepares a draft area for editing a post. Prepares a draft area for editing a post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumPrepareDraftAreaForPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumPrepareDraftAreaForPost200Response</returns>
        public async System.Threading.Tasks.Task<ModForumPrepareDraftAreaForPost200Response> ModForumPrepareDraftAreaForPostAsync(ModForumPrepareDraftAreaForPostRequest modForumPrepareDraftAreaForPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumPrepareDraftAreaForPost200Response> localVarResponse = await ModForumPrepareDraftAreaForPostWithHttpInfoAsync(modForumPrepareDraftAreaForPostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Prepares a draft area for editing a post. Prepares a draft area for editing a post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumPrepareDraftAreaForPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumPrepareDraftAreaForPost200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumPrepareDraftAreaForPost200Response>> ModForumPrepareDraftAreaForPostWithHttpInfoAsync(ModForumPrepareDraftAreaForPostRequest modForumPrepareDraftAreaForPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumPrepareDraftAreaForPostRequest' is set
            if (modForumPrepareDraftAreaForPostRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumPrepareDraftAreaForPostRequest' when calling ModForumApi->ModForumPrepareDraftAreaForPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumPrepareDraftAreaForPostRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumPrepareDraftAreaForPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumPrepareDraftAreaForPost200Response>("/mod_forum_prepare_draft_area_for_post", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumPrepareDraftAreaForPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the lock state for the discussion Set the lock state for the discussion
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetLockStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumSetLockState200Response</returns>
        public ModForumSetLockState200Response ModForumSetLockState(ModForumSetLockStateRequest modForumSetLockStateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumSetLockState200Response> localVarResponse = ModForumSetLockStateWithHttpInfo(modForumSetLockStateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the lock state for the discussion Set the lock state for the discussion
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetLockStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumSetLockState200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumSetLockState200Response> ModForumSetLockStateWithHttpInfo(ModForumSetLockStateRequest modForumSetLockStateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumSetLockStateRequest' is set
            if (modForumSetLockStateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumSetLockStateRequest' when calling ModForumApi->ModForumSetLockState");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumSetLockStateRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumSetLockState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumSetLockState200Response>("/mod_forum_set_lock_state", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumSetLockState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the lock state for the discussion Set the lock state for the discussion
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetLockStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumSetLockState200Response</returns>
        public async System.Threading.Tasks.Task<ModForumSetLockState200Response> ModForumSetLockStateAsync(ModForumSetLockStateRequest modForumSetLockStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumSetLockState200Response> localVarResponse = await ModForumSetLockStateWithHttpInfoAsync(modForumSetLockStateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the lock state for the discussion Set the lock state for the discussion
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetLockStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumSetLockState200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumSetLockState200Response>> ModForumSetLockStateWithHttpInfoAsync(ModForumSetLockStateRequest modForumSetLockStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumSetLockStateRequest' is set
            if (modForumSetLockStateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumSetLockStateRequest' when calling ModForumApi->ModForumSetLockState");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumSetLockStateRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumSetLockState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumSetLockState200Response>("/mod_forum_set_lock_state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumSetLockState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the pin state Set the pin state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetPinStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumSetPinState200Response</returns>
        public ModForumSetPinState200Response ModForumSetPinState(ModForumSetPinStateRequest modForumSetPinStateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumSetPinState200Response> localVarResponse = ModForumSetPinStateWithHttpInfo(modForumSetPinStateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the pin state Set the pin state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetPinStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumSetPinState200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumSetPinState200Response> ModForumSetPinStateWithHttpInfo(ModForumSetPinStateRequest modForumSetPinStateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumSetPinStateRequest' is set
            if (modForumSetPinStateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumSetPinStateRequest' when calling ModForumApi->ModForumSetPinState");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumSetPinStateRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumSetPinState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumSetPinState200Response>("/mod_forum_set_pin_state", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumSetPinState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the pin state Set the pin state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetPinStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumSetPinState200Response</returns>
        public async System.Threading.Tasks.Task<ModForumSetPinState200Response> ModForumSetPinStateAsync(ModForumSetPinStateRequest modForumSetPinStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumSetPinState200Response> localVarResponse = await ModForumSetPinStateWithHttpInfoAsync(modForumSetPinStateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the pin state Set the pin state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetPinStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumSetPinState200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumSetPinState200Response>> ModForumSetPinStateWithHttpInfoAsync(ModForumSetPinStateRequest modForumSetPinStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumSetPinStateRequest' is set
            if (modForumSetPinStateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumSetPinStateRequest' when calling ModForumApi->ModForumSetPinState");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumSetPinStateRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumSetPinState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumSetPinState200Response>("/mod_forum_set_pin_state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumSetPinState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the subscription state Set the subscription state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetSubscriptionStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumSetSubscriptionState200Response</returns>
        public ModForumSetSubscriptionState200Response ModForumSetSubscriptionState(ModForumSetSubscriptionStateRequest modForumSetSubscriptionStateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumSetSubscriptionState200Response> localVarResponse = ModForumSetSubscriptionStateWithHttpInfo(modForumSetSubscriptionStateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the subscription state Set the subscription state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetSubscriptionStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumSetSubscriptionState200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumSetSubscriptionState200Response> ModForumSetSubscriptionStateWithHttpInfo(ModForumSetSubscriptionStateRequest modForumSetSubscriptionStateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumSetSubscriptionStateRequest' is set
            if (modForumSetSubscriptionStateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumSetSubscriptionStateRequest' when calling ModForumApi->ModForumSetSubscriptionState");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumSetSubscriptionStateRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumSetSubscriptionState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumSetSubscriptionState200Response>("/mod_forum_set_subscription_state", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumSetSubscriptionState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set the subscription state Set the subscription state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetSubscriptionStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumSetSubscriptionState200Response</returns>
        public async System.Threading.Tasks.Task<ModForumSetSubscriptionState200Response> ModForumSetSubscriptionStateAsync(ModForumSetSubscriptionStateRequest modForumSetSubscriptionStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumSetSubscriptionState200Response> localVarResponse = await ModForumSetSubscriptionStateWithHttpInfoAsync(modForumSetSubscriptionStateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set the subscription state Set the subscription state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumSetSubscriptionStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumSetSubscriptionState200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumSetSubscriptionState200Response>> ModForumSetSubscriptionStateWithHttpInfoAsync(ModForumSetSubscriptionStateRequest modForumSetSubscriptionStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumSetSubscriptionStateRequest' is set
            if (modForumSetSubscriptionStateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumSetSubscriptionStateRequest' when calling ModForumApi->ModForumSetSubscriptionState");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumSetSubscriptionStateRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumSetSubscriptionState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumSetSubscriptionState200Response>("/mod_forum_set_subscription_state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumSetSubscriptionState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Toggle the favourite state Toggle the favourite state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumToggleFavouriteStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumSetSubscriptionState200Response</returns>
        public ModForumSetSubscriptionState200Response ModForumToggleFavouriteState(ModForumToggleFavouriteStateRequest modForumToggleFavouriteStateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumSetSubscriptionState200Response> localVarResponse = ModForumToggleFavouriteStateWithHttpInfo(modForumToggleFavouriteStateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Toggle the favourite state Toggle the favourite state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumToggleFavouriteStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumSetSubscriptionState200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumSetSubscriptionState200Response> ModForumToggleFavouriteStateWithHttpInfo(ModForumToggleFavouriteStateRequest modForumToggleFavouriteStateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumToggleFavouriteStateRequest' is set
            if (modForumToggleFavouriteStateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumToggleFavouriteStateRequest' when calling ModForumApi->ModForumToggleFavouriteState");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumToggleFavouriteStateRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumToggleFavouriteState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumSetSubscriptionState200Response>("/mod_forum_toggle_favourite_state", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumToggleFavouriteState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Toggle the favourite state Toggle the favourite state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumToggleFavouriteStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumSetSubscriptionState200Response</returns>
        public async System.Threading.Tasks.Task<ModForumSetSubscriptionState200Response> ModForumToggleFavouriteStateAsync(ModForumToggleFavouriteStateRequest modForumToggleFavouriteStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumSetSubscriptionState200Response> localVarResponse = await ModForumToggleFavouriteStateWithHttpInfoAsync(modForumToggleFavouriteStateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Toggle the favourite state Toggle the favourite state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumToggleFavouriteStateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumSetSubscriptionState200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumSetSubscriptionState200Response>> ModForumToggleFavouriteStateWithHttpInfoAsync(ModForumToggleFavouriteStateRequest modForumToggleFavouriteStateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumToggleFavouriteStateRequest' is set
            if (modForumToggleFavouriteStateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumToggleFavouriteStateRequest' when calling ModForumApi->ModForumToggleFavouriteState");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumToggleFavouriteStateRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumToggleFavouriteState";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumSetSubscriptionState200Response>("/mod_forum_toggle_favourite_state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumToggleFavouriteState", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a post or a discussion topic post. Updates a post or a discussion topic post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumUpdateDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModForumUpdateDiscussionPost200Response</returns>
        public ModForumUpdateDiscussionPost200Response ModForumUpdateDiscussionPost(ModForumUpdateDiscussionPostRequest modForumUpdateDiscussionPostRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumUpdateDiscussionPost200Response> localVarResponse = ModForumUpdateDiscussionPostWithHttpInfo(modForumUpdateDiscussionPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a post or a discussion topic post. Updates a post or a discussion topic post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumUpdateDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModForumUpdateDiscussionPost200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModForumUpdateDiscussionPost200Response> ModForumUpdateDiscussionPostWithHttpInfo(ModForumUpdateDiscussionPostRequest modForumUpdateDiscussionPostRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumUpdateDiscussionPostRequest' is set
            if (modForumUpdateDiscussionPostRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumUpdateDiscussionPostRequest' when calling ModForumApi->ModForumUpdateDiscussionPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumUpdateDiscussionPostRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumUpdateDiscussionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModForumUpdateDiscussionPost200Response>("/mod_forum_update_discussion_post", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumUpdateDiscussionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a post or a discussion topic post. Updates a post or a discussion topic post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumUpdateDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModForumUpdateDiscussionPost200Response</returns>
        public async System.Threading.Tasks.Task<ModForumUpdateDiscussionPost200Response> ModForumUpdateDiscussionPostAsync(ModForumUpdateDiscussionPostRequest modForumUpdateDiscussionPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModForumUpdateDiscussionPost200Response> localVarResponse = await ModForumUpdateDiscussionPostWithHttpInfoAsync(modForumUpdateDiscussionPostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a post or a discussion topic post. Updates a post or a discussion topic post.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumUpdateDiscussionPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModForumUpdateDiscussionPost200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModForumUpdateDiscussionPost200Response>> ModForumUpdateDiscussionPostWithHttpInfoAsync(ModForumUpdateDiscussionPostRequest modForumUpdateDiscussionPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumUpdateDiscussionPostRequest' is set
            if (modForumUpdateDiscussionPostRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumUpdateDiscussionPostRequest' when calling ModForumApi->ModForumUpdateDiscussionPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumUpdateDiscussionPostRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumUpdateDiscussionPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModForumUpdateDiscussionPost200Response>("/mod_forum_update_discussion_post", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumUpdateDiscussionPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModForumViewForum(ModForumViewForumRequest modForumViewForumRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModForumViewForumWithHttpInfo(modForumViewForumRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModForumViewForumWithHttpInfo(ModForumViewForumRequest modForumViewForumRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumViewForumRequest' is set
            if (modForumViewForumRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumViewForumRequest' when calling ModForumApi->ModForumViewForum");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumViewForumRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumViewForum";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_forum_view_forum", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumViewForum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModForumViewForumAsync(ModForumViewForumRequest modForumViewForumRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModForumViewForumWithHttpInfoAsync(modForumViewForumRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModForumViewForumWithHttpInfoAsync(ModForumViewForumRequest modForumViewForumRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumViewForumRequest' is set
            if (modForumViewForumRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumViewForumRequest' when calling ModForumApi->ModForumViewForum");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumViewForumRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumViewForum";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_forum_view_forum", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumViewForum", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the forum discussion viewed event. Trigger the forum discussion viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModForumViewForumDiscussion(ModForumViewForumDiscussionRequest modForumViewForumDiscussionRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModForumViewForumDiscussionWithHttpInfo(modForumViewForumDiscussionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the forum discussion viewed event. Trigger the forum discussion viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModForumViewForumDiscussionWithHttpInfo(ModForumViewForumDiscussionRequest modForumViewForumDiscussionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modForumViewForumDiscussionRequest' is set
            if (modForumViewForumDiscussionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumViewForumDiscussionRequest' when calling ModForumApi->ModForumViewForumDiscussion");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumViewForumDiscussionRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumViewForumDiscussion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_forum_view_forum_discussion", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumViewForumDiscussion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the forum discussion viewed event. Trigger the forum discussion viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModForumViewForumDiscussionAsync(ModForumViewForumDiscussionRequest modForumViewForumDiscussionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModForumViewForumDiscussionWithHttpInfoAsync(modForumViewForumDiscussionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the forum discussion viewed event. Trigger the forum discussion viewed event.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modForumViewForumDiscussionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModForumViewForumDiscussionWithHttpInfoAsync(ModForumViewForumDiscussionRequest modForumViewForumDiscussionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modForumViewForumDiscussionRequest' is set
            if (modForumViewForumDiscussionRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'modForumViewForumDiscussionRequest' when calling ModForumApi->ModForumViewForumDiscussion");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modForumViewForumDiscussionRequest;

            localVarRequestOptions.Operation = "ModForumApi.ModForumViewForumDiscussion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_forum_view_forum_discussion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModForumViewForumDiscussion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
