/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using MoodleClient.Model;
using MoodleClient.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace MoodleClient.Test.Model
{
    /// <summary>
    ///  Class for testing ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInnerTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner
        //private ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner instance;

        public ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInnerTests()
        {
            // TODO uncomment below to create an instance of ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner
            //instance = new ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner
        /// </summary>
        [Fact]
        public void ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInnerInstanceTest()
        {
            // TODO uncomment below to test "IsType" ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner
            //Assert.IsType<ToolLpDataForTemplateCompetenciesPage200ResponseCompetenciesInner>(instance);
        }

        /// <summary>
        /// Test the property 'Competency'
        /// </summary>
        [Fact]
        public void CompetencyTest()
        {
            // TODO unit test for the property 'Competency'
        }

        /// <summary>
        /// Test the property 'Comppath'
        /// </summary>
        [Fact]
        public void ComppathTest()
        {
            // TODO unit test for the property 'Comppath'
        }

        /// <summary>
        /// Test the property 'Framework'
        /// </summary>
        [Fact]
        public void FrameworkTest()
        {
            // TODO unit test for the property 'Framework'
        }

        /// <summary>
        /// Test the property 'Hascourses'
        /// </summary>
        [Fact]
        public void HascoursesTest()
        {
            // TODO unit test for the property 'Hascourses'
        }

        /// <summary>
        /// Test the property 'Hasrelatedcompetencies'
        /// </summary>
        [Fact]
        public void HasrelatedcompetenciesTest()
        {
            // TODO unit test for the property 'Hasrelatedcompetencies'
        }

        /// <summary>
        /// Test the property 'Linkedcourses'
        /// </summary>
        [Fact]
        public void LinkedcoursesTest()
        {
            // TODO unit test for the property 'Linkedcourses'
        }

        /// <summary>
        /// Test the property 'Pluginbaseurl'
        /// </summary>
        [Fact]
        public void PluginbaseurlTest()
        {
            // TODO unit test for the property 'Pluginbaseurl'
        }

        /// <summary>
        /// Test the property 'Relatedcompetencies'
        /// </summary>
        [Fact]
        public void RelatedcompetenciesTest()
        {
            // TODO unit test for the property 'Relatedcompetencies'
        }

        /// <summary>
        /// Test the property 'Scaleconfiguration'
        /// </summary>
        [Fact]
        public void ScaleconfigurationTest()
        {
            // TODO unit test for the property 'Scaleconfiguration'
        }

        /// <summary>
        /// Test the property 'Scaleid'
        /// </summary>
        [Fact]
        public void ScaleidTest()
        {
            // TODO unit test for the property 'Scaleid'
        }

        /// <summary>
        /// Test the property 'Taxonomyterm'
        /// </summary>
        [Fact]
        public void TaxonomytermTest()
        {
            // TODO unit test for the property 'Taxonomyterm'
        }
    }
}
