/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using MoodleClient.Client;
using MoodleClient.Api;
// uncomment below to import models
//using MoodleClient.Model;

namespace MoodleClient.Test.Api
{
    /// <summary>
    ///  Class for testing ModQuizApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ModQuizApiTests : IDisposable
    {
        private ModQuizApi instance;

        public ModQuizApiTests()
        {
            instance = new ModQuizApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ModQuizApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ModQuizApi
            //Assert.IsType<ModQuizApi>(instance);
        }

        /// <summary>
        /// Test ModQuizAddRandomQuestions
        /// </summary>
        [Fact]
        public void ModQuizAddRandomQuestionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest = null;
            //var response = instance.ModQuizAddRandomQuestions(modQuizAddRandomQuestionsRequest);
            //Assert.IsType<ModQuizAddRandomQuestions200Response>(response);
        }

        /// <summary>
        /// Test ModQuizGetAttemptAccessInformation
        /// </summary>
        [Fact]
        public void ModQuizGetAttemptAccessInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizGetAttemptAccessInformationRequest modQuizGetAttemptAccessInformationRequest = null;
            //var response = instance.ModQuizGetAttemptAccessInformation(modQuizGetAttemptAccessInformationRequest);
            //Assert.IsType<ModQuizGetAttemptAccessInformation200Response>(response);
        }

        /// <summary>
        /// Test ModQuizGetAttemptData
        /// </summary>
        [Fact]
        public void ModQuizGetAttemptDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizGetAttemptDataRequest modQuizGetAttemptDataRequest = null;
            //var response = instance.ModQuizGetAttemptData(modQuizGetAttemptDataRequest);
            //Assert.IsType<ModQuizGetAttemptData200Response>(response);
        }

        /// <summary>
        /// Test ModQuizGetAttemptReview
        /// </summary>
        [Fact]
        public void ModQuizGetAttemptReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizGetAttemptReviewRequest modQuizGetAttemptReviewRequest = null;
            //var response = instance.ModQuizGetAttemptReview(modQuizGetAttemptReviewRequest);
            //Assert.IsType<ModQuizGetAttemptReview200Response>(response);
        }

        /// <summary>
        /// Test ModQuizGetAttemptSummary
        /// </summary>
        [Fact]
        public void ModQuizGetAttemptSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest = null;
            //var response = instance.ModQuizGetAttemptSummary(modQuizGetAttemptSummaryRequest);
            //Assert.IsType<ModQuizGetAttemptSummary200Response>(response);
        }

        /// <summary>
        /// Test ModQuizGetCombinedReviewOptions
        /// </summary>
        [Fact]
        public void ModQuizGetCombinedReviewOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizGetCombinedReviewOptionsRequest modQuizGetCombinedReviewOptionsRequest = null;
            //var response = instance.ModQuizGetCombinedReviewOptions(modQuizGetCombinedReviewOptionsRequest);
            //Assert.IsType<ModQuizGetCombinedReviewOptions200Response>(response);
        }

        /// <summary>
        /// Test ModQuizGetQuizAccessInformation
        /// </summary>
        [Fact]
        public void ModQuizGetQuizAccessInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest = null;
            //var response = instance.ModQuizGetQuizAccessInformation(modQuizGetQuizAccessInformationRequest);
            //Assert.IsType<ModQuizGetQuizAccessInformation200Response>(response);
        }

        /// <summary>
        /// Test ModQuizGetQuizFeedbackForGrade
        /// </summary>
        [Fact]
        public void ModQuizGetQuizFeedbackForGradeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizGetQuizFeedbackForGradeRequest modQuizGetQuizFeedbackForGradeRequest = null;
            //var response = instance.ModQuizGetQuizFeedbackForGrade(modQuizGetQuizFeedbackForGradeRequest);
            //Assert.IsType<ModQuizGetQuizFeedbackForGrade200Response>(response);
        }

        /// <summary>
        /// Test ModQuizGetQuizRequiredQtypes
        /// </summary>
        [Fact]
        public void ModQuizGetQuizRequiredQtypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest = null;
            //var response = instance.ModQuizGetQuizRequiredQtypes(modQuizGetQuizAccessInformationRequest);
            //Assert.IsType<ModQuizGetQuizRequiredQtypes200Response>(response);
        }

        /// <summary>
        /// Test ModQuizGetQuizzesByCourses
        /// </summary>
        [Fact]
        public void ModQuizGetQuizzesByCoursesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest = null;
            //var response = instance.ModQuizGetQuizzesByCourses(modChatGetChatsByCoursesRequest);
            //Assert.IsType<ModQuizGetQuizzesByCourses200Response>(response);
        }

        /// <summary>
        /// Test ModQuizGetReopenAttemptConfirmation
        /// </summary>
        [Fact]
        public void ModQuizGetReopenAttemptConfirmationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizGetReopenAttemptConfirmationRequest modQuizGetReopenAttemptConfirmationRequest = null;
            //var response = instance.ModQuizGetReopenAttemptConfirmation(modQuizGetReopenAttemptConfirmationRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ModQuizGetUserAttempts
        /// </summary>
        [Fact]
        public void ModQuizGetUserAttemptsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizGetUserAttemptsRequest modQuizGetUserAttemptsRequest = null;
            //var response = instance.ModQuizGetUserAttempts(modQuizGetUserAttemptsRequest);
            //Assert.IsType<ModQuizGetUserAttempts200Response>(response);
        }

        /// <summary>
        /// Test ModQuizGetUserBestGrade
        /// </summary>
        [Fact]
        public void ModQuizGetUserBestGradeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizGetUserBestGradeRequest modQuizGetUserBestGradeRequest = null;
            //var response = instance.ModQuizGetUserBestGrade(modQuizGetUserBestGradeRequest);
            //Assert.IsType<ModQuizGetUserBestGrade200Response>(response);
        }

        /// <summary>
        /// Test ModQuizProcessAttempt
        /// </summary>
        [Fact]
        public void ModQuizProcessAttemptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizProcessAttemptRequest modQuizProcessAttemptRequest = null;
            //var response = instance.ModQuizProcessAttempt(modQuizProcessAttemptRequest);
            //Assert.IsType<ModQuizProcessAttempt200Response>(response);
        }

        /// <summary>
        /// Test ModQuizReopenAttempt
        /// </summary>
        [Fact]
        public void ModQuizReopenAttemptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizReopenAttemptRequest modQuizReopenAttemptRequest = null;
            //var response = instance.ModQuizReopenAttempt(modQuizReopenAttemptRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ModQuizSaveAttempt
        /// </summary>
        [Fact]
        public void ModQuizSaveAttemptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizSaveAttemptRequest modQuizSaveAttemptRequest = null;
            //var response = instance.ModQuizSaveAttempt(modQuizSaveAttemptRequest);
            //Assert.IsType<CoreCalendarDeleteSubscription200Response>(response);
        }

        /// <summary>
        /// Test ModQuizSetQuestionVersion
        /// </summary>
        [Fact]
        public void ModQuizSetQuestionVersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizSetQuestionVersionRequest modQuizSetQuestionVersionRequest = null;
            //var response = instance.ModQuizSetQuestionVersion(modQuizSetQuestionVersionRequest);
            //Assert.IsType<ModQuizSetQuestionVersion200Response>(response);
        }

        /// <summary>
        /// Test ModQuizStartAttempt
        /// </summary>
        [Fact]
        public void ModQuizStartAttemptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizStartAttemptRequest modQuizStartAttemptRequest = null;
            //var response = instance.ModQuizStartAttempt(modQuizStartAttemptRequest);
            //Assert.IsType<ModQuizStartAttempt200Response>(response);
        }

        /// <summary>
        /// Test ModQuizUpdateFilterCondition
        /// </summary>
        [Fact]
        public void ModQuizUpdateFilterConditionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizUpdateFilterConditionRequest modQuizUpdateFilterConditionRequest = null;
            //var response = instance.ModQuizUpdateFilterCondition(modQuizUpdateFilterConditionRequest);
            //Assert.IsType<ModQuizAddRandomQuestions200Response>(response);
        }

        /// <summary>
        /// Test ModQuizViewAttempt
        /// </summary>
        [Fact]
        public void ModQuizViewAttemptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizViewAttemptRequest modQuizViewAttemptRequest = null;
            //var response = instance.ModQuizViewAttempt(modQuizViewAttemptRequest);
            //Assert.IsType<CoreCalendarDeleteSubscription200Response>(response);
        }

        /// <summary>
        /// Test ModQuizViewAttemptReview
        /// </summary>
        [Fact]
        public void ModQuizViewAttemptReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizViewAttemptReviewRequest modQuizViewAttemptReviewRequest = null;
            //var response = instance.ModQuizViewAttemptReview(modQuizViewAttemptReviewRequest);
            //Assert.IsType<CoreCalendarDeleteSubscription200Response>(response);
        }

        /// <summary>
        /// Test ModQuizViewAttemptSummary
        /// </summary>
        [Fact]
        public void ModQuizViewAttemptSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest = null;
            //var response = instance.ModQuizViewAttemptSummary(modQuizGetAttemptSummaryRequest);
            //Assert.IsType<CoreCalendarDeleteSubscription200Response>(response);
        }

        /// <summary>
        /// Test ModQuizViewQuiz
        /// </summary>
        [Fact]
        public void ModQuizViewQuizTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest = null;
            //var response = instance.ModQuizViewQuiz(modQuizGetQuizAccessInformationRequest);
            //Assert.IsType<CoreCalendarDeleteSubscription200Response>(response);
        }
    }
}
