/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using MoodleClient.Client;
using MoodleClient.Api;
// uncomment below to import models
//using MoodleClient.Model;

namespace MoodleClient.Test.Api
{
    /// <summary>
    ///  Class for testing ToolLpApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ToolLpApiTests : IDisposable
    {
        private ToolLpApi instance;

        public ToolLpApiTests()
        {
            instance = new ToolLpApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ToolLpApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ToolLpApi
            //Assert.IsType<ToolLpApi>(instance);
        }

        /// <summary>
        /// Test ToolLpDataForCompetenciesManagePage
        /// </summary>
        [Fact]
        public void ToolLpDataForCompetenciesManagePageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolLpDataForCompetenciesManagePageRequest toolLpDataForCompetenciesManagePageRequest = null;
            //var response = instance.ToolLpDataForCompetenciesManagePage(toolLpDataForCompetenciesManagePageRequest);
            //Assert.IsType<ToolLpDataForCompetenciesManagePage200Response>(response);
        }

        /// <summary>
        /// Test ToolLpDataForCompetencyFrameworksManagePage
        /// </summary>
        [Fact]
        public void ToolLpDataForCompetencyFrameworksManagePageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest = null;
            //var response = instance.ToolLpDataForCompetencyFrameworksManagePage(toolLpDataForCompetencyFrameworksManagePageRequest);
            //Assert.IsType<ToolLpDataForCompetencyFrameworksManagePage200Response>(response);
        }

        /// <summary>
        /// Test ToolLpDataForCompetencySummary
        /// </summary>
        [Fact]
        public void ToolLpDataForCompetencySummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolLpDataForCompetencySummaryRequest toolLpDataForCompetencySummaryRequest = null;
            //var response = instance.ToolLpDataForCompetencySummary(toolLpDataForCompetencySummaryRequest);
            //Assert.IsType<ToolLpDataForCompetencySummary200Response>(response);
        }

        /// <summary>
        /// Test ToolLpDataForCourseCompetenciesPage
        /// </summary>
        [Fact]
        public void ToolLpDataForCourseCompetenciesPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolLpDataForCourseCompetenciesPageRequest toolLpDataForCourseCompetenciesPageRequest = null;
            //var response = instance.ToolLpDataForCourseCompetenciesPage(toolLpDataForCourseCompetenciesPageRequest);
            //Assert.IsType<ToolLpDataForCourseCompetenciesPage200Response>(response);
        }

        /// <summary>
        /// Test ToolLpDataForPlanPage
        /// </summary>
        [Fact]
        public void ToolLpDataForPlanPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest = null;
            //var response = instance.ToolLpDataForPlanPage(coreCompetencyCompletePlanRequest);
            //Assert.IsType<ToolLpDataForPlanPage200Response>(response);
        }

        /// <summary>
        /// Test ToolLpDataForPlansPage
        /// </summary>
        [Fact]
        public void ToolLpDataForPlansPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolLpDataForPlansPageRequest toolLpDataForPlansPageRequest = null;
            //var response = instance.ToolLpDataForPlansPage(toolLpDataForPlansPageRequest);
            //Assert.IsType<ToolLpDataForPlansPage200Response>(response);
        }

        /// <summary>
        /// Test ToolLpDataForRelatedCompetenciesSection
        /// </summary>
        [Fact]
        public void ToolLpDataForRelatedCompetenciesSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolLpDataForRelatedCompetenciesSectionRequest toolLpDataForRelatedCompetenciesSectionRequest = null;
            //var response = instance.ToolLpDataForRelatedCompetenciesSection(toolLpDataForRelatedCompetenciesSectionRequest);
            //Assert.IsType<ToolLpDataForRelatedCompetenciesSection200Response>(response);
        }

        /// <summary>
        /// Test ToolLpDataForTemplateCompetenciesPage
        /// </summary>
        [Fact]
        public void ToolLpDataForTemplateCompetenciesPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolLpDataForTemplateCompetenciesPageRequest toolLpDataForTemplateCompetenciesPageRequest = null;
            //var response = instance.ToolLpDataForTemplateCompetenciesPage(toolLpDataForTemplateCompetenciesPageRequest);
            //Assert.IsType<ToolLpDataForTemplateCompetenciesPage200Response>(response);
        }

        /// <summary>
        /// Test ToolLpDataForTemplatesManagePage
        /// </summary>
        [Fact]
        public void ToolLpDataForTemplatesManagePageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolLpDataForCompetencyFrameworksManagePageRequest toolLpDataForCompetencyFrameworksManagePageRequest = null;
            //var response = instance.ToolLpDataForTemplatesManagePage(toolLpDataForCompetencyFrameworksManagePageRequest);
            //Assert.IsType<ToolLpDataForTemplatesManagePage200Response>(response);
        }

        /// <summary>
        /// Test ToolLpDataForUserCompetencySummary
        /// </summary>
        [Fact]
        public void ToolLpDataForUserCompetencySummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolLpDataForUserCompetencySummaryRequest toolLpDataForUserCompetencySummaryRequest = null;
            //var response = instance.ToolLpDataForUserCompetencySummary(toolLpDataForUserCompetencySummaryRequest);
            //Assert.IsType<ToolLpDataForUserCompetencySummary200Response>(response);
        }

        /// <summary>
        /// Test ToolLpDataForUserCompetencySummaryInCourse
        /// </summary>
        [Fact]
        public void ToolLpDataForUserCompetencySummaryInCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolLpDataForUserCompetencySummaryInCourseRequest toolLpDataForUserCompetencySummaryInCourseRequest = null;
            //var response = instance.ToolLpDataForUserCompetencySummaryInCourse(toolLpDataForUserCompetencySummaryInCourseRequest);
            //Assert.IsType<ToolLpDataForUserCompetencySummaryInCourse200Response>(response);
        }

        /// <summary>
        /// Test ToolLpDataForUserCompetencySummaryInPlan
        /// </summary>
        [Fact]
        public void ToolLpDataForUserCompetencySummaryInPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolLpDataForUserCompetencySummaryInPlanRequest toolLpDataForUserCompetencySummaryInPlanRequest = null;
            //var response = instance.ToolLpDataForUserCompetencySummaryInPlan(toolLpDataForUserCompetencySummaryInPlanRequest);
            //Assert.IsType<ToolLpDataForUserCompetencySummaryInPlan200Response>(response);
        }

        /// <summary>
        /// Test ToolLpDataForUserEvidenceListPage
        /// </summary>
        [Fact]
        public void ToolLpDataForUserEvidenceListPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolLpDataForUserEvidenceListPageRequest toolLpDataForUserEvidenceListPageRequest = null;
            //var response = instance.ToolLpDataForUserEvidenceListPage(toolLpDataForUserEvidenceListPageRequest);
            //Assert.IsType<ToolLpDataForUserEvidenceListPage200Response>(response);
        }

        /// <summary>
        /// Test ToolLpDataForUserEvidencePage
        /// </summary>
        [Fact]
        public void ToolLpDataForUserEvidencePageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolLpDataForUserEvidencePageRequest toolLpDataForUserEvidencePageRequest = null;
            //var response = instance.ToolLpDataForUserEvidencePage(toolLpDataForUserEvidencePageRequest);
            //Assert.IsType<ToolLpDataForUserEvidencePage200Response>(response);
        }

        /// <summary>
        /// Test ToolLpListCoursesUsingCompetency
        /// </summary>
        [Fact]
        public void ToolLpListCoursesUsingCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest = null;
            //var response = instance.ToolLpListCoursesUsingCompetency(coreCompetencyCompetencyViewedRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ToolLpSearchCohorts
        /// </summary>
        [Fact]
        public void ToolLpSearchCohortsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolLpSearchCohortsRequest toolLpSearchCohortsRequest = null;
            //var response = instance.ToolLpSearchCohorts(toolLpSearchCohortsRequest);
            //Assert.IsType<ToolLpSearchCohorts200Response>(response);
        }

        /// <summary>
        /// Test ToolLpSearchUsers
        /// </summary>
        [Fact]
        public void ToolLpSearchUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ToolLpSearchUsersRequest toolLpSearchUsersRequest = null;
            //var response = instance.ToolLpSearchUsers(toolLpSearchUsersRequest);
            //Assert.IsType<ToolLpSearchUsers200Response>(response);
        }
    }
}
