/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using MoodleClient.Client;
using MoodleClient.Api;
// uncomment below to import models
//using MoodleClient.Model;

namespace MoodleClient.Test.Api
{
    /// <summary>
    ///  Class for testing MoodleApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MoodleApiTests : IDisposable
    {
        private MoodleApi instance;

        public MoodleApiTests()
        {
            instance = new MoodleApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MoodleApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MoodleApi
            //Assert.IsType<MoodleApi>(instance);
        }

        /// <summary>
        /// Test CoreAdminSetBlockProtection
        /// </summary>
        [Fact]
        public void CoreAdminSetBlockProtectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreAdminSetBlockProtectionRequest coreAdminSetBlockProtectionRequest = null;
            //var response = instance.CoreAdminSetBlockProtection(coreAdminSetBlockProtectionRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreAdminSetPluginOrder
        /// </summary>
        [Fact]
        public void CoreAdminSetPluginOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreAdminSetPluginOrderRequest coreAdminSetPluginOrderRequest = null;
            //var response = instance.CoreAdminSetPluginOrder(coreAdminSetPluginOrderRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreAdminSetPluginState
        /// </summary>
        [Fact]
        public void CoreAdminSetPluginStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreAdminSetPluginStateRequest coreAdminSetPluginStateRequest = null;
            //var response = instance.CoreAdminSetPluginState(coreAdminSetPluginStateRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreAuthConfirmUser
        /// </summary>
        [Fact]
        public void CoreAuthConfirmUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreAuthConfirmUserRequest coreAuthConfirmUserRequest = null;
            //var response = instance.CoreAuthConfirmUser(coreAuthConfirmUserRequest);
            //Assert.IsType<CoreAuthConfirmUser200Response>(response);
        }

        /// <summary>
        /// Test CoreAuthIsAgeDigitalConsentVerificationEnabled
        /// </summary>
        [Fact]
        public void CoreAuthIsAgeDigitalConsentVerificationEnabledTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CoreAuthIsAgeDigitalConsentVerificationEnabled();
            //Assert.IsType<CoreAuthIsAgeDigitalConsentVerificationEnabled200Response>(response);
        }

        /// <summary>
        /// Test CoreAuthIsMinor
        /// </summary>
        [Fact]
        public void CoreAuthIsMinorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreAuthIsMinorRequest coreAuthIsMinorRequest = null;
            //var response = instance.CoreAuthIsMinor(coreAuthIsMinorRequest);
            //Assert.IsType<CoreAuthIsMinor200Response>(response);
        }

        /// <summary>
        /// Test CoreAuthRequestPasswordReset
        /// </summary>
        [Fact]
        public void CoreAuthRequestPasswordResetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreAuthRequestPasswordResetRequest coreAuthRequestPasswordResetRequest = null;
            //var response = instance.CoreAuthRequestPasswordReset(coreAuthRequestPasswordResetRequest);
            //Assert.IsType<CoreAuthRequestPasswordReset200Response>(response);
        }

        /// <summary>
        /// Test CoreAuthResendConfirmationEmail
        /// </summary>
        [Fact]
        public void CoreAuthResendConfirmationEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreAuthResendConfirmationEmailRequest coreAuthResendConfirmationEmailRequest = null;
            //var response = instance.CoreAuthResendConfirmationEmail(coreAuthResendConfirmationEmailRequest);
            //Assert.IsType<CoreAuthResendConfirmationEmail200Response>(response);
        }

        /// <summary>
        /// Test CoreBackupGetAsyncBackupLinksBackup
        /// </summary>
        [Fact]
        public void CoreBackupGetAsyncBackupLinksBackupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreBackupGetAsyncBackupLinksBackupRequest coreBackupGetAsyncBackupLinksBackupRequest = null;
            //var response = instance.CoreBackupGetAsyncBackupLinksBackup(coreBackupGetAsyncBackupLinksBackupRequest);
            //Assert.IsType<CoreBackupGetAsyncBackupLinksBackup200Response>(response);
        }

        /// <summary>
        /// Test CoreBackupGetAsyncBackupLinksRestore
        /// </summary>
        [Fact]
        public void CoreBackupGetAsyncBackupLinksRestoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreBackupGetAsyncBackupLinksRestoreRequest coreBackupGetAsyncBackupLinksRestoreRequest = null;
            //var response = instance.CoreBackupGetAsyncBackupLinksRestore(coreBackupGetAsyncBackupLinksRestoreRequest);
            //Assert.IsType<CoreBackupGetAsyncBackupLinksRestore200Response>(response);
        }

        /// <summary>
        /// Test CoreBackupGetAsyncBackupProgress
        /// </summary>
        [Fact]
        public void CoreBackupGetAsyncBackupProgressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreBackupGetAsyncBackupProgressRequest coreBackupGetAsyncBackupProgressRequest = null;
            //var response = instance.CoreBackupGetAsyncBackupProgress(coreBackupGetAsyncBackupProgressRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreBackupGetCopyProgress
        /// </summary>
        [Fact]
        public void CoreBackupGetCopyProgressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreBackupGetCopyProgressRequest coreBackupGetCopyProgressRequest = null;
            //var response = instance.CoreBackupGetCopyProgress(coreBackupGetCopyProgressRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreBackupSubmitCopyForm
        /// </summary>
        [Fact]
        public void CoreBackupSubmitCopyFormTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreBackupSubmitCopyFormRequest coreBackupSubmitCopyFormRequest = null;
            //var response = instance.CoreBackupSubmitCopyForm(coreBackupSubmitCopyFormRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreBadgesGetUserBadgeByHash
        /// </summary>
        [Fact]
        public void CoreBadgesGetUserBadgeByHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreBadgesGetUserBadgeByHashRequest coreBadgesGetUserBadgeByHashRequest = null;
            //var response = instance.CoreBadgesGetUserBadgeByHash(coreBadgesGetUserBadgeByHashRequest);
            //Assert.IsType<CoreBadgesGetUserBadgeByHash200Response>(response);
        }

        /// <summary>
        /// Test CoreBadgesGetUserBadges
        /// </summary>
        [Fact]
        public void CoreBadgesGetUserBadgesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreBadgesGetUserBadgesRequest coreBadgesGetUserBadgesRequest = null;
            //var response = instance.CoreBadgesGetUserBadges(coreBadgesGetUserBadgesRequest);
            //Assert.IsType<CoreBadgesGetUserBadges200Response>(response);
        }

        /// <summary>
        /// Test CoreBlockFetchAddableBlocks
        /// </summary>
        [Fact]
        public void CoreBlockFetchAddableBlocksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreBlockFetchAddableBlocksRequest coreBlockFetchAddableBlocksRequest = null;
            //var response = instance.CoreBlockFetchAddableBlocks(coreBlockFetchAddableBlocksRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreBlockGetCourseBlocks
        /// </summary>
        [Fact]
        public void CoreBlockGetCourseBlocksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreBlockGetCourseBlocksRequest coreBlockGetCourseBlocksRequest = null;
            //var response = instance.CoreBlockGetCourseBlocks(coreBlockGetCourseBlocksRequest);
            //Assert.IsType<CoreBlockGetCourseBlocks200Response>(response);
        }

        /// <summary>
        /// Test CoreBlockGetDashboardBlocks
        /// </summary>
        [Fact]
        public void CoreBlockGetDashboardBlocksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreBlockGetDashboardBlocksRequest coreBlockGetDashboardBlocksRequest = null;
            //var response = instance.CoreBlockGetDashboardBlocks(coreBlockGetDashboardBlocksRequest);
            //Assert.IsType<CoreBlockGetDashboardBlocks200Response>(response);
        }

        /// <summary>
        /// Test CoreBlogGetEntries
        /// </summary>
        [Fact]
        public void CoreBlogGetEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreBlogGetEntriesRequest coreBlogGetEntriesRequest = null;
            //var response = instance.CoreBlogGetEntries(coreBlogGetEntriesRequest);
            //Assert.IsType<CoreBlogGetEntries200Response>(response);
        }

        /// <summary>
        /// Test CoreBlogViewEntries
        /// </summary>
        [Fact]
        public void CoreBlogViewEntriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreBlogViewEntriesRequest coreBlogViewEntriesRequest = null;
            //var response = instance.CoreBlogViewEntries(coreBlogViewEntriesRequest);
            //Assert.IsType<CoreBlogViewEntries200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarCreateCalendarEvents
        /// </summary>
        [Fact]
        public void CoreCalendarCreateCalendarEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarCreateCalendarEventsRequest coreCalendarCreateCalendarEventsRequest = null;
            //var response = instance.CoreCalendarCreateCalendarEvents(coreCalendarCreateCalendarEventsRequest);
            //Assert.IsType<CoreCalendarCreateCalendarEvents200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarDeleteCalendarEvents
        /// </summary>
        [Fact]
        public void CoreCalendarDeleteCalendarEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarDeleteCalendarEventsRequest coreCalendarDeleteCalendarEventsRequest = null;
            //var response = instance.CoreCalendarDeleteCalendarEvents(coreCalendarDeleteCalendarEventsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCalendarDeleteSubscription
        /// </summary>
        [Fact]
        public void CoreCalendarDeleteSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarDeleteSubscriptionRequest coreCalendarDeleteSubscriptionRequest = null;
            //var response = instance.CoreCalendarDeleteSubscription(coreCalendarDeleteSubscriptionRequest);
            //Assert.IsType<CoreCalendarDeleteSubscription200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarGetActionEventsByCourse
        /// </summary>
        [Fact]
        public void CoreCalendarGetActionEventsByCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarGetActionEventsByCourseRequest coreCalendarGetActionEventsByCourseRequest = null;
            //var response = instance.CoreCalendarGetActionEventsByCourse(coreCalendarGetActionEventsByCourseRequest);
            //Assert.IsType<CoreCalendarGetActionEventsByCourse200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarGetActionEventsByCourses
        /// </summary>
        [Fact]
        public void CoreCalendarGetActionEventsByCoursesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarGetActionEventsByCoursesRequest coreCalendarGetActionEventsByCoursesRequest = null;
            //var response = instance.CoreCalendarGetActionEventsByCourses(coreCalendarGetActionEventsByCoursesRequest);
            //Assert.IsType<CoreCalendarGetActionEventsByCourses200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarGetActionEventsByTimesort
        /// </summary>
        [Fact]
        public void CoreCalendarGetActionEventsByTimesortTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarGetActionEventsByTimesortRequest coreCalendarGetActionEventsByTimesortRequest = null;
            //var response = instance.CoreCalendarGetActionEventsByTimesort(coreCalendarGetActionEventsByTimesortRequest);
            //Assert.IsType<CoreCalendarGetActionEventsByTimesort200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarGetAllowedEventTypes
        /// </summary>
        [Fact]
        public void CoreCalendarGetAllowedEventTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarGetAllowedEventTypesRequest coreCalendarGetAllowedEventTypesRequest = null;
            //var response = instance.CoreCalendarGetAllowedEventTypes(coreCalendarGetAllowedEventTypesRequest);
            //Assert.IsType<CoreCalendarGetAllowedEventTypes200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarGetCalendarAccessInformation
        /// </summary>
        [Fact]
        public void CoreCalendarGetCalendarAccessInformationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarGetCalendarAccessInformationRequest coreCalendarGetCalendarAccessInformationRequest = null;
            //var response = instance.CoreCalendarGetCalendarAccessInformation(coreCalendarGetCalendarAccessInformationRequest);
            //Assert.IsType<CoreCalendarGetCalendarAccessInformation200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarGetCalendarDayView
        /// </summary>
        [Fact]
        public void CoreCalendarGetCalendarDayViewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarGetCalendarDayViewRequest coreCalendarGetCalendarDayViewRequest = null;
            //var response = instance.CoreCalendarGetCalendarDayView(coreCalendarGetCalendarDayViewRequest);
            //Assert.IsType<CoreCalendarGetCalendarDayView200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarGetCalendarEventById
        /// </summary>
        [Fact]
        public void CoreCalendarGetCalendarEventByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarGetCalendarEventByIdRequest coreCalendarGetCalendarEventByIdRequest = null;
            //var response = instance.CoreCalendarGetCalendarEventById(coreCalendarGetCalendarEventByIdRequest);
            //Assert.IsType<CoreCalendarGetCalendarEventById200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarGetCalendarEvents
        /// </summary>
        [Fact]
        public void CoreCalendarGetCalendarEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarGetCalendarEventsRequest coreCalendarGetCalendarEventsRequest = null;
            //var response = instance.CoreCalendarGetCalendarEvents(coreCalendarGetCalendarEventsRequest);
            //Assert.IsType<CoreCalendarGetCalendarEvents200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarGetCalendarExportToken
        /// </summary>
        [Fact]
        public void CoreCalendarGetCalendarExportTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CoreCalendarGetCalendarExportToken();
            //Assert.IsType<CoreCalendarGetCalendarExportToken200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarGetCalendarMonthlyView
        /// </summary>
        [Fact]
        public void CoreCalendarGetCalendarMonthlyViewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarGetCalendarMonthlyViewRequest coreCalendarGetCalendarMonthlyViewRequest = null;
            //var response = instance.CoreCalendarGetCalendarMonthlyView(coreCalendarGetCalendarMonthlyViewRequest);
            //Assert.IsType<CoreCalendarGetCalendarMonthlyView200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarGetCalendarUpcomingView
        /// </summary>
        [Fact]
        public void CoreCalendarGetCalendarUpcomingViewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarGetCalendarUpcomingViewRequest coreCalendarGetCalendarUpcomingViewRequest = null;
            //var response = instance.CoreCalendarGetCalendarUpcomingView(coreCalendarGetCalendarUpcomingViewRequest);
            //Assert.IsType<CoreCalendarGetCalendarUpcomingView200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarGetTimestamps
        /// </summary>
        [Fact]
        public void CoreCalendarGetTimestampsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarGetTimestampsRequest coreCalendarGetTimestampsRequest = null;
            //var response = instance.CoreCalendarGetTimestamps(coreCalendarGetTimestampsRequest);
            //Assert.IsType<CoreCalendarGetTimestamps200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarSubmitCreateUpdateForm
        /// </summary>
        [Fact]
        public void CoreCalendarSubmitCreateUpdateFormTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarSubmitCreateUpdateFormRequest coreCalendarSubmitCreateUpdateFormRequest = null;
            //var response = instance.CoreCalendarSubmitCreateUpdateForm(coreCalendarSubmitCreateUpdateFormRequest);
            //Assert.IsType<CoreCalendarSubmitCreateUpdateForm200Response>(response);
        }

        /// <summary>
        /// Test CoreCalendarUpdateEventStartDay
        /// </summary>
        [Fact]
        public void CoreCalendarUpdateEventStartDayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCalendarUpdateEventStartDayRequest coreCalendarUpdateEventStartDayRequest = null;
            //var response = instance.CoreCalendarUpdateEventStartDay(coreCalendarUpdateEventStartDayRequest);
            //Assert.IsType<CoreCalendarUpdateEventStartDay200Response>(response);
        }

        /// <summary>
        /// Test CoreChangeEditmode
        /// </summary>
        [Fact]
        public void CoreChangeEditmodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreChangeEditmodeRequest coreChangeEditmodeRequest = null;
            //var response = instance.CoreChangeEditmode(coreChangeEditmodeRequest);
            //Assert.IsType<CoreChangeEditmode200Response>(response);
        }

        /// <summary>
        /// Test CoreCohortAddCohortMembers
        /// </summary>
        [Fact]
        public void CoreCohortAddCohortMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCohortAddCohortMembersRequest coreCohortAddCohortMembersRequest = null;
            //var response = instance.CoreCohortAddCohortMembers(coreCohortAddCohortMembersRequest);
            //Assert.IsType<CoreCohortAddCohortMembers200Response>(response);
        }

        /// <summary>
        /// Test CoreCohortCreateCohorts
        /// </summary>
        [Fact]
        public void CoreCohortCreateCohortsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCohortCreateCohortsRequest coreCohortCreateCohortsRequest = null;
            //var response = instance.CoreCohortCreateCohorts(coreCohortCreateCohortsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCohortDeleteCohortMembers
        /// </summary>
        [Fact]
        public void CoreCohortDeleteCohortMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCohortDeleteCohortMembersRequest coreCohortDeleteCohortMembersRequest = null;
            //var response = instance.CoreCohortDeleteCohortMembers(coreCohortDeleteCohortMembersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCohortDeleteCohorts
        /// </summary>
        [Fact]
        public void CoreCohortDeleteCohortsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCohortDeleteCohortsRequest coreCohortDeleteCohortsRequest = null;
            //var response = instance.CoreCohortDeleteCohorts(coreCohortDeleteCohortsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCohortGetCohortMembers
        /// </summary>
        [Fact]
        public void CoreCohortGetCohortMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCohortGetCohortMembersRequest coreCohortGetCohortMembersRequest = null;
            //var response = instance.CoreCohortGetCohortMembers(coreCohortGetCohortMembersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCohortGetCohorts
        /// </summary>
        [Fact]
        public void CoreCohortGetCohortsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCohortGetCohortsRequest coreCohortGetCohortsRequest = null;
            //var response = instance.CoreCohortGetCohorts(coreCohortGetCohortsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCohortSearchCohorts
        /// </summary>
        [Fact]
        public void CoreCohortSearchCohortsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCohortSearchCohortsRequest coreCohortSearchCohortsRequest = null;
            //var response = instance.CoreCohortSearchCohorts(coreCohortSearchCohortsRequest);
            //Assert.IsType<CoreCohortSearchCohorts200Response>(response);
        }

        /// <summary>
        /// Test CoreCohortUpdateCohorts
        /// </summary>
        [Fact]
        public void CoreCohortUpdateCohortsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCohortUpdateCohortsRequest coreCohortUpdateCohortsRequest = null;
            //var response = instance.CoreCohortUpdateCohorts(coreCohortUpdateCohortsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCommentAddComments
        /// </summary>
        [Fact]
        public void CoreCommentAddCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCommentAddCommentsRequest coreCommentAddCommentsRequest = null;
            //var response = instance.CoreCommentAddComments(coreCommentAddCommentsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCommentDeleteComments
        /// </summary>
        [Fact]
        public void CoreCommentDeleteCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCommentDeleteCommentsRequest coreCommentDeleteCommentsRequest = null;
            //var response = instance.CoreCommentDeleteComments(coreCommentDeleteCommentsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCommentGetComments
        /// </summary>
        [Fact]
        public void CoreCommentGetCommentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCommentGetCommentsRequest coreCommentGetCommentsRequest = null;
            //var response = instance.CoreCommentGetComments(coreCommentGetCommentsRequest);
            //Assert.IsType<CoreCommentGetComments200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyAddCompetencyToCourse
        /// </summary>
        [Fact]
        public void CoreCompetencyAddCompetencyToCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyAddCompetencyToCourseRequest coreCompetencyAddCompetencyToCourseRequest = null;
            //var response = instance.CoreCompetencyAddCompetencyToCourse(coreCompetencyAddCompetencyToCourseRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyAddCompetencyToPlan
        /// </summary>
        [Fact]
        public void CoreCompetencyAddCompetencyToPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyAddCompetencyToPlanRequest coreCompetencyAddCompetencyToPlanRequest = null;
            //var response = instance.CoreCompetencyAddCompetencyToPlan(coreCompetencyAddCompetencyToPlanRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyAddCompetencyToTemplate
        /// </summary>
        [Fact]
        public void CoreCompetencyAddCompetencyToTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyAddCompetencyToTemplateRequest coreCompetencyAddCompetencyToTemplateRequest = null;
            //var response = instance.CoreCompetencyAddCompetencyToTemplate(coreCompetencyAddCompetencyToTemplateRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyAddRelatedCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyAddRelatedCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyAddRelatedCompetencyRequest coreCompetencyAddRelatedCompetencyRequest = null;
            //var response = instance.CoreCompetencyAddRelatedCompetency(coreCompetencyAddRelatedCompetencyRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyApprovePlan
        /// </summary>
        [Fact]
        public void CoreCompetencyApprovePlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyApprovePlanRequest coreCompetencyApprovePlanRequest = null;
            //var response = instance.CoreCompetencyApprovePlan(coreCompetencyApprovePlanRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCompetencyFrameworkViewed
        /// </summary>
        [Fact]
        public void CoreCompetencyCompetencyFrameworkViewedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCompetencyFrameworkViewedRequest coreCompetencyCompetencyFrameworkViewedRequest = null;
            //var response = instance.CoreCompetencyCompetencyFrameworkViewed(coreCompetencyCompetencyFrameworkViewedRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCompetencyViewed
        /// </summary>
        [Fact]
        public void CoreCompetencyCompetencyViewedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest = null;
            //var response = instance.CoreCompetencyCompetencyViewed(coreCompetencyCompetencyViewedRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCompletePlan
        /// </summary>
        [Fact]
        public void CoreCompetencyCompletePlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest = null;
            //var response = instance.CoreCompetencyCompletePlan(coreCompetencyCompletePlanRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCountCompetencies
        /// </summary>
        [Fact]
        public void CoreCompetencyCountCompetenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCountCompetenciesRequest coreCompetencyCountCompetenciesRequest = null;
            //var response = instance.CoreCompetencyCountCompetencies(coreCompetencyCountCompetenciesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCountCompetenciesInCourse
        /// </summary>
        [Fact]
        public void CoreCompetencyCountCompetenciesInCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCountCompetenciesInCourseRequest coreCompetencyCountCompetenciesInCourseRequest = null;
            //var response = instance.CoreCompetencyCountCompetenciesInCourse(coreCompetencyCountCompetenciesInCourseRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCountCompetenciesInTemplate
        /// </summary>
        [Fact]
        public void CoreCompetencyCountCompetenciesInTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest = null;
            //var response = instance.CoreCompetencyCountCompetenciesInTemplate(coreCompetencyCountCompetenciesInTemplateRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCountCompetencyFrameworks
        /// </summary>
        [Fact]
        public void CoreCompetencyCountCompetencyFrameworksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCountCompetencyFrameworksRequest coreCompetencyCountCompetencyFrameworksRequest = null;
            //var response = instance.CoreCompetencyCountCompetencyFrameworks(coreCompetencyCountCompetencyFrameworksRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCountCourseModuleCompetencies
        /// </summary>
        [Fact]
        public void CoreCompetencyCountCourseModuleCompetenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCountCourseModuleCompetenciesRequest coreCompetencyCountCourseModuleCompetenciesRequest = null;
            //var response = instance.CoreCompetencyCountCourseModuleCompetencies(coreCompetencyCountCourseModuleCompetenciesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCountCoursesUsingCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyCountCoursesUsingCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest = null;
            //var response = instance.CoreCompetencyCountCoursesUsingCompetency(coreCompetencyCompetencyViewedRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCountTemplates
        /// </summary>
        [Fact]
        public void CoreCompetencyCountTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCountCompetencyFrameworksRequest coreCompetencyCountCompetencyFrameworksRequest = null;
            //var response = instance.CoreCompetencyCountTemplates(coreCompetencyCountCompetencyFrameworksRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCountTemplatesUsingCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyCountTemplatesUsingCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest = null;
            //var response = instance.CoreCompetencyCountTemplatesUsingCompetency(coreCompetencyCompetencyViewedRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCreateCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyCreateCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCreateCompetencyRequest coreCompetencyCreateCompetencyRequest = null;
            //var response = instance.CoreCompetencyCreateCompetency(coreCompetencyCreateCompetencyRequest);
            //Assert.IsType<CoreCompetencyCreateCompetency200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCreateCompetencyFramework
        /// </summary>
        [Fact]
        public void CoreCompetencyCreateCompetencyFrameworkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCreateCompetencyFrameworkRequest coreCompetencyCreateCompetencyFrameworkRequest = null;
            //var response = instance.CoreCompetencyCreateCompetencyFramework(coreCompetencyCreateCompetencyFrameworkRequest);
            //Assert.IsType<CoreCompetencyCreateCompetencyFramework200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCreatePlan
        /// </summary>
        [Fact]
        public void CoreCompetencyCreatePlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCreatePlanRequest coreCompetencyCreatePlanRequest = null;
            //var response = instance.CoreCompetencyCreatePlan(coreCompetencyCreatePlanRequest);
            //Assert.IsType<CoreCompetencyCreatePlan200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCreateTemplate
        /// </summary>
        [Fact]
        public void CoreCompetencyCreateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCreateTemplateRequest coreCompetencyCreateTemplateRequest = null;
            //var response = instance.CoreCompetencyCreateTemplate(coreCompetencyCreateTemplateRequest);
            //Assert.IsType<CoreCompetencyCreateTemplate200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyCreateUserEvidenceCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyCreateUserEvidenceCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCreateUserEvidenceCompetencyRequest coreCompetencyCreateUserEvidenceCompetencyRequest = null;
            //var response = instance.CoreCompetencyCreateUserEvidenceCompetency(coreCompetencyCreateUserEvidenceCompetencyRequest);
            //Assert.IsType<CoreCompetencyCreateUserEvidenceCompetency200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyDeleteCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyDeleteCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyDeleteCompetencyRequest coreCompetencyDeleteCompetencyRequest = null;
            //var response = instance.CoreCompetencyDeleteCompetency(coreCompetencyDeleteCompetencyRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyDeleteCompetencyFramework
        /// </summary>
        [Fact]
        public void CoreCompetencyDeleteCompetencyFrameworkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyDeleteCompetencyFrameworkRequest coreCompetencyDeleteCompetencyFrameworkRequest = null;
            //var response = instance.CoreCompetencyDeleteCompetencyFramework(coreCompetencyDeleteCompetencyFrameworkRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyDeleteEvidence
        /// </summary>
        [Fact]
        public void CoreCompetencyDeleteEvidenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyDeleteEvidenceRequest coreCompetencyDeleteEvidenceRequest = null;
            //var response = instance.CoreCompetencyDeleteEvidence(coreCompetencyDeleteEvidenceRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyDeletePlan
        /// </summary>
        [Fact]
        public void CoreCompetencyDeletePlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyDeletePlanRequest coreCompetencyDeletePlanRequest = null;
            //var response = instance.CoreCompetencyDeletePlan(coreCompetencyDeletePlanRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyDeleteTemplate
        /// </summary>
        [Fact]
        public void CoreCompetencyDeleteTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyDeleteTemplateRequest coreCompetencyDeleteTemplateRequest = null;
            //var response = instance.CoreCompetencyDeleteTemplate(coreCompetencyDeleteTemplateRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyDeleteUserEvidence
        /// </summary>
        [Fact]
        public void CoreCompetencyDeleteUserEvidenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest = null;
            //var response = instance.CoreCompetencyDeleteUserEvidence(coreCompetencyDeleteUserEvidenceRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyDeleteUserEvidenceCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyDeleteUserEvidenceCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyDeleteUserEvidenceCompetencyRequest coreCompetencyDeleteUserEvidenceCompetencyRequest = null;
            //var response = instance.CoreCompetencyDeleteUserEvidenceCompetency(coreCompetencyDeleteUserEvidenceCompetencyRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyDuplicateCompetencyFramework
        /// </summary>
        [Fact]
        public void CoreCompetencyDuplicateCompetencyFrameworkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyDuplicateCompetencyFrameworkRequest coreCompetencyDuplicateCompetencyFrameworkRequest = null;
            //var response = instance.CoreCompetencyDuplicateCompetencyFramework(coreCompetencyDuplicateCompetencyFrameworkRequest);
            //Assert.IsType<CoreCompetencyDuplicateCompetencyFramework200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyDuplicateTemplate
        /// </summary>
        [Fact]
        public void CoreCompetencyDuplicateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest = null;
            //var response = instance.CoreCompetencyDuplicateTemplate(coreCompetencyCountCompetenciesInTemplateRequest);
            //Assert.IsType<CoreCompetencyCreateTemplate200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyGetScaleValues
        /// </summary>
        [Fact]
        public void CoreCompetencyGetScaleValuesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyGetScaleValuesRequest coreCompetencyGetScaleValuesRequest = null;
            //var response = instance.CoreCompetencyGetScaleValues(coreCompetencyGetScaleValuesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyGradeCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyGradeCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyGradeCompetencyRequest coreCompetencyGradeCompetencyRequest = null;
            //var response = instance.CoreCompetencyGradeCompetency(coreCompetencyGradeCompetencyRequest);
            //Assert.IsType<CoreCompetencyGradeCompetency200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyGradeCompetencyInCourse
        /// </summary>
        [Fact]
        public void CoreCompetencyGradeCompetencyInCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyGradeCompetencyInCourseRequest coreCompetencyGradeCompetencyInCourseRequest = null;
            //var response = instance.CoreCompetencyGradeCompetencyInCourse(coreCompetencyGradeCompetencyInCourseRequest);
            //Assert.IsType<CoreCompetencyGradeCompetencyInCourse200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyGradeCompetencyInPlan
        /// </summary>
        [Fact]
        public void CoreCompetencyGradeCompetencyInPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyGradeCompetencyInPlanRequest coreCompetencyGradeCompetencyInPlanRequest = null;
            //var response = instance.CoreCompetencyGradeCompetencyInPlan(coreCompetencyGradeCompetencyInPlanRequest);
            //Assert.IsType<CoreCompetencyGradeCompetencyInCourse200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyListCompetencies
        /// </summary>
        [Fact]
        public void CoreCompetencyListCompetenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyListCompetenciesRequest coreCompetencyListCompetenciesRequest = null;
            //var response = instance.CoreCompetencyListCompetencies(coreCompetencyListCompetenciesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyListCompetenciesInTemplate
        /// </summary>
        [Fact]
        public void CoreCompetencyListCompetenciesInTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest = null;
            //var response = instance.CoreCompetencyListCompetenciesInTemplate(coreCompetencyCountCompetenciesInTemplateRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyListCompetencyFrameworks
        /// </summary>
        [Fact]
        public void CoreCompetencyListCompetencyFrameworksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyListCompetencyFrameworksRequest coreCompetencyListCompetencyFrameworksRequest = null;
            //var response = instance.CoreCompetencyListCompetencyFrameworks(coreCompetencyListCompetencyFrameworksRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyListCourseCompetencies
        /// </summary>
        [Fact]
        public void CoreCompetencyListCourseCompetenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCountCompetenciesInCourseRequest coreCompetencyCountCompetenciesInCourseRequest = null;
            //var response = instance.CoreCompetencyListCourseCompetencies(coreCompetencyCountCompetenciesInCourseRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyListCourseModuleCompetencies
        /// </summary>
        [Fact]
        public void CoreCompetencyListCourseModuleCompetenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyListCourseModuleCompetenciesRequest coreCompetencyListCourseModuleCompetenciesRequest = null;
            //var response = instance.CoreCompetencyListCourseModuleCompetencies(coreCompetencyListCourseModuleCompetenciesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyListPlanCompetencies
        /// </summary>
        [Fact]
        public void CoreCompetencyListPlanCompetenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyListPlanCompetenciesRequest coreCompetencyListPlanCompetenciesRequest = null;
            //var response = instance.CoreCompetencyListPlanCompetencies(coreCompetencyListPlanCompetenciesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyListTemplates
        /// </summary>
        [Fact]
        public void CoreCompetencyListTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyListTemplatesRequest coreCompetencyListTemplatesRequest = null;
            //var response = instance.CoreCompetencyListTemplates(coreCompetencyListTemplatesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyListTemplatesUsingCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyListTemplatesUsingCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest = null;
            //var response = instance.CoreCompetencyListTemplatesUsingCompetency(coreCompetencyCompetencyViewedRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyListUserPlans
        /// </summary>
        [Fact]
        public void CoreCompetencyListUserPlansTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyListUserPlansRequest coreCompetencyListUserPlansRequest = null;
            //var response = instance.CoreCompetencyListUserPlans(coreCompetencyListUserPlansRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyMoveDownCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyMoveDownCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest = null;
            //var response = instance.CoreCompetencyMoveDownCompetency(coreCompetencyCompetencyViewedRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyMoveUpCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyMoveUpCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCompetencyViewedRequest coreCompetencyCompetencyViewedRequest = null;
            //var response = instance.CoreCompetencyMoveUpCompetency(coreCompetencyCompetencyViewedRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyPlanCancelReviewRequest
        /// </summary>
        [Fact]
        public void CoreCompetencyPlanCancelReviewRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest = null;
            //var response = instance.CoreCompetencyPlanCancelReviewRequest(coreCompetencyPlanCancelReviewRequestRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyPlanRequestReview
        /// </summary>
        [Fact]
        public void CoreCompetencyPlanRequestReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest = null;
            //var response = instance.CoreCompetencyPlanRequestReview(coreCompetencyPlanCancelReviewRequestRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyPlanStartReview
        /// </summary>
        [Fact]
        public void CoreCompetencyPlanStartReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest = null;
            //var response = instance.CoreCompetencyPlanStartReview(coreCompetencyPlanCancelReviewRequestRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyPlanStopReview
        /// </summary>
        [Fact]
        public void CoreCompetencyPlanStopReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest = null;
            //var response = instance.CoreCompetencyPlanStopReview(coreCompetencyPlanCancelReviewRequestRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyReadCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyReadCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyReadCompetencyRequest coreCompetencyReadCompetencyRequest = null;
            //var response = instance.CoreCompetencyReadCompetency(coreCompetencyReadCompetencyRequest);
            //Assert.IsType<CoreCompetencyCreateCompetency200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyReadCompetencyFramework
        /// </summary>
        [Fact]
        public void CoreCompetencyReadCompetencyFrameworkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyDuplicateCompetencyFrameworkRequest coreCompetencyDuplicateCompetencyFrameworkRequest = null;
            //var response = instance.CoreCompetencyReadCompetencyFramework(coreCompetencyDuplicateCompetencyFrameworkRequest);
            //Assert.IsType<CoreCompetencyDuplicateCompetencyFramework200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyReadPlan
        /// </summary>
        [Fact]
        public void CoreCompetencyReadPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyReadPlanRequest coreCompetencyReadPlanRequest = null;
            //var response = instance.CoreCompetencyReadPlan(coreCompetencyReadPlanRequest);
            //Assert.IsType<CoreCompetencyReadPlan200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyReadTemplate
        /// </summary>
        [Fact]
        public void CoreCompetencyReadTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyReadTemplateRequest coreCompetencyReadTemplateRequest = null;
            //var response = instance.CoreCompetencyReadTemplate(coreCompetencyReadTemplateRequest);
            //Assert.IsType<CoreCompetencyCreateTemplate200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyReadUserEvidence
        /// </summary>
        [Fact]
        public void CoreCompetencyReadUserEvidenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest = null;
            //var response = instance.CoreCompetencyReadUserEvidence(coreCompetencyDeleteUserEvidenceRequest);
            //Assert.IsType<CoreCompetencyReadUserEvidence200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyRemoveCompetencyFromCourse
        /// </summary>
        [Fact]
        public void CoreCompetencyRemoveCompetencyFromCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyRemoveCompetencyFromCourseRequest coreCompetencyRemoveCompetencyFromCourseRequest = null;
            //var response = instance.CoreCompetencyRemoveCompetencyFromCourse(coreCompetencyRemoveCompetencyFromCourseRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyRemoveCompetencyFromPlan
        /// </summary>
        [Fact]
        public void CoreCompetencyRemoveCompetencyFromPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyRemoveCompetencyFromPlanRequest coreCompetencyRemoveCompetencyFromPlanRequest = null;
            //var response = instance.CoreCompetencyRemoveCompetencyFromPlan(coreCompetencyRemoveCompetencyFromPlanRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyRemoveCompetencyFromTemplate
        /// </summary>
        [Fact]
        public void CoreCompetencyRemoveCompetencyFromTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyRemoveCompetencyFromTemplateRequest coreCompetencyRemoveCompetencyFromTemplateRequest = null;
            //var response = instance.CoreCompetencyRemoveCompetencyFromTemplate(coreCompetencyRemoveCompetencyFromTemplateRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyRemoveRelatedCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyRemoveRelatedCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyRemoveRelatedCompetencyRequest coreCompetencyRemoveRelatedCompetencyRequest = null;
            //var response = instance.CoreCompetencyRemoveRelatedCompetency(coreCompetencyRemoveRelatedCompetencyRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyReopenPlan
        /// </summary>
        [Fact]
        public void CoreCompetencyReopenPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCompletePlanRequest coreCompetencyCompletePlanRequest = null;
            //var response = instance.CoreCompetencyReopenPlan(coreCompetencyCompletePlanRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyReorderCourseCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyReorderCourseCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyReorderCourseCompetencyRequest coreCompetencyReorderCourseCompetencyRequest = null;
            //var response = instance.CoreCompetencyReorderCourseCompetency(coreCompetencyReorderCourseCompetencyRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyReorderPlanCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyReorderPlanCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyReorderPlanCompetencyRequest coreCompetencyReorderPlanCompetencyRequest = null;
            //var response = instance.CoreCompetencyReorderPlanCompetency(coreCompetencyReorderPlanCompetencyRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyReorderTemplateCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyReorderTemplateCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyReorderTemplateCompetencyRequest coreCompetencyReorderTemplateCompetencyRequest = null;
            //var response = instance.CoreCompetencyReorderTemplateCompetency(coreCompetencyReorderTemplateCompetencyRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyRequestReviewOfUserEvidenceLinkedCompetencies
        /// </summary>
        [Fact]
        public void CoreCompetencyRequestReviewOfUserEvidenceLinkedCompetenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyDeleteUserEvidenceRequest coreCompetencyDeleteUserEvidenceRequest = null;
            //var response = instance.CoreCompetencyRequestReviewOfUserEvidenceLinkedCompetencies(coreCompetencyDeleteUserEvidenceRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencySearchCompetencies
        /// </summary>
        [Fact]
        public void CoreCompetencySearchCompetenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencySearchCompetenciesRequest coreCompetencySearchCompetenciesRequest = null;
            //var response = instance.CoreCompetencySearchCompetencies(coreCompetencySearchCompetenciesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencySetCourseCompetencyRuleoutcome
        /// </summary>
        [Fact]
        public void CoreCompetencySetCourseCompetencyRuleoutcomeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencySetCourseCompetencyRuleoutcomeRequest coreCompetencySetCourseCompetencyRuleoutcomeRequest = null;
            //var response = instance.CoreCompetencySetCourseCompetencyRuleoutcome(coreCompetencySetCourseCompetencyRuleoutcomeRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencySetParentCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencySetParentCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencySetParentCompetencyRequest coreCompetencySetParentCompetencyRequest = null;
            //var response = instance.CoreCompetencySetParentCompetency(coreCompetencySetParentCompetencyRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyTemplateHasRelatedData
        /// </summary>
        [Fact]
        public void CoreCompetencyTemplateHasRelatedDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyCountCompetenciesInTemplateRequest coreCompetencyCountCompetenciesInTemplateRequest = null;
            //var response = instance.CoreCompetencyTemplateHasRelatedData(coreCompetencyCountCompetenciesInTemplateRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyTemplateViewed
        /// </summary>
        [Fact]
        public void CoreCompetencyTemplateViewedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyReadTemplateRequest coreCompetencyReadTemplateRequest = null;
            //var response = instance.CoreCompetencyTemplateViewed(coreCompetencyReadTemplateRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyUnapprovePlan
        /// </summary>
        [Fact]
        public void CoreCompetencyUnapprovePlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyPlanCancelReviewRequestRequest coreCompetencyPlanCancelReviewRequestRequest = null;
            //var response = instance.CoreCompetencyUnapprovePlan(coreCompetencyPlanCancelReviewRequestRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyUnlinkPlanFromTemplate
        /// </summary>
        [Fact]
        public void CoreCompetencyUnlinkPlanFromTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyUnlinkPlanFromTemplateRequest coreCompetencyUnlinkPlanFromTemplateRequest = null;
            //var response = instance.CoreCompetencyUnlinkPlanFromTemplate(coreCompetencyUnlinkPlanFromTemplateRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyUpdateCompetency
        /// </summary>
        [Fact]
        public void CoreCompetencyUpdateCompetencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyUpdateCompetencyRequest coreCompetencyUpdateCompetencyRequest = null;
            //var response = instance.CoreCompetencyUpdateCompetency(coreCompetencyUpdateCompetencyRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyUpdateCompetencyFramework
        /// </summary>
        [Fact]
        public void CoreCompetencyUpdateCompetencyFrameworkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyUpdateCompetencyFrameworkRequest coreCompetencyUpdateCompetencyFrameworkRequest = null;
            //var response = instance.CoreCompetencyUpdateCompetencyFramework(coreCompetencyUpdateCompetencyFrameworkRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyUpdateCourseCompetencySettings
        /// </summary>
        [Fact]
        public void CoreCompetencyUpdateCourseCompetencySettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyUpdateCourseCompetencySettingsRequest coreCompetencyUpdateCourseCompetencySettingsRequest = null;
            //var response = instance.CoreCompetencyUpdateCourseCompetencySettings(coreCompetencyUpdateCourseCompetencySettingsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyUpdatePlan
        /// </summary>
        [Fact]
        public void CoreCompetencyUpdatePlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyUpdatePlanRequest coreCompetencyUpdatePlanRequest = null;
            //var response = instance.CoreCompetencyUpdatePlan(coreCompetencyUpdatePlanRequest);
            //Assert.IsType<CoreCompetencyReadPlan200Response>(response);
        }

        /// <summary>
        /// Test CoreCompetencyUpdateTemplate
        /// </summary>
        [Fact]
        public void CoreCompetencyUpdateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyUpdateTemplateRequest coreCompetencyUpdateTemplateRequest = null;
            //var response = instance.CoreCompetencyUpdateTemplate(coreCompetencyUpdateTemplateRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyUserCompetencyCancelReviewRequest
        /// </summary>
        [Fact]
        public void CoreCompetencyUserCompetencyCancelReviewRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyUserCompetencyCancelReviewRequestRequest coreCompetencyUserCompetencyCancelReviewRequestRequest = null;
            //var response = instance.CoreCompetencyUserCompetencyCancelReviewRequest(coreCompetencyUserCompetencyCancelReviewRequestRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyUserCompetencyPlanViewed
        /// </summary>
        [Fact]
        public void CoreCompetencyUserCompetencyPlanViewedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyUserCompetencyPlanViewedRequest coreCompetencyUserCompetencyPlanViewedRequest = null;
            //var response = instance.CoreCompetencyUserCompetencyPlanViewed(coreCompetencyUserCompetencyPlanViewedRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyUserCompetencyRequestReview
        /// </summary>
        [Fact]
        public void CoreCompetencyUserCompetencyRequestReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest = null;
            //var response = instance.CoreCompetencyUserCompetencyRequestReview(coreCompetencyUserCompetencyRequestReviewRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyUserCompetencyStartReview
        /// </summary>
        [Fact]
        public void CoreCompetencyUserCompetencyStartReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest = null;
            //var response = instance.CoreCompetencyUserCompetencyStartReview(coreCompetencyUserCompetencyRequestReviewRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyUserCompetencyStopReview
        /// </summary>
        [Fact]
        public void CoreCompetencyUserCompetencyStopReviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyUserCompetencyRequestReviewRequest coreCompetencyUserCompetencyRequestReviewRequest = null;
            //var response = instance.CoreCompetencyUserCompetencyStopReview(coreCompetencyUserCompetencyRequestReviewRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyUserCompetencyViewed
        /// </summary>
        [Fact]
        public void CoreCompetencyUserCompetencyViewedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyUserCompetencyViewedRequest coreCompetencyUserCompetencyViewedRequest = null;
            //var response = instance.CoreCompetencyUserCompetencyViewed(coreCompetencyUserCompetencyViewedRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyUserCompetencyViewedInCourse
        /// </summary>
        [Fact]
        public void CoreCompetencyUserCompetencyViewedInCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyUserCompetencyViewedInCourseRequest coreCompetencyUserCompetencyViewedInCourseRequest = null;
            //var response = instance.CoreCompetencyUserCompetencyViewedInCourse(coreCompetencyUserCompetencyViewedInCourseRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompetencyUserCompetencyViewedInPlan
        /// </summary>
        [Fact]
        public void CoreCompetencyUserCompetencyViewedInPlanTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyUserCompetencyPlanViewedRequest coreCompetencyUserCompetencyPlanViewedRequest = null;
            //var response = instance.CoreCompetencyUserCompetencyViewedInPlan(coreCompetencyUserCompetencyPlanViewedRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCompletionGetActivitiesCompletionStatus
        /// </summary>
        [Fact]
        public void CoreCompletionGetActivitiesCompletionStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompletionGetActivitiesCompletionStatusRequest coreCompletionGetActivitiesCompletionStatusRequest = null;
            //var response = instance.CoreCompletionGetActivitiesCompletionStatus(coreCompletionGetActivitiesCompletionStatusRequest);
            //Assert.IsType<CoreCompletionGetActivitiesCompletionStatus200Response>(response);
        }

        /// <summary>
        /// Test CoreCompletionGetCourseCompletionStatus
        /// </summary>
        [Fact]
        public void CoreCompletionGetCourseCompletionStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompletionGetActivitiesCompletionStatusRequest coreCompletionGetActivitiesCompletionStatusRequest = null;
            //var response = instance.CoreCompletionGetCourseCompletionStatus(coreCompletionGetActivitiesCompletionStatusRequest);
            //Assert.IsType<CoreCompletionGetCourseCompletionStatus200Response>(response);
        }

        /// <summary>
        /// Test CoreCompletionMarkCourseSelfCompleted
        /// </summary>
        [Fact]
        public void CoreCompletionMarkCourseSelfCompletedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest = null;
            //var response = instance.CoreCompletionMarkCourseSelfCompleted(coreCompletionMarkCourseSelfCompletedRequest);
            //Assert.IsType<CoreCompletionMarkCourseSelfCompleted200Response>(response);
        }

        /// <summary>
        /// Test CoreCompletionOverrideActivityCompletionStatus
        /// </summary>
        [Fact]
        public void CoreCompletionOverrideActivityCompletionStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompletionOverrideActivityCompletionStatusRequest coreCompletionOverrideActivityCompletionStatusRequest = null;
            //var response = instance.CoreCompletionOverrideActivityCompletionStatus(coreCompletionOverrideActivityCompletionStatusRequest);
            //Assert.IsType<CoreCompletionOverrideActivityCompletionStatus200Response>(response);
        }

        /// <summary>
        /// Test CoreCompletionUpdateActivityCompletionStatusManually
        /// </summary>
        [Fact]
        public void CoreCompletionUpdateActivityCompletionStatusManuallyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompletionUpdateActivityCompletionStatusManuallyRequest coreCompletionUpdateActivityCompletionStatusManuallyRequest = null;
            //var response = instance.CoreCompletionUpdateActivityCompletionStatusManually(coreCompletionUpdateActivityCompletionStatusManuallyRequest);
            //Assert.IsType<CoreCompletionUpdateActivityCompletionStatusManually200Response>(response);
        }

        /// <summary>
        /// Test CoreContentbankCopyContent
        /// </summary>
        [Fact]
        public void CoreContentbankCopyContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreContentbankCopyContentRequest coreContentbankCopyContentRequest = null;
            //var response = instance.CoreContentbankCopyContent(coreContentbankCopyContentRequest);
            //Assert.IsType<CoreContentbankCopyContent200Response>(response);
        }

        /// <summary>
        /// Test CoreContentbankDeleteContent
        /// </summary>
        [Fact]
        public void CoreContentbankDeleteContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreContentbankDeleteContentRequest coreContentbankDeleteContentRequest = null;
            //var response = instance.CoreContentbankDeleteContent(coreContentbankDeleteContentRequest);
            //Assert.IsType<CoreContentbankDeleteContent200Response>(response);
        }

        /// <summary>
        /// Test CoreContentbankRenameContent
        /// </summary>
        [Fact]
        public void CoreContentbankRenameContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreContentbankRenameContentRequest coreContentbankRenameContentRequest = null;
            //var response = instance.CoreContentbankRenameContent(coreContentbankRenameContentRequest);
            //Assert.IsType<CoreContentbankRenameContent200Response>(response);
        }

        /// <summary>
        /// Test CoreContentbankSetContentVisibility
        /// </summary>
        [Fact]
        public void CoreContentbankSetContentVisibilityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreContentbankSetContentVisibilityRequest coreContentbankSetContentVisibilityRequest = null;
            //var response = instance.CoreContentbankSetContentVisibility(coreContentbankSetContentVisibilityRequest);
            //Assert.IsType<CoreContentbankRenameContent200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseAddContentItemToUserFavourites
        /// </summary>
        [Fact]
        public void CoreCourseAddContentItemToUserFavouritesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseAddContentItemToUserFavouritesRequest coreCourseAddContentItemToUserFavouritesRequest = null;
            //var response = instance.CoreCourseAddContentItemToUserFavourites(coreCourseAddContentItemToUserFavouritesRequest);
            //Assert.IsType<CoreCourseAddContentItemToUserFavourites200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseCheckUpdates
        /// </summary>
        [Fact]
        public void CoreCourseCheckUpdatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseCheckUpdatesRequest coreCourseCheckUpdatesRequest = null;
            //var response = instance.CoreCourseCheckUpdates(coreCourseCheckUpdatesRequest);
            //Assert.IsType<CoreCourseCheckUpdates200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseCreateCategories
        /// </summary>
        [Fact]
        public void CoreCourseCreateCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseCreateCategoriesRequest coreCourseCreateCategoriesRequest = null;
            //var response = instance.CoreCourseCreateCategories(coreCourseCreateCategoriesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCourseCreateCourses
        /// </summary>
        [Fact]
        public void CoreCourseCreateCoursesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseCreateCoursesRequest coreCourseCreateCoursesRequest = null;
            //var response = instance.CoreCourseCreateCourses(coreCourseCreateCoursesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCourseDeleteCategories
        /// </summary>
        [Fact]
        public void CoreCourseDeleteCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseDeleteCategoriesRequest coreCourseDeleteCategoriesRequest = null;
            //var response = instance.CoreCourseDeleteCategories(coreCourseDeleteCategoriesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCourseDeleteCourses
        /// </summary>
        [Fact]
        public void CoreCourseDeleteCoursesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseDeleteCoursesRequest coreCourseDeleteCoursesRequest = null;
            //var response = instance.CoreCourseDeleteCourses(coreCourseDeleteCoursesRequest);
            //Assert.IsType<CoreCohortAddCohortMembers200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseDeleteModules
        /// </summary>
        [Fact]
        public void CoreCourseDeleteModulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseDeleteModulesRequest coreCourseDeleteModulesRequest = null;
            //var response = instance.CoreCourseDeleteModules(coreCourseDeleteModulesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCourseDuplicateCourse
        /// </summary>
        [Fact]
        public void CoreCourseDuplicateCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseDuplicateCourseRequest coreCourseDuplicateCourseRequest = null;
            //var response = instance.CoreCourseDuplicateCourse(coreCourseDuplicateCourseRequest);
            //Assert.IsType<CoreCourseDuplicateCourse200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseEditModule
        /// </summary>
        [Fact]
        public void CoreCourseEditModuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseEditModuleRequest coreCourseEditModuleRequest = null;
            //var response = instance.CoreCourseEditModule(coreCourseEditModuleRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCourseEditSection
        /// </summary>
        [Fact]
        public void CoreCourseEditSectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseEditSectionRequest coreCourseEditSectionRequest = null;
            //var response = instance.CoreCourseEditSection(coreCourseEditSectionRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCourseGetActivityChooserFooter
        /// </summary>
        [Fact]
        public void CoreCourseGetActivityChooserFooterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseGetActivityChooserFooterRequest coreCourseGetActivityChooserFooterRequest = null;
            //var response = instance.CoreCourseGetActivityChooserFooter(coreCourseGetActivityChooserFooterRequest);
            //Assert.IsType<CoreCourseGetActivityChooserFooter200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseGetCategories
        /// </summary>
        [Fact]
        public void CoreCourseGetCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseGetCategoriesRequest coreCourseGetCategoriesRequest = null;
            //var response = instance.CoreCourseGetCategories(coreCourseGetCategoriesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCourseGetContents
        /// </summary>
        [Fact]
        public void CoreCourseGetContentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseGetContentsRequest coreCourseGetContentsRequest = null;
            //var response = instance.CoreCourseGetContents(coreCourseGetContentsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCourseGetCourseContentItems
        /// </summary>
        [Fact]
        public void CoreCourseGetCourseContentItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseGetCourseContentItemsRequest coreCourseGetCourseContentItemsRequest = null;
            //var response = instance.CoreCourseGetCourseContentItems(coreCourseGetCourseContentItemsRequest);
            //Assert.IsType<CoreCourseGetCourseContentItems200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseGetCourseModule
        /// </summary>
        [Fact]
        public void CoreCourseGetCourseModuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompetencyListCourseModuleCompetenciesRequest coreCompetencyListCourseModuleCompetenciesRequest = null;
            //var response = instance.CoreCourseGetCourseModule(coreCompetencyListCourseModuleCompetenciesRequest);
            //Assert.IsType<CoreCourseGetCourseModule200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseGetCourseModuleByInstance
        /// </summary>
        [Fact]
        public void CoreCourseGetCourseModuleByInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseGetCourseModuleByInstanceRequest coreCourseGetCourseModuleByInstanceRequest = null;
            //var response = instance.CoreCourseGetCourseModuleByInstance(coreCourseGetCourseModuleByInstanceRequest);
            //Assert.IsType<CoreCourseGetCourseModuleByInstance200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseGetCourses
        /// </summary>
        [Fact]
        public void CoreCourseGetCoursesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseGetCoursesRequest coreCourseGetCoursesRequest = null;
            //var response = instance.CoreCourseGetCourses(coreCourseGetCoursesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCourseGetCoursesByField
        /// </summary>
        [Fact]
        public void CoreCourseGetCoursesByFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseGetCoursesByFieldRequest coreCourseGetCoursesByFieldRequest = null;
            //var response = instance.CoreCourseGetCoursesByField(coreCourseGetCoursesByFieldRequest);
            //Assert.IsType<CoreCourseGetCoursesByField200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseGetEnrolledCoursesByTimelineClassification
        /// </summary>
        [Fact]
        public void CoreCourseGetEnrolledCoursesByTimelineClassificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseGetEnrolledCoursesByTimelineClassificationRequest coreCourseGetEnrolledCoursesByTimelineClassificationRequest = null;
            //var response = instance.CoreCourseGetEnrolledCoursesByTimelineClassification(coreCourseGetEnrolledCoursesByTimelineClassificationRequest);
            //Assert.IsType<CoreCourseGetEnrolledCoursesByTimelineClassification200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification
        /// </summary>
        [Fact]
        public void CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest = null;
            //var response = instance.CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification(coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassificationRequest);
            //Assert.IsType<CoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseGetEnrolledUsersByCmid
        /// </summary>
        [Fact]
        public void CoreCourseGetEnrolledUsersByCmidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseGetEnrolledUsersByCmidRequest coreCourseGetEnrolledUsersByCmidRequest = null;
            //var response = instance.CoreCourseGetEnrolledUsersByCmid(coreCourseGetEnrolledUsersByCmidRequest);
            //Assert.IsType<CoreCourseGetEnrolledUsersByCmid200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseGetModule
        /// </summary>
        [Fact]
        public void CoreCourseGetModuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseGetModuleRequest coreCourseGetModuleRequest = null;
            //var response = instance.CoreCourseGetModule(coreCourseGetModuleRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCourseGetRecentCourses
        /// </summary>
        [Fact]
        public void CoreCourseGetRecentCoursesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseGetRecentCoursesRequest coreCourseGetRecentCoursesRequest = null;
            //var response = instance.CoreCourseGetRecentCourses(coreCourseGetRecentCoursesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCourseGetUpdatesSince
        /// </summary>
        [Fact]
        public void CoreCourseGetUpdatesSinceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseGetUpdatesSinceRequest coreCourseGetUpdatesSinceRequest = null;
            //var response = instance.CoreCourseGetUpdatesSince(coreCourseGetUpdatesSinceRequest);
            //Assert.IsType<CoreCourseGetUpdatesSince200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseGetUserAdministrationOptions
        /// </summary>
        [Fact]
        public void CoreCourseGetUserAdministrationOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseGetUserAdministrationOptionsRequest coreCourseGetUserAdministrationOptionsRequest = null;
            //var response = instance.CoreCourseGetUserAdministrationOptions(coreCourseGetUserAdministrationOptionsRequest);
            //Assert.IsType<CoreCourseGetUserAdministrationOptions200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseGetUserNavigationOptions
        /// </summary>
        [Fact]
        public void CoreCourseGetUserNavigationOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseGetUserNavigationOptionsRequest coreCourseGetUserNavigationOptionsRequest = null;
            //var response = instance.CoreCourseGetUserNavigationOptions(coreCourseGetUserNavigationOptionsRequest);
            //Assert.IsType<CoreCourseGetUserNavigationOptions200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseImportCourse
        /// </summary>
        [Fact]
        public void CoreCourseImportCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseImportCourseRequest coreCourseImportCourseRequest = null;
            //var response = instance.CoreCourseImportCourse(coreCourseImportCourseRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCourseRemoveContentItemFromUserFavourites
        /// </summary>
        [Fact]
        public void CoreCourseRemoveContentItemFromUserFavouritesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseRemoveContentItemFromUserFavouritesRequest coreCourseRemoveContentItemFromUserFavouritesRequest = null;
            //var response = instance.CoreCourseRemoveContentItemFromUserFavourites(coreCourseRemoveContentItemFromUserFavouritesRequest);
            //Assert.IsType<CoreCourseAddContentItemToUserFavourites200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseSearchCourses
        /// </summary>
        [Fact]
        public void CoreCourseSearchCoursesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseSearchCoursesRequest coreCourseSearchCoursesRequest = null;
            //var response = instance.CoreCourseSearchCourses(coreCourseSearchCoursesRequest);
            //Assert.IsType<CoreCourseSearchCourses200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseSetFavouriteCourses
        /// </summary>
        [Fact]
        public void CoreCourseSetFavouriteCoursesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseSetFavouriteCoursesRequest coreCourseSetFavouriteCoursesRequest = null;
            //var response = instance.CoreCourseSetFavouriteCourses(coreCourseSetFavouriteCoursesRequest);
            //Assert.IsType<CoreCohortAddCohortMembers200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseToggleActivityRecommendation
        /// </summary>
        [Fact]
        public void CoreCourseToggleActivityRecommendationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseToggleActivityRecommendationRequest coreCourseToggleActivityRecommendationRequest = null;
            //var response = instance.CoreCourseToggleActivityRecommendation(coreCourseToggleActivityRecommendationRequest);
            //Assert.IsType<CoreCourseToggleActivityRecommendation200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseUpdateCategories
        /// </summary>
        [Fact]
        public void CoreCourseUpdateCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseUpdateCategoriesRequest coreCourseUpdateCategoriesRequest = null;
            //var response = instance.CoreCourseUpdateCategories(coreCourseUpdateCategoriesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCourseUpdateCourses
        /// </summary>
        [Fact]
        public void CoreCourseUpdateCoursesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseUpdateCoursesRequest coreCourseUpdateCoursesRequest = null;
            //var response = instance.CoreCourseUpdateCourses(coreCourseUpdateCoursesRequest);
            //Assert.IsType<CoreCohortAddCohortMembers200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseViewCourse
        /// </summary>
        [Fact]
        public void CoreCourseViewCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseViewCourseRequest coreCourseViewCourseRequest = null;
            //var response = instance.CoreCourseViewCourse(coreCourseViewCourseRequest);
            //Assert.IsType<CoreCalendarDeleteSubscription200Response>(response);
        }

        /// <summary>
        /// Test CoreCourseformatFileHandlers
        /// </summary>
        [Fact]
        public void CoreCourseformatFileHandlersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseformatFileHandlersRequest coreCourseformatFileHandlersRequest = null;
            //var response = instance.CoreCourseformatFileHandlers(coreCourseformatFileHandlersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCourseformatGetState
        /// </summary>
        [Fact]
        public void CoreCourseformatGetStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseformatFileHandlersRequest coreCourseformatFileHandlersRequest = null;
            //var response = instance.CoreCourseformatGetState(coreCourseformatFileHandlersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCourseformatUpdateCourse
        /// </summary>
        [Fact]
        public void CoreCourseformatUpdateCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCourseformatUpdateCourseRequest coreCourseformatUpdateCourseRequest = null;
            //var response = instance.CoreCourseformatUpdateCourse(coreCourseformatUpdateCourseRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCreateUserfeedbackActionRecord
        /// </summary>
        [Fact]
        public void CoreCreateUserfeedbackActionRecordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCreateUserfeedbackActionRecordRequest coreCreateUserfeedbackActionRecordRequest = null;
            //var response = instance.CoreCreateUserfeedbackActionRecord(coreCreateUserfeedbackActionRecordRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCustomfieldCreateCategory
        /// </summary>
        [Fact]
        public void CoreCustomfieldCreateCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCustomfieldCreateCategoryRequest coreCustomfieldCreateCategoryRequest = null;
            //var response = instance.CoreCustomfieldCreateCategory(coreCustomfieldCreateCategoryRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCustomfieldDeleteCategory
        /// </summary>
        [Fact]
        public void CoreCustomfieldDeleteCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCustomfieldDeleteCategoryRequest coreCustomfieldDeleteCategoryRequest = null;
            //var response = instance.CoreCustomfieldDeleteCategory(coreCustomfieldDeleteCategoryRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCustomfieldDeleteField
        /// </summary>
        [Fact]
        public void CoreCustomfieldDeleteFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCustomfieldDeleteFieldRequest coreCustomfieldDeleteFieldRequest = null;
            //var response = instance.CoreCustomfieldDeleteField(coreCustomfieldDeleteFieldRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCustomfieldMoveCategory
        /// </summary>
        [Fact]
        public void CoreCustomfieldMoveCategoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCustomfieldMoveCategoryRequest coreCustomfieldMoveCategoryRequest = null;
            //var response = instance.CoreCustomfieldMoveCategory(coreCustomfieldMoveCategoryRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCustomfieldMoveField
        /// </summary>
        [Fact]
        public void CoreCustomfieldMoveFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCustomfieldMoveFieldRequest coreCustomfieldMoveFieldRequest = null;
            //var response = instance.CoreCustomfieldMoveField(coreCustomfieldMoveFieldRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreCustomfieldReloadTemplate
        /// </summary>
        [Fact]
        public void CoreCustomfieldReloadTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCustomfieldReloadTemplateRequest coreCustomfieldReloadTemplateRequest = null;
            //var response = instance.CoreCustomfieldReloadTemplate(coreCustomfieldReloadTemplateRequest);
            //Assert.IsType<CoreCustomfieldReloadTemplate200Response>(response);
        }

        /// <summary>
        /// Test CoreDynamicTabsGetContent
        /// </summary>
        [Fact]
        public void CoreDynamicTabsGetContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreDynamicTabsGetContentRequest coreDynamicTabsGetContentRequest = null;
            //var response = instance.CoreDynamicTabsGetContent(coreDynamicTabsGetContentRequest);
            //Assert.IsType<CoreDynamicTabsGetContent200Response>(response);
        }

        /// <summary>
        /// Test CoreEnrolGetCourseEnrolmentMethods
        /// </summary>
        [Fact]
        public void CoreEnrolGetCourseEnrolmentMethodsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreEnrolGetCourseEnrolmentMethodsRequest coreEnrolGetCourseEnrolmentMethodsRequest = null;
            //var response = instance.CoreEnrolGetCourseEnrolmentMethods(coreEnrolGetCourseEnrolmentMethodsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreEnrolGetEnrolledUsers
        /// </summary>
        [Fact]
        public void CoreEnrolGetEnrolledUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreEnrolGetEnrolledUsersRequest coreEnrolGetEnrolledUsersRequest = null;
            //var response = instance.CoreEnrolGetEnrolledUsers(coreEnrolGetEnrolledUsersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreEnrolGetEnrolledUsersWithCapability
        /// </summary>
        [Fact]
        public void CoreEnrolGetEnrolledUsersWithCapabilityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreEnrolGetEnrolledUsersWithCapabilityRequest coreEnrolGetEnrolledUsersWithCapabilityRequest = null;
            //var response = instance.CoreEnrolGetEnrolledUsersWithCapability(coreEnrolGetEnrolledUsersWithCapabilityRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreEnrolGetPotentialUsers
        /// </summary>
        [Fact]
        public void CoreEnrolGetPotentialUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreEnrolGetPotentialUsersRequest coreEnrolGetPotentialUsersRequest = null;
            //var response = instance.CoreEnrolGetPotentialUsers(coreEnrolGetPotentialUsersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreEnrolGetUsersCourses
        /// </summary>
        [Fact]
        public void CoreEnrolGetUsersCoursesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreEnrolGetUsersCoursesRequest coreEnrolGetUsersCoursesRequest = null;
            //var response = instance.CoreEnrolGetUsersCourses(coreEnrolGetUsersCoursesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreEnrolSearchUsers
        /// </summary>
        [Fact]
        public void CoreEnrolSearchUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreEnrolSearchUsersRequest coreEnrolSearchUsersRequest = null;
            //var response = instance.CoreEnrolSearchUsers(coreEnrolSearchUsersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreEnrolSubmitUserEnrolmentForm
        /// </summary>
        [Fact]
        public void CoreEnrolSubmitUserEnrolmentFormTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreEnrolSubmitUserEnrolmentFormRequest coreEnrolSubmitUserEnrolmentFormRequest = null;
            //var response = instance.CoreEnrolSubmitUserEnrolmentForm(coreEnrolSubmitUserEnrolmentFormRequest);
            //Assert.IsType<CoreEnrolSubmitUserEnrolmentForm200Response>(response);
        }

        /// <summary>
        /// Test CoreEnrolUnenrolUserEnrolment
        /// </summary>
        [Fact]
        public void CoreEnrolUnenrolUserEnrolmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreEnrolUnenrolUserEnrolmentRequest coreEnrolUnenrolUserEnrolmentRequest = null;
            //var response = instance.CoreEnrolUnenrolUserEnrolment(coreEnrolUnenrolUserEnrolmentRequest);
            //Assert.IsType<CoreEnrolUnenrolUserEnrolment200Response>(response);
        }

        /// <summary>
        /// Test CoreFetchNotifications
        /// </summary>
        [Fact]
        public void CoreFetchNotificationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreFetchNotificationsRequest coreFetchNotificationsRequest = null;
            //var response = instance.CoreFetchNotifications(coreFetchNotificationsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreFilesDeleteDraftFiles
        /// </summary>
        [Fact]
        public void CoreFilesDeleteDraftFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreFilesDeleteDraftFilesRequest coreFilesDeleteDraftFilesRequest = null;
            //var response = instance.CoreFilesDeleteDraftFiles(coreFilesDeleteDraftFilesRequest);
            //Assert.IsType<CoreFilesDeleteDraftFiles200Response>(response);
        }

        /// <summary>
        /// Test CoreFilesGetFiles
        /// </summary>
        [Fact]
        public void CoreFilesGetFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreFilesGetFilesRequest coreFilesGetFilesRequest = null;
            //var response = instance.CoreFilesGetFiles(coreFilesGetFilesRequest);
            //Assert.IsType<CoreFilesGetFiles200Response>(response);
        }

        /// <summary>
        /// Test CoreFilesGetUnusedDraftItemid
        /// </summary>
        [Fact]
        public void CoreFilesGetUnusedDraftItemidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CoreFilesGetUnusedDraftItemid();
            //Assert.IsType<CoreFilesGetUnusedDraftItemid200Response>(response);
        }

        /// <summary>
        /// Test CoreFilesUpload
        /// </summary>
        [Fact]
        public void CoreFilesUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreFilesUploadRequest coreFilesUploadRequest = null;
            //var response = instance.CoreFilesUpload(coreFilesUploadRequest);
            //Assert.IsType<CoreFilesUpload200Response>(response);
        }

        /// <summary>
        /// Test CoreFiltersGetAvailableInContext
        /// </summary>
        [Fact]
        public void CoreFiltersGetAvailableInContextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreFiltersGetAvailableInContextRequest coreFiltersGetAvailableInContextRequest = null;
            //var response = instance.CoreFiltersGetAvailableInContext(coreFiltersGetAvailableInContextRequest);
            //Assert.IsType<CoreFiltersGetAvailableInContext200Response>(response);
        }

        /// <summary>
        /// Test CoreFormDynamicForm
        /// </summary>
        [Fact]
        public void CoreFormDynamicFormTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreFormDynamicFormRequest coreFormDynamicFormRequest = null;
            //var response = instance.CoreFormDynamicForm(coreFormDynamicFormRequest);
            //Assert.IsType<CoreFormDynamicForm200Response>(response);
        }

        /// <summary>
        /// Test CoreFormGetFiletypesBrowserData
        /// </summary>
        [Fact]
        public void CoreFormGetFiletypesBrowserDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreFormGetFiletypesBrowserDataRequest coreFormGetFiletypesBrowserDataRequest = null;
            //var response = instance.CoreFormGetFiletypesBrowserData(coreFormGetFiletypesBrowserDataRequest);
            //Assert.IsType<CoreFormGetFiletypesBrowserData200Response>(response);
        }

        /// <summary>
        /// Test CoreGetComponentStrings
        /// </summary>
        [Fact]
        public void CoreGetComponentStringsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGetComponentStringsRequest coreGetComponentStringsRequest = null;
            //var response = instance.CoreGetComponentStrings(coreGetComponentStringsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGetFragment
        /// </summary>
        [Fact]
        public void CoreGetFragmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGetFragmentRequest coreGetFragmentRequest = null;
            //var response = instance.CoreGetFragment(coreGetFragmentRequest);
            //Assert.IsType<CoreGetFragment200Response>(response);
        }

        /// <summary>
        /// Test CoreGetString
        /// </summary>
        [Fact]
        public void CoreGetStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGetStringRequest coreGetStringRequest = null;
            //var response = instance.CoreGetString(coreGetStringRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGetStrings
        /// </summary>
        [Fact]
        public void CoreGetStringsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGetStringsRequest coreGetStringsRequest = null;
            //var response = instance.CoreGetStrings(coreGetStringsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGetUserDates
        /// </summary>
        [Fact]
        public void CoreGetUserDatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGetUserDatesRequest coreGetUserDatesRequest = null;
            //var response = instance.CoreGetUserDates(coreGetUserDatesRequest);
            //Assert.IsType<CoreGetUserDates200Response>(response);
        }

        /// <summary>
        /// Test CoreGradesCreateGradecategories
        /// </summary>
        [Fact]
        public void CoreGradesCreateGradecategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradesCreateGradecategoriesRequest coreGradesCreateGradecategoriesRequest = null;
            //var response = instance.CoreGradesCreateGradecategories(coreGradesCreateGradecategoriesRequest);
            //Assert.IsType<CoreGradesCreateGradecategories200Response>(response);
        }

        /// <summary>
        /// Test CoreGradesGetEnrolledUsersForSearchWidget
        /// </summary>
        [Fact]
        public void CoreGradesGetEnrolledUsersForSearchWidgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradesGetEnrolledUsersForSearchWidgetRequest coreGradesGetEnrolledUsersForSearchWidgetRequest = null;
            //var response = instance.CoreGradesGetEnrolledUsersForSearchWidget(coreGradesGetEnrolledUsersForSearchWidgetRequest);
            //Assert.IsType<CoreGradesGetEnrolledUsersForSearchWidget200Response>(response);
        }

        /// <summary>
        /// Test CoreGradesGetEnrolledUsersForSelector
        /// </summary>
        [Fact]
        public void CoreGradesGetEnrolledUsersForSelectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradesGetEnrolledUsersForSelectorRequest coreGradesGetEnrolledUsersForSelectorRequest = null;
            //var response = instance.CoreGradesGetEnrolledUsersForSelector(coreGradesGetEnrolledUsersForSelectorRequest);
            //Assert.IsType<CoreGradesGetEnrolledUsersForSelector200Response>(response);
        }

        /// <summary>
        /// Test CoreGradesGetFeedback
        /// </summary>
        [Fact]
        public void CoreGradesGetFeedbackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradesGetFeedbackRequest coreGradesGetFeedbackRequest = null;
            //var response = instance.CoreGradesGetFeedback(coreGradesGetFeedbackRequest);
            //Assert.IsType<CoreGradesGetFeedback200Response>(response);
        }

        /// <summary>
        /// Test CoreGradesGetGradableUsers
        /// </summary>
        [Fact]
        public void CoreGradesGetGradableUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradesGetGradableUsersRequest coreGradesGetGradableUsersRequest = null;
            //var response = instance.CoreGradesGetGradableUsers(coreGradesGetGradableUsersRequest);
            //Assert.IsType<CoreGradesGetGradableUsers200Response>(response);
        }

        /// <summary>
        /// Test CoreGradesGetGradeTree
        /// </summary>
        [Fact]
        public void CoreGradesGetGradeTreeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest = null;
            //var response = instance.CoreGradesGetGradeTree(coreCompletionMarkCourseSelfCompletedRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGradesGetGradeitems
        /// </summary>
        [Fact]
        public void CoreGradesGetGradeitemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreCompletionMarkCourseSelfCompletedRequest coreCompletionMarkCourseSelfCompletedRequest = null;
            //var response = instance.CoreGradesGetGradeitems(coreCompletionMarkCourseSelfCompletedRequest);
            //Assert.IsType<CoreGradesGetGradeitems200Response>(response);
        }

        /// <summary>
        /// Test CoreGradesGetGroupsForSearchWidget
        /// </summary>
        [Fact]
        public void CoreGradesGetGroupsForSearchWidgetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest = null;
            //var response = instance.CoreGradesGetGroupsForSearchWidget(coreGradesGetGroupsForSearchWidgetRequest);
            //Assert.IsType<CoreGradesGetGroupsForSearchWidget200Response>(response);
        }

        /// <summary>
        /// Test CoreGradesGetGroupsForSelector
        /// </summary>
        [Fact]
        public void CoreGradesGetGroupsForSelectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest = null;
            //var response = instance.CoreGradesGetGroupsForSelector(coreGradesGetGroupsForSearchWidgetRequest);
            //Assert.IsType<CoreGradesGetGroupsForSelector200Response>(response);
        }

        /// <summary>
        /// Test CoreGradesGraderGradingpanelPointFetch
        /// </summary>
        [Fact]
        public void CoreGradesGraderGradingpanelPointFetchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradesGraderGradingpanelPointFetchRequest coreGradesGraderGradingpanelPointFetchRequest = null;
            //var response = instance.CoreGradesGraderGradingpanelPointFetch(coreGradesGraderGradingpanelPointFetchRequest);
            //Assert.IsType<CoreGradesGraderGradingpanelPointFetch200Response>(response);
        }

        /// <summary>
        /// Test CoreGradesGraderGradingpanelPointStore
        /// </summary>
        [Fact]
        public void CoreGradesGraderGradingpanelPointStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradesGraderGradingpanelPointStoreRequest coreGradesGraderGradingpanelPointStoreRequest = null;
            //var response = instance.CoreGradesGraderGradingpanelPointStore(coreGradesGraderGradingpanelPointStoreRequest);
            //Assert.IsType<CoreGradesGraderGradingpanelPointStore200Response>(response);
        }

        /// <summary>
        /// Test CoreGradesGraderGradingpanelScaleFetch
        /// </summary>
        [Fact]
        public void CoreGradesGraderGradingpanelScaleFetchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradesGraderGradingpanelScaleFetchRequest coreGradesGraderGradingpanelScaleFetchRequest = null;
            //var response = instance.CoreGradesGraderGradingpanelScaleFetch(coreGradesGraderGradingpanelScaleFetchRequest);
            //Assert.IsType<CoreGradesGraderGradingpanelScaleFetch200Response>(response);
        }

        /// <summary>
        /// Test CoreGradesGraderGradingpanelScaleStore
        /// </summary>
        [Fact]
        public void CoreGradesGraderGradingpanelScaleStoreTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradesGraderGradingpanelScaleStoreRequest coreGradesGraderGradingpanelScaleStoreRequest = null;
            //var response = instance.CoreGradesGraderGradingpanelScaleStore(coreGradesGraderGradingpanelScaleStoreRequest);
            //Assert.IsType<CoreGradesGraderGradingpanelScaleStore200Response>(response);
        }

        /// <summary>
        /// Test CoreGradesUpdateGrades
        /// </summary>
        [Fact]
        public void CoreGradesUpdateGradesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradesUpdateGradesRequest coreGradesUpdateGradesRequest = null;
            //var response = instance.CoreGradesUpdateGrades(coreGradesUpdateGradesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGradingGetDefinitions
        /// </summary>
        [Fact]
        public void CoreGradingGetDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradingGetDefinitionsRequest coreGradingGetDefinitionsRequest = null;
            //var response = instance.CoreGradingGetDefinitions(coreGradingGetDefinitionsRequest);
            //Assert.IsType<CoreGradingGetDefinitions200Response>(response);
        }

        /// <summary>
        /// Test CoreGradingGetGradingformInstances
        /// </summary>
        [Fact]
        public void CoreGradingGetGradingformInstancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradingGetGradingformInstancesRequest coreGradingGetGradingformInstancesRequest = null;
            //var response = instance.CoreGradingGetGradingformInstances(coreGradingGetGradingformInstancesRequest);
            //Assert.IsType<CoreGradingGetGradingformInstances200Response>(response);
        }

        /// <summary>
        /// Test CoreGradingSaveDefinitions
        /// </summary>
        [Fact]
        public void CoreGradingSaveDefinitionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradingSaveDefinitionsRequest coreGradingSaveDefinitionsRequest = null;
            //var response = instance.CoreGradingSaveDefinitions(coreGradingSaveDefinitionsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGroupAddGroupMembers
        /// </summary>
        [Fact]
        public void CoreGroupAddGroupMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupAddGroupMembersRequest coreGroupAddGroupMembersRequest = null;
            //var response = instance.CoreGroupAddGroupMembers(coreGroupAddGroupMembersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGroupAssignGrouping
        /// </summary>
        [Fact]
        public void CoreGroupAssignGroupingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupAssignGroupingRequest coreGroupAssignGroupingRequest = null;
            //var response = instance.CoreGroupAssignGrouping(coreGroupAssignGroupingRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGroupCreateGroupings
        /// </summary>
        [Fact]
        public void CoreGroupCreateGroupingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupCreateGroupingsRequest coreGroupCreateGroupingsRequest = null;
            //var response = instance.CoreGroupCreateGroupings(coreGroupCreateGroupingsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGroupCreateGroups
        /// </summary>
        [Fact]
        public void CoreGroupCreateGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupCreateGroupsRequest coreGroupCreateGroupsRequest = null;
            //var response = instance.CoreGroupCreateGroups(coreGroupCreateGroupsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGroupDeleteGroupMembers
        /// </summary>
        [Fact]
        public void CoreGroupDeleteGroupMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupDeleteGroupMembersRequest coreGroupDeleteGroupMembersRequest = null;
            //var response = instance.CoreGroupDeleteGroupMembers(coreGroupDeleteGroupMembersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGroupDeleteGroupings
        /// </summary>
        [Fact]
        public void CoreGroupDeleteGroupingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupDeleteGroupingsRequest coreGroupDeleteGroupingsRequest = null;
            //var response = instance.CoreGroupDeleteGroupings(coreGroupDeleteGroupingsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGroupDeleteGroups
        /// </summary>
        [Fact]
        public void CoreGroupDeleteGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupDeleteGroupsRequest coreGroupDeleteGroupsRequest = null;
            //var response = instance.CoreGroupDeleteGroups(coreGroupDeleteGroupsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGroupGetActivityAllowedGroups
        /// </summary>
        [Fact]
        public void CoreGroupGetActivityAllowedGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupGetActivityAllowedGroupsRequest coreGroupGetActivityAllowedGroupsRequest = null;
            //var response = instance.CoreGroupGetActivityAllowedGroups(coreGroupGetActivityAllowedGroupsRequest);
            //Assert.IsType<CoreGroupGetActivityAllowedGroups200Response>(response);
        }

        /// <summary>
        /// Test CoreGroupGetActivityGroupmode
        /// </summary>
        [Fact]
        public void CoreGroupGetActivityGroupmodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupGetActivityGroupmodeRequest coreGroupGetActivityGroupmodeRequest = null;
            //var response = instance.CoreGroupGetActivityGroupmode(coreGroupGetActivityGroupmodeRequest);
            //Assert.IsType<CoreGroupGetActivityGroupmode200Response>(response);
        }

        /// <summary>
        /// Test CoreGroupGetCourseGroupings
        /// </summary>
        [Fact]
        public void CoreGroupGetCourseGroupingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupGetCourseGroupingsRequest coreGroupGetCourseGroupingsRequest = null;
            //var response = instance.CoreGroupGetCourseGroupings(coreGroupGetCourseGroupingsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGroupGetCourseGroups
        /// </summary>
        [Fact]
        public void CoreGroupGetCourseGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupGetCourseGroupingsRequest coreGroupGetCourseGroupingsRequest = null;
            //var response = instance.CoreGroupGetCourseGroups(coreGroupGetCourseGroupingsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGroupGetCourseUserGroups
        /// </summary>
        [Fact]
        public void CoreGroupGetCourseUserGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupGetCourseUserGroupsRequest coreGroupGetCourseUserGroupsRequest = null;
            //var response = instance.CoreGroupGetCourseUserGroups(coreGroupGetCourseUserGroupsRequest);
            //Assert.IsType<CoreGroupGetCourseUserGroups200Response>(response);
        }

        /// <summary>
        /// Test CoreGroupGetGroupMembers
        /// </summary>
        [Fact]
        public void CoreGroupGetGroupMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupGetGroupMembersRequest coreGroupGetGroupMembersRequest = null;
            //var response = instance.CoreGroupGetGroupMembers(coreGroupGetGroupMembersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGroupGetGroupings
        /// </summary>
        [Fact]
        public void CoreGroupGetGroupingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupGetGroupingsRequest coreGroupGetGroupingsRequest = null;
            //var response = instance.CoreGroupGetGroupings(coreGroupGetGroupingsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGroupGetGroups
        /// </summary>
        [Fact]
        public void CoreGroupGetGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupGetGroupMembersRequest coreGroupGetGroupMembersRequest = null;
            //var response = instance.CoreGroupGetGroups(coreGroupGetGroupMembersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGroupGetGroupsForSelector
        /// </summary>
        [Fact]
        public void CoreGroupGetGroupsForSelectorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGradesGetGroupsForSearchWidgetRequest coreGradesGetGroupsForSearchWidgetRequest = null;
            //var response = instance.CoreGroupGetGroupsForSelector(coreGradesGetGroupsForSearchWidgetRequest);
            //Assert.IsType<CoreGradesGetGroupsForSelector200Response>(response);
        }

        /// <summary>
        /// Test CoreGroupUnassignGrouping
        /// </summary>
        [Fact]
        public void CoreGroupUnassignGroupingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupUnassignGroupingRequest coreGroupUnassignGroupingRequest = null;
            //var response = instance.CoreGroupUnassignGrouping(coreGroupUnassignGroupingRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGroupUpdateGroupings
        /// </summary>
        [Fact]
        public void CoreGroupUpdateGroupingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupUpdateGroupingsRequest coreGroupUpdateGroupingsRequest = null;
            //var response = instance.CoreGroupUpdateGroupings(coreGroupUpdateGroupingsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreGroupUpdateGroups
        /// </summary>
        [Fact]
        public void CoreGroupUpdateGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreGroupUpdateGroupsRequest coreGroupUpdateGroupsRequest = null;
            //var response = instance.CoreGroupUpdateGroups(coreGroupUpdateGroupsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreH5pGetTrustedH5pFile
        /// </summary>
        [Fact]
        public void CoreH5pGetTrustedH5pFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreH5pGetTrustedH5pFileRequest coreH5pGetTrustedH5pFileRequest = null;
            //var response = instance.CoreH5pGetTrustedH5pFile(coreH5pGetTrustedH5pFileRequest);
            //Assert.IsType<CoreH5pGetTrustedH5pFile200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageBlockUser
        /// </summary>
        [Fact]
        public void CoreMessageBlockUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageBlockUserRequest coreMessageBlockUserRequest = null;
            //var response = instance.CoreMessageBlockUser(coreMessageBlockUserRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageConfirmContactRequest
        /// </summary>
        [Fact]
        public void CoreMessageConfirmContactRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageConfirmContactRequestRequest coreMessageConfirmContactRequestRequest = null;
            //var response = instance.CoreMessageConfirmContactRequest(coreMessageConfirmContactRequestRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageCreateContactRequest
        /// </summary>
        [Fact]
        public void CoreMessageCreateContactRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageCreateContactRequestRequest coreMessageCreateContactRequestRequest = null;
            //var response = instance.CoreMessageCreateContactRequest(coreMessageCreateContactRequestRequest);
            //Assert.IsType<CoreMessageCreateContactRequest200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageDataForMessageareaSearchMessages
        /// </summary>
        [Fact]
        public void CoreMessageDataForMessageareaSearchMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageDataForMessageareaSearchMessagesRequest coreMessageDataForMessageareaSearchMessagesRequest = null;
            //var response = instance.CoreMessageDataForMessageareaSearchMessages(coreMessageDataForMessageareaSearchMessagesRequest);
            //Assert.IsType<CoreMessageDataForMessageareaSearchMessages200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageDeclineContactRequest
        /// </summary>
        [Fact]
        public void CoreMessageDeclineContactRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageCreateContactRequestRequest coreMessageCreateContactRequestRequest = null;
            //var response = instance.CoreMessageDeclineContactRequest(coreMessageCreateContactRequestRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageDeleteContacts
        /// </summary>
        [Fact]
        public void CoreMessageDeleteContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageDeleteContactsRequest coreMessageDeleteContactsRequest = null;
            //var response = instance.CoreMessageDeleteContacts(coreMessageDeleteContactsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageDeleteConversationsById
        /// </summary>
        [Fact]
        public void CoreMessageDeleteConversationsByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageDeleteConversationsByIdRequest coreMessageDeleteConversationsByIdRequest = null;
            //var response = instance.CoreMessageDeleteConversationsById(coreMessageDeleteConversationsByIdRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageDeleteMessage
        /// </summary>
        [Fact]
        public void CoreMessageDeleteMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageDeleteMessageRequest coreMessageDeleteMessageRequest = null;
            //var response = instance.CoreMessageDeleteMessage(coreMessageDeleteMessageRequest);
            //Assert.IsType<CoreMessageDeleteMessage200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageDeleteMessageForAllUsers
        /// </summary>
        [Fact]
        public void CoreMessageDeleteMessageForAllUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageDeleteMessageForAllUsersRequest coreMessageDeleteMessageForAllUsersRequest = null;
            //var response = instance.CoreMessageDeleteMessageForAllUsers(coreMessageDeleteMessageForAllUsersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageGetBlockedUsers
        /// </summary>
        [Fact]
        public void CoreMessageGetBlockedUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetBlockedUsersRequest coreMessageGetBlockedUsersRequest = null;
            //var response = instance.CoreMessageGetBlockedUsers(coreMessageGetBlockedUsersRequest);
            //Assert.IsType<CoreMessageGetBlockedUsers200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageGetContactRequests
        /// </summary>
        [Fact]
        public void CoreMessageGetContactRequestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetContactRequestsRequest coreMessageGetContactRequestsRequest = null;
            //var response = instance.CoreMessageGetContactRequests(coreMessageGetContactRequestsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageGetConversation
        /// </summary>
        [Fact]
        public void CoreMessageGetConversationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetConversationRequest coreMessageGetConversationRequest = null;
            //var response = instance.CoreMessageGetConversation(coreMessageGetConversationRequest);
            //Assert.IsType<CoreMessageGetConversation200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageGetConversationBetweenUsers
        /// </summary>
        [Fact]
        public void CoreMessageGetConversationBetweenUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetConversationBetweenUsersRequest coreMessageGetConversationBetweenUsersRequest = null;
            //var response = instance.CoreMessageGetConversationBetweenUsers(coreMessageGetConversationBetweenUsersRequest);
            //Assert.IsType<CoreMessageGetConversationBetweenUsers200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageGetConversationCounts
        /// </summary>
        [Fact]
        public void CoreMessageGetConversationCountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest = null;
            //var response = instance.CoreMessageGetConversationCounts(coreMessageGetConversationCountsRequest);
            //Assert.IsType<CoreMessageGetConversationCounts200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageGetConversationMembers
        /// </summary>
        [Fact]
        public void CoreMessageGetConversationMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetConversationMembersRequest coreMessageGetConversationMembersRequest = null;
            //var response = instance.CoreMessageGetConversationMembers(coreMessageGetConversationMembersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageGetConversationMessages
        /// </summary>
        [Fact]
        public void CoreMessageGetConversationMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetConversationMessagesRequest coreMessageGetConversationMessagesRequest = null;
            //var response = instance.CoreMessageGetConversationMessages(coreMessageGetConversationMessagesRequest);
            //Assert.IsType<CoreMessageGetConversationMessages200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageGetConversations
        /// </summary>
        [Fact]
        public void CoreMessageGetConversationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetConversationsRequest coreMessageGetConversationsRequest = null;
            //var response = instance.CoreMessageGetConversations(coreMessageGetConversationsRequest);
            //Assert.IsType<CoreMessageGetConversations200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageGetMemberInfo
        /// </summary>
        [Fact]
        public void CoreMessageGetMemberInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetMemberInfoRequest coreMessageGetMemberInfoRequest = null;
            //var response = instance.CoreMessageGetMemberInfo(coreMessageGetMemberInfoRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageGetMessageProcessor
        /// </summary>
        [Fact]
        public void CoreMessageGetMessageProcessorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetMessageProcessorRequest coreMessageGetMessageProcessorRequest = null;
            //var response = instance.CoreMessageGetMessageProcessor(coreMessageGetMessageProcessorRequest);
            //Assert.IsType<CoreMessageGetMessageProcessor200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageGetMessages
        /// </summary>
        [Fact]
        public void CoreMessageGetMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetMessagesRequest coreMessageGetMessagesRequest = null;
            //var response = instance.CoreMessageGetMessages(coreMessageGetMessagesRequest);
            //Assert.IsType<CoreMessageGetMessages200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageGetReceivedContactRequestsCount
        /// </summary>
        [Fact]
        public void CoreMessageGetReceivedContactRequestsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetReceivedContactRequestsCountRequest coreMessageGetReceivedContactRequestsCountRequest = null;
            //var response = instance.CoreMessageGetReceivedContactRequestsCount(coreMessageGetReceivedContactRequestsCountRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageGetSelfConversation
        /// </summary>
        [Fact]
        public void CoreMessageGetSelfConversationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetSelfConversationRequest coreMessageGetSelfConversationRequest = null;
            //var response = instance.CoreMessageGetSelfConversation(coreMessageGetSelfConversationRequest);
            //Assert.IsType<CoreMessageGetConversationBetweenUsers200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageGetUnreadConversationCounts
        /// </summary>
        [Fact]
        public void CoreMessageGetUnreadConversationCountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest = null;
            //var response = instance.CoreMessageGetUnreadConversationCounts(coreMessageGetConversationCountsRequest);
            //Assert.IsType<CoreMessageGetUnreadConversationCounts200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageGetUnreadConversationsCount
        /// </summary>
        [Fact]
        public void CoreMessageGetUnreadConversationsCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetUnreadConversationsCountRequest coreMessageGetUnreadConversationsCountRequest = null;
            //var response = instance.CoreMessageGetUnreadConversationsCount(coreMessageGetUnreadConversationsCountRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageGetUnreadNotificationCount
        /// </summary>
        [Fact]
        public void CoreMessageGetUnreadNotificationCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetUnreadNotificationCountRequest coreMessageGetUnreadNotificationCountRequest = null;
            //var response = instance.CoreMessageGetUnreadNotificationCount(coreMessageGetUnreadNotificationCountRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageGetUserContacts
        /// </summary>
        [Fact]
        public void CoreMessageGetUserContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetUserContactsRequest coreMessageGetUserContactsRequest = null;
            //var response = instance.CoreMessageGetUserContacts(coreMessageGetUserContactsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageGetUserMessagePreferences
        /// </summary>
        [Fact]
        public void CoreMessageGetUserMessagePreferencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest = null;
            //var response = instance.CoreMessageGetUserMessagePreferences(coreMessageGetConversationCountsRequest);
            //Assert.IsType<CoreMessageGetUserMessagePreferences200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageGetUserNotificationPreferences
        /// </summary>
        [Fact]
        public void CoreMessageGetUserNotificationPreferencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageGetConversationCountsRequest coreMessageGetConversationCountsRequest = null;
            //var response = instance.CoreMessageGetUserNotificationPreferences(coreMessageGetConversationCountsRequest);
            //Assert.IsType<CoreMessageGetUserNotificationPreferences200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageMarkAllConversationMessagesAsRead
        /// </summary>
        [Fact]
        public void CoreMessageMarkAllConversationMessagesAsReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageMarkAllConversationMessagesAsReadRequest coreMessageMarkAllConversationMessagesAsReadRequest = null;
            //var response = instance.CoreMessageMarkAllConversationMessagesAsRead(coreMessageMarkAllConversationMessagesAsReadRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageMarkAllNotificationsAsRead
        /// </summary>
        [Fact]
        public void CoreMessageMarkAllNotificationsAsReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageMarkAllNotificationsAsReadRequest coreMessageMarkAllNotificationsAsReadRequest = null;
            //var response = instance.CoreMessageMarkAllNotificationsAsRead(coreMessageMarkAllNotificationsAsReadRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageMarkMessageRead
        /// </summary>
        [Fact]
        public void CoreMessageMarkMessageReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageMarkMessageReadRequest coreMessageMarkMessageReadRequest = null;
            //var response = instance.CoreMessageMarkMessageRead(coreMessageMarkMessageReadRequest);
            //Assert.IsType<CoreMessageMarkMessageRead200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageMarkNotificationRead
        /// </summary>
        [Fact]
        public void CoreMessageMarkNotificationReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageMarkNotificationReadRequest coreMessageMarkNotificationReadRequest = null;
            //var response = instance.CoreMessageMarkNotificationRead(coreMessageMarkNotificationReadRequest);
            //Assert.IsType<CoreMessageMarkNotificationRead200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageMessageProcessorConfigForm
        /// </summary>
        [Fact]
        public void CoreMessageMessageProcessorConfigFormTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageMessageProcessorConfigFormRequest coreMessageMessageProcessorConfigFormRequest = null;
            //var response = instance.CoreMessageMessageProcessorConfigForm(coreMessageMessageProcessorConfigFormRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageMessageSearchUsers
        /// </summary>
        [Fact]
        public void CoreMessageMessageSearchUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageMessageSearchUsersRequest coreMessageMessageSearchUsersRequest = null;
            //var response = instance.CoreMessageMessageSearchUsers(coreMessageMessageSearchUsersRequest);
            //Assert.IsType<CoreMessageMessageSearchUsers200Response>(response);
        }

        /// <summary>
        /// Test CoreMessageMuteConversations
        /// </summary>
        [Fact]
        public void CoreMessageMuteConversationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageMuteConversationsRequest coreMessageMuteConversationsRequest = null;
            //var response = instance.CoreMessageMuteConversations(coreMessageMuteConversationsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageSearchContacts
        /// </summary>
        [Fact]
        public void CoreMessageSearchContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageSearchContactsRequest coreMessageSearchContactsRequest = null;
            //var response = instance.CoreMessageSearchContacts(coreMessageSearchContactsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageSendInstantMessages
        /// </summary>
        [Fact]
        public void CoreMessageSendInstantMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageSendInstantMessagesRequest coreMessageSendInstantMessagesRequest = null;
            //var response = instance.CoreMessageSendInstantMessages(coreMessageSendInstantMessagesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageSendMessagesToConversation
        /// </summary>
        [Fact]
        public void CoreMessageSendMessagesToConversationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageSendMessagesToConversationRequest coreMessageSendMessagesToConversationRequest = null;
            //var response = instance.CoreMessageSendMessagesToConversation(coreMessageSendMessagesToConversationRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageSetFavouriteConversations
        /// </summary>
        [Fact]
        public void CoreMessageSetFavouriteConversationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageSetFavouriteConversationsRequest coreMessageSetFavouriteConversationsRequest = null;
            //var response = instance.CoreMessageSetFavouriteConversations(coreMessageSetFavouriteConversationsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageUnblockUser
        /// </summary>
        [Fact]
        public void CoreMessageUnblockUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageUnblockUserRequest coreMessageUnblockUserRequest = null;
            //var response = instance.CoreMessageUnblockUser(coreMessageUnblockUserRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageUnmuteConversations
        /// </summary>
        [Fact]
        public void CoreMessageUnmuteConversationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageUnmuteConversationsRequest coreMessageUnmuteConversationsRequest = null;
            //var response = instance.CoreMessageUnmuteConversations(coreMessageUnmuteConversationsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMessageUnsetFavouriteConversations
        /// </summary>
        [Fact]
        public void CoreMessageUnsetFavouriteConversationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMessageSetFavouriteConversationsRequest coreMessageSetFavouriteConversationsRequest = null;
            //var response = instance.CoreMessageUnsetFavouriteConversations(coreMessageSetFavouriteConversationsRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreMoodlenetAuthCheck
        /// </summary>
        [Fact]
        public void CoreMoodlenetAuthCheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMoodlenetAuthCheckRequest coreMoodlenetAuthCheckRequest = null;
            //var response = instance.CoreMoodlenetAuthCheck(coreMoodlenetAuthCheckRequest);
            //Assert.IsType<CoreMoodlenetAuthCheck200Response>(response);
        }

        /// <summary>
        /// Test CoreMoodlenetGetShareInfoActivity
        /// </summary>
        [Fact]
        public void CoreMoodlenetGetShareInfoActivityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMoodlenetGetShareInfoActivityRequest coreMoodlenetGetShareInfoActivityRequest = null;
            //var response = instance.CoreMoodlenetGetShareInfoActivity(coreMoodlenetGetShareInfoActivityRequest);
            //Assert.IsType<CoreMoodlenetGetShareInfoActivity200Response>(response);
        }

        /// <summary>
        /// Test CoreMoodlenetGetSharedCourseInfo
        /// </summary>
        [Fact]
        public void CoreMoodlenetGetSharedCourseInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMoodlenetGetSharedCourseInfoRequest coreMoodlenetGetSharedCourseInfoRequest = null;
            //var response = instance.CoreMoodlenetGetSharedCourseInfo(coreMoodlenetGetSharedCourseInfoRequest);
            //Assert.IsType<CoreMoodlenetGetSharedCourseInfo200Response>(response);
        }

        /// <summary>
        /// Test CoreMoodlenetSendActivity
        /// </summary>
        [Fact]
        public void CoreMoodlenetSendActivityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMoodlenetSendActivityRequest coreMoodlenetSendActivityRequest = null;
            //var response = instance.CoreMoodlenetSendActivity(coreMoodlenetSendActivityRequest);
            //Assert.IsType<CoreMoodlenetSendActivity200Response>(response);
        }

        /// <summary>
        /// Test CoreMoodlenetSendCourse
        /// </summary>
        [Fact]
        public void CoreMoodlenetSendCourseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMoodlenetSendCourseRequest coreMoodlenetSendCourseRequest = null;
            //var response = instance.CoreMoodlenetSendCourse(coreMoodlenetSendCourseRequest);
            //Assert.IsType<CoreMoodlenetSendCourse200Response>(response);
        }

        /// <summary>
        /// Test CoreMyViewPage
        /// </summary>
        [Fact]
        public void CoreMyViewPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreMyViewPageRequest coreMyViewPageRequest = null;
            //var response = instance.CoreMyViewPage(coreMyViewPageRequest);
            //Assert.IsType<CoreCalendarDeleteSubscription200Response>(response);
        }

        /// <summary>
        /// Test CoreNotesCreateNotes
        /// </summary>
        [Fact]
        public void CoreNotesCreateNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreNotesCreateNotesRequest coreNotesCreateNotesRequest = null;
            //var response = instance.CoreNotesCreateNotes(coreNotesCreateNotesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreNotesDeleteNotes
        /// </summary>
        [Fact]
        public void CoreNotesDeleteNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreNotesDeleteNotesRequest coreNotesDeleteNotesRequest = null;
            //var response = instance.CoreNotesDeleteNotes(coreNotesDeleteNotesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreNotesGetCourseNotes
        /// </summary>
        [Fact]
        public void CoreNotesGetCourseNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreNotesGetCourseNotesRequest coreNotesGetCourseNotesRequest = null;
            //var response = instance.CoreNotesGetCourseNotes(coreNotesGetCourseNotesRequest);
            //Assert.IsType<CoreNotesGetCourseNotes200Response>(response);
        }

        /// <summary>
        /// Test CoreNotesGetNotes
        /// </summary>
        [Fact]
        public void CoreNotesGetNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreNotesGetNotesRequest coreNotesGetNotesRequest = null;
            //var response = instance.CoreNotesGetNotes(coreNotesGetNotesRequest);
            //Assert.IsType<CoreNotesGetNotes200Response>(response);
        }

        /// <summary>
        /// Test CoreNotesUpdateNotes
        /// </summary>
        [Fact]
        public void CoreNotesUpdateNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreNotesUpdateNotesRequest coreNotesUpdateNotesRequest = null;
            //var response = instance.CoreNotesUpdateNotes(coreNotesUpdateNotesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreNotesViewNotes
        /// </summary>
        [Fact]
        public void CoreNotesViewNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreNotesViewNotesRequest coreNotesViewNotesRequest = null;
            //var response = instance.CoreNotesViewNotes(coreNotesViewNotesRequest);
            //Assert.IsType<CoreCalendarDeleteSubscription200Response>(response);
        }

        /// <summary>
        /// Test CoreOutputLoadFontawesomeIconMap
        /// </summary>
        [Fact]
        public void CoreOutputLoadFontawesomeIconMapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CoreOutputLoadFontawesomeIconMap();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreOutputLoadFontawesomeIconSystemMap
        /// </summary>
        [Fact]
        public void CoreOutputLoadFontawesomeIconSystemMapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreOutputLoadFontawesomeIconSystemMapRequest coreOutputLoadFontawesomeIconSystemMapRequest = null;
            //var response = instance.CoreOutputLoadFontawesomeIconSystemMap(coreOutputLoadFontawesomeIconSystemMapRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreOutputLoadTemplate
        /// </summary>
        [Fact]
        public void CoreOutputLoadTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreOutputLoadTemplateRequest coreOutputLoadTemplateRequest = null;
            //var response = instance.CoreOutputLoadTemplate(coreOutputLoadTemplateRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreOutputLoadTemplateWithDependencies
        /// </summary>
        [Fact]
        public void CoreOutputLoadTemplateWithDependenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreOutputLoadTemplateWithDependenciesRequest coreOutputLoadTemplateWithDependenciesRequest = null;
            //var response = instance.CoreOutputLoadTemplateWithDependencies(coreOutputLoadTemplateWithDependenciesRequest);
            //Assert.IsType<CoreOutputLoadTemplateWithDependencies200Response>(response);
        }

        /// <summary>
        /// Test CorePaymentGetAvailableGateways
        /// </summary>
        [Fact]
        public void CorePaymentGetAvailableGatewaysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CorePaymentGetAvailableGatewaysRequest corePaymentGetAvailableGatewaysRequest = null;
            //var response = instance.CorePaymentGetAvailableGateways(corePaymentGetAvailableGatewaysRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreQuestionGetRandomQuestionSummaries
        /// </summary>
        [Fact]
        public void CoreQuestionGetRandomQuestionSummariesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreQuestionGetRandomQuestionSummariesRequest coreQuestionGetRandomQuestionSummariesRequest = null;
            //var response = instance.CoreQuestionGetRandomQuestionSummaries(coreQuestionGetRandomQuestionSummariesRequest);
            //Assert.IsType<CoreQuestionGetRandomQuestionSummaries200Response>(response);
        }

        /// <summary>
        /// Test CoreQuestionSubmitTagsForm
        /// </summary>
        [Fact]
        public void CoreQuestionSubmitTagsFormTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreQuestionSubmitTagsFormRequest coreQuestionSubmitTagsFormRequest = null;
            //var response = instance.CoreQuestionSubmitTagsForm(coreQuestionSubmitTagsFormRequest);
            //Assert.IsType<CoreQuestionSubmitTagsForm200Response>(response);
        }

        /// <summary>
        /// Test CoreQuestionUpdateFlag
        /// </summary>
        [Fact]
        public void CoreQuestionUpdateFlagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreQuestionUpdateFlagRequest coreQuestionUpdateFlagRequest = null;
            //var response = instance.CoreQuestionUpdateFlag(coreQuestionUpdateFlagRequest);
            //Assert.IsType<CoreCalendarDeleteSubscription200Response>(response);
        }

        /// <summary>
        /// Test CoreRatingAddRating
        /// </summary>
        [Fact]
        public void CoreRatingAddRatingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreRatingAddRatingRequest coreRatingAddRatingRequest = null;
            //var response = instance.CoreRatingAddRating(coreRatingAddRatingRequest);
            //Assert.IsType<CoreRatingAddRating200Response>(response);
        }

        /// <summary>
        /// Test CoreRatingGetItemRatings
        /// </summary>
        [Fact]
        public void CoreRatingGetItemRatingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreRatingGetItemRatingsRequest coreRatingGetItemRatingsRequest = null;
            //var response = instance.CoreRatingGetItemRatings(coreRatingGetItemRatingsRequest);
            //Assert.IsType<CoreRatingGetItemRatings200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderAudiencesDelete
        /// </summary>
        [Fact]
        public void CoreReportbuilderAudiencesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderAudiencesDeleteRequest coreReportbuilderAudiencesDeleteRequest = null;
            //var response = instance.CoreReportbuilderAudiencesDelete(coreReportbuilderAudiencesDeleteRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderCanViewSystemReport
        /// </summary>
        [Fact]
        public void CoreReportbuilderCanViewSystemReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderCanViewSystemReportRequest coreReportbuilderCanViewSystemReportRequest = null;
            //var response = instance.CoreReportbuilderCanViewSystemReport(coreReportbuilderCanViewSystemReportRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderColumnsAdd
        /// </summary>
        [Fact]
        public void CoreReportbuilderColumnsAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderColumnsAddRequest coreReportbuilderColumnsAddRequest = null;
            //var response = instance.CoreReportbuilderColumnsAdd(coreReportbuilderColumnsAddRequest);
            //Assert.IsType<CoreReportbuilderColumnsAdd200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderColumnsDelete
        /// </summary>
        [Fact]
        public void CoreReportbuilderColumnsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderColumnsDeleteRequest coreReportbuilderColumnsDeleteRequest = null;
            //var response = instance.CoreReportbuilderColumnsDelete(coreReportbuilderColumnsDeleteRequest);
            //Assert.IsType<CoreReportbuilderColumnsDelete200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderColumnsReorder
        /// </summary>
        [Fact]
        public void CoreReportbuilderColumnsReorderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderColumnsReorderRequest coreReportbuilderColumnsReorderRequest = null;
            //var response = instance.CoreReportbuilderColumnsReorder(coreReportbuilderColumnsReorderRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderColumnsSortGet
        /// </summary>
        [Fact]
        public void CoreReportbuilderColumnsSortGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest = null;
            //var response = instance.CoreReportbuilderColumnsSortGet(coreReportbuilderColumnsSortGetRequest);
            //Assert.IsType<CoreReportbuilderColumnsDelete200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderColumnsSortReorder
        /// </summary>
        [Fact]
        public void CoreReportbuilderColumnsSortReorderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderColumnsSortReorderRequest coreReportbuilderColumnsSortReorderRequest = null;
            //var response = instance.CoreReportbuilderColumnsSortReorder(coreReportbuilderColumnsSortReorderRequest);
            //Assert.IsType<CoreReportbuilderColumnsDelete200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderColumnsSortToggle
        /// </summary>
        [Fact]
        public void CoreReportbuilderColumnsSortToggleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderColumnsSortToggleRequest coreReportbuilderColumnsSortToggleRequest = null;
            //var response = instance.CoreReportbuilderColumnsSortToggle(coreReportbuilderColumnsSortToggleRequest);
            //Assert.IsType<CoreReportbuilderColumnsDelete200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderConditionsAdd
        /// </summary>
        [Fact]
        public void CoreReportbuilderConditionsAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderConditionsAddRequest coreReportbuilderConditionsAddRequest = null;
            //var response = instance.CoreReportbuilderConditionsAdd(coreReportbuilderConditionsAddRequest);
            //Assert.IsType<CoreReportbuilderConditionsAdd200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderConditionsDelete
        /// </summary>
        [Fact]
        public void CoreReportbuilderConditionsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderConditionsDeleteRequest coreReportbuilderConditionsDeleteRequest = null;
            //var response = instance.CoreReportbuilderConditionsDelete(coreReportbuilderConditionsDeleteRequest);
            //Assert.IsType<CoreReportbuilderConditionsDelete200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderConditionsReorder
        /// </summary>
        [Fact]
        public void CoreReportbuilderConditionsReorderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderConditionsReorderRequest coreReportbuilderConditionsReorderRequest = null;
            //var response = instance.CoreReportbuilderConditionsReorder(coreReportbuilderConditionsReorderRequest);
            //Assert.IsType<CoreReportbuilderConditionsDelete200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderConditionsReset
        /// </summary>
        [Fact]
        public void CoreReportbuilderConditionsResetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest = null;
            //var response = instance.CoreReportbuilderConditionsReset(coreReportbuilderColumnsSortGetRequest);
            //Assert.IsType<CoreReportbuilderConditionsDelete200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderFiltersAdd
        /// </summary>
        [Fact]
        public void CoreReportbuilderFiltersAddTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderFiltersAddRequest coreReportbuilderFiltersAddRequest = null;
            //var response = instance.CoreReportbuilderFiltersAdd(coreReportbuilderFiltersAddRequest);
            //Assert.IsType<CoreReportbuilderFiltersAdd200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderFiltersDelete
        /// </summary>
        [Fact]
        public void CoreReportbuilderFiltersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderFiltersDeleteRequest coreReportbuilderFiltersDeleteRequest = null;
            //var response = instance.CoreReportbuilderFiltersDelete(coreReportbuilderFiltersDeleteRequest);
            //Assert.IsType<CoreReportbuilderFiltersDelete200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderFiltersReorder
        /// </summary>
        [Fact]
        public void CoreReportbuilderFiltersReorderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderFiltersReorderRequest coreReportbuilderFiltersReorderRequest = null;
            //var response = instance.CoreReportbuilderFiltersReorder(coreReportbuilderFiltersReorderRequest);
            //Assert.IsType<CoreReportbuilderFiltersDelete200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderFiltersReset
        /// </summary>
        [Fact]
        public void CoreReportbuilderFiltersResetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderFiltersResetRequest coreReportbuilderFiltersResetRequest = null;
            //var response = instance.CoreReportbuilderFiltersReset(coreReportbuilderFiltersResetRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderListReports
        /// </summary>
        [Fact]
        public void CoreReportbuilderListReportsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderListReportsRequest coreReportbuilderListReportsRequest = null;
            //var response = instance.CoreReportbuilderListReports(coreReportbuilderListReportsRequest);
            //Assert.IsType<CoreReportbuilderListReports200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderReportsDelete
        /// </summary>
        [Fact]
        public void CoreReportbuilderReportsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest = null;
            //var response = instance.CoreReportbuilderReportsDelete(coreReportbuilderColumnsSortGetRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderReportsGet
        /// </summary>
        [Fact]
        public void CoreReportbuilderReportsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderReportsGetRequest coreReportbuilderReportsGetRequest = null;
            //var response = instance.CoreReportbuilderReportsGet(coreReportbuilderReportsGetRequest);
            //Assert.IsType<CoreReportbuilderReportsGet200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderRetrieveReport
        /// </summary>
        [Fact]
        public void CoreReportbuilderRetrieveReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderRetrieveReportRequest coreReportbuilderRetrieveReportRequest = null;
            //var response = instance.CoreReportbuilderRetrieveReport(coreReportbuilderRetrieveReportRequest);
            //Assert.IsType<CoreReportbuilderRetrieveReport200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderRetrieveSystemReport
        /// </summary>
        [Fact]
        public void CoreReportbuilderRetrieveSystemReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderRetrieveSystemReportRequest coreReportbuilderRetrieveSystemReportRequest = null;
            //var response = instance.CoreReportbuilderRetrieveSystemReport(coreReportbuilderRetrieveSystemReportRequest);
            //Assert.IsType<CoreReportbuilderRetrieveSystemReport200Response>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderSchedulesDelete
        /// </summary>
        [Fact]
        public void CoreReportbuilderSchedulesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderSchedulesDeleteRequest coreReportbuilderSchedulesDeleteRequest = null;
            //var response = instance.CoreReportbuilderSchedulesDelete(coreReportbuilderSchedulesDeleteRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderSchedulesSend
        /// </summary>
        [Fact]
        public void CoreReportbuilderSchedulesSendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderSchedulesSendRequest coreReportbuilderSchedulesSendRequest = null;
            //var response = instance.CoreReportbuilderSchedulesSend(coreReportbuilderSchedulesSendRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderSchedulesToggle
        /// </summary>
        [Fact]
        public void CoreReportbuilderSchedulesToggleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderSchedulesToggleRequest coreReportbuilderSchedulesToggleRequest = null;
            //var response = instance.CoreReportbuilderSchedulesToggle(coreReportbuilderSchedulesToggleRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderSetFilters
        /// </summary>
        [Fact]
        public void CoreReportbuilderSetFiltersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderSetFiltersRequest coreReportbuilderSetFiltersRequest = null;
            //var response = instance.CoreReportbuilderSetFilters(coreReportbuilderSetFiltersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreReportbuilderViewReport
        /// </summary>
        [Fact]
        public void CoreReportbuilderViewReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreReportbuilderColumnsSortGetRequest coreReportbuilderColumnsSortGetRequest = null;
            //var response = instance.CoreReportbuilderViewReport(coreReportbuilderColumnsSortGetRequest);
            //Assert.IsType<CoreReportbuilderViewReport200Response>(response);
        }

        /// <summary>
        /// Test CoreRoleAssignRoles
        /// </summary>
        [Fact]
        public void CoreRoleAssignRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreRoleAssignRolesRequest coreRoleAssignRolesRequest = null;
            //var response = instance.CoreRoleAssignRoles(coreRoleAssignRolesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreRoleUnassignRoles
        /// </summary>
        [Fact]
        public void CoreRoleUnassignRolesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreRoleUnassignRolesRequest coreRoleUnassignRolesRequest = null;
            //var response = instance.CoreRoleUnassignRoles(coreRoleUnassignRolesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreSearchGetRelevantUsers
        /// </summary>
        [Fact]
        public void CoreSearchGetRelevantUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreSearchGetRelevantUsersRequest coreSearchGetRelevantUsersRequest = null;
            //var response = instance.CoreSearchGetRelevantUsers(coreSearchGetRelevantUsersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreSearchGetResults
        /// </summary>
        [Fact]
        public void CoreSearchGetResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreSearchGetResultsRequest coreSearchGetResultsRequest = null;
            //var response = instance.CoreSearchGetResults(coreSearchGetResultsRequest);
            //Assert.IsType<CoreSearchGetResults200Response>(response);
        }

        /// <summary>
        /// Test CoreSearchGetSearchAreasList
        /// </summary>
        [Fact]
        public void CoreSearchGetSearchAreasListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreSearchGetSearchAreasListRequest coreSearchGetSearchAreasListRequest = null;
            //var response = instance.CoreSearchGetSearchAreasList(coreSearchGetSearchAreasListRequest);
            //Assert.IsType<CoreSearchGetSearchAreasList200Response>(response);
        }

        /// <summary>
        /// Test CoreSearchGetTopResults
        /// </summary>
        [Fact]
        public void CoreSearchGetTopResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreSearchGetTopResultsRequest coreSearchGetTopResultsRequest = null;
            //var response = instance.CoreSearchGetTopResults(coreSearchGetTopResultsRequest);
            //Assert.IsType<CoreSearchGetTopResults200Response>(response);
        }

        /// <summary>
        /// Test CoreSearchViewResults
        /// </summary>
        [Fact]
        public void CoreSearchViewResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreSearchViewResultsRequest coreSearchViewResultsRequest = null;
            //var response = instance.CoreSearchViewResults(coreSearchViewResultsRequest);
            //Assert.IsType<CoreCalendarDeleteSubscription200Response>(response);
        }

        /// <summary>
        /// Test CoreSessionTimeRemaining
        /// </summary>
        [Fact]
        public void CoreSessionTimeRemainingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CoreSessionTimeRemaining();
            //Assert.IsType<CoreSessionTimeRemaining200Response>(response);
        }

        /// <summary>
        /// Test CoreSessionTouch
        /// </summary>
        [Fact]
        public void CoreSessionTouchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CoreSessionTouch();
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreTableGetDynamicTableContent
        /// </summary>
        [Fact]
        public void CoreTableGetDynamicTableContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreTableGetDynamicTableContentRequest coreTableGetDynamicTableContentRequest = null;
            //var response = instance.CoreTableGetDynamicTableContent(coreTableGetDynamicTableContentRequest);
            //Assert.IsType<CoreTableGetDynamicTableContent200Response>(response);
        }

        /// <summary>
        /// Test CoreTagGetTagAreas
        /// </summary>
        [Fact]
        public void CoreTagGetTagAreasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CoreTagGetTagAreas();
            //Assert.IsType<CoreTagGetTagAreas200Response>(response);
        }

        /// <summary>
        /// Test CoreTagGetTagCloud
        /// </summary>
        [Fact]
        public void CoreTagGetTagCloudTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreTagGetTagCloudRequest coreTagGetTagCloudRequest = null;
            //var response = instance.CoreTagGetTagCloud(coreTagGetTagCloudRequest);
            //Assert.IsType<CoreTagGetTagCloud200Response>(response);
        }

        /// <summary>
        /// Test CoreTagGetTagCollections
        /// </summary>
        [Fact]
        public void CoreTagGetTagCollectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CoreTagGetTagCollections();
            //Assert.IsType<CoreTagGetTagCollections200Response>(response);
        }

        /// <summary>
        /// Test CoreTagGetTagindex
        /// </summary>
        [Fact]
        public void CoreTagGetTagindexTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreTagGetTagindexRequest coreTagGetTagindexRequest = null;
            //var response = instance.CoreTagGetTagindex(coreTagGetTagindexRequest);
            //Assert.IsType<CoreTagGetTagindex200Response>(response);
        }

        /// <summary>
        /// Test CoreTagGetTagindexPerArea
        /// </summary>
        [Fact]
        public void CoreTagGetTagindexPerAreaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreTagGetTagindexPerAreaRequest coreTagGetTagindexPerAreaRequest = null;
            //var response = instance.CoreTagGetTagindexPerArea(coreTagGetTagindexPerAreaRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreTagGetTags
        /// </summary>
        [Fact]
        public void CoreTagGetTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreTagGetTagsRequest coreTagGetTagsRequest = null;
            //var response = instance.CoreTagGetTags(coreTagGetTagsRequest);
            //Assert.IsType<CoreTagGetTags200Response>(response);
        }

        /// <summary>
        /// Test CoreTagUpdateTags
        /// </summary>
        [Fact]
        public void CoreTagUpdateTagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreTagUpdateTagsRequest coreTagUpdateTagsRequest = null;
            //var response = instance.CoreTagUpdateTags(coreTagUpdateTagsRequest);
            //Assert.IsType<CoreCohortAddCohortMembers200Response>(response);
        }

        /// <summary>
        /// Test CoreUpdateInplaceEditable
        /// </summary>
        [Fact]
        public void CoreUpdateInplaceEditableTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUpdateInplaceEditableRequest coreUpdateInplaceEditableRequest = null;
            //var response = instance.CoreUpdateInplaceEditable(coreUpdateInplaceEditableRequest);
            //Assert.IsType<CoreUpdateInplaceEditable200Response>(response);
        }

        /// <summary>
        /// Test CoreUserAddUserDevice
        /// </summary>
        [Fact]
        public void CoreUserAddUserDeviceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserAddUserDeviceRequest coreUserAddUserDeviceRequest = null;
            //var response = instance.CoreUserAddUserDevice(coreUserAddUserDeviceRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreUserAddUserPrivateFiles
        /// </summary>
        [Fact]
        public void CoreUserAddUserPrivateFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserAddUserPrivateFilesRequest coreUserAddUserPrivateFilesRequest = null;
            //var response = instance.CoreUserAddUserPrivateFiles(coreUserAddUserPrivateFilesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreUserAgreeSitePolicy
        /// </summary>
        [Fact]
        public void CoreUserAgreeSitePolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CoreUserAgreeSitePolicy();
            //Assert.IsType<CoreUserAgreeSitePolicy200Response>(response);
        }

        /// <summary>
        /// Test CoreUserCreateUsers
        /// </summary>
        [Fact]
        public void CoreUserCreateUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserCreateUsersRequest coreUserCreateUsersRequest = null;
            //var response = instance.CoreUserCreateUsers(coreUserCreateUsersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreUserDeleteUsers
        /// </summary>
        [Fact]
        public void CoreUserDeleteUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserDeleteUsersRequest coreUserDeleteUsersRequest = null;
            //var response = instance.CoreUserDeleteUsers(coreUserDeleteUsersRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreUserGetCourseUserProfiles
        /// </summary>
        [Fact]
        public void CoreUserGetCourseUserProfilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserGetCourseUserProfilesRequest coreUserGetCourseUserProfilesRequest = null;
            //var response = instance.CoreUserGetCourseUserProfiles(coreUserGetCourseUserProfilesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreUserGetPrivateFilesInfo
        /// </summary>
        [Fact]
        public void CoreUserGetPrivateFilesInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserGetPrivateFilesInfoRequest coreUserGetPrivateFilesInfoRequest = null;
            //var response = instance.CoreUserGetPrivateFilesInfo(coreUserGetPrivateFilesInfoRequest);
            //Assert.IsType<CoreUserGetPrivateFilesInfo200Response>(response);
        }

        /// <summary>
        /// Test CoreUserGetUserPreferences
        /// </summary>
        [Fact]
        public void CoreUserGetUserPreferencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserGetUserPreferencesRequest coreUserGetUserPreferencesRequest = null;
            //var response = instance.CoreUserGetUserPreferences(coreUserGetUserPreferencesRequest);
            //Assert.IsType<CoreUserGetUserPreferences200Response>(response);
        }

        /// <summary>
        /// Test CoreUserGetUsers
        /// </summary>
        [Fact]
        public void CoreUserGetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserGetUsersRequest coreUserGetUsersRequest = null;
            //var response = instance.CoreUserGetUsers(coreUserGetUsersRequest);
            //Assert.IsType<CoreUserGetUsers200Response>(response);
        }

        /// <summary>
        /// Test CoreUserGetUsersByField
        /// </summary>
        [Fact]
        public void CoreUserGetUsersByFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserGetUsersByFieldRequest coreUserGetUsersByFieldRequest = null;
            //var response = instance.CoreUserGetUsersByField(coreUserGetUsersByFieldRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreUserRemoveUserDevice
        /// </summary>
        [Fact]
        public void CoreUserRemoveUserDeviceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserRemoveUserDeviceRequest coreUserRemoveUserDeviceRequest = null;
            //var response = instance.CoreUserRemoveUserDevice(coreUserRemoveUserDeviceRequest);
            //Assert.IsType<CoreUserRemoveUserDevice200Response>(response);
        }

        /// <summary>
        /// Test CoreUserSearchIdentity
        /// </summary>
        [Fact]
        public void CoreUserSearchIdentityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserSearchIdentityRequest coreUserSearchIdentityRequest = null;
            //var response = instance.CoreUserSearchIdentity(coreUserSearchIdentityRequest);
            //Assert.IsType<CoreUserSearchIdentity200Response>(response);
        }

        /// <summary>
        /// Test CoreUserSetUserPreferences
        /// </summary>
        [Fact]
        public void CoreUserSetUserPreferencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserSetUserPreferencesRequest coreUserSetUserPreferencesRequest = null;
            //var response = instance.CoreUserSetUserPreferences(coreUserSetUserPreferencesRequest);
            //Assert.IsType<CoreUserSetUserPreferences200Response>(response);
        }

        /// <summary>
        /// Test CoreUserUpdatePicture
        /// </summary>
        [Fact]
        public void CoreUserUpdatePictureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserUpdatePictureRequest coreUserUpdatePictureRequest = null;
            //var response = instance.CoreUserUpdatePicture(coreUserUpdatePictureRequest);
            //Assert.IsType<CoreUserUpdatePicture200Response>(response);
        }

        /// <summary>
        /// Test CoreUserUpdateUserDevicePublicKey
        /// </summary>
        [Fact]
        public void CoreUserUpdateUserDevicePublicKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserUpdateUserDevicePublicKeyRequest coreUserUpdateUserDevicePublicKeyRequest = null;
            //var response = instance.CoreUserUpdateUserDevicePublicKey(coreUserUpdateUserDevicePublicKeyRequest);
            //Assert.IsType<CoreUserUpdateUserDevicePublicKey200Response>(response);
        }

        /// <summary>
        /// Test CoreUserUpdateUserPreferences
        /// </summary>
        [Fact]
        public void CoreUserUpdateUserPreferencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserUpdateUserPreferencesRequest coreUserUpdateUserPreferencesRequest = null;
            //var response = instance.CoreUserUpdateUserPreferences(coreUserUpdateUserPreferencesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreUserUpdateUsers
        /// </summary>
        [Fact]
        public void CoreUserUpdateUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserUpdateUsersRequest coreUserUpdateUsersRequest = null;
            //var response = instance.CoreUserUpdateUsers(coreUserUpdateUsersRequest);
            //Assert.IsType<CoreCohortAddCohortMembers200Response>(response);
        }

        /// <summary>
        /// Test CoreUserViewUserList
        /// </summary>
        [Fact]
        public void CoreUserViewUserListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserViewUserListRequest coreUserViewUserListRequest = null;
            //var response = instance.CoreUserViewUserList(coreUserViewUserListRequest);
            //Assert.IsType<CoreCalendarDeleteSubscription200Response>(response);
        }

        /// <summary>
        /// Test CoreUserViewUserProfile
        /// </summary>
        [Fact]
        public void CoreUserViewUserProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreUserViewUserProfileRequest coreUserViewUserProfileRequest = null;
            //var response = instance.CoreUserViewUserProfile(coreUserViewUserProfileRequest);
            //Assert.IsType<CoreCalendarDeleteSubscription200Response>(response);
        }

        /// <summary>
        /// Test CoreWebserviceGetSiteInfo
        /// </summary>
        [Fact]
        public void CoreWebserviceGetSiteInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreWebserviceGetSiteInfoRequest coreWebserviceGetSiteInfoRequest = null;
            //var response = instance.CoreWebserviceGetSiteInfo(coreWebserviceGetSiteInfoRequest);
            //Assert.IsType<CoreWebserviceGetSiteInfo200Response>(response);
        }

        /// <summary>
        /// Test CoreXapiDeleteState
        /// </summary>
        [Fact]
        public void CoreXapiDeleteStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreXapiDeleteStateRequest coreXapiDeleteStateRequest = null;
            //var response = instance.CoreXapiDeleteState(coreXapiDeleteStateRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreXapiDeleteStates
        /// </summary>
        [Fact]
        public void CoreXapiDeleteStatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreXapiDeleteStatesRequest coreXapiDeleteStatesRequest = null;
            //var response = instance.CoreXapiDeleteStates(coreXapiDeleteStatesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreXapiGetState
        /// </summary>
        [Fact]
        public void CoreXapiGetStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreXapiGetStateRequest coreXapiGetStateRequest = null;
            //var response = instance.CoreXapiGetState(coreXapiGetStateRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreXapiGetStates
        /// </summary>
        [Fact]
        public void CoreXapiGetStatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreXapiGetStatesRequest coreXapiGetStatesRequest = null;
            //var response = instance.CoreXapiGetStates(coreXapiGetStatesRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreXapiPostState
        /// </summary>
        [Fact]
        public void CoreXapiPostStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreXapiPostStateRequest coreXapiPostStateRequest = null;
            //var response = instance.CoreXapiPostState(coreXapiPostStateRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CoreXapiStatementPost
        /// </summary>
        [Fact]
        public void CoreXapiStatementPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CoreXapiStatementPostRequest coreXapiStatementPostRequest = null;
            //var response = instance.CoreXapiStatementPost(coreXapiStatementPostRequest);
            //Assert.IsType<Object>(response);
        }
    }
}
