/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MoodleClient.Client;
using MoodleClient.Model;

namespace MoodleClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModSurveyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the complete list of questions for the survey, including subquestions.
        /// </summary>
        /// <remarks>
        /// Get the complete list of questions for the survey, including subquestions.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyGetQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModSurveyGetQuestions200Response</returns>
        ModSurveyGetQuestions200Response ModSurveyGetQuestions(ModSurveyGetQuestionsRequest modSurveyGetQuestionsRequest, int operationIndex = 0);

        /// <summary>
        /// Get the complete list of questions for the survey, including subquestions.
        /// </summary>
        /// <remarks>
        /// Get the complete list of questions for the survey, including subquestions.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyGetQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModSurveyGetQuestions200Response</returns>
        ApiResponse<ModSurveyGetQuestions200Response> ModSurveyGetQuestionsWithHttpInfo(ModSurveyGetQuestionsRequest modSurveyGetQuestionsRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModSurveyGetSurveysByCourses200Response</returns>
        ModSurveyGetSurveysByCourses200Response ModSurveyGetSurveysByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModSurveyGetSurveysByCourses200Response</returns>
        ApiResponse<ModSurveyGetSurveysByCourses200Response> ModSurveyGetSurveysByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Submit the answers for a given survey.
        /// </summary>
        /// <remarks>
        /// Submit the answers for a given survey.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveySubmitAnswersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModSurveySubmitAnswers(ModSurveySubmitAnswersRequest modSurveySubmitAnswersRequest, int operationIndex = 0);

        /// <summary>
        /// Submit the answers for a given survey.
        /// </summary>
        /// <remarks>
        /// Submit the answers for a given survey.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveySubmitAnswersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModSurveySubmitAnswersWithHttpInfo(ModSurveySubmitAnswersRequest modSurveySubmitAnswersRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyViewSurveyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModSurveyViewSurvey(ModSurveyViewSurveyRequest modSurveyViewSurveyRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyViewSurveyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModSurveyViewSurveyWithHttpInfo(ModSurveyViewSurveyRequest modSurveyViewSurveyRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModSurveyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the complete list of questions for the survey, including subquestions.
        /// </summary>
        /// <remarks>
        /// Get the complete list of questions for the survey, including subquestions.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyGetQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModSurveyGetQuestions200Response</returns>
        System.Threading.Tasks.Task<ModSurveyGetQuestions200Response> ModSurveyGetQuestionsAsync(ModSurveyGetQuestionsRequest modSurveyGetQuestionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the complete list of questions for the survey, including subquestions.
        /// </summary>
        /// <remarks>
        /// Get the complete list of questions for the survey, including subquestions.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyGetQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModSurveyGetQuestions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModSurveyGetQuestions200Response>> ModSurveyGetQuestionsWithHttpInfoAsync(ModSurveyGetQuestionsRequest modSurveyGetQuestionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModSurveyGetSurveysByCourses200Response</returns>
        System.Threading.Tasks.Task<ModSurveyGetSurveysByCourses200Response> ModSurveyGetSurveysByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModSurveyGetSurveysByCourses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModSurveyGetSurveysByCourses200Response>> ModSurveyGetSurveysByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit the answers for a given survey.
        /// </summary>
        /// <remarks>
        /// Submit the answers for a given survey.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveySubmitAnswersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModSurveySubmitAnswersAsync(ModSurveySubmitAnswersRequest modSurveySubmitAnswersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit the answers for a given survey.
        /// </summary>
        /// <remarks>
        /// Submit the answers for a given survey.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveySubmitAnswersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModSurveySubmitAnswersWithHttpInfoAsync(ModSurveySubmitAnswersRequest modSurveySubmitAnswersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyViewSurveyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModSurveyViewSurveyAsync(ModSurveyViewSurveyRequest modSurveyViewSurveyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyViewSurveyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModSurveyViewSurveyWithHttpInfoAsync(ModSurveyViewSurveyRequest modSurveyViewSurveyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModSurveyApi : IModSurveyApiSync, IModSurveyApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModSurveyApi : IModSurveyApi
    {
        private MoodleClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModSurveyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModSurveyApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModSurveyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModSurveyApi(string basePath)
        {
            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                new MoodleClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModSurveyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModSurveyApi(MoodleClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModSurveyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModSurveyApi(MoodleClient.Client.ISynchronousClient client, MoodleClient.Client.IAsynchronousClient asyncClient, MoodleClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MoodleClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MoodleClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MoodleClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MoodleClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the complete list of questions for the survey, including subquestions. Get the complete list of questions for the survey, including subquestions.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyGetQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModSurveyGetQuestions200Response</returns>
        public ModSurveyGetQuestions200Response ModSurveyGetQuestions(ModSurveyGetQuestionsRequest modSurveyGetQuestionsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModSurveyGetQuestions200Response> localVarResponse = ModSurveyGetQuestionsWithHttpInfo(modSurveyGetQuestionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the complete list of questions for the survey, including subquestions. Get the complete list of questions for the survey, including subquestions.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyGetQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModSurveyGetQuestions200Response</returns>
        public MoodleClient.Client.ApiResponse<ModSurveyGetQuestions200Response> ModSurveyGetQuestionsWithHttpInfo(ModSurveyGetQuestionsRequest modSurveyGetQuestionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modSurveyGetQuestionsRequest' is set
            if (modSurveyGetQuestionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modSurveyGetQuestionsRequest' when calling ModSurveyApi->ModSurveyGetQuestions");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modSurveyGetQuestionsRequest;

            localVarRequestOptions.Operation = "ModSurveyApi.ModSurveyGetQuestions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModSurveyGetQuestions200Response>("/mod_survey_get_questions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModSurveyGetQuestions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the complete list of questions for the survey, including subquestions. Get the complete list of questions for the survey, including subquestions.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyGetQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModSurveyGetQuestions200Response</returns>
        public async System.Threading.Tasks.Task<ModSurveyGetQuestions200Response> ModSurveyGetQuestionsAsync(ModSurveyGetQuestionsRequest modSurveyGetQuestionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModSurveyGetQuestions200Response> localVarResponse = await ModSurveyGetQuestionsWithHttpInfoAsync(modSurveyGetQuestionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the complete list of questions for the survey, including subquestions. Get the complete list of questions for the survey, including subquestions.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyGetQuestionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModSurveyGetQuestions200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModSurveyGetQuestions200Response>> ModSurveyGetQuestionsWithHttpInfoAsync(ModSurveyGetQuestionsRequest modSurveyGetQuestionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modSurveyGetQuestionsRequest' is set
            if (modSurveyGetQuestionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modSurveyGetQuestionsRequest' when calling ModSurveyApi->ModSurveyGetQuestions");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modSurveyGetQuestionsRequest;

            localVarRequestOptions.Operation = "ModSurveyApi.ModSurveyGetQuestions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModSurveyGetQuestions200Response>("/mod_survey_get_questions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModSurveyGetQuestions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned. Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModSurveyGetSurveysByCourses200Response</returns>
        public ModSurveyGetSurveysByCourses200Response ModSurveyGetSurveysByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModSurveyGetSurveysByCourses200Response> localVarResponse = ModSurveyGetSurveysByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned. Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModSurveyGetSurveysByCourses200Response</returns>
        public MoodleClient.Client.ApiResponse<ModSurveyGetSurveysByCourses200Response> ModSurveyGetSurveysByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModSurveyApi->ModSurveyGetSurveysByCourses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModSurveyApi.ModSurveyGetSurveysByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModSurveyGetSurveysByCourses200Response>("/mod_survey_get_surveys_by_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModSurveyGetSurveysByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned. Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModSurveyGetSurveysByCourses200Response</returns>
        public async System.Threading.Tasks.Task<ModSurveyGetSurveysByCourses200Response> ModSurveyGetSurveysByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModSurveyGetSurveysByCourses200Response> localVarResponse = await ModSurveyGetSurveysByCoursesWithHttpInfoAsync(modChatGetChatsByCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned. Returns a list of survey instances in a provided set of courses,                             if no courses are provided then all the survey instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModSurveyGetSurveysByCourses200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModSurveyGetSurveysByCourses200Response>> ModSurveyGetSurveysByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModSurveyApi->ModSurveyGetSurveysByCourses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModSurveyApi.ModSurveyGetSurveysByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModSurveyGetSurveysByCourses200Response>("/mod_survey_get_surveys_by_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModSurveyGetSurveysByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit the answers for a given survey. Submit the answers for a given survey.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveySubmitAnswersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModSurveySubmitAnswers(ModSurveySubmitAnswersRequest modSurveySubmitAnswersRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModSurveySubmitAnswersWithHttpInfo(modSurveySubmitAnswersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit the answers for a given survey. Submit the answers for a given survey.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveySubmitAnswersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModSurveySubmitAnswersWithHttpInfo(ModSurveySubmitAnswersRequest modSurveySubmitAnswersRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modSurveySubmitAnswersRequest' is set
            if (modSurveySubmitAnswersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modSurveySubmitAnswersRequest' when calling ModSurveyApi->ModSurveySubmitAnswers");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modSurveySubmitAnswersRequest;

            localVarRequestOptions.Operation = "ModSurveyApi.ModSurveySubmitAnswers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_survey_submit_answers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModSurveySubmitAnswers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit the answers for a given survey. Submit the answers for a given survey.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveySubmitAnswersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModSurveySubmitAnswersAsync(ModSurveySubmitAnswersRequest modSurveySubmitAnswersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModSurveySubmitAnswersWithHttpInfoAsync(modSurveySubmitAnswersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit the answers for a given survey. Submit the answers for a given survey.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveySubmitAnswersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModSurveySubmitAnswersWithHttpInfoAsync(ModSurveySubmitAnswersRequest modSurveySubmitAnswersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modSurveySubmitAnswersRequest' is set
            if (modSurveySubmitAnswersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modSurveySubmitAnswersRequest' when calling ModSurveyApi->ModSurveySubmitAnswers");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modSurveySubmitAnswersRequest;

            localVarRequestOptions.Operation = "ModSurveyApi.ModSurveySubmitAnswers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_survey_submit_answers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModSurveySubmitAnswers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyViewSurveyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModSurveyViewSurvey(ModSurveyViewSurveyRequest modSurveyViewSurveyRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModSurveyViewSurveyWithHttpInfo(modSurveyViewSurveyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyViewSurveyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModSurveyViewSurveyWithHttpInfo(ModSurveyViewSurveyRequest modSurveyViewSurveyRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modSurveyViewSurveyRequest' is set
            if (modSurveyViewSurveyRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modSurveyViewSurveyRequest' when calling ModSurveyApi->ModSurveyViewSurvey");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modSurveyViewSurveyRequest;

            localVarRequestOptions.Operation = "ModSurveyApi.ModSurveyViewSurvey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_survey_view_survey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModSurveyViewSurvey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyViewSurveyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModSurveyViewSurveyAsync(ModSurveyViewSurveyRequest modSurveyViewSurveyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModSurveyViewSurveyWithHttpInfoAsync(modSurveyViewSurveyRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modSurveyViewSurveyRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModSurveyViewSurveyWithHttpInfoAsync(ModSurveyViewSurveyRequest modSurveyViewSurveyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modSurveyViewSurveyRequest' is set
            if (modSurveyViewSurveyRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modSurveyViewSurveyRequest' when calling ModSurveyApi->ModSurveyViewSurvey");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modSurveyViewSurveyRequest;

            localVarRequestOptions.Operation = "ModSurveyApi.ModSurveyViewSurvey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_survey_view_survey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModSurveyViewSurvey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
