/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MoodleClient.Client;
using MoodleClient.Model;

namespace MoodleClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModScormApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Return capabilities information for a given scorm.
        /// </summary>
        /// <remarks>
        /// Return capabilities information for a given scorm.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModScormGetScormAccessInformation200Response</returns>
        ModScormGetScormAccessInformation200Response ModScormGetScormAccessInformation(ModScormGetScormAccessInformationRequest modScormGetScormAccessInformationRequest, int operationIndex = 0);

        /// <summary>
        /// Return capabilities information for a given scorm.
        /// </summary>
        /// <remarks>
        /// Return capabilities information for a given scorm.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModScormGetScormAccessInformation200Response</returns>
        ApiResponse<ModScormGetScormAccessInformation200Response> ModScormGetScormAccessInformationWithHttpInfo(ModScormGetScormAccessInformationRequest modScormGetScormAccessInformationRequest, int operationIndex = 0);
        /// <summary>
        /// Return the number of attempts done by a user in the given SCORM.
        /// </summary>
        /// <remarks>
        /// Return the number of attempts done by a user in the given SCORM.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAttemptCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModScormGetScormAttemptCount200Response</returns>
        ModScormGetScormAttemptCount200Response ModScormGetScormAttemptCount(ModScormGetScormAttemptCountRequest modScormGetScormAttemptCountRequest, int operationIndex = 0);

        /// <summary>
        /// Return the number of attempts done by a user in the given SCORM.
        /// </summary>
        /// <remarks>
        /// Return the number of attempts done by a user in the given SCORM.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAttemptCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModScormGetScormAttemptCount200Response</returns>
        ApiResponse<ModScormGetScormAttemptCount200Response> ModScormGetScormAttemptCountWithHttpInfo(ModScormGetScormAttemptCountRequest modScormGetScormAttemptCountRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves SCO tracking data for the given user id and attempt number
        /// </summary>
        /// <remarks>
        /// Retrieves SCO tracking data for the given user id and attempt number
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModScormGetScormScoTracks200Response</returns>
        ModScormGetScormScoTracks200Response ModScormGetScormScoTracks(ModScormGetScormScoTracksRequest modScormGetScormScoTracksRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves SCO tracking data for the given user id and attempt number
        /// </summary>
        /// <remarks>
        /// Retrieves SCO tracking data for the given user id and attempt number
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModScormGetScormScoTracks200Response</returns>
        ApiResponse<ModScormGetScormScoTracks200Response> ModScormGetScormScoTracksWithHttpInfo(ModScormGetScormScoTracksRequest modScormGetScormScoTracksRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list containing all the scoes data related to the given scorm id
        /// </summary>
        /// <remarks>
        /// Returns a list containing all the scoes data related to the given scorm id
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModScormGetScormScoes200Response</returns>
        ModScormGetScormScoes200Response ModScormGetScormScoes(ModScormGetScormScoesRequest modScormGetScormScoesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list containing all the scoes data related to the given scorm id
        /// </summary>
        /// <remarks>
        /// Returns a list containing all the scoes data related to the given scorm id
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModScormGetScormScoes200Response</returns>
        ApiResponse<ModScormGetScormScoes200Response> ModScormGetScormScoesWithHttpInfo(ModScormGetScormScoesRequest modScormGetScormScoesRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves user tracking and SCO data and default SCORM values
        /// </summary>
        /// <remarks>
        /// Retrieves user tracking and SCO data and default SCORM values
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormUserDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModScormGetScormUserData200Response</returns>
        ModScormGetScormUserData200Response ModScormGetScormUserData(ModScormGetScormUserDataRequest modScormGetScormUserDataRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves user tracking and SCO data and default SCORM values
        /// </summary>
        /// <remarks>
        /// Retrieves user tracking and SCO data and default SCORM values
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormUserDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModScormGetScormUserData200Response</returns>
        ApiResponse<ModScormGetScormUserData200Response> ModScormGetScormUserDataWithHttpInfo(ModScormGetScormUserDataRequest modScormGetScormUserDataRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModScormGetScormsByCourses200Response</returns>
        ModScormGetScormsByCourses200Response ModScormGetScormsByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModScormGetScormsByCourses200Response</returns>
        ApiResponse<ModScormGetScormsByCourses200Response> ModScormGetScormsByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
        /// </summary>
        /// <remarks>
        /// Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormInsertScormTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModScormInsertScormTracks200Response</returns>
        ModScormInsertScormTracks200Response ModScormInsertScormTracks(ModScormInsertScormTracksRequest modScormInsertScormTracksRequest, int operationIndex = 0);

        /// <summary>
        /// Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
        /// </summary>
        /// <remarks>
        /// Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormInsertScormTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModScormInsertScormTracks200Response</returns>
        ApiResponse<ModScormInsertScormTracks200Response> ModScormInsertScormTracksWithHttpInfo(ModScormInsertScormTracksRequest modScormInsertScormTracksRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the SCO launched event.
        /// </summary>
        /// <remarks>
        /// Trigger the SCO launched event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormLaunchScoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModScormLaunchSco(ModScormLaunchScoRequest modScormLaunchScoRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the SCO launched event.
        /// </summary>
        /// <remarks>
        /// Trigger the SCO launched event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormLaunchScoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModScormLaunchScoWithHttpInfo(ModScormLaunchScoRequest modScormLaunchScoRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the course module viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormViewScormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModScormViewScorm(ModScormViewScormRequest modScormViewScormRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the course module viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormViewScormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModScormViewScormWithHttpInfo(ModScormViewScormRequest modScormViewScormRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModScormApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Return capabilities information for a given scorm.
        /// </summary>
        /// <remarks>
        /// Return capabilities information for a given scorm.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModScormGetScormAccessInformation200Response</returns>
        System.Threading.Tasks.Task<ModScormGetScormAccessInformation200Response> ModScormGetScormAccessInformationAsync(ModScormGetScormAccessInformationRequest modScormGetScormAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return capabilities information for a given scorm.
        /// </summary>
        /// <remarks>
        /// Return capabilities information for a given scorm.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModScormGetScormAccessInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModScormGetScormAccessInformation200Response>> ModScormGetScormAccessInformationWithHttpInfoAsync(ModScormGetScormAccessInformationRequest modScormGetScormAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the number of attempts done by a user in the given SCORM.
        /// </summary>
        /// <remarks>
        /// Return the number of attempts done by a user in the given SCORM.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAttemptCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModScormGetScormAttemptCount200Response</returns>
        System.Threading.Tasks.Task<ModScormGetScormAttemptCount200Response> ModScormGetScormAttemptCountAsync(ModScormGetScormAttemptCountRequest modScormGetScormAttemptCountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the number of attempts done by a user in the given SCORM.
        /// </summary>
        /// <remarks>
        /// Return the number of attempts done by a user in the given SCORM.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAttemptCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModScormGetScormAttemptCount200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModScormGetScormAttemptCount200Response>> ModScormGetScormAttemptCountWithHttpInfoAsync(ModScormGetScormAttemptCountRequest modScormGetScormAttemptCountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves SCO tracking data for the given user id and attempt number
        /// </summary>
        /// <remarks>
        /// Retrieves SCO tracking data for the given user id and attempt number
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModScormGetScormScoTracks200Response</returns>
        System.Threading.Tasks.Task<ModScormGetScormScoTracks200Response> ModScormGetScormScoTracksAsync(ModScormGetScormScoTracksRequest modScormGetScormScoTracksRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves SCO tracking data for the given user id and attempt number
        /// </summary>
        /// <remarks>
        /// Retrieves SCO tracking data for the given user id and attempt number
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModScormGetScormScoTracks200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModScormGetScormScoTracks200Response>> ModScormGetScormScoTracksWithHttpInfoAsync(ModScormGetScormScoTracksRequest modScormGetScormScoTracksRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list containing all the scoes data related to the given scorm id
        /// </summary>
        /// <remarks>
        /// Returns a list containing all the scoes data related to the given scorm id
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModScormGetScormScoes200Response</returns>
        System.Threading.Tasks.Task<ModScormGetScormScoes200Response> ModScormGetScormScoesAsync(ModScormGetScormScoesRequest modScormGetScormScoesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list containing all the scoes data related to the given scorm id
        /// </summary>
        /// <remarks>
        /// Returns a list containing all the scoes data related to the given scorm id
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModScormGetScormScoes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModScormGetScormScoes200Response>> ModScormGetScormScoesWithHttpInfoAsync(ModScormGetScormScoesRequest modScormGetScormScoesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves user tracking and SCO data and default SCORM values
        /// </summary>
        /// <remarks>
        /// Retrieves user tracking and SCO data and default SCORM values
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormUserDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModScormGetScormUserData200Response</returns>
        System.Threading.Tasks.Task<ModScormGetScormUserData200Response> ModScormGetScormUserDataAsync(ModScormGetScormUserDataRequest modScormGetScormUserDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves user tracking and SCO data and default SCORM values
        /// </summary>
        /// <remarks>
        /// Retrieves user tracking and SCO data and default SCORM values
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormUserDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModScormGetScormUserData200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModScormGetScormUserData200Response>> ModScormGetScormUserDataWithHttpInfoAsync(ModScormGetScormUserDataRequest modScormGetScormUserDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModScormGetScormsByCourses200Response</returns>
        System.Threading.Tasks.Task<ModScormGetScormsByCourses200Response> ModScormGetScormsByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModScormGetScormsByCourses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModScormGetScormsByCourses200Response>> ModScormGetScormsByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
        /// </summary>
        /// <remarks>
        /// Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormInsertScormTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModScormInsertScormTracks200Response</returns>
        System.Threading.Tasks.Task<ModScormInsertScormTracks200Response> ModScormInsertScormTracksAsync(ModScormInsertScormTracksRequest modScormInsertScormTracksRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
        /// </summary>
        /// <remarks>
        /// Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormInsertScormTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModScormInsertScormTracks200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModScormInsertScormTracks200Response>> ModScormInsertScormTracksWithHttpInfoAsync(ModScormInsertScormTracksRequest modScormInsertScormTracksRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the SCO launched event.
        /// </summary>
        /// <remarks>
        /// Trigger the SCO launched event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormLaunchScoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModScormLaunchScoAsync(ModScormLaunchScoRequest modScormLaunchScoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the SCO launched event.
        /// </summary>
        /// <remarks>
        /// Trigger the SCO launched event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormLaunchScoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModScormLaunchScoWithHttpInfoAsync(ModScormLaunchScoRequest modScormLaunchScoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the course module viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormViewScormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModScormViewScormAsync(ModScormViewScormRequest modScormViewScormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the course module viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormViewScormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModScormViewScormWithHttpInfoAsync(ModScormViewScormRequest modScormViewScormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModScormApi : IModScormApiSync, IModScormApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModScormApi : IModScormApi
    {
        private MoodleClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModScormApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModScormApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModScormApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModScormApi(string basePath)
        {
            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                new MoodleClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModScormApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModScormApi(MoodleClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModScormApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModScormApi(MoodleClient.Client.ISynchronousClient client, MoodleClient.Client.IAsynchronousClient asyncClient, MoodleClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MoodleClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MoodleClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MoodleClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MoodleClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Return capabilities information for a given scorm. Return capabilities information for a given scorm.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModScormGetScormAccessInformation200Response</returns>
        public ModScormGetScormAccessInformation200Response ModScormGetScormAccessInformation(ModScormGetScormAccessInformationRequest modScormGetScormAccessInformationRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModScormGetScormAccessInformation200Response> localVarResponse = ModScormGetScormAccessInformationWithHttpInfo(modScormGetScormAccessInformationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return capabilities information for a given scorm. Return capabilities information for a given scorm.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModScormGetScormAccessInformation200Response</returns>
        public MoodleClient.Client.ApiResponse<ModScormGetScormAccessInformation200Response> ModScormGetScormAccessInformationWithHttpInfo(ModScormGetScormAccessInformationRequest modScormGetScormAccessInformationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modScormGetScormAccessInformationRequest' is set
            if (modScormGetScormAccessInformationRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormGetScormAccessInformationRequest' when calling ModScormApi->ModScormGetScormAccessInformation");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormGetScormAccessInformationRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormGetScormAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModScormGetScormAccessInformation200Response>("/mod_scorm_get_scorm_access_information", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormGetScormAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return capabilities information for a given scorm. Return capabilities information for a given scorm.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModScormGetScormAccessInformation200Response</returns>
        public async System.Threading.Tasks.Task<ModScormGetScormAccessInformation200Response> ModScormGetScormAccessInformationAsync(ModScormGetScormAccessInformationRequest modScormGetScormAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModScormGetScormAccessInformation200Response> localVarResponse = await ModScormGetScormAccessInformationWithHttpInfoAsync(modScormGetScormAccessInformationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return capabilities information for a given scorm. Return capabilities information for a given scorm.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModScormGetScormAccessInformation200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModScormGetScormAccessInformation200Response>> ModScormGetScormAccessInformationWithHttpInfoAsync(ModScormGetScormAccessInformationRequest modScormGetScormAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modScormGetScormAccessInformationRequest' is set
            if (modScormGetScormAccessInformationRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormGetScormAccessInformationRequest' when calling ModScormApi->ModScormGetScormAccessInformation");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormGetScormAccessInformationRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormGetScormAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModScormGetScormAccessInformation200Response>("/mod_scorm_get_scorm_access_information", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormGetScormAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the number of attempts done by a user in the given SCORM. Return the number of attempts done by a user in the given SCORM.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAttemptCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModScormGetScormAttemptCount200Response</returns>
        public ModScormGetScormAttemptCount200Response ModScormGetScormAttemptCount(ModScormGetScormAttemptCountRequest modScormGetScormAttemptCountRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModScormGetScormAttemptCount200Response> localVarResponse = ModScormGetScormAttemptCountWithHttpInfo(modScormGetScormAttemptCountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the number of attempts done by a user in the given SCORM. Return the number of attempts done by a user in the given SCORM.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAttemptCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModScormGetScormAttemptCount200Response</returns>
        public MoodleClient.Client.ApiResponse<ModScormGetScormAttemptCount200Response> ModScormGetScormAttemptCountWithHttpInfo(ModScormGetScormAttemptCountRequest modScormGetScormAttemptCountRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modScormGetScormAttemptCountRequest' is set
            if (modScormGetScormAttemptCountRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormGetScormAttemptCountRequest' when calling ModScormApi->ModScormGetScormAttemptCount");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormGetScormAttemptCountRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormGetScormAttemptCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModScormGetScormAttemptCount200Response>("/mod_scorm_get_scorm_attempt_count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormGetScormAttemptCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the number of attempts done by a user in the given SCORM. Return the number of attempts done by a user in the given SCORM.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAttemptCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModScormGetScormAttemptCount200Response</returns>
        public async System.Threading.Tasks.Task<ModScormGetScormAttemptCount200Response> ModScormGetScormAttemptCountAsync(ModScormGetScormAttemptCountRequest modScormGetScormAttemptCountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModScormGetScormAttemptCount200Response> localVarResponse = await ModScormGetScormAttemptCountWithHttpInfoAsync(modScormGetScormAttemptCountRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the number of attempts done by a user in the given SCORM. Return the number of attempts done by a user in the given SCORM.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormAttemptCountRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModScormGetScormAttemptCount200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModScormGetScormAttemptCount200Response>> ModScormGetScormAttemptCountWithHttpInfoAsync(ModScormGetScormAttemptCountRequest modScormGetScormAttemptCountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modScormGetScormAttemptCountRequest' is set
            if (modScormGetScormAttemptCountRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormGetScormAttemptCountRequest' when calling ModScormApi->ModScormGetScormAttemptCount");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormGetScormAttemptCountRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormGetScormAttemptCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModScormGetScormAttemptCount200Response>("/mod_scorm_get_scorm_attempt_count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormGetScormAttemptCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves SCO tracking data for the given user id and attempt number Retrieves SCO tracking data for the given user id and attempt number
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModScormGetScormScoTracks200Response</returns>
        public ModScormGetScormScoTracks200Response ModScormGetScormScoTracks(ModScormGetScormScoTracksRequest modScormGetScormScoTracksRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModScormGetScormScoTracks200Response> localVarResponse = ModScormGetScormScoTracksWithHttpInfo(modScormGetScormScoTracksRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves SCO tracking data for the given user id and attempt number Retrieves SCO tracking data for the given user id and attempt number
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModScormGetScormScoTracks200Response</returns>
        public MoodleClient.Client.ApiResponse<ModScormGetScormScoTracks200Response> ModScormGetScormScoTracksWithHttpInfo(ModScormGetScormScoTracksRequest modScormGetScormScoTracksRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modScormGetScormScoTracksRequest' is set
            if (modScormGetScormScoTracksRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormGetScormScoTracksRequest' when calling ModScormApi->ModScormGetScormScoTracks");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormGetScormScoTracksRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormGetScormScoTracks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModScormGetScormScoTracks200Response>("/mod_scorm_get_scorm_sco_tracks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormGetScormScoTracks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves SCO tracking data for the given user id and attempt number Retrieves SCO tracking data for the given user id and attempt number
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModScormGetScormScoTracks200Response</returns>
        public async System.Threading.Tasks.Task<ModScormGetScormScoTracks200Response> ModScormGetScormScoTracksAsync(ModScormGetScormScoTracksRequest modScormGetScormScoTracksRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModScormGetScormScoTracks200Response> localVarResponse = await ModScormGetScormScoTracksWithHttpInfoAsync(modScormGetScormScoTracksRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves SCO tracking data for the given user id and attempt number Retrieves SCO tracking data for the given user id and attempt number
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModScormGetScormScoTracks200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModScormGetScormScoTracks200Response>> ModScormGetScormScoTracksWithHttpInfoAsync(ModScormGetScormScoTracksRequest modScormGetScormScoTracksRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modScormGetScormScoTracksRequest' is set
            if (modScormGetScormScoTracksRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormGetScormScoTracksRequest' when calling ModScormApi->ModScormGetScormScoTracks");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormGetScormScoTracksRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormGetScormScoTracks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModScormGetScormScoTracks200Response>("/mod_scorm_get_scorm_sco_tracks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormGetScormScoTracks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list containing all the scoes data related to the given scorm id Returns a list containing all the scoes data related to the given scorm id
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModScormGetScormScoes200Response</returns>
        public ModScormGetScormScoes200Response ModScormGetScormScoes(ModScormGetScormScoesRequest modScormGetScormScoesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModScormGetScormScoes200Response> localVarResponse = ModScormGetScormScoesWithHttpInfo(modScormGetScormScoesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list containing all the scoes data related to the given scorm id Returns a list containing all the scoes data related to the given scorm id
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModScormGetScormScoes200Response</returns>
        public MoodleClient.Client.ApiResponse<ModScormGetScormScoes200Response> ModScormGetScormScoesWithHttpInfo(ModScormGetScormScoesRequest modScormGetScormScoesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modScormGetScormScoesRequest' is set
            if (modScormGetScormScoesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormGetScormScoesRequest' when calling ModScormApi->ModScormGetScormScoes");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormGetScormScoesRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormGetScormScoes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModScormGetScormScoes200Response>("/mod_scorm_get_scorm_scoes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormGetScormScoes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list containing all the scoes data related to the given scorm id Returns a list containing all the scoes data related to the given scorm id
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModScormGetScormScoes200Response</returns>
        public async System.Threading.Tasks.Task<ModScormGetScormScoes200Response> ModScormGetScormScoesAsync(ModScormGetScormScoesRequest modScormGetScormScoesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModScormGetScormScoes200Response> localVarResponse = await ModScormGetScormScoesWithHttpInfoAsync(modScormGetScormScoesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list containing all the scoes data related to the given scorm id Returns a list containing all the scoes data related to the given scorm id
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormScoesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModScormGetScormScoes200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModScormGetScormScoes200Response>> ModScormGetScormScoesWithHttpInfoAsync(ModScormGetScormScoesRequest modScormGetScormScoesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modScormGetScormScoesRequest' is set
            if (modScormGetScormScoesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormGetScormScoesRequest' when calling ModScormApi->ModScormGetScormScoes");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormGetScormScoesRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormGetScormScoes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModScormGetScormScoes200Response>("/mod_scorm_get_scorm_scoes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormGetScormScoes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves user tracking and SCO data and default SCORM values Retrieves user tracking and SCO data and default SCORM values
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormUserDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModScormGetScormUserData200Response</returns>
        public ModScormGetScormUserData200Response ModScormGetScormUserData(ModScormGetScormUserDataRequest modScormGetScormUserDataRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModScormGetScormUserData200Response> localVarResponse = ModScormGetScormUserDataWithHttpInfo(modScormGetScormUserDataRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves user tracking and SCO data and default SCORM values Retrieves user tracking and SCO data and default SCORM values
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormUserDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModScormGetScormUserData200Response</returns>
        public MoodleClient.Client.ApiResponse<ModScormGetScormUserData200Response> ModScormGetScormUserDataWithHttpInfo(ModScormGetScormUserDataRequest modScormGetScormUserDataRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modScormGetScormUserDataRequest' is set
            if (modScormGetScormUserDataRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormGetScormUserDataRequest' when calling ModScormApi->ModScormGetScormUserData");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormGetScormUserDataRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormGetScormUserData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModScormGetScormUserData200Response>("/mod_scorm_get_scorm_user_data", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormGetScormUserData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves user tracking and SCO data and default SCORM values Retrieves user tracking and SCO data and default SCORM values
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormUserDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModScormGetScormUserData200Response</returns>
        public async System.Threading.Tasks.Task<ModScormGetScormUserData200Response> ModScormGetScormUserDataAsync(ModScormGetScormUserDataRequest modScormGetScormUserDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModScormGetScormUserData200Response> localVarResponse = await ModScormGetScormUserDataWithHttpInfoAsync(modScormGetScormUserDataRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves user tracking and SCO data and default SCORM values Retrieves user tracking and SCO data and default SCORM values
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormGetScormUserDataRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModScormGetScormUserData200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModScormGetScormUserData200Response>> ModScormGetScormUserDataWithHttpInfoAsync(ModScormGetScormUserDataRequest modScormGetScormUserDataRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modScormGetScormUserDataRequest' is set
            if (modScormGetScormUserDataRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormGetScormUserDataRequest' when calling ModScormApi->ModScormGetScormUserData");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormGetScormUserDataRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormGetScormUserData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModScormGetScormUserData200Response>("/mod_scorm_get_scorm_user_data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormGetScormUserData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned. Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModScormGetScormsByCourses200Response</returns>
        public ModScormGetScormsByCourses200Response ModScormGetScormsByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModScormGetScormsByCourses200Response> localVarResponse = ModScormGetScormsByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned. Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModScormGetScormsByCourses200Response</returns>
        public MoodleClient.Client.ApiResponse<ModScormGetScormsByCourses200Response> ModScormGetScormsByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModScormApi->ModScormGetScormsByCourses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormGetScormsByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModScormGetScormsByCourses200Response>("/mod_scorm_get_scorms_by_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormGetScormsByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned. Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModScormGetScormsByCourses200Response</returns>
        public async System.Threading.Tasks.Task<ModScormGetScormsByCourses200Response> ModScormGetScormsByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModScormGetScormsByCourses200Response> localVarResponse = await ModScormGetScormsByCoursesWithHttpInfoAsync(modChatGetChatsByCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned. Returns a list of scorm instances in a provided set of courses, if                             no courses are provided then all the scorm instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModScormGetScormsByCourses200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModScormGetScormsByCourses200Response>> ModScormGetScormsByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModScormApi->ModScormGetScormsByCourses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormGetScormsByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModScormGetScormsByCourses200Response>("/mod_scorm_get_scorms_by_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormGetScormsByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data. Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormInsertScormTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModScormInsertScormTracks200Response</returns>
        public ModScormInsertScormTracks200Response ModScormInsertScormTracks(ModScormInsertScormTracksRequest modScormInsertScormTracksRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModScormInsertScormTracks200Response> localVarResponse = ModScormInsertScormTracksWithHttpInfo(modScormInsertScormTracksRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data. Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormInsertScormTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModScormInsertScormTracks200Response</returns>
        public MoodleClient.Client.ApiResponse<ModScormInsertScormTracks200Response> ModScormInsertScormTracksWithHttpInfo(ModScormInsertScormTracksRequest modScormInsertScormTracksRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modScormInsertScormTracksRequest' is set
            if (modScormInsertScormTracksRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormInsertScormTracksRequest' when calling ModScormApi->ModScormInsertScormTracks");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormInsertScormTracksRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormInsertScormTracks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModScormInsertScormTracks200Response>("/mod_scorm_insert_scorm_tracks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormInsertScormTracks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data. Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormInsertScormTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModScormInsertScormTracks200Response</returns>
        public async System.Threading.Tasks.Task<ModScormInsertScormTracks200Response> ModScormInsertScormTracksAsync(ModScormInsertScormTracksRequest modScormInsertScormTracksRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModScormInsertScormTracks200Response> localVarResponse = await ModScormInsertScormTracksWithHttpInfoAsync(modScormInsertScormTracksRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data. Saves a scorm tracking record.                           It will overwrite any existing tracking data for this attempt.                           Validation should be performed before running the function to ensure the user will not lose any existing                           attempt data.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormInsertScormTracksRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModScormInsertScormTracks200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModScormInsertScormTracks200Response>> ModScormInsertScormTracksWithHttpInfoAsync(ModScormInsertScormTracksRequest modScormInsertScormTracksRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modScormInsertScormTracksRequest' is set
            if (modScormInsertScormTracksRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormInsertScormTracksRequest' when calling ModScormApi->ModScormInsertScormTracks");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormInsertScormTracksRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormInsertScormTracks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModScormInsertScormTracks200Response>("/mod_scorm_insert_scorm_tracks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormInsertScormTracks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the SCO launched event. Trigger the SCO launched event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormLaunchScoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModScormLaunchSco(ModScormLaunchScoRequest modScormLaunchScoRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModScormLaunchScoWithHttpInfo(modScormLaunchScoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the SCO launched event. Trigger the SCO launched event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormLaunchScoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModScormLaunchScoWithHttpInfo(ModScormLaunchScoRequest modScormLaunchScoRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modScormLaunchScoRequest' is set
            if (modScormLaunchScoRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormLaunchScoRequest' when calling ModScormApi->ModScormLaunchSco");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormLaunchScoRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormLaunchSco";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_scorm_launch_sco", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormLaunchSco", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the SCO launched event. Trigger the SCO launched event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormLaunchScoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModScormLaunchScoAsync(ModScormLaunchScoRequest modScormLaunchScoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModScormLaunchScoWithHttpInfoAsync(modScormLaunchScoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the SCO launched event. Trigger the SCO launched event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormLaunchScoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModScormLaunchScoWithHttpInfoAsync(ModScormLaunchScoRequest modScormLaunchScoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modScormLaunchScoRequest' is set
            if (modScormLaunchScoRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormLaunchScoRequest' when calling ModScormApi->ModScormLaunchSco");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormLaunchScoRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormLaunchSco";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_scorm_launch_sco", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormLaunchSco", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event. Trigger the course module viewed event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormViewScormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModScormViewScorm(ModScormViewScormRequest modScormViewScormRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModScormViewScormWithHttpInfo(modScormViewScormRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event. Trigger the course module viewed event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormViewScormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModScormViewScormWithHttpInfo(ModScormViewScormRequest modScormViewScormRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modScormViewScormRequest' is set
            if (modScormViewScormRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormViewScormRequest' when calling ModScormApi->ModScormViewScorm");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormViewScormRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormViewScorm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_scorm_view_scorm", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormViewScorm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event. Trigger the course module viewed event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormViewScormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModScormViewScormAsync(ModScormViewScormRequest modScormViewScormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModScormViewScormWithHttpInfoAsync(modScormViewScormRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event. Trigger the course module viewed event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modScormViewScormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModScormViewScormWithHttpInfoAsync(ModScormViewScormRequest modScormViewScormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modScormViewScormRequest' is set
            if (modScormViewScormRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modScormViewScormRequest' when calling ModScormApi->ModScormViewScorm");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modScormViewScormRequest;

            localVarRequestOptions.Operation = "ModScormApi.ModScormViewScorm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_scorm_view_scorm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModScormViewScorm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
