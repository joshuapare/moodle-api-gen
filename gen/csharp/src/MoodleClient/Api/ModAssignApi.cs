/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MoodleClient.Client;
using MoodleClient.Model;

namespace MoodleClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModAssignApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Copy a students previous attempt to a new attempt.
        /// </summary>
        /// <remarks>
        /// Copy a students previous attempt to a new attempt.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignCopyPreviousAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModAssignCopyPreviousAttempt(ModAssignCopyPreviousAttemptRequest modAssignCopyPreviousAttemptRequest, int operationIndex = 0);

        /// <summary>
        /// Copy a students previous attempt to a new attempt.
        /// </summary>
        /// <remarks>
        /// Copy a students previous attempt to a new attempt.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignCopyPreviousAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModAssignCopyPreviousAttemptWithHttpInfo(ModAssignCopyPreviousAttemptRequest modAssignCopyPreviousAttemptRequest, int operationIndex = 0);
        /// <summary>
        /// Returns the courses and assignments for the users capability
        /// </summary>
        /// <remarks>
        /// Returns the courses and assignments for the users capability
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetAssignmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignGetAssignments200Response</returns>
        ModAssignGetAssignments200Response ModAssignGetAssignments(ModAssignGetAssignmentsRequest modAssignGetAssignmentsRequest, int operationIndex = 0);

        /// <summary>
        /// Returns the courses and assignments for the users capability
        /// </summary>
        /// <remarks>
        /// Returns the courses and assignments for the users capability
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetAssignmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignGetAssignments200Response</returns>
        ApiResponse<ModAssignGetAssignments200Response> ModAssignGetAssignmentsWithHttpInfo(ModAssignGetAssignmentsRequest modAssignGetAssignmentsRequest, int operationIndex = 0);
        /// <summary>
        /// Returns grades from the assignment
        /// </summary>
        /// <remarks>
        /// Returns grades from the assignment
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignGetGrades200Response</returns>
        ModAssignGetGrades200Response ModAssignGetGrades(ModAssignGetGradesRequest modAssignGetGradesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns grades from the assignment
        /// </summary>
        /// <remarks>
        /// Returns grades from the assignment
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignGetGrades200Response</returns>
        ApiResponse<ModAssignGetGrades200Response> ModAssignGetGradesWithHttpInfo(ModAssignGetGradesRequest modAssignGetGradesRequest, int operationIndex = 0);
        /// <summary>
        /// Get a participant for an assignment, with some summary info about their submissions.
        /// </summary>
        /// <remarks>
        /// Get a participant for an assignment, with some summary info about their submissions.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetParticipantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignGetParticipant200Response</returns>
        ModAssignGetParticipant200Response ModAssignGetParticipant(ModAssignGetParticipantRequest modAssignGetParticipantRequest, int operationIndex = 0);

        /// <summary>
        /// Get a participant for an assignment, with some summary info about their submissions.
        /// </summary>
        /// <remarks>
        /// Get a participant for an assignment, with some summary info about their submissions.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetParticipantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignGetParticipant200Response</returns>
        ApiResponse<ModAssignGetParticipant200Response> ModAssignGetParticipantWithHttpInfo(ModAssignGetParticipantRequest modAssignGetParticipantRequest, int operationIndex = 0);
        /// <summary>
        /// Returns information about an assignment submission status for a given user.
        /// </summary>
        /// <remarks>
        /// Returns information about an assignment submission status for a given user.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignGetSubmissionStatus200Response</returns>
        ModAssignGetSubmissionStatus200Response ModAssignGetSubmissionStatus(ModAssignGetSubmissionStatusRequest modAssignGetSubmissionStatusRequest, int operationIndex = 0);

        /// <summary>
        /// Returns information about an assignment submission status for a given user.
        /// </summary>
        /// <remarks>
        /// Returns information about an assignment submission status for a given user.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignGetSubmissionStatus200Response</returns>
        ApiResponse<ModAssignGetSubmissionStatus200Response> ModAssignGetSubmissionStatusWithHttpInfo(ModAssignGetSubmissionStatusRequest modAssignGetSubmissionStatusRequest, int operationIndex = 0);
        /// <summary>
        /// Returns the submissions for assignments
        /// </summary>
        /// <remarks>
        /// Returns the submissions for assignments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignGetSubmissions200Response</returns>
        ModAssignGetSubmissions200Response ModAssignGetSubmissions(ModAssignGetSubmissionsRequest modAssignGetSubmissionsRequest, int operationIndex = 0);

        /// <summary>
        /// Returns the submissions for assignments
        /// </summary>
        /// <remarks>
        /// Returns the submissions for assignments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignGetSubmissions200Response</returns>
        ApiResponse<ModAssignGetSubmissions200Response> ModAssignGetSubmissionsWithHttpInfo(ModAssignGetSubmissionsRequest modAssignGetSubmissionsRequest, int operationIndex = 0);
        /// <summary>
        /// Returns the user flags for assignments
        /// </summary>
        /// <remarks>
        /// Returns the user flags for assignments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignGetUserFlags200Response</returns>
        ModAssignGetUserFlags200Response ModAssignGetUserFlags(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0);

        /// <summary>
        /// Returns the user flags for assignments
        /// </summary>
        /// <remarks>
        /// Returns the user flags for assignments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignGetUserFlags200Response</returns>
        ApiResponse<ModAssignGetUserFlags200Response> ModAssignGetUserFlagsWithHttpInfo(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0);
        /// <summary>
        /// Returns the blind marking mappings for assignments
        /// </summary>
        /// <remarks>
        /// Returns the blind marking mappings for assignments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignGetUserMappings200Response</returns>
        ModAssignGetUserMappings200Response ModAssignGetUserMappings(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0);

        /// <summary>
        /// Returns the blind marking mappings for assignments
        /// </summary>
        /// <remarks>
        /// Returns the blind marking mappings for assignments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignGetUserMappings200Response</returns>
        ApiResponse<ModAssignGetUserMappings200Response> ModAssignGetUserMappingsWithHttpInfo(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0);
        /// <summary>
        /// List the participants for a single assignment, with some summary info about their submissions.
        /// </summary>
        /// <remarks>
        /// List the participants for a single assignment, with some summary info about their submissions.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignListParticipantsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModAssignListParticipants(ModAssignListParticipantsRequest modAssignListParticipantsRequest, int operationIndex = 0);

        /// <summary>
        /// List the participants for a single assignment, with some summary info about their submissions.
        /// </summary>
        /// <remarks>
        /// List the participants for a single assignment, with some summary info about their submissions.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignListParticipantsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModAssignListParticipantsWithHttpInfo(ModAssignListParticipantsRequest modAssignListParticipantsRequest, int operationIndex = 0);
        /// <summary>
        /// Prevent students from making changes to a list of submissions
        /// </summary>
        /// <remarks>
        /// Prevent students from making changes to a list of submissions
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignLockSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModAssignLockSubmissions(ModAssignLockSubmissionsRequest modAssignLockSubmissionsRequest, int operationIndex = 0);

        /// <summary>
        /// Prevent students from making changes to a list of submissions
        /// </summary>
        /// <remarks>
        /// Prevent students from making changes to a list of submissions
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignLockSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModAssignLockSubmissionsWithHttpInfo(ModAssignLockSubmissionsRequest modAssignLockSubmissionsRequest, int operationIndex = 0);
        /// <summary>
        /// Reveal the identities for a blind marking assignment
        /// </summary>
        /// <remarks>
        /// Reveal the identities for a blind marking assignment
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevealIdentitiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModAssignRevealIdentities(ModAssignRevealIdentitiesRequest modAssignRevealIdentitiesRequest, int operationIndex = 0);

        /// <summary>
        /// Reveal the identities for a blind marking assignment
        /// </summary>
        /// <remarks>
        /// Reveal the identities for a blind marking assignment
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevealIdentitiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModAssignRevealIdentitiesWithHttpInfo(ModAssignRevealIdentitiesRequest modAssignRevealIdentitiesRequest, int operationIndex = 0);
        /// <summary>
        /// Reverts the list of submissions to draft status
        /// </summary>
        /// <remarks>
        /// Reverts the list of submissions to draft status
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModAssignRevertSubmissionsToDraft(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0);

        /// <summary>
        /// Reverts the list of submissions to draft status
        /// </summary>
        /// <remarks>
        /// Reverts the list of submissions to draft status
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModAssignRevertSubmissionsToDraftWithHttpInfo(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0);
        /// <summary>
        /// Save a grade update for a single student.
        /// </summary>
        /// <remarks>
        /// Save a grade update for a single student.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModAssignSaveGrade(ModAssignSaveGradeRequest modAssignSaveGradeRequest, int operationIndex = 0);

        /// <summary>
        /// Save a grade update for a single student.
        /// </summary>
        /// <remarks>
        /// Save a grade update for a single student.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModAssignSaveGradeWithHttpInfo(ModAssignSaveGradeRequest modAssignSaveGradeRequest, int operationIndex = 0);
        /// <summary>
        /// Save multiple grade updates for an assignment.
        /// </summary>
        /// <remarks>
        /// Save multiple grade updates for an assignment.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModAssignSaveGrades(ModAssignSaveGradesRequest modAssignSaveGradesRequest, int operationIndex = 0);

        /// <summary>
        /// Save multiple grade updates for an assignment.
        /// </summary>
        /// <remarks>
        /// Save multiple grade updates for an assignment.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModAssignSaveGradesWithHttpInfo(ModAssignSaveGradesRequest modAssignSaveGradesRequest, int operationIndex = 0);
        /// <summary>
        /// Update the current students submission
        /// </summary>
        /// <remarks>
        /// Update the current students submission
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModAssignSaveSubmission(ModAssignSaveSubmissionRequest modAssignSaveSubmissionRequest, int operationIndex = 0);

        /// <summary>
        /// Update the current students submission
        /// </summary>
        /// <remarks>
        /// Update the current students submission
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModAssignSaveSubmissionWithHttpInfo(ModAssignSaveSubmissionRequest modAssignSaveSubmissionRequest, int operationIndex = 0);
        /// <summary>
        /// Save a list of assignment extensions
        /// </summary>
        /// <remarks>
        /// Save a list of assignment extensions
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveUserExtensionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModAssignSaveUserExtensions(ModAssignSaveUserExtensionsRequest modAssignSaveUserExtensionsRequest, int operationIndex = 0);

        /// <summary>
        /// Save a list of assignment extensions
        /// </summary>
        /// <remarks>
        /// Save a list of assignment extensions
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveUserExtensionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModAssignSaveUserExtensionsWithHttpInfo(ModAssignSaveUserExtensionsRequest modAssignSaveUserExtensionsRequest, int operationIndex = 0);
        /// <summary>
        /// Creates or updates user flags
        /// </summary>
        /// <remarks>
        /// Creates or updates user flags
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModAssignSetUserFlags(ModAssignSetUserFlagsRequest modAssignSetUserFlagsRequest, int operationIndex = 0);

        /// <summary>
        /// Creates or updates user flags
        /// </summary>
        /// <remarks>
        /// Creates or updates user flags
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModAssignSetUserFlagsWithHttpInfo(ModAssignSetUserFlagsRequest modAssignSetUserFlagsRequest, int operationIndex = 0);
        /// <summary>
        /// Start a submission for user if assignment has a time limit.
        /// </summary>
        /// <remarks>
        /// Start a submission for user if assignment has a time limit.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignStartSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignStartSubmission200Response</returns>
        ModAssignStartSubmission200Response ModAssignStartSubmission(ModAssignStartSubmissionRequest modAssignStartSubmissionRequest, int operationIndex = 0);

        /// <summary>
        /// Start a submission for user if assignment has a time limit.
        /// </summary>
        /// <remarks>
        /// Start a submission for user if assignment has a time limit.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignStartSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignStartSubmission200Response</returns>
        ApiResponse<ModAssignStartSubmission200Response> ModAssignStartSubmissionWithHttpInfo(ModAssignStartSubmissionRequest modAssignStartSubmissionRequest, int operationIndex = 0);
        /// <summary>
        /// Submit the current students assignment for grading
        /// </summary>
        /// <remarks>
        /// Submit the current students assignment for grading
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitForGradingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModAssignSubmitForGrading(ModAssignSubmitForGradingRequest modAssignSubmitForGradingRequest, int operationIndex = 0);

        /// <summary>
        /// Submit the current students assignment for grading
        /// </summary>
        /// <remarks>
        /// Submit the current students assignment for grading
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitForGradingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModAssignSubmitForGradingWithHttpInfo(ModAssignSubmitForGradingRequest modAssignSubmitForGradingRequest, int operationIndex = 0);
        /// <summary>
        /// Submit the grading form data via ajax
        /// </summary>
        /// <remarks>
        /// Submit the grading form data via ajax
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitGradingFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModAssignSubmitGradingForm(ModAssignSubmitGradingFormRequest modAssignSubmitGradingFormRequest, int operationIndex = 0);

        /// <summary>
        /// Submit the grading form data via ajax
        /// </summary>
        /// <remarks>
        /// Submit the grading form data via ajax
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitGradingFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModAssignSubmitGradingFormWithHttpInfo(ModAssignSubmitGradingFormRequest modAssignSubmitGradingFormRequest, int operationIndex = 0);
        /// <summary>
        /// Allow students to make changes to a list of submissions
        /// </summary>
        /// <remarks>
        /// Allow students to make changes to a list of submissions
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModAssignUnlockSubmissions(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0);

        /// <summary>
        /// Allow students to make changes to a list of submissions
        /// </summary>
        /// <remarks>
        /// Allow students to make changes to a list of submissions
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModAssignUnlockSubmissionsWithHttpInfo(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0);
        /// <summary>
        /// Update the module completion status.
        /// </summary>
        /// <remarks>
        /// Update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModAssignViewAssign(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0);

        /// <summary>
        /// Update the module completion status.
        /// </summary>
        /// <remarks>
        /// Update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModAssignViewAssignWithHttpInfo(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the grading_table_viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the grading_table_viewed event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModAssignViewGradingTable(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the grading_table_viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the grading_table_viewed event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModAssignViewGradingTableWithHttpInfo(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the submission status viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the submission status viewed event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModAssignViewSubmissionStatus(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the submission status viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the submission status viewed event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModAssignViewSubmissionStatusWithHttpInfo(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModAssignApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Copy a students previous attempt to a new attempt.
        /// </summary>
        /// <remarks>
        /// Copy a students previous attempt to a new attempt.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignCopyPreviousAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModAssignCopyPreviousAttemptAsync(ModAssignCopyPreviousAttemptRequest modAssignCopyPreviousAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy a students previous attempt to a new attempt.
        /// </summary>
        /// <remarks>
        /// Copy a students previous attempt to a new attempt.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignCopyPreviousAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModAssignCopyPreviousAttemptWithHttpInfoAsync(ModAssignCopyPreviousAttemptRequest modAssignCopyPreviousAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the courses and assignments for the users capability
        /// </summary>
        /// <remarks>
        /// Returns the courses and assignments for the users capability
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetAssignmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignGetAssignments200Response</returns>
        System.Threading.Tasks.Task<ModAssignGetAssignments200Response> ModAssignGetAssignmentsAsync(ModAssignGetAssignmentsRequest modAssignGetAssignmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the courses and assignments for the users capability
        /// </summary>
        /// <remarks>
        /// Returns the courses and assignments for the users capability
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetAssignmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignGetAssignments200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModAssignGetAssignments200Response>> ModAssignGetAssignmentsWithHttpInfoAsync(ModAssignGetAssignmentsRequest modAssignGetAssignmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns grades from the assignment
        /// </summary>
        /// <remarks>
        /// Returns grades from the assignment
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignGetGrades200Response</returns>
        System.Threading.Tasks.Task<ModAssignGetGrades200Response> ModAssignGetGradesAsync(ModAssignGetGradesRequest modAssignGetGradesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns grades from the assignment
        /// </summary>
        /// <remarks>
        /// Returns grades from the assignment
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignGetGrades200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModAssignGetGrades200Response>> ModAssignGetGradesWithHttpInfoAsync(ModAssignGetGradesRequest modAssignGetGradesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a participant for an assignment, with some summary info about their submissions.
        /// </summary>
        /// <remarks>
        /// Get a participant for an assignment, with some summary info about their submissions.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetParticipantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignGetParticipant200Response</returns>
        System.Threading.Tasks.Task<ModAssignGetParticipant200Response> ModAssignGetParticipantAsync(ModAssignGetParticipantRequest modAssignGetParticipantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a participant for an assignment, with some summary info about their submissions.
        /// </summary>
        /// <remarks>
        /// Get a participant for an assignment, with some summary info about their submissions.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetParticipantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignGetParticipant200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModAssignGetParticipant200Response>> ModAssignGetParticipantWithHttpInfoAsync(ModAssignGetParticipantRequest modAssignGetParticipantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns information about an assignment submission status for a given user.
        /// </summary>
        /// <remarks>
        /// Returns information about an assignment submission status for a given user.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignGetSubmissionStatus200Response</returns>
        System.Threading.Tasks.Task<ModAssignGetSubmissionStatus200Response> ModAssignGetSubmissionStatusAsync(ModAssignGetSubmissionStatusRequest modAssignGetSubmissionStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns information about an assignment submission status for a given user.
        /// </summary>
        /// <remarks>
        /// Returns information about an assignment submission status for a given user.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignGetSubmissionStatus200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModAssignGetSubmissionStatus200Response>> ModAssignGetSubmissionStatusWithHttpInfoAsync(ModAssignGetSubmissionStatusRequest modAssignGetSubmissionStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the submissions for assignments
        /// </summary>
        /// <remarks>
        /// Returns the submissions for assignments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignGetSubmissions200Response</returns>
        System.Threading.Tasks.Task<ModAssignGetSubmissions200Response> ModAssignGetSubmissionsAsync(ModAssignGetSubmissionsRequest modAssignGetSubmissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the submissions for assignments
        /// </summary>
        /// <remarks>
        /// Returns the submissions for assignments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignGetSubmissions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModAssignGetSubmissions200Response>> ModAssignGetSubmissionsWithHttpInfoAsync(ModAssignGetSubmissionsRequest modAssignGetSubmissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the user flags for assignments
        /// </summary>
        /// <remarks>
        /// Returns the user flags for assignments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignGetUserFlags200Response</returns>
        System.Threading.Tasks.Task<ModAssignGetUserFlags200Response> ModAssignGetUserFlagsAsync(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the user flags for assignments
        /// </summary>
        /// <remarks>
        /// Returns the user flags for assignments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignGetUserFlags200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModAssignGetUserFlags200Response>> ModAssignGetUserFlagsWithHttpInfoAsync(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the blind marking mappings for assignments
        /// </summary>
        /// <remarks>
        /// Returns the blind marking mappings for assignments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignGetUserMappings200Response</returns>
        System.Threading.Tasks.Task<ModAssignGetUserMappings200Response> ModAssignGetUserMappingsAsync(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the blind marking mappings for assignments
        /// </summary>
        /// <remarks>
        /// Returns the blind marking mappings for assignments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignGetUserMappings200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModAssignGetUserMappings200Response>> ModAssignGetUserMappingsWithHttpInfoAsync(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the participants for a single assignment, with some summary info about their submissions.
        /// </summary>
        /// <remarks>
        /// List the participants for a single assignment, with some summary info about their submissions.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignListParticipantsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModAssignListParticipantsAsync(ModAssignListParticipantsRequest modAssignListParticipantsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the participants for a single assignment, with some summary info about their submissions.
        /// </summary>
        /// <remarks>
        /// List the participants for a single assignment, with some summary info about their submissions.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignListParticipantsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModAssignListParticipantsWithHttpInfoAsync(ModAssignListParticipantsRequest modAssignListParticipantsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Prevent students from making changes to a list of submissions
        /// </summary>
        /// <remarks>
        /// Prevent students from making changes to a list of submissions
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignLockSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModAssignLockSubmissionsAsync(ModAssignLockSubmissionsRequest modAssignLockSubmissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Prevent students from making changes to a list of submissions
        /// </summary>
        /// <remarks>
        /// Prevent students from making changes to a list of submissions
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignLockSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModAssignLockSubmissionsWithHttpInfoAsync(ModAssignLockSubmissionsRequest modAssignLockSubmissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reveal the identities for a blind marking assignment
        /// </summary>
        /// <remarks>
        /// Reveal the identities for a blind marking assignment
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevealIdentitiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModAssignRevealIdentitiesAsync(ModAssignRevealIdentitiesRequest modAssignRevealIdentitiesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reveal the identities for a blind marking assignment
        /// </summary>
        /// <remarks>
        /// Reveal the identities for a blind marking assignment
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevealIdentitiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModAssignRevealIdentitiesWithHttpInfoAsync(ModAssignRevealIdentitiesRequest modAssignRevealIdentitiesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reverts the list of submissions to draft status
        /// </summary>
        /// <remarks>
        /// Reverts the list of submissions to draft status
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModAssignRevertSubmissionsToDraftAsync(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reverts the list of submissions to draft status
        /// </summary>
        /// <remarks>
        /// Reverts the list of submissions to draft status
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModAssignRevertSubmissionsToDraftWithHttpInfoAsync(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save a grade update for a single student.
        /// </summary>
        /// <remarks>
        /// Save a grade update for a single student.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModAssignSaveGradeAsync(ModAssignSaveGradeRequest modAssignSaveGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save a grade update for a single student.
        /// </summary>
        /// <remarks>
        /// Save a grade update for a single student.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModAssignSaveGradeWithHttpInfoAsync(ModAssignSaveGradeRequest modAssignSaveGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save multiple grade updates for an assignment.
        /// </summary>
        /// <remarks>
        /// Save multiple grade updates for an assignment.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModAssignSaveGradesAsync(ModAssignSaveGradesRequest modAssignSaveGradesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save multiple grade updates for an assignment.
        /// </summary>
        /// <remarks>
        /// Save multiple grade updates for an assignment.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModAssignSaveGradesWithHttpInfoAsync(ModAssignSaveGradesRequest modAssignSaveGradesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the current students submission
        /// </summary>
        /// <remarks>
        /// Update the current students submission
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModAssignSaveSubmissionAsync(ModAssignSaveSubmissionRequest modAssignSaveSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the current students submission
        /// </summary>
        /// <remarks>
        /// Update the current students submission
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModAssignSaveSubmissionWithHttpInfoAsync(ModAssignSaveSubmissionRequest modAssignSaveSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save a list of assignment extensions
        /// </summary>
        /// <remarks>
        /// Save a list of assignment extensions
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveUserExtensionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModAssignSaveUserExtensionsAsync(ModAssignSaveUserExtensionsRequest modAssignSaveUserExtensionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save a list of assignment extensions
        /// </summary>
        /// <remarks>
        /// Save a list of assignment extensions
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveUserExtensionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModAssignSaveUserExtensionsWithHttpInfoAsync(ModAssignSaveUserExtensionsRequest modAssignSaveUserExtensionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates or updates user flags
        /// </summary>
        /// <remarks>
        /// Creates or updates user flags
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModAssignSetUserFlagsAsync(ModAssignSetUserFlagsRequest modAssignSetUserFlagsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates or updates user flags
        /// </summary>
        /// <remarks>
        /// Creates or updates user flags
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModAssignSetUserFlagsWithHttpInfoAsync(ModAssignSetUserFlagsRequest modAssignSetUserFlagsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start a submission for user if assignment has a time limit.
        /// </summary>
        /// <remarks>
        /// Start a submission for user if assignment has a time limit.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignStartSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignStartSubmission200Response</returns>
        System.Threading.Tasks.Task<ModAssignStartSubmission200Response> ModAssignStartSubmissionAsync(ModAssignStartSubmissionRequest modAssignStartSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start a submission for user if assignment has a time limit.
        /// </summary>
        /// <remarks>
        /// Start a submission for user if assignment has a time limit.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignStartSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignStartSubmission200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModAssignStartSubmission200Response>> ModAssignStartSubmissionWithHttpInfoAsync(ModAssignStartSubmissionRequest modAssignStartSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit the current students assignment for grading
        /// </summary>
        /// <remarks>
        /// Submit the current students assignment for grading
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitForGradingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModAssignSubmitForGradingAsync(ModAssignSubmitForGradingRequest modAssignSubmitForGradingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit the current students assignment for grading
        /// </summary>
        /// <remarks>
        /// Submit the current students assignment for grading
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitForGradingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModAssignSubmitForGradingWithHttpInfoAsync(ModAssignSubmitForGradingRequest modAssignSubmitForGradingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit the grading form data via ajax
        /// </summary>
        /// <remarks>
        /// Submit the grading form data via ajax
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitGradingFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModAssignSubmitGradingFormAsync(ModAssignSubmitGradingFormRequest modAssignSubmitGradingFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit the grading form data via ajax
        /// </summary>
        /// <remarks>
        /// Submit the grading form data via ajax
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitGradingFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModAssignSubmitGradingFormWithHttpInfoAsync(ModAssignSubmitGradingFormRequest modAssignSubmitGradingFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Allow students to make changes to a list of submissions
        /// </summary>
        /// <remarks>
        /// Allow students to make changes to a list of submissions
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModAssignUnlockSubmissionsAsync(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Allow students to make changes to a list of submissions
        /// </summary>
        /// <remarks>
        /// Allow students to make changes to a list of submissions
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModAssignUnlockSubmissionsWithHttpInfoAsync(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the module completion status.
        /// </summary>
        /// <remarks>
        /// Update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModAssignViewAssignAsync(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the module completion status.
        /// </summary>
        /// <remarks>
        /// Update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModAssignViewAssignWithHttpInfoAsync(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the grading_table_viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the grading_table_viewed event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModAssignViewGradingTableAsync(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the grading_table_viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the grading_table_viewed event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModAssignViewGradingTableWithHttpInfoAsync(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the submission status viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the submission status viewed event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModAssignViewSubmissionStatusAsync(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the submission status viewed event.
        /// </summary>
        /// <remarks>
        /// Trigger the submission status viewed event.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModAssignViewSubmissionStatusWithHttpInfoAsync(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModAssignApi : IModAssignApiSync, IModAssignApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModAssignApi : IModAssignApi
    {
        private MoodleClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModAssignApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModAssignApi(string basePath)
        {
            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                new MoodleClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModAssignApi(MoodleClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModAssignApi(MoodleClient.Client.ISynchronousClient client, MoodleClient.Client.IAsynchronousClient asyncClient, MoodleClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MoodleClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MoodleClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MoodleClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MoodleClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Copy a students previous attempt to a new attempt. Copy a students previous attempt to a new attempt.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignCopyPreviousAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModAssignCopyPreviousAttempt(ModAssignCopyPreviousAttemptRequest modAssignCopyPreviousAttemptRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ModAssignCopyPreviousAttemptWithHttpInfo(modAssignCopyPreviousAttemptRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a students previous attempt to a new attempt. Copy a students previous attempt to a new attempt.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignCopyPreviousAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ModAssignCopyPreviousAttemptWithHttpInfo(ModAssignCopyPreviousAttemptRequest modAssignCopyPreviousAttemptRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignCopyPreviousAttemptRequest' is set
            if (modAssignCopyPreviousAttemptRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignCopyPreviousAttemptRequest' when calling ModAssignApi->ModAssignCopyPreviousAttempt");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignCopyPreviousAttemptRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignCopyPreviousAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_assign_copy_previous_attempt", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignCopyPreviousAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy a students previous attempt to a new attempt. Copy a students previous attempt to a new attempt.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignCopyPreviousAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModAssignCopyPreviousAttemptAsync(ModAssignCopyPreviousAttemptRequest modAssignCopyPreviousAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ModAssignCopyPreviousAttemptWithHttpInfoAsync(modAssignCopyPreviousAttemptRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a students previous attempt to a new attempt. Copy a students previous attempt to a new attempt.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignCopyPreviousAttemptRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ModAssignCopyPreviousAttemptWithHttpInfoAsync(ModAssignCopyPreviousAttemptRequest modAssignCopyPreviousAttemptRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignCopyPreviousAttemptRequest' is set
            if (modAssignCopyPreviousAttemptRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignCopyPreviousAttemptRequest' when calling ModAssignApi->ModAssignCopyPreviousAttempt");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignCopyPreviousAttemptRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignCopyPreviousAttempt";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_assign_copy_previous_attempt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignCopyPreviousAttempt", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the courses and assignments for the users capability Returns the courses and assignments for the users capability
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetAssignmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignGetAssignments200Response</returns>
        public ModAssignGetAssignments200Response ModAssignGetAssignments(ModAssignGetAssignmentsRequest modAssignGetAssignmentsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModAssignGetAssignments200Response> localVarResponse = ModAssignGetAssignmentsWithHttpInfo(modAssignGetAssignmentsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the courses and assignments for the users capability Returns the courses and assignments for the users capability
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetAssignmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignGetAssignments200Response</returns>
        public MoodleClient.Client.ApiResponse<ModAssignGetAssignments200Response> ModAssignGetAssignmentsWithHttpInfo(ModAssignGetAssignmentsRequest modAssignGetAssignmentsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignGetAssignmentsRequest' is set
            if (modAssignGetAssignmentsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignGetAssignmentsRequest' when calling ModAssignApi->ModAssignGetAssignments");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignGetAssignmentsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignGetAssignments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModAssignGetAssignments200Response>("/mod_assign_get_assignments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignGetAssignments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the courses and assignments for the users capability Returns the courses and assignments for the users capability
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetAssignmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignGetAssignments200Response</returns>
        public async System.Threading.Tasks.Task<ModAssignGetAssignments200Response> ModAssignGetAssignmentsAsync(ModAssignGetAssignmentsRequest modAssignGetAssignmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModAssignGetAssignments200Response> localVarResponse = await ModAssignGetAssignmentsWithHttpInfoAsync(modAssignGetAssignmentsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the courses and assignments for the users capability Returns the courses and assignments for the users capability
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetAssignmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignGetAssignments200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModAssignGetAssignments200Response>> ModAssignGetAssignmentsWithHttpInfoAsync(ModAssignGetAssignmentsRequest modAssignGetAssignmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignGetAssignmentsRequest' is set
            if (modAssignGetAssignmentsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignGetAssignmentsRequest' when calling ModAssignApi->ModAssignGetAssignments");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignGetAssignmentsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignGetAssignments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModAssignGetAssignments200Response>("/mod_assign_get_assignments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignGetAssignments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns grades from the assignment Returns grades from the assignment
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignGetGrades200Response</returns>
        public ModAssignGetGrades200Response ModAssignGetGrades(ModAssignGetGradesRequest modAssignGetGradesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModAssignGetGrades200Response> localVarResponse = ModAssignGetGradesWithHttpInfo(modAssignGetGradesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns grades from the assignment Returns grades from the assignment
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignGetGrades200Response</returns>
        public MoodleClient.Client.ApiResponse<ModAssignGetGrades200Response> ModAssignGetGradesWithHttpInfo(ModAssignGetGradesRequest modAssignGetGradesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignGetGradesRequest' is set
            if (modAssignGetGradesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignGetGradesRequest' when calling ModAssignApi->ModAssignGetGrades");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignGetGradesRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignGetGrades";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModAssignGetGrades200Response>("/mod_assign_get_grades", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignGetGrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns grades from the assignment Returns grades from the assignment
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignGetGrades200Response</returns>
        public async System.Threading.Tasks.Task<ModAssignGetGrades200Response> ModAssignGetGradesAsync(ModAssignGetGradesRequest modAssignGetGradesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModAssignGetGrades200Response> localVarResponse = await ModAssignGetGradesWithHttpInfoAsync(modAssignGetGradesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns grades from the assignment Returns grades from the assignment
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignGetGrades200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModAssignGetGrades200Response>> ModAssignGetGradesWithHttpInfoAsync(ModAssignGetGradesRequest modAssignGetGradesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignGetGradesRequest' is set
            if (modAssignGetGradesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignGetGradesRequest' when calling ModAssignApi->ModAssignGetGrades");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignGetGradesRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignGetGrades";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModAssignGetGrades200Response>("/mod_assign_get_grades", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignGetGrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a participant for an assignment, with some summary info about their submissions. Get a participant for an assignment, with some summary info about their submissions.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetParticipantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignGetParticipant200Response</returns>
        public ModAssignGetParticipant200Response ModAssignGetParticipant(ModAssignGetParticipantRequest modAssignGetParticipantRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModAssignGetParticipant200Response> localVarResponse = ModAssignGetParticipantWithHttpInfo(modAssignGetParticipantRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a participant for an assignment, with some summary info about their submissions. Get a participant for an assignment, with some summary info about their submissions.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetParticipantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignGetParticipant200Response</returns>
        public MoodleClient.Client.ApiResponse<ModAssignGetParticipant200Response> ModAssignGetParticipantWithHttpInfo(ModAssignGetParticipantRequest modAssignGetParticipantRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignGetParticipantRequest' is set
            if (modAssignGetParticipantRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignGetParticipantRequest' when calling ModAssignApi->ModAssignGetParticipant");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignGetParticipantRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignGetParticipant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModAssignGetParticipant200Response>("/mod_assign_get_participant", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignGetParticipant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a participant for an assignment, with some summary info about their submissions. Get a participant for an assignment, with some summary info about their submissions.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetParticipantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignGetParticipant200Response</returns>
        public async System.Threading.Tasks.Task<ModAssignGetParticipant200Response> ModAssignGetParticipantAsync(ModAssignGetParticipantRequest modAssignGetParticipantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModAssignGetParticipant200Response> localVarResponse = await ModAssignGetParticipantWithHttpInfoAsync(modAssignGetParticipantRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a participant for an assignment, with some summary info about their submissions. Get a participant for an assignment, with some summary info about their submissions.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetParticipantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignGetParticipant200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModAssignGetParticipant200Response>> ModAssignGetParticipantWithHttpInfoAsync(ModAssignGetParticipantRequest modAssignGetParticipantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignGetParticipantRequest' is set
            if (modAssignGetParticipantRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignGetParticipantRequest' when calling ModAssignApi->ModAssignGetParticipant");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignGetParticipantRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignGetParticipant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModAssignGetParticipant200Response>("/mod_assign_get_participant", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignGetParticipant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information about an assignment submission status for a given user. Returns information about an assignment submission status for a given user.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignGetSubmissionStatus200Response</returns>
        public ModAssignGetSubmissionStatus200Response ModAssignGetSubmissionStatus(ModAssignGetSubmissionStatusRequest modAssignGetSubmissionStatusRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModAssignGetSubmissionStatus200Response> localVarResponse = ModAssignGetSubmissionStatusWithHttpInfo(modAssignGetSubmissionStatusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about an assignment submission status for a given user. Returns information about an assignment submission status for a given user.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignGetSubmissionStatus200Response</returns>
        public MoodleClient.Client.ApiResponse<ModAssignGetSubmissionStatus200Response> ModAssignGetSubmissionStatusWithHttpInfo(ModAssignGetSubmissionStatusRequest modAssignGetSubmissionStatusRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignGetSubmissionStatusRequest' is set
            if (modAssignGetSubmissionStatusRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignGetSubmissionStatusRequest' when calling ModAssignApi->ModAssignGetSubmissionStatus");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignGetSubmissionStatusRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignGetSubmissionStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModAssignGetSubmissionStatus200Response>("/mod_assign_get_submission_status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignGetSubmissionStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information about an assignment submission status for a given user. Returns information about an assignment submission status for a given user.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignGetSubmissionStatus200Response</returns>
        public async System.Threading.Tasks.Task<ModAssignGetSubmissionStatus200Response> ModAssignGetSubmissionStatusAsync(ModAssignGetSubmissionStatusRequest modAssignGetSubmissionStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModAssignGetSubmissionStatus200Response> localVarResponse = await ModAssignGetSubmissionStatusWithHttpInfoAsync(modAssignGetSubmissionStatusRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information about an assignment submission status for a given user. Returns information about an assignment submission status for a given user.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionStatusRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignGetSubmissionStatus200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModAssignGetSubmissionStatus200Response>> ModAssignGetSubmissionStatusWithHttpInfoAsync(ModAssignGetSubmissionStatusRequest modAssignGetSubmissionStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignGetSubmissionStatusRequest' is set
            if (modAssignGetSubmissionStatusRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignGetSubmissionStatusRequest' when calling ModAssignApi->ModAssignGetSubmissionStatus");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignGetSubmissionStatusRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignGetSubmissionStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModAssignGetSubmissionStatus200Response>("/mod_assign_get_submission_status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignGetSubmissionStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the submissions for assignments Returns the submissions for assignments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignGetSubmissions200Response</returns>
        public ModAssignGetSubmissions200Response ModAssignGetSubmissions(ModAssignGetSubmissionsRequest modAssignGetSubmissionsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModAssignGetSubmissions200Response> localVarResponse = ModAssignGetSubmissionsWithHttpInfo(modAssignGetSubmissionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the submissions for assignments Returns the submissions for assignments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignGetSubmissions200Response</returns>
        public MoodleClient.Client.ApiResponse<ModAssignGetSubmissions200Response> ModAssignGetSubmissionsWithHttpInfo(ModAssignGetSubmissionsRequest modAssignGetSubmissionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignGetSubmissionsRequest' is set
            if (modAssignGetSubmissionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignGetSubmissionsRequest' when calling ModAssignApi->ModAssignGetSubmissions");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignGetSubmissionsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignGetSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModAssignGetSubmissions200Response>("/mod_assign_get_submissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignGetSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the submissions for assignments Returns the submissions for assignments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignGetSubmissions200Response</returns>
        public async System.Threading.Tasks.Task<ModAssignGetSubmissions200Response> ModAssignGetSubmissionsAsync(ModAssignGetSubmissionsRequest modAssignGetSubmissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModAssignGetSubmissions200Response> localVarResponse = await ModAssignGetSubmissionsWithHttpInfoAsync(modAssignGetSubmissionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the submissions for assignments Returns the submissions for assignments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignGetSubmissions200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModAssignGetSubmissions200Response>> ModAssignGetSubmissionsWithHttpInfoAsync(ModAssignGetSubmissionsRequest modAssignGetSubmissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignGetSubmissionsRequest' is set
            if (modAssignGetSubmissionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignGetSubmissionsRequest' when calling ModAssignApi->ModAssignGetSubmissions");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignGetSubmissionsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignGetSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModAssignGetSubmissions200Response>("/mod_assign_get_submissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignGetSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the user flags for assignments Returns the user flags for assignments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignGetUserFlags200Response</returns>
        public ModAssignGetUserFlags200Response ModAssignGetUserFlags(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModAssignGetUserFlags200Response> localVarResponse = ModAssignGetUserFlagsWithHttpInfo(modAssignGetUserFlagsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the user flags for assignments Returns the user flags for assignments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignGetUserFlags200Response</returns>
        public MoodleClient.Client.ApiResponse<ModAssignGetUserFlags200Response> ModAssignGetUserFlagsWithHttpInfo(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignGetUserFlagsRequest' is set
            if (modAssignGetUserFlagsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignGetUserFlagsRequest' when calling ModAssignApi->ModAssignGetUserFlags");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignGetUserFlagsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignGetUserFlags";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModAssignGetUserFlags200Response>("/mod_assign_get_user_flags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignGetUserFlags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the user flags for assignments Returns the user flags for assignments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignGetUserFlags200Response</returns>
        public async System.Threading.Tasks.Task<ModAssignGetUserFlags200Response> ModAssignGetUserFlagsAsync(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModAssignGetUserFlags200Response> localVarResponse = await ModAssignGetUserFlagsWithHttpInfoAsync(modAssignGetUserFlagsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the user flags for assignments Returns the user flags for assignments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignGetUserFlags200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModAssignGetUserFlags200Response>> ModAssignGetUserFlagsWithHttpInfoAsync(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignGetUserFlagsRequest' is set
            if (modAssignGetUserFlagsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignGetUserFlagsRequest' when calling ModAssignApi->ModAssignGetUserFlags");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignGetUserFlagsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignGetUserFlags";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModAssignGetUserFlags200Response>("/mod_assign_get_user_flags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignGetUserFlags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the blind marking mappings for assignments Returns the blind marking mappings for assignments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignGetUserMappings200Response</returns>
        public ModAssignGetUserMappings200Response ModAssignGetUserMappings(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModAssignGetUserMappings200Response> localVarResponse = ModAssignGetUserMappingsWithHttpInfo(modAssignGetUserFlagsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the blind marking mappings for assignments Returns the blind marking mappings for assignments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignGetUserMappings200Response</returns>
        public MoodleClient.Client.ApiResponse<ModAssignGetUserMappings200Response> ModAssignGetUserMappingsWithHttpInfo(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignGetUserFlagsRequest' is set
            if (modAssignGetUserFlagsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignGetUserFlagsRequest' when calling ModAssignApi->ModAssignGetUserMappings");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignGetUserFlagsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignGetUserMappings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModAssignGetUserMappings200Response>("/mod_assign_get_user_mappings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignGetUserMappings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the blind marking mappings for assignments Returns the blind marking mappings for assignments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignGetUserMappings200Response</returns>
        public async System.Threading.Tasks.Task<ModAssignGetUserMappings200Response> ModAssignGetUserMappingsAsync(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModAssignGetUserMappings200Response> localVarResponse = await ModAssignGetUserMappingsWithHttpInfoAsync(modAssignGetUserFlagsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the blind marking mappings for assignments Returns the blind marking mappings for assignments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignGetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignGetUserMappings200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModAssignGetUserMappings200Response>> ModAssignGetUserMappingsWithHttpInfoAsync(ModAssignGetUserFlagsRequest modAssignGetUserFlagsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignGetUserFlagsRequest' is set
            if (modAssignGetUserFlagsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignGetUserFlagsRequest' when calling ModAssignApi->ModAssignGetUserMappings");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignGetUserFlagsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignGetUserMappings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModAssignGetUserMappings200Response>("/mod_assign_get_user_mappings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignGetUserMappings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the participants for a single assignment, with some summary info about their submissions. List the participants for a single assignment, with some summary info about their submissions.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignListParticipantsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModAssignListParticipants(ModAssignListParticipantsRequest modAssignListParticipantsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ModAssignListParticipantsWithHttpInfo(modAssignListParticipantsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the participants for a single assignment, with some summary info about their submissions. List the participants for a single assignment, with some summary info about their submissions.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignListParticipantsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ModAssignListParticipantsWithHttpInfo(ModAssignListParticipantsRequest modAssignListParticipantsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignListParticipantsRequest' is set
            if (modAssignListParticipantsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignListParticipantsRequest' when calling ModAssignApi->ModAssignListParticipants");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignListParticipantsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignListParticipants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_assign_list_participants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignListParticipants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the participants for a single assignment, with some summary info about their submissions. List the participants for a single assignment, with some summary info about their submissions.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignListParticipantsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModAssignListParticipantsAsync(ModAssignListParticipantsRequest modAssignListParticipantsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ModAssignListParticipantsWithHttpInfoAsync(modAssignListParticipantsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the participants for a single assignment, with some summary info about their submissions. List the participants for a single assignment, with some summary info about their submissions.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignListParticipantsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ModAssignListParticipantsWithHttpInfoAsync(ModAssignListParticipantsRequest modAssignListParticipantsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignListParticipantsRequest' is set
            if (modAssignListParticipantsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignListParticipantsRequest' when calling ModAssignApi->ModAssignListParticipants");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignListParticipantsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignListParticipants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_assign_list_participants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignListParticipants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Prevent students from making changes to a list of submissions Prevent students from making changes to a list of submissions
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignLockSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModAssignLockSubmissions(ModAssignLockSubmissionsRequest modAssignLockSubmissionsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ModAssignLockSubmissionsWithHttpInfo(modAssignLockSubmissionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Prevent students from making changes to a list of submissions Prevent students from making changes to a list of submissions
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignLockSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ModAssignLockSubmissionsWithHttpInfo(ModAssignLockSubmissionsRequest modAssignLockSubmissionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignLockSubmissionsRequest' is set
            if (modAssignLockSubmissionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignLockSubmissionsRequest' when calling ModAssignApi->ModAssignLockSubmissions");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignLockSubmissionsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignLockSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_assign_lock_submissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignLockSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Prevent students from making changes to a list of submissions Prevent students from making changes to a list of submissions
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignLockSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModAssignLockSubmissionsAsync(ModAssignLockSubmissionsRequest modAssignLockSubmissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ModAssignLockSubmissionsWithHttpInfoAsync(modAssignLockSubmissionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Prevent students from making changes to a list of submissions Prevent students from making changes to a list of submissions
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignLockSubmissionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ModAssignLockSubmissionsWithHttpInfoAsync(ModAssignLockSubmissionsRequest modAssignLockSubmissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignLockSubmissionsRequest' is set
            if (modAssignLockSubmissionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignLockSubmissionsRequest' when calling ModAssignApi->ModAssignLockSubmissions");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignLockSubmissionsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignLockSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_assign_lock_submissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignLockSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reveal the identities for a blind marking assignment Reveal the identities for a blind marking assignment
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevealIdentitiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModAssignRevealIdentities(ModAssignRevealIdentitiesRequest modAssignRevealIdentitiesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ModAssignRevealIdentitiesWithHttpInfo(modAssignRevealIdentitiesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reveal the identities for a blind marking assignment Reveal the identities for a blind marking assignment
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevealIdentitiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ModAssignRevealIdentitiesWithHttpInfo(ModAssignRevealIdentitiesRequest modAssignRevealIdentitiesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignRevealIdentitiesRequest' is set
            if (modAssignRevealIdentitiesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignRevealIdentitiesRequest' when calling ModAssignApi->ModAssignRevealIdentities");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignRevealIdentitiesRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignRevealIdentities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_assign_reveal_identities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignRevealIdentities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reveal the identities for a blind marking assignment Reveal the identities for a blind marking assignment
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevealIdentitiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModAssignRevealIdentitiesAsync(ModAssignRevealIdentitiesRequest modAssignRevealIdentitiesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ModAssignRevealIdentitiesWithHttpInfoAsync(modAssignRevealIdentitiesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reveal the identities for a blind marking assignment Reveal the identities for a blind marking assignment
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevealIdentitiesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ModAssignRevealIdentitiesWithHttpInfoAsync(ModAssignRevealIdentitiesRequest modAssignRevealIdentitiesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignRevealIdentitiesRequest' is set
            if (modAssignRevealIdentitiesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignRevealIdentitiesRequest' when calling ModAssignApi->ModAssignRevealIdentities");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignRevealIdentitiesRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignRevealIdentities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_assign_reveal_identities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignRevealIdentities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reverts the list of submissions to draft status Reverts the list of submissions to draft status
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModAssignRevertSubmissionsToDraft(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ModAssignRevertSubmissionsToDraftWithHttpInfo(modAssignRevertSubmissionsToDraftRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reverts the list of submissions to draft status Reverts the list of submissions to draft status
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ModAssignRevertSubmissionsToDraftWithHttpInfo(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignRevertSubmissionsToDraftRequest' is set
            if (modAssignRevertSubmissionsToDraftRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignRevertSubmissionsToDraftRequest' when calling ModAssignApi->ModAssignRevertSubmissionsToDraft");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignRevertSubmissionsToDraftRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignRevertSubmissionsToDraft";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_assign_revert_submissions_to_draft", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignRevertSubmissionsToDraft", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reverts the list of submissions to draft status Reverts the list of submissions to draft status
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModAssignRevertSubmissionsToDraftAsync(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ModAssignRevertSubmissionsToDraftWithHttpInfoAsync(modAssignRevertSubmissionsToDraftRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reverts the list of submissions to draft status Reverts the list of submissions to draft status
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ModAssignRevertSubmissionsToDraftWithHttpInfoAsync(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignRevertSubmissionsToDraftRequest' is set
            if (modAssignRevertSubmissionsToDraftRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignRevertSubmissionsToDraftRequest' when calling ModAssignApi->ModAssignRevertSubmissionsToDraft");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignRevertSubmissionsToDraftRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignRevertSubmissionsToDraft";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_assign_revert_submissions_to_draft", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignRevertSubmissionsToDraft", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save a grade update for a single student. Save a grade update for a single student.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModAssignSaveGrade(ModAssignSaveGradeRequest modAssignSaveGradeRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ModAssignSaveGradeWithHttpInfo(modAssignSaveGradeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save a grade update for a single student. Save a grade update for a single student.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ModAssignSaveGradeWithHttpInfo(ModAssignSaveGradeRequest modAssignSaveGradeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignSaveGradeRequest' is set
            if (modAssignSaveGradeRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignSaveGradeRequest' when calling ModAssignApi->ModAssignSaveGrade");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignSaveGradeRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignSaveGrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_assign_save_grade", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignSaveGrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save a grade update for a single student. Save a grade update for a single student.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModAssignSaveGradeAsync(ModAssignSaveGradeRequest modAssignSaveGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ModAssignSaveGradeWithHttpInfoAsync(modAssignSaveGradeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save a grade update for a single student. Save a grade update for a single student.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ModAssignSaveGradeWithHttpInfoAsync(ModAssignSaveGradeRequest modAssignSaveGradeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignSaveGradeRequest' is set
            if (modAssignSaveGradeRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignSaveGradeRequest' when calling ModAssignApi->ModAssignSaveGrade");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignSaveGradeRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignSaveGrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_assign_save_grade", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignSaveGrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save multiple grade updates for an assignment. Save multiple grade updates for an assignment.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModAssignSaveGrades(ModAssignSaveGradesRequest modAssignSaveGradesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ModAssignSaveGradesWithHttpInfo(modAssignSaveGradesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save multiple grade updates for an assignment. Save multiple grade updates for an assignment.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ModAssignSaveGradesWithHttpInfo(ModAssignSaveGradesRequest modAssignSaveGradesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignSaveGradesRequest' is set
            if (modAssignSaveGradesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignSaveGradesRequest' when calling ModAssignApi->ModAssignSaveGrades");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignSaveGradesRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignSaveGrades";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_assign_save_grades", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignSaveGrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save multiple grade updates for an assignment. Save multiple grade updates for an assignment.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModAssignSaveGradesAsync(ModAssignSaveGradesRequest modAssignSaveGradesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ModAssignSaveGradesWithHttpInfoAsync(modAssignSaveGradesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save multiple grade updates for an assignment. Save multiple grade updates for an assignment.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveGradesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ModAssignSaveGradesWithHttpInfoAsync(ModAssignSaveGradesRequest modAssignSaveGradesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignSaveGradesRequest' is set
            if (modAssignSaveGradesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignSaveGradesRequest' when calling ModAssignApi->ModAssignSaveGrades");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignSaveGradesRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignSaveGrades";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_assign_save_grades", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignSaveGrades", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the current students submission Update the current students submission
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModAssignSaveSubmission(ModAssignSaveSubmissionRequest modAssignSaveSubmissionRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ModAssignSaveSubmissionWithHttpInfo(modAssignSaveSubmissionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the current students submission Update the current students submission
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ModAssignSaveSubmissionWithHttpInfo(ModAssignSaveSubmissionRequest modAssignSaveSubmissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignSaveSubmissionRequest' is set
            if (modAssignSaveSubmissionRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignSaveSubmissionRequest' when calling ModAssignApi->ModAssignSaveSubmission");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignSaveSubmissionRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignSaveSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_assign_save_submission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignSaveSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the current students submission Update the current students submission
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModAssignSaveSubmissionAsync(ModAssignSaveSubmissionRequest modAssignSaveSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ModAssignSaveSubmissionWithHttpInfoAsync(modAssignSaveSubmissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the current students submission Update the current students submission
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ModAssignSaveSubmissionWithHttpInfoAsync(ModAssignSaveSubmissionRequest modAssignSaveSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignSaveSubmissionRequest' is set
            if (modAssignSaveSubmissionRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignSaveSubmissionRequest' when calling ModAssignApi->ModAssignSaveSubmission");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignSaveSubmissionRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignSaveSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_assign_save_submission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignSaveSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save a list of assignment extensions Save a list of assignment extensions
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveUserExtensionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModAssignSaveUserExtensions(ModAssignSaveUserExtensionsRequest modAssignSaveUserExtensionsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ModAssignSaveUserExtensionsWithHttpInfo(modAssignSaveUserExtensionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save a list of assignment extensions Save a list of assignment extensions
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveUserExtensionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ModAssignSaveUserExtensionsWithHttpInfo(ModAssignSaveUserExtensionsRequest modAssignSaveUserExtensionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignSaveUserExtensionsRequest' is set
            if (modAssignSaveUserExtensionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignSaveUserExtensionsRequest' when calling ModAssignApi->ModAssignSaveUserExtensions");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignSaveUserExtensionsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignSaveUserExtensions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_assign_save_user_extensions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignSaveUserExtensions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save a list of assignment extensions Save a list of assignment extensions
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveUserExtensionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModAssignSaveUserExtensionsAsync(ModAssignSaveUserExtensionsRequest modAssignSaveUserExtensionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ModAssignSaveUserExtensionsWithHttpInfoAsync(modAssignSaveUserExtensionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save a list of assignment extensions Save a list of assignment extensions
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSaveUserExtensionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ModAssignSaveUserExtensionsWithHttpInfoAsync(ModAssignSaveUserExtensionsRequest modAssignSaveUserExtensionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignSaveUserExtensionsRequest' is set
            if (modAssignSaveUserExtensionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignSaveUserExtensionsRequest' when calling ModAssignApi->ModAssignSaveUserExtensions");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignSaveUserExtensionsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignSaveUserExtensions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_assign_save_user_extensions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignSaveUserExtensions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates user flags Creates or updates user flags
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModAssignSetUserFlags(ModAssignSetUserFlagsRequest modAssignSetUserFlagsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ModAssignSetUserFlagsWithHttpInfo(modAssignSetUserFlagsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates user flags Creates or updates user flags
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ModAssignSetUserFlagsWithHttpInfo(ModAssignSetUserFlagsRequest modAssignSetUserFlagsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignSetUserFlagsRequest' is set
            if (modAssignSetUserFlagsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignSetUserFlagsRequest' when calling ModAssignApi->ModAssignSetUserFlags");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignSetUserFlagsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignSetUserFlags";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_assign_set_user_flags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignSetUserFlags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates or updates user flags Creates or updates user flags
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModAssignSetUserFlagsAsync(ModAssignSetUserFlagsRequest modAssignSetUserFlagsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ModAssignSetUserFlagsWithHttpInfoAsync(modAssignSetUserFlagsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates or updates user flags Creates or updates user flags
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSetUserFlagsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ModAssignSetUserFlagsWithHttpInfoAsync(ModAssignSetUserFlagsRequest modAssignSetUserFlagsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignSetUserFlagsRequest' is set
            if (modAssignSetUserFlagsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignSetUserFlagsRequest' when calling ModAssignApi->ModAssignSetUserFlags");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignSetUserFlagsRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignSetUserFlags";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_assign_set_user_flags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignSetUserFlags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a submission for user if assignment has a time limit. Start a submission for user if assignment has a time limit.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignStartSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModAssignStartSubmission200Response</returns>
        public ModAssignStartSubmission200Response ModAssignStartSubmission(ModAssignStartSubmissionRequest modAssignStartSubmissionRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModAssignStartSubmission200Response> localVarResponse = ModAssignStartSubmissionWithHttpInfo(modAssignStartSubmissionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a submission for user if assignment has a time limit. Start a submission for user if assignment has a time limit.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignStartSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModAssignStartSubmission200Response</returns>
        public MoodleClient.Client.ApiResponse<ModAssignStartSubmission200Response> ModAssignStartSubmissionWithHttpInfo(ModAssignStartSubmissionRequest modAssignStartSubmissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignStartSubmissionRequest' is set
            if (modAssignStartSubmissionRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignStartSubmissionRequest' when calling ModAssignApi->ModAssignStartSubmission");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignStartSubmissionRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignStartSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModAssignStartSubmission200Response>("/mod_assign_start_submission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignStartSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a submission for user if assignment has a time limit. Start a submission for user if assignment has a time limit.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignStartSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModAssignStartSubmission200Response</returns>
        public async System.Threading.Tasks.Task<ModAssignStartSubmission200Response> ModAssignStartSubmissionAsync(ModAssignStartSubmissionRequest modAssignStartSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModAssignStartSubmission200Response> localVarResponse = await ModAssignStartSubmissionWithHttpInfoAsync(modAssignStartSubmissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a submission for user if assignment has a time limit. Start a submission for user if assignment has a time limit.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignStartSubmissionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModAssignStartSubmission200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModAssignStartSubmission200Response>> ModAssignStartSubmissionWithHttpInfoAsync(ModAssignStartSubmissionRequest modAssignStartSubmissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignStartSubmissionRequest' is set
            if (modAssignStartSubmissionRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignStartSubmissionRequest' when calling ModAssignApi->ModAssignStartSubmission");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignStartSubmissionRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignStartSubmission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModAssignStartSubmission200Response>("/mod_assign_start_submission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignStartSubmission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit the current students assignment for grading Submit the current students assignment for grading
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitForGradingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModAssignSubmitForGrading(ModAssignSubmitForGradingRequest modAssignSubmitForGradingRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ModAssignSubmitForGradingWithHttpInfo(modAssignSubmitForGradingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit the current students assignment for grading Submit the current students assignment for grading
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitForGradingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ModAssignSubmitForGradingWithHttpInfo(ModAssignSubmitForGradingRequest modAssignSubmitForGradingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignSubmitForGradingRequest' is set
            if (modAssignSubmitForGradingRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignSubmitForGradingRequest' when calling ModAssignApi->ModAssignSubmitForGrading");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignSubmitForGradingRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignSubmitForGrading";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_assign_submit_for_grading", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignSubmitForGrading", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit the current students assignment for grading Submit the current students assignment for grading
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitForGradingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModAssignSubmitForGradingAsync(ModAssignSubmitForGradingRequest modAssignSubmitForGradingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ModAssignSubmitForGradingWithHttpInfoAsync(modAssignSubmitForGradingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit the current students assignment for grading Submit the current students assignment for grading
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitForGradingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ModAssignSubmitForGradingWithHttpInfoAsync(ModAssignSubmitForGradingRequest modAssignSubmitForGradingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignSubmitForGradingRequest' is set
            if (modAssignSubmitForGradingRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignSubmitForGradingRequest' when calling ModAssignApi->ModAssignSubmitForGrading");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignSubmitForGradingRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignSubmitForGrading";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_assign_submit_for_grading", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignSubmitForGrading", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit the grading form data via ajax Submit the grading form data via ajax
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitGradingFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModAssignSubmitGradingForm(ModAssignSubmitGradingFormRequest modAssignSubmitGradingFormRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ModAssignSubmitGradingFormWithHttpInfo(modAssignSubmitGradingFormRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit the grading form data via ajax Submit the grading form data via ajax
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitGradingFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ModAssignSubmitGradingFormWithHttpInfo(ModAssignSubmitGradingFormRequest modAssignSubmitGradingFormRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignSubmitGradingFormRequest' is set
            if (modAssignSubmitGradingFormRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignSubmitGradingFormRequest' when calling ModAssignApi->ModAssignSubmitGradingForm");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignSubmitGradingFormRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignSubmitGradingForm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_assign_submit_grading_form", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignSubmitGradingForm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit the grading form data via ajax Submit the grading form data via ajax
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitGradingFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModAssignSubmitGradingFormAsync(ModAssignSubmitGradingFormRequest modAssignSubmitGradingFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ModAssignSubmitGradingFormWithHttpInfoAsync(modAssignSubmitGradingFormRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit the grading form data via ajax Submit the grading form data via ajax
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignSubmitGradingFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ModAssignSubmitGradingFormWithHttpInfoAsync(ModAssignSubmitGradingFormRequest modAssignSubmitGradingFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignSubmitGradingFormRequest' is set
            if (modAssignSubmitGradingFormRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignSubmitGradingFormRequest' when calling ModAssignApi->ModAssignSubmitGradingForm");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignSubmitGradingFormRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignSubmitGradingForm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_assign_submit_grading_form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignSubmitGradingForm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allow students to make changes to a list of submissions Allow students to make changes to a list of submissions
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModAssignUnlockSubmissions(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ModAssignUnlockSubmissionsWithHttpInfo(modAssignRevertSubmissionsToDraftRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allow students to make changes to a list of submissions Allow students to make changes to a list of submissions
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ModAssignUnlockSubmissionsWithHttpInfo(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignRevertSubmissionsToDraftRequest' is set
            if (modAssignRevertSubmissionsToDraftRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignRevertSubmissionsToDraftRequest' when calling ModAssignApi->ModAssignUnlockSubmissions");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignRevertSubmissionsToDraftRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignUnlockSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_assign_unlock_submissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignUnlockSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allow students to make changes to a list of submissions Allow students to make changes to a list of submissions
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModAssignUnlockSubmissionsAsync(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ModAssignUnlockSubmissionsWithHttpInfoAsync(modAssignRevertSubmissionsToDraftRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allow students to make changes to a list of submissions Allow students to make changes to a list of submissions
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignRevertSubmissionsToDraftRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ModAssignUnlockSubmissionsWithHttpInfoAsync(ModAssignRevertSubmissionsToDraftRequest modAssignRevertSubmissionsToDraftRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignRevertSubmissionsToDraftRequest' is set
            if (modAssignRevertSubmissionsToDraftRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignRevertSubmissionsToDraftRequest' when calling ModAssignApi->ModAssignUnlockSubmissions");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignRevertSubmissionsToDraftRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignUnlockSubmissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_assign_unlock_submissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignUnlockSubmissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the module completion status. Update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModAssignViewAssign(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModAssignViewAssignWithHttpInfo(modAssignViewAssignRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the module completion status. Update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModAssignViewAssignWithHttpInfo(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignViewAssignRequest' is set
            if (modAssignViewAssignRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignViewAssignRequest' when calling ModAssignApi->ModAssignViewAssign");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignViewAssignRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignViewAssign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_assign_view_assign", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignViewAssign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the module completion status. Update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModAssignViewAssignAsync(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModAssignViewAssignWithHttpInfoAsync(modAssignViewAssignRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the module completion status. Update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModAssignViewAssignWithHttpInfoAsync(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignViewAssignRequest' is set
            if (modAssignViewAssignRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignViewAssignRequest' when calling ModAssignApi->ModAssignViewAssign");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignViewAssignRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignViewAssign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_assign_view_assign", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignViewAssign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the grading_table_viewed event. Trigger the grading_table_viewed event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModAssignViewGradingTable(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModAssignViewGradingTableWithHttpInfo(modAssignViewAssignRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the grading_table_viewed event. Trigger the grading_table_viewed event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModAssignViewGradingTableWithHttpInfo(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignViewAssignRequest' is set
            if (modAssignViewAssignRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignViewAssignRequest' when calling ModAssignApi->ModAssignViewGradingTable");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignViewAssignRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignViewGradingTable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_assign_view_grading_table", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignViewGradingTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the grading_table_viewed event. Trigger the grading_table_viewed event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModAssignViewGradingTableAsync(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModAssignViewGradingTableWithHttpInfoAsync(modAssignViewAssignRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the grading_table_viewed event. Trigger the grading_table_viewed event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModAssignViewGradingTableWithHttpInfoAsync(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignViewAssignRequest' is set
            if (modAssignViewAssignRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignViewAssignRequest' when calling ModAssignApi->ModAssignViewGradingTable");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignViewAssignRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignViewGradingTable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_assign_view_grading_table", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignViewGradingTable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the submission status viewed event. Trigger the submission status viewed event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModAssignViewSubmissionStatus(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModAssignViewSubmissionStatusWithHttpInfo(modAssignViewAssignRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the submission status viewed event. Trigger the submission status viewed event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModAssignViewSubmissionStatusWithHttpInfo(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modAssignViewAssignRequest' is set
            if (modAssignViewAssignRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignViewAssignRequest' when calling ModAssignApi->ModAssignViewSubmissionStatus");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignViewAssignRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignViewSubmissionStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_assign_view_submission_status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignViewSubmissionStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the submission status viewed event. Trigger the submission status viewed event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModAssignViewSubmissionStatusAsync(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModAssignViewSubmissionStatusWithHttpInfoAsync(modAssignViewAssignRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the submission status viewed event. Trigger the submission status viewed event.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modAssignViewAssignRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModAssignViewSubmissionStatusWithHttpInfoAsync(ModAssignViewAssignRequest modAssignViewAssignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modAssignViewAssignRequest' is set
            if (modAssignViewAssignRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modAssignViewAssignRequest' when calling ModAssignApi->ModAssignViewSubmissionStatus");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modAssignViewAssignRequest;

            localVarRequestOptions.Operation = "ModAssignApi.ModAssignViewSubmissionStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_assign_view_submission_status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModAssignViewSubmissionStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
