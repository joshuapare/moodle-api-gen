/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MoodleClient.Client;
using MoodleClient.Model;

namespace MoodleClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModIomadcertificateApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModIomadcertificateGetIomadcertificatesByCourses200Response</returns>
        ModIomadcertificateGetIomadcertificatesByCourses200Response ModIomadcertificateGetIomadcertificatesByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModIomadcertificateGetIomadcertificatesByCourses200Response</returns>
        ApiResponse<ModIomadcertificateGetIomadcertificatesByCourses200Response> ModIomadcertificateGetIomadcertificatesByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Get the list of issued iomadcertificates for the current user.
        /// </summary>
        /// <remarks>
        /// Get the list of issued iomadcertificates for the current user.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateGetIssuedIomadcertificatesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModIomadcertificateGetIssuedIomadcertificates200Response</returns>
        ModIomadcertificateGetIssuedIomadcertificates200Response ModIomadcertificateGetIssuedIomadcertificates(ModIomadcertificateGetIssuedIomadcertificatesRequest modIomadcertificateGetIssuedIomadcertificatesRequest, int operationIndex = 0);

        /// <summary>
        /// Get the list of issued iomadcertificates for the current user.
        /// </summary>
        /// <remarks>
        /// Get the list of issued iomadcertificates for the current user.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateGetIssuedIomadcertificatesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModIomadcertificateGetIssuedIomadcertificates200Response</returns>
        ApiResponse<ModIomadcertificateGetIssuedIomadcertificates200Response> ModIomadcertificateGetIssuedIomadcertificatesWithHttpInfo(ModIomadcertificateGetIssuedIomadcertificatesRequest modIomadcertificateGetIssuedIomadcertificatesRequest, int operationIndex = 0);
        /// <summary>
        /// Create new iomadcertificate record, or return existing record for the current user.
        /// </summary>
        /// <remarks>
        /// Create new iomadcertificate record, or return existing record for the current user.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModIomadcertificateIssueIomadcertificate200Response</returns>
        ModIomadcertificateIssueIomadcertificate200Response ModIomadcertificateIssueIomadcertificate(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0);

        /// <summary>
        /// Create new iomadcertificate record, or return existing record for the current user.
        /// </summary>
        /// <remarks>
        /// Create new iomadcertificate record, or return existing record for the current user.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModIomadcertificateIssueIomadcertificate200Response</returns>
        ApiResponse<ModIomadcertificateIssueIomadcertificate200Response> ModIomadcertificateIssueIomadcertificateWithHttpInfo(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModIomadcertificateViewIomadcertificate(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModIomadcertificateViewIomadcertificateWithHttpInfo(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModIomadcertificateApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModIomadcertificateGetIomadcertificatesByCourses200Response</returns>
        System.Threading.Tasks.Task<ModIomadcertificateGetIomadcertificatesByCourses200Response> ModIomadcertificateGetIomadcertificatesByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModIomadcertificateGetIomadcertificatesByCourses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModIomadcertificateGetIomadcertificatesByCourses200Response>> ModIomadcertificateGetIomadcertificatesByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of issued iomadcertificates for the current user.
        /// </summary>
        /// <remarks>
        /// Get the list of issued iomadcertificates for the current user.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateGetIssuedIomadcertificatesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModIomadcertificateGetIssuedIomadcertificates200Response</returns>
        System.Threading.Tasks.Task<ModIomadcertificateGetIssuedIomadcertificates200Response> ModIomadcertificateGetIssuedIomadcertificatesAsync(ModIomadcertificateGetIssuedIomadcertificatesRequest modIomadcertificateGetIssuedIomadcertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of issued iomadcertificates for the current user.
        /// </summary>
        /// <remarks>
        /// Get the list of issued iomadcertificates for the current user.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateGetIssuedIomadcertificatesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModIomadcertificateGetIssuedIomadcertificates200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModIomadcertificateGetIssuedIomadcertificates200Response>> ModIomadcertificateGetIssuedIomadcertificatesWithHttpInfoAsync(ModIomadcertificateGetIssuedIomadcertificatesRequest modIomadcertificateGetIssuedIomadcertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create new iomadcertificate record, or return existing record for the current user.
        /// </summary>
        /// <remarks>
        /// Create new iomadcertificate record, or return existing record for the current user.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModIomadcertificateIssueIomadcertificate200Response</returns>
        System.Threading.Tasks.Task<ModIomadcertificateIssueIomadcertificate200Response> ModIomadcertificateIssueIomadcertificateAsync(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new iomadcertificate record, or return existing record for the current user.
        /// </summary>
        /// <remarks>
        /// Create new iomadcertificate record, or return existing record for the current user.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModIomadcertificateIssueIomadcertificate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModIomadcertificateIssueIomadcertificate200Response>> ModIomadcertificateIssueIomadcertificateWithHttpInfoAsync(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModIomadcertificateViewIomadcertificateAsync(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModIomadcertificateViewIomadcertificateWithHttpInfoAsync(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModIomadcertificateApi : IModIomadcertificateApiSync, IModIomadcertificateApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModIomadcertificateApi : IModIomadcertificateApi
    {
        private MoodleClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModIomadcertificateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModIomadcertificateApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModIomadcertificateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModIomadcertificateApi(string basePath)
        {
            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                new MoodleClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModIomadcertificateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModIomadcertificateApi(MoodleClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModIomadcertificateApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModIomadcertificateApi(MoodleClient.Client.ISynchronousClient client, MoodleClient.Client.IAsynchronousClient asyncClient, MoodleClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MoodleClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MoodleClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MoodleClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MoodleClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned. Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModIomadcertificateGetIomadcertificatesByCourses200Response</returns>
        public ModIomadcertificateGetIomadcertificatesByCourses200Response ModIomadcertificateGetIomadcertificatesByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModIomadcertificateGetIomadcertificatesByCourses200Response> localVarResponse = ModIomadcertificateGetIomadcertificatesByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned. Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModIomadcertificateGetIomadcertificatesByCourses200Response</returns>
        public MoodleClient.Client.ApiResponse<ModIomadcertificateGetIomadcertificatesByCourses200Response> ModIomadcertificateGetIomadcertificatesByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModIomadcertificateApi->ModIomadcertificateGetIomadcertificatesByCourses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModIomadcertificateApi.ModIomadcertificateGetIomadcertificatesByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModIomadcertificateGetIomadcertificatesByCourses200Response>("/mod_iomadcertificate_get_iomadcertificates_by_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModIomadcertificateGetIomadcertificatesByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned. Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModIomadcertificateGetIomadcertificatesByCourses200Response</returns>
        public async System.Threading.Tasks.Task<ModIomadcertificateGetIomadcertificatesByCourses200Response> ModIomadcertificateGetIomadcertificatesByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModIomadcertificateGetIomadcertificatesByCourses200Response> localVarResponse = await ModIomadcertificateGetIomadcertificatesByCoursesWithHttpInfoAsync(modChatGetChatsByCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned. Returns a list of iomadcertificate instances in a provided set of courses, if                             no courses are provided then all the iomadcertificate instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModIomadcertificateGetIomadcertificatesByCourses200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModIomadcertificateGetIomadcertificatesByCourses200Response>> ModIomadcertificateGetIomadcertificatesByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModIomadcertificateApi->ModIomadcertificateGetIomadcertificatesByCourses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModIomadcertificateApi.ModIomadcertificateGetIomadcertificatesByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModIomadcertificateGetIomadcertificatesByCourses200Response>("/mod_iomadcertificate_get_iomadcertificates_by_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModIomadcertificateGetIomadcertificatesByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of issued iomadcertificates for the current user. Get the list of issued iomadcertificates for the current user.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateGetIssuedIomadcertificatesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModIomadcertificateGetIssuedIomadcertificates200Response</returns>
        public ModIomadcertificateGetIssuedIomadcertificates200Response ModIomadcertificateGetIssuedIomadcertificates(ModIomadcertificateGetIssuedIomadcertificatesRequest modIomadcertificateGetIssuedIomadcertificatesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModIomadcertificateGetIssuedIomadcertificates200Response> localVarResponse = ModIomadcertificateGetIssuedIomadcertificatesWithHttpInfo(modIomadcertificateGetIssuedIomadcertificatesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of issued iomadcertificates for the current user. Get the list of issued iomadcertificates for the current user.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateGetIssuedIomadcertificatesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModIomadcertificateGetIssuedIomadcertificates200Response</returns>
        public MoodleClient.Client.ApiResponse<ModIomadcertificateGetIssuedIomadcertificates200Response> ModIomadcertificateGetIssuedIomadcertificatesWithHttpInfo(ModIomadcertificateGetIssuedIomadcertificatesRequest modIomadcertificateGetIssuedIomadcertificatesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modIomadcertificateGetIssuedIomadcertificatesRequest' is set
            if (modIomadcertificateGetIssuedIomadcertificatesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modIomadcertificateGetIssuedIomadcertificatesRequest' when calling ModIomadcertificateApi->ModIomadcertificateGetIssuedIomadcertificates");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modIomadcertificateGetIssuedIomadcertificatesRequest;

            localVarRequestOptions.Operation = "ModIomadcertificateApi.ModIomadcertificateGetIssuedIomadcertificates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModIomadcertificateGetIssuedIomadcertificates200Response>("/mod_iomadcertificate_get_issued_iomadcertificates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModIomadcertificateGetIssuedIomadcertificates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of issued iomadcertificates for the current user. Get the list of issued iomadcertificates for the current user.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateGetIssuedIomadcertificatesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModIomadcertificateGetIssuedIomadcertificates200Response</returns>
        public async System.Threading.Tasks.Task<ModIomadcertificateGetIssuedIomadcertificates200Response> ModIomadcertificateGetIssuedIomadcertificatesAsync(ModIomadcertificateGetIssuedIomadcertificatesRequest modIomadcertificateGetIssuedIomadcertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModIomadcertificateGetIssuedIomadcertificates200Response> localVarResponse = await ModIomadcertificateGetIssuedIomadcertificatesWithHttpInfoAsync(modIomadcertificateGetIssuedIomadcertificatesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of issued iomadcertificates for the current user. Get the list of issued iomadcertificates for the current user.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateGetIssuedIomadcertificatesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModIomadcertificateGetIssuedIomadcertificates200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModIomadcertificateGetIssuedIomadcertificates200Response>> ModIomadcertificateGetIssuedIomadcertificatesWithHttpInfoAsync(ModIomadcertificateGetIssuedIomadcertificatesRequest modIomadcertificateGetIssuedIomadcertificatesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modIomadcertificateGetIssuedIomadcertificatesRequest' is set
            if (modIomadcertificateGetIssuedIomadcertificatesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modIomadcertificateGetIssuedIomadcertificatesRequest' when calling ModIomadcertificateApi->ModIomadcertificateGetIssuedIomadcertificates");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modIomadcertificateGetIssuedIomadcertificatesRequest;

            localVarRequestOptions.Operation = "ModIomadcertificateApi.ModIomadcertificateGetIssuedIomadcertificates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModIomadcertificateGetIssuedIomadcertificates200Response>("/mod_iomadcertificate_get_issued_iomadcertificates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModIomadcertificateGetIssuedIomadcertificates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new iomadcertificate record, or return existing record for the current user. Create new iomadcertificate record, or return existing record for the current user.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModIomadcertificateIssueIomadcertificate200Response</returns>
        public ModIomadcertificateIssueIomadcertificate200Response ModIomadcertificateIssueIomadcertificate(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModIomadcertificateIssueIomadcertificate200Response> localVarResponse = ModIomadcertificateIssueIomadcertificateWithHttpInfo(modIomadcertificateIssueIomadcertificateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new iomadcertificate record, or return existing record for the current user. Create new iomadcertificate record, or return existing record for the current user.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModIomadcertificateIssueIomadcertificate200Response</returns>
        public MoodleClient.Client.ApiResponse<ModIomadcertificateIssueIomadcertificate200Response> ModIomadcertificateIssueIomadcertificateWithHttpInfo(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modIomadcertificateIssueIomadcertificateRequest' is set
            if (modIomadcertificateIssueIomadcertificateRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modIomadcertificateIssueIomadcertificateRequest' when calling ModIomadcertificateApi->ModIomadcertificateIssueIomadcertificate");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modIomadcertificateIssueIomadcertificateRequest;

            localVarRequestOptions.Operation = "ModIomadcertificateApi.ModIomadcertificateIssueIomadcertificate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModIomadcertificateIssueIomadcertificate200Response>("/mod_iomadcertificate_issue_iomadcertificate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModIomadcertificateIssueIomadcertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new iomadcertificate record, or return existing record for the current user. Create new iomadcertificate record, or return existing record for the current user.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModIomadcertificateIssueIomadcertificate200Response</returns>
        public async System.Threading.Tasks.Task<ModIomadcertificateIssueIomadcertificate200Response> ModIomadcertificateIssueIomadcertificateAsync(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModIomadcertificateIssueIomadcertificate200Response> localVarResponse = await ModIomadcertificateIssueIomadcertificateWithHttpInfoAsync(modIomadcertificateIssueIomadcertificateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new iomadcertificate record, or return existing record for the current user. Create new iomadcertificate record, or return existing record for the current user.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModIomadcertificateIssueIomadcertificate200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModIomadcertificateIssueIomadcertificate200Response>> ModIomadcertificateIssueIomadcertificateWithHttpInfoAsync(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modIomadcertificateIssueIomadcertificateRequest' is set
            if (modIomadcertificateIssueIomadcertificateRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modIomadcertificateIssueIomadcertificateRequest' when calling ModIomadcertificateApi->ModIomadcertificateIssueIomadcertificate");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modIomadcertificateIssueIomadcertificateRequest;

            localVarRequestOptions.Operation = "ModIomadcertificateApi.ModIomadcertificateIssueIomadcertificate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModIomadcertificateIssueIomadcertificate200Response>("/mod_iomadcertificate_issue_iomadcertificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModIomadcertificateIssueIomadcertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModIomadcertificateViewIomadcertificate(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModIomadcertificateViewIomadcertificateWithHttpInfo(modIomadcertificateIssueIomadcertificateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModIomadcertificateViewIomadcertificateWithHttpInfo(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modIomadcertificateIssueIomadcertificateRequest' is set
            if (modIomadcertificateIssueIomadcertificateRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modIomadcertificateIssueIomadcertificateRequest' when calling ModIomadcertificateApi->ModIomadcertificateViewIomadcertificate");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modIomadcertificateIssueIomadcertificateRequest;

            localVarRequestOptions.Operation = "ModIomadcertificateApi.ModIomadcertificateViewIomadcertificate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_iomadcertificate_view_iomadcertificate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModIomadcertificateViewIomadcertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModIomadcertificateViewIomadcertificateAsync(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModIomadcertificateViewIomadcertificateWithHttpInfoAsync(modIomadcertificateIssueIomadcertificateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modIomadcertificateIssueIomadcertificateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModIomadcertificateViewIomadcertificateWithHttpInfoAsync(ModIomadcertificateIssueIomadcertificateRequest modIomadcertificateIssueIomadcertificateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modIomadcertificateIssueIomadcertificateRequest' is set
            if (modIomadcertificateIssueIomadcertificateRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modIomadcertificateIssueIomadcertificateRequest' when calling ModIomadcertificateApi->ModIomadcertificateViewIomadcertificate");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modIomadcertificateIssueIomadcertificateRequest;

            localVarRequestOptions.Operation = "ModIomadcertificateApi.ModIomadcertificateViewIomadcertificate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_iomadcertificate_view_iomadcertificate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModIomadcertificateViewIomadcertificate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
