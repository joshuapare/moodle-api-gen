/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MoodleClient.Client;
using MoodleClient.Model;

namespace MoodleClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModChoiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete the given submitted responses in a choice
        /// </summary>
        /// <remarks>
        /// Delete the given submitted responses in a choice
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceDeleteChoiceResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModChoiceDeleteChoiceResponses200Response</returns>
        ModChoiceDeleteChoiceResponses200Response ModChoiceDeleteChoiceResponses(ModChoiceDeleteChoiceResponsesRequest modChoiceDeleteChoiceResponsesRequest, int operationIndex = 0);

        /// <summary>
        /// Delete the given submitted responses in a choice
        /// </summary>
        /// <remarks>
        /// Delete the given submitted responses in a choice
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceDeleteChoiceResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModChoiceDeleteChoiceResponses200Response</returns>
        ApiResponse<ModChoiceDeleteChoiceResponses200Response> ModChoiceDeleteChoiceResponsesWithHttpInfo(ModChoiceDeleteChoiceResponsesRequest modChoiceDeleteChoiceResponsesRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve options for a specific choice.
        /// </summary>
        /// <remarks>
        /// Retrieve options for a specific choice.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModChoiceGetChoiceOptions200Response</returns>
        ModChoiceGetChoiceOptions200Response ModChoiceGetChoiceOptions(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve options for a specific choice.
        /// </summary>
        /// <remarks>
        /// Retrieve options for a specific choice.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModChoiceGetChoiceOptions200Response</returns>
        ApiResponse<ModChoiceGetChoiceOptions200Response> ModChoiceGetChoiceOptionsWithHttpInfo(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve users results for a given choice.
        /// </summary>
        /// <remarks>
        /// Retrieve users results for a given choice.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModChoiceGetChoiceResults200Response</returns>
        ModChoiceGetChoiceResults200Response ModChoiceGetChoiceResults(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve users results for a given choice.
        /// </summary>
        /// <remarks>
        /// Retrieve users results for a given choice.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModChoiceGetChoiceResults200Response</returns>
        ApiResponse<ModChoiceGetChoiceResults200Response> ModChoiceGetChoiceResultsWithHttpInfo(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModChoiceGetChoicesByCourses200Response</returns>
        ModChoiceGetChoicesByCourses200Response ModChoiceGetChoicesByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModChoiceGetChoicesByCourses200Response</returns>
        ApiResponse<ModChoiceGetChoicesByCourses200Response> ModChoiceGetChoicesByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Submit responses to a specific choice item.
        /// </summary>
        /// <remarks>
        /// Submit responses to a specific choice item.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceSubmitChoiceResponseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModChoiceSubmitChoiceResponse200Response</returns>
        ModChoiceSubmitChoiceResponse200Response ModChoiceSubmitChoiceResponse(ModChoiceSubmitChoiceResponseRequest modChoiceSubmitChoiceResponseRequest, int operationIndex = 0);

        /// <summary>
        /// Submit responses to a specific choice item.
        /// </summary>
        /// <remarks>
        /// Submit responses to a specific choice item.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceSubmitChoiceResponseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModChoiceSubmitChoiceResponse200Response</returns>
        ApiResponse<ModChoiceSubmitChoiceResponse200Response> ModChoiceSubmitChoiceResponseWithHttpInfo(ModChoiceSubmitChoiceResponseRequest modChoiceSubmitChoiceResponseRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModChoiceViewChoice(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModChoiceViewChoiceWithHttpInfo(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModChoiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete the given submitted responses in a choice
        /// </summary>
        /// <remarks>
        /// Delete the given submitted responses in a choice
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceDeleteChoiceResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModChoiceDeleteChoiceResponses200Response</returns>
        System.Threading.Tasks.Task<ModChoiceDeleteChoiceResponses200Response> ModChoiceDeleteChoiceResponsesAsync(ModChoiceDeleteChoiceResponsesRequest modChoiceDeleteChoiceResponsesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete the given submitted responses in a choice
        /// </summary>
        /// <remarks>
        /// Delete the given submitted responses in a choice
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceDeleteChoiceResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModChoiceDeleteChoiceResponses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModChoiceDeleteChoiceResponses200Response>> ModChoiceDeleteChoiceResponsesWithHttpInfoAsync(ModChoiceDeleteChoiceResponsesRequest modChoiceDeleteChoiceResponsesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve options for a specific choice.
        /// </summary>
        /// <remarks>
        /// Retrieve options for a specific choice.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModChoiceGetChoiceOptions200Response</returns>
        System.Threading.Tasks.Task<ModChoiceGetChoiceOptions200Response> ModChoiceGetChoiceOptionsAsync(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve options for a specific choice.
        /// </summary>
        /// <remarks>
        /// Retrieve options for a specific choice.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModChoiceGetChoiceOptions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModChoiceGetChoiceOptions200Response>> ModChoiceGetChoiceOptionsWithHttpInfoAsync(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve users results for a given choice.
        /// </summary>
        /// <remarks>
        /// Retrieve users results for a given choice.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModChoiceGetChoiceResults200Response</returns>
        System.Threading.Tasks.Task<ModChoiceGetChoiceResults200Response> ModChoiceGetChoiceResultsAsync(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve users results for a given choice.
        /// </summary>
        /// <remarks>
        /// Retrieve users results for a given choice.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModChoiceGetChoiceResults200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModChoiceGetChoiceResults200Response>> ModChoiceGetChoiceResultsWithHttpInfoAsync(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModChoiceGetChoicesByCourses200Response</returns>
        System.Threading.Tasks.Task<ModChoiceGetChoicesByCourses200Response> ModChoiceGetChoicesByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModChoiceGetChoicesByCourses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModChoiceGetChoicesByCourses200Response>> ModChoiceGetChoicesByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Submit responses to a specific choice item.
        /// </summary>
        /// <remarks>
        /// Submit responses to a specific choice item.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceSubmitChoiceResponseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModChoiceSubmitChoiceResponse200Response</returns>
        System.Threading.Tasks.Task<ModChoiceSubmitChoiceResponse200Response> ModChoiceSubmitChoiceResponseAsync(ModChoiceSubmitChoiceResponseRequest modChoiceSubmitChoiceResponseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Submit responses to a specific choice item.
        /// </summary>
        /// <remarks>
        /// Submit responses to a specific choice item.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceSubmitChoiceResponseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModChoiceSubmitChoiceResponse200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModChoiceSubmitChoiceResponse200Response>> ModChoiceSubmitChoiceResponseWithHttpInfoAsync(ModChoiceSubmitChoiceResponseRequest modChoiceSubmitChoiceResponseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModChoiceViewChoiceAsync(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModChoiceViewChoiceWithHttpInfoAsync(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModChoiceApi : IModChoiceApiSync, IModChoiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModChoiceApi : IModChoiceApi
    {
        private MoodleClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModChoiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModChoiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModChoiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModChoiceApi(string basePath)
        {
            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                new MoodleClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModChoiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModChoiceApi(MoodleClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModChoiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModChoiceApi(MoodleClient.Client.ISynchronousClient client, MoodleClient.Client.IAsynchronousClient asyncClient, MoodleClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MoodleClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MoodleClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MoodleClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MoodleClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete the given submitted responses in a choice Delete the given submitted responses in a choice
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceDeleteChoiceResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModChoiceDeleteChoiceResponses200Response</returns>
        public ModChoiceDeleteChoiceResponses200Response ModChoiceDeleteChoiceResponses(ModChoiceDeleteChoiceResponsesRequest modChoiceDeleteChoiceResponsesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModChoiceDeleteChoiceResponses200Response> localVarResponse = ModChoiceDeleteChoiceResponsesWithHttpInfo(modChoiceDeleteChoiceResponsesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the given submitted responses in a choice Delete the given submitted responses in a choice
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceDeleteChoiceResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModChoiceDeleteChoiceResponses200Response</returns>
        public MoodleClient.Client.ApiResponse<ModChoiceDeleteChoiceResponses200Response> ModChoiceDeleteChoiceResponsesWithHttpInfo(ModChoiceDeleteChoiceResponsesRequest modChoiceDeleteChoiceResponsesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modChoiceDeleteChoiceResponsesRequest' is set
            if (modChoiceDeleteChoiceResponsesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChoiceDeleteChoiceResponsesRequest' when calling ModChoiceApi->ModChoiceDeleteChoiceResponses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChoiceDeleteChoiceResponsesRequest;

            localVarRequestOptions.Operation = "ModChoiceApi.ModChoiceDeleteChoiceResponses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModChoiceDeleteChoiceResponses200Response>("/mod_choice_delete_choice_responses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModChoiceDeleteChoiceResponses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the given submitted responses in a choice Delete the given submitted responses in a choice
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceDeleteChoiceResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModChoiceDeleteChoiceResponses200Response</returns>
        public async System.Threading.Tasks.Task<ModChoiceDeleteChoiceResponses200Response> ModChoiceDeleteChoiceResponsesAsync(ModChoiceDeleteChoiceResponsesRequest modChoiceDeleteChoiceResponsesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModChoiceDeleteChoiceResponses200Response> localVarResponse = await ModChoiceDeleteChoiceResponsesWithHttpInfoAsync(modChoiceDeleteChoiceResponsesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the given submitted responses in a choice Delete the given submitted responses in a choice
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceDeleteChoiceResponsesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModChoiceDeleteChoiceResponses200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModChoiceDeleteChoiceResponses200Response>> ModChoiceDeleteChoiceResponsesWithHttpInfoAsync(ModChoiceDeleteChoiceResponsesRequest modChoiceDeleteChoiceResponsesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modChoiceDeleteChoiceResponsesRequest' is set
            if (modChoiceDeleteChoiceResponsesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChoiceDeleteChoiceResponsesRequest' when calling ModChoiceApi->ModChoiceDeleteChoiceResponses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChoiceDeleteChoiceResponsesRequest;

            localVarRequestOptions.Operation = "ModChoiceApi.ModChoiceDeleteChoiceResponses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModChoiceDeleteChoiceResponses200Response>("/mod_choice_delete_choice_responses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModChoiceDeleteChoiceResponses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve options for a specific choice. Retrieve options for a specific choice.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModChoiceGetChoiceOptions200Response</returns>
        public ModChoiceGetChoiceOptions200Response ModChoiceGetChoiceOptions(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModChoiceGetChoiceOptions200Response> localVarResponse = ModChoiceGetChoiceOptionsWithHttpInfo(modChoiceGetChoiceOptionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve options for a specific choice. Retrieve options for a specific choice.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModChoiceGetChoiceOptions200Response</returns>
        public MoodleClient.Client.ApiResponse<ModChoiceGetChoiceOptions200Response> ModChoiceGetChoiceOptionsWithHttpInfo(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modChoiceGetChoiceOptionsRequest' is set
            if (modChoiceGetChoiceOptionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChoiceGetChoiceOptionsRequest' when calling ModChoiceApi->ModChoiceGetChoiceOptions");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChoiceGetChoiceOptionsRequest;

            localVarRequestOptions.Operation = "ModChoiceApi.ModChoiceGetChoiceOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModChoiceGetChoiceOptions200Response>("/mod_choice_get_choice_options", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModChoiceGetChoiceOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve options for a specific choice. Retrieve options for a specific choice.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModChoiceGetChoiceOptions200Response</returns>
        public async System.Threading.Tasks.Task<ModChoiceGetChoiceOptions200Response> ModChoiceGetChoiceOptionsAsync(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModChoiceGetChoiceOptions200Response> localVarResponse = await ModChoiceGetChoiceOptionsWithHttpInfoAsync(modChoiceGetChoiceOptionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve options for a specific choice. Retrieve options for a specific choice.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModChoiceGetChoiceOptions200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModChoiceGetChoiceOptions200Response>> ModChoiceGetChoiceOptionsWithHttpInfoAsync(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modChoiceGetChoiceOptionsRequest' is set
            if (modChoiceGetChoiceOptionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChoiceGetChoiceOptionsRequest' when calling ModChoiceApi->ModChoiceGetChoiceOptions");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChoiceGetChoiceOptionsRequest;

            localVarRequestOptions.Operation = "ModChoiceApi.ModChoiceGetChoiceOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModChoiceGetChoiceOptions200Response>("/mod_choice_get_choice_options", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModChoiceGetChoiceOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve users results for a given choice. Retrieve users results for a given choice.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModChoiceGetChoiceResults200Response</returns>
        public ModChoiceGetChoiceResults200Response ModChoiceGetChoiceResults(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModChoiceGetChoiceResults200Response> localVarResponse = ModChoiceGetChoiceResultsWithHttpInfo(modChoiceGetChoiceOptionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve users results for a given choice. Retrieve users results for a given choice.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModChoiceGetChoiceResults200Response</returns>
        public MoodleClient.Client.ApiResponse<ModChoiceGetChoiceResults200Response> ModChoiceGetChoiceResultsWithHttpInfo(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modChoiceGetChoiceOptionsRequest' is set
            if (modChoiceGetChoiceOptionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChoiceGetChoiceOptionsRequest' when calling ModChoiceApi->ModChoiceGetChoiceResults");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChoiceGetChoiceOptionsRequest;

            localVarRequestOptions.Operation = "ModChoiceApi.ModChoiceGetChoiceResults";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModChoiceGetChoiceResults200Response>("/mod_choice_get_choice_results", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModChoiceGetChoiceResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve users results for a given choice. Retrieve users results for a given choice.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModChoiceGetChoiceResults200Response</returns>
        public async System.Threading.Tasks.Task<ModChoiceGetChoiceResults200Response> ModChoiceGetChoiceResultsAsync(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModChoiceGetChoiceResults200Response> localVarResponse = await ModChoiceGetChoiceResultsWithHttpInfoAsync(modChoiceGetChoiceOptionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve users results for a given choice. Retrieve users results for a given choice.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModChoiceGetChoiceResults200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModChoiceGetChoiceResults200Response>> ModChoiceGetChoiceResultsWithHttpInfoAsync(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modChoiceGetChoiceOptionsRequest' is set
            if (modChoiceGetChoiceOptionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChoiceGetChoiceOptionsRequest' when calling ModChoiceApi->ModChoiceGetChoiceResults");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChoiceGetChoiceOptionsRequest;

            localVarRequestOptions.Operation = "ModChoiceApi.ModChoiceGetChoiceResults";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModChoiceGetChoiceResults200Response>("/mod_choice_get_choice_results", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModChoiceGetChoiceResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned. Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModChoiceGetChoicesByCourses200Response</returns>
        public ModChoiceGetChoicesByCourses200Response ModChoiceGetChoicesByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModChoiceGetChoicesByCourses200Response> localVarResponse = ModChoiceGetChoicesByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned. Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModChoiceGetChoicesByCourses200Response</returns>
        public MoodleClient.Client.ApiResponse<ModChoiceGetChoicesByCourses200Response> ModChoiceGetChoicesByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModChoiceApi->ModChoiceGetChoicesByCourses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModChoiceApi.ModChoiceGetChoicesByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModChoiceGetChoicesByCourses200Response>("/mod_choice_get_choices_by_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModChoiceGetChoicesByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned. Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModChoiceGetChoicesByCourses200Response</returns>
        public async System.Threading.Tasks.Task<ModChoiceGetChoicesByCourses200Response> ModChoiceGetChoicesByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModChoiceGetChoicesByCourses200Response> localVarResponse = await ModChoiceGetChoicesByCoursesWithHttpInfoAsync(modChatGetChatsByCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned. Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModChoiceGetChoicesByCourses200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModChoiceGetChoicesByCourses200Response>> ModChoiceGetChoicesByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModChoiceApi->ModChoiceGetChoicesByCourses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModChoiceApi.ModChoiceGetChoicesByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModChoiceGetChoicesByCourses200Response>("/mod_choice_get_choices_by_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModChoiceGetChoicesByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit responses to a specific choice item. Submit responses to a specific choice item.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceSubmitChoiceResponseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModChoiceSubmitChoiceResponse200Response</returns>
        public ModChoiceSubmitChoiceResponse200Response ModChoiceSubmitChoiceResponse(ModChoiceSubmitChoiceResponseRequest modChoiceSubmitChoiceResponseRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModChoiceSubmitChoiceResponse200Response> localVarResponse = ModChoiceSubmitChoiceResponseWithHttpInfo(modChoiceSubmitChoiceResponseRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit responses to a specific choice item. Submit responses to a specific choice item.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceSubmitChoiceResponseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModChoiceSubmitChoiceResponse200Response</returns>
        public MoodleClient.Client.ApiResponse<ModChoiceSubmitChoiceResponse200Response> ModChoiceSubmitChoiceResponseWithHttpInfo(ModChoiceSubmitChoiceResponseRequest modChoiceSubmitChoiceResponseRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modChoiceSubmitChoiceResponseRequest' is set
            if (modChoiceSubmitChoiceResponseRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChoiceSubmitChoiceResponseRequest' when calling ModChoiceApi->ModChoiceSubmitChoiceResponse");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChoiceSubmitChoiceResponseRequest;

            localVarRequestOptions.Operation = "ModChoiceApi.ModChoiceSubmitChoiceResponse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModChoiceSubmitChoiceResponse200Response>("/mod_choice_submit_choice_response", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModChoiceSubmitChoiceResponse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Submit responses to a specific choice item. Submit responses to a specific choice item.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceSubmitChoiceResponseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModChoiceSubmitChoiceResponse200Response</returns>
        public async System.Threading.Tasks.Task<ModChoiceSubmitChoiceResponse200Response> ModChoiceSubmitChoiceResponseAsync(ModChoiceSubmitChoiceResponseRequest modChoiceSubmitChoiceResponseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModChoiceSubmitChoiceResponse200Response> localVarResponse = await ModChoiceSubmitChoiceResponseWithHttpInfoAsync(modChoiceSubmitChoiceResponseRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Submit responses to a specific choice item. Submit responses to a specific choice item.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceSubmitChoiceResponseRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModChoiceSubmitChoiceResponse200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModChoiceSubmitChoiceResponse200Response>> ModChoiceSubmitChoiceResponseWithHttpInfoAsync(ModChoiceSubmitChoiceResponseRequest modChoiceSubmitChoiceResponseRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modChoiceSubmitChoiceResponseRequest' is set
            if (modChoiceSubmitChoiceResponseRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChoiceSubmitChoiceResponseRequest' when calling ModChoiceApi->ModChoiceSubmitChoiceResponse");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChoiceSubmitChoiceResponseRequest;

            localVarRequestOptions.Operation = "ModChoiceApi.ModChoiceSubmitChoiceResponse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModChoiceSubmitChoiceResponse200Response>("/mod_choice_submit_choice_response", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModChoiceSubmitChoiceResponse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModChoiceViewChoice(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModChoiceViewChoiceWithHttpInfo(modChoiceGetChoiceOptionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModChoiceViewChoiceWithHttpInfo(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modChoiceGetChoiceOptionsRequest' is set
            if (modChoiceGetChoiceOptionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChoiceGetChoiceOptionsRequest' when calling ModChoiceApi->ModChoiceViewChoice");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChoiceGetChoiceOptionsRequest;

            localVarRequestOptions.Operation = "ModChoiceApi.ModChoiceViewChoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_choice_view_choice", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModChoiceViewChoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModChoiceViewChoiceAsync(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModChoiceViewChoiceWithHttpInfoAsync(modChoiceGetChoiceOptionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChoiceGetChoiceOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModChoiceViewChoiceWithHttpInfoAsync(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modChoiceGetChoiceOptionsRequest' is set
            if (modChoiceGetChoiceOptionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChoiceGetChoiceOptionsRequest' when calling ModChoiceApi->ModChoiceViewChoice");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChoiceGetChoiceOptionsRequest;

            localVarRequestOptions.Operation = "ModChoiceApi.ModChoiceViewChoice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_choice_view_choice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModChoiceViewChoice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
