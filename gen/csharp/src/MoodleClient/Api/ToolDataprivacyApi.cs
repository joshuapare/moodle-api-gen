/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MoodleClient.Client;
using MoodleClient.Model;

namespace MoodleClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolDataprivacyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Approve a data request
        /// </summary>
        /// <remarks>
        /// Approve a data request
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyApproveDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        CoreContentbankRenameContent200Response ToolDataprivacyApproveDataRequest(ToolDataprivacyApproveDataRequestRequest toolDataprivacyApproveDataRequestRequest, int operationIndex = 0);

        /// <summary>
        /// Approve a data request
        /// </summary>
        /// <remarks>
        /// Approve a data request
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyApproveDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyApproveDataRequestWithHttpInfo(ToolDataprivacyApproveDataRequestRequest toolDataprivacyApproveDataRequestRequest, int operationIndex = 0);
        /// <summary>
        /// Bulk approve data requests
        /// </summary>
        /// <remarks>
        /// Bulk approve data requests
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkApproveDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        CoreContentbankRenameContent200Response ToolDataprivacyBulkApproveDataRequests(ToolDataprivacyBulkApproveDataRequestsRequest toolDataprivacyBulkApproveDataRequestsRequest, int operationIndex = 0);

        /// <summary>
        /// Bulk approve data requests
        /// </summary>
        /// <remarks>
        /// Bulk approve data requests
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkApproveDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyBulkApproveDataRequestsWithHttpInfo(ToolDataprivacyBulkApproveDataRequestsRequest toolDataprivacyBulkApproveDataRequestsRequest, int operationIndex = 0);
        /// <summary>
        /// Bulk deny data requests
        /// </summary>
        /// <remarks>
        /// Bulk deny data requests
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkDenyDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        CoreContentbankRenameContent200Response ToolDataprivacyBulkDenyDataRequests(ToolDataprivacyBulkDenyDataRequestsRequest toolDataprivacyBulkDenyDataRequestsRequest, int operationIndex = 0);

        /// <summary>
        /// Bulk deny data requests
        /// </summary>
        /// <remarks>
        /// Bulk deny data requests
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkDenyDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyBulkDenyDataRequestsWithHttpInfo(ToolDataprivacyBulkDenyDataRequestsRequest toolDataprivacyBulkDenyDataRequestsRequest, int operationIndex = 0);
        /// <summary>
        /// Cancel the data request made by the user
        /// </summary>
        /// <remarks>
        /// Cancel the data request made by the user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        CoreContentbankRenameContent200Response ToolDataprivacyCancelDataRequest(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0);

        /// <summary>
        /// Cancel the data request made by the user
        /// </summary>
        /// <remarks>
        /// Cancel the data request made by the user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyCancelDataRequestWithHttpInfo(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0);
        /// <summary>
        /// Mark the selected expired contexts as confirmed for deletion
        /// </summary>
        /// <remarks>
        /// Mark the selected expired contexts as confirmed for deletion
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyConfirmContextsForDeletionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyConfirmContextsForDeletion200Response</returns>
        ToolDataprivacyConfirmContextsForDeletion200Response ToolDataprivacyConfirmContextsForDeletion(ToolDataprivacyConfirmContextsForDeletionRequest toolDataprivacyConfirmContextsForDeletionRequest, int operationIndex = 0);

        /// <summary>
        /// Mark the selected expired contexts as confirmed for deletion
        /// </summary>
        /// <remarks>
        /// Mark the selected expired contexts as confirmed for deletion
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyConfirmContextsForDeletionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyConfirmContextsForDeletion200Response</returns>
        ApiResponse<ToolDataprivacyConfirmContextsForDeletion200Response> ToolDataprivacyConfirmContextsForDeletionWithHttpInfo(ToolDataprivacyConfirmContextsForDeletionRequest toolDataprivacyConfirmContextsForDeletionRequest, int operationIndex = 0);
        /// <summary>
        /// Contact the site Data Protection Officer(s)
        /// </summary>
        /// <remarks>
        /// Contact the site Data Protection Officer(s)
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyContactDpoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        CoreContentbankRenameContent200Response ToolDataprivacyContactDpo(ToolDataprivacyContactDpoRequest toolDataprivacyContactDpoRequest, int operationIndex = 0);

        /// <summary>
        /// Contact the site Data Protection Officer(s)
        /// </summary>
        /// <remarks>
        /// Contact the site Data Protection Officer(s)
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyContactDpoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyContactDpoWithHttpInfo(ToolDataprivacyContactDpoRequest toolDataprivacyContactDpoRequest, int operationIndex = 0);
        /// <summary>
        /// Adds a data category
        /// </summary>
        /// <remarks>
        /// Adds a data category
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreateCategoryFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyCreateCategoryForm200Response</returns>
        ToolDataprivacyCreateCategoryForm200Response ToolDataprivacyCreateCategoryForm(ToolDataprivacyCreateCategoryFormRequest toolDataprivacyCreateCategoryFormRequest, int operationIndex = 0);

        /// <summary>
        /// Adds a data category
        /// </summary>
        /// <remarks>
        /// Adds a data category
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreateCategoryFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyCreateCategoryForm200Response</returns>
        ApiResponse<ToolDataprivacyCreateCategoryForm200Response> ToolDataprivacyCreateCategoryFormWithHttpInfo(ToolDataprivacyCreateCategoryFormRequest toolDataprivacyCreateCategoryFormRequest, int operationIndex = 0);
        /// <summary>
        /// Adds a data purpose
        /// </summary>
        /// <remarks>
        /// Adds a data purpose
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreatePurposeFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyCreatePurposeForm200Response</returns>
        ToolDataprivacyCreatePurposeForm200Response ToolDataprivacyCreatePurposeForm(ToolDataprivacyCreatePurposeFormRequest toolDataprivacyCreatePurposeFormRequest, int operationIndex = 0);

        /// <summary>
        /// Adds a data purpose
        /// </summary>
        /// <remarks>
        /// Adds a data purpose
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreatePurposeFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyCreatePurposeForm200Response</returns>
        ApiResponse<ToolDataprivacyCreatePurposeForm200Response> ToolDataprivacyCreatePurposeFormWithHttpInfo(ToolDataprivacyCreatePurposeFormRequest toolDataprivacyCreatePurposeFormRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes an existing data category
        /// </summary>
        /// <remarks>
        /// Deletes an existing data category
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeleteCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        CoreContentbankRenameContent200Response ToolDataprivacyDeleteCategory(ToolDataprivacyDeleteCategoryRequest toolDataprivacyDeleteCategoryRequest, int operationIndex = 0);

        /// <summary>
        /// Deletes an existing data category
        /// </summary>
        /// <remarks>
        /// Deletes an existing data category
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeleteCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyDeleteCategoryWithHttpInfo(ToolDataprivacyDeleteCategoryRequest toolDataprivacyDeleteCategoryRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes an existing data purpose
        /// </summary>
        /// <remarks>
        /// Deletes an existing data purpose
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeletePurposeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        CoreContentbankRenameContent200Response ToolDataprivacyDeletePurpose(ToolDataprivacyDeletePurposeRequest toolDataprivacyDeletePurposeRequest, int operationIndex = 0);

        /// <summary>
        /// Deletes an existing data purpose
        /// </summary>
        /// <remarks>
        /// Deletes an existing data purpose
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeletePurposeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyDeletePurposeWithHttpInfo(ToolDataprivacyDeletePurposeRequest toolDataprivacyDeletePurposeRequest, int operationIndex = 0);
        /// <summary>
        /// Deny a data request
        /// </summary>
        /// <remarks>
        /// Deny a data request
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        CoreContentbankRenameContent200Response ToolDataprivacyDenyDataRequest(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0);

        /// <summary>
        /// Deny a data request
        /// </summary>
        /// <remarks>
        /// Deny a data request
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyDenyDataRequestWithHttpInfo(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0);
        /// <summary>
        /// Fetches a list of activity options
        /// </summary>
        /// <remarks>
        /// Fetches a list of activity options
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetActivityOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyGetActivityOptions200Response</returns>
        ToolDataprivacyGetActivityOptions200Response ToolDataprivacyGetActivityOptions(ToolDataprivacyGetActivityOptionsRequest toolDataprivacyGetActivityOptionsRequest, int operationIndex = 0);

        /// <summary>
        /// Fetches a list of activity options
        /// </summary>
        /// <remarks>
        /// Fetches a list of activity options
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetActivityOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyGetActivityOptions200Response</returns>
        ApiResponse<ToolDataprivacyGetActivityOptions200Response> ToolDataprivacyGetActivityOptionsWithHttpInfo(ToolDataprivacyGetActivityOptionsRequest toolDataprivacyGetActivityOptionsRequest, int operationIndex = 0);
        /// <summary>
        /// Fetches a list of data category options
        /// </summary>
        /// <remarks>
        /// Fetches a list of data category options
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyGetCategoryOptions200Response</returns>
        ToolDataprivacyGetCategoryOptions200Response ToolDataprivacyGetCategoryOptions(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0);

        /// <summary>
        /// Fetches a list of data category options
        /// </summary>
        /// <remarks>
        /// Fetches a list of data category options
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyGetCategoryOptions200Response</returns>
        ApiResponse<ToolDataprivacyGetCategoryOptions200Response> ToolDataprivacyGetCategoryOptionsWithHttpInfo(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0);
        /// <summary>
        /// Fetch the details of a user&#39;s data request
        /// </summary>
        /// <remarks>
        /// Fetch the details of a user&#39;s data request
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyGetDataRequest200Response</returns>
        ToolDataprivacyGetDataRequest200Response ToolDataprivacyGetDataRequest(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0);

        /// <summary>
        /// Fetch the details of a user&#39;s data request
        /// </summary>
        /// <remarks>
        /// Fetch the details of a user&#39;s data request
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyGetDataRequest200Response</returns>
        ApiResponse<ToolDataprivacyGetDataRequest200Response> ToolDataprivacyGetDataRequestWithHttpInfo(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0);
        /// <summary>
        /// Fetches a list of data storage purpose options
        /// </summary>
        /// <remarks>
        /// Fetches a list of data storage purpose options
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyGetPurposeOptions200Response</returns>
        ToolDataprivacyGetPurposeOptions200Response ToolDataprivacyGetPurposeOptions(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0);

        /// <summary>
        /// Fetches a list of data storage purpose options
        /// </summary>
        /// <remarks>
        /// Fetches a list of data storage purpose options
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyGetPurposeOptions200Response</returns>
        ApiResponse<ToolDataprivacyGetPurposeOptions200Response> ToolDataprivacyGetPurposeOptionsWithHttpInfo(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0);
        /// <summary>
        /// Fetches a list of users
        /// </summary>
        /// <remarks>
        /// Fetches a list of users
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ToolDataprivacyGetUsers(ToolDataprivacyGetUsersRequest toolDataprivacyGetUsersRequest, int operationIndex = 0);

        /// <summary>
        /// Fetches a list of users
        /// </summary>
        /// <remarks>
        /// Fetches a list of users
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ToolDataprivacyGetUsersWithHttpInfo(ToolDataprivacyGetUsersRequest toolDataprivacyGetUsersRequest, int operationIndex = 0);
        /// <summary>
        /// Mark a user&#39;s general enquiry as complete
        /// </summary>
        /// <remarks>
        /// Mark a user&#39;s general enquiry as complete
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        CoreContentbankRenameContent200Response ToolDataprivacyMarkComplete(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0);

        /// <summary>
        /// Mark a user&#39;s general enquiry as complete
        /// </summary>
        /// <remarks>
        /// Mark a user&#39;s general enquiry as complete
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyMarkCompleteWithHttpInfo(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0);
        /// <summary>
        /// Updates the default category and purpose for a given context level (and optionally, a plugin)
        /// </summary>
        /// <remarks>
        /// Updates the default category and purpose for a given context level (and optionally, a plugin)
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextDefaultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacySetContextDefaults200Response</returns>
        ToolDataprivacySetContextDefaults200Response ToolDataprivacySetContextDefaults(ToolDataprivacySetContextDefaultsRequest toolDataprivacySetContextDefaultsRequest, int operationIndex = 0);

        /// <summary>
        /// Updates the default category and purpose for a given context level (and optionally, a plugin)
        /// </summary>
        /// <remarks>
        /// Updates the default category and purpose for a given context level (and optionally, a plugin)
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextDefaultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacySetContextDefaults200Response</returns>
        ApiResponse<ToolDataprivacySetContextDefaults200Response> ToolDataprivacySetContextDefaultsWithHttpInfo(ToolDataprivacySetContextDefaultsRequest toolDataprivacySetContextDefaultsRequest, int operationIndex = 0);
        /// <summary>
        /// Sets purpose and category for a specific context
        /// </summary>
        /// <remarks>
        /// Sets purpose and category for a specific context
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacySetContextForm200Response</returns>
        ToolDataprivacySetContextForm200Response ToolDataprivacySetContextForm(ToolDataprivacySetContextFormRequest toolDataprivacySetContextFormRequest, int operationIndex = 0);

        /// <summary>
        /// Sets purpose and category for a specific context
        /// </summary>
        /// <remarks>
        /// Sets purpose and category for a specific context
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacySetContextForm200Response</returns>
        ApiResponse<ToolDataprivacySetContextForm200Response> ToolDataprivacySetContextFormWithHttpInfo(ToolDataprivacySetContextFormRequest toolDataprivacySetContextFormRequest, int operationIndex = 0);
        /// <summary>
        /// Sets purpose and category across a context level
        /// </summary>
        /// <remarks>
        /// Sets purpose and category across a context level
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextlevelFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacySetContextlevelForm200Response</returns>
        ToolDataprivacySetContextlevelForm200Response ToolDataprivacySetContextlevelForm(ToolDataprivacySetContextlevelFormRequest toolDataprivacySetContextlevelFormRequest, int operationIndex = 0);

        /// <summary>
        /// Sets purpose and category across a context level
        /// </summary>
        /// <remarks>
        /// Sets purpose and category across a context level
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextlevelFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacySetContextlevelForm200Response</returns>
        ApiResponse<ToolDataprivacySetContextlevelForm200Response> ToolDataprivacySetContextlevelFormWithHttpInfo(ToolDataprivacySetContextlevelFormRequest toolDataprivacySetContextlevelFormRequest, int operationIndex = 0);
        /// <summary>
        /// Save list of selected courses for export
        /// </summary>
        /// <remarks>
        /// Save list of selected courses for export
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySubmitSelectedCoursesFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        CoreContentbankRenameContent200Response ToolDataprivacySubmitSelectedCoursesForm(ToolDataprivacySubmitSelectedCoursesFormRequest toolDataprivacySubmitSelectedCoursesFormRequest, int operationIndex = 0);

        /// <summary>
        /// Save list of selected courses for export
        /// </summary>
        /// <remarks>
        /// Save list of selected courses for export
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySubmitSelectedCoursesFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacySubmitSelectedCoursesFormWithHttpInfo(ToolDataprivacySubmitSelectedCoursesFormRequest toolDataprivacySubmitSelectedCoursesFormRequest, int operationIndex = 0);
        /// <summary>
        /// Return branches for the context tree
        /// </summary>
        /// <remarks>
        /// Return branches for the context tree
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyTreeExtraBranchesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyTreeExtraBranches200Response</returns>
        ToolDataprivacyTreeExtraBranches200Response ToolDataprivacyTreeExtraBranches(ToolDataprivacyTreeExtraBranchesRequest toolDataprivacyTreeExtraBranchesRequest, int operationIndex = 0);

        /// <summary>
        /// Return branches for the context tree
        /// </summary>
        /// <remarks>
        /// Return branches for the context tree
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyTreeExtraBranchesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyTreeExtraBranches200Response</returns>
        ApiResponse<ToolDataprivacyTreeExtraBranches200Response> ToolDataprivacyTreeExtraBranchesWithHttpInfo(ToolDataprivacyTreeExtraBranchesRequest toolDataprivacyTreeExtraBranchesRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolDataprivacyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Approve a data request
        /// </summary>
        /// <remarks>
        /// Approve a data request
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyApproveDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyApproveDataRequestAsync(ToolDataprivacyApproveDataRequestRequest toolDataprivacyApproveDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Approve a data request
        /// </summary>
        /// <remarks>
        /// Approve a data request
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyApproveDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyApproveDataRequestWithHttpInfoAsync(ToolDataprivacyApproveDataRequestRequest toolDataprivacyApproveDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Bulk approve data requests
        /// </summary>
        /// <remarks>
        /// Bulk approve data requests
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkApproveDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyBulkApproveDataRequestsAsync(ToolDataprivacyBulkApproveDataRequestsRequest toolDataprivacyBulkApproveDataRequestsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Bulk approve data requests
        /// </summary>
        /// <remarks>
        /// Bulk approve data requests
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkApproveDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyBulkApproveDataRequestsWithHttpInfoAsync(ToolDataprivacyBulkApproveDataRequestsRequest toolDataprivacyBulkApproveDataRequestsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Bulk deny data requests
        /// </summary>
        /// <remarks>
        /// Bulk deny data requests
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkDenyDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyBulkDenyDataRequestsAsync(ToolDataprivacyBulkDenyDataRequestsRequest toolDataprivacyBulkDenyDataRequestsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Bulk deny data requests
        /// </summary>
        /// <remarks>
        /// Bulk deny data requests
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkDenyDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyBulkDenyDataRequestsWithHttpInfoAsync(ToolDataprivacyBulkDenyDataRequestsRequest toolDataprivacyBulkDenyDataRequestsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel the data request made by the user
        /// </summary>
        /// <remarks>
        /// Cancel the data request made by the user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyCancelDataRequestAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel the data request made by the user
        /// </summary>
        /// <remarks>
        /// Cancel the data request made by the user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyCancelDataRequestWithHttpInfoAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mark the selected expired contexts as confirmed for deletion
        /// </summary>
        /// <remarks>
        /// Mark the selected expired contexts as confirmed for deletion
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyConfirmContextsForDeletionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyConfirmContextsForDeletion200Response</returns>
        System.Threading.Tasks.Task<ToolDataprivacyConfirmContextsForDeletion200Response> ToolDataprivacyConfirmContextsForDeletionAsync(ToolDataprivacyConfirmContextsForDeletionRequest toolDataprivacyConfirmContextsForDeletionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark the selected expired contexts as confirmed for deletion
        /// </summary>
        /// <remarks>
        /// Mark the selected expired contexts as confirmed for deletion
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyConfirmContextsForDeletionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyConfirmContextsForDeletion200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolDataprivacyConfirmContextsForDeletion200Response>> ToolDataprivacyConfirmContextsForDeletionWithHttpInfoAsync(ToolDataprivacyConfirmContextsForDeletionRequest toolDataprivacyConfirmContextsForDeletionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Contact the site Data Protection Officer(s)
        /// </summary>
        /// <remarks>
        /// Contact the site Data Protection Officer(s)
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyContactDpoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyContactDpoAsync(ToolDataprivacyContactDpoRequest toolDataprivacyContactDpoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Contact the site Data Protection Officer(s)
        /// </summary>
        /// <remarks>
        /// Contact the site Data Protection Officer(s)
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyContactDpoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyContactDpoWithHttpInfoAsync(ToolDataprivacyContactDpoRequest toolDataprivacyContactDpoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds a data category
        /// </summary>
        /// <remarks>
        /// Adds a data category
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreateCategoryFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyCreateCategoryForm200Response</returns>
        System.Threading.Tasks.Task<ToolDataprivacyCreateCategoryForm200Response> ToolDataprivacyCreateCategoryFormAsync(ToolDataprivacyCreateCategoryFormRequest toolDataprivacyCreateCategoryFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a data category
        /// </summary>
        /// <remarks>
        /// Adds a data category
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreateCategoryFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyCreateCategoryForm200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolDataprivacyCreateCategoryForm200Response>> ToolDataprivacyCreateCategoryFormWithHttpInfoAsync(ToolDataprivacyCreateCategoryFormRequest toolDataprivacyCreateCategoryFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds a data purpose
        /// </summary>
        /// <remarks>
        /// Adds a data purpose
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreatePurposeFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyCreatePurposeForm200Response</returns>
        System.Threading.Tasks.Task<ToolDataprivacyCreatePurposeForm200Response> ToolDataprivacyCreatePurposeFormAsync(ToolDataprivacyCreatePurposeFormRequest toolDataprivacyCreatePurposeFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds a data purpose
        /// </summary>
        /// <remarks>
        /// Adds a data purpose
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreatePurposeFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyCreatePurposeForm200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolDataprivacyCreatePurposeForm200Response>> ToolDataprivacyCreatePurposeFormWithHttpInfoAsync(ToolDataprivacyCreatePurposeFormRequest toolDataprivacyCreatePurposeFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an existing data category
        /// </summary>
        /// <remarks>
        /// Deletes an existing data category
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeleteCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyDeleteCategoryAsync(ToolDataprivacyDeleteCategoryRequest toolDataprivacyDeleteCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an existing data category
        /// </summary>
        /// <remarks>
        /// Deletes an existing data category
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeleteCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyDeleteCategoryWithHttpInfoAsync(ToolDataprivacyDeleteCategoryRequest toolDataprivacyDeleteCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an existing data purpose
        /// </summary>
        /// <remarks>
        /// Deletes an existing data purpose
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeletePurposeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyDeletePurposeAsync(ToolDataprivacyDeletePurposeRequest toolDataprivacyDeletePurposeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an existing data purpose
        /// </summary>
        /// <remarks>
        /// Deletes an existing data purpose
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeletePurposeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyDeletePurposeWithHttpInfoAsync(ToolDataprivacyDeletePurposeRequest toolDataprivacyDeletePurposeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deny a data request
        /// </summary>
        /// <remarks>
        /// Deny a data request
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyDenyDataRequestAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deny a data request
        /// </summary>
        /// <remarks>
        /// Deny a data request
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyDenyDataRequestWithHttpInfoAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetches a list of activity options
        /// </summary>
        /// <remarks>
        /// Fetches a list of activity options
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetActivityOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyGetActivityOptions200Response</returns>
        System.Threading.Tasks.Task<ToolDataprivacyGetActivityOptions200Response> ToolDataprivacyGetActivityOptionsAsync(ToolDataprivacyGetActivityOptionsRequest toolDataprivacyGetActivityOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetches a list of activity options
        /// </summary>
        /// <remarks>
        /// Fetches a list of activity options
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetActivityOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyGetActivityOptions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolDataprivacyGetActivityOptions200Response>> ToolDataprivacyGetActivityOptionsWithHttpInfoAsync(ToolDataprivacyGetActivityOptionsRequest toolDataprivacyGetActivityOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetches a list of data category options
        /// </summary>
        /// <remarks>
        /// Fetches a list of data category options
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyGetCategoryOptions200Response</returns>
        System.Threading.Tasks.Task<ToolDataprivacyGetCategoryOptions200Response> ToolDataprivacyGetCategoryOptionsAsync(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetches a list of data category options
        /// </summary>
        /// <remarks>
        /// Fetches a list of data category options
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyGetCategoryOptions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolDataprivacyGetCategoryOptions200Response>> ToolDataprivacyGetCategoryOptionsWithHttpInfoAsync(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch the details of a user&#39;s data request
        /// </summary>
        /// <remarks>
        /// Fetch the details of a user&#39;s data request
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyGetDataRequest200Response</returns>
        System.Threading.Tasks.Task<ToolDataprivacyGetDataRequest200Response> ToolDataprivacyGetDataRequestAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch the details of a user&#39;s data request
        /// </summary>
        /// <remarks>
        /// Fetch the details of a user&#39;s data request
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyGetDataRequest200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolDataprivacyGetDataRequest200Response>> ToolDataprivacyGetDataRequestWithHttpInfoAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetches a list of data storage purpose options
        /// </summary>
        /// <remarks>
        /// Fetches a list of data storage purpose options
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyGetPurposeOptions200Response</returns>
        System.Threading.Tasks.Task<ToolDataprivacyGetPurposeOptions200Response> ToolDataprivacyGetPurposeOptionsAsync(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetches a list of data storage purpose options
        /// </summary>
        /// <remarks>
        /// Fetches a list of data storage purpose options
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyGetPurposeOptions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolDataprivacyGetPurposeOptions200Response>> ToolDataprivacyGetPurposeOptionsWithHttpInfoAsync(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetches a list of users
        /// </summary>
        /// <remarks>
        /// Fetches a list of users
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ToolDataprivacyGetUsersAsync(ToolDataprivacyGetUsersRequest toolDataprivacyGetUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetches a list of users
        /// </summary>
        /// <remarks>
        /// Fetches a list of users
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ToolDataprivacyGetUsersWithHttpInfoAsync(ToolDataprivacyGetUsersRequest toolDataprivacyGetUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mark a user&#39;s general enquiry as complete
        /// </summary>
        /// <remarks>
        /// Mark a user&#39;s general enquiry as complete
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyMarkCompleteAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark a user&#39;s general enquiry as complete
        /// </summary>
        /// <remarks>
        /// Mark a user&#39;s general enquiry as complete
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyMarkCompleteWithHttpInfoAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the default category and purpose for a given context level (and optionally, a plugin)
        /// </summary>
        /// <remarks>
        /// Updates the default category and purpose for a given context level (and optionally, a plugin)
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextDefaultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacySetContextDefaults200Response</returns>
        System.Threading.Tasks.Task<ToolDataprivacySetContextDefaults200Response> ToolDataprivacySetContextDefaultsAsync(ToolDataprivacySetContextDefaultsRequest toolDataprivacySetContextDefaultsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the default category and purpose for a given context level (and optionally, a plugin)
        /// </summary>
        /// <remarks>
        /// Updates the default category and purpose for a given context level (and optionally, a plugin)
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextDefaultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacySetContextDefaults200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolDataprivacySetContextDefaults200Response>> ToolDataprivacySetContextDefaultsWithHttpInfoAsync(ToolDataprivacySetContextDefaultsRequest toolDataprivacySetContextDefaultsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets purpose and category for a specific context
        /// </summary>
        /// <remarks>
        /// Sets purpose and category for a specific context
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacySetContextForm200Response</returns>
        System.Threading.Tasks.Task<ToolDataprivacySetContextForm200Response> ToolDataprivacySetContextFormAsync(ToolDataprivacySetContextFormRequest toolDataprivacySetContextFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets purpose and category for a specific context
        /// </summary>
        /// <remarks>
        /// Sets purpose and category for a specific context
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacySetContextForm200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolDataprivacySetContextForm200Response>> ToolDataprivacySetContextFormWithHttpInfoAsync(ToolDataprivacySetContextFormRequest toolDataprivacySetContextFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets purpose and category across a context level
        /// </summary>
        /// <remarks>
        /// Sets purpose and category across a context level
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextlevelFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacySetContextlevelForm200Response</returns>
        System.Threading.Tasks.Task<ToolDataprivacySetContextlevelForm200Response> ToolDataprivacySetContextlevelFormAsync(ToolDataprivacySetContextlevelFormRequest toolDataprivacySetContextlevelFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets purpose and category across a context level
        /// </summary>
        /// <remarks>
        /// Sets purpose and category across a context level
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextlevelFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacySetContextlevelForm200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolDataprivacySetContextlevelForm200Response>> ToolDataprivacySetContextlevelFormWithHttpInfoAsync(ToolDataprivacySetContextlevelFormRequest toolDataprivacySetContextlevelFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save list of selected courses for export
        /// </summary>
        /// <remarks>
        /// Save list of selected courses for export
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySubmitSelectedCoursesFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacySubmitSelectedCoursesFormAsync(ToolDataprivacySubmitSelectedCoursesFormRequest toolDataprivacySubmitSelectedCoursesFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save list of selected courses for export
        /// </summary>
        /// <remarks>
        /// Save list of selected courses for export
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySubmitSelectedCoursesFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacySubmitSelectedCoursesFormWithHttpInfoAsync(ToolDataprivacySubmitSelectedCoursesFormRequest toolDataprivacySubmitSelectedCoursesFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return branches for the context tree
        /// </summary>
        /// <remarks>
        /// Return branches for the context tree
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyTreeExtraBranchesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyTreeExtraBranches200Response</returns>
        System.Threading.Tasks.Task<ToolDataprivacyTreeExtraBranches200Response> ToolDataprivacyTreeExtraBranchesAsync(ToolDataprivacyTreeExtraBranchesRequest toolDataprivacyTreeExtraBranchesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return branches for the context tree
        /// </summary>
        /// <remarks>
        /// Return branches for the context tree
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyTreeExtraBranchesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyTreeExtraBranches200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolDataprivacyTreeExtraBranches200Response>> ToolDataprivacyTreeExtraBranchesWithHttpInfoAsync(ToolDataprivacyTreeExtraBranchesRequest toolDataprivacyTreeExtraBranchesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolDataprivacyApi : IToolDataprivacyApiSync, IToolDataprivacyApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ToolDataprivacyApi : IToolDataprivacyApi
    {
        private MoodleClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolDataprivacyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolDataprivacyApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolDataprivacyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolDataprivacyApi(string basePath)
        {
            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                new MoodleClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolDataprivacyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ToolDataprivacyApi(MoodleClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolDataprivacyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ToolDataprivacyApi(MoodleClient.Client.ISynchronousClient client, MoodleClient.Client.IAsynchronousClient asyncClient, MoodleClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MoodleClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MoodleClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MoodleClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MoodleClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Approve a data request Approve a data request
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyApproveDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        public CoreContentbankRenameContent200Response ToolDataprivacyApproveDataRequest(ToolDataprivacyApproveDataRequestRequest toolDataprivacyApproveDataRequestRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = ToolDataprivacyApproveDataRequestWithHttpInfo(toolDataprivacyApproveDataRequestRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Approve a data request Approve a data request
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyApproveDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyApproveDataRequestWithHttpInfo(ToolDataprivacyApproveDataRequestRequest toolDataprivacyApproveDataRequestRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyApproveDataRequestRequest' is set
            if (toolDataprivacyApproveDataRequestRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyApproveDataRequestRequest' when calling ToolDataprivacyApi->ToolDataprivacyApproveDataRequest");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyApproveDataRequestRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyApproveDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreContentbankRenameContent200Response>("/tool_dataprivacy_approve_data_request", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyApproveDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve a data request Approve a data request
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyApproveDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        public async System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyApproveDataRequestAsync(ToolDataprivacyApproveDataRequestRequest toolDataprivacyApproveDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = await ToolDataprivacyApproveDataRequestWithHttpInfoAsync(toolDataprivacyApproveDataRequestRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Approve a data request Approve a data request
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyApproveDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyApproveDataRequestWithHttpInfoAsync(ToolDataprivacyApproveDataRequestRequest toolDataprivacyApproveDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyApproveDataRequestRequest' is set
            if (toolDataprivacyApproveDataRequestRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyApproveDataRequestRequest' when calling ToolDataprivacyApi->ToolDataprivacyApproveDataRequest");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyApproveDataRequestRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyApproveDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreContentbankRenameContent200Response>("/tool_dataprivacy_approve_data_request", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyApproveDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk approve data requests Bulk approve data requests
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkApproveDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        public CoreContentbankRenameContent200Response ToolDataprivacyBulkApproveDataRequests(ToolDataprivacyBulkApproveDataRequestsRequest toolDataprivacyBulkApproveDataRequestsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = ToolDataprivacyBulkApproveDataRequestsWithHttpInfo(toolDataprivacyBulkApproveDataRequestsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk approve data requests Bulk approve data requests
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkApproveDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyBulkApproveDataRequestsWithHttpInfo(ToolDataprivacyBulkApproveDataRequestsRequest toolDataprivacyBulkApproveDataRequestsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyBulkApproveDataRequestsRequest' is set
            if (toolDataprivacyBulkApproveDataRequestsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyBulkApproveDataRequestsRequest' when calling ToolDataprivacyApi->ToolDataprivacyBulkApproveDataRequests");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyBulkApproveDataRequestsRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyBulkApproveDataRequests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreContentbankRenameContent200Response>("/tool_dataprivacy_bulk_approve_data_requests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyBulkApproveDataRequests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk approve data requests Bulk approve data requests
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkApproveDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        public async System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyBulkApproveDataRequestsAsync(ToolDataprivacyBulkApproveDataRequestsRequest toolDataprivacyBulkApproveDataRequestsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = await ToolDataprivacyBulkApproveDataRequestsWithHttpInfoAsync(toolDataprivacyBulkApproveDataRequestsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk approve data requests Bulk approve data requests
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkApproveDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyBulkApproveDataRequestsWithHttpInfoAsync(ToolDataprivacyBulkApproveDataRequestsRequest toolDataprivacyBulkApproveDataRequestsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyBulkApproveDataRequestsRequest' is set
            if (toolDataprivacyBulkApproveDataRequestsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyBulkApproveDataRequestsRequest' when calling ToolDataprivacyApi->ToolDataprivacyBulkApproveDataRequests");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyBulkApproveDataRequestsRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyBulkApproveDataRequests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreContentbankRenameContent200Response>("/tool_dataprivacy_bulk_approve_data_requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyBulkApproveDataRequests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk deny data requests Bulk deny data requests
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkDenyDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        public CoreContentbankRenameContent200Response ToolDataprivacyBulkDenyDataRequests(ToolDataprivacyBulkDenyDataRequestsRequest toolDataprivacyBulkDenyDataRequestsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = ToolDataprivacyBulkDenyDataRequestsWithHttpInfo(toolDataprivacyBulkDenyDataRequestsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk deny data requests Bulk deny data requests
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkDenyDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyBulkDenyDataRequestsWithHttpInfo(ToolDataprivacyBulkDenyDataRequestsRequest toolDataprivacyBulkDenyDataRequestsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyBulkDenyDataRequestsRequest' is set
            if (toolDataprivacyBulkDenyDataRequestsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyBulkDenyDataRequestsRequest' when calling ToolDataprivacyApi->ToolDataprivacyBulkDenyDataRequests");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyBulkDenyDataRequestsRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyBulkDenyDataRequests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreContentbankRenameContent200Response>("/tool_dataprivacy_bulk_deny_data_requests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyBulkDenyDataRequests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Bulk deny data requests Bulk deny data requests
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkDenyDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        public async System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyBulkDenyDataRequestsAsync(ToolDataprivacyBulkDenyDataRequestsRequest toolDataprivacyBulkDenyDataRequestsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = await ToolDataprivacyBulkDenyDataRequestsWithHttpInfoAsync(toolDataprivacyBulkDenyDataRequestsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk deny data requests Bulk deny data requests
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyBulkDenyDataRequestsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyBulkDenyDataRequestsWithHttpInfoAsync(ToolDataprivacyBulkDenyDataRequestsRequest toolDataprivacyBulkDenyDataRequestsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyBulkDenyDataRequestsRequest' is set
            if (toolDataprivacyBulkDenyDataRequestsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyBulkDenyDataRequestsRequest' when calling ToolDataprivacyApi->ToolDataprivacyBulkDenyDataRequests");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyBulkDenyDataRequestsRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyBulkDenyDataRequests";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreContentbankRenameContent200Response>("/tool_dataprivacy_bulk_deny_data_requests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyBulkDenyDataRequests", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel the data request made by the user Cancel the data request made by the user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        public CoreContentbankRenameContent200Response ToolDataprivacyCancelDataRequest(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = ToolDataprivacyCancelDataRequestWithHttpInfo(toolDataprivacyCancelDataRequestRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel the data request made by the user Cancel the data request made by the user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyCancelDataRequestWithHttpInfo(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyCancelDataRequestRequest' is set
            if (toolDataprivacyCancelDataRequestRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyCancelDataRequestRequest' when calling ToolDataprivacyApi->ToolDataprivacyCancelDataRequest");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyCancelDataRequestRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyCancelDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreContentbankRenameContent200Response>("/tool_dataprivacy_cancel_data_request", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyCancelDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel the data request made by the user Cancel the data request made by the user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        public async System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyCancelDataRequestAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = await ToolDataprivacyCancelDataRequestWithHttpInfoAsync(toolDataprivacyCancelDataRequestRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel the data request made by the user Cancel the data request made by the user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyCancelDataRequestWithHttpInfoAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyCancelDataRequestRequest' is set
            if (toolDataprivacyCancelDataRequestRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyCancelDataRequestRequest' when calling ToolDataprivacyApi->ToolDataprivacyCancelDataRequest");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyCancelDataRequestRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyCancelDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreContentbankRenameContent200Response>("/tool_dataprivacy_cancel_data_request", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyCancelDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark the selected expired contexts as confirmed for deletion Mark the selected expired contexts as confirmed for deletion
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyConfirmContextsForDeletionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyConfirmContextsForDeletion200Response</returns>
        public ToolDataprivacyConfirmContextsForDeletion200Response ToolDataprivacyConfirmContextsForDeletion(ToolDataprivacyConfirmContextsForDeletionRequest toolDataprivacyConfirmContextsForDeletionRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyConfirmContextsForDeletion200Response> localVarResponse = ToolDataprivacyConfirmContextsForDeletionWithHttpInfo(toolDataprivacyConfirmContextsForDeletionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark the selected expired contexts as confirmed for deletion Mark the selected expired contexts as confirmed for deletion
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyConfirmContextsForDeletionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyConfirmContextsForDeletion200Response</returns>
        public MoodleClient.Client.ApiResponse<ToolDataprivacyConfirmContextsForDeletion200Response> ToolDataprivacyConfirmContextsForDeletionWithHttpInfo(ToolDataprivacyConfirmContextsForDeletionRequest toolDataprivacyConfirmContextsForDeletionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyConfirmContextsForDeletionRequest' is set
            if (toolDataprivacyConfirmContextsForDeletionRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyConfirmContextsForDeletionRequest' when calling ToolDataprivacyApi->ToolDataprivacyConfirmContextsForDeletion");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyConfirmContextsForDeletionRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyConfirmContextsForDeletion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolDataprivacyConfirmContextsForDeletion200Response>("/tool_dataprivacy_confirm_contexts_for_deletion", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyConfirmContextsForDeletion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark the selected expired contexts as confirmed for deletion Mark the selected expired contexts as confirmed for deletion
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyConfirmContextsForDeletionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyConfirmContextsForDeletion200Response</returns>
        public async System.Threading.Tasks.Task<ToolDataprivacyConfirmContextsForDeletion200Response> ToolDataprivacyConfirmContextsForDeletionAsync(ToolDataprivacyConfirmContextsForDeletionRequest toolDataprivacyConfirmContextsForDeletionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyConfirmContextsForDeletion200Response> localVarResponse = await ToolDataprivacyConfirmContextsForDeletionWithHttpInfoAsync(toolDataprivacyConfirmContextsForDeletionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark the selected expired contexts as confirmed for deletion Mark the selected expired contexts as confirmed for deletion
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyConfirmContextsForDeletionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyConfirmContextsForDeletion200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ToolDataprivacyConfirmContextsForDeletion200Response>> ToolDataprivacyConfirmContextsForDeletionWithHttpInfoAsync(ToolDataprivacyConfirmContextsForDeletionRequest toolDataprivacyConfirmContextsForDeletionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyConfirmContextsForDeletionRequest' is set
            if (toolDataprivacyConfirmContextsForDeletionRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyConfirmContextsForDeletionRequest' when calling ToolDataprivacyApi->ToolDataprivacyConfirmContextsForDeletion");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyConfirmContextsForDeletionRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyConfirmContextsForDeletion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolDataprivacyConfirmContextsForDeletion200Response>("/tool_dataprivacy_confirm_contexts_for_deletion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyConfirmContextsForDeletion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Contact the site Data Protection Officer(s) Contact the site Data Protection Officer(s)
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyContactDpoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        public CoreContentbankRenameContent200Response ToolDataprivacyContactDpo(ToolDataprivacyContactDpoRequest toolDataprivacyContactDpoRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = ToolDataprivacyContactDpoWithHttpInfo(toolDataprivacyContactDpoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Contact the site Data Protection Officer(s) Contact the site Data Protection Officer(s)
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyContactDpoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyContactDpoWithHttpInfo(ToolDataprivacyContactDpoRequest toolDataprivacyContactDpoRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyContactDpoRequest' is set
            if (toolDataprivacyContactDpoRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyContactDpoRequest' when calling ToolDataprivacyApi->ToolDataprivacyContactDpo");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyContactDpoRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyContactDpo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreContentbankRenameContent200Response>("/tool_dataprivacy_contact_dpo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyContactDpo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Contact the site Data Protection Officer(s) Contact the site Data Protection Officer(s)
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyContactDpoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        public async System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyContactDpoAsync(ToolDataprivacyContactDpoRequest toolDataprivacyContactDpoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = await ToolDataprivacyContactDpoWithHttpInfoAsync(toolDataprivacyContactDpoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Contact the site Data Protection Officer(s) Contact the site Data Protection Officer(s)
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyContactDpoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyContactDpoWithHttpInfoAsync(ToolDataprivacyContactDpoRequest toolDataprivacyContactDpoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyContactDpoRequest' is set
            if (toolDataprivacyContactDpoRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyContactDpoRequest' when calling ToolDataprivacyApi->ToolDataprivacyContactDpo");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyContactDpoRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyContactDpo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreContentbankRenameContent200Response>("/tool_dataprivacy_contact_dpo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyContactDpo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a data category Adds a data category
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreateCategoryFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyCreateCategoryForm200Response</returns>
        public ToolDataprivacyCreateCategoryForm200Response ToolDataprivacyCreateCategoryForm(ToolDataprivacyCreateCategoryFormRequest toolDataprivacyCreateCategoryFormRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyCreateCategoryForm200Response> localVarResponse = ToolDataprivacyCreateCategoryFormWithHttpInfo(toolDataprivacyCreateCategoryFormRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a data category Adds a data category
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreateCategoryFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyCreateCategoryForm200Response</returns>
        public MoodleClient.Client.ApiResponse<ToolDataprivacyCreateCategoryForm200Response> ToolDataprivacyCreateCategoryFormWithHttpInfo(ToolDataprivacyCreateCategoryFormRequest toolDataprivacyCreateCategoryFormRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyCreateCategoryFormRequest' is set
            if (toolDataprivacyCreateCategoryFormRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyCreateCategoryFormRequest' when calling ToolDataprivacyApi->ToolDataprivacyCreateCategoryForm");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyCreateCategoryFormRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyCreateCategoryForm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolDataprivacyCreateCategoryForm200Response>("/tool_dataprivacy_create_category_form", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyCreateCategoryForm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a data category Adds a data category
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreateCategoryFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyCreateCategoryForm200Response</returns>
        public async System.Threading.Tasks.Task<ToolDataprivacyCreateCategoryForm200Response> ToolDataprivacyCreateCategoryFormAsync(ToolDataprivacyCreateCategoryFormRequest toolDataprivacyCreateCategoryFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyCreateCategoryForm200Response> localVarResponse = await ToolDataprivacyCreateCategoryFormWithHttpInfoAsync(toolDataprivacyCreateCategoryFormRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a data category Adds a data category
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreateCategoryFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyCreateCategoryForm200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ToolDataprivacyCreateCategoryForm200Response>> ToolDataprivacyCreateCategoryFormWithHttpInfoAsync(ToolDataprivacyCreateCategoryFormRequest toolDataprivacyCreateCategoryFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyCreateCategoryFormRequest' is set
            if (toolDataprivacyCreateCategoryFormRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyCreateCategoryFormRequest' when calling ToolDataprivacyApi->ToolDataprivacyCreateCategoryForm");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyCreateCategoryFormRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyCreateCategoryForm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolDataprivacyCreateCategoryForm200Response>("/tool_dataprivacy_create_category_form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyCreateCategoryForm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a data purpose Adds a data purpose
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreatePurposeFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyCreatePurposeForm200Response</returns>
        public ToolDataprivacyCreatePurposeForm200Response ToolDataprivacyCreatePurposeForm(ToolDataprivacyCreatePurposeFormRequest toolDataprivacyCreatePurposeFormRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyCreatePurposeForm200Response> localVarResponse = ToolDataprivacyCreatePurposeFormWithHttpInfo(toolDataprivacyCreatePurposeFormRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a data purpose Adds a data purpose
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreatePurposeFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyCreatePurposeForm200Response</returns>
        public MoodleClient.Client.ApiResponse<ToolDataprivacyCreatePurposeForm200Response> ToolDataprivacyCreatePurposeFormWithHttpInfo(ToolDataprivacyCreatePurposeFormRequest toolDataprivacyCreatePurposeFormRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyCreatePurposeFormRequest' is set
            if (toolDataprivacyCreatePurposeFormRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyCreatePurposeFormRequest' when calling ToolDataprivacyApi->ToolDataprivacyCreatePurposeForm");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyCreatePurposeFormRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyCreatePurposeForm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolDataprivacyCreatePurposeForm200Response>("/tool_dataprivacy_create_purpose_form", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyCreatePurposeForm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds a data purpose Adds a data purpose
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreatePurposeFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyCreatePurposeForm200Response</returns>
        public async System.Threading.Tasks.Task<ToolDataprivacyCreatePurposeForm200Response> ToolDataprivacyCreatePurposeFormAsync(ToolDataprivacyCreatePurposeFormRequest toolDataprivacyCreatePurposeFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyCreatePurposeForm200Response> localVarResponse = await ToolDataprivacyCreatePurposeFormWithHttpInfoAsync(toolDataprivacyCreatePurposeFormRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a data purpose Adds a data purpose
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCreatePurposeFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyCreatePurposeForm200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ToolDataprivacyCreatePurposeForm200Response>> ToolDataprivacyCreatePurposeFormWithHttpInfoAsync(ToolDataprivacyCreatePurposeFormRequest toolDataprivacyCreatePurposeFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyCreatePurposeFormRequest' is set
            if (toolDataprivacyCreatePurposeFormRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyCreatePurposeFormRequest' when calling ToolDataprivacyApi->ToolDataprivacyCreatePurposeForm");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyCreatePurposeFormRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyCreatePurposeForm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolDataprivacyCreatePurposeForm200Response>("/tool_dataprivacy_create_purpose_form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyCreatePurposeForm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing data category Deletes an existing data category
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeleteCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        public CoreContentbankRenameContent200Response ToolDataprivacyDeleteCategory(ToolDataprivacyDeleteCategoryRequest toolDataprivacyDeleteCategoryRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = ToolDataprivacyDeleteCategoryWithHttpInfo(toolDataprivacyDeleteCategoryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an existing data category Deletes an existing data category
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeleteCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyDeleteCategoryWithHttpInfo(ToolDataprivacyDeleteCategoryRequest toolDataprivacyDeleteCategoryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyDeleteCategoryRequest' is set
            if (toolDataprivacyDeleteCategoryRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyDeleteCategoryRequest' when calling ToolDataprivacyApi->ToolDataprivacyDeleteCategory");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyDeleteCategoryRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyDeleteCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreContentbankRenameContent200Response>("/tool_dataprivacy_delete_category", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyDeleteCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing data category Deletes an existing data category
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeleteCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        public async System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyDeleteCategoryAsync(ToolDataprivacyDeleteCategoryRequest toolDataprivacyDeleteCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = await ToolDataprivacyDeleteCategoryWithHttpInfoAsync(toolDataprivacyDeleteCategoryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an existing data category Deletes an existing data category
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeleteCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyDeleteCategoryWithHttpInfoAsync(ToolDataprivacyDeleteCategoryRequest toolDataprivacyDeleteCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyDeleteCategoryRequest' is set
            if (toolDataprivacyDeleteCategoryRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyDeleteCategoryRequest' when calling ToolDataprivacyApi->ToolDataprivacyDeleteCategory");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyDeleteCategoryRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyDeleteCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreContentbankRenameContent200Response>("/tool_dataprivacy_delete_category", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyDeleteCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing data purpose Deletes an existing data purpose
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeletePurposeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        public CoreContentbankRenameContent200Response ToolDataprivacyDeletePurpose(ToolDataprivacyDeletePurposeRequest toolDataprivacyDeletePurposeRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = ToolDataprivacyDeletePurposeWithHttpInfo(toolDataprivacyDeletePurposeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an existing data purpose Deletes an existing data purpose
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeletePurposeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyDeletePurposeWithHttpInfo(ToolDataprivacyDeletePurposeRequest toolDataprivacyDeletePurposeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyDeletePurposeRequest' is set
            if (toolDataprivacyDeletePurposeRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyDeletePurposeRequest' when calling ToolDataprivacyApi->ToolDataprivacyDeletePurpose");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyDeletePurposeRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyDeletePurpose";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreContentbankRenameContent200Response>("/tool_dataprivacy_delete_purpose", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyDeletePurpose", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing data purpose Deletes an existing data purpose
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeletePurposeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        public async System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyDeletePurposeAsync(ToolDataprivacyDeletePurposeRequest toolDataprivacyDeletePurposeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = await ToolDataprivacyDeletePurposeWithHttpInfoAsync(toolDataprivacyDeletePurposeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an existing data purpose Deletes an existing data purpose
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyDeletePurposeRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyDeletePurposeWithHttpInfoAsync(ToolDataprivacyDeletePurposeRequest toolDataprivacyDeletePurposeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyDeletePurposeRequest' is set
            if (toolDataprivacyDeletePurposeRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyDeletePurposeRequest' when calling ToolDataprivacyApi->ToolDataprivacyDeletePurpose");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyDeletePurposeRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyDeletePurpose";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreContentbankRenameContent200Response>("/tool_dataprivacy_delete_purpose", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyDeletePurpose", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deny a data request Deny a data request
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        public CoreContentbankRenameContent200Response ToolDataprivacyDenyDataRequest(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = ToolDataprivacyDenyDataRequestWithHttpInfo(toolDataprivacyCancelDataRequestRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deny a data request Deny a data request
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyDenyDataRequestWithHttpInfo(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyCancelDataRequestRequest' is set
            if (toolDataprivacyCancelDataRequestRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyCancelDataRequestRequest' when calling ToolDataprivacyApi->ToolDataprivacyDenyDataRequest");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyCancelDataRequestRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyDenyDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreContentbankRenameContent200Response>("/tool_dataprivacy_deny_data_request", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyDenyDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deny a data request Deny a data request
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        public async System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyDenyDataRequestAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = await ToolDataprivacyDenyDataRequestWithHttpInfoAsync(toolDataprivacyCancelDataRequestRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deny a data request Deny a data request
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyDenyDataRequestWithHttpInfoAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyCancelDataRequestRequest' is set
            if (toolDataprivacyCancelDataRequestRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyCancelDataRequestRequest' when calling ToolDataprivacyApi->ToolDataprivacyDenyDataRequest");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyCancelDataRequestRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyDenyDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreContentbankRenameContent200Response>("/tool_dataprivacy_deny_data_request", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyDenyDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches a list of activity options Fetches a list of activity options
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetActivityOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyGetActivityOptions200Response</returns>
        public ToolDataprivacyGetActivityOptions200Response ToolDataprivacyGetActivityOptions(ToolDataprivacyGetActivityOptionsRequest toolDataprivacyGetActivityOptionsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyGetActivityOptions200Response> localVarResponse = ToolDataprivacyGetActivityOptionsWithHttpInfo(toolDataprivacyGetActivityOptionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches a list of activity options Fetches a list of activity options
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetActivityOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyGetActivityOptions200Response</returns>
        public MoodleClient.Client.ApiResponse<ToolDataprivacyGetActivityOptions200Response> ToolDataprivacyGetActivityOptionsWithHttpInfo(ToolDataprivacyGetActivityOptionsRequest toolDataprivacyGetActivityOptionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyGetActivityOptionsRequest' is set
            if (toolDataprivacyGetActivityOptionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyGetActivityOptionsRequest' when calling ToolDataprivacyApi->ToolDataprivacyGetActivityOptions");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyGetActivityOptionsRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyGetActivityOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolDataprivacyGetActivityOptions200Response>("/tool_dataprivacy_get_activity_options", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyGetActivityOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches a list of activity options Fetches a list of activity options
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetActivityOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyGetActivityOptions200Response</returns>
        public async System.Threading.Tasks.Task<ToolDataprivacyGetActivityOptions200Response> ToolDataprivacyGetActivityOptionsAsync(ToolDataprivacyGetActivityOptionsRequest toolDataprivacyGetActivityOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyGetActivityOptions200Response> localVarResponse = await ToolDataprivacyGetActivityOptionsWithHttpInfoAsync(toolDataprivacyGetActivityOptionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches a list of activity options Fetches a list of activity options
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetActivityOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyGetActivityOptions200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ToolDataprivacyGetActivityOptions200Response>> ToolDataprivacyGetActivityOptionsWithHttpInfoAsync(ToolDataprivacyGetActivityOptionsRequest toolDataprivacyGetActivityOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyGetActivityOptionsRequest' is set
            if (toolDataprivacyGetActivityOptionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyGetActivityOptionsRequest' when calling ToolDataprivacyApi->ToolDataprivacyGetActivityOptions");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyGetActivityOptionsRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyGetActivityOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolDataprivacyGetActivityOptions200Response>("/tool_dataprivacy_get_activity_options", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyGetActivityOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches a list of data category options Fetches a list of data category options
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyGetCategoryOptions200Response</returns>
        public ToolDataprivacyGetCategoryOptions200Response ToolDataprivacyGetCategoryOptions(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyGetCategoryOptions200Response> localVarResponse = ToolDataprivacyGetCategoryOptionsWithHttpInfo(toolDataprivacyGetCategoryOptionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches a list of data category options Fetches a list of data category options
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyGetCategoryOptions200Response</returns>
        public MoodleClient.Client.ApiResponse<ToolDataprivacyGetCategoryOptions200Response> ToolDataprivacyGetCategoryOptionsWithHttpInfo(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyGetCategoryOptionsRequest' is set
            if (toolDataprivacyGetCategoryOptionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyGetCategoryOptionsRequest' when calling ToolDataprivacyApi->ToolDataprivacyGetCategoryOptions");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyGetCategoryOptionsRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyGetCategoryOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolDataprivacyGetCategoryOptions200Response>("/tool_dataprivacy_get_category_options", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyGetCategoryOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches a list of data category options Fetches a list of data category options
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyGetCategoryOptions200Response</returns>
        public async System.Threading.Tasks.Task<ToolDataprivacyGetCategoryOptions200Response> ToolDataprivacyGetCategoryOptionsAsync(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyGetCategoryOptions200Response> localVarResponse = await ToolDataprivacyGetCategoryOptionsWithHttpInfoAsync(toolDataprivacyGetCategoryOptionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches a list of data category options Fetches a list of data category options
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyGetCategoryOptions200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ToolDataprivacyGetCategoryOptions200Response>> ToolDataprivacyGetCategoryOptionsWithHttpInfoAsync(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyGetCategoryOptionsRequest' is set
            if (toolDataprivacyGetCategoryOptionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyGetCategoryOptionsRequest' when calling ToolDataprivacyApi->ToolDataprivacyGetCategoryOptions");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyGetCategoryOptionsRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyGetCategoryOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolDataprivacyGetCategoryOptions200Response>("/tool_dataprivacy_get_category_options", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyGetCategoryOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the details of a user&#39;s data request Fetch the details of a user&#39;s data request
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyGetDataRequest200Response</returns>
        public ToolDataprivacyGetDataRequest200Response ToolDataprivacyGetDataRequest(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyGetDataRequest200Response> localVarResponse = ToolDataprivacyGetDataRequestWithHttpInfo(toolDataprivacyCancelDataRequestRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the details of a user&#39;s data request Fetch the details of a user&#39;s data request
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyGetDataRequest200Response</returns>
        public MoodleClient.Client.ApiResponse<ToolDataprivacyGetDataRequest200Response> ToolDataprivacyGetDataRequestWithHttpInfo(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyCancelDataRequestRequest' is set
            if (toolDataprivacyCancelDataRequestRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyCancelDataRequestRequest' when calling ToolDataprivacyApi->ToolDataprivacyGetDataRequest");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyCancelDataRequestRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyGetDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolDataprivacyGetDataRequest200Response>("/tool_dataprivacy_get_data_request", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyGetDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the details of a user&#39;s data request Fetch the details of a user&#39;s data request
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyGetDataRequest200Response</returns>
        public async System.Threading.Tasks.Task<ToolDataprivacyGetDataRequest200Response> ToolDataprivacyGetDataRequestAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyGetDataRequest200Response> localVarResponse = await ToolDataprivacyGetDataRequestWithHttpInfoAsync(toolDataprivacyCancelDataRequestRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the details of a user&#39;s data request Fetch the details of a user&#39;s data request
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyGetDataRequest200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ToolDataprivacyGetDataRequest200Response>> ToolDataprivacyGetDataRequestWithHttpInfoAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyCancelDataRequestRequest' is set
            if (toolDataprivacyCancelDataRequestRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyCancelDataRequestRequest' when calling ToolDataprivacyApi->ToolDataprivacyGetDataRequest");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyCancelDataRequestRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyGetDataRequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolDataprivacyGetDataRequest200Response>("/tool_dataprivacy_get_data_request", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyGetDataRequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches a list of data storage purpose options Fetches a list of data storage purpose options
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyGetPurposeOptions200Response</returns>
        public ToolDataprivacyGetPurposeOptions200Response ToolDataprivacyGetPurposeOptions(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyGetPurposeOptions200Response> localVarResponse = ToolDataprivacyGetPurposeOptionsWithHttpInfo(toolDataprivacyGetCategoryOptionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches a list of data storage purpose options Fetches a list of data storage purpose options
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyGetPurposeOptions200Response</returns>
        public MoodleClient.Client.ApiResponse<ToolDataprivacyGetPurposeOptions200Response> ToolDataprivacyGetPurposeOptionsWithHttpInfo(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyGetCategoryOptionsRequest' is set
            if (toolDataprivacyGetCategoryOptionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyGetCategoryOptionsRequest' when calling ToolDataprivacyApi->ToolDataprivacyGetPurposeOptions");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyGetCategoryOptionsRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyGetPurposeOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolDataprivacyGetPurposeOptions200Response>("/tool_dataprivacy_get_purpose_options", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyGetPurposeOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches a list of data storage purpose options Fetches a list of data storage purpose options
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyGetPurposeOptions200Response</returns>
        public async System.Threading.Tasks.Task<ToolDataprivacyGetPurposeOptions200Response> ToolDataprivacyGetPurposeOptionsAsync(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyGetPurposeOptions200Response> localVarResponse = await ToolDataprivacyGetPurposeOptionsWithHttpInfoAsync(toolDataprivacyGetCategoryOptionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches a list of data storage purpose options Fetches a list of data storage purpose options
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetCategoryOptionsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyGetPurposeOptions200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ToolDataprivacyGetPurposeOptions200Response>> ToolDataprivacyGetPurposeOptionsWithHttpInfoAsync(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyGetCategoryOptionsRequest' is set
            if (toolDataprivacyGetCategoryOptionsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyGetCategoryOptionsRequest' when calling ToolDataprivacyApi->ToolDataprivacyGetPurposeOptions");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyGetCategoryOptionsRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyGetPurposeOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolDataprivacyGetPurposeOptions200Response>("/tool_dataprivacy_get_purpose_options", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyGetPurposeOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches a list of users Fetches a list of users
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ToolDataprivacyGetUsers(ToolDataprivacyGetUsersRequest toolDataprivacyGetUsersRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ToolDataprivacyGetUsersWithHttpInfo(toolDataprivacyGetUsersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches a list of users Fetches a list of users
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ToolDataprivacyGetUsersWithHttpInfo(ToolDataprivacyGetUsersRequest toolDataprivacyGetUsersRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyGetUsersRequest' is set
            if (toolDataprivacyGetUsersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyGetUsersRequest' when calling ToolDataprivacyApi->ToolDataprivacyGetUsers");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyGetUsersRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyGetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tool_dataprivacy_get_users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyGetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetches a list of users Fetches a list of users
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ToolDataprivacyGetUsersAsync(ToolDataprivacyGetUsersRequest toolDataprivacyGetUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ToolDataprivacyGetUsersWithHttpInfoAsync(toolDataprivacyGetUsersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches a list of users Fetches a list of users
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyGetUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ToolDataprivacyGetUsersWithHttpInfoAsync(ToolDataprivacyGetUsersRequest toolDataprivacyGetUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyGetUsersRequest' is set
            if (toolDataprivacyGetUsersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyGetUsersRequest' when calling ToolDataprivacyApi->ToolDataprivacyGetUsers");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyGetUsersRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyGetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tool_dataprivacy_get_users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyGetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark a user&#39;s general enquiry as complete Mark a user&#39;s general enquiry as complete
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        public CoreContentbankRenameContent200Response ToolDataprivacyMarkComplete(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = ToolDataprivacyMarkCompleteWithHttpInfo(toolDataprivacyCancelDataRequestRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark a user&#39;s general enquiry as complete Mark a user&#39;s general enquiry as complete
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacyMarkCompleteWithHttpInfo(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyCancelDataRequestRequest' is set
            if (toolDataprivacyCancelDataRequestRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyCancelDataRequestRequest' when calling ToolDataprivacyApi->ToolDataprivacyMarkComplete");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyCancelDataRequestRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyMarkComplete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreContentbankRenameContent200Response>("/tool_dataprivacy_mark_complete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyMarkComplete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark a user&#39;s general enquiry as complete Mark a user&#39;s general enquiry as complete
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        public async System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacyMarkCompleteAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = await ToolDataprivacyMarkCompleteWithHttpInfoAsync(toolDataprivacyCancelDataRequestRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark a user&#39;s general enquiry as complete Mark a user&#39;s general enquiry as complete
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyCancelDataRequestRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacyMarkCompleteWithHttpInfoAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyCancelDataRequestRequest' is set
            if (toolDataprivacyCancelDataRequestRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyCancelDataRequestRequest' when calling ToolDataprivacyApi->ToolDataprivacyMarkComplete");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyCancelDataRequestRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyMarkComplete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreContentbankRenameContent200Response>("/tool_dataprivacy_mark_complete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyMarkComplete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the default category and purpose for a given context level (and optionally, a plugin) Updates the default category and purpose for a given context level (and optionally, a plugin)
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextDefaultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacySetContextDefaults200Response</returns>
        public ToolDataprivacySetContextDefaults200Response ToolDataprivacySetContextDefaults(ToolDataprivacySetContextDefaultsRequest toolDataprivacySetContextDefaultsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacySetContextDefaults200Response> localVarResponse = ToolDataprivacySetContextDefaultsWithHttpInfo(toolDataprivacySetContextDefaultsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the default category and purpose for a given context level (and optionally, a plugin) Updates the default category and purpose for a given context level (and optionally, a plugin)
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextDefaultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacySetContextDefaults200Response</returns>
        public MoodleClient.Client.ApiResponse<ToolDataprivacySetContextDefaults200Response> ToolDataprivacySetContextDefaultsWithHttpInfo(ToolDataprivacySetContextDefaultsRequest toolDataprivacySetContextDefaultsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacySetContextDefaultsRequest' is set
            if (toolDataprivacySetContextDefaultsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacySetContextDefaultsRequest' when calling ToolDataprivacyApi->ToolDataprivacySetContextDefaults");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacySetContextDefaultsRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacySetContextDefaults";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolDataprivacySetContextDefaults200Response>("/tool_dataprivacy_set_context_defaults", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacySetContextDefaults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the default category and purpose for a given context level (and optionally, a plugin) Updates the default category and purpose for a given context level (and optionally, a plugin)
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextDefaultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacySetContextDefaults200Response</returns>
        public async System.Threading.Tasks.Task<ToolDataprivacySetContextDefaults200Response> ToolDataprivacySetContextDefaultsAsync(ToolDataprivacySetContextDefaultsRequest toolDataprivacySetContextDefaultsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacySetContextDefaults200Response> localVarResponse = await ToolDataprivacySetContextDefaultsWithHttpInfoAsync(toolDataprivacySetContextDefaultsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the default category and purpose for a given context level (and optionally, a plugin) Updates the default category and purpose for a given context level (and optionally, a plugin)
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextDefaultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacySetContextDefaults200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ToolDataprivacySetContextDefaults200Response>> ToolDataprivacySetContextDefaultsWithHttpInfoAsync(ToolDataprivacySetContextDefaultsRequest toolDataprivacySetContextDefaultsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacySetContextDefaultsRequest' is set
            if (toolDataprivacySetContextDefaultsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacySetContextDefaultsRequest' when calling ToolDataprivacyApi->ToolDataprivacySetContextDefaults");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacySetContextDefaultsRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacySetContextDefaults";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolDataprivacySetContextDefaults200Response>("/tool_dataprivacy_set_context_defaults", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacySetContextDefaults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets purpose and category for a specific context Sets purpose and category for a specific context
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacySetContextForm200Response</returns>
        public ToolDataprivacySetContextForm200Response ToolDataprivacySetContextForm(ToolDataprivacySetContextFormRequest toolDataprivacySetContextFormRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacySetContextForm200Response> localVarResponse = ToolDataprivacySetContextFormWithHttpInfo(toolDataprivacySetContextFormRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets purpose and category for a specific context Sets purpose and category for a specific context
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacySetContextForm200Response</returns>
        public MoodleClient.Client.ApiResponse<ToolDataprivacySetContextForm200Response> ToolDataprivacySetContextFormWithHttpInfo(ToolDataprivacySetContextFormRequest toolDataprivacySetContextFormRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacySetContextFormRequest' is set
            if (toolDataprivacySetContextFormRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacySetContextFormRequest' when calling ToolDataprivacyApi->ToolDataprivacySetContextForm");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacySetContextFormRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacySetContextForm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolDataprivacySetContextForm200Response>("/tool_dataprivacy_set_context_form", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacySetContextForm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets purpose and category for a specific context Sets purpose and category for a specific context
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacySetContextForm200Response</returns>
        public async System.Threading.Tasks.Task<ToolDataprivacySetContextForm200Response> ToolDataprivacySetContextFormAsync(ToolDataprivacySetContextFormRequest toolDataprivacySetContextFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacySetContextForm200Response> localVarResponse = await ToolDataprivacySetContextFormWithHttpInfoAsync(toolDataprivacySetContextFormRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets purpose and category for a specific context Sets purpose and category for a specific context
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacySetContextForm200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ToolDataprivacySetContextForm200Response>> ToolDataprivacySetContextFormWithHttpInfoAsync(ToolDataprivacySetContextFormRequest toolDataprivacySetContextFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacySetContextFormRequest' is set
            if (toolDataprivacySetContextFormRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacySetContextFormRequest' when calling ToolDataprivacyApi->ToolDataprivacySetContextForm");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacySetContextFormRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacySetContextForm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolDataprivacySetContextForm200Response>("/tool_dataprivacy_set_context_form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacySetContextForm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets purpose and category across a context level Sets purpose and category across a context level
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextlevelFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacySetContextlevelForm200Response</returns>
        public ToolDataprivacySetContextlevelForm200Response ToolDataprivacySetContextlevelForm(ToolDataprivacySetContextlevelFormRequest toolDataprivacySetContextlevelFormRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacySetContextlevelForm200Response> localVarResponse = ToolDataprivacySetContextlevelFormWithHttpInfo(toolDataprivacySetContextlevelFormRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets purpose and category across a context level Sets purpose and category across a context level
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextlevelFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacySetContextlevelForm200Response</returns>
        public MoodleClient.Client.ApiResponse<ToolDataprivacySetContextlevelForm200Response> ToolDataprivacySetContextlevelFormWithHttpInfo(ToolDataprivacySetContextlevelFormRequest toolDataprivacySetContextlevelFormRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacySetContextlevelFormRequest' is set
            if (toolDataprivacySetContextlevelFormRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacySetContextlevelFormRequest' when calling ToolDataprivacyApi->ToolDataprivacySetContextlevelForm");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacySetContextlevelFormRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacySetContextlevelForm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolDataprivacySetContextlevelForm200Response>("/tool_dataprivacy_set_contextlevel_form", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacySetContextlevelForm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets purpose and category across a context level Sets purpose and category across a context level
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextlevelFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacySetContextlevelForm200Response</returns>
        public async System.Threading.Tasks.Task<ToolDataprivacySetContextlevelForm200Response> ToolDataprivacySetContextlevelFormAsync(ToolDataprivacySetContextlevelFormRequest toolDataprivacySetContextlevelFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacySetContextlevelForm200Response> localVarResponse = await ToolDataprivacySetContextlevelFormWithHttpInfoAsync(toolDataprivacySetContextlevelFormRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets purpose and category across a context level Sets purpose and category across a context level
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySetContextlevelFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacySetContextlevelForm200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ToolDataprivacySetContextlevelForm200Response>> ToolDataprivacySetContextlevelFormWithHttpInfoAsync(ToolDataprivacySetContextlevelFormRequest toolDataprivacySetContextlevelFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacySetContextlevelFormRequest' is set
            if (toolDataprivacySetContextlevelFormRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacySetContextlevelFormRequest' when calling ToolDataprivacyApi->ToolDataprivacySetContextlevelForm");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacySetContextlevelFormRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacySetContextlevelForm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolDataprivacySetContextlevelForm200Response>("/tool_dataprivacy_set_contextlevel_form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacySetContextlevelForm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save list of selected courses for export Save list of selected courses for export
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySubmitSelectedCoursesFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        public CoreContentbankRenameContent200Response ToolDataprivacySubmitSelectedCoursesForm(ToolDataprivacySubmitSelectedCoursesFormRequest toolDataprivacySubmitSelectedCoursesFormRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = ToolDataprivacySubmitSelectedCoursesFormWithHttpInfo(toolDataprivacySubmitSelectedCoursesFormRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save list of selected courses for export Save list of selected courses for export
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySubmitSelectedCoursesFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> ToolDataprivacySubmitSelectedCoursesFormWithHttpInfo(ToolDataprivacySubmitSelectedCoursesFormRequest toolDataprivacySubmitSelectedCoursesFormRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacySubmitSelectedCoursesFormRequest' is set
            if (toolDataprivacySubmitSelectedCoursesFormRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacySubmitSelectedCoursesFormRequest' when calling ToolDataprivacyApi->ToolDataprivacySubmitSelectedCoursesForm");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacySubmitSelectedCoursesFormRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacySubmitSelectedCoursesForm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreContentbankRenameContent200Response>("/tool_dataprivacy_submit_selected_courses_form", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacySubmitSelectedCoursesForm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save list of selected courses for export Save list of selected courses for export
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySubmitSelectedCoursesFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        public async System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ToolDataprivacySubmitSelectedCoursesFormAsync(ToolDataprivacySubmitSelectedCoursesFormRequest toolDataprivacySubmitSelectedCoursesFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = await ToolDataprivacySubmitSelectedCoursesFormWithHttpInfoAsync(toolDataprivacySubmitSelectedCoursesFormRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save list of selected courses for export Save list of selected courses for export
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacySubmitSelectedCoursesFormRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response>> ToolDataprivacySubmitSelectedCoursesFormWithHttpInfoAsync(ToolDataprivacySubmitSelectedCoursesFormRequest toolDataprivacySubmitSelectedCoursesFormRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacySubmitSelectedCoursesFormRequest' is set
            if (toolDataprivacySubmitSelectedCoursesFormRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacySubmitSelectedCoursesFormRequest' when calling ToolDataprivacyApi->ToolDataprivacySubmitSelectedCoursesForm");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacySubmitSelectedCoursesFormRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacySubmitSelectedCoursesForm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreContentbankRenameContent200Response>("/tool_dataprivacy_submit_selected_courses_form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacySubmitSelectedCoursesForm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return branches for the context tree Return branches for the context tree
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyTreeExtraBranchesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolDataprivacyTreeExtraBranches200Response</returns>
        public ToolDataprivacyTreeExtraBranches200Response ToolDataprivacyTreeExtraBranches(ToolDataprivacyTreeExtraBranchesRequest toolDataprivacyTreeExtraBranchesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyTreeExtraBranches200Response> localVarResponse = ToolDataprivacyTreeExtraBranchesWithHttpInfo(toolDataprivacyTreeExtraBranchesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return branches for the context tree Return branches for the context tree
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyTreeExtraBranchesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolDataprivacyTreeExtraBranches200Response</returns>
        public MoodleClient.Client.ApiResponse<ToolDataprivacyTreeExtraBranches200Response> ToolDataprivacyTreeExtraBranchesWithHttpInfo(ToolDataprivacyTreeExtraBranchesRequest toolDataprivacyTreeExtraBranchesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolDataprivacyTreeExtraBranchesRequest' is set
            if (toolDataprivacyTreeExtraBranchesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyTreeExtraBranchesRequest' when calling ToolDataprivacyApi->ToolDataprivacyTreeExtraBranches");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyTreeExtraBranchesRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyTreeExtraBranches";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolDataprivacyTreeExtraBranches200Response>("/tool_dataprivacy_tree_extra_branches", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyTreeExtraBranches", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return branches for the context tree Return branches for the context tree
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyTreeExtraBranchesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolDataprivacyTreeExtraBranches200Response</returns>
        public async System.Threading.Tasks.Task<ToolDataprivacyTreeExtraBranches200Response> ToolDataprivacyTreeExtraBranchesAsync(ToolDataprivacyTreeExtraBranchesRequest toolDataprivacyTreeExtraBranchesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ToolDataprivacyTreeExtraBranches200Response> localVarResponse = await ToolDataprivacyTreeExtraBranchesWithHttpInfoAsync(toolDataprivacyTreeExtraBranchesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return branches for the context tree Return branches for the context tree
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolDataprivacyTreeExtraBranchesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolDataprivacyTreeExtraBranches200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ToolDataprivacyTreeExtraBranches200Response>> ToolDataprivacyTreeExtraBranchesWithHttpInfoAsync(ToolDataprivacyTreeExtraBranchesRequest toolDataprivacyTreeExtraBranchesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolDataprivacyTreeExtraBranchesRequest' is set
            if (toolDataprivacyTreeExtraBranchesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolDataprivacyTreeExtraBranchesRequest' when calling ToolDataprivacyApi->ToolDataprivacyTreeExtraBranches");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolDataprivacyTreeExtraBranchesRequest;

            localVarRequestOptions.Operation = "ToolDataprivacyApi.ToolDataprivacyTreeExtraBranches";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolDataprivacyTreeExtraBranches200Response>("/tool_dataprivacy_tree_extra_branches", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolDataprivacyTreeExtraBranches", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
