/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MoodleClient.Client;
using MoodleClient.Model;

namespace MoodleClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModWikiApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Save the contents of a page.
        /// </summary>
        /// <remarks>
        /// Save the contents of a page.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiEditPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiEditPage200Response</returns>
        ModWikiEditPage200Response ModWikiEditPage(ModWikiEditPageRequest modWikiEditPageRequest, int operationIndex = 0);

        /// <summary>
        /// Save the contents of a page.
        /// </summary>
        /// <remarks>
        /// Save the contents of a page.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiEditPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiEditPage200Response</returns>
        ApiResponse<ModWikiEditPage200Response> ModWikiEditPageWithHttpInfo(ModWikiEditPageRequest modWikiEditPageRequest, int operationIndex = 0);
        /// <summary>
        /// Returns the contents of a page.
        /// </summary>
        /// <remarks>
        /// Returns the contents of a page.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageContentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiGetPageContents200Response</returns>
        ModWikiGetPageContents200Response ModWikiGetPageContents(ModWikiGetPageContentsRequest modWikiGetPageContentsRequest, int operationIndex = 0);

        /// <summary>
        /// Returns the contents of a page.
        /// </summary>
        /// <remarks>
        /// Returns the contents of a page.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageContentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiGetPageContents200Response</returns>
        ApiResponse<ModWikiGetPageContents200Response> ModWikiGetPageContentsWithHttpInfo(ModWikiGetPageContentsRequest modWikiGetPageContentsRequest, int operationIndex = 0);
        /// <summary>
        /// Locks and retrieves info of page-section to be edited.
        /// </summary>
        /// <remarks>
        /// Locks and retrieves info of page-section to be edited.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageForEditingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiGetPageForEditing200Response</returns>
        ModWikiGetPageForEditing200Response ModWikiGetPageForEditing(ModWikiGetPageForEditingRequest modWikiGetPageForEditingRequest, int operationIndex = 0);

        /// <summary>
        /// Locks and retrieves info of page-section to be edited.
        /// </summary>
        /// <remarks>
        /// Locks and retrieves info of page-section to be edited.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageForEditingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiGetPageForEditing200Response</returns>
        ApiResponse<ModWikiGetPageForEditing200Response> ModWikiGetPageForEditingWithHttpInfo(ModWikiGetPageForEditingRequest modWikiGetPageForEditingRequest, int operationIndex = 0);
        /// <summary>
        /// Returns the list of files for a specific subwiki.
        /// </summary>
        /// <remarks>
        /// Returns the list of files for a specific subwiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreH5pGetTrustedH5pFile200Response</returns>
        CoreH5pGetTrustedH5pFile200Response ModWikiGetSubwikiFiles(ModWikiGetSubwikiFilesRequest modWikiGetSubwikiFilesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns the list of files for a specific subwiki.
        /// </summary>
        /// <remarks>
        /// Returns the list of files for a specific subwiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreH5pGetTrustedH5pFile200Response</returns>
        ApiResponse<CoreH5pGetTrustedH5pFile200Response> ModWikiGetSubwikiFilesWithHttpInfo(ModWikiGetSubwikiFilesRequest modWikiGetSubwikiFilesRequest, int operationIndex = 0);
        /// <summary>
        /// Returns the list of pages for a specific subwiki.
        /// </summary>
        /// <remarks>
        /// Returns the list of pages for a specific subwiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiGetSubwikiPages200Response</returns>
        ModWikiGetSubwikiPages200Response ModWikiGetSubwikiPages(ModWikiGetSubwikiPagesRequest modWikiGetSubwikiPagesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns the list of pages for a specific subwiki.
        /// </summary>
        /// <remarks>
        /// Returns the list of pages for a specific subwiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiGetSubwikiPages200Response</returns>
        ApiResponse<ModWikiGetSubwikiPages200Response> ModWikiGetSubwikiPagesWithHttpInfo(ModWikiGetSubwikiPagesRequest modWikiGetSubwikiPagesRequest, int operationIndex = 0);
        /// <summary>
        /// Returns the list of subwikis the user can see in a specific wiki.
        /// </summary>
        /// <remarks>
        /// Returns the list of subwikis the user can see in a specific wiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiGetSubwikis200Response</returns>
        ModWikiGetSubwikis200Response ModWikiGetSubwikis(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0);

        /// <summary>
        /// Returns the list of subwikis the user can see in a specific wiki.
        /// </summary>
        /// <remarks>
        /// Returns the list of subwikis the user can see in a specific wiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiGetSubwikis200Response</returns>
        ApiResponse<ModWikiGetSubwikis200Response> ModWikiGetSubwikisWithHttpInfo(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetWikisByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiGetWikisByCourses200Response</returns>
        ModWikiGetWikisByCourses200Response ModWikiGetWikisByCourses(ModWikiGetWikisByCoursesRequest modWikiGetWikisByCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetWikisByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiGetWikisByCourses200Response</returns>
        ApiResponse<ModWikiGetWikisByCourses200Response> ModWikiGetWikisByCoursesWithHttpInfo(ModWikiGetWikisByCoursesRequest modWikiGetWikisByCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Create a new page in a subwiki.
        /// </summary>
        /// <remarks>
        /// Create a new page in a subwiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiNewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiNewPage200Response</returns>
        ModWikiNewPage200Response ModWikiNewPage(ModWikiNewPageRequest modWikiNewPageRequest, int operationIndex = 0);

        /// <summary>
        /// Create a new page in a subwiki.
        /// </summary>
        /// <remarks>
        /// Create a new page in a subwiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiNewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiNewPage200Response</returns>
        ApiResponse<ModWikiNewPage200Response> ModWikiNewPageWithHttpInfo(ModWikiNewPageRequest modWikiNewPageRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the page viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the page viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiViewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiViewPage200Response</returns>
        ModWikiViewPage200Response ModWikiViewPage(ModWikiViewPageRequest modWikiViewPageRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the page viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the page viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiViewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiViewPage200Response</returns>
        ApiResponse<ModWikiViewPage200Response> ModWikiViewPageWithHttpInfo(ModWikiViewPageRequest modWikiViewPageRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiViewWiki200Response</returns>
        ModWikiViewWiki200Response ModWikiViewWiki(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiViewWiki200Response</returns>
        ApiResponse<ModWikiViewWiki200Response> ModWikiViewWikiWithHttpInfo(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModWikiApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Save the contents of a page.
        /// </summary>
        /// <remarks>
        /// Save the contents of a page.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiEditPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiEditPage200Response</returns>
        System.Threading.Tasks.Task<ModWikiEditPage200Response> ModWikiEditPageAsync(ModWikiEditPageRequest modWikiEditPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save the contents of a page.
        /// </summary>
        /// <remarks>
        /// Save the contents of a page.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiEditPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiEditPage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWikiEditPage200Response>> ModWikiEditPageWithHttpInfoAsync(ModWikiEditPageRequest modWikiEditPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the contents of a page.
        /// </summary>
        /// <remarks>
        /// Returns the contents of a page.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageContentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiGetPageContents200Response</returns>
        System.Threading.Tasks.Task<ModWikiGetPageContents200Response> ModWikiGetPageContentsAsync(ModWikiGetPageContentsRequest modWikiGetPageContentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the contents of a page.
        /// </summary>
        /// <remarks>
        /// Returns the contents of a page.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageContentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiGetPageContents200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWikiGetPageContents200Response>> ModWikiGetPageContentsWithHttpInfoAsync(ModWikiGetPageContentsRequest modWikiGetPageContentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Locks and retrieves info of page-section to be edited.
        /// </summary>
        /// <remarks>
        /// Locks and retrieves info of page-section to be edited.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageForEditingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiGetPageForEditing200Response</returns>
        System.Threading.Tasks.Task<ModWikiGetPageForEditing200Response> ModWikiGetPageForEditingAsync(ModWikiGetPageForEditingRequest modWikiGetPageForEditingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Locks and retrieves info of page-section to be edited.
        /// </summary>
        /// <remarks>
        /// Locks and retrieves info of page-section to be edited.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageForEditingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiGetPageForEditing200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWikiGetPageForEditing200Response>> ModWikiGetPageForEditingWithHttpInfoAsync(ModWikiGetPageForEditingRequest modWikiGetPageForEditingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the list of files for a specific subwiki.
        /// </summary>
        /// <remarks>
        /// Returns the list of files for a specific subwiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreH5pGetTrustedH5pFile200Response</returns>
        System.Threading.Tasks.Task<CoreH5pGetTrustedH5pFile200Response> ModWikiGetSubwikiFilesAsync(ModWikiGetSubwikiFilesRequest modWikiGetSubwikiFilesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the list of files for a specific subwiki.
        /// </summary>
        /// <remarks>
        /// Returns the list of files for a specific subwiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreH5pGetTrustedH5pFile200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreH5pGetTrustedH5pFile200Response>> ModWikiGetSubwikiFilesWithHttpInfoAsync(ModWikiGetSubwikiFilesRequest modWikiGetSubwikiFilesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the list of pages for a specific subwiki.
        /// </summary>
        /// <remarks>
        /// Returns the list of pages for a specific subwiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiGetSubwikiPages200Response</returns>
        System.Threading.Tasks.Task<ModWikiGetSubwikiPages200Response> ModWikiGetSubwikiPagesAsync(ModWikiGetSubwikiPagesRequest modWikiGetSubwikiPagesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the list of pages for a specific subwiki.
        /// </summary>
        /// <remarks>
        /// Returns the list of pages for a specific subwiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiGetSubwikiPages200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWikiGetSubwikiPages200Response>> ModWikiGetSubwikiPagesWithHttpInfoAsync(ModWikiGetSubwikiPagesRequest modWikiGetSubwikiPagesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the list of subwikis the user can see in a specific wiki.
        /// </summary>
        /// <remarks>
        /// Returns the list of subwikis the user can see in a specific wiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiGetSubwikis200Response</returns>
        System.Threading.Tasks.Task<ModWikiGetSubwikis200Response> ModWikiGetSubwikisAsync(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the list of subwikis the user can see in a specific wiki.
        /// </summary>
        /// <remarks>
        /// Returns the list of subwikis the user can see in a specific wiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiGetSubwikis200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWikiGetSubwikis200Response>> ModWikiGetSubwikisWithHttpInfoAsync(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetWikisByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiGetWikisByCourses200Response</returns>
        System.Threading.Tasks.Task<ModWikiGetWikisByCourses200Response> ModWikiGetWikisByCoursesAsync(ModWikiGetWikisByCoursesRequest modWikiGetWikisByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetWikisByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiGetWikisByCourses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWikiGetWikisByCourses200Response>> ModWikiGetWikisByCoursesWithHttpInfoAsync(ModWikiGetWikisByCoursesRequest modWikiGetWikisByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new page in a subwiki.
        /// </summary>
        /// <remarks>
        /// Create a new page in a subwiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiNewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiNewPage200Response</returns>
        System.Threading.Tasks.Task<ModWikiNewPage200Response> ModWikiNewPageAsync(ModWikiNewPageRequest modWikiNewPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new page in a subwiki.
        /// </summary>
        /// <remarks>
        /// Create a new page in a subwiki.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiNewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiNewPage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWikiNewPage200Response>> ModWikiNewPageWithHttpInfoAsync(ModWikiNewPageRequest modWikiNewPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the page viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the page viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiViewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiViewPage200Response</returns>
        System.Threading.Tasks.Task<ModWikiViewPage200Response> ModWikiViewPageAsync(ModWikiViewPageRequest modWikiViewPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the page viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the page viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiViewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiViewPage200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWikiViewPage200Response>> ModWikiViewPageWithHttpInfoAsync(ModWikiViewPageRequest modWikiViewPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiViewWiki200Response</returns>
        System.Threading.Tasks.Task<ModWikiViewWiki200Response> ModWikiViewWikiAsync(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiViewWiki200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModWikiViewWiki200Response>> ModWikiViewWikiWithHttpInfoAsync(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModWikiApi : IModWikiApiSync, IModWikiApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModWikiApi : IModWikiApi
    {
        private MoodleClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModWikiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModWikiApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModWikiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModWikiApi(string basePath)
        {
            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                new MoodleClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModWikiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModWikiApi(MoodleClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModWikiApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModWikiApi(MoodleClient.Client.ISynchronousClient client, MoodleClient.Client.IAsynchronousClient asyncClient, MoodleClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MoodleClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MoodleClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MoodleClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MoodleClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Save the contents of a page. Save the contents of a page.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiEditPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiEditPage200Response</returns>
        public ModWikiEditPage200Response ModWikiEditPage(ModWikiEditPageRequest modWikiEditPageRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModWikiEditPage200Response> localVarResponse = ModWikiEditPageWithHttpInfo(modWikiEditPageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save the contents of a page. Save the contents of a page.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiEditPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiEditPage200Response</returns>
        public MoodleClient.Client.ApiResponse<ModWikiEditPage200Response> ModWikiEditPageWithHttpInfo(ModWikiEditPageRequest modWikiEditPageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWikiEditPageRequest' is set
            if (modWikiEditPageRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiEditPageRequest' when calling ModWikiApi->ModWikiEditPage");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiEditPageRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiEditPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWikiEditPage200Response>("/mod_wiki_edit_page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiEditPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save the contents of a page. Save the contents of a page.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiEditPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiEditPage200Response</returns>
        public async System.Threading.Tasks.Task<ModWikiEditPage200Response> ModWikiEditPageAsync(ModWikiEditPageRequest modWikiEditPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModWikiEditPage200Response> localVarResponse = await ModWikiEditPageWithHttpInfoAsync(modWikiEditPageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save the contents of a page. Save the contents of a page.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiEditPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiEditPage200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModWikiEditPage200Response>> ModWikiEditPageWithHttpInfoAsync(ModWikiEditPageRequest modWikiEditPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWikiEditPageRequest' is set
            if (modWikiEditPageRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiEditPageRequest' when calling ModWikiApi->ModWikiEditPage");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiEditPageRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiEditPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWikiEditPage200Response>("/mod_wiki_edit_page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiEditPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the contents of a page. Returns the contents of a page.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageContentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiGetPageContents200Response</returns>
        public ModWikiGetPageContents200Response ModWikiGetPageContents(ModWikiGetPageContentsRequest modWikiGetPageContentsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModWikiGetPageContents200Response> localVarResponse = ModWikiGetPageContentsWithHttpInfo(modWikiGetPageContentsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the contents of a page. Returns the contents of a page.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageContentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiGetPageContents200Response</returns>
        public MoodleClient.Client.ApiResponse<ModWikiGetPageContents200Response> ModWikiGetPageContentsWithHttpInfo(ModWikiGetPageContentsRequest modWikiGetPageContentsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWikiGetPageContentsRequest' is set
            if (modWikiGetPageContentsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiGetPageContentsRequest' when calling ModWikiApi->ModWikiGetPageContents");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiGetPageContentsRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiGetPageContents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWikiGetPageContents200Response>("/mod_wiki_get_page_contents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiGetPageContents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the contents of a page. Returns the contents of a page.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageContentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiGetPageContents200Response</returns>
        public async System.Threading.Tasks.Task<ModWikiGetPageContents200Response> ModWikiGetPageContentsAsync(ModWikiGetPageContentsRequest modWikiGetPageContentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModWikiGetPageContents200Response> localVarResponse = await ModWikiGetPageContentsWithHttpInfoAsync(modWikiGetPageContentsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the contents of a page. Returns the contents of a page.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageContentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiGetPageContents200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModWikiGetPageContents200Response>> ModWikiGetPageContentsWithHttpInfoAsync(ModWikiGetPageContentsRequest modWikiGetPageContentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWikiGetPageContentsRequest' is set
            if (modWikiGetPageContentsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiGetPageContentsRequest' when calling ModWikiApi->ModWikiGetPageContents");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiGetPageContentsRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiGetPageContents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWikiGetPageContents200Response>("/mod_wiki_get_page_contents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiGetPageContents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Locks and retrieves info of page-section to be edited. Locks and retrieves info of page-section to be edited.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageForEditingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiGetPageForEditing200Response</returns>
        public ModWikiGetPageForEditing200Response ModWikiGetPageForEditing(ModWikiGetPageForEditingRequest modWikiGetPageForEditingRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModWikiGetPageForEditing200Response> localVarResponse = ModWikiGetPageForEditingWithHttpInfo(modWikiGetPageForEditingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Locks and retrieves info of page-section to be edited. Locks and retrieves info of page-section to be edited.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageForEditingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiGetPageForEditing200Response</returns>
        public MoodleClient.Client.ApiResponse<ModWikiGetPageForEditing200Response> ModWikiGetPageForEditingWithHttpInfo(ModWikiGetPageForEditingRequest modWikiGetPageForEditingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWikiGetPageForEditingRequest' is set
            if (modWikiGetPageForEditingRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiGetPageForEditingRequest' when calling ModWikiApi->ModWikiGetPageForEditing");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiGetPageForEditingRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiGetPageForEditing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWikiGetPageForEditing200Response>("/mod_wiki_get_page_for_editing", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiGetPageForEditing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Locks and retrieves info of page-section to be edited. Locks and retrieves info of page-section to be edited.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageForEditingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiGetPageForEditing200Response</returns>
        public async System.Threading.Tasks.Task<ModWikiGetPageForEditing200Response> ModWikiGetPageForEditingAsync(ModWikiGetPageForEditingRequest modWikiGetPageForEditingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModWikiGetPageForEditing200Response> localVarResponse = await ModWikiGetPageForEditingWithHttpInfoAsync(modWikiGetPageForEditingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Locks and retrieves info of page-section to be edited. Locks and retrieves info of page-section to be edited.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetPageForEditingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiGetPageForEditing200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModWikiGetPageForEditing200Response>> ModWikiGetPageForEditingWithHttpInfoAsync(ModWikiGetPageForEditingRequest modWikiGetPageForEditingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWikiGetPageForEditingRequest' is set
            if (modWikiGetPageForEditingRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiGetPageForEditingRequest' when calling ModWikiApi->ModWikiGetPageForEditing");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiGetPageForEditingRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiGetPageForEditing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWikiGetPageForEditing200Response>("/mod_wiki_get_page_for_editing", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiGetPageForEditing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of files for a specific subwiki. Returns the list of files for a specific subwiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreH5pGetTrustedH5pFile200Response</returns>
        public CoreH5pGetTrustedH5pFile200Response ModWikiGetSubwikiFiles(ModWikiGetSubwikiFilesRequest modWikiGetSubwikiFilesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreH5pGetTrustedH5pFile200Response> localVarResponse = ModWikiGetSubwikiFilesWithHttpInfo(modWikiGetSubwikiFilesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of files for a specific subwiki. Returns the list of files for a specific subwiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreH5pGetTrustedH5pFile200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreH5pGetTrustedH5pFile200Response> ModWikiGetSubwikiFilesWithHttpInfo(ModWikiGetSubwikiFilesRequest modWikiGetSubwikiFilesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWikiGetSubwikiFilesRequest' is set
            if (modWikiGetSubwikiFilesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiGetSubwikiFilesRequest' when calling ModWikiApi->ModWikiGetSubwikiFiles");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiGetSubwikiFilesRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiGetSubwikiFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreH5pGetTrustedH5pFile200Response>("/mod_wiki_get_subwiki_files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiGetSubwikiFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of files for a specific subwiki. Returns the list of files for a specific subwiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreH5pGetTrustedH5pFile200Response</returns>
        public async System.Threading.Tasks.Task<CoreH5pGetTrustedH5pFile200Response> ModWikiGetSubwikiFilesAsync(ModWikiGetSubwikiFilesRequest modWikiGetSubwikiFilesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreH5pGetTrustedH5pFile200Response> localVarResponse = await ModWikiGetSubwikiFilesWithHttpInfoAsync(modWikiGetSubwikiFilesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of files for a specific subwiki. Returns the list of files for a specific subwiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiFilesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreH5pGetTrustedH5pFile200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreH5pGetTrustedH5pFile200Response>> ModWikiGetSubwikiFilesWithHttpInfoAsync(ModWikiGetSubwikiFilesRequest modWikiGetSubwikiFilesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWikiGetSubwikiFilesRequest' is set
            if (modWikiGetSubwikiFilesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiGetSubwikiFilesRequest' when calling ModWikiApi->ModWikiGetSubwikiFiles");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiGetSubwikiFilesRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiGetSubwikiFiles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreH5pGetTrustedH5pFile200Response>("/mod_wiki_get_subwiki_files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiGetSubwikiFiles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of pages for a specific subwiki. Returns the list of pages for a specific subwiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiGetSubwikiPages200Response</returns>
        public ModWikiGetSubwikiPages200Response ModWikiGetSubwikiPages(ModWikiGetSubwikiPagesRequest modWikiGetSubwikiPagesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModWikiGetSubwikiPages200Response> localVarResponse = ModWikiGetSubwikiPagesWithHttpInfo(modWikiGetSubwikiPagesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of pages for a specific subwiki. Returns the list of pages for a specific subwiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiGetSubwikiPages200Response</returns>
        public MoodleClient.Client.ApiResponse<ModWikiGetSubwikiPages200Response> ModWikiGetSubwikiPagesWithHttpInfo(ModWikiGetSubwikiPagesRequest modWikiGetSubwikiPagesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWikiGetSubwikiPagesRequest' is set
            if (modWikiGetSubwikiPagesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiGetSubwikiPagesRequest' when calling ModWikiApi->ModWikiGetSubwikiPages");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiGetSubwikiPagesRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiGetSubwikiPages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWikiGetSubwikiPages200Response>("/mod_wiki_get_subwiki_pages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiGetSubwikiPages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of pages for a specific subwiki. Returns the list of pages for a specific subwiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiGetSubwikiPages200Response</returns>
        public async System.Threading.Tasks.Task<ModWikiGetSubwikiPages200Response> ModWikiGetSubwikiPagesAsync(ModWikiGetSubwikiPagesRequest modWikiGetSubwikiPagesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModWikiGetSubwikiPages200Response> localVarResponse = await ModWikiGetSubwikiPagesWithHttpInfoAsync(modWikiGetSubwikiPagesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of pages for a specific subwiki. Returns the list of pages for a specific subwiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikiPagesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiGetSubwikiPages200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModWikiGetSubwikiPages200Response>> ModWikiGetSubwikiPagesWithHttpInfoAsync(ModWikiGetSubwikiPagesRequest modWikiGetSubwikiPagesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWikiGetSubwikiPagesRequest' is set
            if (modWikiGetSubwikiPagesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiGetSubwikiPagesRequest' when calling ModWikiApi->ModWikiGetSubwikiPages");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiGetSubwikiPagesRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiGetSubwikiPages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWikiGetSubwikiPages200Response>("/mod_wiki_get_subwiki_pages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiGetSubwikiPages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of subwikis the user can see in a specific wiki. Returns the list of subwikis the user can see in a specific wiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiGetSubwikis200Response</returns>
        public ModWikiGetSubwikis200Response ModWikiGetSubwikis(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModWikiGetSubwikis200Response> localVarResponse = ModWikiGetSubwikisWithHttpInfo(modWikiGetSubwikisRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of subwikis the user can see in a specific wiki. Returns the list of subwikis the user can see in a specific wiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiGetSubwikis200Response</returns>
        public MoodleClient.Client.ApiResponse<ModWikiGetSubwikis200Response> ModWikiGetSubwikisWithHttpInfo(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWikiGetSubwikisRequest' is set
            if (modWikiGetSubwikisRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiGetSubwikisRequest' when calling ModWikiApi->ModWikiGetSubwikis");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiGetSubwikisRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiGetSubwikis";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWikiGetSubwikis200Response>("/mod_wiki_get_subwikis", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiGetSubwikis", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the list of subwikis the user can see in a specific wiki. Returns the list of subwikis the user can see in a specific wiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiGetSubwikis200Response</returns>
        public async System.Threading.Tasks.Task<ModWikiGetSubwikis200Response> ModWikiGetSubwikisAsync(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModWikiGetSubwikis200Response> localVarResponse = await ModWikiGetSubwikisWithHttpInfoAsync(modWikiGetSubwikisRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of subwikis the user can see in a specific wiki. Returns the list of subwikis the user can see in a specific wiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiGetSubwikis200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModWikiGetSubwikis200Response>> ModWikiGetSubwikisWithHttpInfoAsync(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWikiGetSubwikisRequest' is set
            if (modWikiGetSubwikisRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiGetSubwikisRequest' when calling ModWikiApi->ModWikiGetSubwikis");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiGetSubwikisRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiGetSubwikis";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWikiGetSubwikis200Response>("/mod_wiki_get_subwikis", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiGetSubwikis", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned. Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetWikisByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiGetWikisByCourses200Response</returns>
        public ModWikiGetWikisByCourses200Response ModWikiGetWikisByCourses(ModWikiGetWikisByCoursesRequest modWikiGetWikisByCoursesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModWikiGetWikisByCourses200Response> localVarResponse = ModWikiGetWikisByCoursesWithHttpInfo(modWikiGetWikisByCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned. Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetWikisByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiGetWikisByCourses200Response</returns>
        public MoodleClient.Client.ApiResponse<ModWikiGetWikisByCourses200Response> ModWikiGetWikisByCoursesWithHttpInfo(ModWikiGetWikisByCoursesRequest modWikiGetWikisByCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWikiGetWikisByCoursesRequest' is set
            if (modWikiGetWikisByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiGetWikisByCoursesRequest' when calling ModWikiApi->ModWikiGetWikisByCourses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiGetWikisByCoursesRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiGetWikisByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWikiGetWikisByCourses200Response>("/mod_wiki_get_wikis_by_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiGetWikisByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned. Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetWikisByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiGetWikisByCourses200Response</returns>
        public async System.Threading.Tasks.Task<ModWikiGetWikisByCourses200Response> ModWikiGetWikisByCoursesAsync(ModWikiGetWikisByCoursesRequest modWikiGetWikisByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModWikiGetWikisByCourses200Response> localVarResponse = await ModWikiGetWikisByCoursesWithHttpInfoAsync(modWikiGetWikisByCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned. Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetWikisByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiGetWikisByCourses200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModWikiGetWikisByCourses200Response>> ModWikiGetWikisByCoursesWithHttpInfoAsync(ModWikiGetWikisByCoursesRequest modWikiGetWikisByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWikiGetWikisByCoursesRequest' is set
            if (modWikiGetWikisByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiGetWikisByCoursesRequest' when calling ModWikiApi->ModWikiGetWikisByCourses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiGetWikisByCoursesRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiGetWikisByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWikiGetWikisByCourses200Response>("/mod_wiki_get_wikis_by_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiGetWikisByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new page in a subwiki. Create a new page in a subwiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiNewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiNewPage200Response</returns>
        public ModWikiNewPage200Response ModWikiNewPage(ModWikiNewPageRequest modWikiNewPageRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModWikiNewPage200Response> localVarResponse = ModWikiNewPageWithHttpInfo(modWikiNewPageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new page in a subwiki. Create a new page in a subwiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiNewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiNewPage200Response</returns>
        public MoodleClient.Client.ApiResponse<ModWikiNewPage200Response> ModWikiNewPageWithHttpInfo(ModWikiNewPageRequest modWikiNewPageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWikiNewPageRequest' is set
            if (modWikiNewPageRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiNewPageRequest' when calling ModWikiApi->ModWikiNewPage");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiNewPageRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiNewPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWikiNewPage200Response>("/mod_wiki_new_page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiNewPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new page in a subwiki. Create a new page in a subwiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiNewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiNewPage200Response</returns>
        public async System.Threading.Tasks.Task<ModWikiNewPage200Response> ModWikiNewPageAsync(ModWikiNewPageRequest modWikiNewPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModWikiNewPage200Response> localVarResponse = await ModWikiNewPageWithHttpInfoAsync(modWikiNewPageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new page in a subwiki. Create a new page in a subwiki.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiNewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiNewPage200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModWikiNewPage200Response>> ModWikiNewPageWithHttpInfoAsync(ModWikiNewPageRequest modWikiNewPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWikiNewPageRequest' is set
            if (modWikiNewPageRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiNewPageRequest' when calling ModWikiApi->ModWikiNewPage");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiNewPageRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiNewPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWikiNewPage200Response>("/mod_wiki_new_page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiNewPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the page viewed event and update the module completion status. Trigger the page viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiViewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiViewPage200Response</returns>
        public ModWikiViewPage200Response ModWikiViewPage(ModWikiViewPageRequest modWikiViewPageRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModWikiViewPage200Response> localVarResponse = ModWikiViewPageWithHttpInfo(modWikiViewPageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the page viewed event and update the module completion status. Trigger the page viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiViewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiViewPage200Response</returns>
        public MoodleClient.Client.ApiResponse<ModWikiViewPage200Response> ModWikiViewPageWithHttpInfo(ModWikiViewPageRequest modWikiViewPageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWikiViewPageRequest' is set
            if (modWikiViewPageRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiViewPageRequest' when calling ModWikiApi->ModWikiViewPage");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiViewPageRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiViewPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWikiViewPage200Response>("/mod_wiki_view_page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiViewPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the page viewed event and update the module completion status. Trigger the page viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiViewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiViewPage200Response</returns>
        public async System.Threading.Tasks.Task<ModWikiViewPage200Response> ModWikiViewPageAsync(ModWikiViewPageRequest modWikiViewPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModWikiViewPage200Response> localVarResponse = await ModWikiViewPageWithHttpInfoAsync(modWikiViewPageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the page viewed event and update the module completion status. Trigger the page viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiViewPageRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiViewPage200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModWikiViewPage200Response>> ModWikiViewPageWithHttpInfoAsync(ModWikiViewPageRequest modWikiViewPageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWikiViewPageRequest' is set
            if (modWikiViewPageRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiViewPageRequest' when calling ModWikiApi->ModWikiViewPage");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiViewPageRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiViewPage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWikiViewPage200Response>("/mod_wiki_view_page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiViewPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModWikiViewWiki200Response</returns>
        public ModWikiViewWiki200Response ModWikiViewWiki(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModWikiViewWiki200Response> localVarResponse = ModWikiViewWikiWithHttpInfo(modWikiGetSubwikisRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModWikiViewWiki200Response</returns>
        public MoodleClient.Client.ApiResponse<ModWikiViewWiki200Response> ModWikiViewWikiWithHttpInfo(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modWikiGetSubwikisRequest' is set
            if (modWikiGetSubwikisRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiGetSubwikisRequest' when calling ModWikiApi->ModWikiViewWiki");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiGetSubwikisRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiViewWiki";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModWikiViewWiki200Response>("/mod_wiki_view_wiki", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiViewWiki", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModWikiViewWiki200Response</returns>
        public async System.Threading.Tasks.Task<ModWikiViewWiki200Response> ModWikiViewWikiAsync(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModWikiViewWiki200Response> localVarResponse = await ModWikiViewWikiWithHttpInfoAsync(modWikiGetSubwikisRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modWikiGetSubwikisRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModWikiViewWiki200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModWikiViewWiki200Response>> ModWikiViewWikiWithHttpInfoAsync(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modWikiGetSubwikisRequest' is set
            if (modWikiGetSubwikisRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modWikiGetSubwikisRequest' when calling ModWikiApi->ModWikiViewWiki");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modWikiGetSubwikisRequest;

            localVarRequestOptions.Operation = "ModWikiApi.ModWikiViewWiki";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModWikiViewWiki200Response>("/mod_wiki_view_wiki", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModWikiViewWiki", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
