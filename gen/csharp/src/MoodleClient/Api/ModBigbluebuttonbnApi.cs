/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MoodleClient.Client;
using MoodleClient.Model;

namespace MoodleClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModBigbluebuttonbnApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns information if the current user can join or not.
        /// </summary>
        /// <remarks>
        /// Returns information if the current user can join or not.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModBigbluebuttonbnCanJoin200Response</returns>
        ModBigbluebuttonbnCanJoin200Response ModBigbluebuttonbnCanJoin(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0);

        /// <summary>
        /// Returns information if the current user can join or not.
        /// </summary>
        /// <remarks>
        /// Returns information if the current user can join or not.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModBigbluebuttonbnCanJoin200Response</returns>
        ApiResponse<ModBigbluebuttonbnCanJoin200Response> ModBigbluebuttonbnCanJoinWithHttpInfo(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0);
        /// <summary>
        /// Validate completion
        /// </summary>
        /// <remarks>
        /// Validate completion
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCompletionValidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCohortAddCohortMembers200Response</returns>
        CoreCohortAddCohortMembers200Response ModBigbluebuttonbnCompletionValidate(ModBigbluebuttonbnCompletionValidateRequest modBigbluebuttonbnCompletionValidateRequest, int operationIndex = 0);

        /// <summary>
        /// Validate completion
        /// </summary>
        /// <remarks>
        /// Validate completion
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCompletionValidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCohortAddCohortMembers200Response</returns>
        ApiResponse<CoreCohortAddCohortMembers200Response> ModBigbluebuttonbnCompletionValidateWithHttpInfo(ModBigbluebuttonbnCompletionValidateRequest modBigbluebuttonbnCompletionValidateRequest, int operationIndex = 0);
        /// <summary>
        /// End a meeting
        /// </summary>
        /// <remarks>
        /// End a meeting
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnEndMeetingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCohortAddCohortMembers200Response</returns>
        CoreCohortAddCohortMembers200Response ModBigbluebuttonbnEndMeeting(ModBigbluebuttonbnEndMeetingRequest modBigbluebuttonbnEndMeetingRequest, int operationIndex = 0);

        /// <summary>
        /// End a meeting
        /// </summary>
        /// <remarks>
        /// End a meeting
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnEndMeetingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCohortAddCohortMembers200Response</returns>
        ApiResponse<CoreCohortAddCohortMembers200Response> ModBigbluebuttonbnEndMeetingWithHttpInfo(ModBigbluebuttonbnEndMeetingRequest modBigbluebuttonbnEndMeetingRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response</returns>
        ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response ModBigbluebuttonbnGetBigbluebuttonbnsByCourses(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response</returns>
        ApiResponse<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response> ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesWithHttpInfo(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Get the join URL for the meeting and create if it does not exist.
        /// </summary>
        /// <remarks>
        /// Get the join URL for the meeting and create if it does not exist.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModBigbluebuttonbnGetJoinUrl200Response</returns>
        ModBigbluebuttonbnGetJoinUrl200Response ModBigbluebuttonbnGetJoinUrl(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0);

        /// <summary>
        /// Get the join URL for the meeting and create if it does not exist.
        /// </summary>
        /// <remarks>
        /// Get the join URL for the meeting and create if it does not exist.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModBigbluebuttonbnGetJoinUrl200Response</returns>
        ApiResponse<ModBigbluebuttonbnGetJoinUrl200Response> ModBigbluebuttonbnGetJoinUrlWithHttpInfo(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of recordings ready to be processed by a datatable.
        /// </summary>
        /// <remarks>
        /// Returns a list of recordings ready to be processed by a datatable.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModBigbluebuttonbnGetRecordings200Response</returns>
        ModBigbluebuttonbnGetRecordings200Response ModBigbluebuttonbnGetRecordings(ModBigbluebuttonbnGetRecordingsRequest modBigbluebuttonbnGetRecordingsRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of recordings ready to be processed by a datatable.
        /// </summary>
        /// <remarks>
        /// Returns a list of recordings ready to be processed by a datatable.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModBigbluebuttonbnGetRecordings200Response</returns>
        ApiResponse<ModBigbluebuttonbnGetRecordings200Response> ModBigbluebuttonbnGetRecordingsWithHttpInfo(ModBigbluebuttonbnGetRecordingsRequest modBigbluebuttonbnGetRecordingsRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of recordings ready to import to be processed by a datatable.
        /// </summary>
        /// <remarks>
        /// Returns a list of recordings ready to import to be processed by a datatable.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsToImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModBigbluebuttonbnGetRecordingsToImport200Response</returns>
        ModBigbluebuttonbnGetRecordingsToImport200Response ModBigbluebuttonbnGetRecordingsToImport(ModBigbluebuttonbnGetRecordingsToImportRequest modBigbluebuttonbnGetRecordingsToImportRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of recordings ready to import to be processed by a datatable.
        /// </summary>
        /// <remarks>
        /// Returns a list of recordings ready to import to be processed by a datatable.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsToImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModBigbluebuttonbnGetRecordingsToImport200Response</returns>
        ApiResponse<ModBigbluebuttonbnGetRecordingsToImport200Response> ModBigbluebuttonbnGetRecordingsToImportWithHttpInfo(ModBigbluebuttonbnGetRecordingsToImportRequest modBigbluebuttonbnGetRecordingsToImportRequest, int operationIndex = 0);
        /// <summary>
        /// Get displayable information on the meeting
        /// </summary>
        /// <remarks>
        /// Get displayable information on the meeting
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnMeetingInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModBigbluebuttonbnMeetingInfo200Response</returns>
        ModBigbluebuttonbnMeetingInfo200Response ModBigbluebuttonbnMeetingInfo(ModBigbluebuttonbnMeetingInfoRequest modBigbluebuttonbnMeetingInfoRequest, int operationIndex = 0);

        /// <summary>
        /// Get displayable information on the meeting
        /// </summary>
        /// <remarks>
        /// Get displayable information on the meeting
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnMeetingInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModBigbluebuttonbnMeetingInfo200Response</returns>
        ApiResponse<ModBigbluebuttonbnMeetingInfo200Response> ModBigbluebuttonbnMeetingInfoWithHttpInfo(ModBigbluebuttonbnMeetingInfoRequest modBigbluebuttonbnMeetingInfoRequest, int operationIndex = 0);
        /// <summary>
        /// Update a single recording
        /// </summary>
        /// <remarks>
        /// Update a single recording
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnUpdateRecordingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ModBigbluebuttonbnUpdateRecording(ModBigbluebuttonbnUpdateRecordingRequest modBigbluebuttonbnUpdateRecordingRequest, int operationIndex = 0);

        /// <summary>
        /// Update a single recording
        /// </summary>
        /// <remarks>
        /// Update a single recording
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnUpdateRecordingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ModBigbluebuttonbnUpdateRecordingWithHttpInfo(ModBigbluebuttonbnUpdateRecordingRequest modBigbluebuttonbnUpdateRecordingRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnViewBigbluebuttonbnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModBigbluebuttonbnViewBigbluebuttonbn(ModBigbluebuttonbnViewBigbluebuttonbnRequest modBigbluebuttonbnViewBigbluebuttonbnRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnViewBigbluebuttonbnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModBigbluebuttonbnViewBigbluebuttonbnWithHttpInfo(ModBigbluebuttonbnViewBigbluebuttonbnRequest modBigbluebuttonbnViewBigbluebuttonbnRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModBigbluebuttonbnApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns information if the current user can join or not.
        /// </summary>
        /// <remarks>
        /// Returns information if the current user can join or not.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModBigbluebuttonbnCanJoin200Response</returns>
        System.Threading.Tasks.Task<ModBigbluebuttonbnCanJoin200Response> ModBigbluebuttonbnCanJoinAsync(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns information if the current user can join or not.
        /// </summary>
        /// <remarks>
        /// Returns information if the current user can join or not.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModBigbluebuttonbnCanJoin200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModBigbluebuttonbnCanJoin200Response>> ModBigbluebuttonbnCanJoinWithHttpInfoAsync(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate completion
        /// </summary>
        /// <remarks>
        /// Validate completion
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCompletionValidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCohortAddCohortMembers200Response</returns>
        System.Threading.Tasks.Task<CoreCohortAddCohortMembers200Response> ModBigbluebuttonbnCompletionValidateAsync(ModBigbluebuttonbnCompletionValidateRequest modBigbluebuttonbnCompletionValidateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate completion
        /// </summary>
        /// <remarks>
        /// Validate completion
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCompletionValidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCohortAddCohortMembers200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCohortAddCohortMembers200Response>> ModBigbluebuttonbnCompletionValidateWithHttpInfoAsync(ModBigbluebuttonbnCompletionValidateRequest modBigbluebuttonbnCompletionValidateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End a meeting
        /// </summary>
        /// <remarks>
        /// End a meeting
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnEndMeetingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCohortAddCohortMembers200Response</returns>
        System.Threading.Tasks.Task<CoreCohortAddCohortMembers200Response> ModBigbluebuttonbnEndMeetingAsync(ModBigbluebuttonbnEndMeetingRequest modBigbluebuttonbnEndMeetingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End a meeting
        /// </summary>
        /// <remarks>
        /// End a meeting
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnEndMeetingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCohortAddCohortMembers200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCohortAddCohortMembers200Response>> ModBigbluebuttonbnEndMeetingWithHttpInfoAsync(ModBigbluebuttonbnEndMeetingRequest modBigbluebuttonbnEndMeetingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response</returns>
        System.Threading.Tasks.Task<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response> ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response>> ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesWithHttpInfoAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the join URL for the meeting and create if it does not exist.
        /// </summary>
        /// <remarks>
        /// Get the join URL for the meeting and create if it does not exist.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModBigbluebuttonbnGetJoinUrl200Response</returns>
        System.Threading.Tasks.Task<ModBigbluebuttonbnGetJoinUrl200Response> ModBigbluebuttonbnGetJoinUrlAsync(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the join URL for the meeting and create if it does not exist.
        /// </summary>
        /// <remarks>
        /// Get the join URL for the meeting and create if it does not exist.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModBigbluebuttonbnGetJoinUrl200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModBigbluebuttonbnGetJoinUrl200Response>> ModBigbluebuttonbnGetJoinUrlWithHttpInfoAsync(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of recordings ready to be processed by a datatable.
        /// </summary>
        /// <remarks>
        /// Returns a list of recordings ready to be processed by a datatable.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModBigbluebuttonbnGetRecordings200Response</returns>
        System.Threading.Tasks.Task<ModBigbluebuttonbnGetRecordings200Response> ModBigbluebuttonbnGetRecordingsAsync(ModBigbluebuttonbnGetRecordingsRequest modBigbluebuttonbnGetRecordingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of recordings ready to be processed by a datatable.
        /// </summary>
        /// <remarks>
        /// Returns a list of recordings ready to be processed by a datatable.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModBigbluebuttonbnGetRecordings200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModBigbluebuttonbnGetRecordings200Response>> ModBigbluebuttonbnGetRecordingsWithHttpInfoAsync(ModBigbluebuttonbnGetRecordingsRequest modBigbluebuttonbnGetRecordingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of recordings ready to import to be processed by a datatable.
        /// </summary>
        /// <remarks>
        /// Returns a list of recordings ready to import to be processed by a datatable.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsToImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModBigbluebuttonbnGetRecordingsToImport200Response</returns>
        System.Threading.Tasks.Task<ModBigbluebuttonbnGetRecordingsToImport200Response> ModBigbluebuttonbnGetRecordingsToImportAsync(ModBigbluebuttonbnGetRecordingsToImportRequest modBigbluebuttonbnGetRecordingsToImportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of recordings ready to import to be processed by a datatable.
        /// </summary>
        /// <remarks>
        /// Returns a list of recordings ready to import to be processed by a datatable.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsToImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModBigbluebuttonbnGetRecordingsToImport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModBigbluebuttonbnGetRecordingsToImport200Response>> ModBigbluebuttonbnGetRecordingsToImportWithHttpInfoAsync(ModBigbluebuttonbnGetRecordingsToImportRequest modBigbluebuttonbnGetRecordingsToImportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get displayable information on the meeting
        /// </summary>
        /// <remarks>
        /// Get displayable information on the meeting
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnMeetingInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModBigbluebuttonbnMeetingInfo200Response</returns>
        System.Threading.Tasks.Task<ModBigbluebuttonbnMeetingInfo200Response> ModBigbluebuttonbnMeetingInfoAsync(ModBigbluebuttonbnMeetingInfoRequest modBigbluebuttonbnMeetingInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get displayable information on the meeting
        /// </summary>
        /// <remarks>
        /// Get displayable information on the meeting
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnMeetingInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModBigbluebuttonbnMeetingInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModBigbluebuttonbnMeetingInfo200Response>> ModBigbluebuttonbnMeetingInfoWithHttpInfoAsync(ModBigbluebuttonbnMeetingInfoRequest modBigbluebuttonbnMeetingInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a single recording
        /// </summary>
        /// <remarks>
        /// Update a single recording
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnUpdateRecordingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ModBigbluebuttonbnUpdateRecordingAsync(ModBigbluebuttonbnUpdateRecordingRequest modBigbluebuttonbnUpdateRecordingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a single recording
        /// </summary>
        /// <remarks>
        /// Update a single recording
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnUpdateRecordingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ModBigbluebuttonbnUpdateRecordingWithHttpInfoAsync(ModBigbluebuttonbnUpdateRecordingRequest modBigbluebuttonbnUpdateRecordingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnViewBigbluebuttonbnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModBigbluebuttonbnViewBigbluebuttonbnAsync(ModBigbluebuttonbnViewBigbluebuttonbnRequest modBigbluebuttonbnViewBigbluebuttonbnRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnViewBigbluebuttonbnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModBigbluebuttonbnViewBigbluebuttonbnWithHttpInfoAsync(ModBigbluebuttonbnViewBigbluebuttonbnRequest modBigbluebuttonbnViewBigbluebuttonbnRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModBigbluebuttonbnApi : IModBigbluebuttonbnApiSync, IModBigbluebuttonbnApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModBigbluebuttonbnApi : IModBigbluebuttonbnApi
    {
        private MoodleClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModBigbluebuttonbnApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModBigbluebuttonbnApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModBigbluebuttonbnApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModBigbluebuttonbnApi(string basePath)
        {
            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                new MoodleClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModBigbluebuttonbnApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModBigbluebuttonbnApi(MoodleClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModBigbluebuttonbnApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModBigbluebuttonbnApi(MoodleClient.Client.ISynchronousClient client, MoodleClient.Client.IAsynchronousClient asyncClient, MoodleClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MoodleClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MoodleClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MoodleClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MoodleClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns information if the current user can join or not. Returns information if the current user can join or not.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModBigbluebuttonbnCanJoin200Response</returns>
        public ModBigbluebuttonbnCanJoin200Response ModBigbluebuttonbnCanJoin(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModBigbluebuttonbnCanJoin200Response> localVarResponse = ModBigbluebuttonbnCanJoinWithHttpInfo(modBigbluebuttonbnCanJoinRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information if the current user can join or not. Returns information if the current user can join or not.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModBigbluebuttonbnCanJoin200Response</returns>
        public MoodleClient.Client.ApiResponse<ModBigbluebuttonbnCanJoin200Response> ModBigbluebuttonbnCanJoinWithHttpInfo(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modBigbluebuttonbnCanJoinRequest' is set
            if (modBigbluebuttonbnCanJoinRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnCanJoinRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnCanJoin");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnCanJoinRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnCanJoin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModBigbluebuttonbnCanJoin200Response>("/mod_bigbluebuttonbn_can_join", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnCanJoin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns information if the current user can join or not. Returns information if the current user can join or not.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModBigbluebuttonbnCanJoin200Response</returns>
        public async System.Threading.Tasks.Task<ModBigbluebuttonbnCanJoin200Response> ModBigbluebuttonbnCanJoinAsync(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModBigbluebuttonbnCanJoin200Response> localVarResponse = await ModBigbluebuttonbnCanJoinWithHttpInfoAsync(modBigbluebuttonbnCanJoinRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns information if the current user can join or not. Returns information if the current user can join or not.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModBigbluebuttonbnCanJoin200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModBigbluebuttonbnCanJoin200Response>> ModBigbluebuttonbnCanJoinWithHttpInfoAsync(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modBigbluebuttonbnCanJoinRequest' is set
            if (modBigbluebuttonbnCanJoinRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnCanJoinRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnCanJoin");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnCanJoinRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnCanJoin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModBigbluebuttonbnCanJoin200Response>("/mod_bigbluebuttonbn_can_join", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnCanJoin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate completion Validate completion
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCompletionValidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCohortAddCohortMembers200Response</returns>
        public CoreCohortAddCohortMembers200Response ModBigbluebuttonbnCompletionValidate(ModBigbluebuttonbnCompletionValidateRequest modBigbluebuttonbnCompletionValidateRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreCohortAddCohortMembers200Response> localVarResponse = ModBigbluebuttonbnCompletionValidateWithHttpInfo(modBigbluebuttonbnCompletionValidateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate completion Validate completion
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCompletionValidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCohortAddCohortMembers200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreCohortAddCohortMembers200Response> ModBigbluebuttonbnCompletionValidateWithHttpInfo(ModBigbluebuttonbnCompletionValidateRequest modBigbluebuttonbnCompletionValidateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modBigbluebuttonbnCompletionValidateRequest' is set
            if (modBigbluebuttonbnCompletionValidateRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnCompletionValidateRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnCompletionValidate");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnCompletionValidateRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnCompletionValidate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCohortAddCohortMembers200Response>("/mod_bigbluebuttonbn_completion_validate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnCompletionValidate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate completion Validate completion
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCompletionValidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCohortAddCohortMembers200Response</returns>
        public async System.Threading.Tasks.Task<CoreCohortAddCohortMembers200Response> ModBigbluebuttonbnCompletionValidateAsync(ModBigbluebuttonbnCompletionValidateRequest modBigbluebuttonbnCompletionValidateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreCohortAddCohortMembers200Response> localVarResponse = await ModBigbluebuttonbnCompletionValidateWithHttpInfoAsync(modBigbluebuttonbnCompletionValidateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate completion Validate completion
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCompletionValidateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCohortAddCohortMembers200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreCohortAddCohortMembers200Response>> ModBigbluebuttonbnCompletionValidateWithHttpInfoAsync(ModBigbluebuttonbnCompletionValidateRequest modBigbluebuttonbnCompletionValidateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modBigbluebuttonbnCompletionValidateRequest' is set
            if (modBigbluebuttonbnCompletionValidateRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnCompletionValidateRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnCompletionValidate");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnCompletionValidateRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnCompletionValidate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCohortAddCohortMembers200Response>("/mod_bigbluebuttonbn_completion_validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnCompletionValidate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End a meeting End a meeting
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnEndMeetingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCohortAddCohortMembers200Response</returns>
        public CoreCohortAddCohortMembers200Response ModBigbluebuttonbnEndMeeting(ModBigbluebuttonbnEndMeetingRequest modBigbluebuttonbnEndMeetingRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreCohortAddCohortMembers200Response> localVarResponse = ModBigbluebuttonbnEndMeetingWithHttpInfo(modBigbluebuttonbnEndMeetingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End a meeting End a meeting
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnEndMeetingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCohortAddCohortMembers200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreCohortAddCohortMembers200Response> ModBigbluebuttonbnEndMeetingWithHttpInfo(ModBigbluebuttonbnEndMeetingRequest modBigbluebuttonbnEndMeetingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modBigbluebuttonbnEndMeetingRequest' is set
            if (modBigbluebuttonbnEndMeetingRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnEndMeetingRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnEndMeeting");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnEndMeetingRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnEndMeeting";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCohortAddCohortMembers200Response>("/mod_bigbluebuttonbn_end_meeting", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnEndMeeting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End a meeting End a meeting
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnEndMeetingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCohortAddCohortMembers200Response</returns>
        public async System.Threading.Tasks.Task<CoreCohortAddCohortMembers200Response> ModBigbluebuttonbnEndMeetingAsync(ModBigbluebuttonbnEndMeetingRequest modBigbluebuttonbnEndMeetingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreCohortAddCohortMembers200Response> localVarResponse = await ModBigbluebuttonbnEndMeetingWithHttpInfoAsync(modBigbluebuttonbnEndMeetingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End a meeting End a meeting
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnEndMeetingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCohortAddCohortMembers200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreCohortAddCohortMembers200Response>> ModBigbluebuttonbnEndMeetingWithHttpInfoAsync(ModBigbluebuttonbnEndMeetingRequest modBigbluebuttonbnEndMeetingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modBigbluebuttonbnEndMeetingRequest' is set
            if (modBigbluebuttonbnEndMeetingRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnEndMeetingRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnEndMeeting");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnEndMeetingRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnEndMeeting";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCohortAddCohortMembers200Response>("/mod_bigbluebuttonbn_end_meeting", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnEndMeeting", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned. Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response</returns>
        public ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response ModBigbluebuttonbnGetBigbluebuttonbnsByCourses(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response> localVarResponse = ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesWithHttpInfo(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned. Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response</returns>
        public MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response> ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesWithHttpInfo(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' is set
            if (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnGetBigbluebuttonbnsByCourses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnGetBigbluebuttonbnsByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response>("/mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnGetBigbluebuttonbnsByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned. Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response</returns>
        public async System.Threading.Tasks.Task<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response> ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response> localVarResponse = await ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesWithHttpInfoAsync(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned. Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response>> ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesWithHttpInfoAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' is set
            if (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnGetBigbluebuttonbnsByCourses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnGetBigbluebuttonbnsByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response>("/mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnGetBigbluebuttonbnsByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the join URL for the meeting and create if it does not exist. Get the join URL for the meeting and create if it does not exist.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModBigbluebuttonbnGetJoinUrl200Response</returns>
        public ModBigbluebuttonbnGetJoinUrl200Response ModBigbluebuttonbnGetJoinUrl(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetJoinUrl200Response> localVarResponse = ModBigbluebuttonbnGetJoinUrlWithHttpInfo(modBigbluebuttonbnCanJoinRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the join URL for the meeting and create if it does not exist. Get the join URL for the meeting and create if it does not exist.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModBigbluebuttonbnGetJoinUrl200Response</returns>
        public MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetJoinUrl200Response> ModBigbluebuttonbnGetJoinUrlWithHttpInfo(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modBigbluebuttonbnCanJoinRequest' is set
            if (modBigbluebuttonbnCanJoinRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnCanJoinRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnGetJoinUrl");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnCanJoinRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnGetJoinUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModBigbluebuttonbnGetJoinUrl200Response>("/mod_bigbluebuttonbn_get_join_url", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnGetJoinUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the join URL for the meeting and create if it does not exist. Get the join URL for the meeting and create if it does not exist.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModBigbluebuttonbnGetJoinUrl200Response</returns>
        public async System.Threading.Tasks.Task<ModBigbluebuttonbnGetJoinUrl200Response> ModBigbluebuttonbnGetJoinUrlAsync(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetJoinUrl200Response> localVarResponse = await ModBigbluebuttonbnGetJoinUrlWithHttpInfoAsync(modBigbluebuttonbnCanJoinRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the join URL for the meeting and create if it does not exist. Get the join URL for the meeting and create if it does not exist.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnCanJoinRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModBigbluebuttonbnGetJoinUrl200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetJoinUrl200Response>> ModBigbluebuttonbnGetJoinUrlWithHttpInfoAsync(ModBigbluebuttonbnCanJoinRequest modBigbluebuttonbnCanJoinRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modBigbluebuttonbnCanJoinRequest' is set
            if (modBigbluebuttonbnCanJoinRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnCanJoinRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnGetJoinUrl");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnCanJoinRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnGetJoinUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModBigbluebuttonbnGetJoinUrl200Response>("/mod_bigbluebuttonbn_get_join_url", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnGetJoinUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of recordings ready to be processed by a datatable. Returns a list of recordings ready to be processed by a datatable.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModBigbluebuttonbnGetRecordings200Response</returns>
        public ModBigbluebuttonbnGetRecordings200Response ModBigbluebuttonbnGetRecordings(ModBigbluebuttonbnGetRecordingsRequest modBigbluebuttonbnGetRecordingsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetRecordings200Response> localVarResponse = ModBigbluebuttonbnGetRecordingsWithHttpInfo(modBigbluebuttonbnGetRecordingsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of recordings ready to be processed by a datatable. Returns a list of recordings ready to be processed by a datatable.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModBigbluebuttonbnGetRecordings200Response</returns>
        public MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetRecordings200Response> ModBigbluebuttonbnGetRecordingsWithHttpInfo(ModBigbluebuttonbnGetRecordingsRequest modBigbluebuttonbnGetRecordingsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modBigbluebuttonbnGetRecordingsRequest' is set
            if (modBigbluebuttonbnGetRecordingsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnGetRecordingsRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnGetRecordings");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnGetRecordingsRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnGetRecordings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModBigbluebuttonbnGetRecordings200Response>("/mod_bigbluebuttonbn_get_recordings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnGetRecordings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of recordings ready to be processed by a datatable. Returns a list of recordings ready to be processed by a datatable.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModBigbluebuttonbnGetRecordings200Response</returns>
        public async System.Threading.Tasks.Task<ModBigbluebuttonbnGetRecordings200Response> ModBigbluebuttonbnGetRecordingsAsync(ModBigbluebuttonbnGetRecordingsRequest modBigbluebuttonbnGetRecordingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetRecordings200Response> localVarResponse = await ModBigbluebuttonbnGetRecordingsWithHttpInfoAsync(modBigbluebuttonbnGetRecordingsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of recordings ready to be processed by a datatable. Returns a list of recordings ready to be processed by a datatable.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModBigbluebuttonbnGetRecordings200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetRecordings200Response>> ModBigbluebuttonbnGetRecordingsWithHttpInfoAsync(ModBigbluebuttonbnGetRecordingsRequest modBigbluebuttonbnGetRecordingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modBigbluebuttonbnGetRecordingsRequest' is set
            if (modBigbluebuttonbnGetRecordingsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnGetRecordingsRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnGetRecordings");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnGetRecordingsRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnGetRecordings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModBigbluebuttonbnGetRecordings200Response>("/mod_bigbluebuttonbn_get_recordings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnGetRecordings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of recordings ready to import to be processed by a datatable. Returns a list of recordings ready to import to be processed by a datatable.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsToImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModBigbluebuttonbnGetRecordingsToImport200Response</returns>
        public ModBigbluebuttonbnGetRecordingsToImport200Response ModBigbluebuttonbnGetRecordingsToImport(ModBigbluebuttonbnGetRecordingsToImportRequest modBigbluebuttonbnGetRecordingsToImportRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetRecordingsToImport200Response> localVarResponse = ModBigbluebuttonbnGetRecordingsToImportWithHttpInfo(modBigbluebuttonbnGetRecordingsToImportRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of recordings ready to import to be processed by a datatable. Returns a list of recordings ready to import to be processed by a datatable.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsToImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModBigbluebuttonbnGetRecordingsToImport200Response</returns>
        public MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetRecordingsToImport200Response> ModBigbluebuttonbnGetRecordingsToImportWithHttpInfo(ModBigbluebuttonbnGetRecordingsToImportRequest modBigbluebuttonbnGetRecordingsToImportRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modBigbluebuttonbnGetRecordingsToImportRequest' is set
            if (modBigbluebuttonbnGetRecordingsToImportRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnGetRecordingsToImportRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnGetRecordingsToImport");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnGetRecordingsToImportRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnGetRecordingsToImport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModBigbluebuttonbnGetRecordingsToImport200Response>("/mod_bigbluebuttonbn_get_recordings_to_import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnGetRecordingsToImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of recordings ready to import to be processed by a datatable. Returns a list of recordings ready to import to be processed by a datatable.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsToImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModBigbluebuttonbnGetRecordingsToImport200Response</returns>
        public async System.Threading.Tasks.Task<ModBigbluebuttonbnGetRecordingsToImport200Response> ModBigbluebuttonbnGetRecordingsToImportAsync(ModBigbluebuttonbnGetRecordingsToImportRequest modBigbluebuttonbnGetRecordingsToImportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetRecordingsToImport200Response> localVarResponse = await ModBigbluebuttonbnGetRecordingsToImportWithHttpInfoAsync(modBigbluebuttonbnGetRecordingsToImportRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of recordings ready to import to be processed by a datatable. Returns a list of recordings ready to import to be processed by a datatable.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetRecordingsToImportRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModBigbluebuttonbnGetRecordingsToImport200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModBigbluebuttonbnGetRecordingsToImport200Response>> ModBigbluebuttonbnGetRecordingsToImportWithHttpInfoAsync(ModBigbluebuttonbnGetRecordingsToImportRequest modBigbluebuttonbnGetRecordingsToImportRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modBigbluebuttonbnGetRecordingsToImportRequest' is set
            if (modBigbluebuttonbnGetRecordingsToImportRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnGetRecordingsToImportRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnGetRecordingsToImport");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnGetRecordingsToImportRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnGetRecordingsToImport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModBigbluebuttonbnGetRecordingsToImport200Response>("/mod_bigbluebuttonbn_get_recordings_to_import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnGetRecordingsToImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get displayable information on the meeting Get displayable information on the meeting
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnMeetingInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModBigbluebuttonbnMeetingInfo200Response</returns>
        public ModBigbluebuttonbnMeetingInfo200Response ModBigbluebuttonbnMeetingInfo(ModBigbluebuttonbnMeetingInfoRequest modBigbluebuttonbnMeetingInfoRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModBigbluebuttonbnMeetingInfo200Response> localVarResponse = ModBigbluebuttonbnMeetingInfoWithHttpInfo(modBigbluebuttonbnMeetingInfoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get displayable information on the meeting Get displayable information on the meeting
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnMeetingInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModBigbluebuttonbnMeetingInfo200Response</returns>
        public MoodleClient.Client.ApiResponse<ModBigbluebuttonbnMeetingInfo200Response> ModBigbluebuttonbnMeetingInfoWithHttpInfo(ModBigbluebuttonbnMeetingInfoRequest modBigbluebuttonbnMeetingInfoRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modBigbluebuttonbnMeetingInfoRequest' is set
            if (modBigbluebuttonbnMeetingInfoRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnMeetingInfoRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnMeetingInfo");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnMeetingInfoRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnMeetingInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModBigbluebuttonbnMeetingInfo200Response>("/mod_bigbluebuttonbn_meeting_info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnMeetingInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get displayable information on the meeting Get displayable information on the meeting
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnMeetingInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModBigbluebuttonbnMeetingInfo200Response</returns>
        public async System.Threading.Tasks.Task<ModBigbluebuttonbnMeetingInfo200Response> ModBigbluebuttonbnMeetingInfoAsync(ModBigbluebuttonbnMeetingInfoRequest modBigbluebuttonbnMeetingInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModBigbluebuttonbnMeetingInfo200Response> localVarResponse = await ModBigbluebuttonbnMeetingInfoWithHttpInfoAsync(modBigbluebuttonbnMeetingInfoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get displayable information on the meeting Get displayable information on the meeting
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnMeetingInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModBigbluebuttonbnMeetingInfo200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModBigbluebuttonbnMeetingInfo200Response>> ModBigbluebuttonbnMeetingInfoWithHttpInfoAsync(ModBigbluebuttonbnMeetingInfoRequest modBigbluebuttonbnMeetingInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modBigbluebuttonbnMeetingInfoRequest' is set
            if (modBigbluebuttonbnMeetingInfoRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnMeetingInfoRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnMeetingInfo");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnMeetingInfoRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnMeetingInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModBigbluebuttonbnMeetingInfo200Response>("/mod_bigbluebuttonbn_meeting_info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnMeetingInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a single recording Update a single recording
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnUpdateRecordingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ModBigbluebuttonbnUpdateRecording(ModBigbluebuttonbnUpdateRecordingRequest modBigbluebuttonbnUpdateRecordingRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ModBigbluebuttonbnUpdateRecordingWithHttpInfo(modBigbluebuttonbnUpdateRecordingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a single recording Update a single recording
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnUpdateRecordingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ModBigbluebuttonbnUpdateRecordingWithHttpInfo(ModBigbluebuttonbnUpdateRecordingRequest modBigbluebuttonbnUpdateRecordingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modBigbluebuttonbnUpdateRecordingRequest' is set
            if (modBigbluebuttonbnUpdateRecordingRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnUpdateRecordingRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnUpdateRecording");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnUpdateRecordingRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnUpdateRecording";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/mod_bigbluebuttonbn_update_recording", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnUpdateRecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a single recording Update a single recording
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnUpdateRecordingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ModBigbluebuttonbnUpdateRecordingAsync(ModBigbluebuttonbnUpdateRecordingRequest modBigbluebuttonbnUpdateRecordingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ModBigbluebuttonbnUpdateRecordingWithHttpInfoAsync(modBigbluebuttonbnUpdateRecordingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a single recording Update a single recording
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnUpdateRecordingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ModBigbluebuttonbnUpdateRecordingWithHttpInfoAsync(ModBigbluebuttonbnUpdateRecordingRequest modBigbluebuttonbnUpdateRecordingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modBigbluebuttonbnUpdateRecordingRequest' is set
            if (modBigbluebuttonbnUpdateRecordingRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnUpdateRecordingRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnUpdateRecording");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnUpdateRecordingRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnUpdateRecording";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/mod_bigbluebuttonbn_update_recording", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnUpdateRecording", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnViewBigbluebuttonbnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModBigbluebuttonbnViewBigbluebuttonbn(ModBigbluebuttonbnViewBigbluebuttonbnRequest modBigbluebuttonbnViewBigbluebuttonbnRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModBigbluebuttonbnViewBigbluebuttonbnWithHttpInfo(modBigbluebuttonbnViewBigbluebuttonbnRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnViewBigbluebuttonbnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModBigbluebuttonbnViewBigbluebuttonbnWithHttpInfo(ModBigbluebuttonbnViewBigbluebuttonbnRequest modBigbluebuttonbnViewBigbluebuttonbnRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modBigbluebuttonbnViewBigbluebuttonbnRequest' is set
            if (modBigbluebuttonbnViewBigbluebuttonbnRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnViewBigbluebuttonbnRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnViewBigbluebuttonbn");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnViewBigbluebuttonbnRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnViewBigbluebuttonbn";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_bigbluebuttonbn_view_bigbluebuttonbn", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnViewBigbluebuttonbn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnViewBigbluebuttonbnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModBigbluebuttonbnViewBigbluebuttonbnAsync(ModBigbluebuttonbnViewBigbluebuttonbnRequest modBigbluebuttonbnViewBigbluebuttonbnRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModBigbluebuttonbnViewBigbluebuttonbnWithHttpInfoAsync(modBigbluebuttonbnViewBigbluebuttonbnRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnViewBigbluebuttonbnRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModBigbluebuttonbnViewBigbluebuttonbnWithHttpInfoAsync(ModBigbluebuttonbnViewBigbluebuttonbnRequest modBigbluebuttonbnViewBigbluebuttonbnRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modBigbluebuttonbnViewBigbluebuttonbnRequest' is set
            if (modBigbluebuttonbnViewBigbluebuttonbnRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnViewBigbluebuttonbnRequest' when calling ModBigbluebuttonbnApi->ModBigbluebuttonbnViewBigbluebuttonbn");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnViewBigbluebuttonbnRequest;

            localVarRequestOptions.Operation = "ModBigbluebuttonbnApi.ModBigbluebuttonbnViewBigbluebuttonbn";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_bigbluebuttonbn_view_bigbluebuttonbn", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModBigbluebuttonbnViewBigbluebuttonbn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
