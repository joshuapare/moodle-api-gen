/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MoodleClient.Client;
using MoodleClient.Model;

namespace MoodleClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModH5pactivityApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Return the information needed to list a user attempts.
        /// </summary>
        /// <remarks>
        /// Return the information needed to list a user attempts.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModH5pactivityGetAttempts200Response</returns>
        ModH5pactivityGetAttempts200Response ModH5pactivityGetAttempts(ModH5pactivityGetAttemptsRequest modH5pactivityGetAttemptsRequest, int operationIndex = 0);

        /// <summary>
        /// Return the information needed to list a user attempts.
        /// </summary>
        /// <remarks>
        /// Return the information needed to list a user attempts.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModH5pactivityGetAttempts200Response</returns>
        ApiResponse<ModH5pactivityGetAttempts200Response> ModH5pactivityGetAttemptsWithHttpInfo(ModH5pactivityGetAttemptsRequest modH5pactivityGetAttemptsRequest, int operationIndex = 0);
        /// <summary>
        /// Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModH5pactivityGetH5pactivitiesByCourses200Response</returns>
        ModH5pactivityGetH5pactivitiesByCourses200Response ModH5pactivityGetH5pactivitiesByCourses(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModH5pactivityGetH5pactivitiesByCourses200Response</returns>
        ApiResponse<ModH5pactivityGetH5pactivitiesByCourses200Response> ModH5pactivityGetH5pactivitiesByCoursesWithHttpInfo(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Return access information for a given h5p activity.
        /// </summary>
        /// <remarks>
        /// Return access information for a given h5p activity.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetH5pactivityAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModH5pactivityGetH5pactivityAccessInformation200Response</returns>
        ModH5pactivityGetH5pactivityAccessInformation200Response ModH5pactivityGetH5pactivityAccessInformation(ModH5pactivityGetH5pactivityAccessInformationRequest modH5pactivityGetH5pactivityAccessInformationRequest, int operationIndex = 0);

        /// <summary>
        /// Return access information for a given h5p activity.
        /// </summary>
        /// <remarks>
        /// Return access information for a given h5p activity.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetH5pactivityAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModH5pactivityGetH5pactivityAccessInformation200Response</returns>
        ApiResponse<ModH5pactivityGetH5pactivityAccessInformation200Response> ModH5pactivityGetH5pactivityAccessInformationWithHttpInfo(ModH5pactivityGetH5pactivityAccessInformationRequest modH5pactivityGetH5pactivityAccessInformationRequest, int operationIndex = 0);
        /// <summary>
        /// Return the information needed to list a user attempt results.
        /// </summary>
        /// <remarks>
        /// Return the information needed to list a user attempt results.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetResultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModH5pactivityGetResults200Response</returns>
        ModH5pactivityGetResults200Response ModH5pactivityGetResults(ModH5pactivityGetResultsRequest modH5pactivityGetResultsRequest, int operationIndex = 0);

        /// <summary>
        /// Return the information needed to list a user attempt results.
        /// </summary>
        /// <remarks>
        /// Return the information needed to list a user attempt results.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetResultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModH5pactivityGetResults200Response</returns>
        ApiResponse<ModH5pactivityGetResults200Response> ModH5pactivityGetResultsWithHttpInfo(ModH5pactivityGetResultsRequest modH5pactivityGetResultsRequest, int operationIndex = 0);
        /// <summary>
        /// Return the information needed to list all enrolled user attempts.
        /// </summary>
        /// <remarks>
        /// Return the information needed to list all enrolled user attempts.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModH5pactivityGetUserAttempts200Response</returns>
        ModH5pactivityGetUserAttempts200Response ModH5pactivityGetUserAttempts(ModH5pactivityGetUserAttemptsRequest modH5pactivityGetUserAttemptsRequest, int operationIndex = 0);

        /// <summary>
        /// Return the information needed to list all enrolled user attempts.
        /// </summary>
        /// <remarks>
        /// Return the information needed to list all enrolled user attempts.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModH5pactivityGetUserAttempts200Response</returns>
        ApiResponse<ModH5pactivityGetUserAttempts200Response> ModH5pactivityGetUserAttemptsWithHttpInfo(ModH5pactivityGetUserAttemptsRequest modH5pactivityGetUserAttemptsRequest, int operationIndex = 0);
        /// <summary>
        /// Log that the h5pactivity was viewed.
        /// </summary>
        /// <remarks>
        /// Log that the h5pactivity was viewed.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityLogReportViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModH5pactivityLogReportViewed(ModH5pactivityLogReportViewedRequest modH5pactivityLogReportViewedRequest, int operationIndex = 0);

        /// <summary>
        /// Log that the h5pactivity was viewed.
        /// </summary>
        /// <remarks>
        /// Log that the h5pactivity was viewed.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityLogReportViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModH5pactivityLogReportViewedWithHttpInfo(ModH5pactivityLogReportViewedRequest modH5pactivityLogReportViewedRequest, int operationIndex = 0);
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityViewH5pactivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        CoreCalendarDeleteSubscription200Response ModH5pactivityViewH5pactivity(ModH5pactivityViewH5pactivityRequest modH5pactivityViewH5pactivityRequest, int operationIndex = 0);

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityViewH5pactivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        ApiResponse<CoreCalendarDeleteSubscription200Response> ModH5pactivityViewH5pactivityWithHttpInfo(ModH5pactivityViewH5pactivityRequest modH5pactivityViewH5pactivityRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModH5pactivityApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Return the information needed to list a user attempts.
        /// </summary>
        /// <remarks>
        /// Return the information needed to list a user attempts.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModH5pactivityGetAttempts200Response</returns>
        System.Threading.Tasks.Task<ModH5pactivityGetAttempts200Response> ModH5pactivityGetAttemptsAsync(ModH5pactivityGetAttemptsRequest modH5pactivityGetAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the information needed to list a user attempts.
        /// </summary>
        /// <remarks>
        /// Return the information needed to list a user attempts.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModH5pactivityGetAttempts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModH5pactivityGetAttempts200Response>> ModH5pactivityGetAttemptsWithHttpInfoAsync(ModH5pactivityGetAttemptsRequest modH5pactivityGetAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModH5pactivityGetH5pactivitiesByCourses200Response</returns>
        System.Threading.Tasks.Task<ModH5pactivityGetH5pactivitiesByCourses200Response> ModH5pactivityGetH5pactivitiesByCoursesAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned.
        /// </summary>
        /// <remarks>
        /// Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModH5pactivityGetH5pactivitiesByCourses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModH5pactivityGetH5pactivitiesByCourses200Response>> ModH5pactivityGetH5pactivitiesByCoursesWithHttpInfoAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return access information for a given h5p activity.
        /// </summary>
        /// <remarks>
        /// Return access information for a given h5p activity.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetH5pactivityAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModH5pactivityGetH5pactivityAccessInformation200Response</returns>
        System.Threading.Tasks.Task<ModH5pactivityGetH5pactivityAccessInformation200Response> ModH5pactivityGetH5pactivityAccessInformationAsync(ModH5pactivityGetH5pactivityAccessInformationRequest modH5pactivityGetH5pactivityAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return access information for a given h5p activity.
        /// </summary>
        /// <remarks>
        /// Return access information for a given h5p activity.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetH5pactivityAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModH5pactivityGetH5pactivityAccessInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModH5pactivityGetH5pactivityAccessInformation200Response>> ModH5pactivityGetH5pactivityAccessInformationWithHttpInfoAsync(ModH5pactivityGetH5pactivityAccessInformationRequest modH5pactivityGetH5pactivityAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the information needed to list a user attempt results.
        /// </summary>
        /// <remarks>
        /// Return the information needed to list a user attempt results.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetResultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModH5pactivityGetResults200Response</returns>
        System.Threading.Tasks.Task<ModH5pactivityGetResults200Response> ModH5pactivityGetResultsAsync(ModH5pactivityGetResultsRequest modH5pactivityGetResultsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the information needed to list a user attempt results.
        /// </summary>
        /// <remarks>
        /// Return the information needed to list a user attempt results.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetResultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModH5pactivityGetResults200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModH5pactivityGetResults200Response>> ModH5pactivityGetResultsWithHttpInfoAsync(ModH5pactivityGetResultsRequest modH5pactivityGetResultsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the information needed to list all enrolled user attempts.
        /// </summary>
        /// <remarks>
        /// Return the information needed to list all enrolled user attempts.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModH5pactivityGetUserAttempts200Response</returns>
        System.Threading.Tasks.Task<ModH5pactivityGetUserAttempts200Response> ModH5pactivityGetUserAttemptsAsync(ModH5pactivityGetUserAttemptsRequest modH5pactivityGetUserAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the information needed to list all enrolled user attempts.
        /// </summary>
        /// <remarks>
        /// Return the information needed to list all enrolled user attempts.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModH5pactivityGetUserAttempts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModH5pactivityGetUserAttempts200Response>> ModH5pactivityGetUserAttemptsWithHttpInfoAsync(ModH5pactivityGetUserAttemptsRequest modH5pactivityGetUserAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Log that the h5pactivity was viewed.
        /// </summary>
        /// <remarks>
        /// Log that the h5pactivity was viewed.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityLogReportViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModH5pactivityLogReportViewedAsync(ModH5pactivityLogReportViewedRequest modH5pactivityLogReportViewedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Log that the h5pactivity was viewed.
        /// </summary>
        /// <remarks>
        /// Log that the h5pactivity was viewed.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityLogReportViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModH5pactivityLogReportViewedWithHttpInfoAsync(ModH5pactivityLogReportViewedRequest modH5pactivityLogReportViewedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityViewH5pactivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModH5pactivityViewH5pactivityAsync(ModH5pactivityViewH5pactivityRequest modH5pactivityViewH5pactivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <remarks>
        /// Trigger the course module viewed event and update the module completion status.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityViewH5pactivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreCalendarDeleteSubscription200Response>> ModH5pactivityViewH5pactivityWithHttpInfoAsync(ModH5pactivityViewH5pactivityRequest modH5pactivityViewH5pactivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModH5pactivityApi : IModH5pactivityApiSync, IModH5pactivityApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModH5pactivityApi : IModH5pactivityApi
    {
        private MoodleClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModH5pactivityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModH5pactivityApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModH5pactivityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModH5pactivityApi(string basePath)
        {
            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                new MoodleClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModH5pactivityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModH5pactivityApi(MoodleClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModH5pactivityApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModH5pactivityApi(MoodleClient.Client.ISynchronousClient client, MoodleClient.Client.IAsynchronousClient asyncClient, MoodleClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MoodleClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MoodleClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MoodleClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MoodleClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Return the information needed to list a user attempts. Return the information needed to list a user attempts.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModH5pactivityGetAttempts200Response</returns>
        public ModH5pactivityGetAttempts200Response ModH5pactivityGetAttempts(ModH5pactivityGetAttemptsRequest modH5pactivityGetAttemptsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModH5pactivityGetAttempts200Response> localVarResponse = ModH5pactivityGetAttemptsWithHttpInfo(modH5pactivityGetAttemptsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the information needed to list a user attempts. Return the information needed to list a user attempts.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModH5pactivityGetAttempts200Response</returns>
        public MoodleClient.Client.ApiResponse<ModH5pactivityGetAttempts200Response> ModH5pactivityGetAttemptsWithHttpInfo(ModH5pactivityGetAttemptsRequest modH5pactivityGetAttemptsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modH5pactivityGetAttemptsRequest' is set
            if (modH5pactivityGetAttemptsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modH5pactivityGetAttemptsRequest' when calling ModH5pactivityApi->ModH5pactivityGetAttempts");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modH5pactivityGetAttemptsRequest;

            localVarRequestOptions.Operation = "ModH5pactivityApi.ModH5pactivityGetAttempts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModH5pactivityGetAttempts200Response>("/mod_h5pactivity_get_attempts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModH5pactivityGetAttempts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the information needed to list a user attempts. Return the information needed to list a user attempts.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModH5pactivityGetAttempts200Response</returns>
        public async System.Threading.Tasks.Task<ModH5pactivityGetAttempts200Response> ModH5pactivityGetAttemptsAsync(ModH5pactivityGetAttemptsRequest modH5pactivityGetAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModH5pactivityGetAttempts200Response> localVarResponse = await ModH5pactivityGetAttemptsWithHttpInfoAsync(modH5pactivityGetAttemptsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the information needed to list a user attempts. Return the information needed to list a user attempts.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModH5pactivityGetAttempts200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModH5pactivityGetAttempts200Response>> ModH5pactivityGetAttemptsWithHttpInfoAsync(ModH5pactivityGetAttemptsRequest modH5pactivityGetAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modH5pactivityGetAttemptsRequest' is set
            if (modH5pactivityGetAttemptsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modH5pactivityGetAttemptsRequest' when calling ModH5pactivityApi->ModH5pactivityGetAttempts");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modH5pactivityGetAttemptsRequest;

            localVarRequestOptions.Operation = "ModH5pactivityApi.ModH5pactivityGetAttempts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModH5pactivityGetAttempts200Response>("/mod_h5pactivity_get_attempts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModH5pactivityGetAttempts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned. Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModH5pactivityGetH5pactivitiesByCourses200Response</returns>
        public ModH5pactivityGetH5pactivitiesByCourses200Response ModH5pactivityGetH5pactivitiesByCourses(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModH5pactivityGetH5pactivitiesByCourses200Response> localVarResponse = ModH5pactivityGetH5pactivitiesByCoursesWithHttpInfo(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned. Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModH5pactivityGetH5pactivitiesByCourses200Response</returns>
        public MoodleClient.Client.ApiResponse<ModH5pactivityGetH5pactivitiesByCourses200Response> ModH5pactivityGetH5pactivitiesByCoursesWithHttpInfo(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' is set
            if (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' when calling ModH5pactivityApi->ModH5pactivityGetH5pactivitiesByCourses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;

            localVarRequestOptions.Operation = "ModH5pactivityApi.ModH5pactivityGetH5pactivitiesByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModH5pactivityGetH5pactivitiesByCourses200Response>("/mod_h5pactivity_get_h5pactivities_by_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModH5pactivityGetH5pactivitiesByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned. Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModH5pactivityGetH5pactivitiesByCourses200Response</returns>
        public async System.Threading.Tasks.Task<ModH5pactivityGetH5pactivitiesByCourses200Response> ModH5pactivityGetH5pactivitiesByCoursesAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModH5pactivityGetH5pactivitiesByCourses200Response> localVarResponse = await ModH5pactivityGetH5pactivitiesByCoursesWithHttpInfoAsync(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned. Returns a list of h5p activities in a list of             provided courses, if no list is provided all h5p activities             that the user can view will be returned.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModH5pactivityGetH5pactivitiesByCourses200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModH5pactivityGetH5pactivitiesByCourses200Response>> ModH5pactivityGetH5pactivitiesByCoursesWithHttpInfoAsync(ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' is set
            if (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' when calling ModH5pactivityApi->ModH5pactivityGetH5pactivitiesByCourses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest;

            localVarRequestOptions.Operation = "ModH5pactivityApi.ModH5pactivityGetH5pactivitiesByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModH5pactivityGetH5pactivitiesByCourses200Response>("/mod_h5pactivity_get_h5pactivities_by_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModH5pactivityGetH5pactivitiesByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return access information for a given h5p activity. Return access information for a given h5p activity.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetH5pactivityAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModH5pactivityGetH5pactivityAccessInformation200Response</returns>
        public ModH5pactivityGetH5pactivityAccessInformation200Response ModH5pactivityGetH5pactivityAccessInformation(ModH5pactivityGetH5pactivityAccessInformationRequest modH5pactivityGetH5pactivityAccessInformationRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModH5pactivityGetH5pactivityAccessInformation200Response> localVarResponse = ModH5pactivityGetH5pactivityAccessInformationWithHttpInfo(modH5pactivityGetH5pactivityAccessInformationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return access information for a given h5p activity. Return access information for a given h5p activity.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetH5pactivityAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModH5pactivityGetH5pactivityAccessInformation200Response</returns>
        public MoodleClient.Client.ApiResponse<ModH5pactivityGetH5pactivityAccessInformation200Response> ModH5pactivityGetH5pactivityAccessInformationWithHttpInfo(ModH5pactivityGetH5pactivityAccessInformationRequest modH5pactivityGetH5pactivityAccessInformationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modH5pactivityGetH5pactivityAccessInformationRequest' is set
            if (modH5pactivityGetH5pactivityAccessInformationRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modH5pactivityGetH5pactivityAccessInformationRequest' when calling ModH5pactivityApi->ModH5pactivityGetH5pactivityAccessInformation");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modH5pactivityGetH5pactivityAccessInformationRequest;

            localVarRequestOptions.Operation = "ModH5pactivityApi.ModH5pactivityGetH5pactivityAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModH5pactivityGetH5pactivityAccessInformation200Response>("/mod_h5pactivity_get_h5pactivity_access_information", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModH5pactivityGetH5pactivityAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return access information for a given h5p activity. Return access information for a given h5p activity.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetH5pactivityAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModH5pactivityGetH5pactivityAccessInformation200Response</returns>
        public async System.Threading.Tasks.Task<ModH5pactivityGetH5pactivityAccessInformation200Response> ModH5pactivityGetH5pactivityAccessInformationAsync(ModH5pactivityGetH5pactivityAccessInformationRequest modH5pactivityGetH5pactivityAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModH5pactivityGetH5pactivityAccessInformation200Response> localVarResponse = await ModH5pactivityGetH5pactivityAccessInformationWithHttpInfoAsync(modH5pactivityGetH5pactivityAccessInformationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return access information for a given h5p activity. Return access information for a given h5p activity.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetH5pactivityAccessInformationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModH5pactivityGetH5pactivityAccessInformation200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModH5pactivityGetH5pactivityAccessInformation200Response>> ModH5pactivityGetH5pactivityAccessInformationWithHttpInfoAsync(ModH5pactivityGetH5pactivityAccessInformationRequest modH5pactivityGetH5pactivityAccessInformationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modH5pactivityGetH5pactivityAccessInformationRequest' is set
            if (modH5pactivityGetH5pactivityAccessInformationRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modH5pactivityGetH5pactivityAccessInformationRequest' when calling ModH5pactivityApi->ModH5pactivityGetH5pactivityAccessInformation");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modH5pactivityGetH5pactivityAccessInformationRequest;

            localVarRequestOptions.Operation = "ModH5pactivityApi.ModH5pactivityGetH5pactivityAccessInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModH5pactivityGetH5pactivityAccessInformation200Response>("/mod_h5pactivity_get_h5pactivity_access_information", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModH5pactivityGetH5pactivityAccessInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the information needed to list a user attempt results. Return the information needed to list a user attempt results.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetResultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModH5pactivityGetResults200Response</returns>
        public ModH5pactivityGetResults200Response ModH5pactivityGetResults(ModH5pactivityGetResultsRequest modH5pactivityGetResultsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModH5pactivityGetResults200Response> localVarResponse = ModH5pactivityGetResultsWithHttpInfo(modH5pactivityGetResultsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the information needed to list a user attempt results. Return the information needed to list a user attempt results.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetResultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModH5pactivityGetResults200Response</returns>
        public MoodleClient.Client.ApiResponse<ModH5pactivityGetResults200Response> ModH5pactivityGetResultsWithHttpInfo(ModH5pactivityGetResultsRequest modH5pactivityGetResultsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modH5pactivityGetResultsRequest' is set
            if (modH5pactivityGetResultsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modH5pactivityGetResultsRequest' when calling ModH5pactivityApi->ModH5pactivityGetResults");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modH5pactivityGetResultsRequest;

            localVarRequestOptions.Operation = "ModH5pactivityApi.ModH5pactivityGetResults";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModH5pactivityGetResults200Response>("/mod_h5pactivity_get_results", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModH5pactivityGetResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the information needed to list a user attempt results. Return the information needed to list a user attempt results.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetResultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModH5pactivityGetResults200Response</returns>
        public async System.Threading.Tasks.Task<ModH5pactivityGetResults200Response> ModH5pactivityGetResultsAsync(ModH5pactivityGetResultsRequest modH5pactivityGetResultsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModH5pactivityGetResults200Response> localVarResponse = await ModH5pactivityGetResultsWithHttpInfoAsync(modH5pactivityGetResultsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the information needed to list a user attempt results. Return the information needed to list a user attempt results.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetResultsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModH5pactivityGetResults200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModH5pactivityGetResults200Response>> ModH5pactivityGetResultsWithHttpInfoAsync(ModH5pactivityGetResultsRequest modH5pactivityGetResultsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modH5pactivityGetResultsRequest' is set
            if (modH5pactivityGetResultsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modH5pactivityGetResultsRequest' when calling ModH5pactivityApi->ModH5pactivityGetResults");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modH5pactivityGetResultsRequest;

            localVarRequestOptions.Operation = "ModH5pactivityApi.ModH5pactivityGetResults";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModH5pactivityGetResults200Response>("/mod_h5pactivity_get_results", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModH5pactivityGetResults", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the information needed to list all enrolled user attempts. Return the information needed to list all enrolled user attempts.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModH5pactivityGetUserAttempts200Response</returns>
        public ModH5pactivityGetUserAttempts200Response ModH5pactivityGetUserAttempts(ModH5pactivityGetUserAttemptsRequest modH5pactivityGetUserAttemptsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModH5pactivityGetUserAttempts200Response> localVarResponse = ModH5pactivityGetUserAttemptsWithHttpInfo(modH5pactivityGetUserAttemptsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the information needed to list all enrolled user attempts. Return the information needed to list all enrolled user attempts.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModH5pactivityGetUserAttempts200Response</returns>
        public MoodleClient.Client.ApiResponse<ModH5pactivityGetUserAttempts200Response> ModH5pactivityGetUserAttemptsWithHttpInfo(ModH5pactivityGetUserAttemptsRequest modH5pactivityGetUserAttemptsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modH5pactivityGetUserAttemptsRequest' is set
            if (modH5pactivityGetUserAttemptsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modH5pactivityGetUserAttemptsRequest' when calling ModH5pactivityApi->ModH5pactivityGetUserAttempts");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modH5pactivityGetUserAttemptsRequest;

            localVarRequestOptions.Operation = "ModH5pactivityApi.ModH5pactivityGetUserAttempts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModH5pactivityGetUserAttempts200Response>("/mod_h5pactivity_get_user_attempts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModH5pactivityGetUserAttempts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the information needed to list all enrolled user attempts. Return the information needed to list all enrolled user attempts.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModH5pactivityGetUserAttempts200Response</returns>
        public async System.Threading.Tasks.Task<ModH5pactivityGetUserAttempts200Response> ModH5pactivityGetUserAttemptsAsync(ModH5pactivityGetUserAttemptsRequest modH5pactivityGetUserAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModH5pactivityGetUserAttempts200Response> localVarResponse = await ModH5pactivityGetUserAttemptsWithHttpInfoAsync(modH5pactivityGetUserAttemptsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the information needed to list all enrolled user attempts. Return the information needed to list all enrolled user attempts.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityGetUserAttemptsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModH5pactivityGetUserAttempts200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModH5pactivityGetUserAttempts200Response>> ModH5pactivityGetUserAttemptsWithHttpInfoAsync(ModH5pactivityGetUserAttemptsRequest modH5pactivityGetUserAttemptsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modH5pactivityGetUserAttemptsRequest' is set
            if (modH5pactivityGetUserAttemptsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modH5pactivityGetUserAttemptsRequest' when calling ModH5pactivityApi->ModH5pactivityGetUserAttempts");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modH5pactivityGetUserAttemptsRequest;

            localVarRequestOptions.Operation = "ModH5pactivityApi.ModH5pactivityGetUserAttempts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModH5pactivityGetUserAttempts200Response>("/mod_h5pactivity_get_user_attempts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModH5pactivityGetUserAttempts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log that the h5pactivity was viewed. Log that the h5pactivity was viewed.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityLogReportViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModH5pactivityLogReportViewed(ModH5pactivityLogReportViewedRequest modH5pactivityLogReportViewedRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModH5pactivityLogReportViewedWithHttpInfo(modH5pactivityLogReportViewedRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Log that the h5pactivity was viewed. Log that the h5pactivity was viewed.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityLogReportViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModH5pactivityLogReportViewedWithHttpInfo(ModH5pactivityLogReportViewedRequest modH5pactivityLogReportViewedRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modH5pactivityLogReportViewedRequest' is set
            if (modH5pactivityLogReportViewedRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modH5pactivityLogReportViewedRequest' when calling ModH5pactivityApi->ModH5pactivityLogReportViewed");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modH5pactivityLogReportViewedRequest;

            localVarRequestOptions.Operation = "ModH5pactivityApi.ModH5pactivityLogReportViewed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_h5pactivity_log_report_viewed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModH5pactivityLogReportViewed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log that the h5pactivity was viewed. Log that the h5pactivity was viewed.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityLogReportViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModH5pactivityLogReportViewedAsync(ModH5pactivityLogReportViewedRequest modH5pactivityLogReportViewedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModH5pactivityLogReportViewedWithHttpInfoAsync(modH5pactivityLogReportViewedRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Log that the h5pactivity was viewed. Log that the h5pactivity was viewed.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityLogReportViewedRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModH5pactivityLogReportViewedWithHttpInfoAsync(ModH5pactivityLogReportViewedRequest modH5pactivityLogReportViewedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modH5pactivityLogReportViewedRequest' is set
            if (modH5pactivityLogReportViewedRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modH5pactivityLogReportViewedRequest' when calling ModH5pactivityApi->ModH5pactivityLogReportViewed");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modH5pactivityLogReportViewedRequest;

            localVarRequestOptions.Operation = "ModH5pactivityApi.ModH5pactivityLogReportViewed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_h5pactivity_log_report_viewed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModH5pactivityLogReportViewed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityViewH5pactivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreCalendarDeleteSubscription200Response</returns>
        public CoreCalendarDeleteSubscription200Response ModH5pactivityViewH5pactivity(ModH5pactivityViewH5pactivityRequest modH5pactivityViewH5pactivityRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = ModH5pactivityViewH5pactivityWithHttpInfo(modH5pactivityViewH5pactivityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityViewH5pactivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreCalendarDeleteSubscription200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> ModH5pactivityViewH5pactivityWithHttpInfo(ModH5pactivityViewH5pactivityRequest modH5pactivityViewH5pactivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modH5pactivityViewH5pactivityRequest' is set
            if (modH5pactivityViewH5pactivityRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modH5pactivityViewH5pactivityRequest' when calling ModH5pactivityApi->ModH5pactivityViewH5pactivity");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modH5pactivityViewH5pactivityRequest;

            localVarRequestOptions.Operation = "ModH5pactivityApi.ModH5pactivityViewH5pactivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreCalendarDeleteSubscription200Response>("/mod_h5pactivity_view_h5pactivity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModH5pactivityViewH5pactivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityViewH5pactivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreCalendarDeleteSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CoreCalendarDeleteSubscription200Response> ModH5pactivityViewH5pactivityAsync(ModH5pactivityViewH5pactivityRequest modH5pactivityViewH5pactivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResponse = await ModH5pactivityViewH5pactivityWithHttpInfoAsync(modH5pactivityViewH5pactivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger the course module viewed event and update the module completion status. Trigger the course module viewed event and update the module completion status.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modH5pactivityViewH5pactivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreCalendarDeleteSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreCalendarDeleteSubscription200Response>> ModH5pactivityViewH5pactivityWithHttpInfoAsync(ModH5pactivityViewH5pactivityRequest modH5pactivityViewH5pactivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modH5pactivityViewH5pactivityRequest' is set
            if (modH5pactivityViewH5pactivityRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modH5pactivityViewH5pactivityRequest' when calling ModH5pactivityApi->ModH5pactivityViewH5pactivity");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modH5pactivityViewH5pactivityRequest;

            localVarRequestOptions.Operation = "ModH5pactivityApi.ModH5pactivityViewH5pactivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreCalendarDeleteSubscription200Response>("/mod_h5pactivity_view_h5pactivity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModH5pactivityViewH5pactivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
