/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MoodleClient.Client;
using MoodleClient.Model;

namespace MoodleClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockIomadCompanyAdminApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Allocate course licenses to a user
        /// </summary>
        /// <remarks>
        /// Allocate course licenses to a user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAllocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminAllocateLicenses(BlockIomadCompanyAdminAllocateLicensesRequest blockIomadCompanyAdminAllocateLicensesRequest, int operationIndex = 0);

        /// <summary>
        /// Allocate course licenses to a user
        /// </summary>
        /// <remarks>
        /// Allocate course licenses to a user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAllocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminAllocateLicensesWithHttpInfo(BlockIomadCompanyAdminAllocateLicensesRequest blockIomadCompanyAdminAllocateLicensesRequest, int operationIndex = 0);
        /// <summary>
        /// Assign a course to a company
        /// </summary>
        /// <remarks>
        /// Assign a course to a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminAssignCourses(BlockIomadCompanyAdminAssignCoursesRequest blockIomadCompanyAdminAssignCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Assign a course to a company
        /// </summary>
        /// <remarks>
        /// Assign a course to a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminAssignCoursesWithHttpInfo(BlockIomadCompanyAdminAssignCoursesRequest blockIomadCompanyAdminAssignCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Assign users to a company
        /// </summary>
        /// <remarks>
        /// Assign users to a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminAssignUsers200Response</returns>
        BlockIomadCompanyAdminAssignUsers200Response BlockIomadCompanyAdminAssignUsers(BlockIomadCompanyAdminAssignUsersRequest blockIomadCompanyAdminAssignUsersRequest, int operationIndex = 0);

        /// <summary>
        /// Assign users to a company
        /// </summary>
        /// <remarks>
        /// Assign users to a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminAssignUsers200Response</returns>
        ApiResponse<BlockIomadCompanyAdminAssignUsers200Response> BlockIomadCompanyAdminAssignUsersWithHttpInfo(BlockIomadCompanyAdminAssignUsersRequest blockIomadCompanyAdminAssignUsersRequest, int operationIndex = 0);
        /// <summary>
        /// Delete Iomad capabilities template
        /// </summary>
        /// <remarks>
        /// Delete Iomad capabilities template
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCapabilityDeleteTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminCapabilityDeleteTemplate(BlockIomadCompanyAdminCapabilityDeleteTemplateRequest blockIomadCompanyAdminCapabilityDeleteTemplateRequest, int operationIndex = 0);

        /// <summary>
        /// Delete Iomad capabilities template
        /// </summary>
        /// <remarks>
        /// Delete Iomad capabilities template
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCapabilityDeleteTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminCapabilityDeleteTemplateWithHttpInfo(BlockIomadCompanyAdminCapabilityDeleteTemplateRequest blockIomadCompanyAdminCapabilityDeleteTemplateRequest, int operationIndex = 0);
        /// <summary>
        /// Check SSO token
        /// </summary>
        /// <remarks>
        /// Check SSO token
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCheckTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminCheckToken200Response</returns>
        BlockIomadCompanyAdminCheckToken200Response BlockIomadCompanyAdminCheckToken(BlockIomadCompanyAdminCheckTokenRequest blockIomadCompanyAdminCheckTokenRequest, int operationIndex = 0);

        /// <summary>
        /// Check SSO token
        /// </summary>
        /// <remarks>
        /// Check SSO token
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCheckTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminCheckToken200Response</returns>
        ApiResponse<BlockIomadCompanyAdminCheckToken200Response> BlockIomadCompanyAdminCheckTokenWithHttpInfo(BlockIomadCompanyAdminCheckTokenRequest blockIomadCompanyAdminCheckTokenRequest, int operationIndex = 0);
        /// <summary>
        /// Create new Iomad companies
        /// </summary>
        /// <remarks>
        /// Create new Iomad companies
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminCreateCompanies(BlockIomadCompanyAdminCreateCompaniesRequest blockIomadCompanyAdminCreateCompaniesRequest, int operationIndex = 0);

        /// <summary>
        /// Create new Iomad companies
        /// </summary>
        /// <remarks>
        /// Create new Iomad companies
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminCreateCompaniesWithHttpInfo(BlockIomadCompanyAdminCreateCompaniesRequest blockIomadCompanyAdminCreateCompaniesRequest, int operationIndex = 0);
        /// <summary>
        /// Create company licenses
        /// </summary>
        /// <remarks>
        /// Create company licenses
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminCreateLicenses(BlockIomadCompanyAdminCreateLicensesRequest blockIomadCompanyAdminCreateLicensesRequest, int operationIndex = 0);

        /// <summary>
        /// Create company licenses
        /// </summary>
        /// <remarks>
        /// Create company licenses
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminCreateLicensesWithHttpInfo(BlockIomadCompanyAdminCreateLicensesRequest blockIomadCompanyAdminCreateLicensesRequest, int operationIndex = 0);
        /// <summary>
        /// Delete company licenses
        /// </summary>
        /// <remarks>
        /// Delete company licenses
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminDeleteLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminDeleteLicenses(BlockIomadCompanyAdminDeleteLicensesRequest blockIomadCompanyAdminDeleteLicensesRequest, int operationIndex = 0);

        /// <summary>
        /// Delete company licenses
        /// </summary>
        /// <remarks>
        /// Delete company licenses
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminDeleteLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminDeleteLicensesWithHttpInfo(BlockIomadCompanyAdminDeleteLicensesRequest blockIomadCompanyAdminDeleteLicensesRequest, int operationIndex = 0);
        /// <summary>
        /// Edit Iomad companies
        /// </summary>
        /// <remarks>
        /// Edit Iomad companies
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminEditCompanies(BlockIomadCompanyAdminEditCompaniesRequest blockIomadCompanyAdminEditCompaniesRequest, int operationIndex = 0);

        /// <summary>
        /// Edit Iomad companies
        /// </summary>
        /// <remarks>
        /// Edit Iomad companies
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminEditCompaniesWithHttpInfo(BlockIomadCompanyAdminEditCompaniesRequest blockIomadCompanyAdminEditCompaniesRequest, int operationIndex = 0);
        /// <summary>
        /// Edit company license settings
        /// </summary>
        /// <remarks>
        /// Edit company license settings
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminEditLicenses(BlockIomadCompanyAdminEditLicensesRequest blockIomadCompanyAdminEditLicensesRequest, int operationIndex = 0);

        /// <summary>
        /// Edit company license settings
        /// </summary>
        /// <remarks>
        /// Edit company license settings
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminEditLicensesWithHttpInfo(BlockIomadCompanyAdminEditLicensesRequest blockIomadCompanyAdminEditLicensesRequest, int operationIndex = 0);
        /// <summary>
        /// Assign users onto courses
        /// </summary>
        /// <remarks>
        /// Assign users onto courses
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEnrolUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminEnrolUsers(BlockIomadCompanyAdminEnrolUsersRequest blockIomadCompanyAdminEnrolUsersRequest, int operationIndex = 0);

        /// <summary>
        /// Assign users onto courses
        /// </summary>
        /// <remarks>
        /// Assign users onto courses
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEnrolUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminEnrolUsersWithHttpInfo(BlockIomadCompanyAdminEnrolUsersRequest blockIomadCompanyAdminEnrolUsersRequest, int operationIndex = 0);
        /// <summary>
        /// Get all Iomad companies
        /// </summary>
        /// <remarks>
        /// Get all Iomad companies
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminGetCompanies200Response</returns>
        BlockIomadCompanyAdminGetCompanies200Response BlockIomadCompanyAdminGetCompanies(BlockIomadCompanyAdminGetCompaniesRequest blockIomadCompanyAdminGetCompaniesRequest, int operationIndex = 0);

        /// <summary>
        /// Get all Iomad companies
        /// </summary>
        /// <remarks>
        /// Get all Iomad companies
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminGetCompanies200Response</returns>
        ApiResponse<BlockIomadCompanyAdminGetCompanies200Response> BlockIomadCompanyAdminGetCompaniesWithHttpInfo(BlockIomadCompanyAdminGetCompaniesRequest blockIomadCompanyAdminGetCompaniesRequest, int operationIndex = 0);
        /// <summary>
        /// Get Iomad company course allocations
        /// </summary>
        /// <remarks>
        /// Get Iomad company course allocations
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompanyCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminGetCompanyCourses200Response</returns>
        BlockIomadCompanyAdminGetCompanyCourses200Response BlockIomadCompanyAdminGetCompanyCourses(BlockIomadCompanyAdminGetCompanyCoursesRequest blockIomadCompanyAdminGetCompanyCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Get Iomad company course allocations
        /// </summary>
        /// <remarks>
        /// Get Iomad company course allocations
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompanyCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminGetCompanyCourses200Response</returns>
        ApiResponse<BlockIomadCompanyAdminGetCompanyCourses200Response> BlockIomadCompanyAdminGetCompanyCoursesWithHttpInfo(BlockIomadCompanyAdminGetCompanyCoursesRequest blockIomadCompanyAdminGetCompanyCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Get Iomad course settings
        /// </summary>
        /// <remarks>
        /// Get Iomad course settings
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCourseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminGetCourseInfo(BlockIomadCompanyAdminGetCourseInfoRequest blockIomadCompanyAdminGetCourseInfoRequest, int operationIndex = 0);

        /// <summary>
        /// Get Iomad course settings
        /// </summary>
        /// <remarks>
        /// Get Iomad course settings
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCourseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminGetCourseInfoWithHttpInfo(BlockIomadCompanyAdminGetCourseInfoRequest blockIomadCompanyAdminGetCourseInfoRequest, int operationIndex = 0);
        /// <summary>
        /// Get users within a department
        /// </summary>
        /// <remarks>
        /// Get users within a department
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminGetDepartmentUsers200Response</returns>
        BlockIomadCompanyAdminGetDepartmentUsers200Response BlockIomadCompanyAdminGetDepartmentUsers(BlockIomadCompanyAdminGetDepartmentUsersRequest blockIomadCompanyAdminGetDepartmentUsersRequest, int operationIndex = 0);

        /// <summary>
        /// Get users within a department
        /// </summary>
        /// <remarks>
        /// Get users within a department
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminGetDepartmentUsers200Response</returns>
        ApiResponse<BlockIomadCompanyAdminGetDepartmentUsers200Response> BlockIomadCompanyAdminGetDepartmentUsersWithHttpInfo(BlockIomadCompanyAdminGetDepartmentUsersRequest blockIomadCompanyAdminGetDepartmentUsersRequest, int operationIndex = 0);
        /// <summary>
        /// Get all company departments
        /// </summary>
        /// <remarks>
        /// Get all company departments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminGetDepartments200Response</returns>
        BlockIomadCompanyAdminGetDepartments200Response BlockIomadCompanyAdminGetDepartments(BlockIomadCompanyAdminGetDepartmentsRequest blockIomadCompanyAdminGetDepartmentsRequest, int operationIndex = 0);

        /// <summary>
        /// Get all company departments
        /// </summary>
        /// <remarks>
        /// Get all company departments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminGetDepartments200Response</returns>
        ApiResponse<BlockIomadCompanyAdminGetDepartments200Response> BlockIomadCompanyAdminGetDepartmentsWithHttpInfo(BlockIomadCompanyAdminGetDepartmentsRequest blockIomadCompanyAdminGetDepartmentsRequest, int operationIndex = 0);
        /// <summary>
        /// Get licence data give the ID
        /// </summary>
        /// <remarks>
        /// Get licence data give the ID
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseFromIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminGetLicenseFromId200Response</returns>
        BlockIomadCompanyAdminGetLicenseFromId200Response BlockIomadCompanyAdminGetLicenseFromId(BlockIomadCompanyAdminGetLicenseFromIdRequest blockIomadCompanyAdminGetLicenseFromIdRequest, int operationIndex = 0);

        /// <summary>
        /// Get licence data give the ID
        /// </summary>
        /// <remarks>
        /// Get licence data give the ID
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseFromIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminGetLicenseFromId200Response</returns>
        ApiResponse<BlockIomadCompanyAdminGetLicenseFromId200Response> BlockIomadCompanyAdminGetLicenseFromIdWithHttpInfo(BlockIomadCompanyAdminGetLicenseFromIdRequest blockIomadCompanyAdminGetLicenseFromIdRequest, int operationIndex = 0);
        /// <summary>
        /// Get company license information
        /// </summary>
        /// <remarks>
        /// Get company license information
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminGetLicenseInfo200Response</returns>
        BlockIomadCompanyAdminGetLicenseInfo200Response BlockIomadCompanyAdminGetLicenseInfo(BlockIomadCompanyAdminGetLicenseInfoRequest blockIomadCompanyAdminGetLicenseInfoRequest, int operationIndex = 0);

        /// <summary>
        /// Get company license information
        /// </summary>
        /// <remarks>
        /// Get company license information
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminGetLicenseInfo200Response</returns>
        ApiResponse<BlockIomadCompanyAdminGetLicenseInfo200Response> BlockIomadCompanyAdminGetLicenseInfoWithHttpInfo(BlockIomadCompanyAdminGetLicenseInfoRequest blockIomadCompanyAdminGetLicenseInfoRequest, int operationIndex = 0);
        /// <summary>
        /// Move users between departments
        /// </summary>
        /// <remarks>
        /// Move users between departments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminMoveUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminMoveUsers(BlockIomadCompanyAdminMoveUsersRequest blockIomadCompanyAdminMoveUsersRequest, int operationIndex = 0);

        /// <summary>
        /// Move users between departments
        /// </summary>
        /// <remarks>
        /// Move users between departments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminMoveUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminMoveUsersWithHttpInfo(BlockIomadCompanyAdminMoveUsersRequest blockIomadCompanyAdminMoveUsersRequest, int operationIndex = 0);
        /// <summary>
        /// set/reset Iomad capability
        /// </summary>
        /// <remarks>
        /// set/reset Iomad capability
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminRestrictCapabilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminRestrictCapability(BlockIomadCompanyAdminRestrictCapabilityRequest blockIomadCompanyAdminRestrictCapabilityRequest, int operationIndex = 0);

        /// <summary>
        /// set/reset Iomad capability
        /// </summary>
        /// <remarks>
        /// set/reset Iomad capability
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminRestrictCapabilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminRestrictCapabilityWithHttpInfo(BlockIomadCompanyAdminRestrictCapabilityRequest blockIomadCompanyAdminRestrictCapabilityRequest, int operationIndex = 0);
        /// <summary>
        /// Call update users to sync to external system
        /// </summary>
        /// <remarks>
        /// Call update users to sync to external system
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminSyncUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminSyncUsers200Response</returns>
        BlockIomadCompanyAdminSyncUsers200Response BlockIomadCompanyAdminSyncUsers(BlockIomadCompanyAdminSyncUsersRequest blockIomadCompanyAdminSyncUsersRequest, int operationIndex = 0);

        /// <summary>
        /// Call update users to sync to external system
        /// </summary>
        /// <remarks>
        /// Call update users to sync to external system
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminSyncUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminSyncUsers200Response</returns>
        ApiResponse<BlockIomadCompanyAdminSyncUsers200Response> BlockIomadCompanyAdminSyncUsersWithHttpInfo(BlockIomadCompanyAdminSyncUsersRequest blockIomadCompanyAdminSyncUsersRequest, int operationIndex = 0);
        /// <summary>
        /// Remove course licenses from users
        /// </summary>
        /// <remarks>
        /// Remove course licenses from users
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnallocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminUnallocateLicenses(BlockIomadCompanyAdminUnallocateLicensesRequest blockIomadCompanyAdminUnallocateLicensesRequest, int operationIndex = 0);

        /// <summary>
        /// Remove course licenses from users
        /// </summary>
        /// <remarks>
        /// Remove course licenses from users
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnallocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminUnallocateLicensesWithHttpInfo(BlockIomadCompanyAdminUnallocateLicensesRequest blockIomadCompanyAdminUnallocateLicensesRequest, int operationIndex = 0);
        /// <summary>
        /// Unassign a course from a company
        /// </summary>
        /// <remarks>
        /// Unassign a course from a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminUnassignCourses(BlockIomadCompanyAdminUnassignCoursesRequest blockIomadCompanyAdminUnassignCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Unassign a course from a company
        /// </summary>
        /// <remarks>
        /// Unassign a course from a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminUnassignCoursesWithHttpInfo(BlockIomadCompanyAdminUnassignCoursesRequest blockIomadCompanyAdminUnassignCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Unassign users from a company
        /// </summary>
        /// <remarks>
        /// Unassign users from a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminUnassignUsers(BlockIomadCompanyAdminUnassignUsersRequest blockIomadCompanyAdminUnassignUsersRequest, int operationIndex = 0);

        /// <summary>
        /// Unassign users from a company
        /// </summary>
        /// <remarks>
        /// Unassign users from a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminUnassignUsersWithHttpInfo(BlockIomadCompanyAdminUnassignUsersRequest blockIomadCompanyAdminUnassignUsersRequest, int operationIndex = 0);
        /// <summary>
        /// Update Iomad course settings
        /// </summary>
        /// <remarks>
        /// Update Iomad course settings
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUpdateCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object BlockIomadCompanyAdminUpdateCourses(BlockIomadCompanyAdminUpdateCoursesRequest blockIomadCompanyAdminUpdateCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Update Iomad course settings
        /// </summary>
        /// <remarks>
        /// Update Iomad course settings
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUpdateCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockIomadCompanyAdminUpdateCoursesWithHttpInfo(BlockIomadCompanyAdminUpdateCoursesRequest blockIomadCompanyAdminUpdateCoursesRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockIomadCompanyAdminApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Allocate course licenses to a user
        /// </summary>
        /// <remarks>
        /// Allocate course licenses to a user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAllocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminAllocateLicensesAsync(BlockIomadCompanyAdminAllocateLicensesRequest blockIomadCompanyAdminAllocateLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Allocate course licenses to a user
        /// </summary>
        /// <remarks>
        /// Allocate course licenses to a user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAllocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminAllocateLicensesWithHttpInfoAsync(BlockIomadCompanyAdminAllocateLicensesRequest blockIomadCompanyAdminAllocateLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Assign a course to a company
        /// </summary>
        /// <remarks>
        /// Assign a course to a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminAssignCoursesAsync(BlockIomadCompanyAdminAssignCoursesRequest blockIomadCompanyAdminAssignCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assign a course to a company
        /// </summary>
        /// <remarks>
        /// Assign a course to a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminAssignCoursesWithHttpInfoAsync(BlockIomadCompanyAdminAssignCoursesRequest blockIomadCompanyAdminAssignCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Assign users to a company
        /// </summary>
        /// <remarks>
        /// Assign users to a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminAssignUsers200Response</returns>
        System.Threading.Tasks.Task<BlockIomadCompanyAdminAssignUsers200Response> BlockIomadCompanyAdminAssignUsersAsync(BlockIomadCompanyAdminAssignUsersRequest blockIomadCompanyAdminAssignUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assign users to a company
        /// </summary>
        /// <remarks>
        /// Assign users to a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminAssignUsers200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockIomadCompanyAdminAssignUsers200Response>> BlockIomadCompanyAdminAssignUsersWithHttpInfoAsync(BlockIomadCompanyAdminAssignUsersRequest blockIomadCompanyAdminAssignUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Iomad capabilities template
        /// </summary>
        /// <remarks>
        /// Delete Iomad capabilities template
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCapabilityDeleteTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminCapabilityDeleteTemplateAsync(BlockIomadCompanyAdminCapabilityDeleteTemplateRequest blockIomadCompanyAdminCapabilityDeleteTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Iomad capabilities template
        /// </summary>
        /// <remarks>
        /// Delete Iomad capabilities template
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCapabilityDeleteTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminCapabilityDeleteTemplateWithHttpInfoAsync(BlockIomadCompanyAdminCapabilityDeleteTemplateRequest blockIomadCompanyAdminCapabilityDeleteTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check SSO token
        /// </summary>
        /// <remarks>
        /// Check SSO token
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCheckTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminCheckToken200Response</returns>
        System.Threading.Tasks.Task<BlockIomadCompanyAdminCheckToken200Response> BlockIomadCompanyAdminCheckTokenAsync(BlockIomadCompanyAdminCheckTokenRequest blockIomadCompanyAdminCheckTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check SSO token
        /// </summary>
        /// <remarks>
        /// Check SSO token
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCheckTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminCheckToken200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockIomadCompanyAdminCheckToken200Response>> BlockIomadCompanyAdminCheckTokenWithHttpInfoAsync(BlockIomadCompanyAdminCheckTokenRequest blockIomadCompanyAdminCheckTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create new Iomad companies
        /// </summary>
        /// <remarks>
        /// Create new Iomad companies
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminCreateCompaniesAsync(BlockIomadCompanyAdminCreateCompaniesRequest blockIomadCompanyAdminCreateCompaniesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new Iomad companies
        /// </summary>
        /// <remarks>
        /// Create new Iomad companies
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminCreateCompaniesWithHttpInfoAsync(BlockIomadCompanyAdminCreateCompaniesRequest blockIomadCompanyAdminCreateCompaniesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create company licenses
        /// </summary>
        /// <remarks>
        /// Create company licenses
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminCreateLicensesAsync(BlockIomadCompanyAdminCreateLicensesRequest blockIomadCompanyAdminCreateLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create company licenses
        /// </summary>
        /// <remarks>
        /// Create company licenses
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminCreateLicensesWithHttpInfoAsync(BlockIomadCompanyAdminCreateLicensesRequest blockIomadCompanyAdminCreateLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete company licenses
        /// </summary>
        /// <remarks>
        /// Delete company licenses
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminDeleteLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminDeleteLicensesAsync(BlockIomadCompanyAdminDeleteLicensesRequest blockIomadCompanyAdminDeleteLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete company licenses
        /// </summary>
        /// <remarks>
        /// Delete company licenses
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminDeleteLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminDeleteLicensesWithHttpInfoAsync(BlockIomadCompanyAdminDeleteLicensesRequest blockIomadCompanyAdminDeleteLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit Iomad companies
        /// </summary>
        /// <remarks>
        /// Edit Iomad companies
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminEditCompaniesAsync(BlockIomadCompanyAdminEditCompaniesRequest blockIomadCompanyAdminEditCompaniesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit Iomad companies
        /// </summary>
        /// <remarks>
        /// Edit Iomad companies
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminEditCompaniesWithHttpInfoAsync(BlockIomadCompanyAdminEditCompaniesRequest blockIomadCompanyAdminEditCompaniesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit company license settings
        /// </summary>
        /// <remarks>
        /// Edit company license settings
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminEditLicensesAsync(BlockIomadCompanyAdminEditLicensesRequest blockIomadCompanyAdminEditLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit company license settings
        /// </summary>
        /// <remarks>
        /// Edit company license settings
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminEditLicensesWithHttpInfoAsync(BlockIomadCompanyAdminEditLicensesRequest blockIomadCompanyAdminEditLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Assign users onto courses
        /// </summary>
        /// <remarks>
        /// Assign users onto courses
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEnrolUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminEnrolUsersAsync(BlockIomadCompanyAdminEnrolUsersRequest blockIomadCompanyAdminEnrolUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Assign users onto courses
        /// </summary>
        /// <remarks>
        /// Assign users onto courses
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEnrolUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminEnrolUsersWithHttpInfoAsync(BlockIomadCompanyAdminEnrolUsersRequest blockIomadCompanyAdminEnrolUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all Iomad companies
        /// </summary>
        /// <remarks>
        /// Get all Iomad companies
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminGetCompanies200Response</returns>
        System.Threading.Tasks.Task<BlockIomadCompanyAdminGetCompanies200Response> BlockIomadCompanyAdminGetCompaniesAsync(BlockIomadCompanyAdminGetCompaniesRequest blockIomadCompanyAdminGetCompaniesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all Iomad companies
        /// </summary>
        /// <remarks>
        /// Get all Iomad companies
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminGetCompanies200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockIomadCompanyAdminGetCompanies200Response>> BlockIomadCompanyAdminGetCompaniesWithHttpInfoAsync(BlockIomadCompanyAdminGetCompaniesRequest blockIomadCompanyAdminGetCompaniesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Iomad company course allocations
        /// </summary>
        /// <remarks>
        /// Get Iomad company course allocations
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompanyCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminGetCompanyCourses200Response</returns>
        System.Threading.Tasks.Task<BlockIomadCompanyAdminGetCompanyCourses200Response> BlockIomadCompanyAdminGetCompanyCoursesAsync(BlockIomadCompanyAdminGetCompanyCoursesRequest blockIomadCompanyAdminGetCompanyCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Iomad company course allocations
        /// </summary>
        /// <remarks>
        /// Get Iomad company course allocations
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompanyCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminGetCompanyCourses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockIomadCompanyAdminGetCompanyCourses200Response>> BlockIomadCompanyAdminGetCompanyCoursesWithHttpInfoAsync(BlockIomadCompanyAdminGetCompanyCoursesRequest blockIomadCompanyAdminGetCompanyCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Iomad course settings
        /// </summary>
        /// <remarks>
        /// Get Iomad course settings
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCourseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminGetCourseInfoAsync(BlockIomadCompanyAdminGetCourseInfoRequest blockIomadCompanyAdminGetCourseInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Iomad course settings
        /// </summary>
        /// <remarks>
        /// Get Iomad course settings
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCourseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminGetCourseInfoWithHttpInfoAsync(BlockIomadCompanyAdminGetCourseInfoRequest blockIomadCompanyAdminGetCourseInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get users within a department
        /// </summary>
        /// <remarks>
        /// Get users within a department
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminGetDepartmentUsers200Response</returns>
        System.Threading.Tasks.Task<BlockIomadCompanyAdminGetDepartmentUsers200Response> BlockIomadCompanyAdminGetDepartmentUsersAsync(BlockIomadCompanyAdminGetDepartmentUsersRequest blockIomadCompanyAdminGetDepartmentUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get users within a department
        /// </summary>
        /// <remarks>
        /// Get users within a department
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminGetDepartmentUsers200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockIomadCompanyAdminGetDepartmentUsers200Response>> BlockIomadCompanyAdminGetDepartmentUsersWithHttpInfoAsync(BlockIomadCompanyAdminGetDepartmentUsersRequest blockIomadCompanyAdminGetDepartmentUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all company departments
        /// </summary>
        /// <remarks>
        /// Get all company departments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminGetDepartments200Response</returns>
        System.Threading.Tasks.Task<BlockIomadCompanyAdminGetDepartments200Response> BlockIomadCompanyAdminGetDepartmentsAsync(BlockIomadCompanyAdminGetDepartmentsRequest blockIomadCompanyAdminGetDepartmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all company departments
        /// </summary>
        /// <remarks>
        /// Get all company departments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminGetDepartments200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockIomadCompanyAdminGetDepartments200Response>> BlockIomadCompanyAdminGetDepartmentsWithHttpInfoAsync(BlockIomadCompanyAdminGetDepartmentsRequest blockIomadCompanyAdminGetDepartmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get licence data give the ID
        /// </summary>
        /// <remarks>
        /// Get licence data give the ID
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseFromIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminGetLicenseFromId200Response</returns>
        System.Threading.Tasks.Task<BlockIomadCompanyAdminGetLicenseFromId200Response> BlockIomadCompanyAdminGetLicenseFromIdAsync(BlockIomadCompanyAdminGetLicenseFromIdRequest blockIomadCompanyAdminGetLicenseFromIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get licence data give the ID
        /// </summary>
        /// <remarks>
        /// Get licence data give the ID
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseFromIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminGetLicenseFromId200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockIomadCompanyAdminGetLicenseFromId200Response>> BlockIomadCompanyAdminGetLicenseFromIdWithHttpInfoAsync(BlockIomadCompanyAdminGetLicenseFromIdRequest blockIomadCompanyAdminGetLicenseFromIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get company license information
        /// </summary>
        /// <remarks>
        /// Get company license information
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminGetLicenseInfo200Response</returns>
        System.Threading.Tasks.Task<BlockIomadCompanyAdminGetLicenseInfo200Response> BlockIomadCompanyAdminGetLicenseInfoAsync(BlockIomadCompanyAdminGetLicenseInfoRequest blockIomadCompanyAdminGetLicenseInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get company license information
        /// </summary>
        /// <remarks>
        /// Get company license information
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminGetLicenseInfo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockIomadCompanyAdminGetLicenseInfo200Response>> BlockIomadCompanyAdminGetLicenseInfoWithHttpInfoAsync(BlockIomadCompanyAdminGetLicenseInfoRequest blockIomadCompanyAdminGetLicenseInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Move users between departments
        /// </summary>
        /// <remarks>
        /// Move users between departments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminMoveUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminMoveUsersAsync(BlockIomadCompanyAdminMoveUsersRequest blockIomadCompanyAdminMoveUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Move users between departments
        /// </summary>
        /// <remarks>
        /// Move users between departments
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminMoveUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminMoveUsersWithHttpInfoAsync(BlockIomadCompanyAdminMoveUsersRequest blockIomadCompanyAdminMoveUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// set/reset Iomad capability
        /// </summary>
        /// <remarks>
        /// set/reset Iomad capability
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminRestrictCapabilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminRestrictCapabilityAsync(BlockIomadCompanyAdminRestrictCapabilityRequest blockIomadCompanyAdminRestrictCapabilityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// set/reset Iomad capability
        /// </summary>
        /// <remarks>
        /// set/reset Iomad capability
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminRestrictCapabilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminRestrictCapabilityWithHttpInfoAsync(BlockIomadCompanyAdminRestrictCapabilityRequest blockIomadCompanyAdminRestrictCapabilityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Call update users to sync to external system
        /// </summary>
        /// <remarks>
        /// Call update users to sync to external system
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminSyncUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminSyncUsers200Response</returns>
        System.Threading.Tasks.Task<BlockIomadCompanyAdminSyncUsers200Response> BlockIomadCompanyAdminSyncUsersAsync(BlockIomadCompanyAdminSyncUsersRequest blockIomadCompanyAdminSyncUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Call update users to sync to external system
        /// </summary>
        /// <remarks>
        /// Call update users to sync to external system
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminSyncUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminSyncUsers200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockIomadCompanyAdminSyncUsers200Response>> BlockIomadCompanyAdminSyncUsersWithHttpInfoAsync(BlockIomadCompanyAdminSyncUsersRequest blockIomadCompanyAdminSyncUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove course licenses from users
        /// </summary>
        /// <remarks>
        /// Remove course licenses from users
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnallocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminUnallocateLicensesAsync(BlockIomadCompanyAdminUnallocateLicensesRequest blockIomadCompanyAdminUnallocateLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove course licenses from users
        /// </summary>
        /// <remarks>
        /// Remove course licenses from users
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnallocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminUnallocateLicensesWithHttpInfoAsync(BlockIomadCompanyAdminUnallocateLicensesRequest blockIomadCompanyAdminUnallocateLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unassign a course from a company
        /// </summary>
        /// <remarks>
        /// Unassign a course from a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminUnassignCoursesAsync(BlockIomadCompanyAdminUnassignCoursesRequest blockIomadCompanyAdminUnassignCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unassign a course from a company
        /// </summary>
        /// <remarks>
        /// Unassign a course from a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminUnassignCoursesWithHttpInfoAsync(BlockIomadCompanyAdminUnassignCoursesRequest blockIomadCompanyAdminUnassignCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unassign users from a company
        /// </summary>
        /// <remarks>
        /// Unassign users from a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminUnassignUsersAsync(BlockIomadCompanyAdminUnassignUsersRequest blockIomadCompanyAdminUnassignUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unassign users from a company
        /// </summary>
        /// <remarks>
        /// Unassign users from a company
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminUnassignUsersWithHttpInfoAsync(BlockIomadCompanyAdminUnassignUsersRequest blockIomadCompanyAdminUnassignUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Iomad course settings
        /// </summary>
        /// <remarks>
        /// Update Iomad course settings
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUpdateCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminUpdateCoursesAsync(BlockIomadCompanyAdminUpdateCoursesRequest blockIomadCompanyAdminUpdateCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Iomad course settings
        /// </summary>
        /// <remarks>
        /// Update Iomad course settings
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUpdateCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockIomadCompanyAdminUpdateCoursesWithHttpInfoAsync(BlockIomadCompanyAdminUpdateCoursesRequest blockIomadCompanyAdminUpdateCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockIomadCompanyAdminApi : IBlockIomadCompanyAdminApiSync, IBlockIomadCompanyAdminApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BlockIomadCompanyAdminApi : IBlockIomadCompanyAdminApi
    {
        private MoodleClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockIomadCompanyAdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlockIomadCompanyAdminApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockIomadCompanyAdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlockIomadCompanyAdminApi(string basePath)
        {
            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                new MoodleClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockIomadCompanyAdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BlockIomadCompanyAdminApi(MoodleClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockIomadCompanyAdminApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BlockIomadCompanyAdminApi(MoodleClient.Client.ISynchronousClient client, MoodleClient.Client.IAsynchronousClient asyncClient, MoodleClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MoodleClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MoodleClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MoodleClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MoodleClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Allocate course licenses to a user Allocate course licenses to a user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAllocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminAllocateLicenses(BlockIomadCompanyAdminAllocateLicensesRequest blockIomadCompanyAdminAllocateLicensesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminAllocateLicensesWithHttpInfo(blockIomadCompanyAdminAllocateLicensesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allocate course licenses to a user Allocate course licenses to a user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAllocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminAllocateLicensesWithHttpInfo(BlockIomadCompanyAdminAllocateLicensesRequest blockIomadCompanyAdminAllocateLicensesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminAllocateLicensesRequest' is set
            if (blockIomadCompanyAdminAllocateLicensesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminAllocateLicensesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminAllocateLicenses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminAllocateLicensesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminAllocateLicenses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_allocate_licenses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminAllocateLicenses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allocate course licenses to a user Allocate course licenses to a user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAllocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminAllocateLicensesAsync(BlockIomadCompanyAdminAllocateLicensesRequest blockIomadCompanyAdminAllocateLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminAllocateLicensesWithHttpInfoAsync(blockIomadCompanyAdminAllocateLicensesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allocate course licenses to a user Allocate course licenses to a user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAllocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminAllocateLicensesWithHttpInfoAsync(BlockIomadCompanyAdminAllocateLicensesRequest blockIomadCompanyAdminAllocateLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminAllocateLicensesRequest' is set
            if (blockIomadCompanyAdminAllocateLicensesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminAllocateLicensesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminAllocateLicenses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminAllocateLicensesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminAllocateLicenses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_allocate_licenses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminAllocateLicenses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a course to a company Assign a course to a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminAssignCourses(BlockIomadCompanyAdminAssignCoursesRequest blockIomadCompanyAdminAssignCoursesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminAssignCoursesWithHttpInfo(blockIomadCompanyAdminAssignCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a course to a company Assign a course to a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminAssignCoursesWithHttpInfo(BlockIomadCompanyAdminAssignCoursesRequest blockIomadCompanyAdminAssignCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminAssignCoursesRequest' is set
            if (blockIomadCompanyAdminAssignCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminAssignCoursesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminAssignCourses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminAssignCoursesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminAssignCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_assign_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminAssignCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a course to a company Assign a course to a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminAssignCoursesAsync(BlockIomadCompanyAdminAssignCoursesRequest blockIomadCompanyAdminAssignCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminAssignCoursesWithHttpInfoAsync(blockIomadCompanyAdminAssignCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a course to a company Assign a course to a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminAssignCoursesWithHttpInfoAsync(BlockIomadCompanyAdminAssignCoursesRequest blockIomadCompanyAdminAssignCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminAssignCoursesRequest' is set
            if (blockIomadCompanyAdminAssignCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminAssignCoursesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminAssignCourses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminAssignCoursesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminAssignCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_assign_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminAssignCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign users to a company Assign users to a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminAssignUsers200Response</returns>
        public BlockIomadCompanyAdminAssignUsers200Response BlockIomadCompanyAdminAssignUsers(BlockIomadCompanyAdminAssignUsersRequest blockIomadCompanyAdminAssignUsersRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminAssignUsers200Response> localVarResponse = BlockIomadCompanyAdminAssignUsersWithHttpInfo(blockIomadCompanyAdminAssignUsersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign users to a company Assign users to a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminAssignUsers200Response</returns>
        public MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminAssignUsers200Response> BlockIomadCompanyAdminAssignUsersWithHttpInfo(BlockIomadCompanyAdminAssignUsersRequest blockIomadCompanyAdminAssignUsersRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminAssignUsersRequest' is set
            if (blockIomadCompanyAdminAssignUsersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminAssignUsersRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminAssignUsers");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminAssignUsersRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminAssignUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BlockIomadCompanyAdminAssignUsers200Response>("/block_iomad_company_admin_assign_users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminAssignUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign users to a company Assign users to a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminAssignUsers200Response</returns>
        public async System.Threading.Tasks.Task<BlockIomadCompanyAdminAssignUsers200Response> BlockIomadCompanyAdminAssignUsersAsync(BlockIomadCompanyAdminAssignUsersRequest blockIomadCompanyAdminAssignUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminAssignUsers200Response> localVarResponse = await BlockIomadCompanyAdminAssignUsersWithHttpInfoAsync(blockIomadCompanyAdminAssignUsersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign users to a company Assign users to a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminAssignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminAssignUsers200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminAssignUsers200Response>> BlockIomadCompanyAdminAssignUsersWithHttpInfoAsync(BlockIomadCompanyAdminAssignUsersRequest blockIomadCompanyAdminAssignUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminAssignUsersRequest' is set
            if (blockIomadCompanyAdminAssignUsersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminAssignUsersRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminAssignUsers");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminAssignUsersRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminAssignUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlockIomadCompanyAdminAssignUsers200Response>("/block_iomad_company_admin_assign_users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminAssignUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Iomad capabilities template Delete Iomad capabilities template
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCapabilityDeleteTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminCapabilityDeleteTemplate(BlockIomadCompanyAdminCapabilityDeleteTemplateRequest blockIomadCompanyAdminCapabilityDeleteTemplateRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminCapabilityDeleteTemplateWithHttpInfo(blockIomadCompanyAdminCapabilityDeleteTemplateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Iomad capabilities template Delete Iomad capabilities template
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCapabilityDeleteTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminCapabilityDeleteTemplateWithHttpInfo(BlockIomadCompanyAdminCapabilityDeleteTemplateRequest blockIomadCompanyAdminCapabilityDeleteTemplateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminCapabilityDeleteTemplateRequest' is set
            if (blockIomadCompanyAdminCapabilityDeleteTemplateRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminCapabilityDeleteTemplateRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminCapabilityDeleteTemplate");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminCapabilityDeleteTemplateRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminCapabilityDeleteTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_capability_delete_template", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminCapabilityDeleteTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Iomad capabilities template Delete Iomad capabilities template
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCapabilityDeleteTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminCapabilityDeleteTemplateAsync(BlockIomadCompanyAdminCapabilityDeleteTemplateRequest blockIomadCompanyAdminCapabilityDeleteTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminCapabilityDeleteTemplateWithHttpInfoAsync(blockIomadCompanyAdminCapabilityDeleteTemplateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Iomad capabilities template Delete Iomad capabilities template
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCapabilityDeleteTemplateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminCapabilityDeleteTemplateWithHttpInfoAsync(BlockIomadCompanyAdminCapabilityDeleteTemplateRequest blockIomadCompanyAdminCapabilityDeleteTemplateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminCapabilityDeleteTemplateRequest' is set
            if (blockIomadCompanyAdminCapabilityDeleteTemplateRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminCapabilityDeleteTemplateRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminCapabilityDeleteTemplate");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminCapabilityDeleteTemplateRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminCapabilityDeleteTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_capability_delete_template", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminCapabilityDeleteTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check SSO token Check SSO token
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCheckTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminCheckToken200Response</returns>
        public BlockIomadCompanyAdminCheckToken200Response BlockIomadCompanyAdminCheckToken(BlockIomadCompanyAdminCheckTokenRequest blockIomadCompanyAdminCheckTokenRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminCheckToken200Response> localVarResponse = BlockIomadCompanyAdminCheckTokenWithHttpInfo(blockIomadCompanyAdminCheckTokenRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check SSO token Check SSO token
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCheckTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminCheckToken200Response</returns>
        public MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminCheckToken200Response> BlockIomadCompanyAdminCheckTokenWithHttpInfo(BlockIomadCompanyAdminCheckTokenRequest blockIomadCompanyAdminCheckTokenRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminCheckTokenRequest' is set
            if (blockIomadCompanyAdminCheckTokenRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminCheckTokenRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminCheckToken");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminCheckTokenRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminCheckToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BlockIomadCompanyAdminCheckToken200Response>("/block_iomad_company_admin_check_token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminCheckToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check SSO token Check SSO token
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCheckTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminCheckToken200Response</returns>
        public async System.Threading.Tasks.Task<BlockIomadCompanyAdminCheckToken200Response> BlockIomadCompanyAdminCheckTokenAsync(BlockIomadCompanyAdminCheckTokenRequest blockIomadCompanyAdminCheckTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminCheckToken200Response> localVarResponse = await BlockIomadCompanyAdminCheckTokenWithHttpInfoAsync(blockIomadCompanyAdminCheckTokenRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check SSO token Check SSO token
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCheckTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminCheckToken200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminCheckToken200Response>> BlockIomadCompanyAdminCheckTokenWithHttpInfoAsync(BlockIomadCompanyAdminCheckTokenRequest blockIomadCompanyAdminCheckTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminCheckTokenRequest' is set
            if (blockIomadCompanyAdminCheckTokenRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminCheckTokenRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminCheckToken");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminCheckTokenRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminCheckToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlockIomadCompanyAdminCheckToken200Response>("/block_iomad_company_admin_check_token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminCheckToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new Iomad companies Create new Iomad companies
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminCreateCompanies(BlockIomadCompanyAdminCreateCompaniesRequest blockIomadCompanyAdminCreateCompaniesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminCreateCompaniesWithHttpInfo(blockIomadCompanyAdminCreateCompaniesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new Iomad companies Create new Iomad companies
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminCreateCompaniesWithHttpInfo(BlockIomadCompanyAdminCreateCompaniesRequest blockIomadCompanyAdminCreateCompaniesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminCreateCompaniesRequest' is set
            if (blockIomadCompanyAdminCreateCompaniesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminCreateCompaniesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminCreateCompanies");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminCreateCompaniesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminCreateCompanies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_create_companies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminCreateCompanies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new Iomad companies Create new Iomad companies
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminCreateCompaniesAsync(BlockIomadCompanyAdminCreateCompaniesRequest blockIomadCompanyAdminCreateCompaniesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminCreateCompaniesWithHttpInfoAsync(blockIomadCompanyAdminCreateCompaniesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new Iomad companies Create new Iomad companies
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminCreateCompaniesWithHttpInfoAsync(BlockIomadCompanyAdminCreateCompaniesRequest blockIomadCompanyAdminCreateCompaniesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminCreateCompaniesRequest' is set
            if (blockIomadCompanyAdminCreateCompaniesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminCreateCompaniesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminCreateCompanies");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminCreateCompaniesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminCreateCompanies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_create_companies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminCreateCompanies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create company licenses Create company licenses
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminCreateLicenses(BlockIomadCompanyAdminCreateLicensesRequest blockIomadCompanyAdminCreateLicensesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminCreateLicensesWithHttpInfo(blockIomadCompanyAdminCreateLicensesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create company licenses Create company licenses
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminCreateLicensesWithHttpInfo(BlockIomadCompanyAdminCreateLicensesRequest blockIomadCompanyAdminCreateLicensesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminCreateLicensesRequest' is set
            if (blockIomadCompanyAdminCreateLicensesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminCreateLicensesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminCreateLicenses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminCreateLicensesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminCreateLicenses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_create_licenses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminCreateLicenses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create company licenses Create company licenses
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminCreateLicensesAsync(BlockIomadCompanyAdminCreateLicensesRequest blockIomadCompanyAdminCreateLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminCreateLicensesWithHttpInfoAsync(blockIomadCompanyAdminCreateLicensesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create company licenses Create company licenses
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminCreateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminCreateLicensesWithHttpInfoAsync(BlockIomadCompanyAdminCreateLicensesRequest blockIomadCompanyAdminCreateLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminCreateLicensesRequest' is set
            if (blockIomadCompanyAdminCreateLicensesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminCreateLicensesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminCreateLicenses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminCreateLicensesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminCreateLicenses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_create_licenses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminCreateLicenses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete company licenses Delete company licenses
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminDeleteLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminDeleteLicenses(BlockIomadCompanyAdminDeleteLicensesRequest blockIomadCompanyAdminDeleteLicensesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminDeleteLicensesWithHttpInfo(blockIomadCompanyAdminDeleteLicensesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete company licenses Delete company licenses
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminDeleteLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminDeleteLicensesWithHttpInfo(BlockIomadCompanyAdminDeleteLicensesRequest blockIomadCompanyAdminDeleteLicensesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminDeleteLicensesRequest' is set
            if (blockIomadCompanyAdminDeleteLicensesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminDeleteLicensesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminDeleteLicenses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminDeleteLicensesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminDeleteLicenses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_delete_licenses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminDeleteLicenses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete company licenses Delete company licenses
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminDeleteLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminDeleteLicensesAsync(BlockIomadCompanyAdminDeleteLicensesRequest blockIomadCompanyAdminDeleteLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminDeleteLicensesWithHttpInfoAsync(blockIomadCompanyAdminDeleteLicensesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete company licenses Delete company licenses
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminDeleteLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminDeleteLicensesWithHttpInfoAsync(BlockIomadCompanyAdminDeleteLicensesRequest blockIomadCompanyAdminDeleteLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminDeleteLicensesRequest' is set
            if (blockIomadCompanyAdminDeleteLicensesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminDeleteLicensesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminDeleteLicenses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminDeleteLicensesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminDeleteLicenses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_delete_licenses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminDeleteLicenses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit Iomad companies Edit Iomad companies
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminEditCompanies(BlockIomadCompanyAdminEditCompaniesRequest blockIomadCompanyAdminEditCompaniesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminEditCompaniesWithHttpInfo(blockIomadCompanyAdminEditCompaniesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit Iomad companies Edit Iomad companies
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminEditCompaniesWithHttpInfo(BlockIomadCompanyAdminEditCompaniesRequest blockIomadCompanyAdminEditCompaniesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminEditCompaniesRequest' is set
            if (blockIomadCompanyAdminEditCompaniesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminEditCompaniesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminEditCompanies");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminEditCompaniesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminEditCompanies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_edit_companies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminEditCompanies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit Iomad companies Edit Iomad companies
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminEditCompaniesAsync(BlockIomadCompanyAdminEditCompaniesRequest blockIomadCompanyAdminEditCompaniesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminEditCompaniesWithHttpInfoAsync(blockIomadCompanyAdminEditCompaniesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit Iomad companies Edit Iomad companies
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminEditCompaniesWithHttpInfoAsync(BlockIomadCompanyAdminEditCompaniesRequest blockIomadCompanyAdminEditCompaniesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminEditCompaniesRequest' is set
            if (blockIomadCompanyAdminEditCompaniesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminEditCompaniesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminEditCompanies");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminEditCompaniesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminEditCompanies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_edit_companies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminEditCompanies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit company license settings Edit company license settings
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminEditLicenses(BlockIomadCompanyAdminEditLicensesRequest blockIomadCompanyAdminEditLicensesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminEditLicensesWithHttpInfo(blockIomadCompanyAdminEditLicensesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit company license settings Edit company license settings
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminEditLicensesWithHttpInfo(BlockIomadCompanyAdminEditLicensesRequest blockIomadCompanyAdminEditLicensesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminEditLicensesRequest' is set
            if (blockIomadCompanyAdminEditLicensesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminEditLicensesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminEditLicenses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminEditLicensesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminEditLicenses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_edit_licenses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminEditLicenses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit company license settings Edit company license settings
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminEditLicensesAsync(BlockIomadCompanyAdminEditLicensesRequest blockIomadCompanyAdminEditLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminEditLicensesWithHttpInfoAsync(blockIomadCompanyAdminEditLicensesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit company license settings Edit company license settings
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEditLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminEditLicensesWithHttpInfoAsync(BlockIomadCompanyAdminEditLicensesRequest blockIomadCompanyAdminEditLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminEditLicensesRequest' is set
            if (blockIomadCompanyAdminEditLicensesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminEditLicensesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminEditLicenses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminEditLicensesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminEditLicenses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_edit_licenses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminEditLicenses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign users onto courses Assign users onto courses
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEnrolUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminEnrolUsers(BlockIomadCompanyAdminEnrolUsersRequest blockIomadCompanyAdminEnrolUsersRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminEnrolUsersWithHttpInfo(blockIomadCompanyAdminEnrolUsersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign users onto courses Assign users onto courses
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEnrolUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminEnrolUsersWithHttpInfo(BlockIomadCompanyAdminEnrolUsersRequest blockIomadCompanyAdminEnrolUsersRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminEnrolUsersRequest' is set
            if (blockIomadCompanyAdminEnrolUsersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminEnrolUsersRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminEnrolUsers");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminEnrolUsersRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminEnrolUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_enrol_users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminEnrolUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign users onto courses Assign users onto courses
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEnrolUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminEnrolUsersAsync(BlockIomadCompanyAdminEnrolUsersRequest blockIomadCompanyAdminEnrolUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminEnrolUsersWithHttpInfoAsync(blockIomadCompanyAdminEnrolUsersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign users onto courses Assign users onto courses
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminEnrolUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminEnrolUsersWithHttpInfoAsync(BlockIomadCompanyAdminEnrolUsersRequest blockIomadCompanyAdminEnrolUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminEnrolUsersRequest' is set
            if (blockIomadCompanyAdminEnrolUsersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminEnrolUsersRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminEnrolUsers");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminEnrolUsersRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminEnrolUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_enrol_users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminEnrolUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Iomad companies Get all Iomad companies
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminGetCompanies200Response</returns>
        public BlockIomadCompanyAdminGetCompanies200Response BlockIomadCompanyAdminGetCompanies(BlockIomadCompanyAdminGetCompaniesRequest blockIomadCompanyAdminGetCompaniesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetCompanies200Response> localVarResponse = BlockIomadCompanyAdminGetCompaniesWithHttpInfo(blockIomadCompanyAdminGetCompaniesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Iomad companies Get all Iomad companies
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminGetCompanies200Response</returns>
        public MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetCompanies200Response> BlockIomadCompanyAdminGetCompaniesWithHttpInfo(BlockIomadCompanyAdminGetCompaniesRequest blockIomadCompanyAdminGetCompaniesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminGetCompaniesRequest' is set
            if (blockIomadCompanyAdminGetCompaniesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminGetCompaniesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminGetCompanies");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminGetCompaniesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminGetCompanies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BlockIomadCompanyAdminGetCompanies200Response>("/block_iomad_company_admin_get_companies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminGetCompanies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all Iomad companies Get all Iomad companies
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminGetCompanies200Response</returns>
        public async System.Threading.Tasks.Task<BlockIomadCompanyAdminGetCompanies200Response> BlockIomadCompanyAdminGetCompaniesAsync(BlockIomadCompanyAdminGetCompaniesRequest blockIomadCompanyAdminGetCompaniesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetCompanies200Response> localVarResponse = await BlockIomadCompanyAdminGetCompaniesWithHttpInfoAsync(blockIomadCompanyAdminGetCompaniesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Iomad companies Get all Iomad companies
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompaniesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminGetCompanies200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetCompanies200Response>> BlockIomadCompanyAdminGetCompaniesWithHttpInfoAsync(BlockIomadCompanyAdminGetCompaniesRequest blockIomadCompanyAdminGetCompaniesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminGetCompaniesRequest' is set
            if (blockIomadCompanyAdminGetCompaniesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminGetCompaniesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminGetCompanies");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminGetCompaniesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminGetCompanies";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlockIomadCompanyAdminGetCompanies200Response>("/block_iomad_company_admin_get_companies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminGetCompanies", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Iomad company course allocations Get Iomad company course allocations
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompanyCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminGetCompanyCourses200Response</returns>
        public BlockIomadCompanyAdminGetCompanyCourses200Response BlockIomadCompanyAdminGetCompanyCourses(BlockIomadCompanyAdminGetCompanyCoursesRequest blockIomadCompanyAdminGetCompanyCoursesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetCompanyCourses200Response> localVarResponse = BlockIomadCompanyAdminGetCompanyCoursesWithHttpInfo(blockIomadCompanyAdminGetCompanyCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Iomad company course allocations Get Iomad company course allocations
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompanyCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminGetCompanyCourses200Response</returns>
        public MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetCompanyCourses200Response> BlockIomadCompanyAdminGetCompanyCoursesWithHttpInfo(BlockIomadCompanyAdminGetCompanyCoursesRequest blockIomadCompanyAdminGetCompanyCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminGetCompanyCoursesRequest' is set
            if (blockIomadCompanyAdminGetCompanyCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminGetCompanyCoursesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminGetCompanyCourses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminGetCompanyCoursesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminGetCompanyCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BlockIomadCompanyAdminGetCompanyCourses200Response>("/block_iomad_company_admin_get_company_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminGetCompanyCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Iomad company course allocations Get Iomad company course allocations
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompanyCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminGetCompanyCourses200Response</returns>
        public async System.Threading.Tasks.Task<BlockIomadCompanyAdminGetCompanyCourses200Response> BlockIomadCompanyAdminGetCompanyCoursesAsync(BlockIomadCompanyAdminGetCompanyCoursesRequest blockIomadCompanyAdminGetCompanyCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetCompanyCourses200Response> localVarResponse = await BlockIomadCompanyAdminGetCompanyCoursesWithHttpInfoAsync(blockIomadCompanyAdminGetCompanyCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Iomad company course allocations Get Iomad company course allocations
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCompanyCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminGetCompanyCourses200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetCompanyCourses200Response>> BlockIomadCompanyAdminGetCompanyCoursesWithHttpInfoAsync(BlockIomadCompanyAdminGetCompanyCoursesRequest blockIomadCompanyAdminGetCompanyCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminGetCompanyCoursesRequest' is set
            if (blockIomadCompanyAdminGetCompanyCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminGetCompanyCoursesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminGetCompanyCourses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminGetCompanyCoursesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminGetCompanyCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlockIomadCompanyAdminGetCompanyCourses200Response>("/block_iomad_company_admin_get_company_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminGetCompanyCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Iomad course settings Get Iomad course settings
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCourseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminGetCourseInfo(BlockIomadCompanyAdminGetCourseInfoRequest blockIomadCompanyAdminGetCourseInfoRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminGetCourseInfoWithHttpInfo(blockIomadCompanyAdminGetCourseInfoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Iomad course settings Get Iomad course settings
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCourseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminGetCourseInfoWithHttpInfo(BlockIomadCompanyAdminGetCourseInfoRequest blockIomadCompanyAdminGetCourseInfoRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminGetCourseInfoRequest' is set
            if (blockIomadCompanyAdminGetCourseInfoRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminGetCourseInfoRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminGetCourseInfo");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminGetCourseInfoRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminGetCourseInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_get_course_info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminGetCourseInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Iomad course settings Get Iomad course settings
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCourseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminGetCourseInfoAsync(BlockIomadCompanyAdminGetCourseInfoRequest blockIomadCompanyAdminGetCourseInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminGetCourseInfoWithHttpInfoAsync(blockIomadCompanyAdminGetCourseInfoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Iomad course settings Get Iomad course settings
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetCourseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminGetCourseInfoWithHttpInfoAsync(BlockIomadCompanyAdminGetCourseInfoRequest blockIomadCompanyAdminGetCourseInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminGetCourseInfoRequest' is set
            if (blockIomadCompanyAdminGetCourseInfoRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminGetCourseInfoRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminGetCourseInfo");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminGetCourseInfoRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminGetCourseInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_get_course_info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminGetCourseInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get users within a department Get users within a department
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminGetDepartmentUsers200Response</returns>
        public BlockIomadCompanyAdminGetDepartmentUsers200Response BlockIomadCompanyAdminGetDepartmentUsers(BlockIomadCompanyAdminGetDepartmentUsersRequest blockIomadCompanyAdminGetDepartmentUsersRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetDepartmentUsers200Response> localVarResponse = BlockIomadCompanyAdminGetDepartmentUsersWithHttpInfo(blockIomadCompanyAdminGetDepartmentUsersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get users within a department Get users within a department
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminGetDepartmentUsers200Response</returns>
        public MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetDepartmentUsers200Response> BlockIomadCompanyAdminGetDepartmentUsersWithHttpInfo(BlockIomadCompanyAdminGetDepartmentUsersRequest blockIomadCompanyAdminGetDepartmentUsersRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminGetDepartmentUsersRequest' is set
            if (blockIomadCompanyAdminGetDepartmentUsersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminGetDepartmentUsersRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminGetDepartmentUsers");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminGetDepartmentUsersRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminGetDepartmentUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BlockIomadCompanyAdminGetDepartmentUsers200Response>("/block_iomad_company_admin_get_department_users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminGetDepartmentUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get users within a department Get users within a department
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminGetDepartmentUsers200Response</returns>
        public async System.Threading.Tasks.Task<BlockIomadCompanyAdminGetDepartmentUsers200Response> BlockIomadCompanyAdminGetDepartmentUsersAsync(BlockIomadCompanyAdminGetDepartmentUsersRequest blockIomadCompanyAdminGetDepartmentUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetDepartmentUsers200Response> localVarResponse = await BlockIomadCompanyAdminGetDepartmentUsersWithHttpInfoAsync(blockIomadCompanyAdminGetDepartmentUsersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get users within a department Get users within a department
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminGetDepartmentUsers200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetDepartmentUsers200Response>> BlockIomadCompanyAdminGetDepartmentUsersWithHttpInfoAsync(BlockIomadCompanyAdminGetDepartmentUsersRequest blockIomadCompanyAdminGetDepartmentUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminGetDepartmentUsersRequest' is set
            if (blockIomadCompanyAdminGetDepartmentUsersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminGetDepartmentUsersRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminGetDepartmentUsers");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminGetDepartmentUsersRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminGetDepartmentUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlockIomadCompanyAdminGetDepartmentUsers200Response>("/block_iomad_company_admin_get_department_users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminGetDepartmentUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all company departments Get all company departments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminGetDepartments200Response</returns>
        public BlockIomadCompanyAdminGetDepartments200Response BlockIomadCompanyAdminGetDepartments(BlockIomadCompanyAdminGetDepartmentsRequest blockIomadCompanyAdminGetDepartmentsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetDepartments200Response> localVarResponse = BlockIomadCompanyAdminGetDepartmentsWithHttpInfo(blockIomadCompanyAdminGetDepartmentsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all company departments Get all company departments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminGetDepartments200Response</returns>
        public MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetDepartments200Response> BlockIomadCompanyAdminGetDepartmentsWithHttpInfo(BlockIomadCompanyAdminGetDepartmentsRequest blockIomadCompanyAdminGetDepartmentsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminGetDepartmentsRequest' is set
            if (blockIomadCompanyAdminGetDepartmentsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminGetDepartmentsRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminGetDepartments");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminGetDepartmentsRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminGetDepartments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BlockIomadCompanyAdminGetDepartments200Response>("/block_iomad_company_admin_get_departments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminGetDepartments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all company departments Get all company departments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminGetDepartments200Response</returns>
        public async System.Threading.Tasks.Task<BlockIomadCompanyAdminGetDepartments200Response> BlockIomadCompanyAdminGetDepartmentsAsync(BlockIomadCompanyAdminGetDepartmentsRequest blockIomadCompanyAdminGetDepartmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetDepartments200Response> localVarResponse = await BlockIomadCompanyAdminGetDepartmentsWithHttpInfoAsync(blockIomadCompanyAdminGetDepartmentsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all company departments Get all company departments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetDepartmentsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminGetDepartments200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetDepartments200Response>> BlockIomadCompanyAdminGetDepartmentsWithHttpInfoAsync(BlockIomadCompanyAdminGetDepartmentsRequest blockIomadCompanyAdminGetDepartmentsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminGetDepartmentsRequest' is set
            if (blockIomadCompanyAdminGetDepartmentsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminGetDepartmentsRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminGetDepartments");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminGetDepartmentsRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminGetDepartments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlockIomadCompanyAdminGetDepartments200Response>("/block_iomad_company_admin_get_departments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminGetDepartments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get licence data give the ID Get licence data give the ID
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseFromIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminGetLicenseFromId200Response</returns>
        public BlockIomadCompanyAdminGetLicenseFromId200Response BlockIomadCompanyAdminGetLicenseFromId(BlockIomadCompanyAdminGetLicenseFromIdRequest blockIomadCompanyAdminGetLicenseFromIdRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetLicenseFromId200Response> localVarResponse = BlockIomadCompanyAdminGetLicenseFromIdWithHttpInfo(blockIomadCompanyAdminGetLicenseFromIdRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get licence data give the ID Get licence data give the ID
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseFromIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminGetLicenseFromId200Response</returns>
        public MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetLicenseFromId200Response> BlockIomadCompanyAdminGetLicenseFromIdWithHttpInfo(BlockIomadCompanyAdminGetLicenseFromIdRequest blockIomadCompanyAdminGetLicenseFromIdRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminGetLicenseFromIdRequest' is set
            if (blockIomadCompanyAdminGetLicenseFromIdRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminGetLicenseFromIdRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminGetLicenseFromId");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminGetLicenseFromIdRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminGetLicenseFromId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BlockIomadCompanyAdminGetLicenseFromId200Response>("/block_iomad_company_admin_get_license_from_id", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminGetLicenseFromId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get licence data give the ID Get licence data give the ID
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseFromIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminGetLicenseFromId200Response</returns>
        public async System.Threading.Tasks.Task<BlockIomadCompanyAdminGetLicenseFromId200Response> BlockIomadCompanyAdminGetLicenseFromIdAsync(BlockIomadCompanyAdminGetLicenseFromIdRequest blockIomadCompanyAdminGetLicenseFromIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetLicenseFromId200Response> localVarResponse = await BlockIomadCompanyAdminGetLicenseFromIdWithHttpInfoAsync(blockIomadCompanyAdminGetLicenseFromIdRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get licence data give the ID Get licence data give the ID
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseFromIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminGetLicenseFromId200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetLicenseFromId200Response>> BlockIomadCompanyAdminGetLicenseFromIdWithHttpInfoAsync(BlockIomadCompanyAdminGetLicenseFromIdRequest blockIomadCompanyAdminGetLicenseFromIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminGetLicenseFromIdRequest' is set
            if (blockIomadCompanyAdminGetLicenseFromIdRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminGetLicenseFromIdRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminGetLicenseFromId");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminGetLicenseFromIdRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminGetLicenseFromId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlockIomadCompanyAdminGetLicenseFromId200Response>("/block_iomad_company_admin_get_license_from_id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminGetLicenseFromId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get company license information Get company license information
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminGetLicenseInfo200Response</returns>
        public BlockIomadCompanyAdminGetLicenseInfo200Response BlockIomadCompanyAdminGetLicenseInfo(BlockIomadCompanyAdminGetLicenseInfoRequest blockIomadCompanyAdminGetLicenseInfoRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetLicenseInfo200Response> localVarResponse = BlockIomadCompanyAdminGetLicenseInfoWithHttpInfo(blockIomadCompanyAdminGetLicenseInfoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get company license information Get company license information
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminGetLicenseInfo200Response</returns>
        public MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetLicenseInfo200Response> BlockIomadCompanyAdminGetLicenseInfoWithHttpInfo(BlockIomadCompanyAdminGetLicenseInfoRequest blockIomadCompanyAdminGetLicenseInfoRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminGetLicenseInfoRequest' is set
            if (blockIomadCompanyAdminGetLicenseInfoRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminGetLicenseInfoRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminGetLicenseInfo");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminGetLicenseInfoRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminGetLicenseInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BlockIomadCompanyAdminGetLicenseInfo200Response>("/block_iomad_company_admin_get_license_info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminGetLicenseInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get company license information Get company license information
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminGetLicenseInfo200Response</returns>
        public async System.Threading.Tasks.Task<BlockIomadCompanyAdminGetLicenseInfo200Response> BlockIomadCompanyAdminGetLicenseInfoAsync(BlockIomadCompanyAdminGetLicenseInfoRequest blockIomadCompanyAdminGetLicenseInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetLicenseInfo200Response> localVarResponse = await BlockIomadCompanyAdminGetLicenseInfoWithHttpInfoAsync(blockIomadCompanyAdminGetLicenseInfoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get company license information Get company license information
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminGetLicenseInfoRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminGetLicenseInfo200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminGetLicenseInfo200Response>> BlockIomadCompanyAdminGetLicenseInfoWithHttpInfoAsync(BlockIomadCompanyAdminGetLicenseInfoRequest blockIomadCompanyAdminGetLicenseInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminGetLicenseInfoRequest' is set
            if (blockIomadCompanyAdminGetLicenseInfoRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminGetLicenseInfoRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminGetLicenseInfo");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminGetLicenseInfoRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminGetLicenseInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlockIomadCompanyAdminGetLicenseInfo200Response>("/block_iomad_company_admin_get_license_info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminGetLicenseInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move users between departments Move users between departments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminMoveUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminMoveUsers(BlockIomadCompanyAdminMoveUsersRequest blockIomadCompanyAdminMoveUsersRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminMoveUsersWithHttpInfo(blockIomadCompanyAdminMoveUsersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Move users between departments Move users between departments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminMoveUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminMoveUsersWithHttpInfo(BlockIomadCompanyAdminMoveUsersRequest blockIomadCompanyAdminMoveUsersRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminMoveUsersRequest' is set
            if (blockIomadCompanyAdminMoveUsersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminMoveUsersRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminMoveUsers");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminMoveUsersRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminMoveUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_move_users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminMoveUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move users between departments Move users between departments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminMoveUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminMoveUsersAsync(BlockIomadCompanyAdminMoveUsersRequest blockIomadCompanyAdminMoveUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminMoveUsersWithHttpInfoAsync(blockIomadCompanyAdminMoveUsersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Move users between departments Move users between departments
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminMoveUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminMoveUsersWithHttpInfoAsync(BlockIomadCompanyAdminMoveUsersRequest blockIomadCompanyAdminMoveUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminMoveUsersRequest' is set
            if (blockIomadCompanyAdminMoveUsersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminMoveUsersRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminMoveUsers");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminMoveUsersRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminMoveUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_move_users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminMoveUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// set/reset Iomad capability set/reset Iomad capability
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminRestrictCapabilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminRestrictCapability(BlockIomadCompanyAdminRestrictCapabilityRequest blockIomadCompanyAdminRestrictCapabilityRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminRestrictCapabilityWithHttpInfo(blockIomadCompanyAdminRestrictCapabilityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// set/reset Iomad capability set/reset Iomad capability
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminRestrictCapabilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminRestrictCapabilityWithHttpInfo(BlockIomadCompanyAdminRestrictCapabilityRequest blockIomadCompanyAdminRestrictCapabilityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminRestrictCapabilityRequest' is set
            if (blockIomadCompanyAdminRestrictCapabilityRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminRestrictCapabilityRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminRestrictCapability");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminRestrictCapabilityRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminRestrictCapability";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_restrict_capability", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminRestrictCapability", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// set/reset Iomad capability set/reset Iomad capability
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminRestrictCapabilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminRestrictCapabilityAsync(BlockIomadCompanyAdminRestrictCapabilityRequest blockIomadCompanyAdminRestrictCapabilityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminRestrictCapabilityWithHttpInfoAsync(blockIomadCompanyAdminRestrictCapabilityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// set/reset Iomad capability set/reset Iomad capability
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminRestrictCapabilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminRestrictCapabilityWithHttpInfoAsync(BlockIomadCompanyAdminRestrictCapabilityRequest blockIomadCompanyAdminRestrictCapabilityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminRestrictCapabilityRequest' is set
            if (blockIomadCompanyAdminRestrictCapabilityRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminRestrictCapabilityRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminRestrictCapability");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminRestrictCapabilityRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminRestrictCapability";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_restrict_capability", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminRestrictCapability", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Call update users to sync to external system Call update users to sync to external system
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminSyncUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BlockIomadCompanyAdminSyncUsers200Response</returns>
        public BlockIomadCompanyAdminSyncUsers200Response BlockIomadCompanyAdminSyncUsers(BlockIomadCompanyAdminSyncUsersRequest blockIomadCompanyAdminSyncUsersRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminSyncUsers200Response> localVarResponse = BlockIomadCompanyAdminSyncUsersWithHttpInfo(blockIomadCompanyAdminSyncUsersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Call update users to sync to external system Call update users to sync to external system
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminSyncUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BlockIomadCompanyAdminSyncUsers200Response</returns>
        public MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminSyncUsers200Response> BlockIomadCompanyAdminSyncUsersWithHttpInfo(BlockIomadCompanyAdminSyncUsersRequest blockIomadCompanyAdminSyncUsersRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminSyncUsersRequest' is set
            if (blockIomadCompanyAdminSyncUsersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminSyncUsersRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminSyncUsers");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminSyncUsersRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminSyncUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BlockIomadCompanyAdminSyncUsers200Response>("/block_iomad_company_admin_sync_users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminSyncUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Call update users to sync to external system Call update users to sync to external system
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminSyncUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BlockIomadCompanyAdminSyncUsers200Response</returns>
        public async System.Threading.Tasks.Task<BlockIomadCompanyAdminSyncUsers200Response> BlockIomadCompanyAdminSyncUsersAsync(BlockIomadCompanyAdminSyncUsersRequest blockIomadCompanyAdminSyncUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminSyncUsers200Response> localVarResponse = await BlockIomadCompanyAdminSyncUsersWithHttpInfoAsync(blockIomadCompanyAdminSyncUsersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Call update users to sync to external system Call update users to sync to external system
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminSyncUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BlockIomadCompanyAdminSyncUsers200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<BlockIomadCompanyAdminSyncUsers200Response>> BlockIomadCompanyAdminSyncUsersWithHttpInfoAsync(BlockIomadCompanyAdminSyncUsersRequest blockIomadCompanyAdminSyncUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminSyncUsersRequest' is set
            if (blockIomadCompanyAdminSyncUsersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminSyncUsersRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminSyncUsers");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminSyncUsersRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminSyncUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BlockIomadCompanyAdminSyncUsers200Response>("/block_iomad_company_admin_sync_users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminSyncUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove course licenses from users Remove course licenses from users
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnallocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminUnallocateLicenses(BlockIomadCompanyAdminUnallocateLicensesRequest blockIomadCompanyAdminUnallocateLicensesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminUnallocateLicensesWithHttpInfo(blockIomadCompanyAdminUnallocateLicensesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove course licenses from users Remove course licenses from users
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnallocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminUnallocateLicensesWithHttpInfo(BlockIomadCompanyAdminUnallocateLicensesRequest blockIomadCompanyAdminUnallocateLicensesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminUnallocateLicensesRequest' is set
            if (blockIomadCompanyAdminUnallocateLicensesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminUnallocateLicensesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminUnallocateLicenses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminUnallocateLicensesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminUnallocateLicenses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_unallocate_licenses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminUnallocateLicenses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove course licenses from users Remove course licenses from users
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnallocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminUnallocateLicensesAsync(BlockIomadCompanyAdminUnallocateLicensesRequest blockIomadCompanyAdminUnallocateLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminUnallocateLicensesWithHttpInfoAsync(blockIomadCompanyAdminUnallocateLicensesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove course licenses from users Remove course licenses from users
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnallocateLicensesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminUnallocateLicensesWithHttpInfoAsync(BlockIomadCompanyAdminUnallocateLicensesRequest blockIomadCompanyAdminUnallocateLicensesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminUnallocateLicensesRequest' is set
            if (blockIomadCompanyAdminUnallocateLicensesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminUnallocateLicensesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminUnallocateLicenses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminUnallocateLicensesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminUnallocateLicenses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_unallocate_licenses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminUnallocateLicenses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unassign a course from a company Unassign a course from a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminUnassignCourses(BlockIomadCompanyAdminUnassignCoursesRequest blockIomadCompanyAdminUnassignCoursesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminUnassignCoursesWithHttpInfo(blockIomadCompanyAdminUnassignCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unassign a course from a company Unassign a course from a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminUnassignCoursesWithHttpInfo(BlockIomadCompanyAdminUnassignCoursesRequest blockIomadCompanyAdminUnassignCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminUnassignCoursesRequest' is set
            if (blockIomadCompanyAdminUnassignCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminUnassignCoursesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminUnassignCourses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminUnassignCoursesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminUnassignCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_unassign_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminUnassignCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unassign a course from a company Unassign a course from a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminUnassignCoursesAsync(BlockIomadCompanyAdminUnassignCoursesRequest blockIomadCompanyAdminUnassignCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminUnassignCoursesWithHttpInfoAsync(blockIomadCompanyAdminUnassignCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unassign a course from a company Unassign a course from a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminUnassignCoursesWithHttpInfoAsync(BlockIomadCompanyAdminUnassignCoursesRequest blockIomadCompanyAdminUnassignCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminUnassignCoursesRequest' is set
            if (blockIomadCompanyAdminUnassignCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminUnassignCoursesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminUnassignCourses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminUnassignCoursesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminUnassignCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_unassign_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminUnassignCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unassign users from a company Unassign users from a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminUnassignUsers(BlockIomadCompanyAdminUnassignUsersRequest blockIomadCompanyAdminUnassignUsersRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminUnassignUsersWithHttpInfo(blockIomadCompanyAdminUnassignUsersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unassign users from a company Unassign users from a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminUnassignUsersWithHttpInfo(BlockIomadCompanyAdminUnassignUsersRequest blockIomadCompanyAdminUnassignUsersRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminUnassignUsersRequest' is set
            if (blockIomadCompanyAdminUnassignUsersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminUnassignUsersRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminUnassignUsers");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminUnassignUsersRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminUnassignUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_unassign_users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminUnassignUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unassign users from a company Unassign users from a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminUnassignUsersAsync(BlockIomadCompanyAdminUnassignUsersRequest blockIomadCompanyAdminUnassignUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminUnassignUsersWithHttpInfoAsync(blockIomadCompanyAdminUnassignUsersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unassign users from a company Unassign users from a company
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUnassignUsersRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminUnassignUsersWithHttpInfoAsync(BlockIomadCompanyAdminUnassignUsersRequest blockIomadCompanyAdminUnassignUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminUnassignUsersRequest' is set
            if (blockIomadCompanyAdminUnassignUsersRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminUnassignUsersRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminUnassignUsers");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminUnassignUsersRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminUnassignUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_unassign_users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminUnassignUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Iomad course settings Update Iomad course settings
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUpdateCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object BlockIomadCompanyAdminUpdateCourses(BlockIomadCompanyAdminUpdateCoursesRequest blockIomadCompanyAdminUpdateCoursesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = BlockIomadCompanyAdminUpdateCoursesWithHttpInfo(blockIomadCompanyAdminUpdateCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Iomad course settings Update Iomad course settings
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUpdateCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> BlockIomadCompanyAdminUpdateCoursesWithHttpInfo(BlockIomadCompanyAdminUpdateCoursesRequest blockIomadCompanyAdminUpdateCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'blockIomadCompanyAdminUpdateCoursesRequest' is set
            if (blockIomadCompanyAdminUpdateCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminUpdateCoursesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminUpdateCourses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminUpdateCoursesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminUpdateCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/block_iomad_company_admin_update_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminUpdateCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Iomad course settings Update Iomad course settings
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUpdateCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockIomadCompanyAdminUpdateCoursesAsync(BlockIomadCompanyAdminUpdateCoursesRequest blockIomadCompanyAdminUpdateCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await BlockIomadCompanyAdminUpdateCoursesWithHttpInfoAsync(blockIomadCompanyAdminUpdateCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Iomad course settings Update Iomad course settings
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockIomadCompanyAdminUpdateCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> BlockIomadCompanyAdminUpdateCoursesWithHttpInfoAsync(BlockIomadCompanyAdminUpdateCoursesRequest blockIomadCompanyAdminUpdateCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'blockIomadCompanyAdminUpdateCoursesRequest' is set
            if (blockIomadCompanyAdminUpdateCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'blockIomadCompanyAdminUpdateCoursesRequest' when calling BlockIomadCompanyAdminApi->BlockIomadCompanyAdminUpdateCourses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = blockIomadCompanyAdminUpdateCoursesRequest;

            localVarRequestOptions.Operation = "BlockIomadCompanyAdminApi.BlockIomadCompanyAdminUpdateCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/block_iomad_company_admin_update_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BlockIomadCompanyAdminUpdateCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
