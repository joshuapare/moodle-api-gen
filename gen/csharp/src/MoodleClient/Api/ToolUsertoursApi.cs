/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MoodleClient.Client;
using MoodleClient.Model;

namespace MoodleClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolUsertoursApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Mark the specified tour as completed for the current user
        /// </summary>
        /// <remarks>
        /// Mark the specified tour as completed for the current user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursCompleteTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ToolUsertoursCompleteTour(ToolUsertoursCompleteTourRequest toolUsertoursCompleteTourRequest, int operationIndex = 0);

        /// <summary>
        /// Mark the specified tour as completed for the current user
        /// </summary>
        /// <remarks>
        /// Mark the specified tour as completed for the current user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursCompleteTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ToolUsertoursCompleteTourWithHttpInfo(ToolUsertoursCompleteTourRequest toolUsertoursCompleteTourRequest, int operationIndex = 0);
        /// <summary>
        /// Fetch the specified tour
        /// </summary>
        /// <remarks>
        /// Fetch the specified tour
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursFetchAndStartTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolUsertoursFetchAndStartTour200Response</returns>
        ToolUsertoursFetchAndStartTour200Response ToolUsertoursFetchAndStartTour(ToolUsertoursFetchAndStartTourRequest toolUsertoursFetchAndStartTourRequest, int operationIndex = 0);

        /// <summary>
        /// Fetch the specified tour
        /// </summary>
        /// <remarks>
        /// Fetch the specified tour
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursFetchAndStartTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolUsertoursFetchAndStartTour200Response</returns>
        ApiResponse<ToolUsertoursFetchAndStartTour200Response> ToolUsertoursFetchAndStartTourWithHttpInfo(ToolUsertoursFetchAndStartTourRequest toolUsertoursFetchAndStartTourRequest, int operationIndex = 0);
        /// <summary>
        /// Remove the specified tour
        /// </summary>
        /// <remarks>
        /// Remove the specified tour
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursResetTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolUsertoursResetTour200Response</returns>
        ToolUsertoursResetTour200Response ToolUsertoursResetTour(ToolUsertoursResetTourRequest toolUsertoursResetTourRequest, int operationIndex = 0);

        /// <summary>
        /// Remove the specified tour
        /// </summary>
        /// <remarks>
        /// Remove the specified tour
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursResetTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolUsertoursResetTour200Response</returns>
        ApiResponse<ToolUsertoursResetTour200Response> ToolUsertoursResetTourWithHttpInfo(ToolUsertoursResetTourRequest toolUsertoursResetTourRequest, int operationIndex = 0);
        /// <summary>
        /// Mark the specified step as completed for the current user
        /// </summary>
        /// <remarks>
        /// Mark the specified step as completed for the current user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursStepShownRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ToolUsertoursStepShown(ToolUsertoursStepShownRequest toolUsertoursStepShownRequest, int operationIndex = 0);

        /// <summary>
        /// Mark the specified step as completed for the current user
        /// </summary>
        /// <remarks>
        /// Mark the specified step as completed for the current user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursStepShownRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ToolUsertoursStepShownWithHttpInfo(ToolUsertoursStepShownRequest toolUsertoursStepShownRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolUsertoursApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Mark the specified tour as completed for the current user
        /// </summary>
        /// <remarks>
        /// Mark the specified tour as completed for the current user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursCompleteTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ToolUsertoursCompleteTourAsync(ToolUsertoursCompleteTourRequest toolUsertoursCompleteTourRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark the specified tour as completed for the current user
        /// </summary>
        /// <remarks>
        /// Mark the specified tour as completed for the current user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursCompleteTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ToolUsertoursCompleteTourWithHttpInfoAsync(ToolUsertoursCompleteTourRequest toolUsertoursCompleteTourRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch the specified tour
        /// </summary>
        /// <remarks>
        /// Fetch the specified tour
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursFetchAndStartTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolUsertoursFetchAndStartTour200Response</returns>
        System.Threading.Tasks.Task<ToolUsertoursFetchAndStartTour200Response> ToolUsertoursFetchAndStartTourAsync(ToolUsertoursFetchAndStartTourRequest toolUsertoursFetchAndStartTourRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch the specified tour
        /// </summary>
        /// <remarks>
        /// Fetch the specified tour
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursFetchAndStartTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolUsertoursFetchAndStartTour200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolUsertoursFetchAndStartTour200Response>> ToolUsertoursFetchAndStartTourWithHttpInfoAsync(ToolUsertoursFetchAndStartTourRequest toolUsertoursFetchAndStartTourRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove the specified tour
        /// </summary>
        /// <remarks>
        /// Remove the specified tour
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursResetTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolUsertoursResetTour200Response</returns>
        System.Threading.Tasks.Task<ToolUsertoursResetTour200Response> ToolUsertoursResetTourAsync(ToolUsertoursResetTourRequest toolUsertoursResetTourRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove the specified tour
        /// </summary>
        /// <remarks>
        /// Remove the specified tour
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursResetTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolUsertoursResetTour200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ToolUsertoursResetTour200Response>> ToolUsertoursResetTourWithHttpInfoAsync(ToolUsertoursResetTourRequest toolUsertoursResetTourRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mark the specified step as completed for the current user
        /// </summary>
        /// <remarks>
        /// Mark the specified step as completed for the current user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursStepShownRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ToolUsertoursStepShownAsync(ToolUsertoursStepShownRequest toolUsertoursStepShownRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark the specified step as completed for the current user
        /// </summary>
        /// <remarks>
        /// Mark the specified step as completed for the current user
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursStepShownRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ToolUsertoursStepShownWithHttpInfoAsync(ToolUsertoursStepShownRequest toolUsertoursStepShownRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IToolUsertoursApi : IToolUsertoursApiSync, IToolUsertoursApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ToolUsertoursApi : IToolUsertoursApi
    {
        private MoodleClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolUsertoursApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolUsertoursApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolUsertoursApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolUsertoursApi(string basePath)
        {
            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                new MoodleClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolUsertoursApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ToolUsertoursApi(MoodleClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolUsertoursApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ToolUsertoursApi(MoodleClient.Client.ISynchronousClient client, MoodleClient.Client.IAsynchronousClient asyncClient, MoodleClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MoodleClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MoodleClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MoodleClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MoodleClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Mark the specified tour as completed for the current user Mark the specified tour as completed for the current user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursCompleteTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ToolUsertoursCompleteTour(ToolUsertoursCompleteTourRequest toolUsertoursCompleteTourRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ToolUsertoursCompleteTourWithHttpInfo(toolUsertoursCompleteTourRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark the specified tour as completed for the current user Mark the specified tour as completed for the current user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursCompleteTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ToolUsertoursCompleteTourWithHttpInfo(ToolUsertoursCompleteTourRequest toolUsertoursCompleteTourRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolUsertoursCompleteTourRequest' is set
            if (toolUsertoursCompleteTourRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolUsertoursCompleteTourRequest' when calling ToolUsertoursApi->ToolUsertoursCompleteTour");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolUsertoursCompleteTourRequest;

            localVarRequestOptions.Operation = "ToolUsertoursApi.ToolUsertoursCompleteTour";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tool_usertours_complete_tour", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolUsertoursCompleteTour", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark the specified tour as completed for the current user Mark the specified tour as completed for the current user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursCompleteTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ToolUsertoursCompleteTourAsync(ToolUsertoursCompleteTourRequest toolUsertoursCompleteTourRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ToolUsertoursCompleteTourWithHttpInfoAsync(toolUsertoursCompleteTourRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark the specified tour as completed for the current user Mark the specified tour as completed for the current user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursCompleteTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ToolUsertoursCompleteTourWithHttpInfoAsync(ToolUsertoursCompleteTourRequest toolUsertoursCompleteTourRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolUsertoursCompleteTourRequest' is set
            if (toolUsertoursCompleteTourRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolUsertoursCompleteTourRequest' when calling ToolUsertoursApi->ToolUsertoursCompleteTour");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolUsertoursCompleteTourRequest;

            localVarRequestOptions.Operation = "ToolUsertoursApi.ToolUsertoursCompleteTour";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tool_usertours_complete_tour", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolUsertoursCompleteTour", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the specified tour Fetch the specified tour
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursFetchAndStartTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolUsertoursFetchAndStartTour200Response</returns>
        public ToolUsertoursFetchAndStartTour200Response ToolUsertoursFetchAndStartTour(ToolUsertoursFetchAndStartTourRequest toolUsertoursFetchAndStartTourRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ToolUsertoursFetchAndStartTour200Response> localVarResponse = ToolUsertoursFetchAndStartTourWithHttpInfo(toolUsertoursFetchAndStartTourRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the specified tour Fetch the specified tour
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursFetchAndStartTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolUsertoursFetchAndStartTour200Response</returns>
        public MoodleClient.Client.ApiResponse<ToolUsertoursFetchAndStartTour200Response> ToolUsertoursFetchAndStartTourWithHttpInfo(ToolUsertoursFetchAndStartTourRequest toolUsertoursFetchAndStartTourRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolUsertoursFetchAndStartTourRequest' is set
            if (toolUsertoursFetchAndStartTourRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolUsertoursFetchAndStartTourRequest' when calling ToolUsertoursApi->ToolUsertoursFetchAndStartTour");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolUsertoursFetchAndStartTourRequest;

            localVarRequestOptions.Operation = "ToolUsertoursApi.ToolUsertoursFetchAndStartTour";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolUsertoursFetchAndStartTour200Response>("/tool_usertours_fetch_and_start_tour", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolUsertoursFetchAndStartTour", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the specified tour Fetch the specified tour
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursFetchAndStartTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolUsertoursFetchAndStartTour200Response</returns>
        public async System.Threading.Tasks.Task<ToolUsertoursFetchAndStartTour200Response> ToolUsertoursFetchAndStartTourAsync(ToolUsertoursFetchAndStartTourRequest toolUsertoursFetchAndStartTourRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ToolUsertoursFetchAndStartTour200Response> localVarResponse = await ToolUsertoursFetchAndStartTourWithHttpInfoAsync(toolUsertoursFetchAndStartTourRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the specified tour Fetch the specified tour
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursFetchAndStartTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolUsertoursFetchAndStartTour200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ToolUsertoursFetchAndStartTour200Response>> ToolUsertoursFetchAndStartTourWithHttpInfoAsync(ToolUsertoursFetchAndStartTourRequest toolUsertoursFetchAndStartTourRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolUsertoursFetchAndStartTourRequest' is set
            if (toolUsertoursFetchAndStartTourRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolUsertoursFetchAndStartTourRequest' when calling ToolUsertoursApi->ToolUsertoursFetchAndStartTour");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolUsertoursFetchAndStartTourRequest;

            localVarRequestOptions.Operation = "ToolUsertoursApi.ToolUsertoursFetchAndStartTour";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolUsertoursFetchAndStartTour200Response>("/tool_usertours_fetch_and_start_tour", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolUsertoursFetchAndStartTour", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove the specified tour Remove the specified tour
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursResetTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ToolUsertoursResetTour200Response</returns>
        public ToolUsertoursResetTour200Response ToolUsertoursResetTour(ToolUsertoursResetTourRequest toolUsertoursResetTourRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ToolUsertoursResetTour200Response> localVarResponse = ToolUsertoursResetTourWithHttpInfo(toolUsertoursResetTourRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove the specified tour Remove the specified tour
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursResetTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ToolUsertoursResetTour200Response</returns>
        public MoodleClient.Client.ApiResponse<ToolUsertoursResetTour200Response> ToolUsertoursResetTourWithHttpInfo(ToolUsertoursResetTourRequest toolUsertoursResetTourRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolUsertoursResetTourRequest' is set
            if (toolUsertoursResetTourRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolUsertoursResetTourRequest' when calling ToolUsertoursApi->ToolUsertoursResetTour");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolUsertoursResetTourRequest;

            localVarRequestOptions.Operation = "ToolUsertoursApi.ToolUsertoursResetTour";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ToolUsertoursResetTour200Response>("/tool_usertours_reset_tour", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolUsertoursResetTour", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove the specified tour Remove the specified tour
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursResetTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ToolUsertoursResetTour200Response</returns>
        public async System.Threading.Tasks.Task<ToolUsertoursResetTour200Response> ToolUsertoursResetTourAsync(ToolUsertoursResetTourRequest toolUsertoursResetTourRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ToolUsertoursResetTour200Response> localVarResponse = await ToolUsertoursResetTourWithHttpInfoAsync(toolUsertoursResetTourRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove the specified tour Remove the specified tour
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursResetTourRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ToolUsertoursResetTour200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ToolUsertoursResetTour200Response>> ToolUsertoursResetTourWithHttpInfoAsync(ToolUsertoursResetTourRequest toolUsertoursResetTourRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolUsertoursResetTourRequest' is set
            if (toolUsertoursResetTourRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolUsertoursResetTourRequest' when calling ToolUsertoursApi->ToolUsertoursResetTour");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolUsertoursResetTourRequest;

            localVarRequestOptions.Operation = "ToolUsertoursApi.ToolUsertoursResetTour";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ToolUsertoursResetTour200Response>("/tool_usertours_reset_tour", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolUsertoursResetTour", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark the specified step as completed for the current user Mark the specified step as completed for the current user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursStepShownRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ToolUsertoursStepShown(ToolUsertoursStepShownRequest toolUsertoursStepShownRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = ToolUsertoursStepShownWithHttpInfo(toolUsertoursStepShownRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark the specified step as completed for the current user Mark the specified step as completed for the current user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursStepShownRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public MoodleClient.Client.ApiResponse<Object> ToolUsertoursStepShownWithHttpInfo(ToolUsertoursStepShownRequest toolUsertoursStepShownRequest, int operationIndex = 0)
        {
            // verify the required parameter 'toolUsertoursStepShownRequest' is set
            if (toolUsertoursStepShownRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolUsertoursStepShownRequest' when calling ToolUsertoursApi->ToolUsertoursStepShown");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolUsertoursStepShownRequest;

            localVarRequestOptions.Operation = "ToolUsertoursApi.ToolUsertoursStepShown";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tool_usertours_step_shown", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolUsertoursStepShown", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark the specified step as completed for the current user Mark the specified step as completed for the current user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursStepShownRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ToolUsertoursStepShownAsync(ToolUsertoursStepShownRequest toolUsertoursStepShownRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<Object> localVarResponse = await ToolUsertoursStepShownWithHttpInfoAsync(toolUsertoursStepShownRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark the specified step as completed for the current user Mark the specified step as completed for the current user
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolUsertoursStepShownRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<Object>> ToolUsertoursStepShownWithHttpInfoAsync(ToolUsertoursStepShownRequest toolUsertoursStepShownRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'toolUsertoursStepShownRequest' is set
            if (toolUsertoursStepShownRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'toolUsertoursStepShownRequest' when calling ToolUsertoursApi->ToolUsertoursStepShown");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = toolUsertoursStepShownRequest;

            localVarRequestOptions.Operation = "ToolUsertoursApi.ToolUsertoursStepShown";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tool_usertours_step_shown", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToolUsertoursStepShown", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
