/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using MoodleClient.Client;
using MoodleClient.Model;

namespace MoodleClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModGlossaryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new entry to a given glossary
        /// </summary>
        /// <remarks>
        /// Add a new entry to a given glossary
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryAddEntry200Response</returns>
        ModGlossaryAddEntry200Response ModGlossaryAddEntry(ModGlossaryAddEntryRequest modGlossaryAddEntryRequest, int operationIndex = 0);

        /// <summary>
        /// Add a new entry to a given glossary
        /// </summary>
        /// <remarks>
        /// Add a new entry to a given glossary
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryAddEntry200Response</returns>
        ApiResponse<ModGlossaryAddEntry200Response> ModGlossaryAddEntryWithHttpInfo(ModGlossaryAddEntryRequest modGlossaryAddEntryRequest, int operationIndex = 0);
        /// <summary>
        /// Delete the given entry from the glossary.
        /// </summary>
        /// <remarks>
        /// Delete the given entry from the glossary.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        CoreContentbankRenameContent200Response ModGlossaryDeleteEntry(ModGlossaryDeleteEntryRequest modGlossaryDeleteEntryRequest, int operationIndex = 0);

        /// <summary>
        /// Delete the given entry from the glossary.
        /// </summary>
        /// <remarks>
        /// Delete the given entry from the glossary.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        ApiResponse<CoreContentbankRenameContent200Response> ModGlossaryDeleteEntryWithHttpInfo(ModGlossaryDeleteEntryRequest modGlossaryDeleteEntryRequest, int operationIndex = 0);
        /// <summary>
        /// Get the authors.
        /// </summary>
        /// <remarks>
        /// Get the authors.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetAuthorsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetAuthors200Response</returns>
        ModGlossaryGetAuthors200Response ModGlossaryGetAuthors(ModGlossaryGetAuthorsRequest modGlossaryGetAuthorsRequest, int operationIndex = 0);

        /// <summary>
        /// Get the authors.
        /// </summary>
        /// <remarks>
        /// Get the authors.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetAuthorsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetAuthors200Response</returns>
        ApiResponse<ModGlossaryGetAuthors200Response> ModGlossaryGetAuthorsWithHttpInfo(ModGlossaryGetAuthorsRequest modGlossaryGetAuthorsRequest, int operationIndex = 0);
        /// <summary>
        /// Get the categories.
        /// </summary>
        /// <remarks>
        /// Get the categories.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetCategoriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetCategories200Response</returns>
        ModGlossaryGetCategories200Response ModGlossaryGetCategories(ModGlossaryGetCategoriesRequest modGlossaryGetCategoriesRequest, int operationIndex = 0);

        /// <summary>
        /// Get the categories.
        /// </summary>
        /// <remarks>
        /// Get the categories.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetCategoriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetCategories200Response</returns>
        ApiResponse<ModGlossaryGetCategories200Response> ModGlossaryGetCategoriesWithHttpInfo(ModGlossaryGetCategoriesRequest modGlossaryGetCategoriesRequest, int operationIndex = 0);
        /// <summary>
        /// Browse entries by author.
        /// </summary>
        /// <remarks>
        /// Browse entries by author.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByAuthor200Response</returns>
        ModGlossaryGetEntriesByAuthor200Response ModGlossaryGetEntriesByAuthor(ModGlossaryGetEntriesByAuthorRequest modGlossaryGetEntriesByAuthorRequest, int operationIndex = 0);

        /// <summary>
        /// Browse entries by author.
        /// </summary>
        /// <remarks>
        /// Browse entries by author.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByAuthor200Response</returns>
        ApiResponse<ModGlossaryGetEntriesByAuthor200Response> ModGlossaryGetEntriesByAuthorWithHttpInfo(ModGlossaryGetEntriesByAuthorRequest modGlossaryGetEntriesByAuthorRequest, int operationIndex = 0);
        /// <summary>
        /// Browse entries by author ID.
        /// </summary>
        /// <remarks>
        /// Browse entries by author ID.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByAuthorId200Response</returns>
        ModGlossaryGetEntriesByAuthorId200Response ModGlossaryGetEntriesByAuthorId(ModGlossaryGetEntriesByAuthorIdRequest modGlossaryGetEntriesByAuthorIdRequest, int operationIndex = 0);

        /// <summary>
        /// Browse entries by author ID.
        /// </summary>
        /// <remarks>
        /// Browse entries by author ID.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByAuthorId200Response</returns>
        ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByAuthorIdWithHttpInfo(ModGlossaryGetEntriesByAuthorIdRequest modGlossaryGetEntriesByAuthorIdRequest, int operationIndex = 0);
        /// <summary>
        /// Browse entries by category.
        /// </summary>
        /// <remarks>
        /// Browse entries by category.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByCategory200Response</returns>
        ModGlossaryGetEntriesByCategory200Response ModGlossaryGetEntriesByCategory(ModGlossaryGetEntriesByCategoryRequest modGlossaryGetEntriesByCategoryRequest, int operationIndex = 0);

        /// <summary>
        /// Browse entries by category.
        /// </summary>
        /// <remarks>
        /// Browse entries by category.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByCategory200Response</returns>
        ApiResponse<ModGlossaryGetEntriesByCategory200Response> ModGlossaryGetEntriesByCategoryWithHttpInfo(ModGlossaryGetEntriesByCategoryRequest modGlossaryGetEntriesByCategoryRequest, int operationIndex = 0);
        /// <summary>
        /// Browse entries by date.
        /// </summary>
        /// <remarks>
        /// Browse entries by date.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByDateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByAuthorId200Response</returns>
        ModGlossaryGetEntriesByAuthorId200Response ModGlossaryGetEntriesByDate(ModGlossaryGetEntriesByDateRequest modGlossaryGetEntriesByDateRequest, int operationIndex = 0);

        /// <summary>
        /// Browse entries by date.
        /// </summary>
        /// <remarks>
        /// Browse entries by date.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByDateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByAuthorId200Response</returns>
        ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByDateWithHttpInfo(ModGlossaryGetEntriesByDateRequest modGlossaryGetEntriesByDateRequest, int operationIndex = 0);
        /// <summary>
        /// Browse entries by letter.
        /// </summary>
        /// <remarks>
        /// Browse entries by letter.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByLetterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByAuthorId200Response</returns>
        ModGlossaryGetEntriesByAuthorId200Response ModGlossaryGetEntriesByLetter(ModGlossaryGetEntriesByLetterRequest modGlossaryGetEntriesByLetterRequest, int operationIndex = 0);

        /// <summary>
        /// Browse entries by letter.
        /// </summary>
        /// <remarks>
        /// Browse entries by letter.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByLetterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByAuthorId200Response</returns>
        ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByLetterWithHttpInfo(ModGlossaryGetEntriesByLetterRequest modGlossaryGetEntriesByLetterRequest, int operationIndex = 0);
        /// <summary>
        /// Browse entries by search query.
        /// </summary>
        /// <remarks>
        /// Browse entries by search query.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesBySearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByAuthorId200Response</returns>
        ModGlossaryGetEntriesByAuthorId200Response ModGlossaryGetEntriesBySearch(ModGlossaryGetEntriesBySearchRequest modGlossaryGetEntriesBySearchRequest, int operationIndex = 0);

        /// <summary>
        /// Browse entries by search query.
        /// </summary>
        /// <remarks>
        /// Browse entries by search query.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesBySearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByAuthorId200Response</returns>
        ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesBySearchWithHttpInfo(ModGlossaryGetEntriesBySearchRequest modGlossaryGetEntriesBySearchRequest, int operationIndex = 0);
        /// <summary>
        /// Browse entries by term (concept or alias).
        /// </summary>
        /// <remarks>
        /// Browse entries by term (concept or alias).
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByTermRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByAuthorId200Response</returns>
        ModGlossaryGetEntriesByAuthorId200Response ModGlossaryGetEntriesByTerm(ModGlossaryGetEntriesByTermRequest modGlossaryGetEntriesByTermRequest, int operationIndex = 0);

        /// <summary>
        /// Browse entries by term (concept or alias).
        /// </summary>
        /// <remarks>
        /// Browse entries by term (concept or alias).
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByTermRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByAuthorId200Response</returns>
        ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByTermWithHttpInfo(ModGlossaryGetEntriesByTermRequest modGlossaryGetEntriesByTermRequest, int operationIndex = 0);
        /// <summary>
        /// Browse entries to be approved.
        /// </summary>
        /// <remarks>
        /// Browse entries to be approved.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesToApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByAuthorId200Response</returns>
        ModGlossaryGetEntriesByAuthorId200Response ModGlossaryGetEntriesToApprove(ModGlossaryGetEntriesToApproveRequest modGlossaryGetEntriesToApproveRequest, int operationIndex = 0);

        /// <summary>
        /// Browse entries to be approved.
        /// </summary>
        /// <remarks>
        /// Browse entries to be approved.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesToApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByAuthorId200Response</returns>
        ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesToApproveWithHttpInfo(ModGlossaryGetEntriesToApproveRequest modGlossaryGetEntriesToApproveRequest, int operationIndex = 0);
        /// <summary>
        /// Get an entry by ID
        /// </summary>
        /// <remarks>
        /// Get an entry by ID
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntryById200Response</returns>
        ModGlossaryGetEntryById200Response ModGlossaryGetEntryById(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0);

        /// <summary>
        /// Get an entry by ID
        /// </summary>
        /// <remarks>
        /// Get an entry by ID
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntryById200Response</returns>
        ApiResponse<ModGlossaryGetEntryById200Response> ModGlossaryGetEntryByIdWithHttpInfo(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve a list of glossaries from several courses.
        /// </summary>
        /// <remarks>
        /// Retrieve a list of glossaries from several courses.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetGlossariesByCourses200Response</returns>
        ModGlossaryGetGlossariesByCourses200Response ModGlossaryGetGlossariesByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieve a list of glossaries from several courses.
        /// </summary>
        /// <remarks>
        /// Retrieve a list of glossaries from several courses.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetGlossariesByCourses200Response</returns>
        ApiResponse<ModGlossaryGetGlossariesByCourses200Response> ModGlossaryGetGlossariesByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0);
        /// <summary>
        /// Prepares the given entry for edition returning draft item areas and file areas information.
        /// </summary>
        /// <remarks>
        /// Prepares the given entry for edition returning draft item areas and file areas information.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryPrepareEntryForEditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryPrepareEntryForEdition200Response</returns>
        ModGlossaryPrepareEntryForEdition200Response ModGlossaryPrepareEntryForEdition(ModGlossaryPrepareEntryForEditionRequest modGlossaryPrepareEntryForEditionRequest, int operationIndex = 0);

        /// <summary>
        /// Prepares the given entry for edition returning draft item areas and file areas information.
        /// </summary>
        /// <remarks>
        /// Prepares the given entry for edition returning draft item areas and file areas information.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryPrepareEntryForEditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryPrepareEntryForEdition200Response</returns>
        ApiResponse<ModGlossaryPrepareEntryForEdition200Response> ModGlossaryPrepareEntryForEditionWithHttpInfo(ModGlossaryPrepareEntryForEditionRequest modGlossaryPrepareEntryForEditionRequest, int operationIndex = 0);
        /// <summary>
        /// Updates the given glossary entry.
        /// </summary>
        /// <remarks>
        /// Updates the given glossary entry.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryUpdateEntry200Response</returns>
        ModGlossaryUpdateEntry200Response ModGlossaryUpdateEntry(ModGlossaryUpdateEntryRequest modGlossaryUpdateEntryRequest, int operationIndex = 0);

        /// <summary>
        /// Updates the given glossary entry.
        /// </summary>
        /// <remarks>
        /// Updates the given glossary entry.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryUpdateEntry200Response</returns>
        ApiResponse<ModGlossaryUpdateEntry200Response> ModGlossaryUpdateEntryWithHttpInfo(ModGlossaryUpdateEntryRequest modGlossaryUpdateEntryRequest, int operationIndex = 0);
        /// <summary>
        /// Notify a glossary entry as being viewed.
        /// </summary>
        /// <remarks>
        /// Notify a glossary entry as being viewed.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryViewEntry200Response</returns>
        ModGlossaryViewEntry200Response ModGlossaryViewEntry(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0);

        /// <summary>
        /// Notify a glossary entry as being viewed.
        /// </summary>
        /// <remarks>
        /// Notify a glossary entry as being viewed.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryViewEntry200Response</returns>
        ApiResponse<ModGlossaryViewEntry200Response> ModGlossaryViewEntryWithHttpInfo(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0);
        /// <summary>
        /// Notify the glossary as being viewed.
        /// </summary>
        /// <remarks>
        /// Notify the glossary as being viewed.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryViewGlossaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryViewGlossary200Response</returns>
        ModGlossaryViewGlossary200Response ModGlossaryViewGlossary(ModGlossaryViewGlossaryRequest modGlossaryViewGlossaryRequest, int operationIndex = 0);

        /// <summary>
        /// Notify the glossary as being viewed.
        /// </summary>
        /// <remarks>
        /// Notify the glossary as being viewed.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryViewGlossaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryViewGlossary200Response</returns>
        ApiResponse<ModGlossaryViewGlossary200Response> ModGlossaryViewGlossaryWithHttpInfo(ModGlossaryViewGlossaryRequest modGlossaryViewGlossaryRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModGlossaryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a new entry to a given glossary
        /// </summary>
        /// <remarks>
        /// Add a new entry to a given glossary
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryAddEntry200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryAddEntry200Response> ModGlossaryAddEntryAsync(ModGlossaryAddEntryRequest modGlossaryAddEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new entry to a given glossary
        /// </summary>
        /// <remarks>
        /// Add a new entry to a given glossary
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryAddEntry200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryAddEntry200Response>> ModGlossaryAddEntryWithHttpInfoAsync(ModGlossaryAddEntryRequest modGlossaryAddEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete the given entry from the glossary.
        /// </summary>
        /// <remarks>
        /// Delete the given entry from the glossary.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ModGlossaryDeleteEntryAsync(ModGlossaryDeleteEntryRequest modGlossaryDeleteEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete the given entry from the glossary.
        /// </summary>
        /// <remarks>
        /// Delete the given entry from the glossary.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CoreContentbankRenameContent200Response>> ModGlossaryDeleteEntryWithHttpInfoAsync(ModGlossaryDeleteEntryRequest modGlossaryDeleteEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the authors.
        /// </summary>
        /// <remarks>
        /// Get the authors.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetAuthorsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetAuthors200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryGetAuthors200Response> ModGlossaryGetAuthorsAsync(ModGlossaryGetAuthorsRequest modGlossaryGetAuthorsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the authors.
        /// </summary>
        /// <remarks>
        /// Get the authors.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetAuthorsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetAuthors200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryGetAuthors200Response>> ModGlossaryGetAuthorsWithHttpInfoAsync(ModGlossaryGetAuthorsRequest modGlossaryGetAuthorsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the categories.
        /// </summary>
        /// <remarks>
        /// Get the categories.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetCategoriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetCategories200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryGetCategories200Response> ModGlossaryGetCategoriesAsync(ModGlossaryGetCategoriesRequest modGlossaryGetCategoriesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the categories.
        /// </summary>
        /// <remarks>
        /// Get the categories.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetCategoriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetCategories200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryGetCategories200Response>> ModGlossaryGetCategoriesWithHttpInfoAsync(ModGlossaryGetCategoriesRequest modGlossaryGetCategoriesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Browse entries by author.
        /// </summary>
        /// <remarks>
        /// Browse entries by author.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByAuthor200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryGetEntriesByAuthor200Response> ModGlossaryGetEntriesByAuthorAsync(ModGlossaryGetEntriesByAuthorRequest modGlossaryGetEntriesByAuthorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Browse entries by author.
        /// </summary>
        /// <remarks>
        /// Browse entries by author.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByAuthor200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryGetEntriesByAuthor200Response>> ModGlossaryGetEntriesByAuthorWithHttpInfoAsync(ModGlossaryGetEntriesByAuthorRequest modGlossaryGetEntriesByAuthorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Browse entries by author ID.
        /// </summary>
        /// <remarks>
        /// Browse entries by author ID.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByAuthorId200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByAuthorIdAsync(ModGlossaryGetEntriesByAuthorIdRequest modGlossaryGetEntriesByAuthorIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Browse entries by author ID.
        /// </summary>
        /// <remarks>
        /// Browse entries by author ID.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByAuthorId200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> ModGlossaryGetEntriesByAuthorIdWithHttpInfoAsync(ModGlossaryGetEntriesByAuthorIdRequest modGlossaryGetEntriesByAuthorIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Browse entries by category.
        /// </summary>
        /// <remarks>
        /// Browse entries by category.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByCategory200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryGetEntriesByCategory200Response> ModGlossaryGetEntriesByCategoryAsync(ModGlossaryGetEntriesByCategoryRequest modGlossaryGetEntriesByCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Browse entries by category.
        /// </summary>
        /// <remarks>
        /// Browse entries by category.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByCategory200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryGetEntriesByCategory200Response>> ModGlossaryGetEntriesByCategoryWithHttpInfoAsync(ModGlossaryGetEntriesByCategoryRequest modGlossaryGetEntriesByCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Browse entries by date.
        /// </summary>
        /// <remarks>
        /// Browse entries by date.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByDateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByAuthorId200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByDateAsync(ModGlossaryGetEntriesByDateRequest modGlossaryGetEntriesByDateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Browse entries by date.
        /// </summary>
        /// <remarks>
        /// Browse entries by date.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByDateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByAuthorId200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> ModGlossaryGetEntriesByDateWithHttpInfoAsync(ModGlossaryGetEntriesByDateRequest modGlossaryGetEntriesByDateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Browse entries by letter.
        /// </summary>
        /// <remarks>
        /// Browse entries by letter.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByLetterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByAuthorId200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByLetterAsync(ModGlossaryGetEntriesByLetterRequest modGlossaryGetEntriesByLetterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Browse entries by letter.
        /// </summary>
        /// <remarks>
        /// Browse entries by letter.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByLetterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByAuthorId200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> ModGlossaryGetEntriesByLetterWithHttpInfoAsync(ModGlossaryGetEntriesByLetterRequest modGlossaryGetEntriesByLetterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Browse entries by search query.
        /// </summary>
        /// <remarks>
        /// Browse entries by search query.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesBySearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByAuthorId200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesBySearchAsync(ModGlossaryGetEntriesBySearchRequest modGlossaryGetEntriesBySearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Browse entries by search query.
        /// </summary>
        /// <remarks>
        /// Browse entries by search query.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesBySearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByAuthorId200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> ModGlossaryGetEntriesBySearchWithHttpInfoAsync(ModGlossaryGetEntriesBySearchRequest modGlossaryGetEntriesBySearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Browse entries by term (concept or alias).
        /// </summary>
        /// <remarks>
        /// Browse entries by term (concept or alias).
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByTermRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByAuthorId200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByTermAsync(ModGlossaryGetEntriesByTermRequest modGlossaryGetEntriesByTermRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Browse entries by term (concept or alias).
        /// </summary>
        /// <remarks>
        /// Browse entries by term (concept or alias).
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByTermRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByAuthorId200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> ModGlossaryGetEntriesByTermWithHttpInfoAsync(ModGlossaryGetEntriesByTermRequest modGlossaryGetEntriesByTermRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Browse entries to be approved.
        /// </summary>
        /// <remarks>
        /// Browse entries to be approved.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesToApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByAuthorId200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesToApproveAsync(ModGlossaryGetEntriesToApproveRequest modGlossaryGetEntriesToApproveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Browse entries to be approved.
        /// </summary>
        /// <remarks>
        /// Browse entries to be approved.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesToApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByAuthorId200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> ModGlossaryGetEntriesToApproveWithHttpInfoAsync(ModGlossaryGetEntriesToApproveRequest modGlossaryGetEntriesToApproveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an entry by ID
        /// </summary>
        /// <remarks>
        /// Get an entry by ID
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntryById200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryGetEntryById200Response> ModGlossaryGetEntryByIdAsync(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an entry by ID
        /// </summary>
        /// <remarks>
        /// Get an entry by ID
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntryById200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryGetEntryById200Response>> ModGlossaryGetEntryByIdWithHttpInfoAsync(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a list of glossaries from several courses.
        /// </summary>
        /// <remarks>
        /// Retrieve a list of glossaries from several courses.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetGlossariesByCourses200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryGetGlossariesByCourses200Response> ModGlossaryGetGlossariesByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a list of glossaries from several courses.
        /// </summary>
        /// <remarks>
        /// Retrieve a list of glossaries from several courses.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetGlossariesByCourses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryGetGlossariesByCourses200Response>> ModGlossaryGetGlossariesByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Prepares the given entry for edition returning draft item areas and file areas information.
        /// </summary>
        /// <remarks>
        /// Prepares the given entry for edition returning draft item areas and file areas information.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryPrepareEntryForEditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryPrepareEntryForEdition200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryPrepareEntryForEdition200Response> ModGlossaryPrepareEntryForEditionAsync(ModGlossaryPrepareEntryForEditionRequest modGlossaryPrepareEntryForEditionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Prepares the given entry for edition returning draft item areas and file areas information.
        /// </summary>
        /// <remarks>
        /// Prepares the given entry for edition returning draft item areas and file areas information.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryPrepareEntryForEditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryPrepareEntryForEdition200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryPrepareEntryForEdition200Response>> ModGlossaryPrepareEntryForEditionWithHttpInfoAsync(ModGlossaryPrepareEntryForEditionRequest modGlossaryPrepareEntryForEditionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the given glossary entry.
        /// </summary>
        /// <remarks>
        /// Updates the given glossary entry.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryUpdateEntry200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryUpdateEntry200Response> ModGlossaryUpdateEntryAsync(ModGlossaryUpdateEntryRequest modGlossaryUpdateEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the given glossary entry.
        /// </summary>
        /// <remarks>
        /// Updates the given glossary entry.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryUpdateEntry200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryUpdateEntry200Response>> ModGlossaryUpdateEntryWithHttpInfoAsync(ModGlossaryUpdateEntryRequest modGlossaryUpdateEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Notify a glossary entry as being viewed.
        /// </summary>
        /// <remarks>
        /// Notify a glossary entry as being viewed.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryViewEntry200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryViewEntry200Response> ModGlossaryViewEntryAsync(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Notify a glossary entry as being viewed.
        /// </summary>
        /// <remarks>
        /// Notify a glossary entry as being viewed.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryViewEntry200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryViewEntry200Response>> ModGlossaryViewEntryWithHttpInfoAsync(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Notify the glossary as being viewed.
        /// </summary>
        /// <remarks>
        /// Notify the glossary as being viewed.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryViewGlossaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryViewGlossary200Response</returns>
        System.Threading.Tasks.Task<ModGlossaryViewGlossary200Response> ModGlossaryViewGlossaryAsync(ModGlossaryViewGlossaryRequest modGlossaryViewGlossaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Notify the glossary as being viewed.
        /// </summary>
        /// <remarks>
        /// Notify the glossary as being viewed.
        /// </remarks>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryViewGlossaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryViewGlossary200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModGlossaryViewGlossary200Response>> ModGlossaryViewGlossaryWithHttpInfoAsync(ModGlossaryViewGlossaryRequest modGlossaryViewGlossaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModGlossaryApi : IModGlossaryApiSync, IModGlossaryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModGlossaryApi : IModGlossaryApi
    {
        private MoodleClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModGlossaryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModGlossaryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModGlossaryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModGlossaryApi(string basePath)
        {
            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                new MoodleClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModGlossaryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModGlossaryApi(MoodleClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = MoodleClient.Client.Configuration.MergeConfigurations(
                MoodleClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new MoodleClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModGlossaryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ModGlossaryApi(MoodleClient.Client.ISynchronousClient client, MoodleClient.Client.IAsynchronousClient asyncClient, MoodleClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = MoodleClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public MoodleClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public MoodleClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MoodleClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MoodleClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a new entry to a given glossary Add a new entry to a given glossary
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryAddEntry200Response</returns>
        public ModGlossaryAddEntry200Response ModGlossaryAddEntry(ModGlossaryAddEntryRequest modGlossaryAddEntryRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryAddEntry200Response> localVarResponse = ModGlossaryAddEntryWithHttpInfo(modGlossaryAddEntryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new entry to a given glossary Add a new entry to a given glossary
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryAddEntry200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryAddEntry200Response> ModGlossaryAddEntryWithHttpInfo(ModGlossaryAddEntryRequest modGlossaryAddEntryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryAddEntryRequest' is set
            if (modGlossaryAddEntryRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryAddEntryRequest' when calling ModGlossaryApi->ModGlossaryAddEntry");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryAddEntryRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryAddEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryAddEntry200Response>("/mod_glossary_add_entry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryAddEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new entry to a given glossary Add a new entry to a given glossary
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryAddEntry200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryAddEntry200Response> ModGlossaryAddEntryAsync(ModGlossaryAddEntryRequest modGlossaryAddEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryAddEntry200Response> localVarResponse = await ModGlossaryAddEntryWithHttpInfoAsync(modGlossaryAddEntryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new entry to a given glossary Add a new entry to a given glossary
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryAddEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryAddEntry200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryAddEntry200Response>> ModGlossaryAddEntryWithHttpInfoAsync(ModGlossaryAddEntryRequest modGlossaryAddEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryAddEntryRequest' is set
            if (modGlossaryAddEntryRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryAddEntryRequest' when calling ModGlossaryApi->ModGlossaryAddEntry");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryAddEntryRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryAddEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryAddEntry200Response>("/mod_glossary_add_entry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryAddEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the given entry from the glossary. Delete the given entry from the glossary.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CoreContentbankRenameContent200Response</returns>
        public CoreContentbankRenameContent200Response ModGlossaryDeleteEntry(ModGlossaryDeleteEntryRequest modGlossaryDeleteEntryRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = ModGlossaryDeleteEntryWithHttpInfo(modGlossaryDeleteEntryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the given entry from the glossary. Delete the given entry from the glossary.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CoreContentbankRenameContent200Response</returns>
        public MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> ModGlossaryDeleteEntryWithHttpInfo(ModGlossaryDeleteEntryRequest modGlossaryDeleteEntryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryDeleteEntryRequest' is set
            if (modGlossaryDeleteEntryRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryDeleteEntryRequest' when calling ModGlossaryApi->ModGlossaryDeleteEntry");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryDeleteEntryRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryDeleteEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CoreContentbankRenameContent200Response>("/mod_glossary_delete_entry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryDeleteEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the given entry from the glossary. Delete the given entry from the glossary.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CoreContentbankRenameContent200Response</returns>
        public async System.Threading.Tasks.Task<CoreContentbankRenameContent200Response> ModGlossaryDeleteEntryAsync(ModGlossaryDeleteEntryRequest modGlossaryDeleteEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response> localVarResponse = await ModGlossaryDeleteEntryWithHttpInfoAsync(modGlossaryDeleteEntryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the given entry from the glossary. Delete the given entry from the glossary.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryDeleteEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CoreContentbankRenameContent200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<CoreContentbankRenameContent200Response>> ModGlossaryDeleteEntryWithHttpInfoAsync(ModGlossaryDeleteEntryRequest modGlossaryDeleteEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryDeleteEntryRequest' is set
            if (modGlossaryDeleteEntryRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryDeleteEntryRequest' when calling ModGlossaryApi->ModGlossaryDeleteEntry");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryDeleteEntryRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryDeleteEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CoreContentbankRenameContent200Response>("/mod_glossary_delete_entry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryDeleteEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the authors. Get the authors.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetAuthorsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetAuthors200Response</returns>
        public ModGlossaryGetAuthors200Response ModGlossaryGetAuthors(ModGlossaryGetAuthorsRequest modGlossaryGetAuthorsRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetAuthors200Response> localVarResponse = ModGlossaryGetAuthorsWithHttpInfo(modGlossaryGetAuthorsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the authors. Get the authors.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetAuthorsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetAuthors200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryGetAuthors200Response> ModGlossaryGetAuthorsWithHttpInfo(ModGlossaryGetAuthorsRequest modGlossaryGetAuthorsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryGetAuthorsRequest' is set
            if (modGlossaryGetAuthorsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetAuthorsRequest' when calling ModGlossaryApi->ModGlossaryGetAuthors");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetAuthorsRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetAuthors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryGetAuthors200Response>("/mod_glossary_get_authors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetAuthors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the authors. Get the authors.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetAuthorsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetAuthors200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryGetAuthors200Response> ModGlossaryGetAuthorsAsync(ModGlossaryGetAuthorsRequest modGlossaryGetAuthorsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetAuthors200Response> localVarResponse = await ModGlossaryGetAuthorsWithHttpInfoAsync(modGlossaryGetAuthorsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the authors. Get the authors.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetAuthorsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetAuthors200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryGetAuthors200Response>> ModGlossaryGetAuthorsWithHttpInfoAsync(ModGlossaryGetAuthorsRequest modGlossaryGetAuthorsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryGetAuthorsRequest' is set
            if (modGlossaryGetAuthorsRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetAuthorsRequest' when calling ModGlossaryApi->ModGlossaryGetAuthors");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetAuthorsRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetAuthors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryGetAuthors200Response>("/mod_glossary_get_authors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetAuthors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the categories. Get the categories.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetCategoriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetCategories200Response</returns>
        public ModGlossaryGetCategories200Response ModGlossaryGetCategories(ModGlossaryGetCategoriesRequest modGlossaryGetCategoriesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetCategories200Response> localVarResponse = ModGlossaryGetCategoriesWithHttpInfo(modGlossaryGetCategoriesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the categories. Get the categories.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetCategoriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetCategories200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryGetCategories200Response> ModGlossaryGetCategoriesWithHttpInfo(ModGlossaryGetCategoriesRequest modGlossaryGetCategoriesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryGetCategoriesRequest' is set
            if (modGlossaryGetCategoriesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetCategoriesRequest' when calling ModGlossaryApi->ModGlossaryGetCategories");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetCategoriesRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryGetCategories200Response>("/mod_glossary_get_categories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the categories. Get the categories.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetCategoriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetCategories200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryGetCategories200Response> ModGlossaryGetCategoriesAsync(ModGlossaryGetCategoriesRequest modGlossaryGetCategoriesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetCategories200Response> localVarResponse = await ModGlossaryGetCategoriesWithHttpInfoAsync(modGlossaryGetCategoriesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the categories. Get the categories.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetCategoriesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetCategories200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryGetCategories200Response>> ModGlossaryGetCategoriesWithHttpInfoAsync(ModGlossaryGetCategoriesRequest modGlossaryGetCategoriesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryGetCategoriesRequest' is set
            if (modGlossaryGetCategoriesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetCategoriesRequest' when calling ModGlossaryApi->ModGlossaryGetCategories");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetCategoriesRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetCategories";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryGetCategories200Response>("/mod_glossary_get_categories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries by author. Browse entries by author.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByAuthor200Response</returns>
        public ModGlossaryGetEntriesByAuthor200Response ModGlossaryGetEntriesByAuthor(ModGlossaryGetEntriesByAuthorRequest modGlossaryGetEntriesByAuthorRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthor200Response> localVarResponse = ModGlossaryGetEntriesByAuthorWithHttpInfo(modGlossaryGetEntriesByAuthorRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries by author. Browse entries by author.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByAuthor200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthor200Response> ModGlossaryGetEntriesByAuthorWithHttpInfo(ModGlossaryGetEntriesByAuthorRequest modGlossaryGetEntriesByAuthorRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryGetEntriesByAuthorRequest' is set
            if (modGlossaryGetEntriesByAuthorRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesByAuthorRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesByAuthor");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesByAuthorRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesByAuthor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryGetEntriesByAuthor200Response>("/mod_glossary_get_entries_by_author", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesByAuthor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries by author. Browse entries by author.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByAuthor200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryGetEntriesByAuthor200Response> ModGlossaryGetEntriesByAuthorAsync(ModGlossaryGetEntriesByAuthorRequest modGlossaryGetEntriesByAuthorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthor200Response> localVarResponse = await ModGlossaryGetEntriesByAuthorWithHttpInfoAsync(modGlossaryGetEntriesByAuthorRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries by author. Browse entries by author.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByAuthor200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthor200Response>> ModGlossaryGetEntriesByAuthorWithHttpInfoAsync(ModGlossaryGetEntriesByAuthorRequest modGlossaryGetEntriesByAuthorRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryGetEntriesByAuthorRequest' is set
            if (modGlossaryGetEntriesByAuthorRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesByAuthorRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesByAuthor");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesByAuthorRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesByAuthor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryGetEntriesByAuthor200Response>("/mod_glossary_get_entries_by_author", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesByAuthor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries by author ID. Browse entries by author ID.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByAuthorId200Response</returns>
        public ModGlossaryGetEntriesByAuthorId200Response ModGlossaryGetEntriesByAuthorId(ModGlossaryGetEntriesByAuthorIdRequest modGlossaryGetEntriesByAuthorIdRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResponse = ModGlossaryGetEntriesByAuthorIdWithHttpInfo(modGlossaryGetEntriesByAuthorIdRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries by author ID. Browse entries by author ID.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByAuthorId200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByAuthorIdWithHttpInfo(ModGlossaryGetEntriesByAuthorIdRequest modGlossaryGetEntriesByAuthorIdRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryGetEntriesByAuthorIdRequest' is set
            if (modGlossaryGetEntriesByAuthorIdRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesByAuthorIdRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesByAuthorId");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesByAuthorIdRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesByAuthorId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryGetEntriesByAuthorId200Response>("/mod_glossary_get_entries_by_author_id", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesByAuthorId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries by author ID. Browse entries by author ID.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByAuthorId200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByAuthorIdAsync(ModGlossaryGetEntriesByAuthorIdRequest modGlossaryGetEntriesByAuthorIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResponse = await ModGlossaryGetEntriesByAuthorIdWithHttpInfoAsync(modGlossaryGetEntriesByAuthorIdRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries by author ID. Browse entries by author ID.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByAuthorIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByAuthorId200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> ModGlossaryGetEntriesByAuthorIdWithHttpInfoAsync(ModGlossaryGetEntriesByAuthorIdRequest modGlossaryGetEntriesByAuthorIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryGetEntriesByAuthorIdRequest' is set
            if (modGlossaryGetEntriesByAuthorIdRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesByAuthorIdRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesByAuthorId");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesByAuthorIdRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesByAuthorId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryGetEntriesByAuthorId200Response>("/mod_glossary_get_entries_by_author_id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesByAuthorId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries by category. Browse entries by category.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByCategory200Response</returns>
        public ModGlossaryGetEntriesByCategory200Response ModGlossaryGetEntriesByCategory(ModGlossaryGetEntriesByCategoryRequest modGlossaryGetEntriesByCategoryRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByCategory200Response> localVarResponse = ModGlossaryGetEntriesByCategoryWithHttpInfo(modGlossaryGetEntriesByCategoryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries by category. Browse entries by category.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByCategory200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByCategory200Response> ModGlossaryGetEntriesByCategoryWithHttpInfo(ModGlossaryGetEntriesByCategoryRequest modGlossaryGetEntriesByCategoryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryGetEntriesByCategoryRequest' is set
            if (modGlossaryGetEntriesByCategoryRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesByCategoryRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesByCategory");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesByCategoryRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesByCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryGetEntriesByCategory200Response>("/mod_glossary_get_entries_by_category", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesByCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries by category. Browse entries by category.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByCategory200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryGetEntriesByCategory200Response> ModGlossaryGetEntriesByCategoryAsync(ModGlossaryGetEntriesByCategoryRequest modGlossaryGetEntriesByCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByCategory200Response> localVarResponse = await ModGlossaryGetEntriesByCategoryWithHttpInfoAsync(modGlossaryGetEntriesByCategoryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries by category. Browse entries by category.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByCategoryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByCategory200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByCategory200Response>> ModGlossaryGetEntriesByCategoryWithHttpInfoAsync(ModGlossaryGetEntriesByCategoryRequest modGlossaryGetEntriesByCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryGetEntriesByCategoryRequest' is set
            if (modGlossaryGetEntriesByCategoryRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesByCategoryRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesByCategory");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesByCategoryRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesByCategory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryGetEntriesByCategory200Response>("/mod_glossary_get_entries_by_category", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesByCategory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries by date. Browse entries by date.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByDateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByAuthorId200Response</returns>
        public ModGlossaryGetEntriesByAuthorId200Response ModGlossaryGetEntriesByDate(ModGlossaryGetEntriesByDateRequest modGlossaryGetEntriesByDateRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResponse = ModGlossaryGetEntriesByDateWithHttpInfo(modGlossaryGetEntriesByDateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries by date. Browse entries by date.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByDateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByAuthorId200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByDateWithHttpInfo(ModGlossaryGetEntriesByDateRequest modGlossaryGetEntriesByDateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryGetEntriesByDateRequest' is set
            if (modGlossaryGetEntriesByDateRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesByDateRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesByDate");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesByDateRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesByDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryGetEntriesByAuthorId200Response>("/mod_glossary_get_entries_by_date", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesByDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries by date. Browse entries by date.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByDateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByAuthorId200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByDateAsync(ModGlossaryGetEntriesByDateRequest modGlossaryGetEntriesByDateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResponse = await ModGlossaryGetEntriesByDateWithHttpInfoAsync(modGlossaryGetEntriesByDateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries by date. Browse entries by date.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByDateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByAuthorId200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> ModGlossaryGetEntriesByDateWithHttpInfoAsync(ModGlossaryGetEntriesByDateRequest modGlossaryGetEntriesByDateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryGetEntriesByDateRequest' is set
            if (modGlossaryGetEntriesByDateRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesByDateRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesByDate");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesByDateRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesByDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryGetEntriesByAuthorId200Response>("/mod_glossary_get_entries_by_date", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesByDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries by letter. Browse entries by letter.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByLetterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByAuthorId200Response</returns>
        public ModGlossaryGetEntriesByAuthorId200Response ModGlossaryGetEntriesByLetter(ModGlossaryGetEntriesByLetterRequest modGlossaryGetEntriesByLetterRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResponse = ModGlossaryGetEntriesByLetterWithHttpInfo(modGlossaryGetEntriesByLetterRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries by letter. Browse entries by letter.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByLetterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByAuthorId200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByLetterWithHttpInfo(ModGlossaryGetEntriesByLetterRequest modGlossaryGetEntriesByLetterRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryGetEntriesByLetterRequest' is set
            if (modGlossaryGetEntriesByLetterRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesByLetterRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesByLetter");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesByLetterRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesByLetter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryGetEntriesByAuthorId200Response>("/mod_glossary_get_entries_by_letter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesByLetter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries by letter. Browse entries by letter.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByLetterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByAuthorId200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByLetterAsync(ModGlossaryGetEntriesByLetterRequest modGlossaryGetEntriesByLetterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResponse = await ModGlossaryGetEntriesByLetterWithHttpInfoAsync(modGlossaryGetEntriesByLetterRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries by letter. Browse entries by letter.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByLetterRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByAuthorId200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> ModGlossaryGetEntriesByLetterWithHttpInfoAsync(ModGlossaryGetEntriesByLetterRequest modGlossaryGetEntriesByLetterRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryGetEntriesByLetterRequest' is set
            if (modGlossaryGetEntriesByLetterRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesByLetterRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesByLetter");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesByLetterRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesByLetter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryGetEntriesByAuthorId200Response>("/mod_glossary_get_entries_by_letter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesByLetter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries by search query. Browse entries by search query.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesBySearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByAuthorId200Response</returns>
        public ModGlossaryGetEntriesByAuthorId200Response ModGlossaryGetEntriesBySearch(ModGlossaryGetEntriesBySearchRequest modGlossaryGetEntriesBySearchRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResponse = ModGlossaryGetEntriesBySearchWithHttpInfo(modGlossaryGetEntriesBySearchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries by search query. Browse entries by search query.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesBySearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByAuthorId200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesBySearchWithHttpInfo(ModGlossaryGetEntriesBySearchRequest modGlossaryGetEntriesBySearchRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryGetEntriesBySearchRequest' is set
            if (modGlossaryGetEntriesBySearchRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesBySearchRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesBySearch");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesBySearchRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesBySearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryGetEntriesByAuthorId200Response>("/mod_glossary_get_entries_by_search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesBySearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries by search query. Browse entries by search query.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesBySearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByAuthorId200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesBySearchAsync(ModGlossaryGetEntriesBySearchRequest modGlossaryGetEntriesBySearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResponse = await ModGlossaryGetEntriesBySearchWithHttpInfoAsync(modGlossaryGetEntriesBySearchRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries by search query. Browse entries by search query.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesBySearchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByAuthorId200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> ModGlossaryGetEntriesBySearchWithHttpInfoAsync(ModGlossaryGetEntriesBySearchRequest modGlossaryGetEntriesBySearchRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryGetEntriesBySearchRequest' is set
            if (modGlossaryGetEntriesBySearchRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesBySearchRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesBySearch");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesBySearchRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesBySearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryGetEntriesByAuthorId200Response>("/mod_glossary_get_entries_by_search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesBySearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries by term (concept or alias). Browse entries by term (concept or alias).
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByTermRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByAuthorId200Response</returns>
        public ModGlossaryGetEntriesByAuthorId200Response ModGlossaryGetEntriesByTerm(ModGlossaryGetEntriesByTermRequest modGlossaryGetEntriesByTermRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResponse = ModGlossaryGetEntriesByTermWithHttpInfo(modGlossaryGetEntriesByTermRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries by term (concept or alias). Browse entries by term (concept or alias).
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByTermRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByAuthorId200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByTermWithHttpInfo(ModGlossaryGetEntriesByTermRequest modGlossaryGetEntriesByTermRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryGetEntriesByTermRequest' is set
            if (modGlossaryGetEntriesByTermRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesByTermRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesByTerm");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesByTermRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesByTerm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryGetEntriesByAuthorId200Response>("/mod_glossary_get_entries_by_term", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesByTerm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries by term (concept or alias). Browse entries by term (concept or alias).
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByTermRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByAuthorId200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesByTermAsync(ModGlossaryGetEntriesByTermRequest modGlossaryGetEntriesByTermRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResponse = await ModGlossaryGetEntriesByTermWithHttpInfoAsync(modGlossaryGetEntriesByTermRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries by term (concept or alias). Browse entries by term (concept or alias).
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesByTermRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByAuthorId200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> ModGlossaryGetEntriesByTermWithHttpInfoAsync(ModGlossaryGetEntriesByTermRequest modGlossaryGetEntriesByTermRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryGetEntriesByTermRequest' is set
            if (modGlossaryGetEntriesByTermRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesByTermRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesByTerm");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesByTermRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesByTerm";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryGetEntriesByAuthorId200Response>("/mod_glossary_get_entries_by_term", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesByTerm", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries to be approved. Browse entries to be approved.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesToApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntriesByAuthorId200Response</returns>
        public ModGlossaryGetEntriesByAuthorId200Response ModGlossaryGetEntriesToApprove(ModGlossaryGetEntriesToApproveRequest modGlossaryGetEntriesToApproveRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResponse = ModGlossaryGetEntriesToApproveWithHttpInfo(modGlossaryGetEntriesToApproveRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries to be approved. Browse entries to be approved.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesToApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntriesByAuthorId200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesToApproveWithHttpInfo(ModGlossaryGetEntriesToApproveRequest modGlossaryGetEntriesToApproveRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryGetEntriesToApproveRequest' is set
            if (modGlossaryGetEntriesToApproveRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesToApproveRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesToApprove");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesToApproveRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesToApprove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryGetEntriesByAuthorId200Response>("/mod_glossary_get_entries_to_approve", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesToApprove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Browse entries to be approved. Browse entries to be approved.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesToApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntriesByAuthorId200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryGetEntriesByAuthorId200Response> ModGlossaryGetEntriesToApproveAsync(ModGlossaryGetEntriesToApproveRequest modGlossaryGetEntriesToApproveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResponse = await ModGlossaryGetEntriesToApproveWithHttpInfoAsync(modGlossaryGetEntriesToApproveRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Browse entries to be approved. Browse entries to be approved.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntriesToApproveRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntriesByAuthorId200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryGetEntriesByAuthorId200Response>> ModGlossaryGetEntriesToApproveWithHttpInfoAsync(ModGlossaryGetEntriesToApproveRequest modGlossaryGetEntriesToApproveRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryGetEntriesToApproveRequest' is set
            if (modGlossaryGetEntriesToApproveRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntriesToApproveRequest' when calling ModGlossaryApi->ModGlossaryGetEntriesToApprove");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntriesToApproveRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntriesToApprove";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryGetEntriesByAuthorId200Response>("/mod_glossary_get_entries_to_approve", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntriesToApprove", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an entry by ID Get an entry by ID
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetEntryById200Response</returns>
        public ModGlossaryGetEntryById200Response ModGlossaryGetEntryById(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntryById200Response> localVarResponse = ModGlossaryGetEntryByIdWithHttpInfo(modGlossaryGetEntryByIdRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an entry by ID Get an entry by ID
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetEntryById200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryGetEntryById200Response> ModGlossaryGetEntryByIdWithHttpInfo(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryGetEntryByIdRequest' is set
            if (modGlossaryGetEntryByIdRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntryByIdRequest' when calling ModGlossaryApi->ModGlossaryGetEntryById");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntryByIdRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntryById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryGetEntryById200Response>("/mod_glossary_get_entry_by_id", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntryById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an entry by ID Get an entry by ID
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetEntryById200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryGetEntryById200Response> ModGlossaryGetEntryByIdAsync(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetEntryById200Response> localVarResponse = await ModGlossaryGetEntryByIdWithHttpInfoAsync(modGlossaryGetEntryByIdRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an entry by ID Get an entry by ID
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetEntryById200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryGetEntryById200Response>> ModGlossaryGetEntryByIdWithHttpInfoAsync(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryGetEntryByIdRequest' is set
            if (modGlossaryGetEntryByIdRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntryByIdRequest' when calling ModGlossaryApi->ModGlossaryGetEntryById");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntryByIdRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetEntryById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryGetEntryById200Response>("/mod_glossary_get_entry_by_id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetEntryById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of glossaries from several courses. Retrieve a list of glossaries from several courses.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryGetGlossariesByCourses200Response</returns>
        public ModGlossaryGetGlossariesByCourses200Response ModGlossaryGetGlossariesByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetGlossariesByCourses200Response> localVarResponse = ModGlossaryGetGlossariesByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of glossaries from several courses. Retrieve a list of glossaries from several courses.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryGetGlossariesByCourses200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryGetGlossariesByCourses200Response> ModGlossaryGetGlossariesByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModGlossaryApi->ModGlossaryGetGlossariesByCourses");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetGlossariesByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryGetGlossariesByCourses200Response>("/mod_glossary_get_glossaries_by_courses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetGlossariesByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of glossaries from several courses. Retrieve a list of glossaries from several courses.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryGetGlossariesByCourses200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryGetGlossariesByCourses200Response> ModGlossaryGetGlossariesByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryGetGlossariesByCourses200Response> localVarResponse = await ModGlossaryGetGlossariesByCoursesWithHttpInfoAsync(modChatGetChatsByCoursesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of glossaries from several courses. Retrieve a list of glossaries from several courses.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modChatGetChatsByCoursesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryGetGlossariesByCourses200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryGetGlossariesByCourses200Response>> ModGlossaryGetGlossariesByCoursesWithHttpInfoAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
            if (modChatGetChatsByCoursesRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modChatGetChatsByCoursesRequest' when calling ModGlossaryApi->ModGlossaryGetGlossariesByCourses");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modChatGetChatsByCoursesRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryGetGlossariesByCourses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryGetGlossariesByCourses200Response>("/mod_glossary_get_glossaries_by_courses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryGetGlossariesByCourses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Prepares the given entry for edition returning draft item areas and file areas information. Prepares the given entry for edition returning draft item areas and file areas information.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryPrepareEntryForEditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryPrepareEntryForEdition200Response</returns>
        public ModGlossaryPrepareEntryForEdition200Response ModGlossaryPrepareEntryForEdition(ModGlossaryPrepareEntryForEditionRequest modGlossaryPrepareEntryForEditionRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryPrepareEntryForEdition200Response> localVarResponse = ModGlossaryPrepareEntryForEditionWithHttpInfo(modGlossaryPrepareEntryForEditionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Prepares the given entry for edition returning draft item areas and file areas information. Prepares the given entry for edition returning draft item areas and file areas information.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryPrepareEntryForEditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryPrepareEntryForEdition200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryPrepareEntryForEdition200Response> ModGlossaryPrepareEntryForEditionWithHttpInfo(ModGlossaryPrepareEntryForEditionRequest modGlossaryPrepareEntryForEditionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryPrepareEntryForEditionRequest' is set
            if (modGlossaryPrepareEntryForEditionRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryPrepareEntryForEditionRequest' when calling ModGlossaryApi->ModGlossaryPrepareEntryForEdition");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryPrepareEntryForEditionRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryPrepareEntryForEdition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryPrepareEntryForEdition200Response>("/mod_glossary_prepare_entry_for_edition", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryPrepareEntryForEdition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Prepares the given entry for edition returning draft item areas and file areas information. Prepares the given entry for edition returning draft item areas and file areas information.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryPrepareEntryForEditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryPrepareEntryForEdition200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryPrepareEntryForEdition200Response> ModGlossaryPrepareEntryForEditionAsync(ModGlossaryPrepareEntryForEditionRequest modGlossaryPrepareEntryForEditionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryPrepareEntryForEdition200Response> localVarResponse = await ModGlossaryPrepareEntryForEditionWithHttpInfoAsync(modGlossaryPrepareEntryForEditionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Prepares the given entry for edition returning draft item areas and file areas information. Prepares the given entry for edition returning draft item areas and file areas information.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryPrepareEntryForEditionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryPrepareEntryForEdition200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryPrepareEntryForEdition200Response>> ModGlossaryPrepareEntryForEditionWithHttpInfoAsync(ModGlossaryPrepareEntryForEditionRequest modGlossaryPrepareEntryForEditionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryPrepareEntryForEditionRequest' is set
            if (modGlossaryPrepareEntryForEditionRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryPrepareEntryForEditionRequest' when calling ModGlossaryApi->ModGlossaryPrepareEntryForEdition");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryPrepareEntryForEditionRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryPrepareEntryForEdition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryPrepareEntryForEdition200Response>("/mod_glossary_prepare_entry_for_edition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryPrepareEntryForEdition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the given glossary entry. Updates the given glossary entry.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryUpdateEntry200Response</returns>
        public ModGlossaryUpdateEntry200Response ModGlossaryUpdateEntry(ModGlossaryUpdateEntryRequest modGlossaryUpdateEntryRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryUpdateEntry200Response> localVarResponse = ModGlossaryUpdateEntryWithHttpInfo(modGlossaryUpdateEntryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the given glossary entry. Updates the given glossary entry.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryUpdateEntry200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryUpdateEntry200Response> ModGlossaryUpdateEntryWithHttpInfo(ModGlossaryUpdateEntryRequest modGlossaryUpdateEntryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryUpdateEntryRequest' is set
            if (modGlossaryUpdateEntryRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryUpdateEntryRequest' when calling ModGlossaryApi->ModGlossaryUpdateEntry");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryUpdateEntryRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryUpdateEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryUpdateEntry200Response>("/mod_glossary_update_entry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryUpdateEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the given glossary entry. Updates the given glossary entry.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryUpdateEntry200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryUpdateEntry200Response> ModGlossaryUpdateEntryAsync(ModGlossaryUpdateEntryRequest modGlossaryUpdateEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryUpdateEntry200Response> localVarResponse = await ModGlossaryUpdateEntryWithHttpInfoAsync(modGlossaryUpdateEntryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the given glossary entry. Updates the given glossary entry.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryUpdateEntryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryUpdateEntry200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryUpdateEntry200Response>> ModGlossaryUpdateEntryWithHttpInfoAsync(ModGlossaryUpdateEntryRequest modGlossaryUpdateEntryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryUpdateEntryRequest' is set
            if (modGlossaryUpdateEntryRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryUpdateEntryRequest' when calling ModGlossaryApi->ModGlossaryUpdateEntry");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryUpdateEntryRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryUpdateEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryUpdateEntry200Response>("/mod_glossary_update_entry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryUpdateEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Notify a glossary entry as being viewed. Notify a glossary entry as being viewed.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryViewEntry200Response</returns>
        public ModGlossaryViewEntry200Response ModGlossaryViewEntry(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryViewEntry200Response> localVarResponse = ModGlossaryViewEntryWithHttpInfo(modGlossaryGetEntryByIdRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Notify a glossary entry as being viewed. Notify a glossary entry as being viewed.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryViewEntry200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryViewEntry200Response> ModGlossaryViewEntryWithHttpInfo(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryGetEntryByIdRequest' is set
            if (modGlossaryGetEntryByIdRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntryByIdRequest' when calling ModGlossaryApi->ModGlossaryViewEntry");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntryByIdRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryViewEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryViewEntry200Response>("/mod_glossary_view_entry", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryViewEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Notify a glossary entry as being viewed. Notify a glossary entry as being viewed.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryViewEntry200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryViewEntry200Response> ModGlossaryViewEntryAsync(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryViewEntry200Response> localVarResponse = await ModGlossaryViewEntryWithHttpInfoAsync(modGlossaryGetEntryByIdRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Notify a glossary entry as being viewed. Notify a glossary entry as being viewed.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryGetEntryByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryViewEntry200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryViewEntry200Response>> ModGlossaryViewEntryWithHttpInfoAsync(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryGetEntryByIdRequest' is set
            if (modGlossaryGetEntryByIdRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryGetEntryByIdRequest' when calling ModGlossaryApi->ModGlossaryViewEntry");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryGetEntryByIdRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryViewEntry";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryViewEntry200Response>("/mod_glossary_view_entry", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryViewEntry", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Notify the glossary as being viewed. Notify the glossary as being viewed.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryViewGlossaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModGlossaryViewGlossary200Response</returns>
        public ModGlossaryViewGlossary200Response ModGlossaryViewGlossary(ModGlossaryViewGlossaryRequest modGlossaryViewGlossaryRequest, int operationIndex = 0)
        {
            MoodleClient.Client.ApiResponse<ModGlossaryViewGlossary200Response> localVarResponse = ModGlossaryViewGlossaryWithHttpInfo(modGlossaryViewGlossaryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Notify the glossary as being viewed. Notify the glossary as being viewed.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryViewGlossaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModGlossaryViewGlossary200Response</returns>
        public MoodleClient.Client.ApiResponse<ModGlossaryViewGlossary200Response> ModGlossaryViewGlossaryWithHttpInfo(ModGlossaryViewGlossaryRequest modGlossaryViewGlossaryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'modGlossaryViewGlossaryRequest' is set
            if (modGlossaryViewGlossaryRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryViewGlossaryRequest' when calling ModGlossaryApi->ModGlossaryViewGlossary");
            }

            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryViewGlossaryRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryViewGlossary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ModGlossaryViewGlossary200Response>("/mod_glossary_view_glossary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryViewGlossary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Notify the glossary as being viewed. Notify the glossary as being viewed.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryViewGlossaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModGlossaryViewGlossary200Response</returns>
        public async System.Threading.Tasks.Task<ModGlossaryViewGlossary200Response> ModGlossaryViewGlossaryAsync(ModGlossaryViewGlossaryRequest modGlossaryViewGlossaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            MoodleClient.Client.ApiResponse<ModGlossaryViewGlossary200Response> localVarResponse = await ModGlossaryViewGlossaryWithHttpInfoAsync(modGlossaryViewGlossaryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Notify the glossary as being viewed. Notify the glossary as being viewed.
        /// </summary>
        /// <exception cref="MoodleClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modGlossaryViewGlossaryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModGlossaryViewGlossary200Response)</returns>
        public async System.Threading.Tasks.Task<MoodleClient.Client.ApiResponse<ModGlossaryViewGlossary200Response>> ModGlossaryViewGlossaryWithHttpInfoAsync(ModGlossaryViewGlossaryRequest modGlossaryViewGlossaryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modGlossaryViewGlossaryRequest' is set
            if (modGlossaryViewGlossaryRequest == null)
            {
                throw new MoodleClient.Client.ApiException(400, "Missing required parameter 'modGlossaryViewGlossaryRequest' when calling ModGlossaryApi->ModGlossaryViewGlossary");
            }


            MoodleClient.Client.RequestOptions localVarRequestOptions = new MoodleClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = MoodleClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = MoodleClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modGlossaryViewGlossaryRequest;

            localVarRequestOptions.Operation = "ModGlossaryApi.ModGlossaryViewGlossary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModGlossaryViewGlossary200Response>("/mod_glossary_view_glossary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModGlossaryViewGlossary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
