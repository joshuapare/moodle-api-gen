/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreCourseImportCourseRequest
    /// </summary>
    [DataContract(Name = "core_course_import_course_request")]
    public partial class CoreCourseImportCourseRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCourseImportCourseRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreCourseImportCourseRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCourseImportCourseRequest" /> class.
        /// </summary>
        /// <param name="deletecontent">whether to delete the course content where we are importing to (default to 0 &#x3D; No) (default to 0).</param>
        /// <param name="importfrom">the id of the course we are importing from (required) (default to null).</param>
        /// <param name="importto">the id of the course we are importing to (required) (default to null).</param>
        /// <param name="options">options.</param>
        public CoreCourseImportCourseRequest(int deletecontent = 0, int importfrom = null, int importto = null, List<CoreCourseImportCourseRequestOptionsInner> options = default(List<CoreCourseImportCourseRequestOptionsInner>))
        {
            this.Importfrom = importfrom;
            this.Importto = importto;
            this.Deletecontent = deletecontent;
            this.Options = options;
        }

        /// <summary>
        /// whether to delete the course content where we are importing to (default to 0 &#x3D; No)
        /// </summary>
        /// <value>whether to delete the course content where we are importing to (default to 0 &#x3D; No)</value>
        [DataMember(Name = "deletecontent", EmitDefaultValue = false)]
        public int Deletecontent { get; set; }

        /// <summary>
        /// the id of the course we are importing from
        /// </summary>
        /// <value>the id of the course we are importing from</value>
        [DataMember(Name = "importfrom", IsRequired = true, EmitDefaultValue = true)]
        public int Importfrom { get; set; }

        /// <summary>
        /// the id of the course we are importing to
        /// </summary>
        /// <value>the id of the course we are importing to</value>
        [DataMember(Name = "importto", IsRequired = true, EmitDefaultValue = true)]
        public int Importto { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public List<CoreCourseImportCourseRequestOptionsInner> Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCourseImportCourseRequest {\n");
            sb.Append("  Deletecontent: ").Append(Deletecontent).Append("\n");
            sb.Append("  Importfrom: ").Append(Importfrom).Append("\n");
            sb.Append("  Importto: ").Append(Importto).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
