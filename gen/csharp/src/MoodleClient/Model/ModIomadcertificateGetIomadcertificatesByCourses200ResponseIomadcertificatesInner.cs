/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// Tool
    /// </summary>
    [DataContract(Name = "mod_iomadcertificate_get_iomadcertificates_by_courses_200_response_iomadcertificates_inner")]
    public partial class ModIomadcertificateGetIomadcertificatesByCourses200ResponseIomadcertificatesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModIomadcertificateGetIomadcertificatesByCourses200ResponseIomadcertificatesInner" /> class.
        /// </summary>
        /// <param name="bordercolor">Border color (default to &quot;null&quot;).</param>
        /// <param name="borderstyle">Border style (default to &quot;null&quot;).</param>
        /// <param name="course">Course id.</param>
        /// <param name="coursemodule">Course module id.</param>
        /// <param name="customtext">Custom text (default to &quot;null&quot;).</param>
        /// <param name="datefmt">Date format (default to null).</param>
        /// <param name="delivery">Delivery options (default to null).</param>
        /// <param name="emailothers">Email others? (default to &quot;null&quot;).</param>
        /// <param name="emailteachers">Email teachers? (default to null).</param>
        /// <param name="gradefmt">Grade format (default to null).</param>
        /// <param name="groupingid">group id.</param>
        /// <param name="groupmode">group mode (default to null).</param>
        /// <param name="id">Certificate id (default to null).</param>
        /// <param name="intro">The Certificate intro (default to &quot;null&quot;).</param>
        /// <param name="introformat">intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN).</param>
        /// <param name="iomadcertificatetype">Type (default to &quot;null&quot;).</param>
        /// <param name="name">Certificate name (default to &quot;null&quot;).</param>
        /// <param name="orientation">Orientation (default to &quot;null&quot;).</param>
        /// <param name="printdate">Print date? (default to &quot;null&quot;).</param>
        /// <param name="printgrade">Print grade? (default to null).</param>
        /// <param name="printhours">Print hours? (default to &quot;null&quot;).</param>
        /// <param name="printnumber">Print number? (default to null).</param>
        /// <param name="printoutcome">Print outcome? (default to null).</param>
        /// <param name="printseal">Print seal? (default to &quot;null&quot;).</param>
        /// <param name="printsignature">Print signature? (default to &quot;null&quot;).</param>
        /// <param name="printteacher">Print teacher? (default to null).</param>
        /// <param name="printwmark">Print water mark? (default to &quot;null&quot;).</param>
        /// <param name="reportcert">Report iomadcertificate? (default to null).</param>
        /// <param name="requiredtime">Required time (default to null).</param>
        /// <param name="requiredtimenotmet">Whether the time req is met (default to null).</param>
        /// <param name="savecert">Save iomadcertificate? (default to null).</param>
        /// <param name="section">course section id.</param>
        /// <param name="timecreated">Time created.</param>
        /// <param name="timemodified">Time modified.</param>
        /// <param name="visible">visible.</param>
        public ModIomadcertificateGetIomadcertificatesByCourses200ResponseIomadcertificatesInner(string bordercolor = @"null", string borderstyle = @"null", int course = default(int), int coursemodule = default(int), string customtext = @"null", int datefmt = null, int delivery = null, string emailothers = @"null", int emailteachers = null, int gradefmt = null, int groupingid = default(int), int groupmode = null, int id = null, string intro = @"null", int introformat = default(int), string iomadcertificatetype = @"null", string name = @"null", string orientation = @"null", string printdate = @"null", int printgrade = null, string printhours = @"null", int printnumber = null, int printoutcome = null, string printseal = @"null", string printsignature = @"null", int printteacher = null, string printwmark = @"null", int reportcert = null, int requiredtime = null, int requiredtimenotmet = null, int savecert = null, int section = default(int), int timecreated = default(int), int timemodified = default(int), int visible = default(int))
        {
            // use default value if no "bordercolor" provided
            this.Bordercolor = bordercolor ?? @"null";
            // use default value if no "borderstyle" provided
            this.Borderstyle = borderstyle ?? @"null";
            this.Course = course;
            this.Coursemodule = coursemodule;
            // use default value if no "customtext" provided
            this.Customtext = customtext ?? @"null";
            this.Datefmt = datefmt;
            this.Delivery = delivery;
            // use default value if no "emailothers" provided
            this.Emailothers = emailothers ?? @"null";
            this.Emailteachers = emailteachers;
            this.Gradefmt = gradefmt;
            this.Groupingid = groupingid;
            this.Groupmode = groupmode;
            this.Id = id;
            // use default value if no "intro" provided
            this.Intro = intro ?? @"null";
            this.Introformat = introformat;
            // use default value if no "iomadcertificatetype" provided
            this.Iomadcertificatetype = iomadcertificatetype ?? @"null";
            // use default value if no "name" provided
            this.Name = name ?? @"null";
            // use default value if no "orientation" provided
            this.Orientation = orientation ?? @"null";
            // use default value if no "printdate" provided
            this.Printdate = printdate ?? @"null";
            this.Printgrade = printgrade;
            // use default value if no "printhours" provided
            this.Printhours = printhours ?? @"null";
            this.Printnumber = printnumber;
            this.Printoutcome = printoutcome;
            // use default value if no "printseal" provided
            this.Printseal = printseal ?? @"null";
            // use default value if no "printsignature" provided
            this.Printsignature = printsignature ?? @"null";
            this.Printteacher = printteacher;
            // use default value if no "printwmark" provided
            this.Printwmark = printwmark ?? @"null";
            this.Reportcert = reportcert;
            this.Requiredtime = requiredtime;
            this.Requiredtimenotmet = requiredtimenotmet;
            this.Savecert = savecert;
            this.Section = section;
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
            this.Visible = visible;
        }

        /// <summary>
        /// Border color
        /// </summary>
        /// <value>Border color</value>
        [DataMember(Name = "bordercolor", EmitDefaultValue = false)]
        public string Bordercolor { get; set; }

        /// <summary>
        /// Border style
        /// </summary>
        /// <value>Border style</value>
        [DataMember(Name = "borderstyle", EmitDefaultValue = false)]
        public string Borderstyle { get; set; }

        /// <summary>
        /// Course id
        /// </summary>
        /// <value>Course id</value>
        [DataMember(Name = "course", EmitDefaultValue = false)]
        public int Course { get; set; }

        /// <summary>
        /// Course module id
        /// </summary>
        /// <value>Course module id</value>
        [DataMember(Name = "coursemodule", EmitDefaultValue = false)]
        public int Coursemodule { get; set; }

        /// <summary>
        /// Custom text
        /// </summary>
        /// <value>Custom text</value>
        [DataMember(Name = "customtext", EmitDefaultValue = false)]
        public string Customtext { get; set; }

        /// <summary>
        /// Date format
        /// </summary>
        /// <value>Date format</value>
        [DataMember(Name = "datefmt", EmitDefaultValue = false)]
        public int Datefmt { get; set; }

        /// <summary>
        /// Delivery options
        /// </summary>
        /// <value>Delivery options</value>
        [DataMember(Name = "delivery", EmitDefaultValue = false)]
        public int Delivery { get; set; }

        /// <summary>
        /// Email others?
        /// </summary>
        /// <value>Email others?</value>
        [DataMember(Name = "emailothers", EmitDefaultValue = false)]
        public string Emailothers { get; set; }

        /// <summary>
        /// Email teachers?
        /// </summary>
        /// <value>Email teachers?</value>
        [DataMember(Name = "emailteachers", EmitDefaultValue = false)]
        public int Emailteachers { get; set; }

        /// <summary>
        /// Grade format
        /// </summary>
        /// <value>Grade format</value>
        [DataMember(Name = "gradefmt", EmitDefaultValue = false)]
        public int Gradefmt { get; set; }

        /// <summary>
        /// group id
        /// </summary>
        /// <value>group id</value>
        [DataMember(Name = "groupingid", EmitDefaultValue = false)]
        public int Groupingid { get; set; }

        /// <summary>
        /// group mode
        /// </summary>
        /// <value>group mode</value>
        [DataMember(Name = "groupmode", EmitDefaultValue = false)]
        public int Groupmode { get; set; }

        /// <summary>
        /// Certificate id
        /// </summary>
        /// <value>Certificate id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The Certificate intro
        /// </summary>
        /// <value>The Certificate intro</value>
        [DataMember(Name = "intro", EmitDefaultValue = false)]
        public string Intro { get; set; }

        /// <summary>
        /// intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "introformat", EmitDefaultValue = false)]
        public int Introformat { get; set; }

        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [DataMember(Name = "iomadcertificatetype", EmitDefaultValue = false)]
        public string Iomadcertificatetype { get; set; }

        /// <summary>
        /// Certificate name
        /// </summary>
        /// <value>Certificate name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Orientation
        /// </summary>
        /// <value>Orientation</value>
        [DataMember(Name = "orientation", EmitDefaultValue = false)]
        public string Orientation { get; set; }

        /// <summary>
        /// Print date?
        /// </summary>
        /// <value>Print date?</value>
        [DataMember(Name = "printdate", EmitDefaultValue = false)]
        public string Printdate { get; set; }

        /// <summary>
        /// Print grade?
        /// </summary>
        /// <value>Print grade?</value>
        [DataMember(Name = "printgrade", EmitDefaultValue = false)]
        public int Printgrade { get; set; }

        /// <summary>
        /// Print hours?
        /// </summary>
        /// <value>Print hours?</value>
        [DataMember(Name = "printhours", EmitDefaultValue = false)]
        public string Printhours { get; set; }

        /// <summary>
        /// Print number?
        /// </summary>
        /// <value>Print number?</value>
        [DataMember(Name = "printnumber", EmitDefaultValue = false)]
        public int Printnumber { get; set; }

        /// <summary>
        /// Print outcome?
        /// </summary>
        /// <value>Print outcome?</value>
        [DataMember(Name = "printoutcome", EmitDefaultValue = false)]
        public int Printoutcome { get; set; }

        /// <summary>
        /// Print seal?
        /// </summary>
        /// <value>Print seal?</value>
        [DataMember(Name = "printseal", EmitDefaultValue = false)]
        public string Printseal { get; set; }

        /// <summary>
        /// Print signature?
        /// </summary>
        /// <value>Print signature?</value>
        [DataMember(Name = "printsignature", EmitDefaultValue = false)]
        public string Printsignature { get; set; }

        /// <summary>
        /// Print teacher?
        /// </summary>
        /// <value>Print teacher?</value>
        [DataMember(Name = "printteacher", EmitDefaultValue = false)]
        public int Printteacher { get; set; }

        /// <summary>
        /// Print water mark?
        /// </summary>
        /// <value>Print water mark?</value>
        [DataMember(Name = "printwmark", EmitDefaultValue = false)]
        public string Printwmark { get; set; }

        /// <summary>
        /// Report iomadcertificate?
        /// </summary>
        /// <value>Report iomadcertificate?</value>
        [DataMember(Name = "reportcert", EmitDefaultValue = false)]
        public int Reportcert { get; set; }

        /// <summary>
        /// Required time
        /// </summary>
        /// <value>Required time</value>
        [DataMember(Name = "requiredtime", EmitDefaultValue = false)]
        public int Requiredtime { get; set; }

        /// <summary>
        /// Whether the time req is met
        /// </summary>
        /// <value>Whether the time req is met</value>
        [DataMember(Name = "requiredtimenotmet", EmitDefaultValue = false)]
        public int Requiredtimenotmet { get; set; }

        /// <summary>
        /// Save iomadcertificate?
        /// </summary>
        /// <value>Save iomadcertificate?</value>
        [DataMember(Name = "savecert", EmitDefaultValue = false)]
        public int Savecert { get; set; }

        /// <summary>
        /// course section id
        /// </summary>
        /// <value>course section id</value>
        [DataMember(Name = "section", EmitDefaultValue = false)]
        public int Section { get; set; }

        /// <summary>
        /// Time created
        /// </summary>
        /// <value>Time created</value>
        [DataMember(Name = "timecreated", EmitDefaultValue = false)]
        public int Timecreated { get; set; }

        /// <summary>
        /// Time modified
        /// </summary>
        /// <value>Time modified</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// visible
        /// </summary>
        /// <value>visible</value>
        [DataMember(Name = "visible", EmitDefaultValue = false)]
        public int Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModIomadcertificateGetIomadcertificatesByCourses200ResponseIomadcertificatesInner {\n");
            sb.Append("  Bordercolor: ").Append(Bordercolor).Append("\n");
            sb.Append("  Borderstyle: ").Append(Borderstyle).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Coursemodule: ").Append(Coursemodule).Append("\n");
            sb.Append("  Customtext: ").Append(Customtext).Append("\n");
            sb.Append("  Datefmt: ").Append(Datefmt).Append("\n");
            sb.Append("  Delivery: ").Append(Delivery).Append("\n");
            sb.Append("  Emailothers: ").Append(Emailothers).Append("\n");
            sb.Append("  Emailteachers: ").Append(Emailteachers).Append("\n");
            sb.Append("  Gradefmt: ").Append(Gradefmt).Append("\n");
            sb.Append("  Groupingid: ").Append(Groupingid).Append("\n");
            sb.Append("  Groupmode: ").Append(Groupmode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Intro: ").Append(Intro).Append("\n");
            sb.Append("  Introformat: ").Append(Introformat).Append("\n");
            sb.Append("  Iomadcertificatetype: ").Append(Iomadcertificatetype).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  Printdate: ").Append(Printdate).Append("\n");
            sb.Append("  Printgrade: ").Append(Printgrade).Append("\n");
            sb.Append("  Printhours: ").Append(Printhours).Append("\n");
            sb.Append("  Printnumber: ").Append(Printnumber).Append("\n");
            sb.Append("  Printoutcome: ").Append(Printoutcome).Append("\n");
            sb.Append("  Printseal: ").Append(Printseal).Append("\n");
            sb.Append("  Printsignature: ").Append(Printsignature).Append("\n");
            sb.Append("  Printteacher: ").Append(Printteacher).Append("\n");
            sb.Append("  Printwmark: ").Append(Printwmark).Append("\n");
            sb.Append("  Reportcert: ").Append(Reportcert).Append("\n");
            sb.Append("  Requiredtime: ").Append(Requiredtime).Append("\n");
            sb.Append("  Requiredtimenotmet: ").Append(Requiredtimenotmet).Append("\n");
            sb.Append("  Savecert: ").Append(Savecert).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
