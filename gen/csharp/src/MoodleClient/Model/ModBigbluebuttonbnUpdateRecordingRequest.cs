/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModBigbluebuttonbnUpdateRecordingRequest
    /// </summary>
    [DataContract(Name = "mod_bigbluebuttonbn_update_recording_request")]
    public partial class ModBigbluebuttonbnUpdateRecordingRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModBigbluebuttonbnUpdateRecordingRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModBigbluebuttonbnUpdateRecordingRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModBigbluebuttonbnUpdateRecordingRequest" /> class.
        /// </summary>
        /// <param name="action">The action to perform (required) (default to &quot;null&quot;).</param>
        /// <param name="additionaloptions">Additional options (required) (default to &quot;null&quot;).</param>
        /// <param name="bigbluebuttonbnid">bigbluebuttonbn instance id, this might be a different one from the one set in recordingid in case of importing (required) (default to null).</param>
        /// <param name="recordingid">The moodle internal recording ID (required) (default to null).</param>
        public ModBigbluebuttonbnUpdateRecordingRequest(string action = @"null", string additionaloptions = @"null", int bigbluebuttonbnid = null, int recordingid = null)
        {
            // to ensure "action" is required (not null)
            if (action == null)
            {
                throw new ArgumentNullException("action is a required property for ModBigbluebuttonbnUpdateRecordingRequest and cannot be null");
            }
            this.Action = action;
            // to ensure "additionaloptions" is required (not null)
            if (additionaloptions == null)
            {
                throw new ArgumentNullException("additionaloptions is a required property for ModBigbluebuttonbnUpdateRecordingRequest and cannot be null");
            }
            this.Additionaloptions = additionaloptions;
            this.Bigbluebuttonbnid = bigbluebuttonbnid;
            this.Recordingid = recordingid;
        }

        /// <summary>
        /// The action to perform
        /// </summary>
        /// <value>The action to perform</value>
        [DataMember(Name = "action", IsRequired = true, EmitDefaultValue = true)]
        public string Action { get; set; }

        /// <summary>
        /// Additional options
        /// </summary>
        /// <value>Additional options</value>
        [DataMember(Name = "additionaloptions", IsRequired = true, EmitDefaultValue = true)]
        public string Additionaloptions { get; set; }

        /// <summary>
        /// bigbluebuttonbn instance id, this might be a different one from the one set in recordingid in case of importing
        /// </summary>
        /// <value>bigbluebuttonbn instance id, this might be a different one from the one set in recordingid in case of importing</value>
        [DataMember(Name = "bigbluebuttonbnid", IsRequired = true, EmitDefaultValue = true)]
        public int Bigbluebuttonbnid { get; set; }

        /// <summary>
        /// The moodle internal recording ID
        /// </summary>
        /// <value>The moodle internal recording ID</value>
        [DataMember(Name = "recordingid", IsRequired = true, EmitDefaultValue = true)]
        public int Recordingid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModBigbluebuttonbnUpdateRecordingRequest {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Additionaloptions: ").Append(Additionaloptions).Append("\n");
            sb.Append("  Bigbluebuttonbnid: ").Append(Bigbluebuttonbnid).Append("\n");
            sb.Append("  Recordingid: ").Append(Recordingid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
