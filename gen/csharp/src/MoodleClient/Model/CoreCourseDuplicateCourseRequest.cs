/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreCourseDuplicateCourseRequest
    /// </summary>
    [DataContract(Name = "core_course_duplicate_course_request")]
    public partial class CoreCourseDuplicateCourseRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCourseDuplicateCourseRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreCourseDuplicateCourseRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCourseDuplicateCourseRequest" /> class.
        /// </summary>
        /// <param name="categoryid">duplicated course category parent (required) (default to null).</param>
        /// <param name="courseid">course to duplicate id (required) (default to null).</param>
        /// <param name="fullname">duplicated course full name (required) (default to &quot;null&quot;).</param>
        /// <param name="options">options.</param>
        /// <param name="shortname">duplicated course short name (required) (default to &quot;null&quot;).</param>
        /// <param name="visible">duplicated course visible, default to yes (default to 1).</param>
        public CoreCourseDuplicateCourseRequest(int categoryid = null, int courseid = null, string fullname = @"null", List<CoreCourseDuplicateCourseRequestOptionsInner> options = default(List<CoreCourseDuplicateCourseRequestOptionsInner>), string shortname = @"null", int visible = 1)
        {
            this.Categoryid = categoryid;
            this.Courseid = courseid;
            // to ensure "fullname" is required (not null)
            if (fullname == null)
            {
                throw new ArgumentNullException("fullname is a required property for CoreCourseDuplicateCourseRequest and cannot be null");
            }
            this.Fullname = fullname;
            // to ensure "shortname" is required (not null)
            if (shortname == null)
            {
                throw new ArgumentNullException("shortname is a required property for CoreCourseDuplicateCourseRequest and cannot be null");
            }
            this.Shortname = shortname;
            this.Options = options;
            this.Visible = visible;
        }

        /// <summary>
        /// duplicated course category parent
        /// </summary>
        /// <value>duplicated course category parent</value>
        [DataMember(Name = "categoryid", IsRequired = true, EmitDefaultValue = true)]
        public int Categoryid { get; set; }

        /// <summary>
        /// course to duplicate id
        /// </summary>
        /// <value>course to duplicate id</value>
        [DataMember(Name = "courseid", IsRequired = true, EmitDefaultValue = true)]
        public int Courseid { get; set; }

        /// <summary>
        /// duplicated course full name
        /// </summary>
        /// <value>duplicated course full name</value>
        [DataMember(Name = "fullname", IsRequired = true, EmitDefaultValue = true)]
        public string Fullname { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public List<CoreCourseDuplicateCourseRequestOptionsInner> Options { get; set; }

        /// <summary>
        /// duplicated course short name
        /// </summary>
        /// <value>duplicated course short name</value>
        [DataMember(Name = "shortname", IsRequired = true, EmitDefaultValue = true)]
        public string Shortname { get; set; }

        /// <summary>
        /// duplicated course visible, default to yes
        /// </summary>
        /// <value>duplicated course visible, default to yes</value>
        [DataMember(Name = "visible", EmitDefaultValue = false)]
        public int Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCourseDuplicateCourseRequest {\n");
            sb.Append("  Categoryid: ").Append(Categoryid).Append("\n");
            sb.Append("  Courseid: ").Append(Courseid).Append("\n");
            sb.Append("  Fullname: ").Append(Fullname).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Shortname: ").Append(Shortname).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
