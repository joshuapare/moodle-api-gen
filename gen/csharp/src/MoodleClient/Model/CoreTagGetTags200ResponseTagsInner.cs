/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// information about one tag
    /// </summary>
    [DataContract(Name = "core_tag_get_tags_200_response_tags_inner")]
    public partial class CoreTagGetTags200ResponseTagsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreTagGetTags200ResponseTagsInner" /> class.
        /// </summary>
        /// <param name="description">tag description (default to &quot;null&quot;).</param>
        /// <param name="descriptionformat">description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN).</param>
        /// <param name="flag">flag (default to null).</param>
        /// <param name="id">tag id.</param>
        /// <param name="isstandard">whether this flag is standard (default to null).</param>
        /// <param name="name">name.</param>
        /// <param name="official">whether this flag is standard (deprecated, use isstandard) (default to null).</param>
        /// <param name="rawname">tag raw name (may contain capital letters) (default to &quot;null&quot;).</param>
        /// <param name="tagcollid">tag collection id.</param>
        /// <param name="viewurl">URL to view (default to &quot;null&quot;).</param>
        public CoreTagGetTags200ResponseTagsInner(string description = @"null", int descriptionformat = default(int), int flag = null, int id = default(int), int isstandard = null, string name = default(string), int official = null, string rawname = @"null", int tagcollid = default(int), string viewurl = @"null")
        {
            // use default value if no "description" provided
            this.Description = description ?? @"null";
            this.Descriptionformat = descriptionformat;
            this.Flag = flag;
            this.Id = id;
            this.Isstandard = isstandard;
            this.Name = name;
            this.Official = official;
            // use default value if no "rawname" provided
            this.Rawname = rawname ?? @"null";
            this.Tagcollid = tagcollid;
            // use default value if no "viewurl" provided
            this.Viewurl = viewurl ?? @"null";
        }

        /// <summary>
        /// tag description
        /// </summary>
        /// <value>tag description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "descriptionformat", EmitDefaultValue = false)]
        public int Descriptionformat { get; set; }

        /// <summary>
        /// flag
        /// </summary>
        /// <value>flag</value>
        [DataMember(Name = "flag", EmitDefaultValue = false)]
        public int Flag { get; set; }

        /// <summary>
        /// tag id
        /// </summary>
        /// <value>tag id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// whether this flag is standard
        /// </summary>
        /// <value>whether this flag is standard</value>
        [DataMember(Name = "isstandard", EmitDefaultValue = false)]
        public int Isstandard { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// whether this flag is standard (deprecated, use isstandard)
        /// </summary>
        /// <value>whether this flag is standard (deprecated, use isstandard)</value>
        [DataMember(Name = "official", EmitDefaultValue = false)]
        public int Official { get; set; }

        /// <summary>
        /// tag raw name (may contain capital letters)
        /// </summary>
        /// <value>tag raw name (may contain capital letters)</value>
        [DataMember(Name = "rawname", EmitDefaultValue = false)]
        public string Rawname { get; set; }

        /// <summary>
        /// tag collection id
        /// </summary>
        /// <value>tag collection id</value>
        [DataMember(Name = "tagcollid", EmitDefaultValue = false)]
        public int Tagcollid { get; set; }

        /// <summary>
        /// URL to view
        /// </summary>
        /// <value>URL to view</value>
        [DataMember(Name = "viewurl", EmitDefaultValue = false)]
        public string Viewurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreTagGetTags200ResponseTagsInner {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Descriptionformat: ").Append(Descriptionformat).Append("\n");
            sb.Append("  Flag: ").Append(Flag).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Isstandard: ").Append(Isstandard).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Official: ").Append(Official).Append("\n");
            sb.Append("  Rawname: ").Append(Rawname).Append("\n");
            sb.Append("  Tagcollid: ").Append(Tagcollid).Append("\n");
            sb.Append("  Viewurl: ").Append(Viewurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
