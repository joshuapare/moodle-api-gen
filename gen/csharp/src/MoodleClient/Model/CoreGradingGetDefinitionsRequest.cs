/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreGradingGetDefinitionsRequest
    /// </summary>
    [DataContract(Name = "core_grading_get_definitions_request")]
    public partial class CoreGradingGetDefinitionsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreGradingGetDefinitionsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreGradingGetDefinitionsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreGradingGetDefinitionsRequest" /> class.
        /// </summary>
        /// <param name="activeonly">Only the active method (default to 0).</param>
        /// <param name="areaname">area name (required) (default to &quot;null&quot;).</param>
        /// <param name="cmids">cmids (required).</param>
        public CoreGradingGetDefinitionsRequest(bool activeonly = 0, string areaname = @"null", List<Object> cmids = default(List<Object>))
        {
            // to ensure "areaname" is required (not null)
            if (areaname == null)
            {
                throw new ArgumentNullException("areaname is a required property for CoreGradingGetDefinitionsRequest and cannot be null");
            }
            this.Areaname = areaname;
            // to ensure "cmids" is required (not null)
            if (cmids == null)
            {
                throw new ArgumentNullException("cmids is a required property for CoreGradingGetDefinitionsRequest and cannot be null");
            }
            this.Cmids = cmids;
            this.Activeonly = activeonly;
        }

        /// <summary>
        /// Only the active method
        /// </summary>
        /// <value>Only the active method</value>
        [DataMember(Name = "activeonly", EmitDefaultValue = true)]
        public bool Activeonly { get; set; }

        /// <summary>
        /// area name
        /// </summary>
        /// <value>area name</value>
        [DataMember(Name = "areaname", IsRequired = true, EmitDefaultValue = true)]
        public string Areaname { get; set; }

        /// <summary>
        /// Gets or Sets Cmids
        /// </summary>
        [DataMember(Name = "cmids", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Cmids { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreGradingGetDefinitionsRequest {\n");
            sb.Append("  Activeonly: ").Append(Activeonly).Append("\n");
            sb.Append("  Areaname: ").Append(Areaname).Append("\n");
            sb.Append("  Cmids: ").Append(Cmids).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
