/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// Wikis
    /// </summary>
    [DataContract(Name = "mod_wiki_get_wikis_by_courses_200_response_wikis_inner")]
    public partial class ModWikiGetWikisByCourses200ResponseWikisInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModWikiGetWikisByCourses200ResponseWikisInner" /> class.
        /// </summary>
        /// <param name="cancreatepages">True if user can create pages. (default to null).</param>
        /// <param name="course">Course id.</param>
        /// <param name="coursemodule">Course module id.</param>
        /// <param name="defaultformat">Wiki&#39;s default format (html, creole, nwiki). (default to &quot;null&quot;).</param>
        /// <param name="editbegin">Edit begin. (default to null).</param>
        /// <param name="editend">Edit end. (default to null).</param>
        /// <param name="firstpagetitle">First page title. (default to &quot;null&quot;).</param>
        /// <param name="forceformat">1 if format is forced, 0 otherwise. (default to null).</param>
        /// <param name="groupingid">Group id.</param>
        /// <param name="groupmode">Group mode.</param>
        /// <param name="id">Activity instance id.</param>
        /// <param name="intro">Activity introduction.</param>
        /// <param name="introfiles">introfiles.</param>
        /// <param name="introformat">intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN).</param>
        /// <param name="lang">Forced activity language.</param>
        /// <param name="name">Activity name.</param>
        /// <param name="section">Course section id.</param>
        /// <param name="timecreated">Time of creation..</param>
        /// <param name="timemodified">Time of last modification..</param>
        /// <param name="visible">Visible.</param>
        /// <param name="wikimode">Wiki mode (individual, collaborative). (default to &quot;null&quot;).</param>
        public ModWikiGetWikisByCourses200ResponseWikisInner(bool cancreatepages = null, int course = default(int), int coursemodule = default(int), string defaultformat = @"null", int editbegin = null, int editend = null, string firstpagetitle = @"null", int forceformat = null, int groupingid = default(int), int groupmode = default(int), int id = default(int), string intro = default(string), List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), int introformat = default(int), string lang = default(string), string name = default(string), int section = default(int), int timecreated = default(int), int timemodified = default(int), bool visible = default(bool), string wikimode = @"null")
        {
            this.Cancreatepages = cancreatepages;
            this.Course = course;
            this.Coursemodule = coursemodule;
            // use default value if no "defaultformat" provided
            this.Defaultformat = defaultformat ?? @"null";
            this.Editbegin = editbegin;
            this.Editend = editend;
            // use default value if no "firstpagetitle" provided
            this.Firstpagetitle = firstpagetitle ?? @"null";
            this.Forceformat = forceformat;
            this.Groupingid = groupingid;
            this.Groupmode = groupmode;
            this.Id = id;
            this.Intro = intro;
            this.Introfiles = introfiles;
            this.Introformat = introformat;
            this.Lang = lang;
            this.Name = name;
            this.Section = section;
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
            this.Visible = visible;
            // use default value if no "wikimode" provided
            this.Wikimode = wikimode ?? @"null";
        }

        /// <summary>
        /// True if user can create pages.
        /// </summary>
        /// <value>True if user can create pages.</value>
        [DataMember(Name = "cancreatepages", EmitDefaultValue = true)]
        public bool Cancreatepages { get; set; }

        /// <summary>
        /// Course id
        /// </summary>
        /// <value>Course id</value>
        [DataMember(Name = "course", EmitDefaultValue = false)]
        public int Course { get; set; }

        /// <summary>
        /// Course module id
        /// </summary>
        /// <value>Course module id</value>
        [DataMember(Name = "coursemodule", EmitDefaultValue = false)]
        public int Coursemodule { get; set; }

        /// <summary>
        /// Wiki&#39;s default format (html, creole, nwiki).
        /// </summary>
        /// <value>Wiki&#39;s default format (html, creole, nwiki).</value>
        [DataMember(Name = "defaultformat", EmitDefaultValue = false)]
        public string Defaultformat { get; set; }

        /// <summary>
        /// Edit begin.
        /// </summary>
        /// <value>Edit begin.</value>
        [DataMember(Name = "editbegin", EmitDefaultValue = false)]
        public int Editbegin { get; set; }

        /// <summary>
        /// Edit end.
        /// </summary>
        /// <value>Edit end.</value>
        [DataMember(Name = "editend", EmitDefaultValue = false)]
        public int Editend { get; set; }

        /// <summary>
        /// First page title.
        /// </summary>
        /// <value>First page title.</value>
        [DataMember(Name = "firstpagetitle", EmitDefaultValue = false)]
        public string Firstpagetitle { get; set; }

        /// <summary>
        /// 1 if format is forced, 0 otherwise.
        /// </summary>
        /// <value>1 if format is forced, 0 otherwise.</value>
        [DataMember(Name = "forceformat", EmitDefaultValue = false)]
        public int Forceformat { get; set; }

        /// <summary>
        /// Group id
        /// </summary>
        /// <value>Group id</value>
        [DataMember(Name = "groupingid", EmitDefaultValue = false)]
        public int Groupingid { get; set; }

        /// <summary>
        /// Group mode
        /// </summary>
        /// <value>Group mode</value>
        [DataMember(Name = "groupmode", EmitDefaultValue = false)]
        public int Groupmode { get; set; }

        /// <summary>
        /// Activity instance id
        /// </summary>
        /// <value>Activity instance id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Activity introduction
        /// </summary>
        /// <value>Activity introduction</value>
        [DataMember(Name = "intro", EmitDefaultValue = false)]
        public string Intro { get; set; }

        /// <summary>
        /// Gets or Sets Introfiles
        /// </summary>
        [DataMember(Name = "introfiles", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Introfiles { get; set; }

        /// <summary>
        /// intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "introformat", EmitDefaultValue = false)]
        public int Introformat { get; set; }

        /// <summary>
        /// Forced activity language
        /// </summary>
        /// <value>Forced activity language</value>
        [DataMember(Name = "lang", EmitDefaultValue = false)]
        public string Lang { get; set; }

        /// <summary>
        /// Activity name
        /// </summary>
        /// <value>Activity name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Course section id
        /// </summary>
        /// <value>Course section id</value>
        [DataMember(Name = "section", EmitDefaultValue = false)]
        public int Section { get; set; }

        /// <summary>
        /// Time of creation.
        /// </summary>
        /// <value>Time of creation.</value>
        [DataMember(Name = "timecreated", EmitDefaultValue = false)]
        public int Timecreated { get; set; }

        /// <summary>
        /// Time of last modification.
        /// </summary>
        /// <value>Time of last modification.</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// Visible
        /// </summary>
        /// <value>Visible</value>
        [DataMember(Name = "visible", EmitDefaultValue = true)]
        public bool Visible { get; set; }

        /// <summary>
        /// Wiki mode (individual, collaborative).
        /// </summary>
        /// <value>Wiki mode (individual, collaborative).</value>
        [DataMember(Name = "wikimode", EmitDefaultValue = false)]
        public string Wikimode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModWikiGetWikisByCourses200ResponseWikisInner {\n");
            sb.Append("  Cancreatepages: ").Append(Cancreatepages).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Coursemodule: ").Append(Coursemodule).Append("\n");
            sb.Append("  Defaultformat: ").Append(Defaultformat).Append("\n");
            sb.Append("  Editbegin: ").Append(Editbegin).Append("\n");
            sb.Append("  Editend: ").Append(Editend).Append("\n");
            sb.Append("  Firstpagetitle: ").Append(Firstpagetitle).Append("\n");
            sb.Append("  Forceformat: ").Append(Forceformat).Append("\n");
            sb.Append("  Groupingid: ").Append(Groupingid).Append("\n");
            sb.Append("  Groupmode: ").Append(Groupmode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Intro: ").Append(Intro).Append("\n");
            sb.Append("  Introfiles: ").Append(Introfiles).Append("\n");
            sb.Append("  Introformat: ").Append(Introformat).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("  Wikimode: ").Append(Wikimode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
