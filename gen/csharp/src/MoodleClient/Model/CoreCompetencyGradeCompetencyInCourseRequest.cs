/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreCompetencyGradeCompetencyInCourseRequest
    /// </summary>
    [DataContract(Name = "core_competency_grade_competency_in_course_request")]
    public partial class CoreCompetencyGradeCompetencyInCourseRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCompetencyGradeCompetencyInCourseRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreCompetencyGradeCompetencyInCourseRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCompetencyGradeCompetencyInCourseRequest" /> class.
        /// </summary>
        /// <param name="competencyid">Competency id (required) (default to null).</param>
        /// <param name="courseid">Course id (required).</param>
        /// <param name="grade">New grade (required).</param>
        /// <param name="note">A note to attach to the evidence.</param>
        /// <param name="userid">User id (required) (default to null).</param>
        public CoreCompetencyGradeCompetencyInCourseRequest(int competencyid = null, int courseid = default(int), int grade = default(int), string note = default(string), int userid = null)
        {
            this.Competencyid = competencyid;
            this.Courseid = courseid;
            this.Grade = grade;
            this.Userid = userid;
            this.Note = note;
        }

        /// <summary>
        /// Competency id
        /// </summary>
        /// <value>Competency id</value>
        [DataMember(Name = "competencyid", IsRequired = true, EmitDefaultValue = true)]
        public int Competencyid { get; set; }

        /// <summary>
        /// Course id
        /// </summary>
        /// <value>Course id</value>
        [DataMember(Name = "courseid", IsRequired = true, EmitDefaultValue = true)]
        public int Courseid { get; set; }

        /// <summary>
        /// New grade
        /// </summary>
        /// <value>New grade</value>
        [DataMember(Name = "grade", IsRequired = true, EmitDefaultValue = true)]
        public int Grade { get; set; }

        /// <summary>
        /// A note to attach to the evidence
        /// </summary>
        /// <value>A note to attach to the evidence</value>
        [DataMember(Name = "note", EmitDefaultValue = false)]
        public string Note { get; set; }

        /// <summary>
        /// User id
        /// </summary>
        /// <value>User id</value>
        [DataMember(Name = "userid", IsRequired = true, EmitDefaultValue = true)]
        public int Userid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCompetencyGradeCompetencyInCourseRequest {\n");
            sb.Append("  Competencyid: ").Append(Competencyid).Append("\n");
            sb.Append("  Courseid: ").Append(Courseid).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
