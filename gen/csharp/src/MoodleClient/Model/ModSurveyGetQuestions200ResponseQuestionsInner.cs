/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// Questions
    /// </summary>
    [DataContract(Name = "mod_survey_get_questions_200_response_questions_inner")]
    public partial class ModSurveyGetQuestions200ResponseQuestionsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModSurveyGetQuestions200ResponseQuestionsInner" /> class.
        /// </summary>
        /// <param name="id">Question id (default to null).</param>
        /// <param name="intro">The question intro (default to &quot;null&quot;).</param>
        /// <param name="multi">Subquestions ids (default to &quot;null&quot;).</param>
        /// <param name="options">Question options (default to &quot;null&quot;).</param>
        /// <param name="parent">Parent question (for subquestions) (default to null).</param>
        /// <param name="shorttext">Question short text (default to &quot;null&quot;).</param>
        /// <param name="text">Question text (default to &quot;null&quot;).</param>
        /// <param name="type">Question type (default to null).</param>
        public ModSurveyGetQuestions200ResponseQuestionsInner(int id = null, string intro = @"null", string multi = @"null", string options = @"null", int parent = null, string shorttext = @"null", string text = @"null", int type = null)
        {
            this.Id = id;
            // use default value if no "intro" provided
            this.Intro = intro ?? @"null";
            // use default value if no "multi" provided
            this.Multi = multi ?? @"null";
            // use default value if no "options" provided
            this.Options = options ?? @"null";
            this.Parent = parent;
            // use default value if no "shorttext" provided
            this.Shorttext = shorttext ?? @"null";
            // use default value if no "text" provided
            this.Text = text ?? @"null";
            this.Type = type;
        }

        /// <summary>
        /// Question id
        /// </summary>
        /// <value>Question id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The question intro
        /// </summary>
        /// <value>The question intro</value>
        [DataMember(Name = "intro", EmitDefaultValue = false)]
        public string Intro { get; set; }

        /// <summary>
        /// Subquestions ids
        /// </summary>
        /// <value>Subquestions ids</value>
        [DataMember(Name = "multi", EmitDefaultValue = false)]
        public string Multi { get; set; }

        /// <summary>
        /// Question options
        /// </summary>
        /// <value>Question options</value>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public string Options { get; set; }

        /// <summary>
        /// Parent question (for subquestions)
        /// </summary>
        /// <value>Parent question (for subquestions)</value>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public int Parent { get; set; }

        /// <summary>
        /// Question short text
        /// </summary>
        /// <value>Question short text</value>
        [DataMember(Name = "shorttext", EmitDefaultValue = false)]
        public string Shorttext { get; set; }

        /// <summary>
        /// Question text
        /// </summary>
        /// <value>Question text</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Question type
        /// </summary>
        /// <value>Question type</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public int Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModSurveyGetQuestions200ResponseQuestionsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Intro: ").Append(Intro).Append("\n");
            sb.Append("  Multi: ").Append(Multi).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Shorttext: ").Append(Shorttext).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
