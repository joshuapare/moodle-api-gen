/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreCalendarGetCalendarDayView200ResponseNextperiod
    /// </summary>
    [DataContract(Name = "core_calendar_get_calendar_day_view_200_response_nextperiod")]
    public partial class CoreCalendarGetCalendarDayView200ResponseNextperiod : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCalendarGetCalendarDayView200ResponseNextperiod" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreCalendarGetCalendarDayView200ResponseNextperiod() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCalendarGetCalendarDayView200ResponseNextperiod" /> class.
        /// </summary>
        /// <param name="hours">hours (required).</param>
        /// <param name="mday">mday (required).</param>
        /// <param name="minutes">minutes (required).</param>
        /// <param name="mon">mon (required).</param>
        /// <param name="month">month (required).</param>
        /// <param name="seconds">seconds (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="wday">wday (required).</param>
        /// <param name="weekday">weekday (required).</param>
        /// <param name="yday">yday (required).</param>
        /// <param name="year">year (required).</param>
        public CoreCalendarGetCalendarDayView200ResponseNextperiod(int hours = default(int), int mday = default(int), int minutes = default(int), int mon = default(int), string month = default(string), int seconds = default(int), int timestamp = default(int), int wday = default(int), string weekday = default(string), int yday = default(int), int year = default(int))
        {
            this.Hours = hours;
            this.Mday = mday;
            this.Minutes = minutes;
            this.Mon = mon;
            // to ensure "month" is required (not null)
            if (month == null)
            {
                throw new ArgumentNullException("month is a required property for CoreCalendarGetCalendarDayView200ResponseNextperiod and cannot be null");
            }
            this.Month = month;
            this.Seconds = seconds;
            this.Timestamp = timestamp;
            this.Wday = wday;
            // to ensure "weekday" is required (not null)
            if (weekday == null)
            {
                throw new ArgumentNullException("weekday is a required property for CoreCalendarGetCalendarDayView200ResponseNextperiod and cannot be null");
            }
            this.Weekday = weekday;
            this.Yday = yday;
            this.Year = year;
        }

        /// <summary>
        /// hours
        /// </summary>
        /// <value>hours</value>
        [DataMember(Name = "hours", IsRequired = true, EmitDefaultValue = true)]
        public int Hours { get; set; }

        /// <summary>
        /// mday
        /// </summary>
        /// <value>mday</value>
        [DataMember(Name = "mday", IsRequired = true, EmitDefaultValue = true)]
        public int Mday { get; set; }

        /// <summary>
        /// minutes
        /// </summary>
        /// <value>minutes</value>
        [DataMember(Name = "minutes", IsRequired = true, EmitDefaultValue = true)]
        public int Minutes { get; set; }

        /// <summary>
        /// mon
        /// </summary>
        /// <value>mon</value>
        [DataMember(Name = "mon", IsRequired = true, EmitDefaultValue = true)]
        public int Mon { get; set; }

        /// <summary>
        /// month
        /// </summary>
        /// <value>month</value>
        [DataMember(Name = "month", IsRequired = true, EmitDefaultValue = true)]
        public string Month { get; set; }

        /// <summary>
        /// seconds
        /// </summary>
        /// <value>seconds</value>
        [DataMember(Name = "seconds", IsRequired = true, EmitDefaultValue = true)]
        public int Seconds { get; set; }

        /// <summary>
        /// timestamp
        /// </summary>
        /// <value>timestamp</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public int Timestamp { get; set; }

        /// <summary>
        /// wday
        /// </summary>
        /// <value>wday</value>
        [DataMember(Name = "wday", IsRequired = true, EmitDefaultValue = true)]
        public int Wday { get; set; }

        /// <summary>
        /// weekday
        /// </summary>
        /// <value>weekday</value>
        [DataMember(Name = "weekday", IsRequired = true, EmitDefaultValue = true)]
        public string Weekday { get; set; }

        /// <summary>
        /// yday
        /// </summary>
        /// <value>yday</value>
        [DataMember(Name = "yday", IsRequired = true, EmitDefaultValue = true)]
        public int Yday { get; set; }

        /// <summary>
        /// year
        /// </summary>
        /// <value>year</value>
        [DataMember(Name = "year", IsRequired = true, EmitDefaultValue = true)]
        public int Year { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCalendarGetCalendarDayView200ResponseNextperiod {\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  Mday: ").Append(Mday).Append("\n");
            sb.Append("  Minutes: ").Append(Minutes).Append("\n");
            sb.Append("  Mon: ").Append(Mon).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  Seconds: ").Append(Seconds).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Wday: ").Append(Wday).Append("\n");
            sb.Append("  Weekday: ").Append(Weekday).Append("\n");
            sb.Append("  Yday: ").Append(Yday).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
