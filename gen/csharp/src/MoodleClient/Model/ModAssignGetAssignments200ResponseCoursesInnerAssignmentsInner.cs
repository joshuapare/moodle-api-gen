/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// assignment information object
    /// </summary>
    [DataContract(Name = "mod_assign_get_assignments_200_response_courses_inner_assignments_inner")]
    public partial class ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner" /> class.
        /// </summary>
        /// <param name="activity">Description of activity (default to &quot;null&quot;).</param>
        /// <param name="activityattachments">activityattachments.</param>
        /// <param name="activityformat">activity format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to null).</param>
        /// <param name="allowsubmissionsfromdate">allow submissions from date (default to null).</param>
        /// <param name="attemptreopenmethod">method used to control opening new attempts (default to &quot;null&quot;).</param>
        /// <param name="blindmarking">if enabled, hide identities until reveal identities actioned (default to null).</param>
        /// <param name="cmid">course module id.</param>
        /// <param name="completionsubmit">if enabled, set activity as complete following submission (default to null).</param>
        /// <param name="configs">configs.</param>
        /// <param name="course">course id.</param>
        /// <param name="cutoffdate">date after which submission is not accepted without an extension (default to null).</param>
        /// <param name="duedate">assignment due date (default to null).</param>
        /// <param name="grade">grade type (default to null).</param>
        /// <param name="gradingduedate">the expected date for marking the submissions (default to null).</param>
        /// <param name="hidegrader">If enabled, hide grader to student (default to null).</param>
        /// <param name="id">assignment id.</param>
        /// <param name="intro">assignment intro, not allways returned because it deppends on the activity configuration (default to &quot;null&quot;).</param>
        /// <param name="introattachments">introattachments.</param>
        /// <param name="introfiles">introfiles.</param>
        /// <param name="introformat">intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to null).</param>
        /// <param name="markingallocation">enable marking allocation (default to null).</param>
        /// <param name="markingworkflow">enable marking workflow (default to null).</param>
        /// <param name="maxattempts">maximum number of attempts allowed (default to null).</param>
        /// <param name="name">assignment name (default to &quot;null&quot;).</param>
        /// <param name="nosubmissions">no submissions (default to null).</param>
        /// <param name="preventsubmissionnotingroup">Prevent submission not in group (default to null).</param>
        /// <param name="requireallteammemberssubmit">if enabled, all team members must submit (default to null).</param>
        /// <param name="requiresubmissionstatement">student must accept submission statement (default to null).</param>
        /// <param name="revealidentities">show identities for a blind marking assignment (default to null).</param>
        /// <param name="sendlatenotifications">send notifications (default to null).</param>
        /// <param name="sendnotifications">send notifications.</param>
        /// <param name="sendstudentnotifications">send student notifications (default) (default to null).</param>
        /// <param name="submissionattachments">Flag to only show files during submission (default to null).</param>
        /// <param name="submissiondrafts">submissions drafts (default to null).</param>
        /// <param name="submissionstatement">Submission statement formatted. (default to &quot;null&quot;).</param>
        /// <param name="submissionstatementformat">submissionstatement format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to null).</param>
        /// <param name="teamsubmission">if enabled, students submit as a team (default to null).</param>
        /// <param name="teamsubmissiongroupingid">the grouping id for the team submission groups (default to null).</param>
        /// <param name="timelimit">Time limit to complete assigment (default to null).</param>
        /// <param name="timemodified">last time assignment was modified (default to null).</param>
        public ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner(string activity = @"null", List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> activityattachments = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), int activityformat = null, int allowsubmissionsfromdate = null, string attemptreopenmethod = @"null", int blindmarking = null, int cmid = default(int), int completionsubmit = null, List<ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner> configs = default(List<ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner>), int course = default(int), int cutoffdate = null, int duedate = null, int grade = null, int gradingduedate = null, int hidegrader = null, int id = default(int), string intro = @"null", List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introattachments = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), int introformat = null, int markingallocation = null, int markingworkflow = null, int maxattempts = null, string name = @"null", int nosubmissions = null, int preventsubmissionnotingroup = null, int requireallteammemberssubmit = null, int requiresubmissionstatement = null, int revealidentities = null, int sendlatenotifications = null, int sendnotifications = default(int), int sendstudentnotifications = null, int submissionattachments = null, int submissiondrafts = null, string submissionstatement = @"null", int submissionstatementformat = null, int teamsubmission = null, int teamsubmissiongroupingid = null, int timelimit = null, int timemodified = null)
        {
            // use default value if no "activity" provided
            this.Activity = activity ?? @"null";
            this.Activityattachments = activityattachments;
            this.Activityformat = activityformat;
            this.Allowsubmissionsfromdate = allowsubmissionsfromdate;
            // use default value if no "attemptreopenmethod" provided
            this.Attemptreopenmethod = attemptreopenmethod ?? @"null";
            this.Blindmarking = blindmarking;
            this.Cmid = cmid;
            this.Completionsubmit = completionsubmit;
            this.Configs = configs;
            this.Course = course;
            this.Cutoffdate = cutoffdate;
            this.Duedate = duedate;
            this.Grade = grade;
            this.Gradingduedate = gradingduedate;
            this.Hidegrader = hidegrader;
            this.Id = id;
            // use default value if no "intro" provided
            this.Intro = intro ?? @"null";
            this.Introattachments = introattachments;
            this.Introfiles = introfiles;
            this.Introformat = introformat;
            this.Markingallocation = markingallocation;
            this.Markingworkflow = markingworkflow;
            this.Maxattempts = maxattempts;
            // use default value if no "name" provided
            this.Name = name ?? @"null";
            this.Nosubmissions = nosubmissions;
            this.Preventsubmissionnotingroup = preventsubmissionnotingroup;
            this.Requireallteammemberssubmit = requireallteammemberssubmit;
            this.Requiresubmissionstatement = requiresubmissionstatement;
            this.Revealidentities = revealidentities;
            this.Sendlatenotifications = sendlatenotifications;
            this.Sendnotifications = sendnotifications;
            this.Sendstudentnotifications = sendstudentnotifications;
            this.Submissionattachments = submissionattachments;
            this.Submissiondrafts = submissiondrafts;
            // use default value if no "submissionstatement" provided
            this.Submissionstatement = submissionstatement ?? @"null";
            this.Submissionstatementformat = submissionstatementformat;
            this.Teamsubmission = teamsubmission;
            this.Teamsubmissiongroupingid = teamsubmissiongroupingid;
            this.Timelimit = timelimit;
            this.Timemodified = timemodified;
        }

        /// <summary>
        /// Description of activity
        /// </summary>
        /// <value>Description of activity</value>
        [DataMember(Name = "activity", EmitDefaultValue = false)]
        public string Activity { get; set; }

        /// <summary>
        /// Gets or Sets Activityattachments
        /// </summary>
        [DataMember(Name = "activityattachments", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Activityattachments { get; set; }

        /// <summary>
        /// activity format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>activity format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "activityformat", EmitDefaultValue = false)]
        public int Activityformat { get; set; }

        /// <summary>
        /// allow submissions from date
        /// </summary>
        /// <value>allow submissions from date</value>
        [DataMember(Name = "allowsubmissionsfromdate", EmitDefaultValue = false)]
        public int Allowsubmissionsfromdate { get; set; }

        /// <summary>
        /// method used to control opening new attempts
        /// </summary>
        /// <value>method used to control opening new attempts</value>
        [DataMember(Name = "attemptreopenmethod", EmitDefaultValue = false)]
        public string Attemptreopenmethod { get; set; }

        /// <summary>
        /// if enabled, hide identities until reveal identities actioned
        /// </summary>
        /// <value>if enabled, hide identities until reveal identities actioned</value>
        [DataMember(Name = "blindmarking", EmitDefaultValue = false)]
        public int Blindmarking { get; set; }

        /// <summary>
        /// course module id
        /// </summary>
        /// <value>course module id</value>
        [DataMember(Name = "cmid", EmitDefaultValue = false)]
        public int Cmid { get; set; }

        /// <summary>
        /// if enabled, set activity as complete following submission
        /// </summary>
        /// <value>if enabled, set activity as complete following submission</value>
        [DataMember(Name = "completionsubmit", EmitDefaultValue = false)]
        public int Completionsubmit { get; set; }

        /// <summary>
        /// Gets or Sets Configs
        /// </summary>
        [DataMember(Name = "configs", EmitDefaultValue = false)]
        public List<ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner> Configs { get; set; }

        /// <summary>
        /// course id
        /// </summary>
        /// <value>course id</value>
        [DataMember(Name = "course", EmitDefaultValue = false)]
        public int Course { get; set; }

        /// <summary>
        /// date after which submission is not accepted without an extension
        /// </summary>
        /// <value>date after which submission is not accepted without an extension</value>
        [DataMember(Name = "cutoffdate", EmitDefaultValue = false)]
        public int Cutoffdate { get; set; }

        /// <summary>
        /// assignment due date
        /// </summary>
        /// <value>assignment due date</value>
        [DataMember(Name = "duedate", EmitDefaultValue = false)]
        public int Duedate { get; set; }

        /// <summary>
        /// grade type
        /// </summary>
        /// <value>grade type</value>
        [DataMember(Name = "grade", EmitDefaultValue = false)]
        public int Grade { get; set; }

        /// <summary>
        /// the expected date for marking the submissions
        /// </summary>
        /// <value>the expected date for marking the submissions</value>
        [DataMember(Name = "gradingduedate", EmitDefaultValue = false)]
        public int Gradingduedate { get; set; }

        /// <summary>
        /// If enabled, hide grader to student
        /// </summary>
        /// <value>If enabled, hide grader to student</value>
        [DataMember(Name = "hidegrader", EmitDefaultValue = false)]
        public int Hidegrader { get; set; }

        /// <summary>
        /// assignment id
        /// </summary>
        /// <value>assignment id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// assignment intro, not allways returned because it deppends on the activity configuration
        /// </summary>
        /// <value>assignment intro, not allways returned because it deppends on the activity configuration</value>
        [DataMember(Name = "intro", EmitDefaultValue = false)]
        public string Intro { get; set; }

        /// <summary>
        /// Gets or Sets Introattachments
        /// </summary>
        [DataMember(Name = "introattachments", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Introattachments { get; set; }

        /// <summary>
        /// Gets or Sets Introfiles
        /// </summary>
        [DataMember(Name = "introfiles", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Introfiles { get; set; }

        /// <summary>
        /// intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "introformat", EmitDefaultValue = false)]
        public int Introformat { get; set; }

        /// <summary>
        /// enable marking allocation
        /// </summary>
        /// <value>enable marking allocation</value>
        [DataMember(Name = "markingallocation", EmitDefaultValue = false)]
        public int Markingallocation { get; set; }

        /// <summary>
        /// enable marking workflow
        /// </summary>
        /// <value>enable marking workflow</value>
        [DataMember(Name = "markingworkflow", EmitDefaultValue = false)]
        public int Markingworkflow { get; set; }

        /// <summary>
        /// maximum number of attempts allowed
        /// </summary>
        /// <value>maximum number of attempts allowed</value>
        [DataMember(Name = "maxattempts", EmitDefaultValue = false)]
        public int Maxattempts { get; set; }

        /// <summary>
        /// assignment name
        /// </summary>
        /// <value>assignment name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// no submissions
        /// </summary>
        /// <value>no submissions</value>
        [DataMember(Name = "nosubmissions", EmitDefaultValue = false)]
        public int Nosubmissions { get; set; }

        /// <summary>
        /// Prevent submission not in group
        /// </summary>
        /// <value>Prevent submission not in group</value>
        [DataMember(Name = "preventsubmissionnotingroup", EmitDefaultValue = false)]
        public int Preventsubmissionnotingroup { get; set; }

        /// <summary>
        /// if enabled, all team members must submit
        /// </summary>
        /// <value>if enabled, all team members must submit</value>
        [DataMember(Name = "requireallteammemberssubmit", EmitDefaultValue = false)]
        public int Requireallteammemberssubmit { get; set; }

        /// <summary>
        /// student must accept submission statement
        /// </summary>
        /// <value>student must accept submission statement</value>
        [DataMember(Name = "requiresubmissionstatement", EmitDefaultValue = false)]
        public int Requiresubmissionstatement { get; set; }

        /// <summary>
        /// show identities for a blind marking assignment
        /// </summary>
        /// <value>show identities for a blind marking assignment</value>
        [DataMember(Name = "revealidentities", EmitDefaultValue = false)]
        public int Revealidentities { get; set; }

        /// <summary>
        /// send notifications
        /// </summary>
        /// <value>send notifications</value>
        [DataMember(Name = "sendlatenotifications", EmitDefaultValue = false)]
        public int Sendlatenotifications { get; set; }

        /// <summary>
        /// send notifications
        /// </summary>
        /// <value>send notifications</value>
        [DataMember(Name = "sendnotifications", EmitDefaultValue = false)]
        public int Sendnotifications { get; set; }

        /// <summary>
        /// send student notifications (default)
        /// </summary>
        /// <value>send student notifications (default)</value>
        [DataMember(Name = "sendstudentnotifications", EmitDefaultValue = false)]
        public int Sendstudentnotifications { get; set; }

        /// <summary>
        /// Flag to only show files during submission
        /// </summary>
        /// <value>Flag to only show files during submission</value>
        [DataMember(Name = "submissionattachments", EmitDefaultValue = false)]
        public int Submissionattachments { get; set; }

        /// <summary>
        /// submissions drafts
        /// </summary>
        /// <value>submissions drafts</value>
        [DataMember(Name = "submissiondrafts", EmitDefaultValue = false)]
        public int Submissiondrafts { get; set; }

        /// <summary>
        /// Submission statement formatted.
        /// </summary>
        /// <value>Submission statement formatted.</value>
        [DataMember(Name = "submissionstatement", EmitDefaultValue = false)]
        public string Submissionstatement { get; set; }

        /// <summary>
        /// submissionstatement format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>submissionstatement format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "submissionstatementformat", EmitDefaultValue = false)]
        public int Submissionstatementformat { get; set; }

        /// <summary>
        /// if enabled, students submit as a team
        /// </summary>
        /// <value>if enabled, students submit as a team</value>
        [DataMember(Name = "teamsubmission", EmitDefaultValue = false)]
        public int Teamsubmission { get; set; }

        /// <summary>
        /// the grouping id for the team submission groups
        /// </summary>
        /// <value>the grouping id for the team submission groups</value>
        [DataMember(Name = "teamsubmissiongroupingid", EmitDefaultValue = false)]
        public int Teamsubmissiongroupingid { get; set; }

        /// <summary>
        /// Time limit to complete assigment
        /// </summary>
        /// <value>Time limit to complete assigment</value>
        [DataMember(Name = "timelimit", EmitDefaultValue = false)]
        public int Timelimit { get; set; }

        /// <summary>
        /// last time assignment was modified
        /// </summary>
        /// <value>last time assignment was modified</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner {\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  Activityattachments: ").Append(Activityattachments).Append("\n");
            sb.Append("  Activityformat: ").Append(Activityformat).Append("\n");
            sb.Append("  Allowsubmissionsfromdate: ").Append(Allowsubmissionsfromdate).Append("\n");
            sb.Append("  Attemptreopenmethod: ").Append(Attemptreopenmethod).Append("\n");
            sb.Append("  Blindmarking: ").Append(Blindmarking).Append("\n");
            sb.Append("  Cmid: ").Append(Cmid).Append("\n");
            sb.Append("  Completionsubmit: ").Append(Completionsubmit).Append("\n");
            sb.Append("  Configs: ").Append(Configs).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Cutoffdate: ").Append(Cutoffdate).Append("\n");
            sb.Append("  Duedate: ").Append(Duedate).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Gradingduedate: ").Append(Gradingduedate).Append("\n");
            sb.Append("  Hidegrader: ").Append(Hidegrader).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Intro: ").Append(Intro).Append("\n");
            sb.Append("  Introattachments: ").Append(Introattachments).Append("\n");
            sb.Append("  Introfiles: ").Append(Introfiles).Append("\n");
            sb.Append("  Introformat: ").Append(Introformat).Append("\n");
            sb.Append("  Markingallocation: ").Append(Markingallocation).Append("\n");
            sb.Append("  Markingworkflow: ").Append(Markingworkflow).Append("\n");
            sb.Append("  Maxattempts: ").Append(Maxattempts).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nosubmissions: ").Append(Nosubmissions).Append("\n");
            sb.Append("  Preventsubmissionnotingroup: ").Append(Preventsubmissionnotingroup).Append("\n");
            sb.Append("  Requireallteammemberssubmit: ").Append(Requireallteammemberssubmit).Append("\n");
            sb.Append("  Requiresubmissionstatement: ").Append(Requiresubmissionstatement).Append("\n");
            sb.Append("  Revealidentities: ").Append(Revealidentities).Append("\n");
            sb.Append("  Sendlatenotifications: ").Append(Sendlatenotifications).Append("\n");
            sb.Append("  Sendnotifications: ").Append(Sendnotifications).Append("\n");
            sb.Append("  Sendstudentnotifications: ").Append(Sendstudentnotifications).Append("\n");
            sb.Append("  Submissionattachments: ").Append(Submissionattachments).Append("\n");
            sb.Append("  Submissiondrafts: ").Append(Submissiondrafts).Append("\n");
            sb.Append("  Submissionstatement: ").Append(Submissionstatement).Append("\n");
            sb.Append("  Submissionstatementformat: ").Append(Submissionstatementformat).Append("\n");
            sb.Append("  Teamsubmission: ").Append(Teamsubmission).Append("\n");
            sb.Append("  Teamsubmissiongroupingid: ").Append(Teamsubmissiongroupingid).Append("\n");
            sb.Append("  Timelimit: ").Append(Timelimit).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
