/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModLessonGetPageData200Response
    /// </summary>
    [DataContract(Name = "mod_lesson_get_page_data_200_response")]
    public partial class ModLessonGetPageData200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetPageData200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModLessonGetPageData200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetPageData200Response" /> class.
        /// </summary>
        /// <param name="answers">answers (required).</param>
        /// <param name="contentfiles">contentfiles (required).</param>
        /// <param name="displaymenu">Whether we should display the menu or not in this page. (required) (default to null).</param>
        /// <param name="messages">messages (required).</param>
        /// <param name="newpageid">New page id (if a jump was made) (required) (default to null).</param>
        /// <param name="ongoingscore">The ongoing score message (required) (default to &quot;null&quot;).</param>
        /// <param name="page">page.</param>
        /// <param name="pagecontent">Page html content (default to &quot;null&quot;).</param>
        /// <param name="progress">Progress percentage in the lesson (required) (default to null).</param>
        /// <param name="warnings">warnings.</param>
        public ModLessonGetPageData200Response(List<ModLessonGetPageData200ResponseAnswersInner> answers = default(List<ModLessonGetPageData200ResponseAnswersInner>), List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> contentfiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), bool displaymenu = null, List<ModLessonGetPageData200ResponseMessagesInner> messages = default(List<ModLessonGetPageData200ResponseMessagesInner>), int newpageid = null, string ongoingscore = @"null", ModLessonGetPageData200ResponsePage page = default(ModLessonGetPageData200ResponsePage), string pagecontent = @"null", int progress = null, List<AuthEmailSignupUser200ResponseWarningsInner> warnings = default(List<AuthEmailSignupUser200ResponseWarningsInner>))
        {
            // to ensure "answers" is required (not null)
            if (answers == null)
            {
                throw new ArgumentNullException("answers is a required property for ModLessonGetPageData200Response and cannot be null");
            }
            this.Answers = answers;
            // to ensure "contentfiles" is required (not null)
            if (contentfiles == null)
            {
                throw new ArgumentNullException("contentfiles is a required property for ModLessonGetPageData200Response and cannot be null");
            }
            this.Contentfiles = contentfiles;
            this.Displaymenu = displaymenu;
            // to ensure "messages" is required (not null)
            if (messages == null)
            {
                throw new ArgumentNullException("messages is a required property for ModLessonGetPageData200Response and cannot be null");
            }
            this.Messages = messages;
            this.Newpageid = newpageid;
            // to ensure "ongoingscore" is required (not null)
            if (ongoingscore == null)
            {
                throw new ArgumentNullException("ongoingscore is a required property for ModLessonGetPageData200Response and cannot be null");
            }
            this.Ongoingscore = ongoingscore;
            this.Progress = progress;
            this.Page = page;
            // use default value if no "pagecontent" provided
            this.Pagecontent = pagecontent ?? @"null";
            this.Warnings = warnings;
        }

        /// <summary>
        /// Gets or Sets Answers
        /// </summary>
        [DataMember(Name = "answers", IsRequired = true, EmitDefaultValue = true)]
        public List<ModLessonGetPageData200ResponseAnswersInner> Answers { get; set; }

        /// <summary>
        /// Gets or Sets Contentfiles
        /// </summary>
        [DataMember(Name = "contentfiles", IsRequired = true, EmitDefaultValue = true)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Contentfiles { get; set; }

        /// <summary>
        /// Whether we should display the menu or not in this page.
        /// </summary>
        /// <value>Whether we should display the menu or not in this page.</value>
        [DataMember(Name = "displaymenu", IsRequired = true, EmitDefaultValue = true)]
        public bool Displaymenu { get; set; }

        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        [DataMember(Name = "messages", IsRequired = true, EmitDefaultValue = true)]
        public List<ModLessonGetPageData200ResponseMessagesInner> Messages { get; set; }

        /// <summary>
        /// New page id (if a jump was made)
        /// </summary>
        /// <value>New page id (if a jump was made)</value>
        [DataMember(Name = "newpageid", IsRequired = true, EmitDefaultValue = true)]
        public int Newpageid { get; set; }

        /// <summary>
        /// The ongoing score message
        /// </summary>
        /// <value>The ongoing score message</value>
        [DataMember(Name = "ongoingscore", IsRequired = true, EmitDefaultValue = true)]
        public string Ongoingscore { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public ModLessonGetPageData200ResponsePage Page { get; set; }

        /// <summary>
        /// Page html content
        /// </summary>
        /// <value>Page html content</value>
        [DataMember(Name = "pagecontent", EmitDefaultValue = false)]
        public string Pagecontent { get; set; }

        /// <summary>
        /// Progress percentage in the lesson
        /// </summary>
        /// <value>Progress percentage in the lesson</value>
        [DataMember(Name = "progress", IsRequired = true, EmitDefaultValue = true)]
        public int Progress { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<AuthEmailSignupUser200ResponseWarningsInner> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModLessonGetPageData200Response {\n");
            sb.Append("  Answers: ").Append(Answers).Append("\n");
            sb.Append("  Contentfiles: ").Append(Contentfiles).Append("\n");
            sb.Append("  Displaymenu: ").Append(Displaymenu).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  Newpageid: ").Append(Newpageid).Append("\n");
            sb.Append("  Ongoingscore: ").Append(Ongoingscore).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Pagecontent: ").Append(Pagecontent).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
