/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// Subwikis
    /// </summary>
    [DataContract(Name = "mod_wiki_get_subwikis_200_response_subwikis_inner")]
    public partial class ModWikiGetSubwikis200ResponseSubwikisInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModWikiGetSubwikis200ResponseSubwikisInner" /> class.
        /// </summary>
        /// <param name="canedit">True if user can edit the subwiki. (default to null).</param>
        /// <param name="groupid">Group ID. (default to &quot;null&quot;).</param>
        /// <param name="id">Subwiki ID. (default to null).</param>
        /// <param name="userid">User ID. (default to null).</param>
        /// <param name="wikiid">Wiki ID. (default to null).</param>
        public ModWikiGetSubwikis200ResponseSubwikisInner(bool canedit = null, string groupid = @"null", int id = null, int userid = null, int wikiid = null)
        {
            this.Canedit = canedit;
            // use default value if no "groupid" provided
            this.Groupid = groupid ?? @"null";
            this.Id = id;
            this.Userid = userid;
            this.Wikiid = wikiid;
        }

        /// <summary>
        /// True if user can edit the subwiki.
        /// </summary>
        /// <value>True if user can edit the subwiki.</value>
        [DataMember(Name = "canedit", EmitDefaultValue = true)]
        public bool Canedit { get; set; }

        /// <summary>
        /// Group ID.
        /// </summary>
        /// <value>Group ID.</value>
        [DataMember(Name = "groupid", EmitDefaultValue = false)]
        public string Groupid { get; set; }

        /// <summary>
        /// Subwiki ID.
        /// </summary>
        /// <value>Subwiki ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// User ID.
        /// </summary>
        /// <value>User ID.</value>
        [DataMember(Name = "userid", EmitDefaultValue = false)]
        public int Userid { get; set; }

        /// <summary>
        /// Wiki ID.
        /// </summary>
        /// <value>Wiki ID.</value>
        [DataMember(Name = "wikiid", EmitDefaultValue = false)]
        public int Wikiid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModWikiGetSubwikis200ResponseSubwikisInner {\n");
            sb.Append("  Canedit: ").Append(Canedit).Append("\n");
            sb.Append("  Groupid: ").Append(Groupid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("  Wikiid: ").Append(Wikiid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
