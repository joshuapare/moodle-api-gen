/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModQuizGetQuizzesByCourses200ResponseQuizzesInner
    /// </summary>
    [DataContract(Name = "mod_quiz_get_quizzes_by_courses_200_response_quizzes_inner")]
    public partial class ModQuizGetQuizzesByCourses200ResponseQuizzesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModQuizGetQuizzesByCourses200ResponseQuizzesInner" /> class.
        /// </summary>
        /// <param name="allowofflineattempts">Whether to allow the quiz to be attempted                                                                             offline in the mobile app (default to null).</param>
        /// <param name="attemptonlast">Whether subsequent attempts start from the answer                                                                     to the previous attempt (1) or start blank (0). (default to null).</param>
        /// <param name="attempts">The maximum number of attempts a student is allowed. (default to null).</param>
        /// <param name="autosaveperiod">Auto-save delay (default to null).</param>
        /// <param name="browsersecurity">Restriciton on the browser the student must                                                                     use. E.g. &#39;securewindow&#39;. (default to &quot;null&quot;).</param>
        /// <param name="canredoquestions">Allows students to redo any completed question                                                                         within a quiz attempt. (default to null).</param>
        /// <param name="completionattemptsexhausted">Mark quiz complete when the student has                                                                                 exhausted the maximum number of attempts (default to null).</param>
        /// <param name="completionpass">Whether to require passing grade (default to null).</param>
        /// <param name="course">Course id.</param>
        /// <param name="coursemodule">Course module id.</param>
        /// <param name="decimalpoints">Number of decimal points to use when displaying                                                                     grades. (default to null).</param>
        /// <param name="delay1">Delay that must be left between the first and second attempt,                                                             in seconds. (default to null).</param>
        /// <param name="delay2">Delay that must be left between the second and subsequent                                                             attempt, in seconds. (default to null).</param>
        /// <param name="graceperiod">The amount of time (in seconds) after the time limit                                                                 runs out during which attempts can still be submitted,                                                                 if overduehandling is set to allow it. (default to null).</param>
        /// <param name="grade">The total that the quiz overall grade is scaled to be                                                             out of. (default to nullM).</param>
        /// <param name="grademethod">One of the values QUIZ_GRADEHIGHEST, QUIZ_GRADEAVERAGE,                                                                     QUIZ_ATTEMPTFIRST or QUIZ_ATTEMPTLAST. (default to null).</param>
        /// <param name="groupingid">Group id.</param>
        /// <param name="groupmode">Group mode.</param>
        /// <param name="hasfeedback">Whether the quiz has any non-blank feedback text (default to null).</param>
        /// <param name="hasquestions">Whether the quiz has questions (default to null).</param>
        /// <param name="id">Activity instance id.</param>
        /// <param name="intro">Activity introduction.</param>
        /// <param name="introfiles">introfiles.</param>
        /// <param name="introformat">intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN).</param>
        /// <param name="lang">Forced activity language.</param>
        /// <param name="name">Activity name.</param>
        /// <param name="navmethod">Any constraints on how the user is allowed to navigate                                                                 around the quiz. Currently recognised values are                                                                 &#39;free&#39; and &#39;seq&#39;. (default to &quot;null&quot;).</param>
        /// <param name="overduehandling">The method used to handle overdue attempts.                                                                     &#39;autosubmit&#39;, &#39;graceperiod&#39; or &#39;autoabandon&#39;. (default to &quot;null&quot;).</param>
        /// <param name="password">A password that the student must enter before starting or                                                                 continuing a quiz attempt. (default to &quot;null&quot;).</param>
        /// <param name="preferredbehaviour">The behaviour to ask questions to use. (default to &quot;null&quot;).</param>
        /// <param name="questiondecimalpoints">Number of decimal points to use when                                                                             displaying question grades.                                                                             (-1 means use decimalpoints.) (default to null).</param>
        /// <param name="questionsperpage">How often to insert a page break when editing                                                                         the quiz, or when shuffling the question order. (default to null).</param>
        /// <param name="reviewattempt">Whether users are allowed to review their quiz                                                                     attempts at various times. This is a bit field, decoded by the                                                                     \\mod_quiz\\question\\display_options class. It is formed by ORing                                                                     together the constants defined there. (default to null).</param>
        /// <param name="reviewcorrectness">Whether users are allowed to review their quiz                                                        attempts at various times.A bit field, like reviewattempt. (default to null).</param>
        /// <param name="reviewgeneralfeedback">Whether users are allowed to review their                                                                             quiz attempts at various times. A bit field, like                                                                             reviewattempt. (default to null).</param>
        /// <param name="reviewmarks">Whether users are allowed to review their quiz attempts                                                                 at various times. A bit field, like reviewattempt. (default to null).</param>
        /// <param name="reviewmaxmarks">Whether users are allowed to review their quiz                                                   attempts at various times. A bit field, like reviewattempt. (default to null).</param>
        /// <param name="reviewoverallfeedback">Whether users are allowed to review their quiz                                                                             attempts at various times. A bit field, like                                                                             reviewattempt. (default to null).</param>
        /// <param name="reviewrightanswer">Whether users are allowed to review their quiz                                                                         attempts at various times. A bit field, like                                                                         reviewattempt. (default to null).</param>
        /// <param name="reviewspecificfeedback">Whether users are allowed to review their                                                                             quiz attempts at various times. A bit field, like                                                                             reviewattempt..</param>
        /// <param name="section">Course section id.</param>
        /// <param name="showblocks">Whether blocks should be shown on the attempt.php and                                                                 review.php pages. (default to null).</param>
        /// <param name="showuserpicture">Option to show the user&#39;s picture during the                                                                     attempt and on the review page. (default to null).</param>
        /// <param name="shuffleanswers">Whether the parts of the question should be shuffled,                                                                     in those question types that support it. (default to null).</param>
        /// <param name="subnet">Used to restrict the IP addresses from which this quiz can                                                             be attempted. The format is as requried by the address_in_subnet                                                             function. (default to &quot;null&quot;).</param>
        /// <param name="sumgrades">The total of all the question instance maxmarks. (default to nullM).</param>
        /// <param name="timeclose">The time when this quiz closes. (0 &#x3D; no restriction.) (default to null).</param>
        /// <param name="timecreated">The time when the quiz was added to the course. (default to null).</param>
        /// <param name="timelimit">The time limit for quiz attempts, in seconds. (default to null).</param>
        /// <param name="timemodified">Last modified time..</param>
        /// <param name="timeopen">The time when this quiz opens. (0 &#x3D; no restriction.) (default to null).</param>
        /// <param name="visible">Visible.</param>
        public ModQuizGetQuizzesByCourses200ResponseQuizzesInner(int allowofflineattempts = null, int attemptonlast = null, int attempts = null, int autosaveperiod = null, string browsersecurity = @"null", int canredoquestions = null, int completionattemptsexhausted = null, int completionpass = null, int course = default(int), int coursemodule = default(int), int decimalpoints = null, int delay1 = null, int delay2 = null, int graceperiod = null, decimal grade = nullM, int grademethod = null, int groupingid = default(int), int groupmode = default(int), int hasfeedback = null, int hasquestions = null, int id = default(int), string intro = default(string), List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), int introformat = default(int), string lang = default(string), string name = default(string), string navmethod = @"null", string overduehandling = @"null", string password = @"null", string preferredbehaviour = @"null", int questiondecimalpoints = null, int questionsperpage = null, int reviewattempt = null, int reviewcorrectness = null, int reviewgeneralfeedback = null, int reviewmarks = null, int reviewmaxmarks = null, int reviewoverallfeedback = null, int reviewrightanswer = null, int reviewspecificfeedback = default(int), int section = default(int), int showblocks = null, int showuserpicture = null, int shuffleanswers = null, string subnet = @"null", decimal sumgrades = nullM, int timeclose = null, int timecreated = null, int timelimit = null, int timemodified = default(int), int timeopen = null, bool visible = default(bool))
        {
            this.Allowofflineattempts = allowofflineattempts;
            this.Attemptonlast = attemptonlast;
            this.Attempts = attempts;
            this.Autosaveperiod = autosaveperiod;
            // use default value if no "browsersecurity" provided
            this.Browsersecurity = browsersecurity ?? @"null";
            this.Canredoquestions = canredoquestions;
            this.Completionattemptsexhausted = completionattemptsexhausted;
            this.Completionpass = completionpass;
            this.Course = course;
            this.Coursemodule = coursemodule;
            this.Decimalpoints = decimalpoints;
            this.Delay1 = delay1;
            this.Delay2 = delay2;
            this.Graceperiod = graceperiod;
            this.Grade = grade;
            this.Grademethod = grademethod;
            this.Groupingid = groupingid;
            this.Groupmode = groupmode;
            this.Hasfeedback = hasfeedback;
            this.Hasquestions = hasquestions;
            this.Id = id;
            this.Intro = intro;
            this.Introfiles = introfiles;
            this.Introformat = introformat;
            this.Lang = lang;
            this.Name = name;
            // use default value if no "navmethod" provided
            this.Navmethod = navmethod ?? @"null";
            // use default value if no "overduehandling" provided
            this.Overduehandling = overduehandling ?? @"null";
            // use default value if no "password" provided
            this.Password = password ?? @"null";
            // use default value if no "preferredbehaviour" provided
            this.Preferredbehaviour = preferredbehaviour ?? @"null";
            this.Questiondecimalpoints = questiondecimalpoints;
            this.Questionsperpage = questionsperpage;
            this.Reviewattempt = reviewattempt;
            this.Reviewcorrectness = reviewcorrectness;
            this.Reviewgeneralfeedback = reviewgeneralfeedback;
            this.Reviewmarks = reviewmarks;
            this.Reviewmaxmarks = reviewmaxmarks;
            this.Reviewoverallfeedback = reviewoverallfeedback;
            this.Reviewrightanswer = reviewrightanswer;
            this.Reviewspecificfeedback = reviewspecificfeedback;
            this.Section = section;
            this.Showblocks = showblocks;
            this.Showuserpicture = showuserpicture;
            this.Shuffleanswers = shuffleanswers;
            // use default value if no "subnet" provided
            this.Subnet = subnet ?? @"null";
            this.Sumgrades = sumgrades;
            this.Timeclose = timeclose;
            this.Timecreated = timecreated;
            this.Timelimit = timelimit;
            this.Timemodified = timemodified;
            this.Timeopen = timeopen;
            this.Visible = visible;
        }

        /// <summary>
        /// Whether to allow the quiz to be attempted                                                                             offline in the mobile app
        /// </summary>
        /// <value>Whether to allow the quiz to be attempted                                                                             offline in the mobile app</value>
        [DataMember(Name = "allowofflineattempts", EmitDefaultValue = false)]
        public int Allowofflineattempts { get; set; }

        /// <summary>
        /// Whether subsequent attempts start from the answer                                                                     to the previous attempt (1) or start blank (0).
        /// </summary>
        /// <value>Whether subsequent attempts start from the answer                                                                     to the previous attempt (1) or start blank (0).</value>
        [DataMember(Name = "attemptonlast", EmitDefaultValue = false)]
        public int Attemptonlast { get; set; }

        /// <summary>
        /// The maximum number of attempts a student is allowed.
        /// </summary>
        /// <value>The maximum number of attempts a student is allowed.</value>
        [DataMember(Name = "attempts", EmitDefaultValue = false)]
        public int Attempts { get; set; }

        /// <summary>
        /// Auto-save delay
        /// </summary>
        /// <value>Auto-save delay</value>
        [DataMember(Name = "autosaveperiod", EmitDefaultValue = false)]
        public int Autosaveperiod { get; set; }

        /// <summary>
        /// Restriciton on the browser the student must                                                                     use. E.g. &#39;securewindow&#39;.
        /// </summary>
        /// <value>Restriciton on the browser the student must                                                                     use. E.g. &#39;securewindow&#39;.</value>
        [DataMember(Name = "browsersecurity", EmitDefaultValue = false)]
        public string Browsersecurity { get; set; }

        /// <summary>
        /// Allows students to redo any completed question                                                                         within a quiz attempt.
        /// </summary>
        /// <value>Allows students to redo any completed question                                                                         within a quiz attempt.</value>
        [DataMember(Name = "canredoquestions", EmitDefaultValue = false)]
        public int Canredoquestions { get; set; }

        /// <summary>
        /// Mark quiz complete when the student has                                                                                 exhausted the maximum number of attempts
        /// </summary>
        /// <value>Mark quiz complete when the student has                                                                                 exhausted the maximum number of attempts</value>
        [DataMember(Name = "completionattemptsexhausted", EmitDefaultValue = false)]
        public int Completionattemptsexhausted { get; set; }

        /// <summary>
        /// Whether to require passing grade
        /// </summary>
        /// <value>Whether to require passing grade</value>
        [DataMember(Name = "completionpass", EmitDefaultValue = false)]
        public int Completionpass { get; set; }

        /// <summary>
        /// Course id
        /// </summary>
        /// <value>Course id</value>
        [DataMember(Name = "course", EmitDefaultValue = false)]
        public int Course { get; set; }

        /// <summary>
        /// Course module id
        /// </summary>
        /// <value>Course module id</value>
        [DataMember(Name = "coursemodule", EmitDefaultValue = false)]
        public int Coursemodule { get; set; }

        /// <summary>
        /// Number of decimal points to use when displaying                                                                     grades.
        /// </summary>
        /// <value>Number of decimal points to use when displaying                                                                     grades.</value>
        [DataMember(Name = "decimalpoints", EmitDefaultValue = false)]
        public int Decimalpoints { get; set; }

        /// <summary>
        /// Delay that must be left between the first and second attempt,                                                             in seconds.
        /// </summary>
        /// <value>Delay that must be left between the first and second attempt,                                                             in seconds.</value>
        [DataMember(Name = "delay1", EmitDefaultValue = false)]
        public int Delay1 { get; set; }

        /// <summary>
        /// Delay that must be left between the second and subsequent                                                             attempt, in seconds.
        /// </summary>
        /// <value>Delay that must be left between the second and subsequent                                                             attempt, in seconds.</value>
        [DataMember(Name = "delay2", EmitDefaultValue = false)]
        public int Delay2 { get; set; }

        /// <summary>
        /// The amount of time (in seconds) after the time limit                                                                 runs out during which attempts can still be submitted,                                                                 if overduehandling is set to allow it.
        /// </summary>
        /// <value>The amount of time (in seconds) after the time limit                                                                 runs out during which attempts can still be submitted,                                                                 if overduehandling is set to allow it.</value>
        [DataMember(Name = "graceperiod", EmitDefaultValue = false)]
        public int Graceperiod { get; set; }

        /// <summary>
        /// The total that the quiz overall grade is scaled to be                                                             out of.
        /// </summary>
        /// <value>The total that the quiz overall grade is scaled to be                                                             out of.</value>
        [DataMember(Name = "grade", EmitDefaultValue = false)]
        public decimal Grade { get; set; }

        /// <summary>
        /// One of the values QUIZ_GRADEHIGHEST, QUIZ_GRADEAVERAGE,                                                                     QUIZ_ATTEMPTFIRST or QUIZ_ATTEMPTLAST.
        /// </summary>
        /// <value>One of the values QUIZ_GRADEHIGHEST, QUIZ_GRADEAVERAGE,                                                                     QUIZ_ATTEMPTFIRST or QUIZ_ATTEMPTLAST.</value>
        [DataMember(Name = "grademethod", EmitDefaultValue = false)]
        public int Grademethod { get; set; }

        /// <summary>
        /// Group id
        /// </summary>
        /// <value>Group id</value>
        [DataMember(Name = "groupingid", EmitDefaultValue = false)]
        public int Groupingid { get; set; }

        /// <summary>
        /// Group mode
        /// </summary>
        /// <value>Group mode</value>
        [DataMember(Name = "groupmode", EmitDefaultValue = false)]
        public int Groupmode { get; set; }

        /// <summary>
        /// Whether the quiz has any non-blank feedback text
        /// </summary>
        /// <value>Whether the quiz has any non-blank feedback text</value>
        [DataMember(Name = "hasfeedback", EmitDefaultValue = false)]
        public int Hasfeedback { get; set; }

        /// <summary>
        /// Whether the quiz has questions
        /// </summary>
        /// <value>Whether the quiz has questions</value>
        [DataMember(Name = "hasquestions", EmitDefaultValue = false)]
        public int Hasquestions { get; set; }

        /// <summary>
        /// Activity instance id
        /// </summary>
        /// <value>Activity instance id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Activity introduction
        /// </summary>
        /// <value>Activity introduction</value>
        [DataMember(Name = "intro", EmitDefaultValue = false)]
        public string Intro { get; set; }

        /// <summary>
        /// Gets or Sets Introfiles
        /// </summary>
        [DataMember(Name = "introfiles", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Introfiles { get; set; }

        /// <summary>
        /// intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "introformat", EmitDefaultValue = false)]
        public int Introformat { get; set; }

        /// <summary>
        /// Forced activity language
        /// </summary>
        /// <value>Forced activity language</value>
        [DataMember(Name = "lang", EmitDefaultValue = false)]
        public string Lang { get; set; }

        /// <summary>
        /// Activity name
        /// </summary>
        /// <value>Activity name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Any constraints on how the user is allowed to navigate                                                                 around the quiz. Currently recognised values are                                                                 &#39;free&#39; and &#39;seq&#39;.
        /// </summary>
        /// <value>Any constraints on how the user is allowed to navigate                                                                 around the quiz. Currently recognised values are                                                                 &#39;free&#39; and &#39;seq&#39;.</value>
        [DataMember(Name = "navmethod", EmitDefaultValue = false)]
        public string Navmethod { get; set; }

        /// <summary>
        /// The method used to handle overdue attempts.                                                                     &#39;autosubmit&#39;, &#39;graceperiod&#39; or &#39;autoabandon&#39;.
        /// </summary>
        /// <value>The method used to handle overdue attempts.                                                                     &#39;autosubmit&#39;, &#39;graceperiod&#39; or &#39;autoabandon&#39;.</value>
        [DataMember(Name = "overduehandling", EmitDefaultValue = false)]
        public string Overduehandling { get; set; }

        /// <summary>
        /// A password that the student must enter before starting or                                                                 continuing a quiz attempt.
        /// </summary>
        /// <value>A password that the student must enter before starting or                                                                 continuing a quiz attempt.</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// The behaviour to ask questions to use.
        /// </summary>
        /// <value>The behaviour to ask questions to use.</value>
        [DataMember(Name = "preferredbehaviour", EmitDefaultValue = false)]
        public string Preferredbehaviour { get; set; }

        /// <summary>
        /// Number of decimal points to use when                                                                             displaying question grades.                                                                             (-1 means use decimalpoints.)
        /// </summary>
        /// <value>Number of decimal points to use when                                                                             displaying question grades.                                                                             (-1 means use decimalpoints.)</value>
        [DataMember(Name = "questiondecimalpoints", EmitDefaultValue = false)]
        public int Questiondecimalpoints { get; set; }

        /// <summary>
        /// How often to insert a page break when editing                                                                         the quiz, or when shuffling the question order.
        /// </summary>
        /// <value>How often to insert a page break when editing                                                                         the quiz, or when shuffling the question order.</value>
        [DataMember(Name = "questionsperpage", EmitDefaultValue = false)]
        public int Questionsperpage { get; set; }

        /// <summary>
        /// Whether users are allowed to review their quiz                                                                     attempts at various times. This is a bit field, decoded by the                                                                     \\mod_quiz\\question\\display_options class. It is formed by ORing                                                                     together the constants defined there.
        /// </summary>
        /// <value>Whether users are allowed to review their quiz                                                                     attempts at various times. This is a bit field, decoded by the                                                                     \\mod_quiz\\question\\display_options class. It is formed by ORing                                                                     together the constants defined there.</value>
        [DataMember(Name = "reviewattempt", EmitDefaultValue = false)]
        public int Reviewattempt { get; set; }

        /// <summary>
        /// Whether users are allowed to review their quiz                                                        attempts at various times.A bit field, like reviewattempt.
        /// </summary>
        /// <value>Whether users are allowed to review their quiz                                                        attempts at various times.A bit field, like reviewattempt.</value>
        [DataMember(Name = "reviewcorrectness", EmitDefaultValue = false)]
        public int Reviewcorrectness { get; set; }

        /// <summary>
        /// Whether users are allowed to review their                                                                             quiz attempts at various times. A bit field, like                                                                             reviewattempt.
        /// </summary>
        /// <value>Whether users are allowed to review their                                                                             quiz attempts at various times. A bit field, like                                                                             reviewattempt.</value>
        [DataMember(Name = "reviewgeneralfeedback", EmitDefaultValue = false)]
        public int Reviewgeneralfeedback { get; set; }

        /// <summary>
        /// Whether users are allowed to review their quiz attempts                                                                 at various times. A bit field, like reviewattempt.
        /// </summary>
        /// <value>Whether users are allowed to review their quiz attempts                                                                 at various times. A bit field, like reviewattempt.</value>
        [DataMember(Name = "reviewmarks", EmitDefaultValue = false)]
        public int Reviewmarks { get; set; }

        /// <summary>
        /// Whether users are allowed to review their quiz                                                   attempts at various times. A bit field, like reviewattempt.
        /// </summary>
        /// <value>Whether users are allowed to review their quiz                                                   attempts at various times. A bit field, like reviewattempt.</value>
        [DataMember(Name = "reviewmaxmarks", EmitDefaultValue = false)]
        public int Reviewmaxmarks { get; set; }

        /// <summary>
        /// Whether users are allowed to review their quiz                                                                             attempts at various times. A bit field, like                                                                             reviewattempt.
        /// </summary>
        /// <value>Whether users are allowed to review their quiz                                                                             attempts at various times. A bit field, like                                                                             reviewattempt.</value>
        [DataMember(Name = "reviewoverallfeedback", EmitDefaultValue = false)]
        public int Reviewoverallfeedback { get; set; }

        /// <summary>
        /// Whether users are allowed to review their quiz                                                                         attempts at various times. A bit field, like                                                                         reviewattempt.
        /// </summary>
        /// <value>Whether users are allowed to review their quiz                                                                         attempts at various times. A bit field, like                                                                         reviewattempt.</value>
        [DataMember(Name = "reviewrightanswer", EmitDefaultValue = false)]
        public int Reviewrightanswer { get; set; }

        /// <summary>
        /// Whether users are allowed to review their                                                                             quiz attempts at various times. A bit field, like                                                                             reviewattempt.
        /// </summary>
        /// <value>Whether users are allowed to review their                                                                             quiz attempts at various times. A bit field, like                                                                             reviewattempt.</value>
        [DataMember(Name = "reviewspecificfeedback", EmitDefaultValue = false)]
        public int Reviewspecificfeedback { get; set; }

        /// <summary>
        /// Course section id
        /// </summary>
        /// <value>Course section id</value>
        [DataMember(Name = "section", EmitDefaultValue = false)]
        public int Section { get; set; }

        /// <summary>
        /// Whether blocks should be shown on the attempt.php and                                                                 review.php pages.
        /// </summary>
        /// <value>Whether blocks should be shown on the attempt.php and                                                                 review.php pages.</value>
        [DataMember(Name = "showblocks", EmitDefaultValue = false)]
        public int Showblocks { get; set; }

        /// <summary>
        /// Option to show the user&#39;s picture during the                                                                     attempt and on the review page.
        /// </summary>
        /// <value>Option to show the user&#39;s picture during the                                                                     attempt and on the review page.</value>
        [DataMember(Name = "showuserpicture", EmitDefaultValue = false)]
        public int Showuserpicture { get; set; }

        /// <summary>
        /// Whether the parts of the question should be shuffled,                                                                     in those question types that support it.
        /// </summary>
        /// <value>Whether the parts of the question should be shuffled,                                                                     in those question types that support it.</value>
        [DataMember(Name = "shuffleanswers", EmitDefaultValue = false)]
        public int Shuffleanswers { get; set; }

        /// <summary>
        /// Used to restrict the IP addresses from which this quiz can                                                             be attempted. The format is as requried by the address_in_subnet                                                             function.
        /// </summary>
        /// <value>Used to restrict the IP addresses from which this quiz can                                                             be attempted. The format is as requried by the address_in_subnet                                                             function.</value>
        [DataMember(Name = "subnet", EmitDefaultValue = false)]
        public string Subnet { get; set; }

        /// <summary>
        /// The total of all the question instance maxmarks.
        /// </summary>
        /// <value>The total of all the question instance maxmarks.</value>
        [DataMember(Name = "sumgrades", EmitDefaultValue = false)]
        public decimal Sumgrades { get; set; }

        /// <summary>
        /// The time when this quiz closes. (0 &#x3D; no restriction.)
        /// </summary>
        /// <value>The time when this quiz closes. (0 &#x3D; no restriction.)</value>
        [DataMember(Name = "timeclose", EmitDefaultValue = false)]
        public int Timeclose { get; set; }

        /// <summary>
        /// The time when the quiz was added to the course.
        /// </summary>
        /// <value>The time when the quiz was added to the course.</value>
        [DataMember(Name = "timecreated", EmitDefaultValue = false)]
        public int Timecreated { get; set; }

        /// <summary>
        /// The time limit for quiz attempts, in seconds.
        /// </summary>
        /// <value>The time limit for quiz attempts, in seconds.</value>
        [DataMember(Name = "timelimit", EmitDefaultValue = false)]
        public int Timelimit { get; set; }

        /// <summary>
        /// Last modified time.
        /// </summary>
        /// <value>Last modified time.</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// The time when this quiz opens. (0 &#x3D; no restriction.)
        /// </summary>
        /// <value>The time when this quiz opens. (0 &#x3D; no restriction.)</value>
        [DataMember(Name = "timeopen", EmitDefaultValue = false)]
        public int Timeopen { get; set; }

        /// <summary>
        /// Visible
        /// </summary>
        /// <value>Visible</value>
        [DataMember(Name = "visible", EmitDefaultValue = true)]
        public bool Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModQuizGetQuizzesByCourses200ResponseQuizzesInner {\n");
            sb.Append("  Allowofflineattempts: ").Append(Allowofflineattempts).Append("\n");
            sb.Append("  Attemptonlast: ").Append(Attemptonlast).Append("\n");
            sb.Append("  Attempts: ").Append(Attempts).Append("\n");
            sb.Append("  Autosaveperiod: ").Append(Autosaveperiod).Append("\n");
            sb.Append("  Browsersecurity: ").Append(Browsersecurity).Append("\n");
            sb.Append("  Canredoquestions: ").Append(Canredoquestions).Append("\n");
            sb.Append("  Completionattemptsexhausted: ").Append(Completionattemptsexhausted).Append("\n");
            sb.Append("  Completionpass: ").Append(Completionpass).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Coursemodule: ").Append(Coursemodule).Append("\n");
            sb.Append("  Decimalpoints: ").Append(Decimalpoints).Append("\n");
            sb.Append("  Delay1: ").Append(Delay1).Append("\n");
            sb.Append("  Delay2: ").Append(Delay2).Append("\n");
            sb.Append("  Graceperiod: ").Append(Graceperiod).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Grademethod: ").Append(Grademethod).Append("\n");
            sb.Append("  Groupingid: ").Append(Groupingid).Append("\n");
            sb.Append("  Groupmode: ").Append(Groupmode).Append("\n");
            sb.Append("  Hasfeedback: ").Append(Hasfeedback).Append("\n");
            sb.Append("  Hasquestions: ").Append(Hasquestions).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Intro: ").Append(Intro).Append("\n");
            sb.Append("  Introfiles: ").Append(Introfiles).Append("\n");
            sb.Append("  Introformat: ").Append(Introformat).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Navmethod: ").Append(Navmethod).Append("\n");
            sb.Append("  Overduehandling: ").Append(Overduehandling).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Preferredbehaviour: ").Append(Preferredbehaviour).Append("\n");
            sb.Append("  Questiondecimalpoints: ").Append(Questiondecimalpoints).Append("\n");
            sb.Append("  Questionsperpage: ").Append(Questionsperpage).Append("\n");
            sb.Append("  Reviewattempt: ").Append(Reviewattempt).Append("\n");
            sb.Append("  Reviewcorrectness: ").Append(Reviewcorrectness).Append("\n");
            sb.Append("  Reviewgeneralfeedback: ").Append(Reviewgeneralfeedback).Append("\n");
            sb.Append("  Reviewmarks: ").Append(Reviewmarks).Append("\n");
            sb.Append("  Reviewmaxmarks: ").Append(Reviewmaxmarks).Append("\n");
            sb.Append("  Reviewoverallfeedback: ").Append(Reviewoverallfeedback).Append("\n");
            sb.Append("  Reviewrightanswer: ").Append(Reviewrightanswer).Append("\n");
            sb.Append("  Reviewspecificfeedback: ").Append(Reviewspecificfeedback).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  Showblocks: ").Append(Showblocks).Append("\n");
            sb.Append("  Showuserpicture: ").Append(Showuserpicture).Append("\n");
            sb.Append("  Shuffleanswers: ").Append(Shuffleanswers).Append("\n");
            sb.Append("  Subnet: ").Append(Subnet).Append("\n");
            sb.Append("  Sumgrades: ").Append(Sumgrades).Append("\n");
            sb.Append("  Timeclose: ").Append(Timeclose).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timelimit: ").Append(Timelimit).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Timeopen: ").Append(Timeopen).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
