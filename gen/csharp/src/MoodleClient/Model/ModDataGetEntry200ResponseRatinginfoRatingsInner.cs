/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModDataGetEntry200ResponseRatinginfoRatingsInner
    /// </summary>
    [DataContract(Name = "mod_data_get_entry_200_response_ratinginfo_ratings_inner")]
    public partial class ModDataGetEntry200ResponseRatinginfoRatingsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModDataGetEntry200ResponseRatinginfoRatingsInner" /> class.
        /// </summary>
        /// <param name="aggregate">Aggregated ratings grade. (default to nullM).</param>
        /// <param name="aggregatelabel">The aggregation label. (default to &quot;null&quot;).</param>
        /// <param name="aggregatestr">Aggregated ratings as string. (default to &quot;null&quot;).</param>
        /// <param name="canrate">Whether the user can rate the item. (default to null).</param>
        /// <param name="canviewaggregate">Whether the user can view the aggregated grade. (default to null).</param>
        /// <param name="count">Ratings count (used when aggregating). (default to null).</param>
        /// <param name="itemid">Item id. (default to null).</param>
        /// <param name="rating">The rating the user gave. (default to null).</param>
        /// <param name="scaleid">Scale id. (default to null).</param>
        /// <param name="userid">User who rated id. (default to null).</param>
        public ModDataGetEntry200ResponseRatinginfoRatingsInner(decimal aggregate = nullM, string aggregatelabel = @"null", string aggregatestr = @"null", bool canrate = null, bool canviewaggregate = null, int count = null, int itemid = null, int rating = null, int scaleid = null, int userid = null)
        {
            this.Aggregate = aggregate;
            // use default value if no "aggregatelabel" provided
            this.Aggregatelabel = aggregatelabel ?? @"null";
            // use default value if no "aggregatestr" provided
            this.Aggregatestr = aggregatestr ?? @"null";
            this.Canrate = canrate;
            this.Canviewaggregate = canviewaggregate;
            this.Count = count;
            this.Itemid = itemid;
            this.Rating = rating;
            this.Scaleid = scaleid;
            this.Userid = userid;
        }

        /// <summary>
        /// Aggregated ratings grade.
        /// </summary>
        /// <value>Aggregated ratings grade.</value>
        [DataMember(Name = "aggregate", EmitDefaultValue = false)]
        public decimal Aggregate { get; set; }

        /// <summary>
        /// The aggregation label.
        /// </summary>
        /// <value>The aggregation label.</value>
        [DataMember(Name = "aggregatelabel", EmitDefaultValue = false)]
        public string Aggregatelabel { get; set; }

        /// <summary>
        /// Aggregated ratings as string.
        /// </summary>
        /// <value>Aggregated ratings as string.</value>
        [DataMember(Name = "aggregatestr", EmitDefaultValue = false)]
        public string Aggregatestr { get; set; }

        /// <summary>
        /// Whether the user can rate the item.
        /// </summary>
        /// <value>Whether the user can rate the item.</value>
        [DataMember(Name = "canrate", EmitDefaultValue = true)]
        public bool Canrate { get; set; }

        /// <summary>
        /// Whether the user can view the aggregated grade.
        /// </summary>
        /// <value>Whether the user can view the aggregated grade.</value>
        [DataMember(Name = "canviewaggregate", EmitDefaultValue = true)]
        public bool Canviewaggregate { get; set; }

        /// <summary>
        /// Ratings count (used when aggregating).
        /// </summary>
        /// <value>Ratings count (used when aggregating).</value>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int Count { get; set; }

        /// <summary>
        /// Item id.
        /// </summary>
        /// <value>Item id.</value>
        [DataMember(Name = "itemid", EmitDefaultValue = false)]
        public int Itemid { get; set; }

        /// <summary>
        /// The rating the user gave.
        /// </summary>
        /// <value>The rating the user gave.</value>
        [DataMember(Name = "rating", EmitDefaultValue = false)]
        public int Rating { get; set; }

        /// <summary>
        /// Scale id.
        /// </summary>
        /// <value>Scale id.</value>
        [DataMember(Name = "scaleid", EmitDefaultValue = false)]
        public int Scaleid { get; set; }

        /// <summary>
        /// User who rated id.
        /// </summary>
        /// <value>User who rated id.</value>
        [DataMember(Name = "userid", EmitDefaultValue = false)]
        public int Userid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModDataGetEntry200ResponseRatinginfoRatingsInner {\n");
            sb.Append("  Aggregate: ").Append(Aggregate).Append("\n");
            sb.Append("  Aggregatelabel: ").Append(Aggregatelabel).Append("\n");
            sb.Append("  Aggregatestr: ").Append(Aggregatestr).Append("\n");
            sb.Append("  Canrate: ").Append(Canrate).Append("\n");
            sb.Append("  Canviewaggregate: ").Append(Canviewaggregate).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Itemid: ").Append(Itemid).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Scaleid: ").Append(Scaleid).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
