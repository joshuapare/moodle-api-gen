/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModLessonGetLessonAccessInformation200Response
    /// </summary>
    [DataContract(Name = "mod_lesson_get_lesson_access_information_200_response")]
    public partial class ModLessonGetLessonAccessInformation200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetLessonAccessInformation200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModLessonGetLessonAccessInformation200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetLessonAccessInformation200Response" /> class.
        /// </summary>
        /// <param name="attemptscount">The number of attempts done by the user. (required) (default to null).</param>
        /// <param name="cangrade">Whether the user can grade the lesson or not. (required) (default to null).</param>
        /// <param name="canmanage">Whether the user can manage the lesson or not. (required) (default to null).</param>
        /// <param name="canviewreports">Whether the user can view the lesson reports or not. (required) (default to null).</param>
        /// <param name="firstpageid">The lesson first page id. (required) (default to null).</param>
        /// <param name="lastpageseen">The last page seen id. (required) (default to null).</param>
        /// <param name="leftduringtimedsession">Whether the user left during a timed session. (required) (default to null).</param>
        /// <param name="preventaccessreasons">preventaccessreasons (required).</param>
        /// <param name="reviewmode">Whether the lesson is in review mode for the current user. (required) (default to null).</param>
        /// <param name="warnings">warnings.</param>
        public ModLessonGetLessonAccessInformation200Response(int attemptscount = null, bool cangrade = null, bool canmanage = null, bool canviewreports = null, int firstpageid = null, int lastpageseen = null, bool leftduringtimedsession = null, List<ModLessonGetLessonAccessInformation200ResponsePreventaccessreasonsInner> preventaccessreasons = default(List<ModLessonGetLessonAccessInformation200ResponsePreventaccessreasonsInner>), bool reviewmode = null, List<AuthEmailSignupUser200ResponseWarningsInner> warnings = default(List<AuthEmailSignupUser200ResponseWarningsInner>))
        {
            this.Attemptscount = attemptscount;
            this.Cangrade = cangrade;
            this.Canmanage = canmanage;
            this.Canviewreports = canviewreports;
            this.Firstpageid = firstpageid;
            this.Lastpageseen = lastpageseen;
            this.Leftduringtimedsession = leftduringtimedsession;
            // to ensure "preventaccessreasons" is required (not null)
            if (preventaccessreasons == null)
            {
                throw new ArgumentNullException("preventaccessreasons is a required property for ModLessonGetLessonAccessInformation200Response and cannot be null");
            }
            this.Preventaccessreasons = preventaccessreasons;
            this.Reviewmode = reviewmode;
            this.Warnings = warnings;
        }

        /// <summary>
        /// The number of attempts done by the user.
        /// </summary>
        /// <value>The number of attempts done by the user.</value>
        [DataMember(Name = "attemptscount", IsRequired = true, EmitDefaultValue = true)]
        public int Attemptscount { get; set; }

        /// <summary>
        /// Whether the user can grade the lesson or not.
        /// </summary>
        /// <value>Whether the user can grade the lesson or not.</value>
        [DataMember(Name = "cangrade", IsRequired = true, EmitDefaultValue = true)]
        public bool Cangrade { get; set; }

        /// <summary>
        /// Whether the user can manage the lesson or not.
        /// </summary>
        /// <value>Whether the user can manage the lesson or not.</value>
        [DataMember(Name = "canmanage", IsRequired = true, EmitDefaultValue = true)]
        public bool Canmanage { get; set; }

        /// <summary>
        /// Whether the user can view the lesson reports or not.
        /// </summary>
        /// <value>Whether the user can view the lesson reports or not.</value>
        [DataMember(Name = "canviewreports", IsRequired = true, EmitDefaultValue = true)]
        public bool Canviewreports { get; set; }

        /// <summary>
        /// The lesson first page id.
        /// </summary>
        /// <value>The lesson first page id.</value>
        [DataMember(Name = "firstpageid", IsRequired = true, EmitDefaultValue = true)]
        public int Firstpageid { get; set; }

        /// <summary>
        /// The last page seen id.
        /// </summary>
        /// <value>The last page seen id.</value>
        [DataMember(Name = "lastpageseen", IsRequired = true, EmitDefaultValue = true)]
        public int Lastpageseen { get; set; }

        /// <summary>
        /// Whether the user left during a timed session.
        /// </summary>
        /// <value>Whether the user left during a timed session.</value>
        [DataMember(Name = "leftduringtimedsession", IsRequired = true, EmitDefaultValue = true)]
        public bool Leftduringtimedsession { get; set; }

        /// <summary>
        /// Gets or Sets Preventaccessreasons
        /// </summary>
        [DataMember(Name = "preventaccessreasons", IsRequired = true, EmitDefaultValue = true)]
        public List<ModLessonGetLessonAccessInformation200ResponsePreventaccessreasonsInner> Preventaccessreasons { get; set; }

        /// <summary>
        /// Whether the lesson is in review mode for the current user.
        /// </summary>
        /// <value>Whether the lesson is in review mode for the current user.</value>
        [DataMember(Name = "reviewmode", IsRequired = true, EmitDefaultValue = true)]
        public bool Reviewmode { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<AuthEmailSignupUser200ResponseWarningsInner> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModLessonGetLessonAccessInformation200Response {\n");
            sb.Append("  Attemptscount: ").Append(Attemptscount).Append("\n");
            sb.Append("  Cangrade: ").Append(Cangrade).Append("\n");
            sb.Append("  Canmanage: ").Append(Canmanage).Append("\n");
            sb.Append("  Canviewreports: ").Append(Canviewreports).Append("\n");
            sb.Append("  Firstpageid: ").Append(Firstpageid).Append("\n");
            sb.Append("  Lastpageseen: ").Append(Lastpageseen).Append("\n");
            sb.Append("  Leftduringtimedsession: ").Append(Leftduringtimedsession).Append("\n");
            sb.Append("  Preventaccessreasons: ").Append(Preventaccessreasons).Append("\n");
            sb.Append("  Reviewmode: ").Append(Reviewmode).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
