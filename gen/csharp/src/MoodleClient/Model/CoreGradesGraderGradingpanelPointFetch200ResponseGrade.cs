/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreGradesGraderGradingpanelPointFetch200ResponseGrade
    /// </summary>
    [DataContract(Name = "core_grades_grader_gradingpanel_point_fetch_200_response_grade")]
    public partial class CoreGradesGraderGradingpanelPointFetch200ResponseGrade : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreGradesGraderGradingpanelPointFetch200ResponseGrade" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreGradesGraderGradingpanelPointFetch200ResponseGrade() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreGradesGraderGradingpanelPointFetch200ResponseGrade" /> class.
        /// </summary>
        /// <param name="grade">The numeric grade (required) (default to nullM).</param>
        /// <param name="gradedby">The assumed grader of this grading instance (required) (default to &quot;null&quot;).</param>
        /// <param name="maxgrade">Max possible grade (required) (default to &quot;null&quot;).</param>
        /// <param name="timecreated">The time that the grade was created (required) (default to null).</param>
        /// <param name="timemodified">The time that the grade was last updated (required) (default to null).</param>
        /// <param name="usergrade">Current user grade (required) (default to &quot;null&quot;).</param>
        public CoreGradesGraderGradingpanelPointFetch200ResponseGrade(decimal grade = nullM, string gradedby = @"null", string maxgrade = @"null", int timecreated = null, int timemodified = null, string usergrade = @"null")
        {
            this.Grade = grade;
            // to ensure "gradedby" is required (not null)
            if (gradedby == null)
            {
                throw new ArgumentNullException("gradedby is a required property for CoreGradesGraderGradingpanelPointFetch200ResponseGrade and cannot be null");
            }
            this.Gradedby = gradedby;
            // to ensure "maxgrade" is required (not null)
            if (maxgrade == null)
            {
                throw new ArgumentNullException("maxgrade is a required property for CoreGradesGraderGradingpanelPointFetch200ResponseGrade and cannot be null");
            }
            this.Maxgrade = maxgrade;
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
            // to ensure "usergrade" is required (not null)
            if (usergrade == null)
            {
                throw new ArgumentNullException("usergrade is a required property for CoreGradesGraderGradingpanelPointFetch200ResponseGrade and cannot be null");
            }
            this.Usergrade = usergrade;
        }

        /// <summary>
        /// The numeric grade
        /// </summary>
        /// <value>The numeric grade</value>
        [DataMember(Name = "grade", IsRequired = true, EmitDefaultValue = true)]
        public decimal Grade { get; set; }

        /// <summary>
        /// The assumed grader of this grading instance
        /// </summary>
        /// <value>The assumed grader of this grading instance</value>
        [DataMember(Name = "gradedby", IsRequired = true, EmitDefaultValue = true)]
        public string Gradedby { get; set; }

        /// <summary>
        /// Max possible grade
        /// </summary>
        /// <value>Max possible grade</value>
        [DataMember(Name = "maxgrade", IsRequired = true, EmitDefaultValue = true)]
        public string Maxgrade { get; set; }

        /// <summary>
        /// The time that the grade was created
        /// </summary>
        /// <value>The time that the grade was created</value>
        [DataMember(Name = "timecreated", IsRequired = true, EmitDefaultValue = true)]
        public int Timecreated { get; set; }

        /// <summary>
        /// The time that the grade was last updated
        /// </summary>
        /// <value>The time that the grade was last updated</value>
        [DataMember(Name = "timemodified", IsRequired = true, EmitDefaultValue = true)]
        public int Timemodified { get; set; }

        /// <summary>
        /// Current user grade
        /// </summary>
        /// <value>Current user grade</value>
        [DataMember(Name = "usergrade", IsRequired = true, EmitDefaultValue = true)]
        public string Usergrade { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreGradesGraderGradingpanelPointFetch200ResponseGrade {\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Gradedby: ").Append(Gradedby).Append("\n");
            sb.Append("  Maxgrade: ").Append(Maxgrade).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Usergrade: ").Append(Usergrade).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
