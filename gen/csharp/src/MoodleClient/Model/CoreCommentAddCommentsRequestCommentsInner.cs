/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreCommentAddCommentsRequestCommentsInner
    /// </summary>
    [DataContract(Name = "core_comment_add_comments_request_comments_inner")]
    public partial class CoreCommentAddCommentsRequestCommentsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCommentAddCommentsRequestCommentsInner" /> class.
        /// </summary>
        /// <param name="area">string comment area (default to &quot;&quot;).</param>
        /// <param name="component">component.</param>
        /// <param name="content">component.</param>
        /// <param name="contextlevel">contextlevel system, course, user... (default to &quot;null&quot;).</param>
        /// <param name="instanceid">the id of item associated with the contextlevel (default to null).</param>
        /// <param name="itemid">associated id (default to null).</param>
        public CoreCommentAddCommentsRequestCommentsInner(string area = @"", string component = default(string), string content = default(string), string contextlevel = @"null", int instanceid = null, int itemid = null)
        {
            // use default value if no "area" provided
            this.Area = area ?? @"";
            this.Component = component;
            this.Content = content;
            // use default value if no "contextlevel" provided
            this.Contextlevel = contextlevel ?? @"null";
            this.Instanceid = instanceid;
            this.Itemid = itemid;
        }

        /// <summary>
        /// string comment area
        /// </summary>
        /// <value>string comment area</value>
        [DataMember(Name = "area", EmitDefaultValue = false)]
        public string Area { get; set; }

        /// <summary>
        /// component
        /// </summary>
        /// <value>component</value>
        [DataMember(Name = "component", EmitDefaultValue = false)]
        public string Component { get; set; }

        /// <summary>
        /// component
        /// </summary>
        /// <value>component</value>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// contextlevel system, course, user...
        /// </summary>
        /// <value>contextlevel system, course, user...</value>
        [DataMember(Name = "contextlevel", EmitDefaultValue = false)]
        public string Contextlevel { get; set; }

        /// <summary>
        /// the id of item associated with the contextlevel
        /// </summary>
        /// <value>the id of item associated with the contextlevel</value>
        [DataMember(Name = "instanceid", EmitDefaultValue = false)]
        public int Instanceid { get; set; }

        /// <summary>
        /// associated id
        /// </summary>
        /// <value>associated id</value>
        [DataMember(Name = "itemid", EmitDefaultValue = false)]
        public int Itemid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCommentAddCommentsRequestCommentsInner {\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Contextlevel: ").Append(Contextlevel).Append("\n");
            sb.Append("  Instanceid: ").Append(Instanceid).Append("\n");
            sb.Append("  Itemid: ").Append(Itemid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
