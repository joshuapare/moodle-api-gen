/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreCourseGetCoursesByField200ResponseCoursesInner
    /// </summary>
    [DataContract(Name = "core_course_get_courses_by_field_200_response_courses_inner")]
    public partial class CoreCourseGetCoursesByField200ResponseCoursesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCourseGetCoursesByField200ResponseCoursesInner" /> class.
        /// </summary>
        /// <param name="cacherev">Cache revision number (default to null).</param>
        /// <param name="calendartype">Calendar type (default to &quot;null&quot;).</param>
        /// <param name="categoryid">category id.</param>
        /// <param name="categoryname">category name (default to &quot;null&quot;).</param>
        /// <param name="completionnotify">1: yes 0: no.</param>
        /// <param name="contacts">contacts.</param>
        /// <param name="courseformatoptions">courseformatoptions.</param>
        /// <param name="courseimage">Course image (default to &quot;null&quot;).</param>
        /// <param name="customfields">customfields.</param>
        /// <param name="defaultgroupingid">default grouping id (default to null).</param>
        /// <param name="displayname">course display name (default to &quot;null&quot;).</param>
        /// <param name="enablecompletion">Completion enabled? 1: yes 0: no (default to null).</param>
        /// <param name="enddate">Timestamp when the course end (default to null).</param>
        /// <param name="enrollmentmethods">enrollmentmethods.</param>
        /// <param name="filters">filters.</param>
        /// <param name="format">Course format: weeks, topics, social, site,.. (default to &quot;null&quot;).</param>
        /// <param name="fullname">course full name (default to &quot;null&quot;).</param>
        /// <param name="groupmode">no group, separate, visible (default to null).</param>
        /// <param name="groupmodeforce">1: yes, 0: no (default to null).</param>
        /// <param name="id">course id.</param>
        /// <param name="idnumber">Id number (default to &quot;null&quot;).</param>
        /// <param name="lang">Forced course language (default to &quot;null&quot;).</param>
        /// <param name="legacyfiles">If legacy files are enabled (default to null).</param>
        /// <param name="marker">Current course marker (default to null).</param>
        /// <param name="maxbytes">Largest size of file that can be uploaded into (default to null).</param>
        /// <param name="newsitems">Number of recent items appearing on the course page (default to null).</param>
        /// <param name="overviewfiles">overviewfiles.</param>
        /// <param name="requested">If is a requested course (default to null).</param>
        /// <param name="shortname">course short name.</param>
        /// <param name="showactivitydates">Whether the activity dates are shown or not (default to null).</param>
        /// <param name="showcompletionconditions">Whether the activity completion conditions are shown or not (default to null).</param>
        /// <param name="showgrades">1 if grades are shown, otherwise 0 (default to null).</param>
        /// <param name="showreports">Are activity report shown (yes &#x3D; 1, no &#x3D;0) (default to null).</param>
        /// <param name="sortorder">Sort order in the category (default to null).</param>
        /// <param name="startdate">Timestamp when the course start (default to null).</param>
        /// <param name="summary">summary.</param>
        /// <param name="summaryfiles">summaryfiles.</param>
        /// <param name="summaryformat">summary format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN).</param>
        /// <param name="theme">Fame of the forced theme (default to &quot;null&quot;).</param>
        /// <param name="timecreated">Time when the course was created (default to null).</param>
        /// <param name="timemodified">Last time  the course was updated (default to null).</param>
        /// <param name="visible">1: available to student, 0:not available.</param>
        public CoreCourseGetCoursesByField200ResponseCoursesInner(int cacherev = null, string calendartype = @"null", int categoryid = default(int), string categoryname = @"null", int completionnotify = default(int), List<CoreCourseGetCoursesByField200ResponseCoursesInnerContactsInner> contacts = default(List<CoreCourseGetCoursesByField200ResponseCoursesInnerContactsInner>), List<CoreCourseGetCoursesByField200ResponseCoursesInnerCourseformatoptionsInner> courseformatoptions = default(List<CoreCourseGetCoursesByField200ResponseCoursesInnerCourseformatoptionsInner>), string courseimage = @"null", List<CoreCourseGetCoursesByField200ResponseCoursesInnerCustomfieldsInner> customfields = default(List<CoreCourseGetCoursesByField200ResponseCoursesInnerCustomfieldsInner>), int defaultgroupingid = null, string displayname = @"null", int enablecompletion = null, int enddate = null, List<Object> enrollmentmethods = default(List<Object>), List<CoreCourseGetCoursesByField200ResponseCoursesInnerFiltersInner> filters = default(List<CoreCourseGetCoursesByField200ResponseCoursesInnerFiltersInner>), string format = @"null", string fullname = @"null", int groupmode = null, int groupmodeforce = null, int id = default(int), string idnumber = @"null", string lang = @"null", int legacyfiles = null, int marker = null, int maxbytes = null, int newsitems = null, List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> overviewfiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), int requested = null, string shortname = default(string), bool showactivitydates = null, bool showcompletionconditions = null, int showgrades = null, int showreports = null, int sortorder = null, int startdate = null, string summary = default(string), List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> summaryfiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), int summaryformat = default(int), string theme = @"null", int timecreated = null, int timemodified = null, int visible = default(int))
        {
            this.Cacherev = cacherev;
            // use default value if no "calendartype" provided
            this.Calendartype = calendartype ?? @"null";
            this.Categoryid = categoryid;
            // use default value if no "categoryname" provided
            this.Categoryname = categoryname ?? @"null";
            this.Completionnotify = completionnotify;
            this.Contacts = contacts;
            this.Courseformatoptions = courseformatoptions;
            // use default value if no "courseimage" provided
            this.Courseimage = courseimage ?? @"null";
            this.Customfields = customfields;
            this.Defaultgroupingid = defaultgroupingid;
            // use default value if no "displayname" provided
            this.Displayname = displayname ?? @"null";
            this.Enablecompletion = enablecompletion;
            this.Enddate = enddate;
            this.Enrollmentmethods = enrollmentmethods;
            this.Filters = filters;
            // use default value if no "format" provided
            this.Format = format ?? @"null";
            // use default value if no "fullname" provided
            this.Fullname = fullname ?? @"null";
            this.Groupmode = groupmode;
            this.Groupmodeforce = groupmodeforce;
            this.Id = id;
            // use default value if no "idnumber" provided
            this.Idnumber = idnumber ?? @"null";
            // use default value if no "lang" provided
            this.Lang = lang ?? @"null";
            this.Legacyfiles = legacyfiles;
            this.Marker = marker;
            this.Maxbytes = maxbytes;
            this.Newsitems = newsitems;
            this.Overviewfiles = overviewfiles;
            this.Requested = requested;
            this.Shortname = shortname;
            this.Showactivitydates = showactivitydates;
            this.Showcompletionconditions = showcompletionconditions;
            this.Showgrades = showgrades;
            this.Showreports = showreports;
            this.Sortorder = sortorder;
            this.Startdate = startdate;
            this.Summary = summary;
            this.Summaryfiles = summaryfiles;
            this.Summaryformat = summaryformat;
            // use default value if no "theme" provided
            this.Theme = theme ?? @"null";
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
            this.Visible = visible;
        }

        /// <summary>
        /// Cache revision number
        /// </summary>
        /// <value>Cache revision number</value>
        [DataMember(Name = "cacherev", EmitDefaultValue = false)]
        public int Cacherev { get; set; }

        /// <summary>
        /// Calendar type
        /// </summary>
        /// <value>Calendar type</value>
        [DataMember(Name = "calendartype", EmitDefaultValue = false)]
        public string Calendartype { get; set; }

        /// <summary>
        /// category id
        /// </summary>
        /// <value>category id</value>
        [DataMember(Name = "categoryid", EmitDefaultValue = false)]
        public int Categoryid { get; set; }

        /// <summary>
        /// category name
        /// </summary>
        /// <value>category name</value>
        [DataMember(Name = "categoryname", EmitDefaultValue = false)]
        public string Categoryname { get; set; }

        /// <summary>
        /// 1: yes 0: no
        /// </summary>
        /// <value>1: yes 0: no</value>
        [DataMember(Name = "completionnotify", EmitDefaultValue = false)]
        public int Completionnotify { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name = "contacts", EmitDefaultValue = false)]
        public List<CoreCourseGetCoursesByField200ResponseCoursesInnerContactsInner> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets Courseformatoptions
        /// </summary>
        [DataMember(Name = "courseformatoptions", EmitDefaultValue = false)]
        public List<CoreCourseGetCoursesByField200ResponseCoursesInnerCourseformatoptionsInner> Courseformatoptions { get; set; }

        /// <summary>
        /// Course image
        /// </summary>
        /// <value>Course image</value>
        [DataMember(Name = "courseimage", EmitDefaultValue = false)]
        public string Courseimage { get; set; }

        /// <summary>
        /// Gets or Sets Customfields
        /// </summary>
        [DataMember(Name = "customfields", EmitDefaultValue = false)]
        public List<CoreCourseGetCoursesByField200ResponseCoursesInnerCustomfieldsInner> Customfields { get; set; }

        /// <summary>
        /// default grouping id
        /// </summary>
        /// <value>default grouping id</value>
        [DataMember(Name = "defaultgroupingid", EmitDefaultValue = false)]
        public int Defaultgroupingid { get; set; }

        /// <summary>
        /// course display name
        /// </summary>
        /// <value>course display name</value>
        [DataMember(Name = "displayname", EmitDefaultValue = false)]
        public string Displayname { get; set; }

        /// <summary>
        /// Completion enabled? 1: yes 0: no
        /// </summary>
        /// <value>Completion enabled? 1: yes 0: no</value>
        [DataMember(Name = "enablecompletion", EmitDefaultValue = false)]
        public int Enablecompletion { get; set; }

        /// <summary>
        /// Timestamp when the course end
        /// </summary>
        /// <value>Timestamp when the course end</value>
        [DataMember(Name = "enddate", EmitDefaultValue = false)]
        public int Enddate { get; set; }

        /// <summary>
        /// Gets or Sets Enrollmentmethods
        /// </summary>
        [DataMember(Name = "enrollmentmethods", EmitDefaultValue = false)]
        public List<Object> Enrollmentmethods { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name = "filters", EmitDefaultValue = false)]
        public List<CoreCourseGetCoursesByField200ResponseCoursesInnerFiltersInner> Filters { get; set; }

        /// <summary>
        /// Course format: weeks, topics, social, site,..
        /// </summary>
        /// <value>Course format: weeks, topics, social, site,..</value>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public string Format { get; set; }

        /// <summary>
        /// course full name
        /// </summary>
        /// <value>course full name</value>
        [DataMember(Name = "fullname", EmitDefaultValue = false)]
        public string Fullname { get; set; }

        /// <summary>
        /// no group, separate, visible
        /// </summary>
        /// <value>no group, separate, visible</value>
        [DataMember(Name = "groupmode", EmitDefaultValue = false)]
        public int Groupmode { get; set; }

        /// <summary>
        /// 1: yes, 0: no
        /// </summary>
        /// <value>1: yes, 0: no</value>
        [DataMember(Name = "groupmodeforce", EmitDefaultValue = false)]
        public int Groupmodeforce { get; set; }

        /// <summary>
        /// course id
        /// </summary>
        /// <value>course id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Id number
        /// </summary>
        /// <value>Id number</value>
        [DataMember(Name = "idnumber", EmitDefaultValue = false)]
        public string Idnumber { get; set; }

        /// <summary>
        /// Forced course language
        /// </summary>
        /// <value>Forced course language</value>
        [DataMember(Name = "lang", EmitDefaultValue = false)]
        public string Lang { get; set; }

        /// <summary>
        /// If legacy files are enabled
        /// </summary>
        /// <value>If legacy files are enabled</value>
        [DataMember(Name = "legacyfiles", EmitDefaultValue = false)]
        public int Legacyfiles { get; set; }

        /// <summary>
        /// Current course marker
        /// </summary>
        /// <value>Current course marker</value>
        [DataMember(Name = "marker", EmitDefaultValue = false)]
        public int Marker { get; set; }

        /// <summary>
        /// Largest size of file that can be uploaded into
        /// </summary>
        /// <value>Largest size of file that can be uploaded into</value>
        [DataMember(Name = "maxbytes", EmitDefaultValue = false)]
        public int Maxbytes { get; set; }

        /// <summary>
        /// Number of recent items appearing on the course page
        /// </summary>
        /// <value>Number of recent items appearing on the course page</value>
        [DataMember(Name = "newsitems", EmitDefaultValue = false)]
        public int Newsitems { get; set; }

        /// <summary>
        /// Gets or Sets Overviewfiles
        /// </summary>
        [DataMember(Name = "overviewfiles", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Overviewfiles { get; set; }

        /// <summary>
        /// If is a requested course
        /// </summary>
        /// <value>If is a requested course</value>
        [DataMember(Name = "requested", EmitDefaultValue = false)]
        public int Requested { get; set; }

        /// <summary>
        /// course short name
        /// </summary>
        /// <value>course short name</value>
        [DataMember(Name = "shortname", EmitDefaultValue = false)]
        public string Shortname { get; set; }

        /// <summary>
        /// Whether the activity dates are shown or not
        /// </summary>
        /// <value>Whether the activity dates are shown or not</value>
        [DataMember(Name = "showactivitydates", EmitDefaultValue = true)]
        public bool Showactivitydates { get; set; }

        /// <summary>
        /// Whether the activity completion conditions are shown or not
        /// </summary>
        /// <value>Whether the activity completion conditions are shown or not</value>
        [DataMember(Name = "showcompletionconditions", EmitDefaultValue = true)]
        public bool Showcompletionconditions { get; set; }

        /// <summary>
        /// 1 if grades are shown, otherwise 0
        /// </summary>
        /// <value>1 if grades are shown, otherwise 0</value>
        [DataMember(Name = "showgrades", EmitDefaultValue = false)]
        public int Showgrades { get; set; }

        /// <summary>
        /// Are activity report shown (yes &#x3D; 1, no &#x3D;0)
        /// </summary>
        /// <value>Are activity report shown (yes &#x3D; 1, no &#x3D;0)</value>
        [DataMember(Name = "showreports", EmitDefaultValue = false)]
        public int Showreports { get; set; }

        /// <summary>
        /// Sort order in the category
        /// </summary>
        /// <value>Sort order in the category</value>
        [DataMember(Name = "sortorder", EmitDefaultValue = false)]
        public int Sortorder { get; set; }

        /// <summary>
        /// Timestamp when the course start
        /// </summary>
        /// <value>Timestamp when the course start</value>
        [DataMember(Name = "startdate", EmitDefaultValue = false)]
        public int Startdate { get; set; }

        /// <summary>
        /// summary
        /// </summary>
        /// <value>summary</value>
        [DataMember(Name = "summary", EmitDefaultValue = false)]
        public string Summary { get; set; }

        /// <summary>
        /// Gets or Sets Summaryfiles
        /// </summary>
        [DataMember(Name = "summaryfiles", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Summaryfiles { get; set; }

        /// <summary>
        /// summary format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>summary format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "summaryformat", EmitDefaultValue = false)]
        public int Summaryformat { get; set; }

        /// <summary>
        /// Fame of the forced theme
        /// </summary>
        /// <value>Fame of the forced theme</value>
        [DataMember(Name = "theme", EmitDefaultValue = false)]
        public string Theme { get; set; }

        /// <summary>
        /// Time when the course was created
        /// </summary>
        /// <value>Time when the course was created</value>
        [DataMember(Name = "timecreated", EmitDefaultValue = false)]
        public int Timecreated { get; set; }

        /// <summary>
        /// Last time  the course was updated
        /// </summary>
        /// <value>Last time  the course was updated</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// 1: available to student, 0:not available
        /// </summary>
        /// <value>1: available to student, 0:not available</value>
        [DataMember(Name = "visible", EmitDefaultValue = false)]
        public int Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCourseGetCoursesByField200ResponseCoursesInner {\n");
            sb.Append("  Cacherev: ").Append(Cacherev).Append("\n");
            sb.Append("  Calendartype: ").Append(Calendartype).Append("\n");
            sb.Append("  Categoryid: ").Append(Categoryid).Append("\n");
            sb.Append("  Categoryname: ").Append(Categoryname).Append("\n");
            sb.Append("  Completionnotify: ").Append(Completionnotify).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Courseformatoptions: ").Append(Courseformatoptions).Append("\n");
            sb.Append("  Courseimage: ").Append(Courseimage).Append("\n");
            sb.Append("  Customfields: ").Append(Customfields).Append("\n");
            sb.Append("  Defaultgroupingid: ").Append(Defaultgroupingid).Append("\n");
            sb.Append("  Displayname: ").Append(Displayname).Append("\n");
            sb.Append("  Enablecompletion: ").Append(Enablecompletion).Append("\n");
            sb.Append("  Enddate: ").Append(Enddate).Append("\n");
            sb.Append("  Enrollmentmethods: ").Append(Enrollmentmethods).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Fullname: ").Append(Fullname).Append("\n");
            sb.Append("  Groupmode: ").Append(Groupmode).Append("\n");
            sb.Append("  Groupmodeforce: ").Append(Groupmodeforce).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Idnumber: ").Append(Idnumber).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Legacyfiles: ").Append(Legacyfiles).Append("\n");
            sb.Append("  Marker: ").Append(Marker).Append("\n");
            sb.Append("  Maxbytes: ").Append(Maxbytes).Append("\n");
            sb.Append("  Newsitems: ").Append(Newsitems).Append("\n");
            sb.Append("  Overviewfiles: ").Append(Overviewfiles).Append("\n");
            sb.Append("  Requested: ").Append(Requested).Append("\n");
            sb.Append("  Shortname: ").Append(Shortname).Append("\n");
            sb.Append("  Showactivitydates: ").Append(Showactivitydates).Append("\n");
            sb.Append("  Showcompletionconditions: ").Append(Showcompletionconditions).Append("\n");
            sb.Append("  Showgrades: ").Append(Showgrades).Append("\n");
            sb.Append("  Showreports: ").Append(Showreports).Append("\n");
            sb.Append("  Sortorder: ").Append(Sortorder).Append("\n");
            sb.Append("  Startdate: ").Append(Startdate).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Summaryfiles: ").Append(Summaryfiles).Append("\n");
            sb.Append("  Summaryformat: ").Append(Summaryformat).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
