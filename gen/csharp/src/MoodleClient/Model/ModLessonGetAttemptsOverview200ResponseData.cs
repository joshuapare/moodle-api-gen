/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModLessonGetAttemptsOverview200ResponseData
    /// </summary>
    [DataContract(Name = "mod_lesson_get_attempts_overview_200_response_data")]
    public partial class ModLessonGetAttemptsOverview200ResponseData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetAttemptsOverview200ResponseData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModLessonGetAttemptsOverview200ResponseData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetAttemptsOverview200ResponseData" /> class.
        /// </summary>
        /// <param name="avescore">Average score. (required) (default to nullM).</param>
        /// <param name="avetime">Average time (spent in taking the lesson). (required) (default to null).</param>
        /// <param name="highscore">High score. (required) (default to nullM).</param>
        /// <param name="hightime">High time. (required) (default to null).</param>
        /// <param name="lessonscored">True if the lesson was scored. (required) (default to null).</param>
        /// <param name="lowscore">Low score. (required) (default to nullM).</param>
        /// <param name="lowtime">Low time. (required) (default to null).</param>
        /// <param name="numofattempts">Number of attempts. (required) (default to null).</param>
        /// <param name="students">students.</param>
        public ModLessonGetAttemptsOverview200ResponseData(decimal avescore = nullM, int avetime = null, decimal highscore = nullM, int hightime = null, bool lessonscored = null, decimal lowscore = nullM, int lowtime = null, int numofattempts = null, List<ModLessonGetAttemptsOverview200ResponseDataStudentsInner> students = default(List<ModLessonGetAttemptsOverview200ResponseDataStudentsInner>))
        {
            this.Avescore = avescore;
            this.Avetime = avetime;
            this.Highscore = highscore;
            this.Hightime = hightime;
            this.Lessonscored = lessonscored;
            this.Lowscore = lowscore;
            this.Lowtime = lowtime;
            this.Numofattempts = numofattempts;
            this.Students = students;
        }

        /// <summary>
        /// Average score.
        /// </summary>
        /// <value>Average score.</value>
        [DataMember(Name = "avescore", IsRequired = true, EmitDefaultValue = true)]
        public decimal Avescore { get; set; }

        /// <summary>
        /// Average time (spent in taking the lesson).
        /// </summary>
        /// <value>Average time (spent in taking the lesson).</value>
        [DataMember(Name = "avetime", IsRequired = true, EmitDefaultValue = true)]
        public int Avetime { get; set; }

        /// <summary>
        /// High score.
        /// </summary>
        /// <value>High score.</value>
        [DataMember(Name = "highscore", IsRequired = true, EmitDefaultValue = true)]
        public decimal Highscore { get; set; }

        /// <summary>
        /// High time.
        /// </summary>
        /// <value>High time.</value>
        [DataMember(Name = "hightime", IsRequired = true, EmitDefaultValue = true)]
        public int Hightime { get; set; }

        /// <summary>
        /// True if the lesson was scored.
        /// </summary>
        /// <value>True if the lesson was scored.</value>
        [DataMember(Name = "lessonscored", IsRequired = true, EmitDefaultValue = true)]
        public bool Lessonscored { get; set; }

        /// <summary>
        /// Low score.
        /// </summary>
        /// <value>Low score.</value>
        [DataMember(Name = "lowscore", IsRequired = true, EmitDefaultValue = true)]
        public decimal Lowscore { get; set; }

        /// <summary>
        /// Low time.
        /// </summary>
        /// <value>Low time.</value>
        [DataMember(Name = "lowtime", IsRequired = true, EmitDefaultValue = true)]
        public int Lowtime { get; set; }

        /// <summary>
        /// Number of attempts.
        /// </summary>
        /// <value>Number of attempts.</value>
        [DataMember(Name = "numofattempts", IsRequired = true, EmitDefaultValue = true)]
        public int Numofattempts { get; set; }

        /// <summary>
        /// Gets or Sets Students
        /// </summary>
        [DataMember(Name = "students", EmitDefaultValue = false)]
        public List<ModLessonGetAttemptsOverview200ResponseDataStudentsInner> Students { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModLessonGetAttemptsOverview200ResponseData {\n");
            sb.Append("  Avescore: ").Append(Avescore).Append("\n");
            sb.Append("  Avetime: ").Append(Avetime).Append("\n");
            sb.Append("  Highscore: ").Append(Highscore).Append("\n");
            sb.Append("  Hightime: ").Append(Hightime).Append("\n");
            sb.Append("  Lessonscored: ").Append(Lessonscored).Append("\n");
            sb.Append("  Lowscore: ").Append(Lowscore).Append("\n");
            sb.Append("  Lowtime: ").Append(Lowtime).Append("\n");
            sb.Append("  Numofattempts: ").Append(Numofattempts).Append("\n");
            sb.Append("  Students: ").Append(Students).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
