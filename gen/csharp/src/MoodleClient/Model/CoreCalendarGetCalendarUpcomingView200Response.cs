/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreCalendarGetCalendarUpcomingView200Response
    /// </summary>
    [DataContract(Name = "core_calendar_get_calendar_upcoming_view_200_response")]
    public partial class CoreCalendarGetCalendarUpcomingView200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCalendarGetCalendarUpcomingView200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreCalendarGetCalendarUpcomingView200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCalendarGetCalendarUpcomingView200Response" /> class.
        /// </summary>
        /// <param name="categoryid">categoryid (default to 0).</param>
        /// <param name="courseid">courseid (required).</param>
        /// <param name="date">date (required).</param>
        /// <param name="defaulteventcontext">defaulteventcontext (required) (default to 0).</param>
        /// <param name="events">events (required).</param>
        /// <param name="filterSelector">filter_selector (required).</param>
        /// <param name="isloggedin">isloggedin (required) (default to null).</param>
        public CoreCalendarGetCalendarUpcomingView200Response(int categoryid = 0, int courseid = default(int), CoreCalendarGetCalendarDayView200ResponseNextperiod date = default(CoreCalendarGetCalendarDayView200ResponseNextperiod), int defaulteventcontext = 0, List<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner> events = default(List<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner>), string filterSelector = default(string), bool isloggedin = null)
        {
            this.Courseid = courseid;
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new ArgumentNullException("date is a required property for CoreCalendarGetCalendarUpcomingView200Response and cannot be null");
            }
            this.Date = date;
            this.Defaulteventcontext = defaulteventcontext;
            // to ensure "events" is required (not null)
            if (events == null)
            {
                throw new ArgumentNullException("events is a required property for CoreCalendarGetCalendarUpcomingView200Response and cannot be null");
            }
            this.Events = events;
            // to ensure "filterSelector" is required (not null)
            if (filterSelector == null)
            {
                throw new ArgumentNullException("filterSelector is a required property for CoreCalendarGetCalendarUpcomingView200Response and cannot be null");
            }
            this.FilterSelector = filterSelector;
            this.Isloggedin = isloggedin;
            this.Categoryid = categoryid;
        }

        /// <summary>
        /// categoryid
        /// </summary>
        /// <value>categoryid</value>
        [DataMember(Name = "categoryid", EmitDefaultValue = false)]
        public int Categoryid { get; set; }

        /// <summary>
        /// courseid
        /// </summary>
        /// <value>courseid</value>
        [DataMember(Name = "courseid", IsRequired = true, EmitDefaultValue = true)]
        public int Courseid { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public CoreCalendarGetCalendarDayView200ResponseNextperiod Date { get; set; }

        /// <summary>
        /// defaulteventcontext
        /// </summary>
        /// <value>defaulteventcontext</value>
        [DataMember(Name = "defaulteventcontext", IsRequired = true, EmitDefaultValue = true)]
        public int Defaulteventcontext { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name = "events", IsRequired = true, EmitDefaultValue = true)]
        public List<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner> Events { get; set; }

        /// <summary>
        /// filter_selector
        /// </summary>
        /// <value>filter_selector</value>
        [DataMember(Name = "filter_selector", IsRequired = true, EmitDefaultValue = true)]
        public string FilterSelector { get; set; }

        /// <summary>
        /// isloggedin
        /// </summary>
        /// <value>isloggedin</value>
        [DataMember(Name = "isloggedin", IsRequired = true, EmitDefaultValue = true)]
        public bool Isloggedin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCalendarGetCalendarUpcomingView200Response {\n");
            sb.Append("  Categoryid: ").Append(Categoryid).Append("\n");
            sb.Append("  Courseid: ").Append(Courseid).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Defaulteventcontext: ").Append(Defaulteventcontext).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  FilterSelector: ").Append(FilterSelector).Append("\n");
            sb.Append("  Isloggedin: ").Append(Isloggedin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
