/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreCourseDeleteCategoriesRequestCategoriesInner
    /// </summary>
    [DataContract(Name = "core_course_delete_categories_request_categories_inner")]
    public partial class CoreCourseDeleteCategoriesRequestCategoriesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCourseDeleteCategoriesRequestCategoriesInner" /> class.
        /// </summary>
        /// <param name="id">category id to delete (default to null).</param>
        /// <param name="newparent">the parent category to move the contents to, if specified (default to null).</param>
        /// <param name="recursive">1: recursively delete all contents inside this                                 category, 0 (default): move contents to newparent or current parent category (except if parent is root) (default to 0).</param>
        public CoreCourseDeleteCategoriesRequestCategoriesInner(int id = null, int newparent = null, bool recursive = 0)
        {
            this.Id = id;
            this.Newparent = newparent;
            this.Recursive = recursive;
        }

        /// <summary>
        /// category id to delete
        /// </summary>
        /// <value>category id to delete</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// the parent category to move the contents to, if specified
        /// </summary>
        /// <value>the parent category to move the contents to, if specified</value>
        [DataMember(Name = "newparent", EmitDefaultValue = false)]
        public int Newparent { get; set; }

        /// <summary>
        /// 1: recursively delete all contents inside this                                 category, 0 (default): move contents to newparent or current parent category (except if parent is root)
        /// </summary>
        /// <value>1: recursively delete all contents inside this                                 category, 0 (default): move contents to newparent or current parent category (except if parent is root)</value>
        [DataMember(Name = "recursive", EmitDefaultValue = true)]
        public bool Recursive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCourseDeleteCategoriesRequestCategoriesInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Newparent: ").Append(Newparent).Append("\n");
            sb.Append("  Recursive: ").Append(Recursive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
