/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModGlossaryGetEntriesByLetterRequest
    /// </summary>
    [DataContract(Name = "mod_glossary_get_entries_by_letter_request")]
    public partial class ModGlossaryGetEntriesByLetterRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModGlossaryGetEntriesByLetterRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModGlossaryGetEntriesByLetterRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModGlossaryGetEntriesByLetterRequest" /> class.
        /// </summary>
        /// <param name="from">Start returning records from here (default to 0).</param>
        /// <param name="id">Glossary entry ID (required).</param>
        /// <param name="letter">A letter, or either keywords: &#39;ALL&#39; or &#39;SPECIAL&#39;. (required) (default to &quot;null&quot;).</param>
        /// <param name="limit">Number of records to return (default to 20).</param>
        /// <param name="options">options.</param>
        public ModGlossaryGetEntriesByLetterRequest(int from = 0, int id = default(int), string letter = @"null", int limit = 20, ModGlossaryGetEntriesByAuthorRequestOptions options = default(ModGlossaryGetEntriesByAuthorRequestOptions))
        {
            this.Id = id;
            // to ensure "letter" is required (not null)
            if (letter == null)
            {
                throw new ArgumentNullException("letter is a required property for ModGlossaryGetEntriesByLetterRequest and cannot be null");
            }
            this.Letter = letter;
            this.From = from;
            this.Limit = limit;
            this.Options = options;
        }

        /// <summary>
        /// Start returning records from here
        /// </summary>
        /// <value>Start returning records from here</value>
        [DataMember(Name = "from", EmitDefaultValue = false)]
        public int From { get; set; }

        /// <summary>
        /// Glossary entry ID
        /// </summary>
        /// <value>Glossary entry ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// A letter, or either keywords: &#39;ALL&#39; or &#39;SPECIAL&#39;.
        /// </summary>
        /// <value>A letter, or either keywords: &#39;ALL&#39; or &#39;SPECIAL&#39;.</value>
        [DataMember(Name = "letter", IsRequired = true, EmitDefaultValue = true)]
        public string Letter { get; set; }

        /// <summary>
        /// Number of records to return
        /// </summary>
        /// <value>Number of records to return</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public ModGlossaryGetEntriesByAuthorRequestOptions Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModGlossaryGetEntriesByLetterRequest {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Letter: ").Append(Letter).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
