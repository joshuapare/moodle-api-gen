/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ToolMobileGetPublicConfig200Response
    /// </summary>
    [DataContract(Name = "tool_mobile_get_public_config_200_response")]
    public partial class ToolMobileGetPublicConfig200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolMobileGetPublicConfig200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolMobileGetPublicConfig200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolMobileGetPublicConfig200Response" /> class.
        /// </summary>
        /// <param name="agedigitalconsentverification">Whether age digital consent verification                     is enabled. (default to null).</param>
        /// <param name="authinstructions">Authentication instructions. (required) (default to &quot;null&quot;).</param>
        /// <param name="authloginviaemail">Whether log in via email is enabled. (required) (default to null).</param>
        /// <param name="authnoneenabled">Whether auth none is enabled. (required) (default to null).</param>
        /// <param name="autolang">Whether to detect default language                     from browser setting. (default to null).</param>
        /// <param name="compactlogourl">The site compact logo URL (default to &quot;null&quot;).</param>
        /// <param name="country">Default site country (default to &quot;null&quot;).</param>
        /// <param name="enablemobilewebservice">Whether the Mobile service is enabled. (required) (default to null).</param>
        /// <param name="enablewebservices">Whether Web Services are enabled. (required) (default to null).</param>
        /// <param name="forgottenpasswordurl">Forgotten password URL. (required) (default to &quot;null&quot;).</param>
        /// <param name="guestlogin">Whether guest login is enabled. (required) (default to null).</param>
        /// <param name="httpswwwroot">Site https URL (if httpslogin is enabled). (required) (default to &quot;null&quot;).</param>
        /// <param name="identityproviders">identityproviders.</param>
        /// <param name="lang">Default language for the site. (default to &quot;null&quot;).</param>
        /// <param name="langlist">Languages on language menu. (default to &quot;null&quot;).</param>
        /// <param name="langmenu">Whether the language menu should be displayed. (default to null).</param>
        /// <param name="launchurl">SSO login launch URL. (default to &quot;null&quot;).</param>
        /// <param name="locale">Sitewide locale. (default to &quot;null&quot;).</param>
        /// <param name="logourl">The site logo URL (default to &quot;null&quot;).</param>
        /// <param name="maintenanceenabled">Whether site maintenance is enabled. (required) (default to null).</param>
        /// <param name="maintenancemessage">Maintenance message. (required) (default to &quot;null&quot;).</param>
        /// <param name="mobilecssurl">Mobile custom CSS theme.</param>
        /// <param name="registerauth">Authentication method for user registration. (required) (default to &quot;null&quot;).</param>
        /// <param name="rememberusername">Values: 0 for No, 1 for Yes, 2 for optional. (required) (default to null).</param>
        /// <param name="sitename">Site name. (required) (default to &quot;null&quot;).</param>
        /// <param name="supportavailability">Determines who has access to contact site support. (default to null).</param>
        /// <param name="supportemail">Site support contact email                     (only if age verification is enabled). (default to &quot;null&quot;).</param>
        /// <param name="supportname">Site support contact name                     (only if age verification is enabled). (default to &quot;null&quot;).</param>
        /// <param name="supportpage">Site support page link. (default to &quot;null&quot;).</param>
        /// <param name="toolMobileAndroidappid">Android app&#39;s unique identifier. (default to &quot;null&quot;).</param>
        /// <param name="toolMobileDisabledfeatures">Disabled features in the app (default to &quot;null&quot;).</param>
        /// <param name="toolMobileIosappid">iOS app&#39;s unique identifier. (default to &quot;null&quot;).</param>
        /// <param name="toolMobileMinimumversion">Minimum required version to access. (default to &quot;null&quot;).</param>
        /// <param name="toolMobileQrcodetype">QR login configuration. (default to null).</param>
        /// <param name="toolMobileSetuplink">App download page. (default to &quot;null&quot;).</param>
        /// <param name="typeoflogin">The type of login. 1 for app, 2 for browser, 3 for embedded. (required) (default to null).</param>
        /// <param name="warnings">warnings.</param>
        /// <param name="wwwroot">Site URL. (required) (default to &quot;null&quot;).</param>
        public ToolMobileGetPublicConfig200Response(bool agedigitalconsentverification = null, string authinstructions = @"null", int authloginviaemail = null, int authnoneenabled = null, int autolang = null, string compactlogourl = @"null", string country = @"null", int enablemobilewebservice = null, int enablewebservices = null, string forgottenpasswordurl = @"null", int guestlogin = null, string httpswwwroot = @"null", List<ToolMobileGetPublicConfig200ResponseIdentityprovidersInner> identityproviders = default(List<ToolMobileGetPublicConfig200ResponseIdentityprovidersInner>), string lang = @"null", string langlist = @"null", int langmenu = null, string launchurl = @"null", string locale = @"null", string logourl = @"null", int maintenanceenabled = null, string maintenancemessage = @"null", string mobilecssurl = default(string), string registerauth = @"null", int rememberusername = null, string sitename = @"null", int supportavailability = null, string supportemail = @"null", string supportname = @"null", string supportpage = @"null", string toolMobileAndroidappid = @"null", string toolMobileDisabledfeatures = @"null", string toolMobileIosappid = @"null", string toolMobileMinimumversion = @"null", int toolMobileQrcodetype = null, string toolMobileSetuplink = @"null", int typeoflogin = null, List<AuthEmailSignupUser200ResponseWarningsInner> warnings = default(List<AuthEmailSignupUser200ResponseWarningsInner>), string wwwroot = @"null")
        {
            // to ensure "authinstructions" is required (not null)
            if (authinstructions == null)
            {
                throw new ArgumentNullException("authinstructions is a required property for ToolMobileGetPublicConfig200Response and cannot be null");
            }
            this.Authinstructions = authinstructions;
            this.Authloginviaemail = authloginviaemail;
            this.Authnoneenabled = authnoneenabled;
            this.Enablemobilewebservice = enablemobilewebservice;
            this.Enablewebservices = enablewebservices;
            // to ensure "forgottenpasswordurl" is required (not null)
            if (forgottenpasswordurl == null)
            {
                throw new ArgumentNullException("forgottenpasswordurl is a required property for ToolMobileGetPublicConfig200Response and cannot be null");
            }
            this.Forgottenpasswordurl = forgottenpasswordurl;
            this.Guestlogin = guestlogin;
            // to ensure "httpswwwroot" is required (not null)
            if (httpswwwroot == null)
            {
                throw new ArgumentNullException("httpswwwroot is a required property for ToolMobileGetPublicConfig200Response and cannot be null");
            }
            this.Httpswwwroot = httpswwwroot;
            this.Maintenanceenabled = maintenanceenabled;
            // to ensure "maintenancemessage" is required (not null)
            if (maintenancemessage == null)
            {
                throw new ArgumentNullException("maintenancemessage is a required property for ToolMobileGetPublicConfig200Response and cannot be null");
            }
            this.Maintenancemessage = maintenancemessage;
            // to ensure "registerauth" is required (not null)
            if (registerauth == null)
            {
                throw new ArgumentNullException("registerauth is a required property for ToolMobileGetPublicConfig200Response and cannot be null");
            }
            this.Registerauth = registerauth;
            this.Rememberusername = rememberusername;
            // to ensure "sitename" is required (not null)
            if (sitename == null)
            {
                throw new ArgumentNullException("sitename is a required property for ToolMobileGetPublicConfig200Response and cannot be null");
            }
            this.Sitename = sitename;
            this.Typeoflogin = typeoflogin;
            // to ensure "wwwroot" is required (not null)
            if (wwwroot == null)
            {
                throw new ArgumentNullException("wwwroot is a required property for ToolMobileGetPublicConfig200Response and cannot be null");
            }
            this.Wwwroot = wwwroot;
            this.Agedigitalconsentverification = agedigitalconsentverification;
            this.Autolang = autolang;
            // use default value if no "compactlogourl" provided
            this.Compactlogourl = compactlogourl ?? @"null";
            // use default value if no "country" provided
            this.Country = country ?? @"null";
            this.Identityproviders = identityproviders;
            // use default value if no "lang" provided
            this.Lang = lang ?? @"null";
            // use default value if no "langlist" provided
            this.Langlist = langlist ?? @"null";
            this.Langmenu = langmenu;
            // use default value if no "launchurl" provided
            this.Launchurl = launchurl ?? @"null";
            // use default value if no "locale" provided
            this.Locale = locale ?? @"null";
            // use default value if no "logourl" provided
            this.Logourl = logourl ?? @"null";
            this.Mobilecssurl = mobilecssurl;
            this.Supportavailability = supportavailability;
            // use default value if no "supportemail" provided
            this.Supportemail = supportemail ?? @"null";
            // use default value if no "supportname" provided
            this.Supportname = supportname ?? @"null";
            // use default value if no "supportpage" provided
            this.Supportpage = supportpage ?? @"null";
            // use default value if no "toolMobileAndroidappid" provided
            this.ToolMobileAndroidappid = toolMobileAndroidappid ?? @"null";
            // use default value if no "toolMobileDisabledfeatures" provided
            this.ToolMobileDisabledfeatures = toolMobileDisabledfeatures ?? @"null";
            // use default value if no "toolMobileIosappid" provided
            this.ToolMobileIosappid = toolMobileIosappid ?? @"null";
            // use default value if no "toolMobileMinimumversion" provided
            this.ToolMobileMinimumversion = toolMobileMinimumversion ?? @"null";
            this.ToolMobileQrcodetype = toolMobileQrcodetype;
            // use default value if no "toolMobileSetuplink" provided
            this.ToolMobileSetuplink = toolMobileSetuplink ?? @"null";
            this.Warnings = warnings;
        }

        /// <summary>
        /// Whether age digital consent verification                     is enabled.
        /// </summary>
        /// <value>Whether age digital consent verification                     is enabled.</value>
        [DataMember(Name = "agedigitalconsentverification", EmitDefaultValue = true)]
        public bool Agedigitalconsentverification { get; set; }

        /// <summary>
        /// Authentication instructions.
        /// </summary>
        /// <value>Authentication instructions.</value>
        [DataMember(Name = "authinstructions", IsRequired = true, EmitDefaultValue = true)]
        public string Authinstructions { get; set; }

        /// <summary>
        /// Whether log in via email is enabled.
        /// </summary>
        /// <value>Whether log in via email is enabled.</value>
        [DataMember(Name = "authloginviaemail", IsRequired = true, EmitDefaultValue = true)]
        public int Authloginviaemail { get; set; }

        /// <summary>
        /// Whether auth none is enabled.
        /// </summary>
        /// <value>Whether auth none is enabled.</value>
        [DataMember(Name = "authnoneenabled", IsRequired = true, EmitDefaultValue = true)]
        public int Authnoneenabled { get; set; }

        /// <summary>
        /// Whether to detect default language                     from browser setting.
        /// </summary>
        /// <value>Whether to detect default language                     from browser setting.</value>
        [DataMember(Name = "autolang", EmitDefaultValue = false)]
        public int Autolang { get; set; }

        /// <summary>
        /// The site compact logo URL
        /// </summary>
        /// <value>The site compact logo URL</value>
        [DataMember(Name = "compactlogourl", EmitDefaultValue = false)]
        public string Compactlogourl { get; set; }

        /// <summary>
        /// Default site country
        /// </summary>
        /// <value>Default site country</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Whether the Mobile service is enabled.
        /// </summary>
        /// <value>Whether the Mobile service is enabled.</value>
        [DataMember(Name = "enablemobilewebservice", IsRequired = true, EmitDefaultValue = true)]
        public int Enablemobilewebservice { get; set; }

        /// <summary>
        /// Whether Web Services are enabled.
        /// </summary>
        /// <value>Whether Web Services are enabled.</value>
        [DataMember(Name = "enablewebservices", IsRequired = true, EmitDefaultValue = true)]
        public int Enablewebservices { get; set; }

        /// <summary>
        /// Forgotten password URL.
        /// </summary>
        /// <value>Forgotten password URL.</value>
        [DataMember(Name = "forgottenpasswordurl", IsRequired = true, EmitDefaultValue = true)]
        public string Forgottenpasswordurl { get; set; }

        /// <summary>
        /// Whether guest login is enabled.
        /// </summary>
        /// <value>Whether guest login is enabled.</value>
        [DataMember(Name = "guestlogin", IsRequired = true, EmitDefaultValue = true)]
        public int Guestlogin { get; set; }

        /// <summary>
        /// Site https URL (if httpslogin is enabled).
        /// </summary>
        /// <value>Site https URL (if httpslogin is enabled).</value>
        [DataMember(Name = "httpswwwroot", IsRequired = true, EmitDefaultValue = true)]
        public string Httpswwwroot { get; set; }

        /// <summary>
        /// Gets or Sets Identityproviders
        /// </summary>
        [DataMember(Name = "identityproviders", EmitDefaultValue = false)]
        public List<ToolMobileGetPublicConfig200ResponseIdentityprovidersInner> Identityproviders { get; set; }

        /// <summary>
        /// Default language for the site.
        /// </summary>
        /// <value>Default language for the site.</value>
        [DataMember(Name = "lang", EmitDefaultValue = false)]
        public string Lang { get; set; }

        /// <summary>
        /// Languages on language menu.
        /// </summary>
        /// <value>Languages on language menu.</value>
        [DataMember(Name = "langlist", EmitDefaultValue = false)]
        public string Langlist { get; set; }

        /// <summary>
        /// Whether the language menu should be displayed.
        /// </summary>
        /// <value>Whether the language menu should be displayed.</value>
        [DataMember(Name = "langmenu", EmitDefaultValue = false)]
        public int Langmenu { get; set; }

        /// <summary>
        /// SSO login launch URL.
        /// </summary>
        /// <value>SSO login launch URL.</value>
        [DataMember(Name = "launchurl", EmitDefaultValue = false)]
        public string Launchurl { get; set; }

        /// <summary>
        /// Sitewide locale.
        /// </summary>
        /// <value>Sitewide locale.</value>
        [DataMember(Name = "locale", EmitDefaultValue = false)]
        public string Locale { get; set; }

        /// <summary>
        /// The site logo URL
        /// </summary>
        /// <value>The site logo URL</value>
        [DataMember(Name = "logourl", EmitDefaultValue = false)]
        public string Logourl { get; set; }

        /// <summary>
        /// Whether site maintenance is enabled.
        /// </summary>
        /// <value>Whether site maintenance is enabled.</value>
        [DataMember(Name = "maintenanceenabled", IsRequired = true, EmitDefaultValue = true)]
        public int Maintenanceenabled { get; set; }

        /// <summary>
        /// Maintenance message.
        /// </summary>
        /// <value>Maintenance message.</value>
        [DataMember(Name = "maintenancemessage", IsRequired = true, EmitDefaultValue = true)]
        public string Maintenancemessage { get; set; }

        /// <summary>
        /// Mobile custom CSS theme
        /// </summary>
        /// <value>Mobile custom CSS theme</value>
        [DataMember(Name = "mobilecssurl", EmitDefaultValue = false)]
        public string Mobilecssurl { get; set; }

        /// <summary>
        /// Authentication method for user registration.
        /// </summary>
        /// <value>Authentication method for user registration.</value>
        [DataMember(Name = "registerauth", IsRequired = true, EmitDefaultValue = true)]
        public string Registerauth { get; set; }

        /// <summary>
        /// Values: 0 for No, 1 for Yes, 2 for optional.
        /// </summary>
        /// <value>Values: 0 for No, 1 for Yes, 2 for optional.</value>
        [DataMember(Name = "rememberusername", IsRequired = true, EmitDefaultValue = true)]
        public int Rememberusername { get; set; }

        /// <summary>
        /// Site name.
        /// </summary>
        /// <value>Site name.</value>
        [DataMember(Name = "sitename", IsRequired = true, EmitDefaultValue = true)]
        public string Sitename { get; set; }

        /// <summary>
        /// Determines who has access to contact site support.
        /// </summary>
        /// <value>Determines who has access to contact site support.</value>
        [DataMember(Name = "supportavailability", EmitDefaultValue = false)]
        public int Supportavailability { get; set; }

        /// <summary>
        /// Site support contact email                     (only if age verification is enabled).
        /// </summary>
        /// <value>Site support contact email                     (only if age verification is enabled).</value>
        [DataMember(Name = "supportemail", EmitDefaultValue = false)]
        public string Supportemail { get; set; }

        /// <summary>
        /// Site support contact name                     (only if age verification is enabled).
        /// </summary>
        /// <value>Site support contact name                     (only if age verification is enabled).</value>
        [DataMember(Name = "supportname", EmitDefaultValue = false)]
        public string Supportname { get; set; }

        /// <summary>
        /// Site support page link.
        /// </summary>
        /// <value>Site support page link.</value>
        [DataMember(Name = "supportpage", EmitDefaultValue = false)]
        public string Supportpage { get; set; }

        /// <summary>
        /// Android app&#39;s unique identifier.
        /// </summary>
        /// <value>Android app&#39;s unique identifier.</value>
        [DataMember(Name = "tool_mobile_androidappid", EmitDefaultValue = false)]
        public string ToolMobileAndroidappid { get; set; }

        /// <summary>
        /// Disabled features in the app
        /// </summary>
        /// <value>Disabled features in the app</value>
        [DataMember(Name = "tool_mobile_disabledfeatures", EmitDefaultValue = false)]
        public string ToolMobileDisabledfeatures { get; set; }

        /// <summary>
        /// iOS app&#39;s unique identifier.
        /// </summary>
        /// <value>iOS app&#39;s unique identifier.</value>
        [DataMember(Name = "tool_mobile_iosappid", EmitDefaultValue = false)]
        public string ToolMobileIosappid { get; set; }

        /// <summary>
        /// Minimum required version to access.
        /// </summary>
        /// <value>Minimum required version to access.</value>
        [DataMember(Name = "tool_mobile_minimumversion", EmitDefaultValue = false)]
        public string ToolMobileMinimumversion { get; set; }

        /// <summary>
        /// QR login configuration.
        /// </summary>
        /// <value>QR login configuration.</value>
        [DataMember(Name = "tool_mobile_qrcodetype", EmitDefaultValue = false)]
        public int ToolMobileQrcodetype { get; set; }

        /// <summary>
        /// App download page.
        /// </summary>
        /// <value>App download page.</value>
        [DataMember(Name = "tool_mobile_setuplink", EmitDefaultValue = false)]
        public string ToolMobileSetuplink { get; set; }

        /// <summary>
        /// The type of login. 1 for app, 2 for browser, 3 for embedded.
        /// </summary>
        /// <value>The type of login. 1 for app, 2 for browser, 3 for embedded.</value>
        [DataMember(Name = "typeoflogin", IsRequired = true, EmitDefaultValue = true)]
        public int Typeoflogin { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<AuthEmailSignupUser200ResponseWarningsInner> Warnings { get; set; }

        /// <summary>
        /// Site URL.
        /// </summary>
        /// <value>Site URL.</value>
        [DataMember(Name = "wwwroot", IsRequired = true, EmitDefaultValue = true)]
        public string Wwwroot { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolMobileGetPublicConfig200Response {\n");
            sb.Append("  Agedigitalconsentverification: ").Append(Agedigitalconsentverification).Append("\n");
            sb.Append("  Authinstructions: ").Append(Authinstructions).Append("\n");
            sb.Append("  Authloginviaemail: ").Append(Authloginviaemail).Append("\n");
            sb.Append("  Authnoneenabled: ").Append(Authnoneenabled).Append("\n");
            sb.Append("  Autolang: ").Append(Autolang).Append("\n");
            sb.Append("  Compactlogourl: ").Append(Compactlogourl).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Enablemobilewebservice: ").Append(Enablemobilewebservice).Append("\n");
            sb.Append("  Enablewebservices: ").Append(Enablewebservices).Append("\n");
            sb.Append("  Forgottenpasswordurl: ").Append(Forgottenpasswordurl).Append("\n");
            sb.Append("  Guestlogin: ").Append(Guestlogin).Append("\n");
            sb.Append("  Httpswwwroot: ").Append(Httpswwwroot).Append("\n");
            sb.Append("  Identityproviders: ").Append(Identityproviders).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Langlist: ").Append(Langlist).Append("\n");
            sb.Append("  Langmenu: ").Append(Langmenu).Append("\n");
            sb.Append("  Launchurl: ").Append(Launchurl).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Logourl: ").Append(Logourl).Append("\n");
            sb.Append("  Maintenanceenabled: ").Append(Maintenanceenabled).Append("\n");
            sb.Append("  Maintenancemessage: ").Append(Maintenancemessage).Append("\n");
            sb.Append("  Mobilecssurl: ").Append(Mobilecssurl).Append("\n");
            sb.Append("  Registerauth: ").Append(Registerauth).Append("\n");
            sb.Append("  Rememberusername: ").Append(Rememberusername).Append("\n");
            sb.Append("  Sitename: ").Append(Sitename).Append("\n");
            sb.Append("  Supportavailability: ").Append(Supportavailability).Append("\n");
            sb.Append("  Supportemail: ").Append(Supportemail).Append("\n");
            sb.Append("  Supportname: ").Append(Supportname).Append("\n");
            sb.Append("  Supportpage: ").Append(Supportpage).Append("\n");
            sb.Append("  ToolMobileAndroidappid: ").Append(ToolMobileAndroidappid).Append("\n");
            sb.Append("  ToolMobileDisabledfeatures: ").Append(ToolMobileDisabledfeatures).Append("\n");
            sb.Append("  ToolMobileIosappid: ").Append(ToolMobileIosappid).Append("\n");
            sb.Append("  ToolMobileMinimumversion: ").Append(ToolMobileMinimumversion).Append("\n");
            sb.Append("  ToolMobileQrcodetype: ").Append(ToolMobileQrcodetype).Append("\n");
            sb.Append("  ToolMobileSetuplink: ").Append(ToolMobileSetuplink).Append("\n");
            sb.Append("  Typeoflogin: ").Append(Typeoflogin).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  Wwwroot: ").Append(Wwwroot).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
