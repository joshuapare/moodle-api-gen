/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency
    /// </summary>
    [DataContract(Name = "report_competency_data_for_report_200_response_usercompetencies_inner_competency")]
    public partial class ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency" /> class.
        /// </summary>
        /// <param name="competency">competency (required).</param>
        /// <param name="comppath">comppath (required).</param>
        /// <param name="framework">framework (required).</param>
        /// <param name="hascourses">hascourses (required) (default to null).</param>
        /// <param name="hasrelatedcompetencies">hasrelatedcompetencies (required) (default to null).</param>
        /// <param name="linkedcourses">linkedcourses (required).</param>
        /// <param name="pluginbaseurl">pluginbaseurl (required).</param>
        /// <param name="relatedcompetencies">relatedcompetencies (required).</param>
        /// <param name="scaleconfiguration">scaleconfiguration (required).</param>
        /// <param name="scaleid">scaleid (required).</param>
        /// <param name="taxonomyterm">taxonomyterm (required) (default to &quot;null&quot;).</param>
        public ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency(CoreCompetencyCreateCompetency200Response competency = default(CoreCompetencyCreateCompetency200Response), ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetencyComppath comppath = default(ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetencyComppath), CoreCompetencyDuplicateCompetencyFramework200Response framework = default(CoreCompetencyDuplicateCompetencyFramework200Response), bool hascourses = null, bool hasrelatedcompetencies = null, List<CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner> linkedcourses = default(List<CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner>), string pluginbaseurl = default(string), List<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner> relatedcompetencies = default(List<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner>), string scaleconfiguration = default(string), int scaleid = default(int), string taxonomyterm = @"null")
        {
            // to ensure "competency" is required (not null)
            if (competency == null)
            {
                throw new ArgumentNullException("competency is a required property for ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency and cannot be null");
            }
            this.Competency = competency;
            // to ensure "comppath" is required (not null)
            if (comppath == null)
            {
                throw new ArgumentNullException("comppath is a required property for ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency and cannot be null");
            }
            this.Comppath = comppath;
            // to ensure "framework" is required (not null)
            if (framework == null)
            {
                throw new ArgumentNullException("framework is a required property for ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency and cannot be null");
            }
            this.Framework = framework;
            this.Hascourses = hascourses;
            this.Hasrelatedcompetencies = hasrelatedcompetencies;
            // to ensure "linkedcourses" is required (not null)
            if (linkedcourses == null)
            {
                throw new ArgumentNullException("linkedcourses is a required property for ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency and cannot be null");
            }
            this.Linkedcourses = linkedcourses;
            // to ensure "pluginbaseurl" is required (not null)
            if (pluginbaseurl == null)
            {
                throw new ArgumentNullException("pluginbaseurl is a required property for ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency and cannot be null");
            }
            this.Pluginbaseurl = pluginbaseurl;
            // to ensure "relatedcompetencies" is required (not null)
            if (relatedcompetencies == null)
            {
                throw new ArgumentNullException("relatedcompetencies is a required property for ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency and cannot be null");
            }
            this.Relatedcompetencies = relatedcompetencies;
            // to ensure "scaleconfiguration" is required (not null)
            if (scaleconfiguration == null)
            {
                throw new ArgumentNullException("scaleconfiguration is a required property for ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency and cannot be null");
            }
            this.Scaleconfiguration = scaleconfiguration;
            this.Scaleid = scaleid;
            // to ensure "taxonomyterm" is required (not null)
            if (taxonomyterm == null)
            {
                throw new ArgumentNullException("taxonomyterm is a required property for ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency and cannot be null");
            }
            this.Taxonomyterm = taxonomyterm;
        }

        /// <summary>
        /// Gets or Sets Competency
        /// </summary>
        [DataMember(Name = "competency", IsRequired = true, EmitDefaultValue = true)]
        public CoreCompetencyCreateCompetency200Response Competency { get; set; }

        /// <summary>
        /// Gets or Sets Comppath
        /// </summary>
        [DataMember(Name = "comppath", IsRequired = true, EmitDefaultValue = true)]
        public ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetencyComppath Comppath { get; set; }

        /// <summary>
        /// Gets or Sets Framework
        /// </summary>
        [DataMember(Name = "framework", IsRequired = true, EmitDefaultValue = true)]
        public CoreCompetencyDuplicateCompetencyFramework200Response Framework { get; set; }

        /// <summary>
        /// hascourses
        /// </summary>
        /// <value>hascourses</value>
        [DataMember(Name = "hascourses", IsRequired = true, EmitDefaultValue = true)]
        public bool Hascourses { get; set; }

        /// <summary>
        /// hasrelatedcompetencies
        /// </summary>
        /// <value>hasrelatedcompetencies</value>
        [DataMember(Name = "hasrelatedcompetencies", IsRequired = true, EmitDefaultValue = true)]
        public bool Hasrelatedcompetencies { get; set; }

        /// <summary>
        /// Gets or Sets Linkedcourses
        /// </summary>
        [DataMember(Name = "linkedcourses", IsRequired = true, EmitDefaultValue = true)]
        public List<CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner> Linkedcourses { get; set; }

        /// <summary>
        /// pluginbaseurl
        /// </summary>
        /// <value>pluginbaseurl</value>
        [DataMember(Name = "pluginbaseurl", IsRequired = true, EmitDefaultValue = true)]
        public string Pluginbaseurl { get; set; }

        /// <summary>
        /// Gets or Sets Relatedcompetencies
        /// </summary>
        [DataMember(Name = "relatedcompetencies", IsRequired = true, EmitDefaultValue = true)]
        public List<CoreCompetencyReadUserEvidence200ResponseCompetenciesInner> Relatedcompetencies { get; set; }

        /// <summary>
        /// scaleconfiguration
        /// </summary>
        /// <value>scaleconfiguration</value>
        [DataMember(Name = "scaleconfiguration", IsRequired = true, EmitDefaultValue = true)]
        public string Scaleconfiguration { get; set; }

        /// <summary>
        /// scaleid
        /// </summary>
        /// <value>scaleid</value>
        [DataMember(Name = "scaleid", IsRequired = true, EmitDefaultValue = true)]
        public int Scaleid { get; set; }

        /// <summary>
        /// taxonomyterm
        /// </summary>
        /// <value>taxonomyterm</value>
        [DataMember(Name = "taxonomyterm", IsRequired = true, EmitDefaultValue = true)]
        public string Taxonomyterm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportCompetencyDataForReport200ResponseUsercompetenciesInnerCompetency {\n");
            sb.Append("  Competency: ").Append(Competency).Append("\n");
            sb.Append("  Comppath: ").Append(Comppath).Append("\n");
            sb.Append("  Framework: ").Append(Framework).Append("\n");
            sb.Append("  Hascourses: ").Append(Hascourses).Append("\n");
            sb.Append("  Hasrelatedcompetencies: ").Append(Hasrelatedcompetencies).Append("\n");
            sb.Append("  Linkedcourses: ").Append(Linkedcourses).Append("\n");
            sb.Append("  Pluginbaseurl: ").Append(Pluginbaseurl).Append("\n");
            sb.Append("  Relatedcompetencies: ").Append(Relatedcompetencies).Append("\n");
            sb.Append("  Scaleconfiguration: ").Append(Scaleconfiguration).Append("\n");
            sb.Append("  Scaleid: ").Append(Scaleid).Append("\n");
            sb.Append("  Taxonomyterm: ").Append(Taxonomyterm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
