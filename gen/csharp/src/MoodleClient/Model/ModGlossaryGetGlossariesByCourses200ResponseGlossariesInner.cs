/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// Glossaries
    /// </summary>
    [DataContract(Name = "mod_glossary_get_glossaries_by_courses_200_response_glossaries_inner")]
    public partial class ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner" /> class.
        /// </summary>
        /// <param name="allowcomments">If enabled, all participants with permission to create comments will be able to add comments to glossary entries (default to null).</param>
        /// <param name="allowduplicatedentries">If enabled, multiple entries can have the same concept name (default to null).</param>
        /// <param name="allowprintview">If enabled, students are provided with a link to a printer-friendly version of the glossary. The link is always available to teachers (default to null).</param>
        /// <param name="approvaldisplayformat">When approving glossary items you may wish to use a different display format (default to &quot;null&quot;).</param>
        /// <param name="assessed">Aggregate type (default to null).</param>
        /// <param name="assesstimefinish">Restrict rating to items created before this (default to null).</param>
        /// <param name="assesstimestart">Restrict rating to items created after this (default to null).</param>
        /// <param name="browsemodes">browsemodes.</param>
        /// <param name="canaddentry">Whether the user can add a new entry (default to null).</param>
        /// <param name="completionentries">Number of entries to complete (default to null).</param>
        /// <param name="course">Course id.</param>
        /// <param name="coursemodule">Course module id.</param>
        /// <param name="defaultapproval">If set to no, entries require approving by a teacher before they are viewable by everyone. (default to null).</param>
        /// <param name="displayformat">Display format type (default to &quot;null&quot;).</param>
        /// <param name="editalways">Always allow editing (default to null).</param>
        /// <param name="entbypage">Entries shown per page (default to null).</param>
        /// <param name="globalglossary">globalglossary.</param>
        /// <param name="groupingid">Group id.</param>
        /// <param name="groupmode">Group mode.</param>
        /// <param name="id">Activity instance id.</param>
        /// <param name="intro">Activity introduction.</param>
        /// <param name="introfiles">introfiles.</param>
        /// <param name="introformat">intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN).</param>
        /// <param name="lang">Forced activity language.</param>
        /// <param name="mainglossary">If enabled this glossary is a main glossary. (default to null).</param>
        /// <param name="name">Activity name.</param>
        /// <param name="rssarticles">This setting specifies the number of glossary entry concepts to include in the RSS feed. Between 5 and 20 generally acceptable (default to null).</param>
        /// <param name="rsstype">To enable the RSS feed for this activity, select either concepts with author or concepts without author to be included in the feed (default to null).</param>
        /// <param name="scale">Scale ID (default to null).</param>
        /// <param name="section">Course section id.</param>
        /// <param name="showall">If enabled, participants can browse all entries at once (default to null).</param>
        /// <param name="showalphabet">If enabled, participants can browse the glossary by letters of the alphabet (default to null).</param>
        /// <param name="showspecial">If enabled, participants can browse the glossary by special characters, such as @ and # (default to null).</param>
        /// <param name="timecreated">Time created.</param>
        /// <param name="timemodified">Time modified.</param>
        /// <param name="usedynalink">If site-wide glossary auto-linking has been enabled by an administrator and this checkbox is ticked, the entry will be automatically linked wherever the concept words and phrases appear throughout the rest of the course. (default to null).</param>
        /// <param name="visible">Visible.</param>
        public ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner(int allowcomments = null, int allowduplicatedentries = null, int allowprintview = null, string approvaldisplayformat = @"null", int assessed = null, int assesstimefinish = null, int assesstimestart = null, List<Object> browsemodes = default(List<Object>), int canaddentry = null, int completionentries = null, int course = default(int), int coursemodule = default(int), int defaultapproval = null, string displayformat = @"null", int editalways = null, int entbypage = null, int globalglossary = default(int), int groupingid = default(int), int groupmode = default(int), int id = default(int), string intro = default(string), List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), int introformat = default(int), string lang = default(string), int mainglossary = null, string name = default(string), int rssarticles = null, int rsstype = null, int scale = null, int section = default(int), int showall = null, int showalphabet = null, int showspecial = null, int timecreated = default(int), int timemodified = default(int), int usedynalink = null, bool visible = default(bool))
        {
            this.Allowcomments = allowcomments;
            this.Allowduplicatedentries = allowduplicatedentries;
            this.Allowprintview = allowprintview;
            // use default value if no "approvaldisplayformat" provided
            this.Approvaldisplayformat = approvaldisplayformat ?? @"null";
            this.Assessed = assessed;
            this.Assesstimefinish = assesstimefinish;
            this.Assesstimestart = assesstimestart;
            this.Browsemodes = browsemodes;
            this.Canaddentry = canaddentry;
            this.Completionentries = completionentries;
            this.Course = course;
            this.Coursemodule = coursemodule;
            this.Defaultapproval = defaultapproval;
            // use default value if no "displayformat" provided
            this.Displayformat = displayformat ?? @"null";
            this.Editalways = editalways;
            this.Entbypage = entbypage;
            this.Globalglossary = globalglossary;
            this.Groupingid = groupingid;
            this.Groupmode = groupmode;
            this.Id = id;
            this.Intro = intro;
            this.Introfiles = introfiles;
            this.Introformat = introformat;
            this.Lang = lang;
            this.Mainglossary = mainglossary;
            this.Name = name;
            this.Rssarticles = rssarticles;
            this.Rsstype = rsstype;
            this.Scale = scale;
            this.Section = section;
            this.Showall = showall;
            this.Showalphabet = showalphabet;
            this.Showspecial = showspecial;
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
            this.Usedynalink = usedynalink;
            this.Visible = visible;
        }

        /// <summary>
        /// If enabled, all participants with permission to create comments will be able to add comments to glossary entries
        /// </summary>
        /// <value>If enabled, all participants with permission to create comments will be able to add comments to glossary entries</value>
        [DataMember(Name = "allowcomments", EmitDefaultValue = false)]
        public int Allowcomments { get; set; }

        /// <summary>
        /// If enabled, multiple entries can have the same concept name
        /// </summary>
        /// <value>If enabled, multiple entries can have the same concept name</value>
        [DataMember(Name = "allowduplicatedentries", EmitDefaultValue = false)]
        public int Allowduplicatedentries { get; set; }

        /// <summary>
        /// If enabled, students are provided with a link to a printer-friendly version of the glossary. The link is always available to teachers
        /// </summary>
        /// <value>If enabled, students are provided with a link to a printer-friendly version of the glossary. The link is always available to teachers</value>
        [DataMember(Name = "allowprintview", EmitDefaultValue = false)]
        public int Allowprintview { get; set; }

        /// <summary>
        /// When approving glossary items you may wish to use a different display format
        /// </summary>
        /// <value>When approving glossary items you may wish to use a different display format</value>
        [DataMember(Name = "approvaldisplayformat", EmitDefaultValue = false)]
        public string Approvaldisplayformat { get; set; }

        /// <summary>
        /// Aggregate type
        /// </summary>
        /// <value>Aggregate type</value>
        [DataMember(Name = "assessed", EmitDefaultValue = false)]
        public int Assessed { get; set; }

        /// <summary>
        /// Restrict rating to items created before this
        /// </summary>
        /// <value>Restrict rating to items created before this</value>
        [DataMember(Name = "assesstimefinish", EmitDefaultValue = false)]
        public int Assesstimefinish { get; set; }

        /// <summary>
        /// Restrict rating to items created after this
        /// </summary>
        /// <value>Restrict rating to items created after this</value>
        [DataMember(Name = "assesstimestart", EmitDefaultValue = false)]
        public int Assesstimestart { get; set; }

        /// <summary>
        /// Gets or Sets Browsemodes
        /// </summary>
        [DataMember(Name = "browsemodes", EmitDefaultValue = false)]
        public List<Object> Browsemodes { get; set; }

        /// <summary>
        /// Whether the user can add a new entry
        /// </summary>
        /// <value>Whether the user can add a new entry</value>
        [DataMember(Name = "canaddentry", EmitDefaultValue = false)]
        public int Canaddentry { get; set; }

        /// <summary>
        /// Number of entries to complete
        /// </summary>
        /// <value>Number of entries to complete</value>
        [DataMember(Name = "completionentries", EmitDefaultValue = false)]
        public int Completionentries { get; set; }

        /// <summary>
        /// Course id
        /// </summary>
        /// <value>Course id</value>
        [DataMember(Name = "course", EmitDefaultValue = false)]
        public int Course { get; set; }

        /// <summary>
        /// Course module id
        /// </summary>
        /// <value>Course module id</value>
        [DataMember(Name = "coursemodule", EmitDefaultValue = false)]
        public int Coursemodule { get; set; }

        /// <summary>
        /// If set to no, entries require approving by a teacher before they are viewable by everyone.
        /// </summary>
        /// <value>If set to no, entries require approving by a teacher before they are viewable by everyone.</value>
        [DataMember(Name = "defaultapproval", EmitDefaultValue = false)]
        public int Defaultapproval { get; set; }

        /// <summary>
        /// Display format type
        /// </summary>
        /// <value>Display format type</value>
        [DataMember(Name = "displayformat", EmitDefaultValue = false)]
        public string Displayformat { get; set; }

        /// <summary>
        /// Always allow editing
        /// </summary>
        /// <value>Always allow editing</value>
        [DataMember(Name = "editalways", EmitDefaultValue = false)]
        public int Editalways { get; set; }

        /// <summary>
        /// Entries shown per page
        /// </summary>
        /// <value>Entries shown per page</value>
        [DataMember(Name = "entbypage", EmitDefaultValue = false)]
        public int Entbypage { get; set; }

        /// <summary>
        /// Gets or Sets Globalglossary
        /// </summary>
        [DataMember(Name = "globalglossary", EmitDefaultValue = false)]
        public int Globalglossary { get; set; }

        /// <summary>
        /// Group id
        /// </summary>
        /// <value>Group id</value>
        [DataMember(Name = "groupingid", EmitDefaultValue = false)]
        public int Groupingid { get; set; }

        /// <summary>
        /// Group mode
        /// </summary>
        /// <value>Group mode</value>
        [DataMember(Name = "groupmode", EmitDefaultValue = false)]
        public int Groupmode { get; set; }

        /// <summary>
        /// Activity instance id
        /// </summary>
        /// <value>Activity instance id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Activity introduction
        /// </summary>
        /// <value>Activity introduction</value>
        [DataMember(Name = "intro", EmitDefaultValue = false)]
        public string Intro { get; set; }

        /// <summary>
        /// Gets or Sets Introfiles
        /// </summary>
        [DataMember(Name = "introfiles", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Introfiles { get; set; }

        /// <summary>
        /// intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "introformat", EmitDefaultValue = false)]
        public int Introformat { get; set; }

        /// <summary>
        /// Forced activity language
        /// </summary>
        /// <value>Forced activity language</value>
        [DataMember(Name = "lang", EmitDefaultValue = false)]
        public string Lang { get; set; }

        /// <summary>
        /// If enabled this glossary is a main glossary.
        /// </summary>
        /// <value>If enabled this glossary is a main glossary.</value>
        [DataMember(Name = "mainglossary", EmitDefaultValue = false)]
        public int Mainglossary { get; set; }

        /// <summary>
        /// Activity name
        /// </summary>
        /// <value>Activity name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// This setting specifies the number of glossary entry concepts to include in the RSS feed. Between 5 and 20 generally acceptable
        /// </summary>
        /// <value>This setting specifies the number of glossary entry concepts to include in the RSS feed. Between 5 and 20 generally acceptable</value>
        [DataMember(Name = "rssarticles", EmitDefaultValue = false)]
        public int Rssarticles { get; set; }

        /// <summary>
        /// To enable the RSS feed for this activity, select either concepts with author or concepts without author to be included in the feed
        /// </summary>
        /// <value>To enable the RSS feed for this activity, select either concepts with author or concepts without author to be included in the feed</value>
        [DataMember(Name = "rsstype", EmitDefaultValue = false)]
        public int Rsstype { get; set; }

        /// <summary>
        /// Scale ID
        /// </summary>
        /// <value>Scale ID</value>
        [DataMember(Name = "scale", EmitDefaultValue = false)]
        public int Scale { get; set; }

        /// <summary>
        /// Course section id
        /// </summary>
        /// <value>Course section id</value>
        [DataMember(Name = "section", EmitDefaultValue = false)]
        public int Section { get; set; }

        /// <summary>
        /// If enabled, participants can browse all entries at once
        /// </summary>
        /// <value>If enabled, participants can browse all entries at once</value>
        [DataMember(Name = "showall", EmitDefaultValue = false)]
        public int Showall { get; set; }

        /// <summary>
        /// If enabled, participants can browse the glossary by letters of the alphabet
        /// </summary>
        /// <value>If enabled, participants can browse the glossary by letters of the alphabet</value>
        [DataMember(Name = "showalphabet", EmitDefaultValue = false)]
        public int Showalphabet { get; set; }

        /// <summary>
        /// If enabled, participants can browse the glossary by special characters, such as @ and #
        /// </summary>
        /// <value>If enabled, participants can browse the glossary by special characters, such as @ and #</value>
        [DataMember(Name = "showspecial", EmitDefaultValue = false)]
        public int Showspecial { get; set; }

        /// <summary>
        /// Time created
        /// </summary>
        /// <value>Time created</value>
        [DataMember(Name = "timecreated", EmitDefaultValue = false)]
        public int Timecreated { get; set; }

        /// <summary>
        /// Time modified
        /// </summary>
        /// <value>Time modified</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// If site-wide glossary auto-linking has been enabled by an administrator and this checkbox is ticked, the entry will be automatically linked wherever the concept words and phrases appear throughout the rest of the course.
        /// </summary>
        /// <value>If site-wide glossary auto-linking has been enabled by an administrator and this checkbox is ticked, the entry will be automatically linked wherever the concept words and phrases appear throughout the rest of the course.</value>
        [DataMember(Name = "usedynalink", EmitDefaultValue = false)]
        public int Usedynalink { get; set; }

        /// <summary>
        /// Visible
        /// </summary>
        /// <value>Visible</value>
        [DataMember(Name = "visible", EmitDefaultValue = true)]
        public bool Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner {\n");
            sb.Append("  Allowcomments: ").Append(Allowcomments).Append("\n");
            sb.Append("  Allowduplicatedentries: ").Append(Allowduplicatedentries).Append("\n");
            sb.Append("  Allowprintview: ").Append(Allowprintview).Append("\n");
            sb.Append("  Approvaldisplayformat: ").Append(Approvaldisplayformat).Append("\n");
            sb.Append("  Assessed: ").Append(Assessed).Append("\n");
            sb.Append("  Assesstimefinish: ").Append(Assesstimefinish).Append("\n");
            sb.Append("  Assesstimestart: ").Append(Assesstimestart).Append("\n");
            sb.Append("  Browsemodes: ").Append(Browsemodes).Append("\n");
            sb.Append("  Canaddentry: ").Append(Canaddentry).Append("\n");
            sb.Append("  Completionentries: ").Append(Completionentries).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Coursemodule: ").Append(Coursemodule).Append("\n");
            sb.Append("  Defaultapproval: ").Append(Defaultapproval).Append("\n");
            sb.Append("  Displayformat: ").Append(Displayformat).Append("\n");
            sb.Append("  Editalways: ").Append(Editalways).Append("\n");
            sb.Append("  Entbypage: ").Append(Entbypage).Append("\n");
            sb.Append("  Globalglossary: ").Append(Globalglossary).Append("\n");
            sb.Append("  Groupingid: ").Append(Groupingid).Append("\n");
            sb.Append("  Groupmode: ").Append(Groupmode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Intro: ").Append(Intro).Append("\n");
            sb.Append("  Introfiles: ").Append(Introfiles).Append("\n");
            sb.Append("  Introformat: ").Append(Introformat).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Mainglossary: ").Append(Mainglossary).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rssarticles: ").Append(Rssarticles).Append("\n");
            sb.Append("  Rsstype: ").Append(Rsstype).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  Showall: ").Append(Showall).Append("\n");
            sb.Append("  Showalphabet: ").Append(Showalphabet).Append("\n");
            sb.Append("  Showspecial: ").Append(Showspecial).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Usedynalink: ").Append(Usedynalink).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
