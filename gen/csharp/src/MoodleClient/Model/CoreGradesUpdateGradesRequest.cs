/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreGradesUpdateGradesRequest
    /// </summary>
    [DataContract(Name = "core_grades_update_grades_request")]
    public partial class CoreGradesUpdateGradesRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreGradesUpdateGradesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreGradesUpdateGradesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreGradesUpdateGradesRequest" /> class.
        /// </summary>
        /// <param name="activityid">The activity ID (required) (default to null).</param>
        /// <param name="component">A component, for example mod_forum or mod_quiz (required) (default to &quot;null&quot;).</param>
        /// <param name="courseid">id of course (required).</param>
        /// <param name="grades">grades.</param>
        /// <param name="itemdetails">itemdetails.</param>
        /// <param name="itemnumber">grade item ID number for modules that have multiple grades. Typically this is 0. (required) (default to null).</param>
        /// <param name="source">The source of the grade update (required) (default to &quot;null&quot;).</param>
        public CoreGradesUpdateGradesRequest(int activityid = null, string component = @"null", int courseid = default(int), List<CoreGradesUpdateGradesRequestGradesInner> grades = default(List<CoreGradesUpdateGradesRequestGradesInner>), CoreGradesUpdateGradesRequestItemdetails itemdetails = default(CoreGradesUpdateGradesRequestItemdetails), int itemnumber = null, string source = @"null")
        {
            this.Activityid = activityid;
            // to ensure "component" is required (not null)
            if (component == null)
            {
                throw new ArgumentNullException("component is a required property for CoreGradesUpdateGradesRequest and cannot be null");
            }
            this.Component = component;
            this.Courseid = courseid;
            this.Itemnumber = itemnumber;
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new ArgumentNullException("source is a required property for CoreGradesUpdateGradesRequest and cannot be null");
            }
            this.Source = source;
            this.Grades = grades;
            this.Itemdetails = itemdetails;
        }

        /// <summary>
        /// The activity ID
        /// </summary>
        /// <value>The activity ID</value>
        [DataMember(Name = "activityid", IsRequired = true, EmitDefaultValue = true)]
        public int Activityid { get; set; }

        /// <summary>
        /// A component, for example mod_forum or mod_quiz
        /// </summary>
        /// <value>A component, for example mod_forum or mod_quiz</value>
        [DataMember(Name = "component", IsRequired = true, EmitDefaultValue = true)]
        public string Component { get; set; }

        /// <summary>
        /// id of course
        /// </summary>
        /// <value>id of course</value>
        [DataMember(Name = "courseid", IsRequired = true, EmitDefaultValue = true)]
        public int Courseid { get; set; }

        /// <summary>
        /// Gets or Sets Grades
        /// </summary>
        [DataMember(Name = "grades", EmitDefaultValue = false)]
        public List<CoreGradesUpdateGradesRequestGradesInner> Grades { get; set; }

        /// <summary>
        /// Gets or Sets Itemdetails
        /// </summary>
        [DataMember(Name = "itemdetails", EmitDefaultValue = false)]
        public CoreGradesUpdateGradesRequestItemdetails Itemdetails { get; set; }

        /// <summary>
        /// grade item ID number for modules that have multiple grades. Typically this is 0.
        /// </summary>
        /// <value>grade item ID number for modules that have multiple grades. Typically this is 0.</value>
        [DataMember(Name = "itemnumber", IsRequired = true, EmitDefaultValue = true)]
        public int Itemnumber { get; set; }

        /// <summary>
        /// The source of the grade update
        /// </summary>
        /// <value>The source of the grade update</value>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public string Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreGradesUpdateGradesRequest {\n");
            sb.Append("  Activityid: ").Append(Activityid).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Courseid: ").Append(Courseid).Append("\n");
            sb.Append("  Grades: ").Append(Grades).Append("\n");
            sb.Append("  Itemdetails: ").Append(Itemdetails).Append("\n");
            sb.Append("  Itemnumber: ").Append(Itemnumber).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
