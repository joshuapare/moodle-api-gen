/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
    /// </summary>
    [DataContract(Name = "mod_workshop_get_workshops_by_courses_200_response_workshops_inner")]
    public partial class ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner" /> class.
        /// </summary>
        /// <param name="assessmentend">0 &#x3D; will be closed manually, greater than 0 the timestamp of the end of the assessment phase. (default to 0).</param>
        /// <param name="assessmentstart">0 &#x3D; will be started manually, greater than 0 the timestamp of the start of the assessment phase. (default to 0).</param>
        /// <param name="conclusion">A text to be displayed at the end of the workshop. (default to &quot;null&quot;).</param>
        /// <param name="conclusionfiles">conclusionfiles.</param>
        /// <param name="conclusionformat">conclusion format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 0).</param>
        /// <param name="course">Course id this workshop is part of. (default to null).</param>
        /// <param name="coursemodule">coursemodule.</param>
        /// <param name="evaluation">The recently used grading evaluation method. (default to &quot;null&quot;).</param>
        /// <param name="examplesmode">0 &#x3D; example assessments are voluntary, 1 &#x3D; examples must be assessed before submission,                     2 &#x3D; examples are available after own submission and must be assessed before peer/self assessment phase. (default to 0).</param>
        /// <param name="grade">The maximum grade for submission. (default to 80M).</param>
        /// <param name="gradedecimals">Number of digits that should be shown after the decimal point when displaying grades. (default to 0).</param>
        /// <param name="gradinggrade">The maximum grade for assessment. (default to 20M).</param>
        /// <param name="id">The primary key of the record..</param>
        /// <param name="instructauthors">Instructions for the submission phase. (default to &quot;null&quot;).</param>
        /// <param name="instructauthorsfiles">instructauthorsfiles.</param>
        /// <param name="instructauthorsformat">instructauthors format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 0).</param>
        /// <param name="instructreviewers">Instructions for the assessment phase. (default to &quot;null&quot;).</param>
        /// <param name="instructreviewersfiles">instructreviewersfiles.</param>
        /// <param name="instructreviewersformat">instructreviewers format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 0).</param>
        /// <param name="intro">Workshop introduction text. (default to &quot;&quot;).</param>
        /// <param name="introfiles">introfiles.</param>
        /// <param name="introformat">intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 0).</param>
        /// <param name="lang">Forced activity language.</param>
        /// <param name="latesubmissions">Allow submitting the work after the deadline. (default to false).</param>
        /// <param name="maxbytes">Maximum size of the one attached file. (default to 100000).</param>
        /// <param name="name">Workshop name. (default to &quot;null&quot;).</param>
        /// <param name="nattachments">Maximum number of submission attachments. (default to 1).</param>
        /// <param name="overallfeedbackfiles">Number of allowed attachments to the overall feedback. (default to 0).</param>
        /// <param name="overallfeedbackfiletypes">Comma separated list of file extensions. (default to &quot;null&quot;).</param>
        /// <param name="overallfeedbackmaxbytes">Maximum size of one file attached to the overall feedback. (default to 100000).</param>
        /// <param name="overallfeedbackmode">Mode of the overall feedback support. (default to 1).</param>
        /// <param name="phase">The current phase of workshop (0 &#x3D; not available, 1 &#x3D; submission, 2 &#x3D; assessment, 3 &#x3D; closed). (default to 0).</param>
        /// <param name="phaseswitchassessment">Automatically switch to the assessment phase after the submissions deadline. (default to false).</param>
        /// <param name="strategy">The type of the current grading strategy used in this workshop. (default to &quot;null&quot;).</param>
        /// <param name="submissionend">0 &#x3D; will be closed manually, greater than 0 the timestamp of the end of the submission phase. (default to 0).</param>
        /// <param name="submissionfiletypes">Comma separated list of file extensions..</param>
        /// <param name="submissionstart">0 &#x3D; will be started manually, greater than 0 the timestamp of the start of the submission phase. (default to 0).</param>
        /// <param name="submissiontypefile">Indicates whether a file upload is required as part of each submission. 0 for no, 1 for optional, 2 for required. (default to 1).</param>
        /// <param name="submissiontypetext">Indicates whether text is required as part of each submission. 0 for no, 1 for optional, 2 for required. (default to 1).</param>
        /// <param name="timemodified">The timestamp when the module was modified. (default to null).</param>
        /// <param name="useexamples">Optional feature: students practise evaluating on example submissions from teacher. (default to false).</param>
        /// <param name="usepeerassessment">Optional feature: students perform peer assessment of others&#39; work. (default to false).</param>
        /// <param name="useselfassessment">Optional feature: students perform self assessment of their own work. (default to false).</param>
        public ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner(int assessmentend = 0, int assessmentstart = 0, string conclusion = @"null", List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> conclusionfiles = default(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>), int conclusionformat = 0, int course = null, int coursemodule = default(int), string evaluation = @"null", int examplesmode = 0, decimal grade = 80M, int gradedecimals = 0, decimal gradinggrade = 20M, int id = default(int), string instructauthors = @"null", List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> instructauthorsfiles = default(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>), int instructauthorsformat = 0, string instructreviewers = @"null", List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> instructreviewersfiles = default(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>), int instructreviewersformat = 0, string intro = @"", List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> introfiles = default(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>), int introformat = 0, string lang = default(string), bool latesubmissions = false, int maxbytes = 100000, string name = @"null", int nattachments = 1, int overallfeedbackfiles = 0, string overallfeedbackfiletypes = @"null", int overallfeedbackmaxbytes = 100000, int overallfeedbackmode = 1, int phase = 0, bool phaseswitchassessment = false, string strategy = @"null", int submissionend = 0, string submissionfiletypes = default(string), int submissionstart = 0, int submissiontypefile = 1, int submissiontypetext = 1, int timemodified = null, bool useexamples = false, bool usepeerassessment = false, bool useselfassessment = false)
        {
            this.Assessmentend = assessmentend;
            this.Assessmentstart = assessmentstart;
            // use default value if no "conclusion" provided
            this.Conclusion = conclusion ?? @"null";
            this.Conclusionfiles = conclusionfiles;
            this.Conclusionformat = conclusionformat;
            this.Course = course;
            this.Coursemodule = coursemodule;
            // use default value if no "evaluation" provided
            this.Evaluation = evaluation ?? @"null";
            this.Examplesmode = examplesmode;
            this.Grade = grade;
            this.Gradedecimals = gradedecimals;
            this.Gradinggrade = gradinggrade;
            this.Id = id;
            // use default value if no "instructauthors" provided
            this.Instructauthors = instructauthors ?? @"null";
            this.Instructauthorsfiles = instructauthorsfiles;
            this.Instructauthorsformat = instructauthorsformat;
            // use default value if no "instructreviewers" provided
            this.Instructreviewers = instructreviewers ?? @"null";
            this.Instructreviewersfiles = instructreviewersfiles;
            this.Instructreviewersformat = instructreviewersformat;
            // use default value if no "intro" provided
            this.Intro = intro ?? @"";
            this.Introfiles = introfiles;
            this.Introformat = introformat;
            this.Lang = lang;
            this.Latesubmissions = latesubmissions;
            this.Maxbytes = maxbytes;
            // use default value if no "name" provided
            this.Name = name ?? @"null";
            this.Nattachments = nattachments;
            this.Overallfeedbackfiles = overallfeedbackfiles;
            // use default value if no "overallfeedbackfiletypes" provided
            this.Overallfeedbackfiletypes = overallfeedbackfiletypes ?? @"null";
            this.Overallfeedbackmaxbytes = overallfeedbackmaxbytes;
            this.Overallfeedbackmode = overallfeedbackmode;
            this.Phase = phase;
            this.Phaseswitchassessment = phaseswitchassessment;
            // use default value if no "strategy" provided
            this.Strategy = strategy ?? @"null";
            this.Submissionend = submissionend;
            this.Submissionfiletypes = submissionfiletypes;
            this.Submissionstart = submissionstart;
            this.Submissiontypefile = submissiontypefile;
            this.Submissiontypetext = submissiontypetext;
            this.Timemodified = timemodified;
            this.Useexamples = useexamples;
            this.Usepeerassessment = usepeerassessment;
            this.Useselfassessment = useselfassessment;
        }

        /// <summary>
        /// 0 &#x3D; will be closed manually, greater than 0 the timestamp of the end of the assessment phase.
        /// </summary>
        /// <value>0 &#x3D; will be closed manually, greater than 0 the timestamp of the end of the assessment phase.</value>
        [DataMember(Name = "assessmentend", EmitDefaultValue = false)]
        public int Assessmentend { get; set; }

        /// <summary>
        /// 0 &#x3D; will be started manually, greater than 0 the timestamp of the start of the assessment phase.
        /// </summary>
        /// <value>0 &#x3D; will be started manually, greater than 0 the timestamp of the start of the assessment phase.</value>
        [DataMember(Name = "assessmentstart", EmitDefaultValue = false)]
        public int Assessmentstart { get; set; }

        /// <summary>
        /// A text to be displayed at the end of the workshop.
        /// </summary>
        /// <value>A text to be displayed at the end of the workshop.</value>
        [DataMember(Name = "conclusion", EmitDefaultValue = false)]
        public string Conclusion { get; set; }

        /// <summary>
        /// Gets or Sets Conclusionfiles
        /// </summary>
        [DataMember(Name = "conclusionfiles", EmitDefaultValue = false)]
        public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> Conclusionfiles { get; set; }

        /// <summary>
        /// conclusion format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>conclusion format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "conclusionformat", EmitDefaultValue = false)]
        public int Conclusionformat { get; set; }

        /// <summary>
        /// Course id this workshop is part of.
        /// </summary>
        /// <value>Course id this workshop is part of.</value>
        [DataMember(Name = "course", EmitDefaultValue = false)]
        public int Course { get; set; }

        /// <summary>
        /// coursemodule
        /// </summary>
        /// <value>coursemodule</value>
        [DataMember(Name = "coursemodule", EmitDefaultValue = false)]
        public int Coursemodule { get; set; }

        /// <summary>
        /// The recently used grading evaluation method.
        /// </summary>
        /// <value>The recently used grading evaluation method.</value>
        [DataMember(Name = "evaluation", EmitDefaultValue = false)]
        public string Evaluation { get; set; }

        /// <summary>
        /// 0 &#x3D; example assessments are voluntary, 1 &#x3D; examples must be assessed before submission,                     2 &#x3D; examples are available after own submission and must be assessed before peer/self assessment phase.
        /// </summary>
        /// <value>0 &#x3D; example assessments are voluntary, 1 &#x3D; examples must be assessed before submission,                     2 &#x3D; examples are available after own submission and must be assessed before peer/self assessment phase.</value>
        [DataMember(Name = "examplesmode", EmitDefaultValue = false)]
        public int Examplesmode { get; set; }

        /// <summary>
        /// The maximum grade for submission.
        /// </summary>
        /// <value>The maximum grade for submission.</value>
        [DataMember(Name = "grade", EmitDefaultValue = false)]
        public decimal Grade { get; set; }

        /// <summary>
        /// Number of digits that should be shown after the decimal point when displaying grades.
        /// </summary>
        /// <value>Number of digits that should be shown after the decimal point when displaying grades.</value>
        [DataMember(Name = "gradedecimals", EmitDefaultValue = false)]
        public int Gradedecimals { get; set; }

        /// <summary>
        /// The maximum grade for assessment.
        /// </summary>
        /// <value>The maximum grade for assessment.</value>
        [DataMember(Name = "gradinggrade", EmitDefaultValue = false)]
        public decimal Gradinggrade { get; set; }

        /// <summary>
        /// The primary key of the record.
        /// </summary>
        /// <value>The primary key of the record.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Instructions for the submission phase.
        /// </summary>
        /// <value>Instructions for the submission phase.</value>
        [DataMember(Name = "instructauthors", EmitDefaultValue = false)]
        public string Instructauthors { get; set; }

        /// <summary>
        /// Gets or Sets Instructauthorsfiles
        /// </summary>
        [DataMember(Name = "instructauthorsfiles", EmitDefaultValue = false)]
        public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> Instructauthorsfiles { get; set; }

        /// <summary>
        /// instructauthors format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>instructauthors format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "instructauthorsformat", EmitDefaultValue = false)]
        public int Instructauthorsformat { get; set; }

        /// <summary>
        /// Instructions for the assessment phase.
        /// </summary>
        /// <value>Instructions for the assessment phase.</value>
        [DataMember(Name = "instructreviewers", EmitDefaultValue = false)]
        public string Instructreviewers { get; set; }

        /// <summary>
        /// Gets or Sets Instructreviewersfiles
        /// </summary>
        [DataMember(Name = "instructreviewersfiles", EmitDefaultValue = false)]
        public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> Instructreviewersfiles { get; set; }

        /// <summary>
        /// instructreviewers format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>instructreviewers format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "instructreviewersformat", EmitDefaultValue = false)]
        public int Instructreviewersformat { get; set; }

        /// <summary>
        /// Workshop introduction text.
        /// </summary>
        /// <value>Workshop introduction text.</value>
        [DataMember(Name = "intro", EmitDefaultValue = false)]
        public string Intro { get; set; }

        /// <summary>
        /// Gets or Sets Introfiles
        /// </summary>
        [DataMember(Name = "introfiles", EmitDefaultValue = false)]
        public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> Introfiles { get; set; }

        /// <summary>
        /// intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "introformat", EmitDefaultValue = false)]
        public int Introformat { get; set; }

        /// <summary>
        /// Forced activity language
        /// </summary>
        /// <value>Forced activity language</value>
        [DataMember(Name = "lang", EmitDefaultValue = false)]
        public string Lang { get; set; }

        /// <summary>
        /// Allow submitting the work after the deadline.
        /// </summary>
        /// <value>Allow submitting the work after the deadline.</value>
        [DataMember(Name = "latesubmissions", EmitDefaultValue = true)]
        public bool Latesubmissions { get; set; }

        /// <summary>
        /// Maximum size of the one attached file.
        /// </summary>
        /// <value>Maximum size of the one attached file.</value>
        [DataMember(Name = "maxbytes", EmitDefaultValue = false)]
        public int Maxbytes { get; set; }

        /// <summary>
        /// Workshop name.
        /// </summary>
        /// <value>Workshop name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Maximum number of submission attachments.
        /// </summary>
        /// <value>Maximum number of submission attachments.</value>
        [DataMember(Name = "nattachments", EmitDefaultValue = false)]
        public int Nattachments { get; set; }

        /// <summary>
        /// Number of allowed attachments to the overall feedback.
        /// </summary>
        /// <value>Number of allowed attachments to the overall feedback.</value>
        [DataMember(Name = "overallfeedbackfiles", EmitDefaultValue = false)]
        public int Overallfeedbackfiles { get; set; }

        /// <summary>
        /// Comma separated list of file extensions.
        /// </summary>
        /// <value>Comma separated list of file extensions.</value>
        [DataMember(Name = "overallfeedbackfiletypes", EmitDefaultValue = false)]
        public string Overallfeedbackfiletypes { get; set; }

        /// <summary>
        /// Maximum size of one file attached to the overall feedback.
        /// </summary>
        /// <value>Maximum size of one file attached to the overall feedback.</value>
        [DataMember(Name = "overallfeedbackmaxbytes", EmitDefaultValue = false)]
        public int Overallfeedbackmaxbytes { get; set; }

        /// <summary>
        /// Mode of the overall feedback support.
        /// </summary>
        /// <value>Mode of the overall feedback support.</value>
        [DataMember(Name = "overallfeedbackmode", EmitDefaultValue = false)]
        public int Overallfeedbackmode { get; set; }

        /// <summary>
        /// The current phase of workshop (0 &#x3D; not available, 1 &#x3D; submission, 2 &#x3D; assessment, 3 &#x3D; closed).
        /// </summary>
        /// <value>The current phase of workshop (0 &#x3D; not available, 1 &#x3D; submission, 2 &#x3D; assessment, 3 &#x3D; closed).</value>
        [DataMember(Name = "phase", EmitDefaultValue = false)]
        public int Phase { get; set; }

        /// <summary>
        /// Automatically switch to the assessment phase after the submissions deadline.
        /// </summary>
        /// <value>Automatically switch to the assessment phase after the submissions deadline.</value>
        [DataMember(Name = "phaseswitchassessment", EmitDefaultValue = true)]
        public bool Phaseswitchassessment { get; set; }

        /// <summary>
        /// The type of the current grading strategy used in this workshop.
        /// </summary>
        /// <value>The type of the current grading strategy used in this workshop.</value>
        [DataMember(Name = "strategy", EmitDefaultValue = false)]
        public string Strategy { get; set; }

        /// <summary>
        /// 0 &#x3D; will be closed manually, greater than 0 the timestamp of the end of the submission phase.
        /// </summary>
        /// <value>0 &#x3D; will be closed manually, greater than 0 the timestamp of the end of the submission phase.</value>
        [DataMember(Name = "submissionend", EmitDefaultValue = false)]
        public int Submissionend { get; set; }

        /// <summary>
        /// Comma separated list of file extensions.
        /// </summary>
        /// <value>Comma separated list of file extensions.</value>
        [DataMember(Name = "submissionfiletypes", EmitDefaultValue = false)]
        public string Submissionfiletypes { get; set; }

        /// <summary>
        /// 0 &#x3D; will be started manually, greater than 0 the timestamp of the start of the submission phase.
        /// </summary>
        /// <value>0 &#x3D; will be started manually, greater than 0 the timestamp of the start of the submission phase.</value>
        [DataMember(Name = "submissionstart", EmitDefaultValue = false)]
        public int Submissionstart { get; set; }

        /// <summary>
        /// Indicates whether a file upload is required as part of each submission. 0 for no, 1 for optional, 2 for required.
        /// </summary>
        /// <value>Indicates whether a file upload is required as part of each submission. 0 for no, 1 for optional, 2 for required.</value>
        [DataMember(Name = "submissiontypefile", EmitDefaultValue = false)]
        public int Submissiontypefile { get; set; }

        /// <summary>
        /// Indicates whether text is required as part of each submission. 0 for no, 1 for optional, 2 for required.
        /// </summary>
        /// <value>Indicates whether text is required as part of each submission. 0 for no, 1 for optional, 2 for required.</value>
        [DataMember(Name = "submissiontypetext", EmitDefaultValue = false)]
        public int Submissiontypetext { get; set; }

        /// <summary>
        /// The timestamp when the module was modified.
        /// </summary>
        /// <value>The timestamp when the module was modified.</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// Optional feature: students practise evaluating on example submissions from teacher.
        /// </summary>
        /// <value>Optional feature: students practise evaluating on example submissions from teacher.</value>
        [DataMember(Name = "useexamples", EmitDefaultValue = true)]
        public bool Useexamples { get; set; }

        /// <summary>
        /// Optional feature: students perform peer assessment of others&#39; work.
        /// </summary>
        /// <value>Optional feature: students perform peer assessment of others&#39; work.</value>
        [DataMember(Name = "usepeerassessment", EmitDefaultValue = true)]
        public bool Usepeerassessment { get; set; }

        /// <summary>
        /// Optional feature: students perform self assessment of their own work.
        /// </summary>
        /// <value>Optional feature: students perform self assessment of their own work.</value>
        [DataMember(Name = "useselfassessment", EmitDefaultValue = true)]
        public bool Useselfassessment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner {\n");
            sb.Append("  Assessmentend: ").Append(Assessmentend).Append("\n");
            sb.Append("  Assessmentstart: ").Append(Assessmentstart).Append("\n");
            sb.Append("  Conclusion: ").Append(Conclusion).Append("\n");
            sb.Append("  Conclusionfiles: ").Append(Conclusionfiles).Append("\n");
            sb.Append("  Conclusionformat: ").Append(Conclusionformat).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Coursemodule: ").Append(Coursemodule).Append("\n");
            sb.Append("  Evaluation: ").Append(Evaluation).Append("\n");
            sb.Append("  Examplesmode: ").Append(Examplesmode).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Gradedecimals: ").Append(Gradedecimals).Append("\n");
            sb.Append("  Gradinggrade: ").Append(Gradinggrade).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Instructauthors: ").Append(Instructauthors).Append("\n");
            sb.Append("  Instructauthorsfiles: ").Append(Instructauthorsfiles).Append("\n");
            sb.Append("  Instructauthorsformat: ").Append(Instructauthorsformat).Append("\n");
            sb.Append("  Instructreviewers: ").Append(Instructreviewers).Append("\n");
            sb.Append("  Instructreviewersfiles: ").Append(Instructreviewersfiles).Append("\n");
            sb.Append("  Instructreviewersformat: ").Append(Instructreviewersformat).Append("\n");
            sb.Append("  Intro: ").Append(Intro).Append("\n");
            sb.Append("  Introfiles: ").Append(Introfiles).Append("\n");
            sb.Append("  Introformat: ").Append(Introformat).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Latesubmissions: ").Append(Latesubmissions).Append("\n");
            sb.Append("  Maxbytes: ").Append(Maxbytes).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nattachments: ").Append(Nattachments).Append("\n");
            sb.Append("  Overallfeedbackfiles: ").Append(Overallfeedbackfiles).Append("\n");
            sb.Append("  Overallfeedbackfiletypes: ").Append(Overallfeedbackfiletypes).Append("\n");
            sb.Append("  Overallfeedbackmaxbytes: ").Append(Overallfeedbackmaxbytes).Append("\n");
            sb.Append("  Overallfeedbackmode: ").Append(Overallfeedbackmode).Append("\n");
            sb.Append("  Phase: ").Append(Phase).Append("\n");
            sb.Append("  Phaseswitchassessment: ").Append(Phaseswitchassessment).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  Submissionend: ").Append(Submissionend).Append("\n");
            sb.Append("  Submissionfiletypes: ").Append(Submissionfiletypes).Append("\n");
            sb.Append("  Submissionstart: ").Append(Submissionstart).Append("\n");
            sb.Append("  Submissiontypefile: ").Append(Submissiontypefile).Append("\n");
            sb.Append("  Submissiontypetext: ").Append(Submissiontypetext).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Useexamples: ").Append(Useexamples).Append("\n");
            sb.Append("  Usepeerassessment: ").Append(Usepeerassessment).Append("\n");
            sb.Append("  Useselfassessment: ").Append(Useselfassessment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
