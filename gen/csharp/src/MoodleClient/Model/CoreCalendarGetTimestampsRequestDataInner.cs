/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreCalendarGetTimestampsRequestDataInner
    /// </summary>
    [DataContract(Name = "core_calendar_get_timestamps_request_data_inner")]
    public partial class CoreCalendarGetTimestampsRequestDataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCalendarGetTimestampsRequestDataInner" /> class.
        /// </summary>
        /// <param name="day">day (default to null).</param>
        /// <param name="hour">hour (default to null).</param>
        /// <param name="key">key (default to &quot;null&quot;).</param>
        /// <param name="minute">minute (default to null).</param>
        /// <param name="month">month (default to null).</param>
        /// <param name="year">year (default to null).</param>
        public CoreCalendarGetTimestampsRequestDataInner(int day = null, int hour = null, string key = @"null", int minute = null, int month = null, int year = null)
        {
            this.Day = day;
            this.Hour = hour;
            // use default value if no "key" provided
            this.Key = key ?? @"null";
            this.Minute = minute;
            this.Month = month;
            this.Year = year;
        }

        /// <summary>
        /// day
        /// </summary>
        /// <value>day</value>
        [DataMember(Name = "day", EmitDefaultValue = false)]
        public int Day { get; set; }

        /// <summary>
        /// hour
        /// </summary>
        /// <value>hour</value>
        [DataMember(Name = "hour", EmitDefaultValue = false)]
        public int Hour { get; set; }

        /// <summary>
        /// key
        /// </summary>
        /// <value>key</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// minute
        /// </summary>
        /// <value>minute</value>
        [DataMember(Name = "minute", EmitDefaultValue = false)]
        public int Minute { get; set; }

        /// <summary>
        /// month
        /// </summary>
        /// <value>month</value>
        [DataMember(Name = "month", EmitDefaultValue = false)]
        public int Month { get; set; }

        /// <summary>
        /// year
        /// </summary>
        /// <value>year</value>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCalendarGetTimestampsRequestDataInner {\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Hour: ").Append(Hour).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Minute: ").Append(Minute).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
