/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModAssignSubmitGradingFormRequest
    /// </summary>
    [DataContract(Name = "mod_assign_submit_grading_form_request")]
    public partial class ModAssignSubmitGradingFormRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignSubmitGradingFormRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModAssignSubmitGradingFormRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignSubmitGradingFormRequest" /> class.
        /// </summary>
        /// <param name="assignmentid">The assignment id to operate on (required).</param>
        /// <param name="jsonformdata">The data from the grading form, encoded as a json array (required) (default to &quot;null&quot;).</param>
        /// <param name="userid">The user id the submission belongs to (required) (default to null).</param>
        public ModAssignSubmitGradingFormRequest(int assignmentid = default(int), string jsonformdata = @"null", int userid = null)
        {
            this.Assignmentid = assignmentid;
            // to ensure "jsonformdata" is required (not null)
            if (jsonformdata == null)
            {
                throw new ArgumentNullException("jsonformdata is a required property for ModAssignSubmitGradingFormRequest and cannot be null");
            }
            this.Jsonformdata = jsonformdata;
            this.Userid = userid;
        }

        /// <summary>
        /// The assignment id to operate on
        /// </summary>
        /// <value>The assignment id to operate on</value>
        [DataMember(Name = "assignmentid", IsRequired = true, EmitDefaultValue = true)]
        public int Assignmentid { get; set; }

        /// <summary>
        /// The data from the grading form, encoded as a json array
        /// </summary>
        /// <value>The data from the grading form, encoded as a json array</value>
        [DataMember(Name = "jsonformdata", IsRequired = true, EmitDefaultValue = true)]
        public string Jsonformdata { get; set; }

        /// <summary>
        /// The user id the submission belongs to
        /// </summary>
        /// <value>The user id the submission belongs to</value>
        [DataMember(Name = "userid", IsRequired = true, EmitDefaultValue = true)]
        public int Userid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModAssignSubmitGradingFormRequest {\n");
            sb.Append("  Assignmentid: ").Append(Assignmentid).Append("\n");
            sb.Append("  Jsonformdata: ").Append(Jsonformdata).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
