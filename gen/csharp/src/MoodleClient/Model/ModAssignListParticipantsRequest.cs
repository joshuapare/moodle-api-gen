/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModAssignListParticipantsRequest
    /// </summary>
    [DataContract(Name = "mod_assign_list_participants_request")]
    public partial class ModAssignListParticipantsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignListParticipantsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModAssignListParticipantsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignListParticipantsRequest" /> class.
        /// </summary>
        /// <param name="assignid">assign instance id (required).</param>
        /// <param name="filter">search string to filter the results (required) (default to &quot;null&quot;).</param>
        /// <param name="groupid">group id (required).</param>
        /// <param name="includeenrolments">Do return courses where the user is enrolled (default to true).</param>
        /// <param name="limit">maximum number of records to return (default to 0).</param>
        /// <param name="onlyids">Do not return all user fields (default to false).</param>
        /// <param name="skip">number of records to skip (default to 0).</param>
        /// <param name="tablesort">Apply current user table sorting preferences. (default to false).</param>
        public ModAssignListParticipantsRequest(int assignid = default(int), string filter = @"null", int groupid = default(int), bool includeenrolments = true, int limit = 0, bool onlyids = false, int skip = 0, bool tablesort = false)
        {
            this.Assignid = assignid;
            // to ensure "filter" is required (not null)
            if (filter == null)
            {
                throw new ArgumentNullException("filter is a required property for ModAssignListParticipantsRequest and cannot be null");
            }
            this.Filter = filter;
            this.Groupid = groupid;
            this.Includeenrolments = includeenrolments;
            this.Limit = limit;
            this.Onlyids = onlyids;
            this.Skip = skip;
            this.Tablesort = tablesort;
        }

        /// <summary>
        /// assign instance id
        /// </summary>
        /// <value>assign instance id</value>
        [DataMember(Name = "assignid", IsRequired = true, EmitDefaultValue = true)]
        public int Assignid { get; set; }

        /// <summary>
        /// search string to filter the results
        /// </summary>
        /// <value>search string to filter the results</value>
        [DataMember(Name = "filter", IsRequired = true, EmitDefaultValue = true)]
        public string Filter { get; set; }

        /// <summary>
        /// group id
        /// </summary>
        /// <value>group id</value>
        [DataMember(Name = "groupid", IsRequired = true, EmitDefaultValue = true)]
        public int Groupid { get; set; }

        /// <summary>
        /// Do return courses where the user is enrolled
        /// </summary>
        /// <value>Do return courses where the user is enrolled</value>
        [DataMember(Name = "includeenrolments", EmitDefaultValue = true)]
        public bool Includeenrolments { get; set; }

        /// <summary>
        /// maximum number of records to return
        /// </summary>
        /// <value>maximum number of records to return</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Do not return all user fields
        /// </summary>
        /// <value>Do not return all user fields</value>
        [DataMember(Name = "onlyids", EmitDefaultValue = true)]
        public bool Onlyids { get; set; }

        /// <summary>
        /// number of records to skip
        /// </summary>
        /// <value>number of records to skip</value>
        [DataMember(Name = "skip", EmitDefaultValue = false)]
        public int Skip { get; set; }

        /// <summary>
        /// Apply current user table sorting preferences.
        /// </summary>
        /// <value>Apply current user table sorting preferences.</value>
        [DataMember(Name = "tablesort", EmitDefaultValue = true)]
        public bool Tablesort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModAssignListParticipantsRequest {\n");
            sb.Append("  Assignid: ").Append(Assignid).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Groupid: ").Append(Groupid).Append("\n");
            sb.Append("  Includeenrolments: ").Append(Includeenrolments).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Onlyids: ").Append(Onlyids).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Tablesort: ").Append(Tablesort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
