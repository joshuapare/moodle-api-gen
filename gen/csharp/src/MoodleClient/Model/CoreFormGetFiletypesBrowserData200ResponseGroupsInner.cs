/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreFormGetFiletypesBrowserData200ResponseGroupsInner
    /// </summary>
    [DataContract(Name = "core_form_get_filetypes_browser_data_200_response_groups_inner")]
    public partial class CoreFormGetFiletypesBrowserData200ResponseGroupsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreFormGetFiletypesBrowserData200ResponseGroupsInner" /> class.
        /// </summary>
        /// <param name="expanded">Should the group start as expanded or collapsed (default to null).</param>
        /// <param name="ext">The list of file extensions associated with the group (default to &quot;null&quot;).</param>
        /// <param name="key">The file type group identifier (default to &quot;null&quot;).</param>
        /// <param name="name">The file type group name (default to &quot;null&quot;).</param>
        /// <param name="selectable">Can it be marked as selected (default to null).</param>
        /// <param name="selected">Should it be marked as selected (default to null).</param>
        /// <param name="types">types.</param>
        public CoreFormGetFiletypesBrowserData200ResponseGroupsInner(bool expanded = null, string ext = @"null", string key = @"null", string name = @"null", bool selectable = null, bool selected = null, List<CoreFormGetFiletypesBrowserData200ResponseGroupsInnerTypesInner> types = default(List<CoreFormGetFiletypesBrowserData200ResponseGroupsInnerTypesInner>))
        {
            this.Expanded = expanded;
            // use default value if no "ext" provided
            this.Ext = ext ?? @"null";
            // use default value if no "key" provided
            this.Key = key ?? @"null";
            // use default value if no "name" provided
            this.Name = name ?? @"null";
            this.Selectable = selectable;
            this.Selected = selected;
            this.Types = types;
        }

        /// <summary>
        /// Should the group start as expanded or collapsed
        /// </summary>
        /// <value>Should the group start as expanded or collapsed</value>
        [DataMember(Name = "expanded", EmitDefaultValue = true)]
        public bool Expanded { get; set; }

        /// <summary>
        /// The list of file extensions associated with the group
        /// </summary>
        /// <value>The list of file extensions associated with the group</value>
        [DataMember(Name = "ext", EmitDefaultValue = false)]
        public string Ext { get; set; }

        /// <summary>
        /// The file type group identifier
        /// </summary>
        /// <value>The file type group identifier</value>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; }

        /// <summary>
        /// The file type group name
        /// </summary>
        /// <value>The file type group name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Can it be marked as selected
        /// </summary>
        /// <value>Can it be marked as selected</value>
        [DataMember(Name = "selectable", EmitDefaultValue = true)]
        public bool Selectable { get; set; }

        /// <summary>
        /// Should it be marked as selected
        /// </summary>
        /// <value>Should it be marked as selected</value>
        [DataMember(Name = "selected", EmitDefaultValue = true)]
        public bool Selected { get; set; }

        /// <summary>
        /// Gets or Sets Types
        /// </summary>
        [DataMember(Name = "types", EmitDefaultValue = false)]
        public List<CoreFormGetFiletypesBrowserData200ResponseGroupsInnerTypesInner> Types { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreFormGetFiletypesBrowserData200ResponseGroupsInner {\n");
            sb.Append("  Expanded: ").Append(Expanded).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Selectable: ").Append(Selectable).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
