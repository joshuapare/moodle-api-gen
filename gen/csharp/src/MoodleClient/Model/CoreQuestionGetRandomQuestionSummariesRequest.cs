/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreQuestionGetRandomQuestionSummariesRequest
    /// </summary>
    [DataContract(Name = "core_question_get_random_question_summaries_request")]
    public partial class CoreQuestionGetRandomQuestionSummariesRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreQuestionGetRandomQuestionSummariesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreQuestionGetRandomQuestionSummariesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreQuestionGetRandomQuestionSummariesRequest" /> class.
        /// </summary>
        /// <param name="categoryid">Category id to find random questions (required) (default to null).</param>
        /// <param name="contextid">Context id that the questions will be rendered in (used for exporting) (required) (default to null).</param>
        /// <param name="includesubcategories">Include the subcategories in the search (required) (default to null).</param>
        /// <param name="limit">Maximum number of results to return (default to 0).</param>
        /// <param name="offset">Number of items to skip from the begging of the result set (default to 0).</param>
        /// <param name="tagids">tagids (required).</param>
        public CoreQuestionGetRandomQuestionSummariesRequest(int categoryid = null, int contextid = null, bool includesubcategories = null, int limit = 0, int offset = 0, List<Object> tagids = default(List<Object>))
        {
            this.Categoryid = categoryid;
            this.Contextid = contextid;
            this.Includesubcategories = includesubcategories;
            // to ensure "tagids" is required (not null)
            if (tagids == null)
            {
                throw new ArgumentNullException("tagids is a required property for CoreQuestionGetRandomQuestionSummariesRequest and cannot be null");
            }
            this.Tagids = tagids;
            this.Limit = limit;
            this.Offset = offset;
        }

        /// <summary>
        /// Category id to find random questions
        /// </summary>
        /// <value>Category id to find random questions</value>
        [DataMember(Name = "categoryid", IsRequired = true, EmitDefaultValue = true)]
        public int Categoryid { get; set; }

        /// <summary>
        /// Context id that the questions will be rendered in (used for exporting)
        /// </summary>
        /// <value>Context id that the questions will be rendered in (used for exporting)</value>
        [DataMember(Name = "contextid", IsRequired = true, EmitDefaultValue = true)]
        public int Contextid { get; set; }

        /// <summary>
        /// Include the subcategories in the search
        /// </summary>
        /// <value>Include the subcategories in the search</value>
        [DataMember(Name = "includesubcategories", IsRequired = true, EmitDefaultValue = true)]
        public bool Includesubcategories { get; set; }

        /// <summary>
        /// Maximum number of results to return
        /// </summary>
        /// <value>Maximum number of results to return</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Number of items to skip from the begging of the result set
        /// </summary>
        /// <value>Number of items to skip from the begging of the result set</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public int Offset { get; set; }

        /// <summary>
        /// Gets or Sets Tagids
        /// </summary>
        [DataMember(Name = "tagids", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Tagids { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreQuestionGetRandomQuestionSummariesRequest {\n");
            sb.Append("  Categoryid: ").Append(Categoryid).Append("\n");
            sb.Append("  Contextid: ").Append(Contextid).Append("\n");
            sb.Append("  Includesubcategories: ").Append(Includesubcategories).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Tagids: ").Append(Tagids).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
