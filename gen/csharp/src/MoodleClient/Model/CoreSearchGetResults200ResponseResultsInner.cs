/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreSearchGetResults200ResponseResultsInner
    /// </summary>
    [DataContract(Name = "core_search_get_results_200_response_results_inner")]
    public partial class CoreSearchGetResults200ResponseResultsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreSearchGetResults200ResponseResultsInner" /> class.
        /// </summary>
        /// <param name="areaname">search area name (default to &quot;null&quot;).</param>
        /// <param name="componentname">component name (default to &quot;null&quot;).</param>
        /// <param name="content">result contents (default to &quot;&quot;).</param>
        /// <param name="contextid">result context id (default to null).</param>
        /// <param name="contexturl">result context url (default to &quot;null&quot;).</param>
        /// <param name="coursefullname">result course fullname (default to &quot;null&quot;).</param>
        /// <param name="courseurl">result course url (default to &quot;null&quot;).</param>
        /// <param name="description1">extra result contents, depends on the search area (default to &quot;&quot;).</param>
        /// <param name="description2">extra result contents, depends on the search area (default to &quot;&quot;).</param>
        /// <param name="docurl">result url (default to &quot;null&quot;).</param>
        /// <param name="filename">result file name if present (default to &quot;null&quot;).</param>
        /// <param name="filenames">result file names if present (default to &quot;null&quot;).</param>
        /// <param name="iconurl">icon url (default to &quot;&quot;).</param>
        /// <param name="itemid">unique id in the search area scope (default to null).</param>
        /// <param name="multiplefiles">whether multiple files are returned or not (default to null).</param>
        /// <param name="textformat">text fields format, it is the same for all of them (default to null).</param>
        /// <param name="timemodified">result modified time (default to null).</param>
        /// <param name="title">result title (default to &quot;null&quot;).</param>
        /// <param name="userfullname">user fullname (default to &quot;null&quot;).</param>
        /// <param name="userid">user id (default to null).</param>
        /// <param name="userurl">user url (default to &quot;null&quot;).</param>
        public CoreSearchGetResults200ResponseResultsInner(string areaname = @"null", string componentname = @"null", string content = @"", int contextid = null, string contexturl = @"null", string coursefullname = @"null", string courseurl = @"null", string description1 = @"", string description2 = @"", string docurl = @"null", string filename = @"null", string filenames = @"null", string iconurl = @"", int itemid = null, int multiplefiles = null, int textformat = null, int timemodified = null, string title = @"null", string userfullname = @"null", int userid = null, string userurl = @"null")
        {
            // use default value if no "areaname" provided
            this.Areaname = areaname ?? @"null";
            // use default value if no "componentname" provided
            this.Componentname = componentname ?? @"null";
            // use default value if no "content" provided
            this.Content = content ?? @"";
            this.Contextid = contextid;
            // use default value if no "contexturl" provided
            this.Contexturl = contexturl ?? @"null";
            // use default value if no "coursefullname" provided
            this.Coursefullname = coursefullname ?? @"null";
            // use default value if no "courseurl" provided
            this.Courseurl = courseurl ?? @"null";
            // use default value if no "description1" provided
            this.Description1 = description1 ?? @"";
            // use default value if no "description2" provided
            this.Description2 = description2 ?? @"";
            // use default value if no "docurl" provided
            this.Docurl = docurl ?? @"null";
            // use default value if no "filename" provided
            this.Filename = filename ?? @"null";
            // use default value if no "filenames" provided
            this.Filenames = filenames ?? @"null";
            // use default value if no "iconurl" provided
            this.Iconurl = iconurl ?? @"";
            this.Itemid = itemid;
            this.Multiplefiles = multiplefiles;
            this.Textformat = textformat;
            this.Timemodified = timemodified;
            // use default value if no "title" provided
            this.Title = title ?? @"null";
            // use default value if no "userfullname" provided
            this.Userfullname = userfullname ?? @"null";
            this.Userid = userid;
            // use default value if no "userurl" provided
            this.Userurl = userurl ?? @"null";
        }

        /// <summary>
        /// search area name
        /// </summary>
        /// <value>search area name</value>
        [DataMember(Name = "areaname", EmitDefaultValue = false)]
        public string Areaname { get; set; }

        /// <summary>
        /// component name
        /// </summary>
        /// <value>component name</value>
        [DataMember(Name = "componentname", EmitDefaultValue = false)]
        public string Componentname { get; set; }

        /// <summary>
        /// result contents
        /// </summary>
        /// <value>result contents</value>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// result context id
        /// </summary>
        /// <value>result context id</value>
        [DataMember(Name = "contextid", EmitDefaultValue = false)]
        public int Contextid { get; set; }

        /// <summary>
        /// result context url
        /// </summary>
        /// <value>result context url</value>
        [DataMember(Name = "contexturl", EmitDefaultValue = false)]
        public string Contexturl { get; set; }

        /// <summary>
        /// result course fullname
        /// </summary>
        /// <value>result course fullname</value>
        [DataMember(Name = "coursefullname", EmitDefaultValue = false)]
        public string Coursefullname { get; set; }

        /// <summary>
        /// result course url
        /// </summary>
        /// <value>result course url</value>
        [DataMember(Name = "courseurl", EmitDefaultValue = false)]
        public string Courseurl { get; set; }

        /// <summary>
        /// extra result contents, depends on the search area
        /// </summary>
        /// <value>extra result contents, depends on the search area</value>
        [DataMember(Name = "description1", EmitDefaultValue = false)]
        public string Description1 { get; set; }

        /// <summary>
        /// extra result contents, depends on the search area
        /// </summary>
        /// <value>extra result contents, depends on the search area</value>
        [DataMember(Name = "description2", EmitDefaultValue = false)]
        public string Description2 { get; set; }

        /// <summary>
        /// result url
        /// </summary>
        /// <value>result url</value>
        [DataMember(Name = "docurl", EmitDefaultValue = false)]
        public string Docurl { get; set; }

        /// <summary>
        /// result file name if present
        /// </summary>
        /// <value>result file name if present</value>
        [DataMember(Name = "filename", EmitDefaultValue = false)]
        public string Filename { get; set; }

        /// <summary>
        /// result file names if present
        /// </summary>
        /// <value>result file names if present</value>
        [DataMember(Name = "filenames", EmitDefaultValue = false)]
        public string Filenames { get; set; }

        /// <summary>
        /// icon url
        /// </summary>
        /// <value>icon url</value>
        [DataMember(Name = "iconurl", EmitDefaultValue = false)]
        public string Iconurl { get; set; }

        /// <summary>
        /// unique id in the search area scope
        /// </summary>
        /// <value>unique id in the search area scope</value>
        [DataMember(Name = "itemid", EmitDefaultValue = false)]
        public int Itemid { get; set; }

        /// <summary>
        /// whether multiple files are returned or not
        /// </summary>
        /// <value>whether multiple files are returned or not</value>
        [DataMember(Name = "multiplefiles", EmitDefaultValue = false)]
        public int Multiplefiles { get; set; }

        /// <summary>
        /// text fields format, it is the same for all of them
        /// </summary>
        /// <value>text fields format, it is the same for all of them</value>
        [DataMember(Name = "textformat", EmitDefaultValue = false)]
        public int Textformat { get; set; }

        /// <summary>
        /// result modified time
        /// </summary>
        /// <value>result modified time</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// result title
        /// </summary>
        /// <value>result title</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// user fullname
        /// </summary>
        /// <value>user fullname</value>
        [DataMember(Name = "userfullname", EmitDefaultValue = false)]
        public string Userfullname { get; set; }

        /// <summary>
        /// user id
        /// </summary>
        /// <value>user id</value>
        [DataMember(Name = "userid", EmitDefaultValue = false)]
        public int Userid { get; set; }

        /// <summary>
        /// user url
        /// </summary>
        /// <value>user url</value>
        [DataMember(Name = "userurl", EmitDefaultValue = false)]
        public string Userurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreSearchGetResults200ResponseResultsInner {\n");
            sb.Append("  Areaname: ").Append(Areaname).Append("\n");
            sb.Append("  Componentname: ").Append(Componentname).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Contextid: ").Append(Contextid).Append("\n");
            sb.Append("  Contexturl: ").Append(Contexturl).Append("\n");
            sb.Append("  Coursefullname: ").Append(Coursefullname).Append("\n");
            sb.Append("  Courseurl: ").Append(Courseurl).Append("\n");
            sb.Append("  Description1: ").Append(Description1).Append("\n");
            sb.Append("  Description2: ").Append(Description2).Append("\n");
            sb.Append("  Docurl: ").Append(Docurl).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Filenames: ").Append(Filenames).Append("\n");
            sb.Append("  Iconurl: ").Append(Iconurl).Append("\n");
            sb.Append("  Itemid: ").Append(Itemid).Append("\n");
            sb.Append("  Multiplefiles: ").Append(Multiplefiles).Append("\n");
            sb.Append("  Textformat: ").Append(Textformat).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Userfullname: ").Append(Userfullname).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("  Userurl: ").Append(Userurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
