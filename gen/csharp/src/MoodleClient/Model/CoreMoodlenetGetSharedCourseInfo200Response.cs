/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreMoodlenetGetSharedCourseInfo200Response
    /// </summary>
    [DataContract(Name = "core_moodlenet_get_shared_course_info_200_response")]
    public partial class CoreMoodlenetGetSharedCourseInfo200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreMoodlenetGetSharedCourseInfo200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreMoodlenetGetSharedCourseInfo200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreMoodlenetGetSharedCourseInfo200Response" /> class.
        /// </summary>
        /// <param name="issuerid">MoodleNet issuer id (required).</param>
        /// <param name="name">Course short name (required) (default to &quot;null&quot;).</param>
        /// <param name="server">MoodleNet server (required).</param>
        /// <param name="status">status: true if success (required).</param>
        /// <param name="supportpageurl">Support page URL (required).</param>
        /// <param name="type">Course type (required) (default to &quot;null&quot;).</param>
        /// <param name="warnings">warnings.</param>
        public CoreMoodlenetGetSharedCourseInfo200Response(int issuerid = default(int), string name = @"null", string server = default(string), bool status = default(bool), string supportpageurl = default(string), string type = @"null", List<AuthEmailSignupUser200ResponseWarningsInner> warnings = default(List<AuthEmailSignupUser200ResponseWarningsInner>))
        {
            this.Issuerid = issuerid;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CoreMoodlenetGetSharedCourseInfo200Response and cannot be null");
            }
            this.Name = name;
            // to ensure "server" is required (not null)
            if (server == null)
            {
                throw new ArgumentNullException("server is a required property for CoreMoodlenetGetSharedCourseInfo200Response and cannot be null");
            }
            this.Server = server;
            this.Status = status;
            // to ensure "supportpageurl" is required (not null)
            if (supportpageurl == null)
            {
                throw new ArgumentNullException("supportpageurl is a required property for CoreMoodlenetGetSharedCourseInfo200Response and cannot be null");
            }
            this.Supportpageurl = supportpageurl;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for CoreMoodlenetGetSharedCourseInfo200Response and cannot be null");
            }
            this.Type = type;
            this.Warnings = warnings;
        }

        /// <summary>
        /// MoodleNet issuer id
        /// </summary>
        /// <value>MoodleNet issuer id</value>
        [DataMember(Name = "issuerid", IsRequired = true, EmitDefaultValue = true)]
        public int Issuerid { get; set; }

        /// <summary>
        /// Course short name
        /// </summary>
        /// <value>Course short name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// MoodleNet server
        /// </summary>
        /// <value>MoodleNet server</value>
        [DataMember(Name = "server", IsRequired = true, EmitDefaultValue = true)]
        public string Server { get; set; }

        /// <summary>
        /// status: true if success
        /// </summary>
        /// <value>status: true if success</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public bool Status { get; set; }

        /// <summary>
        /// Support page URL
        /// </summary>
        /// <value>Support page URL</value>
        [DataMember(Name = "supportpageurl", IsRequired = true, EmitDefaultValue = true)]
        public string Supportpageurl { get; set; }

        /// <summary>
        /// Course type
        /// </summary>
        /// <value>Course type</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<AuthEmailSignupUser200ResponseWarningsInner> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreMoodlenetGetSharedCourseInfo200Response {\n");
            sb.Append("  Issuerid: ").Append(Issuerid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Supportpageurl: ").Append(Supportpageurl).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
