/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreQuestionUpdateFlagRequest
    /// </summary>
    [DataContract(Name = "core_question_update_flag_request")]
    public partial class CoreQuestionUpdateFlagRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreQuestionUpdateFlagRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreQuestionUpdateFlagRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreQuestionUpdateFlagRequest" /> class.
        /// </summary>
        /// <param name="checksum">computed checksum with the last three arguments and                              the users username (required) (default to &quot;null&quot;).</param>
        /// <param name="newstate">the new state of the flag. true &#x3D; flagged (required) (default to null).</param>
        /// <param name="qaid">the question_attempt id (required) (default to null).</param>
        /// <param name="qubaid">the question usage id. (required) (default to null).</param>
        /// <param name="questionid">the question id (required) (default to null).</param>
        /// <param name="slot">the slot number within the usage (required) (default to null).</param>
        public CoreQuestionUpdateFlagRequest(string checksum = @"null", bool newstate = null, int qaid = null, int qubaid = null, int questionid = null, int slot = null)
        {
            // to ensure "checksum" is required (not null)
            if (checksum == null)
            {
                throw new ArgumentNullException("checksum is a required property for CoreQuestionUpdateFlagRequest and cannot be null");
            }
            this.Checksum = checksum;
            this.Newstate = newstate;
            this.Qaid = qaid;
            this.Qubaid = qubaid;
            this.Questionid = questionid;
            this.Slot = slot;
        }

        /// <summary>
        /// computed checksum with the last three arguments and                              the users username
        /// </summary>
        /// <value>computed checksum with the last three arguments and                              the users username</value>
        [DataMember(Name = "checksum", IsRequired = true, EmitDefaultValue = true)]
        public string Checksum { get; set; }

        /// <summary>
        /// the new state of the flag. true &#x3D; flagged
        /// </summary>
        /// <value>the new state of the flag. true &#x3D; flagged</value>
        [DataMember(Name = "newstate", IsRequired = true, EmitDefaultValue = true)]
        public bool Newstate { get; set; }

        /// <summary>
        /// the question_attempt id
        /// </summary>
        /// <value>the question_attempt id</value>
        [DataMember(Name = "qaid", IsRequired = true, EmitDefaultValue = true)]
        public int Qaid { get; set; }

        /// <summary>
        /// the question usage id.
        /// </summary>
        /// <value>the question usage id.</value>
        [DataMember(Name = "qubaid", IsRequired = true, EmitDefaultValue = true)]
        public int Qubaid { get; set; }

        /// <summary>
        /// the question id
        /// </summary>
        /// <value>the question id</value>
        [DataMember(Name = "questionid", IsRequired = true, EmitDefaultValue = true)]
        public int Questionid { get; set; }

        /// <summary>
        /// the slot number within the usage
        /// </summary>
        /// <value>the slot number within the usage</value>
        [DataMember(Name = "slot", IsRequired = true, EmitDefaultValue = true)]
        public int Slot { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreQuestionUpdateFlagRequest {\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("  Newstate: ").Append(Newstate).Append("\n");
            sb.Append("  Qaid: ").Append(Qaid).Append("\n");
            sb.Append("  Qubaid: ").Append(Qubaid).Append("\n");
            sb.Append("  Questionid: ").Append(Questionid).Append("\n");
            sb.Append("  Slot: ").Append(Slot).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
