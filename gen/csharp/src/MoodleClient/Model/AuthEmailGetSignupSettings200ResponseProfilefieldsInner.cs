/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// AuthEmailGetSignupSettings200ResponseProfilefieldsInner
    /// </summary>
    [DataContract(Name = "auth_email_get_signup_settings_200_response_profilefields_inner")]
    public partial class AuthEmailGetSignupSettings200ResponseProfilefieldsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEmailGetSignupSettings200ResponseProfilefieldsInner" /> class.
        /// </summary>
        /// <param name="categoryid">Profield field category id (default to null).</param>
        /// <param name="categoryname">Profield field category name (default to &quot;null&quot;).</param>
        /// <param name="datatype">Profield field datatype (default to &quot;null&quot;).</param>
        /// <param name="defaultdata">Profield field default data (default to &quot;null&quot;).</param>
        /// <param name="defaultdataformat">defaultdata format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to null).</param>
        /// <param name="description">Profield field description (default to &quot;null&quot;).</param>
        /// <param name="descriptionformat">description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to null).</param>
        /// <param name="forceunique">Profield field unique (default to null).</param>
        /// <param name="id">Profile field id (default to null).</param>
        /// <param name="locked">Profield field locked (default to null).</param>
        /// <param name="name">Profield field name (default to &quot;null&quot;).</param>
        /// <param name="param1">Profield field settings (default to &quot;null&quot;).</param>
        /// <param name="param2">Profield field settings.</param>
        /// <param name="param3">Profield field settings.</param>
        /// <param name="param4">Profield field settings.</param>
        /// <param name="param5">Profield field settings.</param>
        /// <param name="required">Profield field required (default to null).</param>
        /// <param name="shortname">Profile field shortname (default to &quot;null&quot;).</param>
        /// <param name="signup">Profield field in signup form (default to null).</param>
        /// <param name="sortorder">Profield field sort order (default to null).</param>
        /// <param name="visible">Profield field visible (default to null).</param>
        public AuthEmailGetSignupSettings200ResponseProfilefieldsInner(int categoryid = null, string categoryname = @"null", string datatype = @"null", string defaultdata = @"null", int defaultdataformat = null, string description = @"null", int descriptionformat = null, int forceunique = null, int id = null, int locked = null, string name = @"null", string param1 = @"null", string param2 = default(string), string param3 = default(string), string param4 = default(string), string param5 = default(string), int required = null, string shortname = @"null", int signup = null, int sortorder = null, int visible = null)
        {
            this.Categoryid = categoryid;
            // use default value if no "categoryname" provided
            this.Categoryname = categoryname ?? @"null";
            // use default value if no "datatype" provided
            this.Datatype = datatype ?? @"null";
            // use default value if no "defaultdata" provided
            this.Defaultdata = defaultdata ?? @"null";
            this.Defaultdataformat = defaultdataformat;
            // use default value if no "description" provided
            this.Description = description ?? @"null";
            this.Descriptionformat = descriptionformat;
            this.Forceunique = forceunique;
            this.Id = id;
            this.Locked = locked;
            // use default value if no "name" provided
            this.Name = name ?? @"null";
            // use default value if no "param1" provided
            this.Param1 = param1 ?? @"null";
            this.Param2 = param2;
            this.Param3 = param3;
            this.Param4 = param4;
            this.Param5 = param5;
            this.Required = required;
            // use default value if no "shortname" provided
            this.Shortname = shortname ?? @"null";
            this.Signup = signup;
            this.Sortorder = sortorder;
            this.Visible = visible;
        }

        /// <summary>
        /// Profield field category id
        /// </summary>
        /// <value>Profield field category id</value>
        [DataMember(Name = "categoryid", EmitDefaultValue = false)]
        public int Categoryid { get; set; }

        /// <summary>
        /// Profield field category name
        /// </summary>
        /// <value>Profield field category name</value>
        [DataMember(Name = "categoryname", EmitDefaultValue = false)]
        public string Categoryname { get; set; }

        /// <summary>
        /// Profield field datatype
        /// </summary>
        /// <value>Profield field datatype</value>
        [DataMember(Name = "datatype", EmitDefaultValue = false)]
        public string Datatype { get; set; }

        /// <summary>
        /// Profield field default data
        /// </summary>
        /// <value>Profield field default data</value>
        [DataMember(Name = "defaultdata", EmitDefaultValue = false)]
        public string Defaultdata { get; set; }

        /// <summary>
        /// defaultdata format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>defaultdata format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "defaultdataformat", EmitDefaultValue = false)]
        public int Defaultdataformat { get; set; }

        /// <summary>
        /// Profield field description
        /// </summary>
        /// <value>Profield field description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>description format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "descriptionformat", EmitDefaultValue = false)]
        public int Descriptionformat { get; set; }

        /// <summary>
        /// Profield field unique
        /// </summary>
        /// <value>Profield field unique</value>
        [DataMember(Name = "forceunique", EmitDefaultValue = false)]
        public int Forceunique { get; set; }

        /// <summary>
        /// Profile field id
        /// </summary>
        /// <value>Profile field id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Profield field locked
        /// </summary>
        /// <value>Profield field locked</value>
        [DataMember(Name = "locked", EmitDefaultValue = false)]
        public int Locked { get; set; }

        /// <summary>
        /// Profield field name
        /// </summary>
        /// <value>Profield field name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Profield field settings
        /// </summary>
        /// <value>Profield field settings</value>
        [DataMember(Name = "param1", EmitDefaultValue = false)]
        public string Param1 { get; set; }

        /// <summary>
        /// Profield field settings
        /// </summary>
        /// <value>Profield field settings</value>
        [DataMember(Name = "param2", EmitDefaultValue = false)]
        public string Param2 { get; set; }

        /// <summary>
        /// Profield field settings
        /// </summary>
        /// <value>Profield field settings</value>
        [DataMember(Name = "param3", EmitDefaultValue = false)]
        public string Param3 { get; set; }

        /// <summary>
        /// Profield field settings
        /// </summary>
        /// <value>Profield field settings</value>
        [DataMember(Name = "param4", EmitDefaultValue = false)]
        public string Param4 { get; set; }

        /// <summary>
        /// Profield field settings
        /// </summary>
        /// <value>Profield field settings</value>
        [DataMember(Name = "param5", EmitDefaultValue = false)]
        public string Param5 { get; set; }

        /// <summary>
        /// Profield field required
        /// </summary>
        /// <value>Profield field required</value>
        [DataMember(Name = "required", EmitDefaultValue = false)]
        public int Required { get; set; }

        /// <summary>
        /// Profile field shortname
        /// </summary>
        /// <value>Profile field shortname</value>
        [DataMember(Name = "shortname", EmitDefaultValue = false)]
        public string Shortname { get; set; }

        /// <summary>
        /// Profield field in signup form
        /// </summary>
        /// <value>Profield field in signup form</value>
        [DataMember(Name = "signup", EmitDefaultValue = false)]
        public int Signup { get; set; }

        /// <summary>
        /// Profield field sort order
        /// </summary>
        /// <value>Profield field sort order</value>
        [DataMember(Name = "sortorder", EmitDefaultValue = false)]
        public int Sortorder { get; set; }

        /// <summary>
        /// Profield field visible
        /// </summary>
        /// <value>Profield field visible</value>
        [DataMember(Name = "visible", EmitDefaultValue = false)]
        public int Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthEmailGetSignupSettings200ResponseProfilefieldsInner {\n");
            sb.Append("  Categoryid: ").Append(Categoryid).Append("\n");
            sb.Append("  Categoryname: ").Append(Categoryname).Append("\n");
            sb.Append("  Datatype: ").Append(Datatype).Append("\n");
            sb.Append("  Defaultdata: ").Append(Defaultdata).Append("\n");
            sb.Append("  Defaultdataformat: ").Append(Defaultdataformat).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Descriptionformat: ").Append(Descriptionformat).Append("\n");
            sb.Append("  Forceunique: ").Append(Forceunique).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Param1: ").Append(Param1).Append("\n");
            sb.Append("  Param2: ").Append(Param2).Append("\n");
            sb.Append("  Param3: ").Append(Param3).Append("\n");
            sb.Append("  Param4: ").Append(Param4).Append("\n");
            sb.Append("  Param5: ").Append(Param5).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Shortname: ").Append(Shortname).Append("\n");
            sb.Append("  Signup: ").Append(Signup).Append("\n");
            sb.Append("  Sortorder: ").Append(Sortorder).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
