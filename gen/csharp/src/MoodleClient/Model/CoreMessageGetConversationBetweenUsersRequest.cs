/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreMessageGetConversationBetweenUsersRequest
    /// </summary>
    [DataContract(Name = "core_message_get_conversation_between_users_request")]
    public partial class CoreMessageGetConversationBetweenUsersRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreMessageGetConversationBetweenUsersRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreMessageGetConversationBetweenUsersRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreMessageGetConversationBetweenUsersRequest" /> class.
        /// </summary>
        /// <param name="includecontactrequests">Include contact requests in the members (required).</param>
        /// <param name="includeprivacyinfo">Include privacy info in the members (required).</param>
        /// <param name="memberlimit">Limit for number of members (default to 0).</param>
        /// <param name="memberoffset">Offset for member list (default to 0).</param>
        /// <param name="messagelimit">Limit for number of messages (default to 100).</param>
        /// <param name="messageoffset">Offset for messages list (default to 0).</param>
        /// <param name="newestmessagesfirst">Order messages by newest first (default to true).</param>
        /// <param name="otheruserid">The other user id (required) (default to null).</param>
        /// <param name="userid">The id of the user who we are viewing conversations for (required).</param>
        public CoreMessageGetConversationBetweenUsersRequest(bool includecontactrequests = default(bool), bool includeprivacyinfo = default(bool), int memberlimit = 0, int memberoffset = 0, int messagelimit = 100, int messageoffset = 0, bool newestmessagesfirst = true, int otheruserid = null, int userid = default(int))
        {
            this.Includecontactrequests = includecontactrequests;
            this.Includeprivacyinfo = includeprivacyinfo;
            this.Otheruserid = otheruserid;
            this.Userid = userid;
            this.Memberlimit = memberlimit;
            this.Memberoffset = memberoffset;
            this.Messagelimit = messagelimit;
            this.Messageoffset = messageoffset;
            this.Newestmessagesfirst = newestmessagesfirst;
        }

        /// <summary>
        /// Include contact requests in the members
        /// </summary>
        /// <value>Include contact requests in the members</value>
        [DataMember(Name = "includecontactrequests", IsRequired = true, EmitDefaultValue = true)]
        public bool Includecontactrequests { get; set; }

        /// <summary>
        /// Include privacy info in the members
        /// </summary>
        /// <value>Include privacy info in the members</value>
        [DataMember(Name = "includeprivacyinfo", IsRequired = true, EmitDefaultValue = true)]
        public bool Includeprivacyinfo { get; set; }

        /// <summary>
        /// Limit for number of members
        /// </summary>
        /// <value>Limit for number of members</value>
        [DataMember(Name = "memberlimit", EmitDefaultValue = false)]
        public int Memberlimit { get; set; }

        /// <summary>
        /// Offset for member list
        /// </summary>
        /// <value>Offset for member list</value>
        [DataMember(Name = "memberoffset", EmitDefaultValue = false)]
        public int Memberoffset { get; set; }

        /// <summary>
        /// Limit for number of messages
        /// </summary>
        /// <value>Limit for number of messages</value>
        [DataMember(Name = "messagelimit", EmitDefaultValue = false)]
        public int Messagelimit { get; set; }

        /// <summary>
        /// Offset for messages list
        /// </summary>
        /// <value>Offset for messages list</value>
        [DataMember(Name = "messageoffset", EmitDefaultValue = false)]
        public int Messageoffset { get; set; }

        /// <summary>
        /// Order messages by newest first
        /// </summary>
        /// <value>Order messages by newest first</value>
        [DataMember(Name = "newestmessagesfirst", EmitDefaultValue = true)]
        public bool Newestmessagesfirst { get; set; }

        /// <summary>
        /// The other user id
        /// </summary>
        /// <value>The other user id</value>
        [DataMember(Name = "otheruserid", IsRequired = true, EmitDefaultValue = true)]
        public int Otheruserid { get; set; }

        /// <summary>
        /// The id of the user who we are viewing conversations for
        /// </summary>
        /// <value>The id of the user who we are viewing conversations for</value>
        [DataMember(Name = "userid", IsRequired = true, EmitDefaultValue = true)]
        public int Userid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreMessageGetConversationBetweenUsersRequest {\n");
            sb.Append("  Includecontactrequests: ").Append(Includecontactrequests).Append("\n");
            sb.Append("  Includeprivacyinfo: ").Append(Includeprivacyinfo).Append("\n");
            sb.Append("  Memberlimit: ").Append(Memberlimit).Append("\n");
            sb.Append("  Memberoffset: ").Append(Memberoffset).Append("\n");
            sb.Append("  Messagelimit: ").Append(Messagelimit).Append("\n");
            sb.Append("  Messageoffset: ").Append(Messageoffset).Append("\n");
            sb.Append("  Newestmessagesfirst: ").Append(Newestmessagesfirst).Append("\n");
            sb.Append("  Otheruserid: ").Append(Otheruserid).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
