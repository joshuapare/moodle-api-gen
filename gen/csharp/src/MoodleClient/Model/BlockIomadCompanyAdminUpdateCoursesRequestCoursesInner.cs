/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// BlockIomadCompanyAdminUpdateCoursesRequestCoursesInner
    /// </summary>
    [DataContract(Name = "block_iomad_company_admin_update_courses_request_courses_inner")]
    public partial class BlockIomadCompanyAdminUpdateCoursesRequestCoursesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockIomadCompanyAdminUpdateCoursesRequestCoursesInner" /> class.
        /// </summary>
        /// <param name="courseid">Course ID (default to 0).</param>
        /// <param name="licensed">Course licensed (default to false).</param>
        /// <param name="notifyperiod">Course warning email notify period (default to 0).</param>
        /// <param name="shared">Course shared value (default to 0).</param>
        /// <param name="validlength">Course training valid for in days (default to 0).</param>
        /// <param name="warncompletion">Course days to warn if not completed in (default to 0).</param>
        /// <param name="warnexpire">Course days to warn before training expires (default to 0).</param>
        public BlockIomadCompanyAdminUpdateCoursesRequestCoursesInner(int courseid = 0, bool licensed = false, int notifyperiod = 0, int shared = 0, int validlength = 0, int warncompletion = 0, int warnexpire = 0)
        {
            this.Courseid = courseid;
            this.Licensed = licensed;
            this.Notifyperiod = notifyperiod;
            this.Shared = shared;
            this.Validlength = validlength;
            this.Warncompletion = warncompletion;
            this.Warnexpire = warnexpire;
        }

        /// <summary>
        /// Course ID
        /// </summary>
        /// <value>Course ID</value>
        [DataMember(Name = "courseid", EmitDefaultValue = false)]
        public int Courseid { get; set; }

        /// <summary>
        /// Course licensed
        /// </summary>
        /// <value>Course licensed</value>
        [DataMember(Name = "licensed", EmitDefaultValue = true)]
        public bool Licensed { get; set; }

        /// <summary>
        /// Course warning email notify period
        /// </summary>
        /// <value>Course warning email notify period</value>
        [DataMember(Name = "notifyperiod", EmitDefaultValue = false)]
        public int Notifyperiod { get; set; }

        /// <summary>
        /// Course shared value
        /// </summary>
        /// <value>Course shared value</value>
        [DataMember(Name = "shared", EmitDefaultValue = false)]
        public int Shared { get; set; }

        /// <summary>
        /// Course training valid for in days
        /// </summary>
        /// <value>Course training valid for in days</value>
        [DataMember(Name = "validlength", EmitDefaultValue = false)]
        public int Validlength { get; set; }

        /// <summary>
        /// Course days to warn if not completed in
        /// </summary>
        /// <value>Course days to warn if not completed in</value>
        [DataMember(Name = "warncompletion", EmitDefaultValue = false)]
        public int Warncompletion { get; set; }

        /// <summary>
        /// Course days to warn before training expires
        /// </summary>
        /// <value>Course days to warn before training expires</value>
        [DataMember(Name = "warnexpire", EmitDefaultValue = false)]
        public int Warnexpire { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BlockIomadCompanyAdminUpdateCoursesRequestCoursesInner {\n");
            sb.Append("  Courseid: ").Append(Courseid).Append("\n");
            sb.Append("  Licensed: ").Append(Licensed).Append("\n");
            sb.Append("  Notifyperiod: ").Append(Notifyperiod).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  Validlength: ").Append(Validlength).Append("\n");
            sb.Append("  Warncompletion: ").Append(Warncompletion).Append("\n");
            sb.Append("  Warnexpire: ").Append(Warnexpire).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
