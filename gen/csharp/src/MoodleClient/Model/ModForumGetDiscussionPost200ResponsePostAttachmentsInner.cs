/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModForumGetDiscussionPost200ResponsePostAttachmentsInner
    /// </summary>
    [DataContract(Name = "mod_forum_get_discussion_post_200_response_post_attachments_inner")]
    public partial class ModForumGetDiscussionPost200ResponsePostAttachmentsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumGetDiscussionPost200ResponsePostAttachmentsInner" /> class.
        /// </summary>
        /// <param name="author">author.</param>
        /// <param name="component">component.</param>
        /// <param name="contextid">contextid.</param>
        /// <param name="filearea">filearea.</param>
        /// <param name="filename">filename.</param>
        /// <param name="filenameshort">filenameshort.</param>
        /// <param name="filepath">filepath.</param>
        /// <param name="filesize">filesize.</param>
        /// <param name="filesizeformatted">filesizeformatted.</param>
        /// <param name="html">html.</param>
        /// <param name="icon">icon.</param>
        /// <param name="isdir">isdir.</param>
        /// <param name="isimage">isimage.</param>
        /// <param name="itemid">itemid.</param>
        /// <param name="license">license.</param>
        /// <param name="timecreated">timecreated.</param>
        /// <param name="timecreatedformatted">timecreatedformatted.</param>
        /// <param name="timemodified">timemodified.</param>
        /// <param name="timemodifiedformatted">timemodifiedformatted.</param>
        /// <param name="url">url.</param>
        /// <param name="urls">urls.</param>
        public ModForumGetDiscussionPost200ResponsePostAttachmentsInner(string author = default(string), string component = default(string), int contextid = default(int), string filearea = default(string), string filename = default(string), string filenameshort = default(string), string filepath = default(string), int filesize = default(int), string filesizeformatted = default(string), ModForumGetDiscussionPost200ResponsePostAttachmentsInnerHtml html = default(ModForumGetDiscussionPost200ResponsePostAttachmentsInnerHtml), string icon = default(string), bool isdir = default(bool), bool isimage = default(bool), int itemid = default(int), string license = default(string), int timecreated = default(int), string timecreatedformatted = default(string), int timemodified = default(int), string timemodifiedformatted = default(string), string url = default(string), ModForumGetDiscussionPost200ResponsePostAttachmentsInnerUrls urls = default(ModForumGetDiscussionPost200ResponsePostAttachmentsInnerUrls))
        {
            this.Author = author;
            this.Component = component;
            this.Contextid = contextid;
            this.Filearea = filearea;
            this.Filename = filename;
            this.Filenameshort = filenameshort;
            this.Filepath = filepath;
            this.Filesize = filesize;
            this.Filesizeformatted = filesizeformatted;
            this.Html = html;
            this.Icon = icon;
            this.Isdir = isdir;
            this.Isimage = isimage;
            this.Itemid = itemid;
            this.License = license;
            this.Timecreated = timecreated;
            this.Timecreatedformatted = timecreatedformatted;
            this.Timemodified = timemodified;
            this.Timemodifiedformatted = timemodifiedformatted;
            this.Url = url;
            this.Urls = urls;
        }

        /// <summary>
        /// author
        /// </summary>
        /// <value>author</value>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public string Author { get; set; }

        /// <summary>
        /// component
        /// </summary>
        /// <value>component</value>
        [DataMember(Name = "component", EmitDefaultValue = false)]
        public string Component { get; set; }

        /// <summary>
        /// contextid
        /// </summary>
        /// <value>contextid</value>
        [DataMember(Name = "contextid", EmitDefaultValue = false)]
        public int Contextid { get; set; }

        /// <summary>
        /// filearea
        /// </summary>
        /// <value>filearea</value>
        [DataMember(Name = "filearea", EmitDefaultValue = false)]
        public string Filearea { get; set; }

        /// <summary>
        /// filename
        /// </summary>
        /// <value>filename</value>
        [DataMember(Name = "filename", EmitDefaultValue = false)]
        public string Filename { get; set; }

        /// <summary>
        /// filenameshort
        /// </summary>
        /// <value>filenameshort</value>
        [DataMember(Name = "filenameshort", EmitDefaultValue = false)]
        public string Filenameshort { get; set; }

        /// <summary>
        /// filepath
        /// </summary>
        /// <value>filepath</value>
        [DataMember(Name = "filepath", EmitDefaultValue = false)]
        public string Filepath { get; set; }

        /// <summary>
        /// filesize
        /// </summary>
        /// <value>filesize</value>
        [DataMember(Name = "filesize", EmitDefaultValue = false)]
        public int Filesize { get; set; }

        /// <summary>
        /// filesizeformatted
        /// </summary>
        /// <value>filesizeformatted</value>
        [DataMember(Name = "filesizeformatted", EmitDefaultValue = false)]
        public string Filesizeformatted { get; set; }

        /// <summary>
        /// Gets or Sets Html
        /// </summary>
        [DataMember(Name = "html", EmitDefaultValue = false)]
        public ModForumGetDiscussionPost200ResponsePostAttachmentsInnerHtml Html { get; set; }

        /// <summary>
        /// icon
        /// </summary>
        /// <value>icon</value>
        [DataMember(Name = "icon", EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// isdir
        /// </summary>
        /// <value>isdir</value>
        [DataMember(Name = "isdir", EmitDefaultValue = true)]
        public bool Isdir { get; set; }

        /// <summary>
        /// isimage
        /// </summary>
        /// <value>isimage</value>
        [DataMember(Name = "isimage", EmitDefaultValue = true)]
        public bool Isimage { get; set; }

        /// <summary>
        /// itemid
        /// </summary>
        /// <value>itemid</value>
        [DataMember(Name = "itemid", EmitDefaultValue = false)]
        public int Itemid { get; set; }

        /// <summary>
        /// license
        /// </summary>
        /// <value>license</value>
        [DataMember(Name = "license", EmitDefaultValue = false)]
        public string License { get; set; }

        /// <summary>
        /// timecreated
        /// </summary>
        /// <value>timecreated</value>
        [DataMember(Name = "timecreated", EmitDefaultValue = false)]
        public int Timecreated { get; set; }

        /// <summary>
        /// timecreatedformatted
        /// </summary>
        /// <value>timecreatedformatted</value>
        [DataMember(Name = "timecreatedformatted", EmitDefaultValue = false)]
        public string Timecreatedformatted { get; set; }

        /// <summary>
        /// timemodified
        /// </summary>
        /// <value>timemodified</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// timemodifiedformatted
        /// </summary>
        /// <value>timemodifiedformatted</value>
        [DataMember(Name = "timemodifiedformatted", EmitDefaultValue = false)]
        public string Timemodifiedformatted { get; set; }

        /// <summary>
        /// url
        /// </summary>
        /// <value>url</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name = "urls", EmitDefaultValue = false)]
        public ModForumGetDiscussionPost200ResponsePostAttachmentsInnerUrls Urls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModForumGetDiscussionPost200ResponsePostAttachmentsInner {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Contextid: ").Append(Contextid).Append("\n");
            sb.Append("  Filearea: ").Append(Filearea).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Filenameshort: ").Append(Filenameshort).Append("\n");
            sb.Append("  Filepath: ").Append(Filepath).Append("\n");
            sb.Append("  Filesize: ").Append(Filesize).Append("\n");
            sb.Append("  Filesizeformatted: ").Append(Filesizeformatted).Append("\n");
            sb.Append("  Html: ").Append(Html).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Isdir: ").Append(Isdir).Append("\n");
            sb.Append("  Isimage: ").Append(Isimage).Append("\n");
            sb.Append("  Itemid: ").Append(Itemid).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timecreatedformatted: ").Append(Timecreatedformatted).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Timemodifiedformatted: ").Append(Timemodifiedformatted).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
