/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ToolUsertoursFetchAndStartTour200ResponseTourconfig
    /// </summary>
    [DataContract(Name = "tool_usertours_fetch_and_start_tour_200_response_tourconfig")]
    public partial class ToolUsertoursFetchAndStartTour200ResponseTourconfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolUsertoursFetchAndStartTour200ResponseTourconfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolUsertoursFetchAndStartTour200ResponseTourconfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolUsertoursFetchAndStartTour200ResponseTourconfig" /> class.
        /// </summary>
        /// <param name="displaystepnumbers">display step number (required) (default to null).</param>
        /// <param name="endtourlabel">Label of the end tour button (required) (default to &quot;null&quot;).</param>
        /// <param name="name">Tour Name (required) (default to &quot;null&quot;).</param>
        /// <param name="steps">steps (required).</param>
        public ToolUsertoursFetchAndStartTour200ResponseTourconfig(bool displaystepnumbers = null, string endtourlabel = @"null", string name = @"null", List<ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner> steps = default(List<ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner>))
        {
            this.Displaystepnumbers = displaystepnumbers;
            // to ensure "endtourlabel" is required (not null)
            if (endtourlabel == null)
            {
                throw new ArgumentNullException("endtourlabel is a required property for ToolUsertoursFetchAndStartTour200ResponseTourconfig and cannot be null");
            }
            this.Endtourlabel = endtourlabel;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ToolUsertoursFetchAndStartTour200ResponseTourconfig and cannot be null");
            }
            this.Name = name;
            // to ensure "steps" is required (not null)
            if (steps == null)
            {
                throw new ArgumentNullException("steps is a required property for ToolUsertoursFetchAndStartTour200ResponseTourconfig and cannot be null");
            }
            this.Steps = steps;
        }

        /// <summary>
        /// display step number
        /// </summary>
        /// <value>display step number</value>
        [DataMember(Name = "displaystepnumbers", IsRequired = true, EmitDefaultValue = true)]
        public bool Displaystepnumbers { get; set; }

        /// <summary>
        /// Label of the end tour button
        /// </summary>
        /// <value>Label of the end tour button</value>
        [DataMember(Name = "endtourlabel", IsRequired = true, EmitDefaultValue = true)]
        public string Endtourlabel { get; set; }

        /// <summary>
        /// Tour Name
        /// </summary>
        /// <value>Tour Name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [DataMember(Name = "steps", IsRequired = true, EmitDefaultValue = true)]
        public List<ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner> Steps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolUsertoursFetchAndStartTour200ResponseTourconfig {\n");
            sb.Append("  Displaystepnumbers: ").Append(Displaystepnumbers).Append("\n");
            sb.Append("  Endtourlabel: ").Append(Endtourlabel).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
