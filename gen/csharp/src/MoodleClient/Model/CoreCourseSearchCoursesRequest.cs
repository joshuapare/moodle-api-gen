/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreCourseSearchCoursesRequest
    /// </summary>
    [DataContract(Name = "core_course_search_courses_request")]
    public partial class CoreCourseSearchCoursesRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCourseSearchCoursesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreCourseSearchCoursesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCourseSearchCoursesRequest" /> class.
        /// </summary>
        /// <param name="criterianame">criteria name                                                         (search, modulelist (only admins), blocklist (only admins), tagid) (required) (default to &quot;null&quot;).</param>
        /// <param name="criteriavalue">criteria value (required) (default to &quot;null&quot;).</param>
        /// <param name="limittoenrolled">limit to enrolled courses (default to 0).</param>
        /// <param name="onlywithcompletion">limit to courses where completion is enabled (default to 0).</param>
        /// <param name="page">page number (0 based) (default to 0).</param>
        /// <param name="perpage">items per page (default to 0).</param>
        /// <param name="requiredcapabilities">requiredcapabilities.</param>
        public CoreCourseSearchCoursesRequest(string criterianame = @"null", string criteriavalue = @"null", bool limittoenrolled = 0, bool onlywithcompletion = 0, int page = 0, int perpage = 0, List<Object> requiredcapabilities = default(List<Object>))
        {
            // to ensure "criterianame" is required (not null)
            if (criterianame == null)
            {
                throw new ArgumentNullException("criterianame is a required property for CoreCourseSearchCoursesRequest and cannot be null");
            }
            this.Criterianame = criterianame;
            // to ensure "criteriavalue" is required (not null)
            if (criteriavalue == null)
            {
                throw new ArgumentNullException("criteriavalue is a required property for CoreCourseSearchCoursesRequest and cannot be null");
            }
            this.Criteriavalue = criteriavalue;
            this.Limittoenrolled = limittoenrolled;
            this.Onlywithcompletion = onlywithcompletion;
            this.Page = page;
            this.Perpage = perpage;
            this.Requiredcapabilities = requiredcapabilities;
        }

        /// <summary>
        /// criteria name                                                         (search, modulelist (only admins), blocklist (only admins), tagid)
        /// </summary>
        /// <value>criteria name                                                         (search, modulelist (only admins), blocklist (only admins), tagid)</value>
        [DataMember(Name = "criterianame", IsRequired = true, EmitDefaultValue = true)]
        public string Criterianame { get; set; }

        /// <summary>
        /// criteria value
        /// </summary>
        /// <value>criteria value</value>
        [DataMember(Name = "criteriavalue", IsRequired = true, EmitDefaultValue = true)]
        public string Criteriavalue { get; set; }

        /// <summary>
        /// limit to enrolled courses
        /// </summary>
        /// <value>limit to enrolled courses</value>
        [DataMember(Name = "limittoenrolled", EmitDefaultValue = true)]
        public bool Limittoenrolled { get; set; }

        /// <summary>
        /// limit to courses where completion is enabled
        /// </summary>
        /// <value>limit to courses where completion is enabled</value>
        [DataMember(Name = "onlywithcompletion", EmitDefaultValue = true)]
        public bool Onlywithcompletion { get; set; }

        /// <summary>
        /// page number (0 based)
        /// </summary>
        /// <value>page number (0 based)</value>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public int Page { get; set; }

        /// <summary>
        /// items per page
        /// </summary>
        /// <value>items per page</value>
        [DataMember(Name = "perpage", EmitDefaultValue = false)]
        public int Perpage { get; set; }

        /// <summary>
        /// Gets or Sets Requiredcapabilities
        /// </summary>
        [DataMember(Name = "requiredcapabilities", EmitDefaultValue = false)]
        public List<Object> Requiredcapabilities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCourseSearchCoursesRequest {\n");
            sb.Append("  Criterianame: ").Append(Criterianame).Append("\n");
            sb.Append("  Criteriavalue: ").Append(Criteriavalue).Append("\n");
            sb.Append("  Limittoenrolled: ").Append(Limittoenrolled).Append("\n");
            sb.Append("  Onlywithcompletion: ").Append(Onlywithcompletion).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Perpage: ").Append(Perpage).Append("\n");
            sb.Append("  Requiredcapabilities: ").Append(Requiredcapabilities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
