/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreNotesGetCourseNotes200ResponseCoursenotesInner
    /// </summary>
    [DataContract(Name = "core_notes_get_course_notes_200_response_coursenotes_inner")]
    public partial class CoreNotesGetCourseNotes200ResponseCoursenotesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreNotesGetCourseNotes200ResponseCoursenotesInner" /> class.
        /// </summary>
        /// <param name="content">the content text formated (default to &quot;null&quot;).</param>
        /// <param name="courseid">id of the course.</param>
        /// <param name="created">time created (timestamp) (default to null).</param>
        /// <param name="format">content format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN).</param>
        /// <param name="id">id of this note (default to null).</param>
        /// <param name="lastmodified">time of last modification (timestamp) (default to null).</param>
        /// <param name="publishstate">state of the note (i.e. draft, public, site)  (default to &quot;null&quot;).</param>
        /// <param name="userid">user id.</param>
        /// <param name="usermodified">user id of the creator of this note (default to null).</param>
        public CoreNotesGetCourseNotes200ResponseCoursenotesInner(string content = @"null", int courseid = default(int), int created = null, int format = default(int), int id = null, int lastmodified = null, string publishstate = @"null", int userid = default(int), int usermodified = null)
        {
            // use default value if no "content" provided
            this.Content = content ?? @"null";
            this.Courseid = courseid;
            this.Created = created;
            this.Format = format;
            this.Id = id;
            this.Lastmodified = lastmodified;
            // use default value if no "publishstate" provided
            this.Publishstate = publishstate ?? @"null";
            this.Userid = userid;
            this.Usermodified = usermodified;
        }

        /// <summary>
        /// the content text formated
        /// </summary>
        /// <value>the content text formated</value>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// id of the course
        /// </summary>
        /// <value>id of the course</value>
        [DataMember(Name = "courseid", EmitDefaultValue = false)]
        public int Courseid { get; set; }

        /// <summary>
        /// time created (timestamp)
        /// </summary>
        /// <value>time created (timestamp)</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public int Created { get; set; }

        /// <summary>
        /// content format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>content format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public int Format { get; set; }

        /// <summary>
        /// id of this note
        /// </summary>
        /// <value>id of this note</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// time of last modification (timestamp)
        /// </summary>
        /// <value>time of last modification (timestamp)</value>
        [DataMember(Name = "lastmodified", EmitDefaultValue = false)]
        public int Lastmodified { get; set; }

        /// <summary>
        /// state of the note (i.e. draft, public, site) 
        /// </summary>
        /// <value>state of the note (i.e. draft, public, site) </value>
        [DataMember(Name = "publishstate", EmitDefaultValue = false)]
        public string Publishstate { get; set; }

        /// <summary>
        /// user id
        /// </summary>
        /// <value>user id</value>
        [DataMember(Name = "userid", EmitDefaultValue = false)]
        public int Userid { get; set; }

        /// <summary>
        /// user id of the creator of this note
        /// </summary>
        /// <value>user id of the creator of this note</value>
        [DataMember(Name = "usermodified", EmitDefaultValue = false)]
        public int Usermodified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreNotesGetCourseNotes200ResponseCoursenotesInner {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Courseid: ").Append(Courseid).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Lastmodified: ").Append(Lastmodified).Append("\n");
            sb.Append("  Publishstate: ").Append(Publishstate).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("  Usermodified: ").Append(Usermodified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
