/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModQuizGetQuizAccessInformation200Response
    /// </summary>
    [DataContract(Name = "mod_quiz_get_quiz_access_information_200_response")]
    public partial class ModQuizGetQuizAccessInformation200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModQuizGetQuizAccessInformation200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModQuizGetQuizAccessInformation200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModQuizGetQuizAccessInformation200Response" /> class.
        /// </summary>
        /// <param name="accessrules">accessrules (required).</param>
        /// <param name="activerulenames">activerulenames (required).</param>
        /// <param name="canattempt">Whether the user can do the quiz or not. (required) (default to null).</param>
        /// <param name="canmanage">Whether the user can edit the quiz settings or not. (required) (default to null).</param>
        /// <param name="canpreview">Whether the user can preview the quiz or not. (required) (default to null).</param>
        /// <param name="canreviewmyattempts">Whether the users can review their previous attempts                                                                 or not. (required) (default to null).</param>
        /// <param name="canviewreports">Whether the user can view the quiz reports or not. (required) (default to null).</param>
        /// <param name="preventaccessreasons">preventaccessreasons (required).</param>
        /// <param name="warnings">warnings.</param>
        public ModQuizGetQuizAccessInformation200Response(List<Object> accessrules = default(List<Object>), List<Object> activerulenames = default(List<Object>), bool canattempt = null, bool canmanage = null, bool canpreview = null, bool canreviewmyattempts = null, bool canviewreports = null, List<Object> preventaccessreasons = default(List<Object>), List<AuthEmailSignupUser200ResponseWarningsInner> warnings = default(List<AuthEmailSignupUser200ResponseWarningsInner>))
        {
            // to ensure "accessrules" is required (not null)
            if (accessrules == null)
            {
                throw new ArgumentNullException("accessrules is a required property for ModQuizGetQuizAccessInformation200Response and cannot be null");
            }
            this.Accessrules = accessrules;
            // to ensure "activerulenames" is required (not null)
            if (activerulenames == null)
            {
                throw new ArgumentNullException("activerulenames is a required property for ModQuizGetQuizAccessInformation200Response and cannot be null");
            }
            this.Activerulenames = activerulenames;
            this.Canattempt = canattempt;
            this.Canmanage = canmanage;
            this.Canpreview = canpreview;
            this.Canreviewmyattempts = canreviewmyattempts;
            this.Canviewreports = canviewreports;
            // to ensure "preventaccessreasons" is required (not null)
            if (preventaccessreasons == null)
            {
                throw new ArgumentNullException("preventaccessreasons is a required property for ModQuizGetQuizAccessInformation200Response and cannot be null");
            }
            this.Preventaccessreasons = preventaccessreasons;
            this.Warnings = warnings;
        }

        /// <summary>
        /// Gets or Sets Accessrules
        /// </summary>
        [DataMember(Name = "accessrules", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Accessrules { get; set; }

        /// <summary>
        /// Gets or Sets Activerulenames
        /// </summary>
        [DataMember(Name = "activerulenames", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Activerulenames { get; set; }

        /// <summary>
        /// Whether the user can do the quiz or not.
        /// </summary>
        /// <value>Whether the user can do the quiz or not.</value>
        [DataMember(Name = "canattempt", IsRequired = true, EmitDefaultValue = true)]
        public bool Canattempt { get; set; }

        /// <summary>
        /// Whether the user can edit the quiz settings or not.
        /// </summary>
        /// <value>Whether the user can edit the quiz settings or not.</value>
        [DataMember(Name = "canmanage", IsRequired = true, EmitDefaultValue = true)]
        public bool Canmanage { get; set; }

        /// <summary>
        /// Whether the user can preview the quiz or not.
        /// </summary>
        /// <value>Whether the user can preview the quiz or not.</value>
        [DataMember(Name = "canpreview", IsRequired = true, EmitDefaultValue = true)]
        public bool Canpreview { get; set; }

        /// <summary>
        /// Whether the users can review their previous attempts                                                                 or not.
        /// </summary>
        /// <value>Whether the users can review their previous attempts                                                                 or not.</value>
        [DataMember(Name = "canreviewmyattempts", IsRequired = true, EmitDefaultValue = true)]
        public bool Canreviewmyattempts { get; set; }

        /// <summary>
        /// Whether the user can view the quiz reports or not.
        /// </summary>
        /// <value>Whether the user can view the quiz reports or not.</value>
        [DataMember(Name = "canviewreports", IsRequired = true, EmitDefaultValue = true)]
        public bool Canviewreports { get; set; }

        /// <summary>
        /// Gets or Sets Preventaccessreasons
        /// </summary>
        [DataMember(Name = "preventaccessreasons", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Preventaccessreasons { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<AuthEmailSignupUser200ResponseWarningsInner> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModQuizGetQuizAccessInformation200Response {\n");
            sb.Append("  Accessrules: ").Append(Accessrules).Append("\n");
            sb.Append("  Activerulenames: ").Append(Activerulenames).Append("\n");
            sb.Append("  Canattempt: ").Append(Canattempt).Append("\n");
            sb.Append("  Canmanage: ").Append(Canmanage).Append("\n");
            sb.Append("  Canpreview: ").Append(Canpreview).Append("\n");
            sb.Append("  Canreviewmyattempts: ").Append(Canreviewmyattempts).Append("\n");
            sb.Append("  Canviewreports: ").Append(Canviewreports).Append("\n");
            sb.Append("  Preventaccessreasons: ").Append(Preventaccessreasons).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
