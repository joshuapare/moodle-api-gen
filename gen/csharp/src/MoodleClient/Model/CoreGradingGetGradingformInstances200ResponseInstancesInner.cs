/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreGradingGetGradingformInstances200ResponseInstancesInner
    /// </summary>
    [DataContract(Name = "core_grading_get_gradingform_instances_200_response_instances_inner")]
    public partial class CoreGradingGetGradingformInstances200ResponseInstancesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreGradingGetGradingformInstances200ResponseInstancesInner" /> class.
        /// </summary>
        /// <param name="feedback">feedback (default to &quot;null&quot;).</param>
        /// <param name="feedbackformat">feedback format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to null).</param>
        /// <param name="guide">guide.</param>
        /// <param name="id">instance id.</param>
        /// <param name="itemid">item id.</param>
        /// <param name="raterid">rater id (default to null).</param>
        /// <param name="rawgrade">raw grade (default to &quot;null&quot;).</param>
        /// <param name="rubric">rubric.</param>
        /// <param name="status">status.</param>
        /// <param name="timemodified">modified time (default to null).</param>
        public CoreGradingGetGradingformInstances200ResponseInstancesInner(string feedback = @"null", int feedbackformat = null, CoreGradingGetGradingformInstances200ResponseInstancesInnerGuide guide = default(CoreGradingGetGradingformInstances200ResponseInstancesInnerGuide), int id = default(int), int itemid = default(int), int raterid = null, string rawgrade = @"null", CoreGradingGetGradingformInstances200ResponseInstancesInnerRubric rubric = default(CoreGradingGetGradingformInstances200ResponseInstancesInnerRubric), int status = default(int), int timemodified = null)
        {
            // use default value if no "feedback" provided
            this.Feedback = feedback ?? @"null";
            this.Feedbackformat = feedbackformat;
            this.Guide = guide;
            this.Id = id;
            this.Itemid = itemid;
            this.Raterid = raterid;
            // use default value if no "rawgrade" provided
            this.Rawgrade = rawgrade ?? @"null";
            this.Rubric = rubric;
            this.Status = status;
            this.Timemodified = timemodified;
        }

        /// <summary>
        /// feedback
        /// </summary>
        /// <value>feedback</value>
        [DataMember(Name = "feedback", EmitDefaultValue = false)]
        public string Feedback { get; set; }

        /// <summary>
        /// feedback format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>feedback format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "feedbackformat", EmitDefaultValue = false)]
        public int Feedbackformat { get; set; }

        /// <summary>
        /// Gets or Sets Guide
        /// </summary>
        [DataMember(Name = "guide", EmitDefaultValue = false)]
        public CoreGradingGetGradingformInstances200ResponseInstancesInnerGuide Guide { get; set; }

        /// <summary>
        /// instance id
        /// </summary>
        /// <value>instance id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// item id
        /// </summary>
        /// <value>item id</value>
        [DataMember(Name = "itemid", EmitDefaultValue = false)]
        public int Itemid { get; set; }

        /// <summary>
        /// rater id
        /// </summary>
        /// <value>rater id</value>
        [DataMember(Name = "raterid", EmitDefaultValue = false)]
        public int Raterid { get; set; }

        /// <summary>
        /// raw grade
        /// </summary>
        /// <value>raw grade</value>
        [DataMember(Name = "rawgrade", EmitDefaultValue = false)]
        public string Rawgrade { get; set; }

        /// <summary>
        /// Gets or Sets Rubric
        /// </summary>
        [DataMember(Name = "rubric", EmitDefaultValue = false)]
        public CoreGradingGetGradingformInstances200ResponseInstancesInnerRubric Rubric { get; set; }

        /// <summary>
        /// status
        /// </summary>
        /// <value>status</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public int Status { get; set; }

        /// <summary>
        /// modified time
        /// </summary>
        /// <value>modified time</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreGradingGetGradingformInstances200ResponseInstancesInner {\n");
            sb.Append("  Feedback: ").Append(Feedback).Append("\n");
            sb.Append("  Feedbackformat: ").Append(Feedbackformat).Append("\n");
            sb.Append("  Guide: ").Append(Guide).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Itemid: ").Append(Itemid).Append("\n");
            sb.Append("  Raterid: ").Append(Raterid).Append("\n");
            sb.Append("  Rawgrade: ").Append(Rawgrade).Append("\n");
            sb.Append("  Rubric: ").Append(Rubric).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
