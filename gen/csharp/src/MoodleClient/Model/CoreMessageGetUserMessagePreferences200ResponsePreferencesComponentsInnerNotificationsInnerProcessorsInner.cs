/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInner
    /// </summary>
    [DataContract(Name = "core_message_get_user_message_preferences_200_response_preferences_components_inner_notifications_inner_processors_inner")]
    public partial class CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInner" /> class.
        /// </summary>
        /// <param name="displayname">Display name.</param>
        /// <param name="enabled">Is enabled? (default to null).</param>
        /// <param name="locked">Is locked by admin? (default to null).</param>
        /// <param name="lockedmessage">Text to display if locked (default to &quot;null&quot;).</param>
        /// <param name="loggedin">loggedin.</param>
        /// <param name="loggedoff">loggedoff.</param>
        /// <param name="name">Processor name (default to &quot;null&quot;).</param>
        /// <param name="userconfigured">Is configured? (default to null).</param>
        public CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInner(string displayname = default(string), bool enabled = null, bool locked = null, string lockedmessage = @"null", CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInnerLoggedin loggedin = default(CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInnerLoggedin), CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInnerLoggedoff loggedoff = default(CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInnerLoggedoff), string name = @"null", int userconfigured = null)
        {
            this.Displayname = displayname;
            this.Enabled = enabled;
            this.Locked = locked;
            // use default value if no "lockedmessage" provided
            this.Lockedmessage = lockedmessage ?? @"null";
            this.Loggedin = loggedin;
            this.Loggedoff = loggedoff;
            // use default value if no "name" provided
            this.Name = name ?? @"null";
            this.Userconfigured = userconfigured;
        }

        /// <summary>
        /// Display name
        /// </summary>
        /// <value>Display name</value>
        [DataMember(Name = "displayname", EmitDefaultValue = false)]
        public string Displayname { get; set; }

        /// <summary>
        /// Is enabled?
        /// </summary>
        /// <value>Is enabled?</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Is locked by admin?
        /// </summary>
        /// <value>Is locked by admin?</value>
        [DataMember(Name = "locked", EmitDefaultValue = true)]
        public bool Locked { get; set; }

        /// <summary>
        /// Text to display if locked
        /// </summary>
        /// <value>Text to display if locked</value>
        [DataMember(Name = "lockedmessage", EmitDefaultValue = false)]
        public string Lockedmessage { get; set; }

        /// <summary>
        /// Gets or Sets Loggedin
        /// </summary>
        [DataMember(Name = "loggedin", EmitDefaultValue = false)]
        public CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInnerLoggedin Loggedin { get; set; }

        /// <summary>
        /// Gets or Sets Loggedoff
        /// </summary>
        [DataMember(Name = "loggedoff", EmitDefaultValue = false)]
        public CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInnerLoggedoff Loggedoff { get; set; }

        /// <summary>
        /// Processor name
        /// </summary>
        /// <value>Processor name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Is configured?
        /// </summary>
        /// <value>Is configured?</value>
        [DataMember(Name = "userconfigured", EmitDefaultValue = false)]
        public int Userconfigured { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInner {\n");
            sb.Append("  Displayname: ").Append(Displayname).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Lockedmessage: ").Append(Lockedmessage).Append("\n");
            sb.Append("  Loggedin: ").Append(Loggedin).Append("\n");
            sb.Append("  Loggedoff: ").Append(Loggedoff).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Userconfigured: ").Append(Userconfigured).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
