/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModIomadcertificateIssueIomadcertificate200ResponseIssue
    /// </summary>
    [DataContract(Name = "mod_iomadcertificate_issue_iomadcertificate_200_response_issue")]
    public partial class ModIomadcertificateIssueIomadcertificate200ResponseIssue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModIomadcertificateIssueIomadcertificate200ResponseIssue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModIomadcertificateIssueIomadcertificate200ResponseIssue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModIomadcertificateIssueIomadcertificate200ResponseIssue" /> class.
        /// </summary>
        /// <param name="code">Certificate code (required).</param>
        /// <param name="filename">Time created (required).</param>
        /// <param name="fileurl">Time created (required).</param>
        /// <param name="grade">Certificate grade.</param>
        /// <param name="id">Issue id (required).</param>
        /// <param name="iomadcertificateid">Certificate id (required).</param>
        /// <param name="mimetype">mime type (required).</param>
        /// <param name="timecreated">Time created (required).</param>
        /// <param name="userid">User id (required).</param>
        public ModIomadcertificateIssueIomadcertificate200ResponseIssue(string code = default(string), string filename = default(string), string fileurl = default(string), string grade = default(string), int id = default(int), int iomadcertificateid = default(int), string mimetype = default(string), int timecreated = default(int), int userid = default(int))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for ModIomadcertificateIssueIomadcertificate200ResponseIssue and cannot be null");
            }
            this.Code = code;
            // to ensure "filename" is required (not null)
            if (filename == null)
            {
                throw new ArgumentNullException("filename is a required property for ModIomadcertificateIssueIomadcertificate200ResponseIssue and cannot be null");
            }
            this.Filename = filename;
            // to ensure "fileurl" is required (not null)
            if (fileurl == null)
            {
                throw new ArgumentNullException("fileurl is a required property for ModIomadcertificateIssueIomadcertificate200ResponseIssue and cannot be null");
            }
            this.Fileurl = fileurl;
            this.Id = id;
            this.Iomadcertificateid = iomadcertificateid;
            // to ensure "mimetype" is required (not null)
            if (mimetype == null)
            {
                throw new ArgumentNullException("mimetype is a required property for ModIomadcertificateIssueIomadcertificate200ResponseIssue and cannot be null");
            }
            this.Mimetype = mimetype;
            this.Timecreated = timecreated;
            this.Userid = userid;
            this.Grade = grade;
        }

        /// <summary>
        /// Certificate code
        /// </summary>
        /// <value>Certificate code</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Time created
        /// </summary>
        /// <value>Time created</value>
        [DataMember(Name = "filename", IsRequired = true, EmitDefaultValue = true)]
        public string Filename { get; set; }

        /// <summary>
        /// Time created
        /// </summary>
        /// <value>Time created</value>
        [DataMember(Name = "fileurl", IsRequired = true, EmitDefaultValue = true)]
        public string Fileurl { get; set; }

        /// <summary>
        /// Certificate grade
        /// </summary>
        /// <value>Certificate grade</value>
        [DataMember(Name = "grade", EmitDefaultValue = false)]
        public string Grade { get; set; }

        /// <summary>
        /// Issue id
        /// </summary>
        /// <value>Issue id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Certificate id
        /// </summary>
        /// <value>Certificate id</value>
        [DataMember(Name = "iomadcertificateid", IsRequired = true, EmitDefaultValue = true)]
        public int Iomadcertificateid { get; set; }

        /// <summary>
        /// mime type
        /// </summary>
        /// <value>mime type</value>
        [DataMember(Name = "mimetype", IsRequired = true, EmitDefaultValue = true)]
        public string Mimetype { get; set; }

        /// <summary>
        /// Time created
        /// </summary>
        /// <value>Time created</value>
        [DataMember(Name = "timecreated", IsRequired = true, EmitDefaultValue = true)]
        public int Timecreated { get; set; }

        /// <summary>
        /// User id
        /// </summary>
        /// <value>User id</value>
        [DataMember(Name = "userid", IsRequired = true, EmitDefaultValue = true)]
        public int Userid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModIomadcertificateIssueIomadcertificate200ResponseIssue {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Fileurl: ").Append(Fileurl).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Iomadcertificateid: ").Append(Iomadcertificateid).Append("\n");
            sb.Append("  Mimetype: ").Append(Mimetype).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
