/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// LocalIomadLearningpathGetprospectiveusersRequest
    /// </summary>
    [DataContract(Name = "local_iomad_learningpath_getprospectiveusers_request")]
    public partial class LocalIomadLearningpathGetprospectiveusersRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalIomadLearningpathGetprospectiveusersRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocalIomadLearningpathGetprospectiveusersRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalIomadLearningpathGetprospectiveusersRequest" /> class.
        /// </summary>
        /// <param name="companyid">ID of Iomad Company (required) (default to null).</param>
        /// <param name="filter">Filter user list returned (default to &quot;&quot;).</param>
        /// <param name="pathid">ID learning path (required) (default to null).</param>
        /// <param name="profilefieldid">Filter by user profilefield (default to 0).</param>
        public LocalIomadLearningpathGetprospectiveusersRequest(int companyid = null, string filter = @"", int pathid = null, int profilefieldid = 0)
        {
            this.Companyid = companyid;
            this.Pathid = pathid;
            // use default value if no "filter" provided
            this.Filter = filter ?? @"";
            this.Profilefieldid = profilefieldid;
        }

        /// <summary>
        /// ID of Iomad Company
        /// </summary>
        /// <value>ID of Iomad Company</value>
        [DataMember(Name = "companyid", IsRequired = true, EmitDefaultValue = true)]
        public int Companyid { get; set; }

        /// <summary>
        /// Filter user list returned
        /// </summary>
        /// <value>Filter user list returned</value>
        [DataMember(Name = "filter", EmitDefaultValue = false)]
        public string Filter { get; set; }

        /// <summary>
        /// ID learning path
        /// </summary>
        /// <value>ID learning path</value>
        [DataMember(Name = "pathid", IsRequired = true, EmitDefaultValue = true)]
        public int Pathid { get; set; }

        /// <summary>
        /// Filter by user profilefield
        /// </summary>
        /// <value>Filter by user profilefield</value>
        [DataMember(Name = "profilefieldid", EmitDefaultValue = false)]
        public int Profilefieldid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LocalIomadLearningpathGetprospectiveusersRequest {\n");
            sb.Append("  Companyid: ").Append(Companyid).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  Pathid: ").Append(Pathid).Append("\n");
            sb.Append("  Profilefieldid: ").Append(Profilefieldid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
