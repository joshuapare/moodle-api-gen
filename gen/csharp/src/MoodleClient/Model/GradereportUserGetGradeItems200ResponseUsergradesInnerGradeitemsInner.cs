/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// Grade items
    /// </summary>
    [DataContract(Name = "gradereport_user_get_grade_items_200_response_usergrades_inner_gradeitems_inner")]
    public partial class GradereportUserGetGradeItems200ResponseUsergradesInnerGradeitemsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GradereportUserGetGradeItems200ResponseUsergradesInnerGradeitemsInner" /> class.
        /// </summary>
        /// <param name="averageformatted">Grade average (default to &quot;null&quot;).</param>
        /// <param name="categoryid">Grade item category id (default to null).</param>
        /// <param name="cmid">Course module id (if type mod) (default to null).</param>
        /// <param name="feedback">Grade feedback (default to &quot;null&quot;).</param>
        /// <param name="feedbackformat">feedback format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN).</param>
        /// <param name="gradedategraded">Grade graded date (default to null).</param>
        /// <param name="gradedatesubmitted">Grade submit date (default to null).</param>
        /// <param name="gradeformatted">The grade formatted (default to &quot;null&quot;).</param>
        /// <param name="gradehiddenbydate">Grade hidden by date? (default to null).</param>
        /// <param name="gradeishidden">Grade is hidden? (default to null).</param>
        /// <param name="gradeislocked">Grade is locked? (default to null).</param>
        /// <param name="gradeisoverridden">Grade overridden? (default to null).</param>
        /// <param name="grademax">Grade max (default to nullM).</param>
        /// <param name="grademin">Grade min (default to nullM).</param>
        /// <param name="gradeneedsupdate">Grade needs update? (default to null).</param>
        /// <param name="graderaw">Grade raw (default to nullM).</param>
        /// <param name="id">Grade item id (default to null).</param>
        /// <param name="idnumber">Grade item idnumber (default to &quot;null&quot;).</param>
        /// <param name="iteminstance">Grade item instance (default to null).</param>
        /// <param name="itemmodule">Grade item module (default to &quot;null&quot;).</param>
        /// <param name="itemname">Grade item name (default to &quot;null&quot;).</param>
        /// <param name="itemnumber">Grade item item number (default to null).</param>
        /// <param name="itemtype">Grade item type (default to &quot;null&quot;).</param>
        /// <param name="lettergradeformatted">Letter grade (default to &quot;null&quot;).</param>
        /// <param name="locked">Grade item for user locked? (default to null).</param>
        /// <param name="numusers">Num users in course (default to null).</param>
        /// <param name="outcomeid">Outcome id (default to null).</param>
        /// <param name="percentageformatted">Percentage (default to &quot;null&quot;).</param>
        /// <param name="rangeformatted">Range formatted (default to &quot;null&quot;).</param>
        /// <param name="rank">Rank in the course (default to null).</param>
        /// <param name="scaleid">Scale id (default to null).</param>
        /// <param name="status">Status (default to &quot;null&quot;).</param>
        /// <param name="weightformatted">Weight (default to &quot;null&quot;).</param>
        /// <param name="weightraw">Weight raw (default to nullM).</param>
        public GradereportUserGetGradeItems200ResponseUsergradesInnerGradeitemsInner(string averageformatted = @"null", int categoryid = null, int cmid = null, string feedback = @"null", int feedbackformat = default(int), int gradedategraded = null, int gradedatesubmitted = null, string gradeformatted = @"null", bool gradehiddenbydate = null, bool gradeishidden = null, bool gradeislocked = null, bool gradeisoverridden = null, decimal grademax = nullM, decimal grademin = nullM, bool gradeneedsupdate = null, decimal graderaw = nullM, int id = null, string idnumber = @"null", int iteminstance = null, string itemmodule = @"null", string itemname = @"null", int itemnumber = null, string itemtype = @"null", string lettergradeformatted = @"null", bool locked = null, int numusers = null, int outcomeid = null, string percentageformatted = @"null", string rangeformatted = @"null", int rank = null, int scaleid = null, string status = @"null", string weightformatted = @"null", decimal weightraw = nullM)
        {
            // use default value if no "averageformatted" provided
            this.Averageformatted = averageformatted ?? @"null";
            this.Categoryid = categoryid;
            this.Cmid = cmid;
            // use default value if no "feedback" provided
            this.Feedback = feedback ?? @"null";
            this.Feedbackformat = feedbackformat;
            this.Gradedategraded = gradedategraded;
            this.Gradedatesubmitted = gradedatesubmitted;
            // use default value if no "gradeformatted" provided
            this.Gradeformatted = gradeformatted ?? @"null";
            this.Gradehiddenbydate = gradehiddenbydate;
            this.Gradeishidden = gradeishidden;
            this.Gradeislocked = gradeislocked;
            this.Gradeisoverridden = gradeisoverridden;
            this.Grademax = grademax;
            this.Grademin = grademin;
            this.Gradeneedsupdate = gradeneedsupdate;
            this.Graderaw = graderaw;
            this.Id = id;
            // use default value if no "idnumber" provided
            this.Idnumber = idnumber ?? @"null";
            this.Iteminstance = iteminstance;
            // use default value if no "itemmodule" provided
            this.Itemmodule = itemmodule ?? @"null";
            // use default value if no "itemname" provided
            this.Itemname = itemname ?? @"null";
            this.Itemnumber = itemnumber;
            // use default value if no "itemtype" provided
            this.Itemtype = itemtype ?? @"null";
            // use default value if no "lettergradeformatted" provided
            this.Lettergradeformatted = lettergradeformatted ?? @"null";
            this.Locked = locked;
            this.Numusers = numusers;
            this.Outcomeid = outcomeid;
            // use default value if no "percentageformatted" provided
            this.Percentageformatted = percentageformatted ?? @"null";
            // use default value if no "rangeformatted" provided
            this.Rangeformatted = rangeformatted ?? @"null";
            this.Rank = rank;
            this.Scaleid = scaleid;
            // use default value if no "status" provided
            this.Status = status ?? @"null";
            // use default value if no "weightformatted" provided
            this.Weightformatted = weightformatted ?? @"null";
            this.Weightraw = weightraw;
        }

        /// <summary>
        /// Grade average
        /// </summary>
        /// <value>Grade average</value>
        [DataMember(Name = "averageformatted", EmitDefaultValue = false)]
        public string Averageformatted { get; set; }

        /// <summary>
        /// Grade item category id
        /// </summary>
        /// <value>Grade item category id</value>
        [DataMember(Name = "categoryid", EmitDefaultValue = false)]
        public int Categoryid { get; set; }

        /// <summary>
        /// Course module id (if type mod)
        /// </summary>
        /// <value>Course module id (if type mod)</value>
        [DataMember(Name = "cmid", EmitDefaultValue = false)]
        public int Cmid { get; set; }

        /// <summary>
        /// Grade feedback
        /// </summary>
        /// <value>Grade feedback</value>
        [DataMember(Name = "feedback", EmitDefaultValue = false)]
        public string Feedback { get; set; }

        /// <summary>
        /// feedback format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>feedback format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "feedbackformat", EmitDefaultValue = false)]
        public int Feedbackformat { get; set; }

        /// <summary>
        /// Grade graded date
        /// </summary>
        /// <value>Grade graded date</value>
        [DataMember(Name = "gradedategraded", EmitDefaultValue = false)]
        public int Gradedategraded { get; set; }

        /// <summary>
        /// Grade submit date
        /// </summary>
        /// <value>Grade submit date</value>
        [DataMember(Name = "gradedatesubmitted", EmitDefaultValue = false)]
        public int Gradedatesubmitted { get; set; }

        /// <summary>
        /// The grade formatted
        /// </summary>
        /// <value>The grade formatted</value>
        [DataMember(Name = "gradeformatted", EmitDefaultValue = false)]
        public string Gradeformatted { get; set; }

        /// <summary>
        /// Grade hidden by date?
        /// </summary>
        /// <value>Grade hidden by date?</value>
        [DataMember(Name = "gradehiddenbydate", EmitDefaultValue = true)]
        public bool Gradehiddenbydate { get; set; }

        /// <summary>
        /// Grade is hidden?
        /// </summary>
        /// <value>Grade is hidden?</value>
        [DataMember(Name = "gradeishidden", EmitDefaultValue = true)]
        public bool Gradeishidden { get; set; }

        /// <summary>
        /// Grade is locked?
        /// </summary>
        /// <value>Grade is locked?</value>
        [DataMember(Name = "gradeislocked", EmitDefaultValue = true)]
        public bool Gradeislocked { get; set; }

        /// <summary>
        /// Grade overridden?
        /// </summary>
        /// <value>Grade overridden?</value>
        [DataMember(Name = "gradeisoverridden", EmitDefaultValue = true)]
        public bool Gradeisoverridden { get; set; }

        /// <summary>
        /// Grade max
        /// </summary>
        /// <value>Grade max</value>
        [DataMember(Name = "grademax", EmitDefaultValue = false)]
        public decimal Grademax { get; set; }

        /// <summary>
        /// Grade min
        /// </summary>
        /// <value>Grade min</value>
        [DataMember(Name = "grademin", EmitDefaultValue = false)]
        public decimal Grademin { get; set; }

        /// <summary>
        /// Grade needs update?
        /// </summary>
        /// <value>Grade needs update?</value>
        [DataMember(Name = "gradeneedsupdate", EmitDefaultValue = true)]
        public bool Gradeneedsupdate { get; set; }

        /// <summary>
        /// Grade raw
        /// </summary>
        /// <value>Grade raw</value>
        [DataMember(Name = "graderaw", EmitDefaultValue = false)]
        public decimal Graderaw { get; set; }

        /// <summary>
        /// Grade item id
        /// </summary>
        /// <value>Grade item id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Grade item idnumber
        /// </summary>
        /// <value>Grade item idnumber</value>
        [DataMember(Name = "idnumber", EmitDefaultValue = false)]
        public string Idnumber { get; set; }

        /// <summary>
        /// Grade item instance
        /// </summary>
        /// <value>Grade item instance</value>
        [DataMember(Name = "iteminstance", EmitDefaultValue = false)]
        public int Iteminstance { get; set; }

        /// <summary>
        /// Grade item module
        /// </summary>
        /// <value>Grade item module</value>
        [DataMember(Name = "itemmodule", EmitDefaultValue = false)]
        public string Itemmodule { get; set; }

        /// <summary>
        /// Grade item name
        /// </summary>
        /// <value>Grade item name</value>
        [DataMember(Name = "itemname", EmitDefaultValue = false)]
        public string Itemname { get; set; }

        /// <summary>
        /// Grade item item number
        /// </summary>
        /// <value>Grade item item number</value>
        [DataMember(Name = "itemnumber", EmitDefaultValue = false)]
        public int Itemnumber { get; set; }

        /// <summary>
        /// Grade item type
        /// </summary>
        /// <value>Grade item type</value>
        [DataMember(Name = "itemtype", EmitDefaultValue = false)]
        public string Itemtype { get; set; }

        /// <summary>
        /// Letter grade
        /// </summary>
        /// <value>Letter grade</value>
        [DataMember(Name = "lettergradeformatted", EmitDefaultValue = false)]
        public string Lettergradeformatted { get; set; }

        /// <summary>
        /// Grade item for user locked?
        /// </summary>
        /// <value>Grade item for user locked?</value>
        [DataMember(Name = "locked", EmitDefaultValue = true)]
        public bool Locked { get; set; }

        /// <summary>
        /// Num users in course
        /// </summary>
        /// <value>Num users in course</value>
        [DataMember(Name = "numusers", EmitDefaultValue = false)]
        public int Numusers { get; set; }

        /// <summary>
        /// Outcome id
        /// </summary>
        /// <value>Outcome id</value>
        [DataMember(Name = "outcomeid", EmitDefaultValue = false)]
        public int Outcomeid { get; set; }

        /// <summary>
        /// Percentage
        /// </summary>
        /// <value>Percentage</value>
        [DataMember(Name = "percentageformatted", EmitDefaultValue = false)]
        public string Percentageformatted { get; set; }

        /// <summary>
        /// Range formatted
        /// </summary>
        /// <value>Range formatted</value>
        [DataMember(Name = "rangeformatted", EmitDefaultValue = false)]
        public string Rangeformatted { get; set; }

        /// <summary>
        /// Rank in the course
        /// </summary>
        /// <value>Rank in the course</value>
        [DataMember(Name = "rank", EmitDefaultValue = false)]
        public int Rank { get; set; }

        /// <summary>
        /// Scale id
        /// </summary>
        /// <value>Scale id</value>
        [DataMember(Name = "scaleid", EmitDefaultValue = false)]
        public int Scaleid { get; set; }

        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Weight
        /// </summary>
        /// <value>Weight</value>
        [DataMember(Name = "weightformatted", EmitDefaultValue = false)]
        public string Weightformatted { get; set; }

        /// <summary>
        /// Weight raw
        /// </summary>
        /// <value>Weight raw</value>
        [DataMember(Name = "weightraw", EmitDefaultValue = false)]
        public decimal Weightraw { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GradereportUserGetGradeItems200ResponseUsergradesInnerGradeitemsInner {\n");
            sb.Append("  Averageformatted: ").Append(Averageformatted).Append("\n");
            sb.Append("  Categoryid: ").Append(Categoryid).Append("\n");
            sb.Append("  Cmid: ").Append(Cmid).Append("\n");
            sb.Append("  Feedback: ").Append(Feedback).Append("\n");
            sb.Append("  Feedbackformat: ").Append(Feedbackformat).Append("\n");
            sb.Append("  Gradedategraded: ").Append(Gradedategraded).Append("\n");
            sb.Append("  Gradedatesubmitted: ").Append(Gradedatesubmitted).Append("\n");
            sb.Append("  Gradeformatted: ").Append(Gradeformatted).Append("\n");
            sb.Append("  Gradehiddenbydate: ").Append(Gradehiddenbydate).Append("\n");
            sb.Append("  Gradeishidden: ").Append(Gradeishidden).Append("\n");
            sb.Append("  Gradeislocked: ").Append(Gradeislocked).Append("\n");
            sb.Append("  Gradeisoverridden: ").Append(Gradeisoverridden).Append("\n");
            sb.Append("  Grademax: ").Append(Grademax).Append("\n");
            sb.Append("  Grademin: ").Append(Grademin).Append("\n");
            sb.Append("  Gradeneedsupdate: ").Append(Gradeneedsupdate).Append("\n");
            sb.Append("  Graderaw: ").Append(Graderaw).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Idnumber: ").Append(Idnumber).Append("\n");
            sb.Append("  Iteminstance: ").Append(Iteminstance).Append("\n");
            sb.Append("  Itemmodule: ").Append(Itemmodule).Append("\n");
            sb.Append("  Itemname: ").Append(Itemname).Append("\n");
            sb.Append("  Itemnumber: ").Append(Itemnumber).Append("\n");
            sb.Append("  Itemtype: ").Append(Itemtype).Append("\n");
            sb.Append("  Lettergradeformatted: ").Append(Lettergradeformatted).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Numusers: ").Append(Numusers).Append("\n");
            sb.Append("  Outcomeid: ").Append(Outcomeid).Append("\n");
            sb.Append("  Percentageformatted: ").Append(Percentageformatted).Append("\n");
            sb.Append("  Rangeformatted: ").Append(Rangeformatted).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Scaleid: ").Append(Scaleid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Weightformatted: ").Append(Weightformatted).Append("\n");
            sb.Append("  Weightraw: ").Append(Weightraw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
