/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ToolLpDataForUserCompetencySummary200ResponseUsercompetency
    /// </summary>
    [DataContract(Name = "tool_lp_data_for_user_competency_summary_200_response_usercompetency")]
    public partial class ToolLpDataForUserCompetencySummary200ResponseUsercompetency : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForUserCompetencySummary200ResponseUsercompetency" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolLpDataForUserCompetencySummary200ResponseUsercompetency() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForUserCompetencySummary200ResponseUsercompetency" /> class.
        /// </summary>
        /// <param name="canrequestreview">canrequestreview (required).</param>
        /// <param name="canreview">canreview (required).</param>
        /// <param name="competencyid">competencyid (required).</param>
        /// <param name="grade">grade (required).</param>
        /// <param name="gradename">gradename (required).</param>
        /// <param name="id">id (required) (default to 0).</param>
        /// <param name="iscancelreviewrequestallowed">iscancelreviewrequestallowed (required).</param>
        /// <param name="isrequestreviewallowed">isrequestreviewallowed (required).</param>
        /// <param name="isstartreviewallowed">isstartreviewallowed (required).</param>
        /// <param name="isstatusidle">isstatusidle (required).</param>
        /// <param name="isstatusinreview">isstatusinreview (required).</param>
        /// <param name="isstatuswaitingforreview">isstatuswaitingforreview (required).</param>
        /// <param name="isstopreviewallowed">isstopreviewallowed (required).</param>
        /// <param name="proficiency">proficiency (required).</param>
        /// <param name="proficiencyname">proficiencyname (required).</param>
        /// <param name="reviewer">reviewer.</param>
        /// <param name="reviewerid">reviewerid (required).</param>
        /// <param name="status">status (required) (default to 0).</param>
        /// <param name="statusname">statusname (required).</param>
        /// <param name="timecreated">timecreated (required) (default to 0).</param>
        /// <param name="timemodified">timemodified (required) (default to 0).</param>
        /// <param name="url">url (required).</param>
        /// <param name="userid">userid (required).</param>
        /// <param name="usermodified">usermodified (required) (default to 0).</param>
        public ToolLpDataForUserCompetencySummary200ResponseUsercompetency(bool canrequestreview = default(bool), bool canreview = default(bool), int competencyid = default(int), int grade = default(int), string gradename = default(string), int id = 0, bool iscancelreviewrequestallowed = default(bool), bool isrequestreviewallowed = default(bool), bool isstartreviewallowed = default(bool), bool isstatusidle = default(bool), bool isstatusinreview = default(bool), bool isstatuswaitingforreview = default(bool), bool isstopreviewallowed = default(bool), bool proficiency = default(bool), string proficiencyname = default(string), CoreCompetencyGradeCompetency200ResponseActionuser reviewer = default(CoreCompetencyGradeCompetency200ResponseActionuser), int reviewerid = default(int), int status = 0, string statusname = default(string), int timecreated = 0, int timemodified = 0, string url = default(string), int userid = default(int), int usermodified = 0)
        {
            this.Canrequestreview = canrequestreview;
            this.Canreview = canreview;
            this.Competencyid = competencyid;
            this.Grade = grade;
            // to ensure "gradename" is required (not null)
            if (gradename == null)
            {
                throw new ArgumentNullException("gradename is a required property for ToolLpDataForUserCompetencySummary200ResponseUsercompetency and cannot be null");
            }
            this.Gradename = gradename;
            this.Id = id;
            this.Iscancelreviewrequestallowed = iscancelreviewrequestallowed;
            this.Isrequestreviewallowed = isrequestreviewallowed;
            this.Isstartreviewallowed = isstartreviewallowed;
            this.Isstatusidle = isstatusidle;
            this.Isstatusinreview = isstatusinreview;
            this.Isstatuswaitingforreview = isstatuswaitingforreview;
            this.Isstopreviewallowed = isstopreviewallowed;
            this.Proficiency = proficiency;
            // to ensure "proficiencyname" is required (not null)
            if (proficiencyname == null)
            {
                throw new ArgumentNullException("proficiencyname is a required property for ToolLpDataForUserCompetencySummary200ResponseUsercompetency and cannot be null");
            }
            this.Proficiencyname = proficiencyname;
            this.Reviewerid = reviewerid;
            this.Status = status;
            // to ensure "statusname" is required (not null)
            if (statusname == null)
            {
                throw new ArgumentNullException("statusname is a required property for ToolLpDataForUserCompetencySummary200ResponseUsercompetency and cannot be null");
            }
            this.Statusname = statusname;
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for ToolLpDataForUserCompetencySummary200ResponseUsercompetency and cannot be null");
            }
            this.Url = url;
            this.Userid = userid;
            this.Usermodified = usermodified;
            this.Reviewer = reviewer;
        }

        /// <summary>
        /// canrequestreview
        /// </summary>
        /// <value>canrequestreview</value>
        [DataMember(Name = "canrequestreview", IsRequired = true, EmitDefaultValue = true)]
        public bool Canrequestreview { get; set; }

        /// <summary>
        /// canreview
        /// </summary>
        /// <value>canreview</value>
        [DataMember(Name = "canreview", IsRequired = true, EmitDefaultValue = true)]
        public bool Canreview { get; set; }

        /// <summary>
        /// competencyid
        /// </summary>
        /// <value>competencyid</value>
        [DataMember(Name = "competencyid", IsRequired = true, EmitDefaultValue = true)]
        public int Competencyid { get; set; }

        /// <summary>
        /// grade
        /// </summary>
        /// <value>grade</value>
        [DataMember(Name = "grade", IsRequired = true, EmitDefaultValue = true)]
        public int Grade { get; set; }

        /// <summary>
        /// gradename
        /// </summary>
        /// <value>gradename</value>
        [DataMember(Name = "gradename", IsRequired = true, EmitDefaultValue = true)]
        public string Gradename { get; set; }

        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// iscancelreviewrequestallowed
        /// </summary>
        /// <value>iscancelreviewrequestallowed</value>
        [DataMember(Name = "iscancelreviewrequestallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Iscancelreviewrequestallowed { get; set; }

        /// <summary>
        /// isrequestreviewallowed
        /// </summary>
        /// <value>isrequestreviewallowed</value>
        [DataMember(Name = "isrequestreviewallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Isrequestreviewallowed { get; set; }

        /// <summary>
        /// isstartreviewallowed
        /// </summary>
        /// <value>isstartreviewallowed</value>
        [DataMember(Name = "isstartreviewallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Isstartreviewallowed { get; set; }

        /// <summary>
        /// isstatusidle
        /// </summary>
        /// <value>isstatusidle</value>
        [DataMember(Name = "isstatusidle", IsRequired = true, EmitDefaultValue = true)]
        public bool Isstatusidle { get; set; }

        /// <summary>
        /// isstatusinreview
        /// </summary>
        /// <value>isstatusinreview</value>
        [DataMember(Name = "isstatusinreview", IsRequired = true, EmitDefaultValue = true)]
        public bool Isstatusinreview { get; set; }

        /// <summary>
        /// isstatuswaitingforreview
        /// </summary>
        /// <value>isstatuswaitingforreview</value>
        [DataMember(Name = "isstatuswaitingforreview", IsRequired = true, EmitDefaultValue = true)]
        public bool Isstatuswaitingforreview { get; set; }

        /// <summary>
        /// isstopreviewallowed
        /// </summary>
        /// <value>isstopreviewallowed</value>
        [DataMember(Name = "isstopreviewallowed", IsRequired = true, EmitDefaultValue = true)]
        public bool Isstopreviewallowed { get; set; }

        /// <summary>
        /// proficiency
        /// </summary>
        /// <value>proficiency</value>
        [DataMember(Name = "proficiency", IsRequired = true, EmitDefaultValue = true)]
        public bool Proficiency { get; set; }

        /// <summary>
        /// proficiencyname
        /// </summary>
        /// <value>proficiencyname</value>
        [DataMember(Name = "proficiencyname", IsRequired = true, EmitDefaultValue = true)]
        public string Proficiencyname { get; set; }

        /// <summary>
        /// Gets or Sets Reviewer
        /// </summary>
        [DataMember(Name = "reviewer", EmitDefaultValue = false)]
        public CoreCompetencyGradeCompetency200ResponseActionuser Reviewer { get; set; }

        /// <summary>
        /// reviewerid
        /// </summary>
        /// <value>reviewerid</value>
        [DataMember(Name = "reviewerid", IsRequired = true, EmitDefaultValue = true)]
        public int Reviewerid { get; set; }

        /// <summary>
        /// status
        /// </summary>
        /// <value>status</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public int Status { get; set; }

        /// <summary>
        /// statusname
        /// </summary>
        /// <value>statusname</value>
        [DataMember(Name = "statusname", IsRequired = true, EmitDefaultValue = true)]
        public string Statusname { get; set; }

        /// <summary>
        /// timecreated
        /// </summary>
        /// <value>timecreated</value>
        [DataMember(Name = "timecreated", IsRequired = true, EmitDefaultValue = true)]
        public int Timecreated { get; set; }

        /// <summary>
        /// timemodified
        /// </summary>
        /// <value>timemodified</value>
        [DataMember(Name = "timemodified", IsRequired = true, EmitDefaultValue = true)]
        public int Timemodified { get; set; }

        /// <summary>
        /// url
        /// </summary>
        /// <value>url</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// userid
        /// </summary>
        /// <value>userid</value>
        [DataMember(Name = "userid", IsRequired = true, EmitDefaultValue = true)]
        public int Userid { get; set; }

        /// <summary>
        /// usermodified
        /// </summary>
        /// <value>usermodified</value>
        [DataMember(Name = "usermodified", IsRequired = true, EmitDefaultValue = true)]
        public int Usermodified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolLpDataForUserCompetencySummary200ResponseUsercompetency {\n");
            sb.Append("  Canrequestreview: ").Append(Canrequestreview).Append("\n");
            sb.Append("  Canreview: ").Append(Canreview).Append("\n");
            sb.Append("  Competencyid: ").Append(Competencyid).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Gradename: ").Append(Gradename).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Iscancelreviewrequestallowed: ").Append(Iscancelreviewrequestallowed).Append("\n");
            sb.Append("  Isrequestreviewallowed: ").Append(Isrequestreviewallowed).Append("\n");
            sb.Append("  Isstartreviewallowed: ").Append(Isstartreviewallowed).Append("\n");
            sb.Append("  Isstatusidle: ").Append(Isstatusidle).Append("\n");
            sb.Append("  Isstatusinreview: ").Append(Isstatusinreview).Append("\n");
            sb.Append("  Isstatuswaitingforreview: ").Append(Isstatuswaitingforreview).Append("\n");
            sb.Append("  Isstopreviewallowed: ").Append(Isstopreviewallowed).Append("\n");
            sb.Append("  Proficiency: ").Append(Proficiency).Append("\n");
            sb.Append("  Proficiencyname: ").Append(Proficiencyname).Append("\n");
            sb.Append("  Reviewer: ").Append(Reviewer).Append("\n");
            sb.Append("  Reviewerid: ").Append(Reviewerid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Statusname: ").Append(Statusname).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("  Usermodified: ").Append(Usermodified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
