/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// AuthEmailSignupUserRequest
    /// </summary>
    [DataContract(Name = "auth_email_signup_user_request")]
    public partial class AuthEmailSignupUserRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEmailSignupUserRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthEmailSignupUserRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEmailSignupUserRequest" /> class.
        /// </summary>
        /// <param name="city">Home city of the user (default to &quot;&quot;).</param>
        /// <param name="country">Home country code (default to &quot;&quot;).</param>
        /// <param name="customprofilefields">customprofilefields.</param>
        /// <param name="email">A valid and unique email address (required) (default to &quot;null&quot;).</param>
        /// <param name="firstname">The first name(s) of the user (required) (default to &quot;null&quot;).</param>
        /// <param name="lastname">The family name of the user (required) (default to &quot;null&quot;).</param>
        /// <param name="password">Plain text password (required) (default to &quot;null&quot;).</param>
        /// <param name="recaptchachallengehash">Recaptcha challenge hash (default to &quot;&quot;).</param>
        /// <param name="recaptcharesponse">Recaptcha response (default to &quot;&quot;).</param>
        /// <param name="redirect">Redirect the user to this site url after confirmation. (default to &quot;&quot;).</param>
        /// <param name="username">Username (required) (default to &quot;null&quot;).</param>
        public AuthEmailSignupUserRequest(string city = @"", string country = @"", List<AuthEmailSignupUserRequestCustomprofilefieldsInner> customprofilefields = default(List<AuthEmailSignupUserRequestCustomprofilefieldsInner>), string email = @"null", string firstname = @"null", string lastname = @"null", string password = @"null", string recaptchachallengehash = @"", string recaptcharesponse = @"", string redirect = @"", string username = @"null")
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for AuthEmailSignupUserRequest and cannot be null");
            }
            this.Email = email;
            // to ensure "firstname" is required (not null)
            if (firstname == null)
            {
                throw new ArgumentNullException("firstname is a required property for AuthEmailSignupUserRequest and cannot be null");
            }
            this.Firstname = firstname;
            // to ensure "lastname" is required (not null)
            if (lastname == null)
            {
                throw new ArgumentNullException("lastname is a required property for AuthEmailSignupUserRequest and cannot be null");
            }
            this.Lastname = lastname;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for AuthEmailSignupUserRequest and cannot be null");
            }
            this.Password = password;
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new ArgumentNullException("username is a required property for AuthEmailSignupUserRequest and cannot be null");
            }
            this.Username = username;
            // use default value if no "city" provided
            this.City = city ?? @"";
            // use default value if no "country" provided
            this.Country = country ?? @"";
            this.Customprofilefields = customprofilefields;
            // use default value if no "recaptchachallengehash" provided
            this.Recaptchachallengehash = recaptchachallengehash ?? @"";
            // use default value if no "recaptcharesponse" provided
            this.Recaptcharesponse = recaptcharesponse ?? @"";
            // use default value if no "redirect" provided
            this.Redirect = redirect ?? @"";
        }

        /// <summary>
        /// Home city of the user
        /// </summary>
        /// <value>Home city of the user</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Home country code
        /// </summary>
        /// <value>Home country code</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Customprofilefields
        /// </summary>
        [DataMember(Name = "customprofilefields", EmitDefaultValue = false)]
        public List<AuthEmailSignupUserRequestCustomprofilefieldsInner> Customprofilefields { get; set; }

        /// <summary>
        /// A valid and unique email address
        /// </summary>
        /// <value>A valid and unique email address</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// The first name(s) of the user
        /// </summary>
        /// <value>The first name(s) of the user</value>
        [DataMember(Name = "firstname", IsRequired = true, EmitDefaultValue = true)]
        public string Firstname { get; set; }

        /// <summary>
        /// The family name of the user
        /// </summary>
        /// <value>The family name of the user</value>
        [DataMember(Name = "lastname", IsRequired = true, EmitDefaultValue = true)]
        public string Lastname { get; set; }

        /// <summary>
        /// Plain text password
        /// </summary>
        /// <value>Plain text password</value>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Recaptcha challenge hash
        /// </summary>
        /// <value>Recaptcha challenge hash</value>
        [DataMember(Name = "recaptchachallengehash", EmitDefaultValue = false)]
        public string Recaptchachallengehash { get; set; }

        /// <summary>
        /// Recaptcha response
        /// </summary>
        /// <value>Recaptcha response</value>
        [DataMember(Name = "recaptcharesponse", EmitDefaultValue = false)]
        public string Recaptcharesponse { get; set; }

        /// <summary>
        /// Redirect the user to this site url after confirmation.
        /// </summary>
        /// <value>Redirect the user to this site url after confirmation.</value>
        [DataMember(Name = "redirect", EmitDefaultValue = false)]
        public string Redirect { get; set; }

        /// <summary>
        /// Username
        /// </summary>
        /// <value>Username</value>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthEmailSignupUserRequest {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Customprofilefields: ").Append(Customprofilefields).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Recaptchachallengehash: ").Append(Recaptchachallengehash).Append("\n");
            sb.Append("  Recaptcharesponse: ").Append(Recaptcharesponse).Append("\n");
            sb.Append("  Redirect: ").Append(Redirect).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
