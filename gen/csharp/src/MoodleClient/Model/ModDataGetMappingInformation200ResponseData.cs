/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModDataGetMappingInformation200ResponseData
    /// </summary>
    [DataContract(Name = "mod_data_get_mapping_information_200_response_data")]
    public partial class ModDataGetMappingInformation200ResponseData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModDataGetMappingInformation200ResponseData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModDataGetMappingInformation200ResponseData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModDataGetMappingInformation200ResponseData" /> class.
        /// </summary>
        /// <param name="fieldstocreate">List of field names to create (required) (default to &quot;null&quot;).</param>
        /// <param name="fieldstoremove">List of field names to remove (required) (default to &quot;null&quot;).</param>
        /// <param name="needsmapping">Whether the importing needs mapping or not (required) (default to null).</param>
        /// <param name="presetname">Name of the applied preset (required) (default to &quot;null&quot;).</param>
        public ModDataGetMappingInformation200ResponseData(string fieldstocreate = @"null", string fieldstoremove = @"null", bool needsmapping = null, string presetname = @"null")
        {
            // to ensure "fieldstocreate" is required (not null)
            if (fieldstocreate == null)
            {
                throw new ArgumentNullException("fieldstocreate is a required property for ModDataGetMappingInformation200ResponseData and cannot be null");
            }
            this.Fieldstocreate = fieldstocreate;
            // to ensure "fieldstoremove" is required (not null)
            if (fieldstoremove == null)
            {
                throw new ArgumentNullException("fieldstoremove is a required property for ModDataGetMappingInformation200ResponseData and cannot be null");
            }
            this.Fieldstoremove = fieldstoremove;
            this.Needsmapping = needsmapping;
            // to ensure "presetname" is required (not null)
            if (presetname == null)
            {
                throw new ArgumentNullException("presetname is a required property for ModDataGetMappingInformation200ResponseData and cannot be null");
            }
            this.Presetname = presetname;
        }

        /// <summary>
        /// List of field names to create
        /// </summary>
        /// <value>List of field names to create</value>
        [DataMember(Name = "fieldstocreate", IsRequired = true, EmitDefaultValue = true)]
        public string Fieldstocreate { get; set; }

        /// <summary>
        /// List of field names to remove
        /// </summary>
        /// <value>List of field names to remove</value>
        [DataMember(Name = "fieldstoremove", IsRequired = true, EmitDefaultValue = true)]
        public string Fieldstoremove { get; set; }

        /// <summary>
        /// Whether the importing needs mapping or not
        /// </summary>
        /// <value>Whether the importing needs mapping or not</value>
        [DataMember(Name = "needsmapping", IsRequired = true, EmitDefaultValue = true)]
        public bool Needsmapping { get; set; }

        /// <summary>
        /// Name of the applied preset
        /// </summary>
        /// <value>Name of the applied preset</value>
        [DataMember(Name = "presetname", IsRequired = true, EmitDefaultValue = true)]
        public string Presetname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModDataGetMappingInformation200ResponseData {\n");
            sb.Append("  Fieldstocreate: ").Append(Fieldstocreate).Append("\n");
            sb.Append("  Fieldstoremove: ").Append(Fieldstoremove).Append("\n");
            sb.Append("  Needsmapping: ").Append(Needsmapping).Append("\n");
            sb.Append("  Presetname: ").Append(Presetname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
