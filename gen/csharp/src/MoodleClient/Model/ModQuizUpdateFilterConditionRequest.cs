/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModQuizUpdateFilterConditionRequest
    /// </summary>
    [DataContract(Name = "mod_quiz_update_filter_condition_request")]
    public partial class ModQuizUpdateFilterConditionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModQuizUpdateFilterConditionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModQuizUpdateFilterConditionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModQuizUpdateFilterConditionRequest" /> class.
        /// </summary>
        /// <param name="cmid">The cmid of the quiz (required).</param>
        /// <param name="filtercondition">Filter condition (required) (default to &quot;null&quot;).</param>
        /// <param name="slotid">The quiz slot ID for the random question. (required) (default to null).</param>
        public ModQuizUpdateFilterConditionRequest(int cmid = default(int), string filtercondition = @"null", int slotid = null)
        {
            this.Cmid = cmid;
            // to ensure "filtercondition" is required (not null)
            if (filtercondition == null)
            {
                throw new ArgumentNullException("filtercondition is a required property for ModQuizUpdateFilterConditionRequest and cannot be null");
            }
            this.Filtercondition = filtercondition;
            this.Slotid = slotid;
        }

        /// <summary>
        /// The cmid of the quiz
        /// </summary>
        /// <value>The cmid of the quiz</value>
        [DataMember(Name = "cmid", IsRequired = true, EmitDefaultValue = true)]
        public int Cmid { get; set; }

        /// <summary>
        /// Filter condition
        /// </summary>
        /// <value>Filter condition</value>
        [DataMember(Name = "filtercondition", IsRequired = true, EmitDefaultValue = true)]
        public string Filtercondition { get; set; }

        /// <summary>
        /// The quiz slot ID for the random question.
        /// </summary>
        /// <value>The quiz slot ID for the random question.</value>
        [DataMember(Name = "slotid", IsRequired = true, EmitDefaultValue = true)]
        public int Slotid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModQuizUpdateFilterConditionRequest {\n");
            sb.Append("  Cmid: ").Append(Cmid).Append("\n");
            sb.Append("  Filtercondition: ").Append(Filtercondition).Append("\n");
            sb.Append("  Slotid: ").Append(Slotid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
