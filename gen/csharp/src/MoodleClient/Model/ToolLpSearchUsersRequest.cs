/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ToolLpSearchUsersRequest
    /// </summary>
    [DataContract(Name = "tool_lp_search_users_request")]
    public partial class ToolLpSearchUsersRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpSearchUsersRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolLpSearchUsersRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpSearchUsersRequest" /> class.
        /// </summary>
        /// <param name="capability">Required capability (required) (default to &quot;null&quot;).</param>
        /// <param name="limitfrom">Number of records to skip (default to 0).</param>
        /// <param name="limitnum">Number of records to fetch (default to &quot;100&quot;).</param>
        /// <param name="query">Query string (required).</param>
        public ToolLpSearchUsersRequest(string capability = @"null", int limitfrom = 0, string limitnum = @"100", string query = default(string))
        {
            // to ensure "capability" is required (not null)
            if (capability == null)
            {
                throw new ArgumentNullException("capability is a required property for ToolLpSearchUsersRequest and cannot be null");
            }
            this.Capability = capability;
            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new ArgumentNullException("query is a required property for ToolLpSearchUsersRequest and cannot be null");
            }
            this.Query = query;
            this.Limitfrom = limitfrom;
            // use default value if no "limitnum" provided
            this.Limitnum = limitnum ?? @"100";
        }

        /// <summary>
        /// Required capability
        /// </summary>
        /// <value>Required capability</value>
        [DataMember(Name = "capability", IsRequired = true, EmitDefaultValue = true)]
        public string Capability { get; set; }

        /// <summary>
        /// Number of records to skip
        /// </summary>
        /// <value>Number of records to skip</value>
        [DataMember(Name = "limitfrom", EmitDefaultValue = false)]
        public int Limitfrom { get; set; }

        /// <summary>
        /// Number of records to fetch
        /// </summary>
        /// <value>Number of records to fetch</value>
        [DataMember(Name = "limitnum", EmitDefaultValue = false)]
        public string Limitnum { get; set; }

        /// <summary>
        /// Query string
        /// </summary>
        /// <value>Query string</value>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = true)]
        public string Query { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolLpSearchUsersRequest {\n");
            sb.Append("  Capability: ").Append(Capability).Append("\n");
            sb.Append("  Limitfrom: ").Append(Limitfrom).Append("\n");
            sb.Append("  Limitnum: ").Append(Limitnum).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
