/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModBigbluebuttonbnMeetingInfo200Response
    /// </summary>
    [DataContract(Name = "mod_bigbluebuttonbn_meeting_info_200_response")]
    public partial class ModBigbluebuttonbnMeetingInfo200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModBigbluebuttonbnMeetingInfo200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModBigbluebuttonbnMeetingInfo200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModBigbluebuttonbnMeetingInfo200Response" /> class.
        /// </summary>
        /// <param name="bigbluebuttonbnid">bigbluebuttonbn instance id (required) (default to &quot;null&quot;).</param>
        /// <param name="canjoin">Can join (required) (default to null).</param>
        /// <param name="closingtime">Closing time (default to null).</param>
        /// <param name="cmid">CM id (required) (default to null).</param>
        /// <param name="features">features.</param>
        /// <param name="groupid">bigbluebuttonbn group id (default to 0).</param>
        /// <param name="guestaccessenabled">Guest access enabled (default to null).</param>
        /// <param name="guestjoinurl">Guest URL (default to &quot;null&quot;).</param>
        /// <param name="guestpassword">Guest join password (default to &quot;null&quot;).</param>
        /// <param name="ismoderator">Is moderator (required) (default to null).</param>
        /// <param name="joinurl">Join URL (required) (default to &quot;null&quot;).</param>
        /// <param name="meetingid">Meeting id (required).</param>
        /// <param name="moderatorcount">Moderator count (default to null).</param>
        /// <param name="moderatorplural">Several moderators ? (default to null).</param>
        /// <param name="openingtime">Opening time (default to null).</param>
        /// <param name="participantcount">Participant count (default to null).</param>
        /// <param name="participantplural">Several participants ? (default to null).</param>
        /// <param name="presentations">presentations (required).</param>
        /// <param name="startedat">Started at (default to null).</param>
        /// <param name="statusclosed">Status closed (default to null).</param>
        /// <param name="statusmessage">Status message (default to &quot;null&quot;).</param>
        /// <param name="statusopen">Status open (default to null).</param>
        /// <param name="statusrunning">Status running (default to null).</param>
        /// <param name="userlimit">User limit (required) (default to null).</param>
        public ModBigbluebuttonbnMeetingInfo200Response(string bigbluebuttonbnid = @"null", bool canjoin = null, int closingtime = null, int cmid = null, List<ModBigbluebuttonbnMeetingInfo200ResponseFeaturesInner> features = default(List<ModBigbluebuttonbnMeetingInfo200ResponseFeaturesInner>), int groupid = 0, bool guestaccessenabled = null, string guestjoinurl = @"null", string guestpassword = @"null", bool ismoderator = null, string joinurl = @"null", string meetingid = default(string), int moderatorcount = null, bool moderatorplural = null, int openingtime = null, int participantcount = null, bool participantplural = null, List<ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner> presentations = default(List<ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner>), int startedat = null, bool statusclosed = null, string statusmessage = @"null", bool statusopen = null, bool statusrunning = null, int userlimit = null)
        {
            // to ensure "bigbluebuttonbnid" is required (not null)
            if (bigbluebuttonbnid == null)
            {
                throw new ArgumentNullException("bigbluebuttonbnid is a required property for ModBigbluebuttonbnMeetingInfo200Response and cannot be null");
            }
            this.Bigbluebuttonbnid = bigbluebuttonbnid;
            this.Canjoin = canjoin;
            this.Cmid = cmid;
            this.Ismoderator = ismoderator;
            // to ensure "joinurl" is required (not null)
            if (joinurl == null)
            {
                throw new ArgumentNullException("joinurl is a required property for ModBigbluebuttonbnMeetingInfo200Response and cannot be null");
            }
            this.Joinurl = joinurl;
            // to ensure "meetingid" is required (not null)
            if (meetingid == null)
            {
                throw new ArgumentNullException("meetingid is a required property for ModBigbluebuttonbnMeetingInfo200Response and cannot be null");
            }
            this.Meetingid = meetingid;
            // to ensure "presentations" is required (not null)
            if (presentations == null)
            {
                throw new ArgumentNullException("presentations is a required property for ModBigbluebuttonbnMeetingInfo200Response and cannot be null");
            }
            this.Presentations = presentations;
            this.Userlimit = userlimit;
            this.Closingtime = closingtime;
            this.Features = features;
            this.Groupid = groupid;
            this.Guestaccessenabled = guestaccessenabled;
            // use default value if no "guestjoinurl" provided
            this.Guestjoinurl = guestjoinurl ?? @"null";
            // use default value if no "guestpassword" provided
            this.Guestpassword = guestpassword ?? @"null";
            this.Moderatorcount = moderatorcount;
            this.Moderatorplural = moderatorplural;
            this.Openingtime = openingtime;
            this.Participantcount = participantcount;
            this.Participantplural = participantplural;
            this.Startedat = startedat;
            this.Statusclosed = statusclosed;
            // use default value if no "statusmessage" provided
            this.Statusmessage = statusmessage ?? @"null";
            this.Statusopen = statusopen;
            this.Statusrunning = statusrunning;
        }

        /// <summary>
        /// bigbluebuttonbn instance id
        /// </summary>
        /// <value>bigbluebuttonbn instance id</value>
        [DataMember(Name = "bigbluebuttonbnid", IsRequired = true, EmitDefaultValue = true)]
        public string Bigbluebuttonbnid { get; set; }

        /// <summary>
        /// Can join
        /// </summary>
        /// <value>Can join</value>
        [DataMember(Name = "canjoin", IsRequired = true, EmitDefaultValue = true)]
        public bool Canjoin { get; set; }

        /// <summary>
        /// Closing time
        /// </summary>
        /// <value>Closing time</value>
        [DataMember(Name = "closingtime", EmitDefaultValue = false)]
        public int Closingtime { get; set; }

        /// <summary>
        /// CM id
        /// </summary>
        /// <value>CM id</value>
        [DataMember(Name = "cmid", IsRequired = true, EmitDefaultValue = true)]
        public int Cmid { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name = "features", EmitDefaultValue = false)]
        public List<ModBigbluebuttonbnMeetingInfo200ResponseFeaturesInner> Features { get; set; }

        /// <summary>
        /// bigbluebuttonbn group id
        /// </summary>
        /// <value>bigbluebuttonbn group id</value>
        [DataMember(Name = "groupid", EmitDefaultValue = false)]
        public int Groupid { get; set; }

        /// <summary>
        /// Guest access enabled
        /// </summary>
        /// <value>Guest access enabled</value>
        [DataMember(Name = "guestaccessenabled", EmitDefaultValue = true)]
        public bool Guestaccessenabled { get; set; }

        /// <summary>
        /// Guest URL
        /// </summary>
        /// <value>Guest URL</value>
        [DataMember(Name = "guestjoinurl", EmitDefaultValue = false)]
        public string Guestjoinurl { get; set; }

        /// <summary>
        /// Guest join password
        /// </summary>
        /// <value>Guest join password</value>
        [DataMember(Name = "guestpassword", EmitDefaultValue = false)]
        public string Guestpassword { get; set; }

        /// <summary>
        /// Is moderator
        /// </summary>
        /// <value>Is moderator</value>
        [DataMember(Name = "ismoderator", IsRequired = true, EmitDefaultValue = true)]
        public bool Ismoderator { get; set; }

        /// <summary>
        /// Join URL
        /// </summary>
        /// <value>Join URL</value>
        [DataMember(Name = "joinurl", IsRequired = true, EmitDefaultValue = true)]
        public string Joinurl { get; set; }

        /// <summary>
        /// Meeting id
        /// </summary>
        /// <value>Meeting id</value>
        [DataMember(Name = "meetingid", IsRequired = true, EmitDefaultValue = true)]
        public string Meetingid { get; set; }

        /// <summary>
        /// Moderator count
        /// </summary>
        /// <value>Moderator count</value>
        [DataMember(Name = "moderatorcount", EmitDefaultValue = false)]
        public int Moderatorcount { get; set; }

        /// <summary>
        /// Several moderators ?
        /// </summary>
        /// <value>Several moderators ?</value>
        [DataMember(Name = "moderatorplural", EmitDefaultValue = true)]
        public bool Moderatorplural { get; set; }

        /// <summary>
        /// Opening time
        /// </summary>
        /// <value>Opening time</value>
        [DataMember(Name = "openingtime", EmitDefaultValue = false)]
        public int Openingtime { get; set; }

        /// <summary>
        /// Participant count
        /// </summary>
        /// <value>Participant count</value>
        [DataMember(Name = "participantcount", EmitDefaultValue = false)]
        public int Participantcount { get; set; }

        /// <summary>
        /// Several participants ?
        /// </summary>
        /// <value>Several participants ?</value>
        [DataMember(Name = "participantplural", EmitDefaultValue = true)]
        public bool Participantplural { get; set; }

        /// <summary>
        /// Gets or Sets Presentations
        /// </summary>
        [DataMember(Name = "presentations", IsRequired = true, EmitDefaultValue = true)]
        public List<ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner> Presentations { get; set; }

        /// <summary>
        /// Started at
        /// </summary>
        /// <value>Started at</value>
        [DataMember(Name = "startedat", EmitDefaultValue = false)]
        public int Startedat { get; set; }

        /// <summary>
        /// Status closed
        /// </summary>
        /// <value>Status closed</value>
        [DataMember(Name = "statusclosed", EmitDefaultValue = true)]
        public bool Statusclosed { get; set; }

        /// <summary>
        /// Status message
        /// </summary>
        /// <value>Status message</value>
        [DataMember(Name = "statusmessage", EmitDefaultValue = false)]
        public string Statusmessage { get; set; }

        /// <summary>
        /// Status open
        /// </summary>
        /// <value>Status open</value>
        [DataMember(Name = "statusopen", EmitDefaultValue = true)]
        public bool Statusopen { get; set; }

        /// <summary>
        /// Status running
        /// </summary>
        /// <value>Status running</value>
        [DataMember(Name = "statusrunning", EmitDefaultValue = true)]
        public bool Statusrunning { get; set; }

        /// <summary>
        /// User limit
        /// </summary>
        /// <value>User limit</value>
        [DataMember(Name = "userlimit", IsRequired = true, EmitDefaultValue = true)]
        public int Userlimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModBigbluebuttonbnMeetingInfo200Response {\n");
            sb.Append("  Bigbluebuttonbnid: ").Append(Bigbluebuttonbnid).Append("\n");
            sb.Append("  Canjoin: ").Append(Canjoin).Append("\n");
            sb.Append("  Closingtime: ").Append(Closingtime).Append("\n");
            sb.Append("  Cmid: ").Append(Cmid).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  Groupid: ").Append(Groupid).Append("\n");
            sb.Append("  Guestaccessenabled: ").Append(Guestaccessenabled).Append("\n");
            sb.Append("  Guestjoinurl: ").Append(Guestjoinurl).Append("\n");
            sb.Append("  Guestpassword: ").Append(Guestpassword).Append("\n");
            sb.Append("  Ismoderator: ").Append(Ismoderator).Append("\n");
            sb.Append("  Joinurl: ").Append(Joinurl).Append("\n");
            sb.Append("  Meetingid: ").Append(Meetingid).Append("\n");
            sb.Append("  Moderatorcount: ").Append(Moderatorcount).Append("\n");
            sb.Append("  Moderatorplural: ").Append(Moderatorplural).Append("\n");
            sb.Append("  Openingtime: ").Append(Openingtime).Append("\n");
            sb.Append("  Participantcount: ").Append(Participantcount).Append("\n");
            sb.Append("  Participantplural: ").Append(Participantplural).Append("\n");
            sb.Append("  Presentations: ").Append(Presentations).Append("\n");
            sb.Append("  Startedat: ").Append(Startedat).Append("\n");
            sb.Append("  Statusclosed: ").Append(Statusclosed).Append("\n");
            sb.Append("  Statusmessage: ").Append(Statusmessage).Append("\n");
            sb.Append("  Statusopen: ").Append(Statusopen).Append("\n");
            sb.Append("  Statusrunning: ").Append(Statusrunning).Append("\n");
            sb.Append("  Userlimit: ").Append(Userlimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
