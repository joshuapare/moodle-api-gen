/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreCalendarGetCalendarMonthlyView200Response
    /// </summary>
    [DataContract(Name = "core_calendar_get_calendar_monthly_view_200_response")]
    public partial class CoreCalendarGetCalendarMonthlyView200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCalendarGetCalendarMonthlyView200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreCalendarGetCalendarMonthlyView200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCalendarGetCalendarMonthlyView200Response" /> class.
        /// </summary>
        /// <param name="calendarinstanceid">calendarinstanceid (required) (default to 0).</param>
        /// <param name="categoryid">categoryid (default to 0).</param>
        /// <param name="courseid">courseid (required).</param>
        /// <param name="date">date (required).</param>
        /// <param name="daynames">daynames (required).</param>
        /// <param name="defaulteventcontext">defaulteventcontext (required) (default to 0).</param>
        /// <param name="filterSelector">filter_selector.</param>
        /// <param name="includenavigation">includenavigation (required) (default to true).</param>
        /// <param name="initialeventsloaded">initialeventsloaded (required) (default to true).</param>
        /// <param name="larrow">larrow (required).</param>
        /// <param name="nextperiod">nextperiod (required).</param>
        /// <param name="nextperiodlink">nextperiodlink (required).</param>
        /// <param name="nextperiodname">nextperiodname (required).</param>
        /// <param name="periodname">periodname (required).</param>
        /// <param name="previousperiod">previousperiod (required).</param>
        /// <param name="previousperiodlink">previousperiodlink (required).</param>
        /// <param name="previousperiodname">previousperiodname (required).</param>
        /// <param name="rarrow">rarrow (required).</param>
        /// <param name="showviewselector">showviewselector (required) (default to true).</param>
        /// <param name="url">url (required).</param>
        /// <param name="view">view (required) (default to &quot;null&quot;).</param>
        /// <param name="viewinginblock">viewinginblock (required) (default to false).</param>
        /// <param name="viewingmonth">viewingmonth (required) (default to true).</param>
        /// <param name="weeks">weeks (required).</param>
        public CoreCalendarGetCalendarMonthlyView200Response(int calendarinstanceid = 0, int categoryid = 0, int courseid = default(int), CoreCalendarGetCalendarDayView200ResponseNextperiod date = default(CoreCalendarGetCalendarDayView200ResponseNextperiod), List<CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInner> daynames = default(List<CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInner>), int defaulteventcontext = 0, string filterSelector = default(string), bool includenavigation = true, bool initialeventsloaded = true, string larrow = default(string), CoreCalendarGetCalendarDayView200ResponseNextperiod nextperiod = default(CoreCalendarGetCalendarDayView200ResponseNextperiod), string nextperiodlink = default(string), string nextperiodname = default(string), string periodname = default(string), CoreCalendarGetCalendarDayView200ResponseNextperiod previousperiod = default(CoreCalendarGetCalendarDayView200ResponseNextperiod), string previousperiodlink = default(string), string previousperiodname = default(string), string rarrow = default(string), bool showviewselector = true, string url = default(string), string view = @"null", bool viewinginblock = false, bool viewingmonth = true, List<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner> weeks = default(List<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner>))
        {
            this.Calendarinstanceid = calendarinstanceid;
            this.Courseid = courseid;
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new ArgumentNullException("date is a required property for CoreCalendarGetCalendarMonthlyView200Response and cannot be null");
            }
            this.Date = date;
            // to ensure "daynames" is required (not null)
            if (daynames == null)
            {
                throw new ArgumentNullException("daynames is a required property for CoreCalendarGetCalendarMonthlyView200Response and cannot be null");
            }
            this.Daynames = daynames;
            this.Defaulteventcontext = defaulteventcontext;
            this.Includenavigation = includenavigation;
            this.Initialeventsloaded = initialeventsloaded;
            // to ensure "larrow" is required (not null)
            if (larrow == null)
            {
                throw new ArgumentNullException("larrow is a required property for CoreCalendarGetCalendarMonthlyView200Response and cannot be null");
            }
            this.Larrow = larrow;
            // to ensure "nextperiod" is required (not null)
            if (nextperiod == null)
            {
                throw new ArgumentNullException("nextperiod is a required property for CoreCalendarGetCalendarMonthlyView200Response and cannot be null");
            }
            this.Nextperiod = nextperiod;
            // to ensure "nextperiodlink" is required (not null)
            if (nextperiodlink == null)
            {
                throw new ArgumentNullException("nextperiodlink is a required property for CoreCalendarGetCalendarMonthlyView200Response and cannot be null");
            }
            this.Nextperiodlink = nextperiodlink;
            // to ensure "nextperiodname" is required (not null)
            if (nextperiodname == null)
            {
                throw new ArgumentNullException("nextperiodname is a required property for CoreCalendarGetCalendarMonthlyView200Response and cannot be null");
            }
            this.Nextperiodname = nextperiodname;
            // to ensure "periodname" is required (not null)
            if (periodname == null)
            {
                throw new ArgumentNullException("periodname is a required property for CoreCalendarGetCalendarMonthlyView200Response and cannot be null");
            }
            this.Periodname = periodname;
            // to ensure "previousperiod" is required (not null)
            if (previousperiod == null)
            {
                throw new ArgumentNullException("previousperiod is a required property for CoreCalendarGetCalendarMonthlyView200Response and cannot be null");
            }
            this.Previousperiod = previousperiod;
            // to ensure "previousperiodlink" is required (not null)
            if (previousperiodlink == null)
            {
                throw new ArgumentNullException("previousperiodlink is a required property for CoreCalendarGetCalendarMonthlyView200Response and cannot be null");
            }
            this.Previousperiodlink = previousperiodlink;
            // to ensure "previousperiodname" is required (not null)
            if (previousperiodname == null)
            {
                throw new ArgumentNullException("previousperiodname is a required property for CoreCalendarGetCalendarMonthlyView200Response and cannot be null");
            }
            this.Previousperiodname = previousperiodname;
            // to ensure "rarrow" is required (not null)
            if (rarrow == null)
            {
                throw new ArgumentNullException("rarrow is a required property for CoreCalendarGetCalendarMonthlyView200Response and cannot be null");
            }
            this.Rarrow = rarrow;
            this.Showviewselector = showviewselector;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for CoreCalendarGetCalendarMonthlyView200Response and cannot be null");
            }
            this.Url = url;
            // to ensure "view" is required (not null)
            if (view == null)
            {
                throw new ArgumentNullException("view is a required property for CoreCalendarGetCalendarMonthlyView200Response and cannot be null");
            }
            this.View = view;
            this.Viewinginblock = viewinginblock;
            this.Viewingmonth = viewingmonth;
            // to ensure "weeks" is required (not null)
            if (weeks == null)
            {
                throw new ArgumentNullException("weeks is a required property for CoreCalendarGetCalendarMonthlyView200Response and cannot be null");
            }
            this.Weeks = weeks;
            this.Categoryid = categoryid;
            this.FilterSelector = filterSelector;
        }

        /// <summary>
        /// calendarinstanceid
        /// </summary>
        /// <value>calendarinstanceid</value>
        [DataMember(Name = "calendarinstanceid", IsRequired = true, EmitDefaultValue = true)]
        public int Calendarinstanceid { get; set; }

        /// <summary>
        /// categoryid
        /// </summary>
        /// <value>categoryid</value>
        [DataMember(Name = "categoryid", EmitDefaultValue = false)]
        public int Categoryid { get; set; }

        /// <summary>
        /// courseid
        /// </summary>
        /// <value>courseid</value>
        [DataMember(Name = "courseid", IsRequired = true, EmitDefaultValue = true)]
        public int Courseid { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public CoreCalendarGetCalendarDayView200ResponseNextperiod Date { get; set; }

        /// <summary>
        /// Gets or Sets Daynames
        /// </summary>
        [DataMember(Name = "daynames", IsRequired = true, EmitDefaultValue = true)]
        public List<CoreCalendarGetCalendarMonthlyView200ResponseDaynamesInner> Daynames { get; set; }

        /// <summary>
        /// defaulteventcontext
        /// </summary>
        /// <value>defaulteventcontext</value>
        [DataMember(Name = "defaulteventcontext", IsRequired = true, EmitDefaultValue = true)]
        public int Defaulteventcontext { get; set; }

        /// <summary>
        /// filter_selector
        /// </summary>
        /// <value>filter_selector</value>
        [DataMember(Name = "filter_selector", EmitDefaultValue = false)]
        public string FilterSelector { get; set; }

        /// <summary>
        /// includenavigation
        /// </summary>
        /// <value>includenavigation</value>
        [DataMember(Name = "includenavigation", IsRequired = true, EmitDefaultValue = true)]
        public bool Includenavigation { get; set; }

        /// <summary>
        /// initialeventsloaded
        /// </summary>
        /// <value>initialeventsloaded</value>
        [DataMember(Name = "initialeventsloaded", IsRequired = true, EmitDefaultValue = true)]
        public bool Initialeventsloaded { get; set; }

        /// <summary>
        /// larrow
        /// </summary>
        /// <value>larrow</value>
        [DataMember(Name = "larrow", IsRequired = true, EmitDefaultValue = true)]
        public string Larrow { get; set; }

        /// <summary>
        /// Gets or Sets Nextperiod
        /// </summary>
        [DataMember(Name = "nextperiod", IsRequired = true, EmitDefaultValue = true)]
        public CoreCalendarGetCalendarDayView200ResponseNextperiod Nextperiod { get; set; }

        /// <summary>
        /// nextperiodlink
        /// </summary>
        /// <value>nextperiodlink</value>
        [DataMember(Name = "nextperiodlink", IsRequired = true, EmitDefaultValue = true)]
        public string Nextperiodlink { get; set; }

        /// <summary>
        /// nextperiodname
        /// </summary>
        /// <value>nextperiodname</value>
        [DataMember(Name = "nextperiodname", IsRequired = true, EmitDefaultValue = true)]
        public string Nextperiodname { get; set; }

        /// <summary>
        /// periodname
        /// </summary>
        /// <value>periodname</value>
        [DataMember(Name = "periodname", IsRequired = true, EmitDefaultValue = true)]
        public string Periodname { get; set; }

        /// <summary>
        /// Gets or Sets Previousperiod
        /// </summary>
        [DataMember(Name = "previousperiod", IsRequired = true, EmitDefaultValue = true)]
        public CoreCalendarGetCalendarDayView200ResponseNextperiod Previousperiod { get; set; }

        /// <summary>
        /// previousperiodlink
        /// </summary>
        /// <value>previousperiodlink</value>
        [DataMember(Name = "previousperiodlink", IsRequired = true, EmitDefaultValue = true)]
        public string Previousperiodlink { get; set; }

        /// <summary>
        /// previousperiodname
        /// </summary>
        /// <value>previousperiodname</value>
        [DataMember(Name = "previousperiodname", IsRequired = true, EmitDefaultValue = true)]
        public string Previousperiodname { get; set; }

        /// <summary>
        /// rarrow
        /// </summary>
        /// <value>rarrow</value>
        [DataMember(Name = "rarrow", IsRequired = true, EmitDefaultValue = true)]
        public string Rarrow { get; set; }

        /// <summary>
        /// showviewselector
        /// </summary>
        /// <value>showviewselector</value>
        [DataMember(Name = "showviewselector", IsRequired = true, EmitDefaultValue = true)]
        public bool Showviewselector { get; set; }

        /// <summary>
        /// url
        /// </summary>
        /// <value>url</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// view
        /// </summary>
        /// <value>view</value>
        [DataMember(Name = "view", IsRequired = true, EmitDefaultValue = true)]
        public string View { get; set; }

        /// <summary>
        /// viewinginblock
        /// </summary>
        /// <value>viewinginblock</value>
        [DataMember(Name = "viewinginblock", IsRequired = true, EmitDefaultValue = true)]
        public bool Viewinginblock { get; set; }

        /// <summary>
        /// viewingmonth
        /// </summary>
        /// <value>viewingmonth</value>
        [DataMember(Name = "viewingmonth", IsRequired = true, EmitDefaultValue = true)]
        public bool Viewingmonth { get; set; }

        /// <summary>
        /// Gets or Sets Weeks
        /// </summary>
        [DataMember(Name = "weeks", IsRequired = true, EmitDefaultValue = true)]
        public List<CoreCalendarGetCalendarMonthlyView200ResponseWeeksInner> Weeks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCalendarGetCalendarMonthlyView200Response {\n");
            sb.Append("  Calendarinstanceid: ").Append(Calendarinstanceid).Append("\n");
            sb.Append("  Categoryid: ").Append(Categoryid).Append("\n");
            sb.Append("  Courseid: ").Append(Courseid).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Daynames: ").Append(Daynames).Append("\n");
            sb.Append("  Defaulteventcontext: ").Append(Defaulteventcontext).Append("\n");
            sb.Append("  FilterSelector: ").Append(FilterSelector).Append("\n");
            sb.Append("  Includenavigation: ").Append(Includenavigation).Append("\n");
            sb.Append("  Initialeventsloaded: ").Append(Initialeventsloaded).Append("\n");
            sb.Append("  Larrow: ").Append(Larrow).Append("\n");
            sb.Append("  Nextperiod: ").Append(Nextperiod).Append("\n");
            sb.Append("  Nextperiodlink: ").Append(Nextperiodlink).Append("\n");
            sb.Append("  Nextperiodname: ").Append(Nextperiodname).Append("\n");
            sb.Append("  Periodname: ").Append(Periodname).Append("\n");
            sb.Append("  Previousperiod: ").Append(Previousperiod).Append("\n");
            sb.Append("  Previousperiodlink: ").Append(Previousperiodlink).Append("\n");
            sb.Append("  Previousperiodname: ").Append(Previousperiodname).Append("\n");
            sb.Append("  Rarrow: ").Append(Rarrow).Append("\n");
            sb.Append("  Showviewselector: ").Append(Showviewselector).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  View: ").Append(View).Append("\n");
            sb.Append("  Viewinginblock: ").Append(Viewinginblock).Append("\n");
            sb.Append("  Viewingmonth: ").Append(Viewingmonth).Append("\n");
            sb.Append("  Weeks: ").Append(Weeks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
