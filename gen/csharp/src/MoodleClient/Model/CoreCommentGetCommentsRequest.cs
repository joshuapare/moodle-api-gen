/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreCommentGetCommentsRequest
    /// </summary>
    [DataContract(Name = "core_comment_get_comments_request")]
    public partial class CoreCommentGetCommentsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCommentGetCommentsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreCommentGetCommentsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCommentGetCommentsRequest" /> class.
        /// </summary>
        /// <param name="area">string comment area (default to &quot;&quot;).</param>
        /// <param name="component">component (required).</param>
        /// <param name="contextlevel">contextlevel system, course, user... (required).</param>
        /// <param name="instanceid">the Instance id of item associated with the context level (required) (default to null).</param>
        /// <param name="itemid">associated id (required).</param>
        /// <param name="page">page number (0 based) (default to 0).</param>
        /// <param name="sortdirection">Sort direction: ASC or DESC (default to &quot;DESC&quot;).</param>
        public CoreCommentGetCommentsRequest(string area = @"", string component = default(string), string contextlevel = default(string), int instanceid = null, int itemid = default(int), int page = 0, string sortdirection = @"DESC")
        {
            // to ensure "component" is required (not null)
            if (component == null)
            {
                throw new ArgumentNullException("component is a required property for CoreCommentGetCommentsRequest and cannot be null");
            }
            this.Component = component;
            // to ensure "contextlevel" is required (not null)
            if (contextlevel == null)
            {
                throw new ArgumentNullException("contextlevel is a required property for CoreCommentGetCommentsRequest and cannot be null");
            }
            this.Contextlevel = contextlevel;
            this.Instanceid = instanceid;
            this.Itemid = itemid;
            // use default value if no "area" provided
            this.Area = area ?? @"";
            this.Page = page;
            // use default value if no "sortdirection" provided
            this.Sortdirection = sortdirection ?? @"DESC";
        }

        /// <summary>
        /// string comment area
        /// </summary>
        /// <value>string comment area</value>
        [DataMember(Name = "area", EmitDefaultValue = false)]
        public string Area { get; set; }

        /// <summary>
        /// component
        /// </summary>
        /// <value>component</value>
        [DataMember(Name = "component", IsRequired = true, EmitDefaultValue = true)]
        public string Component { get; set; }

        /// <summary>
        /// contextlevel system, course, user...
        /// </summary>
        /// <value>contextlevel system, course, user...</value>
        [DataMember(Name = "contextlevel", IsRequired = true, EmitDefaultValue = true)]
        public string Contextlevel { get; set; }

        /// <summary>
        /// the Instance id of item associated with the context level
        /// </summary>
        /// <value>the Instance id of item associated with the context level</value>
        [DataMember(Name = "instanceid", IsRequired = true, EmitDefaultValue = true)]
        public int Instanceid { get; set; }

        /// <summary>
        /// associated id
        /// </summary>
        /// <value>associated id</value>
        [DataMember(Name = "itemid", IsRequired = true, EmitDefaultValue = true)]
        public int Itemid { get; set; }

        /// <summary>
        /// page number (0 based)
        /// </summary>
        /// <value>page number (0 based)</value>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public int Page { get; set; }

        /// <summary>
        /// Sort direction: ASC or DESC
        /// </summary>
        /// <value>Sort direction: ASC or DESC</value>
        [DataMember(Name = "sortdirection", EmitDefaultValue = false)]
        public string Sortdirection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCommentGetCommentsRequest {\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Contextlevel: ").Append(Contextlevel).Append("\n");
            sb.Append("  Instanceid: ").Append(Instanceid).Append("\n");
            sb.Append("  Itemid: ").Append(Itemid).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Sortdirection: ").Append(Sortdirection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
