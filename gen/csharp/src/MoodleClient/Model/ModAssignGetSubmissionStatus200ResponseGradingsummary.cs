/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModAssignGetSubmissionStatus200ResponseGradingsummary
    /// </summary>
    [DataContract(Name = "mod_assign_get_submission_status_200_response_gradingsummary")]
    public partial class ModAssignGetSubmissionStatus200ResponseGradingsummary : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignGetSubmissionStatus200ResponseGradingsummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModAssignGetSubmissionStatus200ResponseGradingsummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModAssignGetSubmissionStatus200ResponseGradingsummary" /> class.
        /// </summary>
        /// <param name="participantcount">Number of users who can submit. (required) (default to null).</param>
        /// <param name="submissiondraftscount">Number of submissions in draft status. (required) (default to null).</param>
        /// <param name="submissionsenabled">Whether submissions are enabled or not. (required) (default to null).</param>
        /// <param name="submissionsneedgradingcount">Number of submissions that need grading. (required) (default to null).</param>
        /// <param name="submissionssubmittedcount">Number of submissions in submitted status. (required) (default to null).</param>
        /// <param name="warnofungroupedusers">Whether we need to warn people that there                                                                         are users without groups (&#39;warningrequired&#39;), warn                                                                         people there are users who will submit in the default                                                                         group (&#39;warningoptional&#39;) or no warning (&#39;&#39;). (required) (default to &quot;null&quot;).</param>
        public ModAssignGetSubmissionStatus200ResponseGradingsummary(int participantcount = null, int submissiondraftscount = null, bool submissionsenabled = null, int submissionsneedgradingcount = null, int submissionssubmittedcount = null, string warnofungroupedusers = @"null")
        {
            this.Participantcount = participantcount;
            this.Submissiondraftscount = submissiondraftscount;
            this.Submissionsenabled = submissionsenabled;
            this.Submissionsneedgradingcount = submissionsneedgradingcount;
            this.Submissionssubmittedcount = submissionssubmittedcount;
            // to ensure "warnofungroupedusers" is required (not null)
            if (warnofungroupedusers == null)
            {
                throw new ArgumentNullException("warnofungroupedusers is a required property for ModAssignGetSubmissionStatus200ResponseGradingsummary and cannot be null");
            }
            this.Warnofungroupedusers = warnofungroupedusers;
        }

        /// <summary>
        /// Number of users who can submit.
        /// </summary>
        /// <value>Number of users who can submit.</value>
        [DataMember(Name = "participantcount", IsRequired = true, EmitDefaultValue = true)]
        public int Participantcount { get; set; }

        /// <summary>
        /// Number of submissions in draft status.
        /// </summary>
        /// <value>Number of submissions in draft status.</value>
        [DataMember(Name = "submissiondraftscount", IsRequired = true, EmitDefaultValue = true)]
        public int Submissiondraftscount { get; set; }

        /// <summary>
        /// Whether submissions are enabled or not.
        /// </summary>
        /// <value>Whether submissions are enabled or not.</value>
        [DataMember(Name = "submissionsenabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Submissionsenabled { get; set; }

        /// <summary>
        /// Number of submissions that need grading.
        /// </summary>
        /// <value>Number of submissions that need grading.</value>
        [DataMember(Name = "submissionsneedgradingcount", IsRequired = true, EmitDefaultValue = true)]
        public int Submissionsneedgradingcount { get; set; }

        /// <summary>
        /// Number of submissions in submitted status.
        /// </summary>
        /// <value>Number of submissions in submitted status.</value>
        [DataMember(Name = "submissionssubmittedcount", IsRequired = true, EmitDefaultValue = true)]
        public int Submissionssubmittedcount { get; set; }

        /// <summary>
        /// Whether we need to warn people that there                                                                         are users without groups (&#39;warningrequired&#39;), warn                                                                         people there are users who will submit in the default                                                                         group (&#39;warningoptional&#39;) or no warning (&#39;&#39;).
        /// </summary>
        /// <value>Whether we need to warn people that there                                                                         are users without groups (&#39;warningrequired&#39;), warn                                                                         people there are users who will submit in the default                                                                         group (&#39;warningoptional&#39;) or no warning (&#39;&#39;).</value>
        [DataMember(Name = "warnofungroupedusers", IsRequired = true, EmitDefaultValue = true)]
        public string Warnofungroupedusers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModAssignGetSubmissionStatus200ResponseGradingsummary {\n");
            sb.Append("  Participantcount: ").Append(Participantcount).Append("\n");
            sb.Append("  Submissiondraftscount: ").Append(Submissiondraftscount).Append("\n");
            sb.Append("  Submissionsenabled: ").Append(Submissionsenabled).Append("\n");
            sb.Append("  Submissionsneedgradingcount: ").Append(Submissionsneedgradingcount).Append("\n");
            sb.Append("  Submissionssubmittedcount: ").Append(Submissionssubmittedcount).Append("\n");
            sb.Append("  Warnofungroupedusers: ").Append(Warnofungroupedusers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
