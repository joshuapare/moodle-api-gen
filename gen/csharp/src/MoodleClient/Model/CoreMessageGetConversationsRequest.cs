/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreMessageGetConversationsRequest
    /// </summary>
    [DataContract(Name = "core_message_get_conversations_request")]
    public partial class CoreMessageGetConversationsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreMessageGetConversationsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreMessageGetConversationsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreMessageGetConversationsRequest" /> class.
        /// </summary>
        /// <param name="favourites">Whether to restrict the results to contain NO favourite                 conversations (false), ONLY favourite conversation (true), or ignore any restriction altogether (null) (default to null).</param>
        /// <param name="limitfrom">The offset to start at (default to 0).</param>
        /// <param name="limitnum">Limit number of conversations to this (default to 0).</param>
        /// <param name="mergeself">Whether to include self-conversations (true) or ONLY private                     conversations (false) when private conversations are requested. (default to false).</param>
        /// <param name="type">Filter by type (default to null).</param>
        /// <param name="userid">The id of the user who we are viewing conversations for (required).</param>
        public CoreMessageGetConversationsRequest(bool favourites = null, int limitfrom = 0, int limitnum = 0, bool mergeself = false, int type = null, int userid = default(int))
        {
            this.Userid = userid;
            this.Favourites = favourites;
            this.Limitfrom = limitfrom;
            this.Limitnum = limitnum;
            this.Mergeself = mergeself;
            this.Type = type;
        }

        /// <summary>
        /// Whether to restrict the results to contain NO favourite                 conversations (false), ONLY favourite conversation (true), or ignore any restriction altogether (null)
        /// </summary>
        /// <value>Whether to restrict the results to contain NO favourite                 conversations (false), ONLY favourite conversation (true), or ignore any restriction altogether (null)</value>
        [DataMember(Name = "favourites", EmitDefaultValue = true)]
        public bool Favourites { get; set; }

        /// <summary>
        /// The offset to start at
        /// </summary>
        /// <value>The offset to start at</value>
        [DataMember(Name = "limitfrom", EmitDefaultValue = false)]
        public int Limitfrom { get; set; }

        /// <summary>
        /// Limit number of conversations to this
        /// </summary>
        /// <value>Limit number of conversations to this</value>
        [DataMember(Name = "limitnum", EmitDefaultValue = false)]
        public int Limitnum { get; set; }

        /// <summary>
        /// Whether to include self-conversations (true) or ONLY private                     conversations (false) when private conversations are requested.
        /// </summary>
        /// <value>Whether to include self-conversations (true) or ONLY private                     conversations (false) when private conversations are requested.</value>
        [DataMember(Name = "mergeself", EmitDefaultValue = true)]
        public bool Mergeself { get; set; }

        /// <summary>
        /// Filter by type
        /// </summary>
        /// <value>Filter by type</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public int Type { get; set; }

        /// <summary>
        /// The id of the user who we are viewing conversations for
        /// </summary>
        /// <value>The id of the user who we are viewing conversations for</value>
        [DataMember(Name = "userid", IsRequired = true, EmitDefaultValue = true)]
        public int Userid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreMessageGetConversationsRequest {\n");
            sb.Append("  Favourites: ").Append(Favourites).Append("\n");
            sb.Append("  Limitfrom: ").Append(Limitfrom).Append("\n");
            sb.Append("  Limitnum: ").Append(Limitnum).Append("\n");
            sb.Append("  Mergeself: ").Append(Mergeself).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
