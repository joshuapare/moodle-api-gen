/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner
    /// </summary>
    [DataContract(Name = "core_course_get_enrolled_courses_by_timeline_classification_200_response_courses_inner")]
    public partial class CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner" /> class.
        /// </summary>
        /// <param name="coursecategory">coursecategory.</param>
        /// <param name="courseimage">courseimage.</param>
        /// <param name="enddate">enddate.</param>
        /// <param name="fullname">fullname.</param>
        /// <param name="fullnamedisplay">fullnamedisplay.</param>
        /// <param name="hasprogress">hasprogress.</param>
        /// <param name="hidden">hidden.</param>
        /// <param name="id">id.</param>
        /// <param name="idnumber">idnumber.</param>
        /// <param name="isfavourite">isfavourite.</param>
        /// <param name="pdfexportfont">pdfexportfont.</param>
        /// <param name="progress">progress.</param>
        /// <param name="shortname">shortname.</param>
        /// <param name="showactivitydates">showactivitydates.</param>
        /// <param name="showcompletionconditions">showcompletionconditions.</param>
        /// <param name="showshortname">showshortname.</param>
        /// <param name="startdate">startdate.</param>
        /// <param name="summary">summary.</param>
        /// <param name="summaryformat">summary format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN).</param>
        /// <param name="timeaccess">timeaccess.</param>
        /// <param name="viewurl">viewurl.</param>
        /// <param name="visible">visible.</param>
        public CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner(string coursecategory = default(string), string courseimage = default(string), int enddate = default(int), string fullname = default(string), string fullnamedisplay = default(string), bool hasprogress = default(bool), bool hidden = default(bool), int id = default(int), string idnumber = default(string), bool isfavourite = default(bool), string pdfexportfont = default(string), int progress = default(int), string shortname = default(string), bool showactivitydates = default(bool), bool showcompletionconditions = default(bool), bool showshortname = default(bool), int startdate = default(int), string summary = default(string), int summaryformat = default(int), int timeaccess = default(int), string viewurl = default(string), bool visible = default(bool))
        {
            this.Coursecategory = coursecategory;
            this.Courseimage = courseimage;
            this.Enddate = enddate;
            this.Fullname = fullname;
            this.Fullnamedisplay = fullnamedisplay;
            this.Hasprogress = hasprogress;
            this.Hidden = hidden;
            this.Id = id;
            this.Idnumber = idnumber;
            this.Isfavourite = isfavourite;
            this.Pdfexportfont = pdfexportfont;
            this.Progress = progress;
            this.Shortname = shortname;
            this.Showactivitydates = showactivitydates;
            this.Showcompletionconditions = showcompletionconditions;
            this.Showshortname = showshortname;
            this.Startdate = startdate;
            this.Summary = summary;
            this.Summaryformat = summaryformat;
            this.Timeaccess = timeaccess;
            this.Viewurl = viewurl;
            this.Visible = visible;
        }

        /// <summary>
        /// coursecategory
        /// </summary>
        /// <value>coursecategory</value>
        [DataMember(Name = "coursecategory", EmitDefaultValue = false)]
        public string Coursecategory { get; set; }

        /// <summary>
        /// courseimage
        /// </summary>
        /// <value>courseimage</value>
        [DataMember(Name = "courseimage", EmitDefaultValue = false)]
        public string Courseimage { get; set; }

        /// <summary>
        /// enddate
        /// </summary>
        /// <value>enddate</value>
        [DataMember(Name = "enddate", EmitDefaultValue = false)]
        public int Enddate { get; set; }

        /// <summary>
        /// fullname
        /// </summary>
        /// <value>fullname</value>
        [DataMember(Name = "fullname", EmitDefaultValue = false)]
        public string Fullname { get; set; }

        /// <summary>
        /// fullnamedisplay
        /// </summary>
        /// <value>fullnamedisplay</value>
        [DataMember(Name = "fullnamedisplay", EmitDefaultValue = false)]
        public string Fullnamedisplay { get; set; }

        /// <summary>
        /// hasprogress
        /// </summary>
        /// <value>hasprogress</value>
        [DataMember(Name = "hasprogress", EmitDefaultValue = true)]
        public bool Hasprogress { get; set; }

        /// <summary>
        /// hidden
        /// </summary>
        /// <value>hidden</value>
        [DataMember(Name = "hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// idnumber
        /// </summary>
        /// <value>idnumber</value>
        [DataMember(Name = "idnumber", EmitDefaultValue = false)]
        public string Idnumber { get; set; }

        /// <summary>
        /// isfavourite
        /// </summary>
        /// <value>isfavourite</value>
        [DataMember(Name = "isfavourite", EmitDefaultValue = true)]
        public bool Isfavourite { get; set; }

        /// <summary>
        /// pdfexportfont
        /// </summary>
        /// <value>pdfexportfont</value>
        [DataMember(Name = "pdfexportfont", EmitDefaultValue = false)]
        public string Pdfexportfont { get; set; }

        /// <summary>
        /// progress
        /// </summary>
        /// <value>progress</value>
        [DataMember(Name = "progress", EmitDefaultValue = false)]
        public int Progress { get; set; }

        /// <summary>
        /// shortname
        /// </summary>
        /// <value>shortname</value>
        [DataMember(Name = "shortname", EmitDefaultValue = false)]
        public string Shortname { get; set; }

        /// <summary>
        /// showactivitydates
        /// </summary>
        /// <value>showactivitydates</value>
        [DataMember(Name = "showactivitydates", EmitDefaultValue = true)]
        public bool Showactivitydates { get; set; }

        /// <summary>
        /// showcompletionconditions
        /// </summary>
        /// <value>showcompletionconditions</value>
        [DataMember(Name = "showcompletionconditions", EmitDefaultValue = true)]
        public bool Showcompletionconditions { get; set; }

        /// <summary>
        /// showshortname
        /// </summary>
        /// <value>showshortname</value>
        [DataMember(Name = "showshortname", EmitDefaultValue = true)]
        public bool Showshortname { get; set; }

        /// <summary>
        /// startdate
        /// </summary>
        /// <value>startdate</value>
        [DataMember(Name = "startdate", EmitDefaultValue = false)]
        public int Startdate { get; set; }

        /// <summary>
        /// summary
        /// </summary>
        /// <value>summary</value>
        [DataMember(Name = "summary", EmitDefaultValue = false)]
        public string Summary { get; set; }

        /// <summary>
        /// summary format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>summary format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "summaryformat", EmitDefaultValue = false)]
        public int Summaryformat { get; set; }

        /// <summary>
        /// timeaccess
        /// </summary>
        /// <value>timeaccess</value>
        [DataMember(Name = "timeaccess", EmitDefaultValue = false)]
        public int Timeaccess { get; set; }

        /// <summary>
        /// viewurl
        /// </summary>
        /// <value>viewurl</value>
        [DataMember(Name = "viewurl", EmitDefaultValue = false)]
        public string Viewurl { get; set; }

        /// <summary>
        /// visible
        /// </summary>
        /// <value>visible</value>
        [DataMember(Name = "visible", EmitDefaultValue = true)]
        public bool Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCourseGetEnrolledCoursesByTimelineClassification200ResponseCoursesInner {\n");
            sb.Append("  Coursecategory: ").Append(Coursecategory).Append("\n");
            sb.Append("  Courseimage: ").Append(Courseimage).Append("\n");
            sb.Append("  Enddate: ").Append(Enddate).Append("\n");
            sb.Append("  Fullname: ").Append(Fullname).Append("\n");
            sb.Append("  Fullnamedisplay: ").Append(Fullnamedisplay).Append("\n");
            sb.Append("  Hasprogress: ").Append(Hasprogress).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Idnumber: ").Append(Idnumber).Append("\n");
            sb.Append("  Isfavourite: ").Append(Isfavourite).Append("\n");
            sb.Append("  Pdfexportfont: ").Append(Pdfexportfont).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Shortname: ").Append(Shortname).Append("\n");
            sb.Append("  Showactivitydates: ").Append(Showactivitydates).Append("\n");
            sb.Append("  Showcompletionconditions: ").Append(Showcompletionconditions).Append("\n");
            sb.Append("  Showshortname: ").Append(Showshortname).Append("\n");
            sb.Append("  Startdate: ").Append(Startdate).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Summaryformat: ").Append(Summaryformat).Append("\n");
            sb.Append("  Timeaccess: ").Append(Timeaccess).Append("\n");
            sb.Append("  Viewurl: ").Append(Viewurl).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
