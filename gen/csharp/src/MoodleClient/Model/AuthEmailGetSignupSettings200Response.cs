/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// AuthEmailGetSignupSettings200Response
    /// </summary>
    [DataContract(Name = "auth_email_get_signup_settings_200_response")]
    public partial class AuthEmailGetSignupSettings200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEmailGetSignupSettings200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthEmailGetSignupSettings200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEmailGetSignupSettings200Response" /> class.
        /// </summary>
        /// <param name="country">Default country (default to &quot;null&quot;).</param>
        /// <param name="defaultcity">Default city (default to &quot;null&quot;).</param>
        /// <param name="namefields">namefields (required).</param>
        /// <param name="passwordpolicy">Password policy (default to &quot;null&quot;).</param>
        /// <param name="profilefields">profilefields.</param>
        /// <param name="recaptchachallengehash">Recaptcha challenge hash (default to &quot;null&quot;).</param>
        /// <param name="recaptchachallengeimage">Recaptcha challenge noscript image (default to &quot;null&quot;).</param>
        /// <param name="recaptchachallengejs">Recaptcha challenge js url (default to &quot;null&quot;).</param>
        /// <param name="recaptchapublickey">Recaptcha public key (default to &quot;null&quot;).</param>
        /// <param name="sitepolicy">Site policy (default to &quot;null&quot;).</param>
        /// <param name="sitepolicyhandler">Site policy handler (default to &quot;null&quot;).</param>
        /// <param name="warnings">warnings.</param>
        public AuthEmailGetSignupSettings200Response(string country = @"null", string defaultcity = @"null", List<Object> namefields = default(List<Object>), string passwordpolicy = @"null", List<AuthEmailGetSignupSettings200ResponseProfilefieldsInner> profilefields = default(List<AuthEmailGetSignupSettings200ResponseProfilefieldsInner>), string recaptchachallengehash = @"null", string recaptchachallengeimage = @"null", string recaptchachallengejs = @"null", string recaptchapublickey = @"null", string sitepolicy = @"null", string sitepolicyhandler = @"null", List<AuthEmailGetSignupSettings200ResponseWarningsInner> warnings = default(List<AuthEmailGetSignupSettings200ResponseWarningsInner>))
        {
            // to ensure "namefields" is required (not null)
            if (namefields == null)
            {
                throw new ArgumentNullException("namefields is a required property for AuthEmailGetSignupSettings200Response and cannot be null");
            }
            this.Namefields = namefields;
            // use default value if no "country" provided
            this.Country = country ?? @"null";
            // use default value if no "defaultcity" provided
            this.Defaultcity = defaultcity ?? @"null";
            // use default value if no "passwordpolicy" provided
            this.Passwordpolicy = passwordpolicy ?? @"null";
            this.Profilefields = profilefields;
            // use default value if no "recaptchachallengehash" provided
            this.Recaptchachallengehash = recaptchachallengehash ?? @"null";
            // use default value if no "recaptchachallengeimage" provided
            this.Recaptchachallengeimage = recaptchachallengeimage ?? @"null";
            // use default value if no "recaptchachallengejs" provided
            this.Recaptchachallengejs = recaptchachallengejs ?? @"null";
            // use default value if no "recaptchapublickey" provided
            this.Recaptchapublickey = recaptchapublickey ?? @"null";
            // use default value if no "sitepolicy" provided
            this.Sitepolicy = sitepolicy ?? @"null";
            // use default value if no "sitepolicyhandler" provided
            this.Sitepolicyhandler = sitepolicyhandler ?? @"null";
            this.Warnings = warnings;
        }

        /// <summary>
        /// Default country
        /// </summary>
        /// <value>Default country</value>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Default city
        /// </summary>
        /// <value>Default city</value>
        [DataMember(Name = "defaultcity", EmitDefaultValue = false)]
        public string Defaultcity { get; set; }

        /// <summary>
        /// Gets or Sets Namefields
        /// </summary>
        [DataMember(Name = "namefields", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Namefields { get; set; }

        /// <summary>
        /// Password policy
        /// </summary>
        /// <value>Password policy</value>
        [DataMember(Name = "passwordpolicy", EmitDefaultValue = false)]
        public string Passwordpolicy { get; set; }

        /// <summary>
        /// Gets or Sets Profilefields
        /// </summary>
        [DataMember(Name = "profilefields", EmitDefaultValue = false)]
        public List<AuthEmailGetSignupSettings200ResponseProfilefieldsInner> Profilefields { get; set; }

        /// <summary>
        /// Recaptcha challenge hash
        /// </summary>
        /// <value>Recaptcha challenge hash</value>
        [DataMember(Name = "recaptchachallengehash", EmitDefaultValue = false)]
        public string Recaptchachallengehash { get; set; }

        /// <summary>
        /// Recaptcha challenge noscript image
        /// </summary>
        /// <value>Recaptcha challenge noscript image</value>
        [DataMember(Name = "recaptchachallengeimage", EmitDefaultValue = false)]
        public string Recaptchachallengeimage { get; set; }

        /// <summary>
        /// Recaptcha challenge js url
        /// </summary>
        /// <value>Recaptcha challenge js url</value>
        [DataMember(Name = "recaptchachallengejs", EmitDefaultValue = false)]
        public string Recaptchachallengejs { get; set; }

        /// <summary>
        /// Recaptcha public key
        /// </summary>
        /// <value>Recaptcha public key</value>
        [DataMember(Name = "recaptchapublickey", EmitDefaultValue = false)]
        public string Recaptchapublickey { get; set; }

        /// <summary>
        /// Site policy
        /// </summary>
        /// <value>Site policy</value>
        [DataMember(Name = "sitepolicy", EmitDefaultValue = false)]
        public string Sitepolicy { get; set; }

        /// <summary>
        /// Site policy handler
        /// </summary>
        /// <value>Site policy handler</value>
        [DataMember(Name = "sitepolicyhandler", EmitDefaultValue = false)]
        public string Sitepolicyhandler { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<AuthEmailGetSignupSettings200ResponseWarningsInner> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthEmailGetSignupSettings200Response {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Defaultcity: ").Append(Defaultcity).Append("\n");
            sb.Append("  Namefields: ").Append(Namefields).Append("\n");
            sb.Append("  Passwordpolicy: ").Append(Passwordpolicy).Append("\n");
            sb.Append("  Profilefields: ").Append(Profilefields).Append("\n");
            sb.Append("  Recaptchachallengehash: ").Append(Recaptchachallengehash).Append("\n");
            sb.Append("  Recaptchachallengeimage: ").Append(Recaptchachallengeimage).Append("\n");
            sb.Append("  Recaptchachallengejs: ").Append(Recaptchachallengejs).Append("\n");
            sb.Append("  Recaptchapublickey: ").Append(Recaptchapublickey).Append("\n");
            sb.Append("  Sitepolicy: ").Append(Sitepolicy).Append("\n");
            sb.Append("  Sitepolicyhandler: ").Append(Sitepolicyhandler).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
