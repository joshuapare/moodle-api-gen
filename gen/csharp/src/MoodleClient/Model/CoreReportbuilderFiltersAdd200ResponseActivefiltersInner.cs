/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreReportbuilderFiltersAdd200ResponseActivefiltersInner
    /// </summary>
    [DataContract(Name = "core_reportbuilder_filters_add_200_response_activefilters_inner")]
    public partial class CoreReportbuilderFiltersAdd200ResponseActivefiltersInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreReportbuilderFiltersAdd200ResponseActivefiltersInner" /> class.
        /// </summary>
        /// <param name="entityname">entityname (default to &quot;null&quot;).</param>
        /// <param name="heading">heading.</param>
        /// <param name="headingeditable">headingeditable (default to &quot;null&quot;).</param>
        /// <param name="id">id.</param>
        /// <param name="movetitle">movetitle.</param>
        /// <param name="sortorder">sortorder.</param>
        public CoreReportbuilderFiltersAdd200ResponseActivefiltersInner(string entityname = @"null", string heading = default(string), string headingeditable = @"null", int id = default(int), string movetitle = default(string), int sortorder = default(int))
        {
            // use default value if no "entityname" provided
            this.Entityname = entityname ?? @"null";
            this.Heading = heading;
            // use default value if no "headingeditable" provided
            this.Headingeditable = headingeditable ?? @"null";
            this.Id = id;
            this.Movetitle = movetitle;
            this.Sortorder = sortorder;
        }

        /// <summary>
        /// entityname
        /// </summary>
        /// <value>entityname</value>
        [DataMember(Name = "entityname", EmitDefaultValue = false)]
        public string Entityname { get; set; }

        /// <summary>
        /// heading
        /// </summary>
        /// <value>heading</value>
        [DataMember(Name = "heading", EmitDefaultValue = false)]
        public string Heading { get; set; }

        /// <summary>
        /// headingeditable
        /// </summary>
        /// <value>headingeditable</value>
        [DataMember(Name = "headingeditable", EmitDefaultValue = false)]
        public string Headingeditable { get; set; }

        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// movetitle
        /// </summary>
        /// <value>movetitle</value>
        [DataMember(Name = "movetitle", EmitDefaultValue = false)]
        public string Movetitle { get; set; }

        /// <summary>
        /// sortorder
        /// </summary>
        /// <value>sortorder</value>
        [DataMember(Name = "sortorder", EmitDefaultValue = false)]
        public int Sortorder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreReportbuilderFiltersAdd200ResponseActivefiltersInner {\n");
            sb.Append("  Entityname: ").Append(Entityname).Append("\n");
            sb.Append("  Heading: ").Append(Heading).Append("\n");
            sb.Append("  Headingeditable: ").Append(Headingeditable).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Movetitle: ").Append(Movetitle).Append("\n");
            sb.Append("  Sortorder: ").Append(Sortorder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
