/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// Scale information
    /// </summary>
    [DataContract(Name = "mod_forum_get_discussion_posts_200_response_ratinginfo_scales_inner")]
    public partial class ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner" /> class.
        /// </summary>
        /// <param name="courseid">Course id..</param>
        /// <param name="id">Scale id..</param>
        /// <param name="isnumeric">Whether is a numeric scale..</param>
        /// <param name="items">items.</param>
        /// <param name="max">Max value for the scale..</param>
        /// <param name="name">Scale name (when a real scale is used)..</param>
        public ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner(int courseid = default(int), int id = default(int), bool isnumeric = default(bool), List<ModForumGetDiscussionPosts200ResponseRatinginfoScalesInnerItemsInner> items = default(List<ModForumGetDiscussionPosts200ResponseRatinginfoScalesInnerItemsInner>), int max = default(int), string name = default(string))
        {
            this.Courseid = courseid;
            this.Id = id;
            this.Isnumeric = isnumeric;
            this.Items = items;
            this.Max = max;
            this.Name = name;
        }

        /// <summary>
        /// Course id.
        /// </summary>
        /// <value>Course id.</value>
        [DataMember(Name = "courseid", EmitDefaultValue = false)]
        public int Courseid { get; set; }

        /// <summary>
        /// Scale id.
        /// </summary>
        /// <value>Scale id.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Whether is a numeric scale.
        /// </summary>
        /// <value>Whether is a numeric scale.</value>
        [DataMember(Name = "isnumeric", EmitDefaultValue = true)]
        public bool Isnumeric { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<ModForumGetDiscussionPosts200ResponseRatinginfoScalesInnerItemsInner> Items { get; set; }

        /// <summary>
        /// Max value for the scale.
        /// </summary>
        /// <value>Max value for the scale.</value>
        [DataMember(Name = "max", EmitDefaultValue = false)]
        public int Max { get; set; }

        /// <summary>
        /// Scale name (when a real scale is used).
        /// </summary>
        /// <value>Scale name (when a real scale is used).</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModForumGetDiscussionPosts200ResponseRatinginfoScalesInner {\n");
            sb.Append("  Courseid: ").Append(Courseid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Isnumeric: ").Append(Isnumeric).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
