/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreBlockGetCourseBlocks200ResponseBlocksInnerContents
    /// </summary>
    [DataContract(Name = "core_block_get_course_blocks_200_response_blocks_inner_contents")]
    public partial class CoreBlockGetCourseBlocks200ResponseBlocksInnerContents : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreBlockGetCourseBlocks200ResponseBlocksInnerContents" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreBlockGetCourseBlocks200ResponseBlocksInnerContents() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreBlockGetCourseBlocks200ResponseBlocksInnerContents" /> class.
        /// </summary>
        /// <param name="content">Block contents. (required) (default to &quot;null&quot;).</param>
        /// <param name="contentformat">content format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (required) (default to null).</param>
        /// <param name="files">files (required).</param>
        /// <param name="footer">Block footer. (required) (default to &quot;null&quot;).</param>
        /// <param name="title">Block title. (required) (default to &quot;null&quot;).</param>
        public CoreBlockGetCourseBlocks200ResponseBlocksInnerContents(string content = @"null", int contentformat = null, List<CoreBlockGetCourseBlocks200ResponseBlocksInnerContentsFilesInner> files = default(List<CoreBlockGetCourseBlocks200ResponseBlocksInnerContentsFilesInner>), string footer = @"null", string title = @"null")
        {
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new ArgumentNullException("content is a required property for CoreBlockGetCourseBlocks200ResponseBlocksInnerContents and cannot be null");
            }
            this.Content = content;
            this.Contentformat = contentformat;
            // to ensure "files" is required (not null)
            if (files == null)
            {
                throw new ArgumentNullException("files is a required property for CoreBlockGetCourseBlocks200ResponseBlocksInnerContents and cannot be null");
            }
            this.Files = files;
            // to ensure "footer" is required (not null)
            if (footer == null)
            {
                throw new ArgumentNullException("footer is a required property for CoreBlockGetCourseBlocks200ResponseBlocksInnerContents and cannot be null");
            }
            this.Footer = footer;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for CoreBlockGetCourseBlocks200ResponseBlocksInnerContents and cannot be null");
            }
            this.Title = title;
        }

        /// <summary>
        /// Block contents.
        /// </summary>
        /// <value>Block contents.</value>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = true)]
        public string Content { get; set; }

        /// <summary>
        /// content format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>content format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "contentformat", IsRequired = true, EmitDefaultValue = true)]
        public int Contentformat { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name = "files", IsRequired = true, EmitDefaultValue = true)]
        public List<CoreBlockGetCourseBlocks200ResponseBlocksInnerContentsFilesInner> Files { get; set; }

        /// <summary>
        /// Block footer.
        /// </summary>
        /// <value>Block footer.</value>
        [DataMember(Name = "footer", IsRequired = true, EmitDefaultValue = true)]
        public string Footer { get; set; }

        /// <summary>
        /// Block title.
        /// </summary>
        /// <value>Block title.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreBlockGetCourseBlocks200ResponseBlocksInnerContents {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Contentformat: ").Append(Contentformat).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
