/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// BlockIomadCompanyAdminEnrolUsersRequestEnrolmentsInner
    /// </summary>
    [DataContract(Name = "block_iomad_company_admin_enrol_users_request_enrolments_inner")]
    public partial class BlockIomadCompanyAdminEnrolUsersRequestEnrolmentsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockIomadCompanyAdminEnrolUsersRequestEnrolmentsInner" /> class.
        /// </summary>
        /// <param name="courseid">The course to enrol the user role in (default to null).</param>
        /// <param name="quantity">Number of items purchased. (default to null).</param>
        /// <param name="roleid">Role to assign to the user (default to null).</param>
        /// <param name="suspend">set to 1 to suspend the enrolment (default to null).</param>
        /// <param name="timeend">Timestamp when the enrolment end (default to null).</param>
        /// <param name="timestart">Timestamp when the enrolment start (default to null).</param>
        /// <param name="userid">The user that is going to be enrolled (default to null).</param>
        public BlockIomadCompanyAdminEnrolUsersRequestEnrolmentsInner(int courseid = null, int quantity = null, int roleid = null, int suspend = null, int timeend = null, int timestart = null, int userid = null)
        {
            this.Courseid = courseid;
            this.Quantity = quantity;
            this.Roleid = roleid;
            this.Suspend = suspend;
            this.Timeend = timeend;
            this.Timestart = timestart;
            this.Userid = userid;
        }

        /// <summary>
        /// The course to enrol the user role in
        /// </summary>
        /// <value>The course to enrol the user role in</value>
        [DataMember(Name = "courseid", EmitDefaultValue = false)]
        public int Courseid { get; set; }

        /// <summary>
        /// Number of items purchased.
        /// </summary>
        /// <value>Number of items purchased.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Role to assign to the user
        /// </summary>
        /// <value>Role to assign to the user</value>
        [DataMember(Name = "roleid", EmitDefaultValue = false)]
        public int Roleid { get; set; }

        /// <summary>
        /// set to 1 to suspend the enrolment
        /// </summary>
        /// <value>set to 1 to suspend the enrolment</value>
        [DataMember(Name = "suspend", EmitDefaultValue = false)]
        public int Suspend { get; set; }

        /// <summary>
        /// Timestamp when the enrolment end
        /// </summary>
        /// <value>Timestamp when the enrolment end</value>
        [DataMember(Name = "timeend", EmitDefaultValue = false)]
        public int Timeend { get; set; }

        /// <summary>
        /// Timestamp when the enrolment start
        /// </summary>
        /// <value>Timestamp when the enrolment start</value>
        [DataMember(Name = "timestart", EmitDefaultValue = false)]
        public int Timestart { get; set; }

        /// <summary>
        /// The user that is going to be enrolled
        /// </summary>
        /// <value>The user that is going to be enrolled</value>
        [DataMember(Name = "userid", EmitDefaultValue = false)]
        public int Userid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BlockIomadCompanyAdminEnrolUsersRequestEnrolmentsInner {\n");
            sb.Append("  Courseid: ").Append(Courseid).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Roleid: ").Append(Roleid).Append("\n");
            sb.Append("  Suspend: ").Append(Suspend).Append("\n");
            sb.Append("  Timeend: ").Append(Timeend).Append("\n");
            sb.Append("  Timestart: ").Append(Timestart).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
