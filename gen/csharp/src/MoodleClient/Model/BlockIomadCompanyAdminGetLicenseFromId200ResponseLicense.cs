/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
    /// </summary>
    [DataContract(Name = "block_iomad_company_admin_get_license_from_id_200_response_license")]
    public partial class BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense" /> class.
        /// </summary>
        /// <param name="allallocated">All licenses allocated (required) (default to null).</param>
        /// <param name="allocation">Allocation (required) (default to null).</param>
        /// <param name="companyid">Company ID (required).</param>
        /// <param name="expirydate">Expiry date (required) (default to null).</param>
        /// <param name="id">License ID (required).</param>
        /// <param name="instant">Instant (required) (default to null).</param>
        /// <param name="name">License name (required).</param>
        /// <param name="parentid">Parent ID (required) (default to null).</param>
        /// <param name="program">Program (required) (default to null).</param>
        /// <param name="reference">Reference (required) (default to &quot;null&quot;).</param>
        /// <param name="startdate">Start date (required) (default to null).</param>
        /// <param name="type">License type - 0 &#x3D; standard, 1 &#x3D; reusable, 2 &#x3D; standard educator, 3 &#x3D; reusable educator (required).</param>
        /// <param name="used">Used (required) (default to null).</param>
        /// <param name="validlength">Valid length (required) (default to null).</param>
        public BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense(bool allallocated = null, int allocation = null, int companyid = default(int), int expirydate = null, int id = default(int), bool instant = null, string name = default(string), int parentid = null, bool program = null, string reference = @"null", int startdate = null, int type = default(int), int used = null, int validlength = null)
        {
            this.Allallocated = allallocated;
            this.Allocation = allocation;
            this.Companyid = companyid;
            this.Expirydate = expirydate;
            this.Id = id;
            this.Instant = instant;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense and cannot be null");
            }
            this.Name = name;
            this.Parentid = parentid;
            this.Program = program;
            // to ensure "reference" is required (not null)
            if (reference == null)
            {
                throw new ArgumentNullException("reference is a required property for BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense and cannot be null");
            }
            this.Reference = reference;
            this.Startdate = startdate;
            this.Type = type;
            this.Used = used;
            this.Validlength = validlength;
        }

        /// <summary>
        /// All licenses allocated
        /// </summary>
        /// <value>All licenses allocated</value>
        [DataMember(Name = "allallocated", IsRequired = true, EmitDefaultValue = true)]
        public bool Allallocated { get; set; }

        /// <summary>
        /// Allocation
        /// </summary>
        /// <value>Allocation</value>
        [DataMember(Name = "allocation", IsRequired = true, EmitDefaultValue = true)]
        public int Allocation { get; set; }

        /// <summary>
        /// Company ID
        /// </summary>
        /// <value>Company ID</value>
        [DataMember(Name = "companyid", IsRequired = true, EmitDefaultValue = true)]
        public int Companyid { get; set; }

        /// <summary>
        /// Expiry date
        /// </summary>
        /// <value>Expiry date</value>
        [DataMember(Name = "expirydate", IsRequired = true, EmitDefaultValue = true)]
        public int Expirydate { get; set; }

        /// <summary>
        /// License ID
        /// </summary>
        /// <value>License ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Instant
        /// </summary>
        /// <value>Instant</value>
        [DataMember(Name = "instant", IsRequired = true, EmitDefaultValue = true)]
        public bool Instant { get; set; }

        /// <summary>
        /// License name
        /// </summary>
        /// <value>License name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Parent ID
        /// </summary>
        /// <value>Parent ID</value>
        [DataMember(Name = "parentid", IsRequired = true, EmitDefaultValue = true)]
        public int Parentid { get; set; }

        /// <summary>
        /// Program
        /// </summary>
        /// <value>Program</value>
        [DataMember(Name = "program", IsRequired = true, EmitDefaultValue = true)]
        public bool Program { get; set; }

        /// <summary>
        /// Reference
        /// </summary>
        /// <value>Reference</value>
        [DataMember(Name = "reference", IsRequired = true, EmitDefaultValue = true)]
        public string Reference { get; set; }

        /// <summary>
        /// Start date
        /// </summary>
        /// <value>Start date</value>
        [DataMember(Name = "startdate", IsRequired = true, EmitDefaultValue = true)]
        public int Startdate { get; set; }

        /// <summary>
        /// License type - 0 &#x3D; standard, 1 &#x3D; reusable, 2 &#x3D; standard educator, 3 &#x3D; reusable educator
        /// </summary>
        /// <value>License type - 0 &#x3D; standard, 1 &#x3D; reusable, 2 &#x3D; standard educator, 3 &#x3D; reusable educator</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public int Type { get; set; }

        /// <summary>
        /// Used
        /// </summary>
        /// <value>Used</value>
        [DataMember(Name = "used", IsRequired = true, EmitDefaultValue = true)]
        public int Used { get; set; }

        /// <summary>
        /// Valid length
        /// </summary>
        /// <value>Valid length</value>
        [DataMember(Name = "validlength", IsRequired = true, EmitDefaultValue = true)]
        public int Validlength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense {\n");
            sb.Append("  Allallocated: ").Append(Allallocated).Append("\n");
            sb.Append("  Allocation: ").Append(Allocation).Append("\n");
            sb.Append("  Companyid: ").Append(Companyid).Append("\n");
            sb.Append("  Expirydate: ").Append(Expirydate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Instant: ").Append(Instant).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Parentid: ").Append(Parentid).Append("\n");
            sb.Append("  Program: ").Append(Program).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Startdate: ").Append(Startdate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Used: ").Append(Used).Append("\n");
            sb.Append("  Validlength: ").Append(Validlength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
