/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModFeedbackGetFeedbackAccessInformation200Response
    /// </summary>
    [DataContract(Name = "mod_feedback_get_feedback_access_information_200_response")]
    public partial class ModFeedbackGetFeedbackAccessInformation200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModFeedbackGetFeedbackAccessInformation200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModFeedbackGetFeedbackAccessInformation200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModFeedbackGetFeedbackAccessInformation200Response" /> class.
        /// </summary>
        /// <param name="cancomplete">Whether the user can complete the feedback or not. (required) (default to null).</param>
        /// <param name="candeletesubmissions">Whether the user can delete submissions or not. (required) (default to null).</param>
        /// <param name="canedititems">Whether the user can edit feedback items or not. (required) (default to null).</param>
        /// <param name="cansubmit">Whether the user can submit the feedback or not. (required) (default to null).</param>
        /// <param name="canviewanalysis">Whether the user can view the analysis or not. (required) (default to null).</param>
        /// <param name="canviewreports">Whether the user can view the feedback reports or not. (required) (default to null).</param>
        /// <param name="isalreadysubmitted">Whether the feedback is already submitted or not. (required) (default to null).</param>
        /// <param name="isanonymous">Whether the feedback is anonymous or not. (required) (default to null).</param>
        /// <param name="isempty">Whether the feedback has questions or not. (required) (default to null).</param>
        /// <param name="isopen">Whether the feedback has active access time restrictions or not. (required) (default to null).</param>
        /// <param name="warnings">warnings.</param>
        public ModFeedbackGetFeedbackAccessInformation200Response(bool cancomplete = null, bool candeletesubmissions = null, bool canedititems = null, bool cansubmit = null, bool canviewanalysis = null, bool canviewreports = null, bool isalreadysubmitted = null, bool isanonymous = null, bool isempty = null, bool isopen = null, List<AuthEmailSignupUser200ResponseWarningsInner> warnings = default(List<AuthEmailSignupUser200ResponseWarningsInner>))
        {
            this.Cancomplete = cancomplete;
            this.Candeletesubmissions = candeletesubmissions;
            this.Canedititems = canedititems;
            this.Cansubmit = cansubmit;
            this.Canviewanalysis = canviewanalysis;
            this.Canviewreports = canviewreports;
            this.Isalreadysubmitted = isalreadysubmitted;
            this.Isanonymous = isanonymous;
            this.Isempty = isempty;
            this.Isopen = isopen;
            this.Warnings = warnings;
        }

        /// <summary>
        /// Whether the user can complete the feedback or not.
        /// </summary>
        /// <value>Whether the user can complete the feedback or not.</value>
        [DataMember(Name = "cancomplete", IsRequired = true, EmitDefaultValue = true)]
        public bool Cancomplete { get; set; }

        /// <summary>
        /// Whether the user can delete submissions or not.
        /// </summary>
        /// <value>Whether the user can delete submissions or not.</value>
        [DataMember(Name = "candeletesubmissions", IsRequired = true, EmitDefaultValue = true)]
        public bool Candeletesubmissions { get; set; }

        /// <summary>
        /// Whether the user can edit feedback items or not.
        /// </summary>
        /// <value>Whether the user can edit feedback items or not.</value>
        [DataMember(Name = "canedititems", IsRequired = true, EmitDefaultValue = true)]
        public bool Canedititems { get; set; }

        /// <summary>
        /// Whether the user can submit the feedback or not.
        /// </summary>
        /// <value>Whether the user can submit the feedback or not.</value>
        [DataMember(Name = "cansubmit", IsRequired = true, EmitDefaultValue = true)]
        public bool Cansubmit { get; set; }

        /// <summary>
        /// Whether the user can view the analysis or not.
        /// </summary>
        /// <value>Whether the user can view the analysis or not.</value>
        [DataMember(Name = "canviewanalysis", IsRequired = true, EmitDefaultValue = true)]
        public bool Canviewanalysis { get; set; }

        /// <summary>
        /// Whether the user can view the feedback reports or not.
        /// </summary>
        /// <value>Whether the user can view the feedback reports or not.</value>
        [DataMember(Name = "canviewreports", IsRequired = true, EmitDefaultValue = true)]
        public bool Canviewreports { get; set; }

        /// <summary>
        /// Whether the feedback is already submitted or not.
        /// </summary>
        /// <value>Whether the feedback is already submitted or not.</value>
        [DataMember(Name = "isalreadysubmitted", IsRequired = true, EmitDefaultValue = true)]
        public bool Isalreadysubmitted { get; set; }

        /// <summary>
        /// Whether the feedback is anonymous or not.
        /// </summary>
        /// <value>Whether the feedback is anonymous or not.</value>
        [DataMember(Name = "isanonymous", IsRequired = true, EmitDefaultValue = true)]
        public bool Isanonymous { get; set; }

        /// <summary>
        /// Whether the feedback has questions or not.
        /// </summary>
        /// <value>Whether the feedback has questions or not.</value>
        [DataMember(Name = "isempty", IsRequired = true, EmitDefaultValue = true)]
        public bool Isempty { get; set; }

        /// <summary>
        /// Whether the feedback has active access time restrictions or not.
        /// </summary>
        /// <value>Whether the feedback has active access time restrictions or not.</value>
        [DataMember(Name = "isopen", IsRequired = true, EmitDefaultValue = true)]
        public bool Isopen { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<AuthEmailSignupUser200ResponseWarningsInner> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModFeedbackGetFeedbackAccessInformation200Response {\n");
            sb.Append("  Cancomplete: ").Append(Cancomplete).Append("\n");
            sb.Append("  Candeletesubmissions: ").Append(Candeletesubmissions).Append("\n");
            sb.Append("  Canedititems: ").Append(Canedititems).Append("\n");
            sb.Append("  Cansubmit: ").Append(Cansubmit).Append("\n");
            sb.Append("  Canviewanalysis: ").Append(Canviewanalysis).Append("\n");
            sb.Append("  Canviewreports: ").Append(Canviewreports).Append("\n");
            sb.Append("  Isalreadysubmitted: ").Append(Isalreadysubmitted).Append("\n");
            sb.Append("  Isanonymous: ").Append(Isanonymous).Append("\n");
            sb.Append("  Isempty: ").Append(Isempty).Append("\n");
            sb.Append("  Isopen: ").Append(Isopen).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
