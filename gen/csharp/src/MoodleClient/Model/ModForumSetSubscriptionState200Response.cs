/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModForumSetSubscriptionState200Response
    /// </summary>
    [DataContract(Name = "mod_forum_set_subscription_state_200_response")]
    public partial class ModForumSetSubscriptionState200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumSetSubscriptionState200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModForumSetSubscriptionState200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModForumSetSubscriptionState200Response" /> class.
        /// </summary>
        /// <param name="capabilities">capabilities (required).</param>
        /// <param name="firstpostid">firstpostid (required).</param>
        /// <param name="forumid">forumid (required).</param>
        /// <param name="group">group.</param>
        /// <param name="id">id (required).</param>
        /// <param name="istimelocked">istimelocked (required).</param>
        /// <param name="locked">locked (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="pinned">pinned (required).</param>
        /// <param name="timed">timed (required).</param>
        /// <param name="times">times (required).</param>
        /// <param name="urls">urls (required).</param>
        /// <param name="userstate">userstate (required).</param>
        public ModForumSetSubscriptionState200Response(ModForumSetSubscriptionState200ResponseCapabilities capabilities = default(ModForumSetSubscriptionState200ResponseCapabilities), int firstpostid = default(int), int forumid = default(int), ModForumSetSubscriptionState200ResponseGroup group = default(ModForumSetSubscriptionState200ResponseGroup), int id = default(int), bool istimelocked = default(bool), bool locked = default(bool), string name = default(string), bool pinned = default(bool), ModForumSetSubscriptionState200ResponseTimed timed = default(ModForumSetSubscriptionState200ResponseTimed), ModForumSetSubscriptionState200ResponseTimes times = default(ModForumSetSubscriptionState200ResponseTimes), ModForumSetSubscriptionState200ResponseUrls urls = default(ModForumSetSubscriptionState200ResponseUrls), ModForumSetSubscriptionState200ResponseUserstate userstate = default(ModForumSetSubscriptionState200ResponseUserstate))
        {
            // to ensure "capabilities" is required (not null)
            if (capabilities == null)
            {
                throw new ArgumentNullException("capabilities is a required property for ModForumSetSubscriptionState200Response and cannot be null");
            }
            this.Capabilities = capabilities;
            this.Firstpostid = firstpostid;
            this.Forumid = forumid;
            this.Id = id;
            this.Istimelocked = istimelocked;
            this.Locked = locked;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ModForumSetSubscriptionState200Response and cannot be null");
            }
            this.Name = name;
            this.Pinned = pinned;
            // to ensure "timed" is required (not null)
            if (timed == null)
            {
                throw new ArgumentNullException("timed is a required property for ModForumSetSubscriptionState200Response and cannot be null");
            }
            this.Timed = timed;
            // to ensure "times" is required (not null)
            if (times == null)
            {
                throw new ArgumentNullException("times is a required property for ModForumSetSubscriptionState200Response and cannot be null");
            }
            this.Times = times;
            // to ensure "urls" is required (not null)
            if (urls == null)
            {
                throw new ArgumentNullException("urls is a required property for ModForumSetSubscriptionState200Response and cannot be null");
            }
            this.Urls = urls;
            // to ensure "userstate" is required (not null)
            if (userstate == null)
            {
                throw new ArgumentNullException("userstate is a required property for ModForumSetSubscriptionState200Response and cannot be null");
            }
            this.Userstate = userstate;
            this.Group = group;
        }

        /// <summary>
        /// Gets or Sets Capabilities
        /// </summary>
        [DataMember(Name = "capabilities", IsRequired = true, EmitDefaultValue = true)]
        public ModForumSetSubscriptionState200ResponseCapabilities Capabilities { get; set; }

        /// <summary>
        /// firstpostid
        /// </summary>
        /// <value>firstpostid</value>
        [DataMember(Name = "firstpostid", IsRequired = true, EmitDefaultValue = true)]
        public int Firstpostid { get; set; }

        /// <summary>
        /// forumid
        /// </summary>
        /// <value>forumid</value>
        [DataMember(Name = "forumid", IsRequired = true, EmitDefaultValue = true)]
        public int Forumid { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public ModForumSetSubscriptionState200ResponseGroup Group { get; set; }

        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// istimelocked
        /// </summary>
        /// <value>istimelocked</value>
        [DataMember(Name = "istimelocked", IsRequired = true, EmitDefaultValue = true)]
        public bool Istimelocked { get; set; }

        /// <summary>
        /// locked
        /// </summary>
        /// <value>locked</value>
        [DataMember(Name = "locked", IsRequired = true, EmitDefaultValue = true)]
        public bool Locked { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// pinned
        /// </summary>
        /// <value>pinned</value>
        [DataMember(Name = "pinned", IsRequired = true, EmitDefaultValue = true)]
        public bool Pinned { get; set; }

        /// <summary>
        /// Gets or Sets Timed
        /// </summary>
        [DataMember(Name = "timed", IsRequired = true, EmitDefaultValue = true)]
        public ModForumSetSubscriptionState200ResponseTimed Timed { get; set; }

        /// <summary>
        /// Gets or Sets Times
        /// </summary>
        [DataMember(Name = "times", IsRequired = true, EmitDefaultValue = true)]
        public ModForumSetSubscriptionState200ResponseTimes Times { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name = "urls", IsRequired = true, EmitDefaultValue = true)]
        public ModForumSetSubscriptionState200ResponseUrls Urls { get; set; }

        /// <summary>
        /// Gets or Sets Userstate
        /// </summary>
        [DataMember(Name = "userstate", IsRequired = true, EmitDefaultValue = true)]
        public ModForumSetSubscriptionState200ResponseUserstate Userstate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModForumSetSubscriptionState200Response {\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  Firstpostid: ").Append(Firstpostid).Append("\n");
            sb.Append("  Forumid: ").Append(Forumid).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Istimelocked: ").Append(Istimelocked).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pinned: ").Append(Pinned).Append("\n");
            sb.Append("  Timed: ").Append(Timed).Append("\n");
            sb.Append("  Times: ").Append(Times).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  Userstate: ").Append(Userstate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
