/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreCourseGetCourseModuleByInstance200ResponseCm
    /// </summary>
    [DataContract(Name = "core_course_get_course_module_by_instance_200_response_cm")]
    public partial class CoreCourseGetCourseModuleByInstance200ResponseCm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCourseGetCourseModuleByInstance200ResponseCm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreCourseGetCourseModuleByInstance200ResponseCm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreCourseGetCourseModuleByInstance200ResponseCm" /> class.
        /// </summary>
        /// <param name="added">Time added.</param>
        /// <param name="advancedgrading">advancedgrading.</param>
        /// <param name="availability">Availability settings.</param>
        /// <param name="completion">If completion is enabled (required).</param>
        /// <param name="completionexpected">Completion time expected.</param>
        /// <param name="completiongradeitemnumber">Completion grade item.</param>
        /// <param name="completionpassgrade">Completion pass grade setting.</param>
        /// <param name="completionview">Completion view setting.</param>
        /// <param name="course">The course id (required).</param>
        /// <param name="downloadcontent">The download content value.</param>
        /// <param name="grade">Grade (max value or scale id).</param>
        /// <param name="gradecat">Grade category.</param>
        /// <param name="gradepass">Grade to pass (float).</param>
        /// <param name="groupingid">Grouping id (required).</param>
        /// <param name="groupmode">Group mode (required).</param>
        /// <param name="id">The course module id (required).</param>
        /// <param name="idnumber">Module id number.</param>
        /// <param name="indent">Indentation.</param>
        /// <param name="instance">The activity instance id (required).</param>
        /// <param name="modname">The module component name (forum, assign, etc..) (required).</param>
        /// <param name="module">The module type id (required).</param>
        /// <param name="name">The activity name (required).</param>
        /// <param name="outcomes">outcomes.</param>
        /// <param name="scale">Scale items (if used).</param>
        /// <param name="score">Score.</param>
        /// <param name="section">The module section id (required).</param>
        /// <param name="sectionnum">The module section number (required).</param>
        /// <param name="showdescription">If the description is showed.</param>
        /// <param name="visible">If visible.</param>
        /// <param name="visibleold">Visible old.</param>
        /// <param name="visibleoncoursepage">If visible on course page.</param>
        public CoreCourseGetCourseModuleByInstance200ResponseCm(int added = default(int), List<CoreCourseGetCourseModuleByInstance200ResponseCmAdvancedgradingInner> advancedgrading = default(List<CoreCourseGetCourseModuleByInstance200ResponseCmAdvancedgradingInner>), string availability = default(string), int completion = default(int), int completionexpected = default(int), int completiongradeitemnumber = default(int), int completionpassgrade = default(int), int completionview = default(int), int course = default(int), int downloadcontent = default(int), decimal grade = default(decimal), int gradecat = default(int), string gradepass = default(string), int groupingid = default(int), int groupmode = default(int), int id = default(int), string idnumber = default(string), int indent = default(int), int instance = default(int), string modname = default(string), int module = default(int), string name = default(string), List<CoreCourseGetCourseModuleByInstance200ResponseCmOutcomesInner> outcomes = default(List<CoreCourseGetCourseModuleByInstance200ResponseCmOutcomesInner>), string scale = default(string), int score = default(int), int section = default(int), int sectionnum = default(int), int showdescription = default(int), int visible = default(int), int visibleold = default(int), int visibleoncoursepage = default(int))
        {
            this.Completion = completion;
            this.Course = course;
            this.Groupingid = groupingid;
            this.Groupmode = groupmode;
            this.Id = id;
            this.Instance = instance;
            // to ensure "modname" is required (not null)
            if (modname == null)
            {
                throw new ArgumentNullException("modname is a required property for CoreCourseGetCourseModuleByInstance200ResponseCm and cannot be null");
            }
            this.Modname = modname;
            this.Module = module;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CoreCourseGetCourseModuleByInstance200ResponseCm and cannot be null");
            }
            this.Name = name;
            this.Section = section;
            this.Sectionnum = sectionnum;
            this.Added = added;
            this.Advancedgrading = advancedgrading;
            this.Availability = availability;
            this.Completionexpected = completionexpected;
            this.Completiongradeitemnumber = completiongradeitemnumber;
            this.Completionpassgrade = completionpassgrade;
            this.Completionview = completionview;
            this.Downloadcontent = downloadcontent;
            this.Grade = grade;
            this.Gradecat = gradecat;
            this.Gradepass = gradepass;
            this.Idnumber = idnumber;
            this.Indent = indent;
            this.Outcomes = outcomes;
            this.Scale = scale;
            this.Score = score;
            this.Showdescription = showdescription;
            this.Visible = visible;
            this.Visibleold = visibleold;
            this.Visibleoncoursepage = visibleoncoursepage;
        }

        /// <summary>
        /// Time added
        /// </summary>
        /// <value>Time added</value>
        [DataMember(Name = "added", EmitDefaultValue = false)]
        public int Added { get; set; }

        /// <summary>
        /// Gets or Sets Advancedgrading
        /// </summary>
        [DataMember(Name = "advancedgrading", EmitDefaultValue = false)]
        public List<CoreCourseGetCourseModuleByInstance200ResponseCmAdvancedgradingInner> Advancedgrading { get; set; }

        /// <summary>
        /// Availability settings
        /// </summary>
        /// <value>Availability settings</value>
        [DataMember(Name = "availability", EmitDefaultValue = false)]
        public string Availability { get; set; }

        /// <summary>
        /// If completion is enabled
        /// </summary>
        /// <value>If completion is enabled</value>
        [DataMember(Name = "completion", IsRequired = true, EmitDefaultValue = true)]
        public int Completion { get; set; }

        /// <summary>
        /// Completion time expected
        /// </summary>
        /// <value>Completion time expected</value>
        [DataMember(Name = "completionexpected", EmitDefaultValue = false)]
        public int Completionexpected { get; set; }

        /// <summary>
        /// Completion grade item
        /// </summary>
        /// <value>Completion grade item</value>
        [DataMember(Name = "completiongradeitemnumber", EmitDefaultValue = false)]
        public int Completiongradeitemnumber { get; set; }

        /// <summary>
        /// Completion pass grade setting
        /// </summary>
        /// <value>Completion pass grade setting</value>
        [DataMember(Name = "completionpassgrade", EmitDefaultValue = false)]
        public int Completionpassgrade { get; set; }

        /// <summary>
        /// Completion view setting
        /// </summary>
        /// <value>Completion view setting</value>
        [DataMember(Name = "completionview", EmitDefaultValue = false)]
        public int Completionview { get; set; }

        /// <summary>
        /// The course id
        /// </summary>
        /// <value>The course id</value>
        [DataMember(Name = "course", IsRequired = true, EmitDefaultValue = true)]
        public int Course { get; set; }

        /// <summary>
        /// The download content value
        /// </summary>
        /// <value>The download content value</value>
        [DataMember(Name = "downloadcontent", EmitDefaultValue = false)]
        public int Downloadcontent { get; set; }

        /// <summary>
        /// Grade (max value or scale id)
        /// </summary>
        /// <value>Grade (max value or scale id)</value>
        [DataMember(Name = "grade", EmitDefaultValue = false)]
        public decimal Grade { get; set; }

        /// <summary>
        /// Grade category
        /// </summary>
        /// <value>Grade category</value>
        [DataMember(Name = "gradecat", EmitDefaultValue = false)]
        public int Gradecat { get; set; }

        /// <summary>
        /// Grade to pass (float)
        /// </summary>
        /// <value>Grade to pass (float)</value>
        [DataMember(Name = "gradepass", EmitDefaultValue = false)]
        public string Gradepass { get; set; }

        /// <summary>
        /// Grouping id
        /// </summary>
        /// <value>Grouping id</value>
        [DataMember(Name = "groupingid", IsRequired = true, EmitDefaultValue = true)]
        public int Groupingid { get; set; }

        /// <summary>
        /// Group mode
        /// </summary>
        /// <value>Group mode</value>
        [DataMember(Name = "groupmode", IsRequired = true, EmitDefaultValue = true)]
        public int Groupmode { get; set; }

        /// <summary>
        /// The course module id
        /// </summary>
        /// <value>The course module id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Module id number
        /// </summary>
        /// <value>Module id number</value>
        [DataMember(Name = "idnumber", EmitDefaultValue = false)]
        public string Idnumber { get; set; }

        /// <summary>
        /// Indentation
        /// </summary>
        /// <value>Indentation</value>
        [DataMember(Name = "indent", EmitDefaultValue = false)]
        public int Indent { get; set; }

        /// <summary>
        /// The activity instance id
        /// </summary>
        /// <value>The activity instance id</value>
        [DataMember(Name = "instance", IsRequired = true, EmitDefaultValue = true)]
        public int Instance { get; set; }

        /// <summary>
        /// The module component name (forum, assign, etc..)
        /// </summary>
        /// <value>The module component name (forum, assign, etc..)</value>
        [DataMember(Name = "modname", IsRequired = true, EmitDefaultValue = true)]
        public string Modname { get; set; }

        /// <summary>
        /// The module type id
        /// </summary>
        /// <value>The module type id</value>
        [DataMember(Name = "module", IsRequired = true, EmitDefaultValue = true)]
        public int Module { get; set; }

        /// <summary>
        /// The activity name
        /// </summary>
        /// <value>The activity name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Outcomes
        /// </summary>
        [DataMember(Name = "outcomes", EmitDefaultValue = false)]
        public List<CoreCourseGetCourseModuleByInstance200ResponseCmOutcomesInner> Outcomes { get; set; }

        /// <summary>
        /// Scale items (if used)
        /// </summary>
        /// <value>Scale items (if used)</value>
        [DataMember(Name = "scale", EmitDefaultValue = false)]
        public string Scale { get; set; }

        /// <summary>
        /// Score
        /// </summary>
        /// <value>Score</value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public int Score { get; set; }

        /// <summary>
        /// The module section id
        /// </summary>
        /// <value>The module section id</value>
        [DataMember(Name = "section", IsRequired = true, EmitDefaultValue = true)]
        public int Section { get; set; }

        /// <summary>
        /// The module section number
        /// </summary>
        /// <value>The module section number</value>
        [DataMember(Name = "sectionnum", IsRequired = true, EmitDefaultValue = true)]
        public int Sectionnum { get; set; }

        /// <summary>
        /// If the description is showed
        /// </summary>
        /// <value>If the description is showed</value>
        [DataMember(Name = "showdescription", EmitDefaultValue = false)]
        public int Showdescription { get; set; }

        /// <summary>
        /// If visible
        /// </summary>
        /// <value>If visible</value>
        [DataMember(Name = "visible", EmitDefaultValue = false)]
        public int Visible { get; set; }

        /// <summary>
        /// Visible old
        /// </summary>
        /// <value>Visible old</value>
        [DataMember(Name = "visibleold", EmitDefaultValue = false)]
        public int Visibleold { get; set; }

        /// <summary>
        /// If visible on course page
        /// </summary>
        /// <value>If visible on course page</value>
        [DataMember(Name = "visibleoncoursepage", EmitDefaultValue = false)]
        public int Visibleoncoursepage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreCourseGetCourseModuleByInstance200ResponseCm {\n");
            sb.Append("  Added: ").Append(Added).Append("\n");
            sb.Append("  Advancedgrading: ").Append(Advancedgrading).Append("\n");
            sb.Append("  Availability: ").Append(Availability).Append("\n");
            sb.Append("  Completion: ").Append(Completion).Append("\n");
            sb.Append("  Completionexpected: ").Append(Completionexpected).Append("\n");
            sb.Append("  Completiongradeitemnumber: ").Append(Completiongradeitemnumber).Append("\n");
            sb.Append("  Completionpassgrade: ").Append(Completionpassgrade).Append("\n");
            sb.Append("  Completionview: ").Append(Completionview).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Downloadcontent: ").Append(Downloadcontent).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Gradecat: ").Append(Gradecat).Append("\n");
            sb.Append("  Gradepass: ").Append(Gradepass).Append("\n");
            sb.Append("  Groupingid: ").Append(Groupingid).Append("\n");
            sb.Append("  Groupmode: ").Append(Groupmode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Idnumber: ").Append(Idnumber).Append("\n");
            sb.Append("  Indent: ").Append(Indent).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  Modname: ").Append(Modname).Append("\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Outcomes: ").Append(Outcomes).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  Sectionnum: ").Append(Sectionnum).Append("\n");
            sb.Append("  Showdescription: ").Append(Showdescription).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("  Visibleold: ").Append(Visibleold).Append("\n");
            sb.Append("  Visibleoncoursepage: ").Append(Visibleoncoursepage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
