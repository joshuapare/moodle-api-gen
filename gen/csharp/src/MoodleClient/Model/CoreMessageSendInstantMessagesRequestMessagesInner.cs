/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreMessageSendInstantMessagesRequestMessagesInner
    /// </summary>
    [DataContract(Name = "core_message_send_instant_messages_request_messages_inner")]
    public partial class CoreMessageSendInstantMessagesRequestMessagesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreMessageSendInstantMessagesRequestMessagesInner" /> class.
        /// </summary>
        /// <param name="clientmsgid">your own client id for the message. If this id is provided, the fail message id will be returned to you (default to &quot;null&quot;).</param>
        /// <param name="text">the text of the message (default to &quot;null&quot;).</param>
        /// <param name="textformat">text format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 0).</param>
        /// <param name="touserid">id of the user to send the private message (default to null).</param>
        public CoreMessageSendInstantMessagesRequestMessagesInner(string clientmsgid = @"null", string text = @"null", int textformat = 0, int touserid = null)
        {
            // use default value if no "clientmsgid" provided
            this.Clientmsgid = clientmsgid ?? @"null";
            // use default value if no "text" provided
            this.Text = text ?? @"null";
            this.Textformat = textformat;
            this.Touserid = touserid;
        }

        /// <summary>
        /// your own client id for the message. If this id is provided, the fail message id will be returned to you
        /// </summary>
        /// <value>your own client id for the message. If this id is provided, the fail message id will be returned to you</value>
        [DataMember(Name = "clientmsgid", EmitDefaultValue = false)]
        public string Clientmsgid { get; set; }

        /// <summary>
        /// the text of the message
        /// </summary>
        /// <value>the text of the message</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// text format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>text format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "textformat", EmitDefaultValue = false)]
        public int Textformat { get; set; }

        /// <summary>
        /// id of the user to send the private message
        /// </summary>
        /// <value>id of the user to send the private message</value>
        [DataMember(Name = "touserid", EmitDefaultValue = false)]
        public int Touserid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreMessageSendInstantMessagesRequestMessagesInner {\n");
            sb.Append("  Clientmsgid: ").Append(Clientmsgid).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Textformat: ").Append(Textformat).Append("\n");
            sb.Append("  Touserid: ").Append(Touserid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
