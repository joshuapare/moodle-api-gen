/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModWorkshopGetSubmission200ResponseSubmission
    /// </summary>
    [DataContract(Name = "mod_workshop_get_submission_200_response_submission")]
    public partial class ModWorkshopGetSubmission200ResponseSubmission : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModWorkshopGetSubmission200ResponseSubmission" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModWorkshopGetSubmission200ResponseSubmission() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModWorkshopGetSubmission200ResponseSubmission" /> class.
        /// </summary>
        /// <param name="attachment">Used by File API file_postupdate_standard_filemanager. (required) (default to 0).</param>
        /// <param name="attachmentfiles">attachmentfiles.</param>
        /// <param name="authorid">The author of the submission. (required) (default to null).</param>
        /// <param name="content">Submission text. (required) (default to &quot;null&quot;).</param>
        /// <param name="contentfiles">contentfiles.</param>
        /// <param name="contentformat">content format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 0).</param>
        /// <param name="contenttrust">The trust mode of the data. (required) (default to 0).</param>
        /// <param name="example">Is this submission an example from teacher. (required) (default to false).</param>
        /// <param name="feedbackauthor">Teacher comment/feedback for the author of the submission, for example describing the reasons                     for the grade overriding. (default to &quot;null&quot;).</param>
        /// <param name="feedbackauthorformat">feedbackauthor format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to 0).</param>
        /// <param name="grade">Aggregated grade for the submission. The grade is a decimal number from interval 0..100.                     If NULL then the grade for submission has not been aggregated yet. (default to nullM).</param>
        /// <param name="gradeover">Grade for the submission manually overridden by a teacher. Grade is always from interval 0..100.                     If NULL then the grade is not overriden. (default to nullM).</param>
        /// <param name="gradeoverby">The id of the user who has overridden the grade for submission..</param>
        /// <param name="id">The primary key of the record. (required).</param>
        /// <param name="late">Has this submission been submitted after the deadline or during the assessment phase? (required) (default to 0).</param>
        /// <param name="published">Shall the submission be available to other when the workshop is closed. (required) (default to false).</param>
        /// <param name="timecreated">Timestamp when the work was submitted for the first time. (required) (default to null).</param>
        /// <param name="timegraded">The timestamp when grade or gradeover was recently modified. (default to null).</param>
        /// <param name="timemodified">Timestamp when the submission has been updated. (required) (default to null).</param>
        /// <param name="title">The submission title. (required) (default to &quot;null&quot;).</param>
        /// <param name="workshopid">The id of the workshop instance. (required) (default to null).</param>
        public ModWorkshopGetSubmission200ResponseSubmission(int attachment = 0, List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> attachmentfiles = default(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>), int authorid = null, string content = @"null", List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> contentfiles = default(List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>), int contentformat = 0, int contenttrust = 0, bool example = false, string feedbackauthor = @"null", int feedbackauthorformat = 0, decimal grade = nullM, decimal gradeover = nullM, int gradeoverby = default(int), int id = default(int), int late = 0, bool published = false, int timecreated = null, int timegraded = null, int timemodified = null, string title = @"null", int workshopid = null)
        {
            this.Attachment = attachment;
            this.Authorid = authorid;
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new ArgumentNullException("content is a required property for ModWorkshopGetSubmission200ResponseSubmission and cannot be null");
            }
            this.Content = content;
            this.Contenttrust = contenttrust;
            this.Example = example;
            this.Id = id;
            this.Late = late;
            this.Published = published;
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for ModWorkshopGetSubmission200ResponseSubmission and cannot be null");
            }
            this.Title = title;
            this.Workshopid = workshopid;
            this.Attachmentfiles = attachmentfiles;
            this.Contentfiles = contentfiles;
            this.Contentformat = contentformat;
            // use default value if no "feedbackauthor" provided
            this.Feedbackauthor = feedbackauthor ?? @"null";
            this.Feedbackauthorformat = feedbackauthorformat;
            this.Grade = grade;
            this.Gradeover = gradeover;
            this.Gradeoverby = gradeoverby;
            this.Timegraded = timegraded;
        }

        /// <summary>
        /// Used by File API file_postupdate_standard_filemanager.
        /// </summary>
        /// <value>Used by File API file_postupdate_standard_filemanager.</value>
        [DataMember(Name = "attachment", IsRequired = true, EmitDefaultValue = true)]
        public int Attachment { get; set; }

        /// <summary>
        /// Gets or Sets Attachmentfiles
        /// </summary>
        [DataMember(Name = "attachmentfiles", EmitDefaultValue = false)]
        public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> Attachmentfiles { get; set; }

        /// <summary>
        /// The author of the submission.
        /// </summary>
        /// <value>The author of the submission.</value>
        [DataMember(Name = "authorid", IsRequired = true, EmitDefaultValue = true)]
        public int Authorid { get; set; }

        /// <summary>
        /// Submission text.
        /// </summary>
        /// <value>Submission text.</value>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = true)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets Contentfiles
        /// </summary>
        [DataMember(Name = "contentfiles", EmitDefaultValue = false)]
        public List<CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner> Contentfiles { get; set; }

        /// <summary>
        /// content format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>content format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "contentformat", EmitDefaultValue = false)]
        public int Contentformat { get; set; }

        /// <summary>
        /// The trust mode of the data.
        /// </summary>
        /// <value>The trust mode of the data.</value>
        [DataMember(Name = "contenttrust", IsRequired = true, EmitDefaultValue = true)]
        public int Contenttrust { get; set; }

        /// <summary>
        /// Is this submission an example from teacher.
        /// </summary>
        /// <value>Is this submission an example from teacher.</value>
        [DataMember(Name = "example", IsRequired = true, EmitDefaultValue = true)]
        public bool Example { get; set; }

        /// <summary>
        /// Teacher comment/feedback for the author of the submission, for example describing the reasons                     for the grade overriding.
        /// </summary>
        /// <value>Teacher comment/feedback for the author of the submission, for example describing the reasons                     for the grade overriding.</value>
        [DataMember(Name = "feedbackauthor", EmitDefaultValue = false)]
        public string Feedbackauthor { get; set; }

        /// <summary>
        /// feedbackauthor format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>feedbackauthor format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "feedbackauthorformat", EmitDefaultValue = false)]
        public int Feedbackauthorformat { get; set; }

        /// <summary>
        /// Aggregated grade for the submission. The grade is a decimal number from interval 0..100.                     If NULL then the grade for submission has not been aggregated yet.
        /// </summary>
        /// <value>Aggregated grade for the submission. The grade is a decimal number from interval 0..100.                     If NULL then the grade for submission has not been aggregated yet.</value>
        [DataMember(Name = "grade", EmitDefaultValue = false)]
        public decimal Grade { get; set; }

        /// <summary>
        /// Grade for the submission manually overridden by a teacher. Grade is always from interval 0..100.                     If NULL then the grade is not overriden.
        /// </summary>
        /// <value>Grade for the submission manually overridden by a teacher. Grade is always from interval 0..100.                     If NULL then the grade is not overriden.</value>
        [DataMember(Name = "gradeover", EmitDefaultValue = false)]
        public decimal Gradeover { get; set; }

        /// <summary>
        /// The id of the user who has overridden the grade for submission.
        /// </summary>
        /// <value>The id of the user who has overridden the grade for submission.</value>
        [DataMember(Name = "gradeoverby", EmitDefaultValue = false)]
        public int Gradeoverby { get; set; }

        /// <summary>
        /// The primary key of the record.
        /// </summary>
        /// <value>The primary key of the record.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Has this submission been submitted after the deadline or during the assessment phase?
        /// </summary>
        /// <value>Has this submission been submitted after the deadline or during the assessment phase?</value>
        [DataMember(Name = "late", IsRequired = true, EmitDefaultValue = true)]
        public int Late { get; set; }

        /// <summary>
        /// Shall the submission be available to other when the workshop is closed.
        /// </summary>
        /// <value>Shall the submission be available to other when the workshop is closed.</value>
        [DataMember(Name = "published", IsRequired = true, EmitDefaultValue = true)]
        public bool Published { get; set; }

        /// <summary>
        /// Timestamp when the work was submitted for the first time.
        /// </summary>
        /// <value>Timestamp when the work was submitted for the first time.</value>
        [DataMember(Name = "timecreated", IsRequired = true, EmitDefaultValue = true)]
        public int Timecreated { get; set; }

        /// <summary>
        /// The timestamp when grade or gradeover was recently modified.
        /// </summary>
        /// <value>The timestamp when grade or gradeover was recently modified.</value>
        [DataMember(Name = "timegraded", EmitDefaultValue = false)]
        public int Timegraded { get; set; }

        /// <summary>
        /// Timestamp when the submission has been updated.
        /// </summary>
        /// <value>Timestamp when the submission has been updated.</value>
        [DataMember(Name = "timemodified", IsRequired = true, EmitDefaultValue = true)]
        public int Timemodified { get; set; }

        /// <summary>
        /// The submission title.
        /// </summary>
        /// <value>The submission title.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// The id of the workshop instance.
        /// </summary>
        /// <value>The id of the workshop instance.</value>
        [DataMember(Name = "workshopid", IsRequired = true, EmitDefaultValue = true)]
        public int Workshopid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModWorkshopGetSubmission200ResponseSubmission {\n");
            sb.Append("  Attachment: ").Append(Attachment).Append("\n");
            sb.Append("  Attachmentfiles: ").Append(Attachmentfiles).Append("\n");
            sb.Append("  Authorid: ").Append(Authorid).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Contentfiles: ").Append(Contentfiles).Append("\n");
            sb.Append("  Contentformat: ").Append(Contentformat).Append("\n");
            sb.Append("  Contenttrust: ").Append(Contenttrust).Append("\n");
            sb.Append("  Example: ").Append(Example).Append("\n");
            sb.Append("  Feedbackauthor: ").Append(Feedbackauthor).Append("\n");
            sb.Append("  Feedbackauthorformat: ").Append(Feedbackauthorformat).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Gradeover: ").Append(Gradeover).Append("\n");
            sb.Append("  Gradeoverby: ").Append(Gradeoverby).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Late: ").Append(Late).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timegraded: ").Append(Timegraded).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Workshopid: ").Append(Workshopid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
