/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// The question page attempts
    /// </summary>
    [DataContract(Name = "mod_lesson_get_questions_attempts_200_response_attempts_inner")]
    public partial class ModLessonGetQuestionsAttempts200ResponseAttemptsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetQuestionsAttempts200ResponseAttemptsInner" /> class.
        /// </summary>
        /// <param name="answerid">The attempt answerid (default to null).</param>
        /// <param name="correct">If it was the correct answer (default to null).</param>
        /// <param name="id">The attempt id.</param>
        /// <param name="lessonid">The attempt lessonid (default to null).</param>
        /// <param name="pageid">The attempt pageid (default to null).</param>
        /// <param name="retry">The lesson attempt number (default to null).</param>
        /// <param name="timeseen">The time the question was seen (default to null).</param>
        /// <param name="useranswer">The complete user answer (default to &quot;null&quot;).</param>
        /// <param name="userid">The user who did the attempt (default to null).</param>
        public ModLessonGetQuestionsAttempts200ResponseAttemptsInner(int answerid = null, int correct = null, int id = default(int), int lessonid = null, int pageid = null, int retry = null, int timeseen = null, string useranswer = @"null", int userid = null)
        {
            this.Answerid = answerid;
            this.Correct = correct;
            this.Id = id;
            this.Lessonid = lessonid;
            this.Pageid = pageid;
            this.Retry = retry;
            this.Timeseen = timeseen;
            // use default value if no "useranswer" provided
            this.Useranswer = useranswer ?? @"null";
            this.Userid = userid;
        }

        /// <summary>
        /// The attempt answerid
        /// </summary>
        /// <value>The attempt answerid</value>
        [DataMember(Name = "answerid", EmitDefaultValue = false)]
        public int Answerid { get; set; }

        /// <summary>
        /// If it was the correct answer
        /// </summary>
        /// <value>If it was the correct answer</value>
        [DataMember(Name = "correct", EmitDefaultValue = false)]
        public int Correct { get; set; }

        /// <summary>
        /// The attempt id
        /// </summary>
        /// <value>The attempt id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The attempt lessonid
        /// </summary>
        /// <value>The attempt lessonid</value>
        [DataMember(Name = "lessonid", EmitDefaultValue = false)]
        public int Lessonid { get; set; }

        /// <summary>
        /// The attempt pageid
        /// </summary>
        /// <value>The attempt pageid</value>
        [DataMember(Name = "pageid", EmitDefaultValue = false)]
        public int Pageid { get; set; }

        /// <summary>
        /// The lesson attempt number
        /// </summary>
        /// <value>The lesson attempt number</value>
        [DataMember(Name = "retry", EmitDefaultValue = false)]
        public int Retry { get; set; }

        /// <summary>
        /// The time the question was seen
        /// </summary>
        /// <value>The time the question was seen</value>
        [DataMember(Name = "timeseen", EmitDefaultValue = false)]
        public int Timeseen { get; set; }

        /// <summary>
        /// The complete user answer
        /// </summary>
        /// <value>The complete user answer</value>
        [DataMember(Name = "useranswer", EmitDefaultValue = false)]
        public string Useranswer { get; set; }

        /// <summary>
        /// The user who did the attempt
        /// </summary>
        /// <value>The user who did the attempt</value>
        [DataMember(Name = "userid", EmitDefaultValue = false)]
        public int Userid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModLessonGetQuestionsAttempts200ResponseAttemptsInner {\n");
            sb.Append("  Answerid: ").Append(Answerid).Append("\n");
            sb.Append("  Correct: ").Append(Correct).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Lessonid: ").Append(Lessonid).Append("\n");
            sb.Append("  Pageid: ").Append(Pageid).Append("\n");
            sb.Append("  Retry: ").Append(Retry).Append("\n");
            sb.Append("  Timeseen: ").Append(Timeseen).Append("\n");
            sb.Append("  Useranswer: ").Append(Useranswer).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
