/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ToolLpDataForUserCompetencySummary200Response
    /// </summary>
    [DataContract(Name = "tool_lp_data_for_user_competency_summary_200_response")]
    public partial class ToolLpDataForUserCompetencySummary200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForUserCompetencySummary200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolLpDataForUserCompetencySummary200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForUserCompetencySummary200Response" /> class.
        /// </summary>
        /// <param name="cangrade">cangrade (required) (default to null).</param>
        /// <param name="commentarea">commentarea.</param>
        /// <param name="competency">competency (required).</param>
        /// <param name="evidence">evidence (required).</param>
        /// <param name="showrelatedcompetencies">showrelatedcompetencies (required) (default to null).</param>
        /// <param name="user">user (required).</param>
        /// <param name="usercompetency">usercompetency.</param>
        /// <param name="usercompetencycourse">usercompetencycourse.</param>
        /// <param name="usercompetencyplan">usercompetencyplan.</param>
        public ToolLpDataForUserCompetencySummary200Response(bool cangrade = null, CoreCompetencyReadPlan200ResponseCommentarea commentarea = default(CoreCompetencyReadPlan200ResponseCommentarea), ToolLpDataForCompetencySummary200Response competency = default(ToolLpDataForCompetencySummary200Response), List<ToolLpDataForUserCompetencySummary200ResponseEvidenceInner> evidence = default(List<ToolLpDataForUserCompetencySummary200ResponseEvidenceInner>), bool showrelatedcompetencies = null, CoreCompetencyGradeCompetency200ResponseActionuser user = default(CoreCompetencyGradeCompetency200ResponseActionuser), ToolLpDataForUserCompetencySummary200ResponseUsercompetency usercompetency = default(ToolLpDataForUserCompetencySummary200ResponseUsercompetency), ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse usercompetencycourse = default(ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse), ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan usercompetencyplan = default(ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan))
        {
            this.Cangrade = cangrade;
            // to ensure "competency" is required (not null)
            if (competency == null)
            {
                throw new ArgumentNullException("competency is a required property for ToolLpDataForUserCompetencySummary200Response and cannot be null");
            }
            this.Competency = competency;
            // to ensure "evidence" is required (not null)
            if (evidence == null)
            {
                throw new ArgumentNullException("evidence is a required property for ToolLpDataForUserCompetencySummary200Response and cannot be null");
            }
            this.Evidence = evidence;
            this.Showrelatedcompetencies = showrelatedcompetencies;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for ToolLpDataForUserCompetencySummary200Response and cannot be null");
            }
            this.User = user;
            this.Commentarea = commentarea;
            this.Usercompetency = usercompetency;
            this.Usercompetencycourse = usercompetencycourse;
            this.Usercompetencyplan = usercompetencyplan;
        }

        /// <summary>
        /// cangrade
        /// </summary>
        /// <value>cangrade</value>
        [DataMember(Name = "cangrade", IsRequired = true, EmitDefaultValue = true)]
        public bool Cangrade { get; set; }

        /// <summary>
        /// Gets or Sets Commentarea
        /// </summary>
        [DataMember(Name = "commentarea", EmitDefaultValue = false)]
        public CoreCompetencyReadPlan200ResponseCommentarea Commentarea { get; set; }

        /// <summary>
        /// Gets or Sets Competency
        /// </summary>
        [DataMember(Name = "competency", IsRequired = true, EmitDefaultValue = true)]
        public ToolLpDataForCompetencySummary200Response Competency { get; set; }

        /// <summary>
        /// Gets or Sets Evidence
        /// </summary>
        [DataMember(Name = "evidence", IsRequired = true, EmitDefaultValue = true)]
        public List<ToolLpDataForUserCompetencySummary200ResponseEvidenceInner> Evidence { get; set; }

        /// <summary>
        /// showrelatedcompetencies
        /// </summary>
        /// <value>showrelatedcompetencies</value>
        [DataMember(Name = "showrelatedcompetencies", IsRequired = true, EmitDefaultValue = true)]
        public bool Showrelatedcompetencies { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = true)]
        public CoreCompetencyGradeCompetency200ResponseActionuser User { get; set; }

        /// <summary>
        /// Gets or Sets Usercompetency
        /// </summary>
        [DataMember(Name = "usercompetency", EmitDefaultValue = false)]
        public ToolLpDataForUserCompetencySummary200ResponseUsercompetency Usercompetency { get; set; }

        /// <summary>
        /// Gets or Sets Usercompetencycourse
        /// </summary>
        [DataMember(Name = "usercompetencycourse", EmitDefaultValue = false)]
        public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse Usercompetencycourse { get; set; }

        /// <summary>
        /// Gets or Sets Usercompetencyplan
        /// </summary>
        [DataMember(Name = "usercompetencyplan", EmitDefaultValue = false)]
        public ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan Usercompetencyplan { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolLpDataForUserCompetencySummary200Response {\n");
            sb.Append("  Cangrade: ").Append(Cangrade).Append("\n");
            sb.Append("  Commentarea: ").Append(Commentarea).Append("\n");
            sb.Append("  Competency: ").Append(Competency).Append("\n");
            sb.Append("  Evidence: ").Append(Evidence).Append("\n");
            sb.Append("  Showrelatedcompetencies: ").Append(Showrelatedcompetencies).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Usercompetency: ").Append(Usercompetency).Append("\n");
            sb.Append("  Usercompetencycourse: ").Append(Usercompetencycourse).Append("\n");
            sb.Append("  Usercompetencyplan: ").Append(Usercompetencyplan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
