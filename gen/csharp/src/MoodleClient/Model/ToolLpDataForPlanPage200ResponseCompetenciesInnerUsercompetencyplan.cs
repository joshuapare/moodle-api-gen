/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetencyplan
    /// </summary>
    [DataContract(Name = "tool_lp_data_for_plan_page_200_response_competencies_inner_usercompetencyplan")]
    public partial class ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetencyplan : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetencyplan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetencyplan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetencyplan" /> class.
        /// </summary>
        /// <param name="competencyid">competencyid (required).</param>
        /// <param name="grade">grade (required).</param>
        /// <param name="gradename">gradename (required).</param>
        /// <param name="id">id (required) (default to 0).</param>
        /// <param name="planid">planid (required) (default to null).</param>
        /// <param name="proficiency">proficiency (required).</param>
        /// <param name="proficiencyname">proficiencyname (required).</param>
        /// <param name="sortorder">sortorder (required) (default to 0).</param>
        /// <param name="timecreated">timecreated (required) (default to 0).</param>
        /// <param name="timemodified">timemodified (required) (default to 0).</param>
        /// <param name="userid">userid (required).</param>
        /// <param name="usermodified">usermodified (required) (default to 0).</param>
        public ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetencyplan(int competencyid = default(int), int grade = default(int), string gradename = default(string), int id = 0, int planid = null, bool proficiency = default(bool), string proficiencyname = default(string), int sortorder = 0, int timecreated = 0, int timemodified = 0, int userid = default(int), int usermodified = 0)
        {
            this.Competencyid = competencyid;
            this.Grade = grade;
            // to ensure "gradename" is required (not null)
            if (gradename == null)
            {
                throw new ArgumentNullException("gradename is a required property for ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetencyplan and cannot be null");
            }
            this.Gradename = gradename;
            this.Id = id;
            this.Planid = planid;
            this.Proficiency = proficiency;
            // to ensure "proficiencyname" is required (not null)
            if (proficiencyname == null)
            {
                throw new ArgumentNullException("proficiencyname is a required property for ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetencyplan and cannot be null");
            }
            this.Proficiencyname = proficiencyname;
            this.Sortorder = sortorder;
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
            this.Userid = userid;
            this.Usermodified = usermodified;
        }

        /// <summary>
        /// competencyid
        /// </summary>
        /// <value>competencyid</value>
        [DataMember(Name = "competencyid", IsRequired = true, EmitDefaultValue = true)]
        public int Competencyid { get; set; }

        /// <summary>
        /// grade
        /// </summary>
        /// <value>grade</value>
        [DataMember(Name = "grade", IsRequired = true, EmitDefaultValue = true)]
        public int Grade { get; set; }

        /// <summary>
        /// gradename
        /// </summary>
        /// <value>gradename</value>
        [DataMember(Name = "gradename", IsRequired = true, EmitDefaultValue = true)]
        public string Gradename { get; set; }

        /// <summary>
        /// id
        /// </summary>
        /// <value>id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// planid
        /// </summary>
        /// <value>planid</value>
        [DataMember(Name = "planid", IsRequired = true, EmitDefaultValue = true)]
        public int Planid { get; set; }

        /// <summary>
        /// proficiency
        /// </summary>
        /// <value>proficiency</value>
        [DataMember(Name = "proficiency", IsRequired = true, EmitDefaultValue = true)]
        public bool Proficiency { get; set; }

        /// <summary>
        /// proficiencyname
        /// </summary>
        /// <value>proficiencyname</value>
        [DataMember(Name = "proficiencyname", IsRequired = true, EmitDefaultValue = true)]
        public string Proficiencyname { get; set; }

        /// <summary>
        /// sortorder
        /// </summary>
        /// <value>sortorder</value>
        [DataMember(Name = "sortorder", IsRequired = true, EmitDefaultValue = true)]
        public int Sortorder { get; set; }

        /// <summary>
        /// timecreated
        /// </summary>
        /// <value>timecreated</value>
        [DataMember(Name = "timecreated", IsRequired = true, EmitDefaultValue = true)]
        public int Timecreated { get; set; }

        /// <summary>
        /// timemodified
        /// </summary>
        /// <value>timemodified</value>
        [DataMember(Name = "timemodified", IsRequired = true, EmitDefaultValue = true)]
        public int Timemodified { get; set; }

        /// <summary>
        /// userid
        /// </summary>
        /// <value>userid</value>
        [DataMember(Name = "userid", IsRequired = true, EmitDefaultValue = true)]
        public int Userid { get; set; }

        /// <summary>
        /// usermodified
        /// </summary>
        /// <value>usermodified</value>
        [DataMember(Name = "usermodified", IsRequired = true, EmitDefaultValue = true)]
        public int Usermodified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetencyplan {\n");
            sb.Append("  Competencyid: ").Append(Competencyid).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Gradename: ").Append(Gradename).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Planid: ").Append(Planid).Append("\n");
            sb.Append("  Proficiency: ").Append(Proficiency).Append("\n");
            sb.Append("  Proficiencyname: ").Append(Proficiencyname).Append("\n");
            sb.Append("  Sortorder: ").Append(Sortorder).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("  Usermodified: ").Append(Usermodified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
