/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerTasksInner
    /// </summary>
    [DataContract(Name = "mod_workshop_get_user_plan_200_response_userplan_phases_inner_tasks_inner")]
    public partial class ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerTasksInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerTasksInner" /> class.
        /// </summary>
        /// <param name="code">Task code. (default to &quot;null&quot;).</param>
        /// <param name="completed">Completion information (maybe empty, maybe a boolean or generic info. (default to &quot;null&quot;).</param>
        /// <param name="details">Task details. (default to &quot;null&quot;).</param>
        /// <param name="link">Link to task. (default to &quot;null&quot;).</param>
        /// <param name="title">Task title. (default to &quot;null&quot;).</param>
        public ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerTasksInner(string code = @"null", string completed = @"null", string details = @"null", string link = @"null", string title = @"null")
        {
            // use default value if no "code" provided
            this.Code = code ?? @"null";
            // use default value if no "completed" provided
            this.Completed = completed ?? @"null";
            // use default value if no "details" provided
            this.Details = details ?? @"null";
            // use default value if no "link" provided
            this.Link = link ?? @"null";
            // use default value if no "title" provided
            this.Title = title ?? @"null";
        }

        /// <summary>
        /// Task code.
        /// </summary>
        /// <value>Task code.</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Completion information (maybe empty, maybe a boolean or generic info.
        /// </summary>
        /// <value>Completion information (maybe empty, maybe a boolean or generic info.</value>
        [DataMember(Name = "completed", EmitDefaultValue = false)]
        public string Completed { get; set; }

        /// <summary>
        /// Task details.
        /// </summary>
        /// <value>Task details.</value>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public string Details { get; set; }

        /// <summary>
        /// Link to task.
        /// </summary>
        /// <value>Link to task.</value>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public string Link { get; set; }

        /// <summary>
        /// Task title.
        /// </summary>
        /// <value>Task title.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModWorkshopGetUserPlan200ResponseUserplanPhasesInnerTasksInner {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
