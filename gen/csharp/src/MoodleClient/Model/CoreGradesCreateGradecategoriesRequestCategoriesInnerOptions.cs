/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreGradesCreateGradecategoriesRequestCategoriesInnerOptions
    /// </summary>
    [DataContract(Name = "core_grades_create_gradecategories_request_categories_inner_options")]
    public partial class CoreGradesCreateGradecategoriesRequestCategoriesInnerOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreGradesCreateGradecategoriesRequestCategoriesInnerOptions" /> class.
        /// </summary>
        /// <param name="aggregateonlygraded">exclude empty grades (default to null).</param>
        /// <param name="aggregateoutcomes">aggregate outcomes (default to null).</param>
        /// <param name="aggregation">aggregation method (default to null).</param>
        /// <param name="aggregationcoef2">weight coefficient (default to &quot;null&quot;).</param>
        /// <param name="decimals">the decimal count (default to null).</param>
        /// <param name="display">the display type (default to null).</param>
        /// <param name="droplow">drop low grades (default to null).</param>
        /// <param name="grademax">the grade max (default to null).</param>
        /// <param name="grademin">the grade min (default to null).</param>
        /// <param name="gradepass">the grade to pass (default to null).</param>
        /// <param name="gradetype">the grade type (default to null).</param>
        /// <param name="hiddenuntil">grades hidden until (default to null).</param>
        /// <param name="idnumber">the category idnumber (default to &quot;null&quot;).</param>
        /// <param name="iteminfo">the category iteminfo (default to &quot;null&quot;).</param>
        /// <param name="itemname">the category total name (default to &quot;null&quot;).</param>
        /// <param name="locktime">lock grades after (default to null).</param>
        /// <param name="parentcategoryid">The parent category id (default to null).</param>
        /// <param name="parentcategoryidnumber">the parent category idnumber (default to &quot;null&quot;).</param>
        /// <param name="weightoverride">weight adjusted (default to null).</param>
        public CoreGradesCreateGradecategoriesRequestCategoriesInnerOptions(bool aggregateonlygraded = null, bool aggregateoutcomes = null, int aggregation = null, string aggregationcoef2 = @"null", int decimals = null, int display = null, int droplow = null, int grademax = null, int grademin = null, int gradepass = null, int gradetype = null, int hiddenuntil = null, string idnumber = @"null", string iteminfo = @"null", string itemname = @"null", int locktime = null, int parentcategoryid = null, string parentcategoryidnumber = @"null", bool weightoverride = null)
        {
            this.Aggregateonlygraded = aggregateonlygraded;
            this.Aggregateoutcomes = aggregateoutcomes;
            this.Aggregation = aggregation;
            // use default value if no "aggregationcoef2" provided
            this.Aggregationcoef2 = aggregationcoef2 ?? @"null";
            this.Decimals = decimals;
            this.Display = display;
            this.Droplow = droplow;
            this.Grademax = grademax;
            this.Grademin = grademin;
            this.Gradepass = gradepass;
            this.Gradetype = gradetype;
            this.Hiddenuntil = hiddenuntil;
            // use default value if no "idnumber" provided
            this.Idnumber = idnumber ?? @"null";
            // use default value if no "iteminfo" provided
            this.Iteminfo = iteminfo ?? @"null";
            // use default value if no "itemname" provided
            this.Itemname = itemname ?? @"null";
            this.Locktime = locktime;
            this.Parentcategoryid = parentcategoryid;
            // use default value if no "parentcategoryidnumber" provided
            this.Parentcategoryidnumber = parentcategoryidnumber ?? @"null";
            this.Weightoverride = weightoverride;
        }

        /// <summary>
        /// exclude empty grades
        /// </summary>
        /// <value>exclude empty grades</value>
        [DataMember(Name = "aggregateonlygraded", EmitDefaultValue = true)]
        public bool Aggregateonlygraded { get; set; }

        /// <summary>
        /// aggregate outcomes
        /// </summary>
        /// <value>aggregate outcomes</value>
        [DataMember(Name = "aggregateoutcomes", EmitDefaultValue = true)]
        public bool Aggregateoutcomes { get; set; }

        /// <summary>
        /// aggregation method
        /// </summary>
        /// <value>aggregation method</value>
        [DataMember(Name = "aggregation", EmitDefaultValue = false)]
        public int Aggregation { get; set; }

        /// <summary>
        /// weight coefficient
        /// </summary>
        /// <value>weight coefficient</value>
        [DataMember(Name = "aggregationcoef2", EmitDefaultValue = false)]
        public string Aggregationcoef2 { get; set; }

        /// <summary>
        /// the decimal count
        /// </summary>
        /// <value>the decimal count</value>
        [DataMember(Name = "decimals", EmitDefaultValue = false)]
        public int Decimals { get; set; }

        /// <summary>
        /// the display type
        /// </summary>
        /// <value>the display type</value>
        [DataMember(Name = "display", EmitDefaultValue = false)]
        public int Display { get; set; }

        /// <summary>
        /// drop low grades
        /// </summary>
        /// <value>drop low grades</value>
        [DataMember(Name = "droplow", EmitDefaultValue = false)]
        public int Droplow { get; set; }

        /// <summary>
        /// the grade max
        /// </summary>
        /// <value>the grade max</value>
        [DataMember(Name = "grademax", EmitDefaultValue = false)]
        public int Grademax { get; set; }

        /// <summary>
        /// the grade min
        /// </summary>
        /// <value>the grade min</value>
        [DataMember(Name = "grademin", EmitDefaultValue = false)]
        public int Grademin { get; set; }

        /// <summary>
        /// the grade to pass
        /// </summary>
        /// <value>the grade to pass</value>
        [DataMember(Name = "gradepass", EmitDefaultValue = false)]
        public int Gradepass { get; set; }

        /// <summary>
        /// the grade type
        /// </summary>
        /// <value>the grade type</value>
        [DataMember(Name = "gradetype", EmitDefaultValue = false)]
        public int Gradetype { get; set; }

        /// <summary>
        /// grades hidden until
        /// </summary>
        /// <value>grades hidden until</value>
        [DataMember(Name = "hiddenuntil", EmitDefaultValue = false)]
        public int Hiddenuntil { get; set; }

        /// <summary>
        /// the category idnumber
        /// </summary>
        /// <value>the category idnumber</value>
        [DataMember(Name = "idnumber", EmitDefaultValue = false)]
        public string Idnumber { get; set; }

        /// <summary>
        /// the category iteminfo
        /// </summary>
        /// <value>the category iteminfo</value>
        [DataMember(Name = "iteminfo", EmitDefaultValue = false)]
        public string Iteminfo { get; set; }

        /// <summary>
        /// the category total name
        /// </summary>
        /// <value>the category total name</value>
        [DataMember(Name = "itemname", EmitDefaultValue = false)]
        public string Itemname { get; set; }

        /// <summary>
        /// lock grades after
        /// </summary>
        /// <value>lock grades after</value>
        [DataMember(Name = "locktime", EmitDefaultValue = false)]
        public int Locktime { get; set; }

        /// <summary>
        /// The parent category id
        /// </summary>
        /// <value>The parent category id</value>
        [DataMember(Name = "parentcategoryid", EmitDefaultValue = false)]
        public int Parentcategoryid { get; set; }

        /// <summary>
        /// the parent category idnumber
        /// </summary>
        /// <value>the parent category idnumber</value>
        [DataMember(Name = "parentcategoryidnumber", EmitDefaultValue = false)]
        public string Parentcategoryidnumber { get; set; }

        /// <summary>
        /// weight adjusted
        /// </summary>
        /// <value>weight adjusted</value>
        [DataMember(Name = "weightoverride", EmitDefaultValue = true)]
        public bool Weightoverride { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreGradesCreateGradecategoriesRequestCategoriesInnerOptions {\n");
            sb.Append("  Aggregateonlygraded: ").Append(Aggregateonlygraded).Append("\n");
            sb.Append("  Aggregateoutcomes: ").Append(Aggregateoutcomes).Append("\n");
            sb.Append("  Aggregation: ").Append(Aggregation).Append("\n");
            sb.Append("  Aggregationcoef2: ").Append(Aggregationcoef2).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  Droplow: ").Append(Droplow).Append("\n");
            sb.Append("  Grademax: ").Append(Grademax).Append("\n");
            sb.Append("  Grademin: ").Append(Grademin).Append("\n");
            sb.Append("  Gradepass: ").Append(Gradepass).Append("\n");
            sb.Append("  Gradetype: ").Append(Gradetype).Append("\n");
            sb.Append("  Hiddenuntil: ").Append(Hiddenuntil).Append("\n");
            sb.Append("  Idnumber: ").Append(Idnumber).Append("\n");
            sb.Append("  Iteminfo: ").Append(Iteminfo).Append("\n");
            sb.Append("  Itemname: ").Append(Itemname).Append("\n");
            sb.Append("  Locktime: ").Append(Locktime).Append("\n");
            sb.Append("  Parentcategoryid: ").Append(Parentcategoryid).Append("\n");
            sb.Append("  Parentcategoryidnumber: ").Append(Parentcategoryidnumber).Append("\n");
            sb.Append("  Weightoverride: ").Append(Weightoverride).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
