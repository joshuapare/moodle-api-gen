/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreMessageGetUserMessagePreferences200ResponsePreferencesProcessorsInner
    /// </summary>
    [DataContract(Name = "core_message_get_user_message_preferences_200_response_preferences_processors_inner")]
    public partial class CoreMessageGetUserMessagePreferences200ResponsePreferencesProcessorsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreMessageGetUserMessagePreferences200ResponsePreferencesProcessorsInner" /> class.
        /// </summary>
        /// <param name="contextid">Context id (default to null).</param>
        /// <param name="displayname">Display name.</param>
        /// <param name="hassettings">Whether has settings (default to null).</param>
        /// <param name="name">Processor name.</param>
        /// <param name="userconfigured">Whether is configured by the user (default to null).</param>
        public CoreMessageGetUserMessagePreferences200ResponsePreferencesProcessorsInner(int contextid = null, string displayname = default(string), bool hassettings = null, string name = default(string), int userconfigured = null)
        {
            this.Contextid = contextid;
            this.Displayname = displayname;
            this.Hassettings = hassettings;
            this.Name = name;
            this.Userconfigured = userconfigured;
        }

        /// <summary>
        /// Context id
        /// </summary>
        /// <value>Context id</value>
        [DataMember(Name = "contextid", EmitDefaultValue = false)]
        public int Contextid { get; set; }

        /// <summary>
        /// Display name
        /// </summary>
        /// <value>Display name</value>
        [DataMember(Name = "displayname", EmitDefaultValue = false)]
        public string Displayname { get; set; }

        /// <summary>
        /// Whether has settings
        /// </summary>
        /// <value>Whether has settings</value>
        [DataMember(Name = "hassettings", EmitDefaultValue = true)]
        public bool Hassettings { get; set; }

        /// <summary>
        /// Processor name
        /// </summary>
        /// <value>Processor name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether is configured by the user
        /// </summary>
        /// <value>Whether is configured by the user</value>
        [DataMember(Name = "userconfigured", EmitDefaultValue = false)]
        public int Userconfigured { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreMessageGetUserMessagePreferences200ResponsePreferencesProcessorsInner {\n");
            sb.Append("  Contextid: ").Append(Contextid).Append("\n");
            sb.Append("  Displayname: ").Append(Displayname).Append("\n");
            sb.Append("  Hassettings: ").Append(Hassettings).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Userconfigured: ").Append(Userconfigured).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
