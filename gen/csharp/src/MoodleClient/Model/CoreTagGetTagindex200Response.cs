/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreTagGetTagindex200Response
    /// </summary>
    [DataContract(Name = "core_tag_get_tagindex_200_response")]
    public partial class CoreTagGetTagindex200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreTagGetTagindex200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CoreTagGetTagindex200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreTagGetTagindex200Response" /> class.
        /// </summary>
        /// <param name="anchor">name of anchor (default to &quot;null&quot;).</param>
        /// <param name="component">component (required).</param>
        /// <param name="content">title (required) (default to &quot;null&quot;).</param>
        /// <param name="exclusivetext">text for exclusive link (default to &quot;null&quot;).</param>
        /// <param name="exclusiveurl">URL for exclusive link (default to &quot;null&quot;).</param>
        /// <param name="hascontent">whether the content is present (required) (default to null).</param>
        /// <param name="itemtype">itemtype (required) (default to &quot;null&quot;).</param>
        /// <param name="nextpageurl">URL for the next page (default to &quot;null&quot;).</param>
        /// <param name="prevpageurl">URL for the next page.</param>
        /// <param name="ta">tag area id (required).</param>
        /// <param name="tagid">tag id (required) (default to null).</param>
        /// <param name="title">title (required).</param>
        public CoreTagGetTagindex200Response(string anchor = @"null", string component = default(string), string content = @"null", string exclusivetext = @"null", string exclusiveurl = @"null", int hascontent = null, string itemtype = @"null", string nextpageurl = @"null", string prevpageurl = default(string), int ta = default(int), int tagid = null, string title = default(string))
        {
            // to ensure "component" is required (not null)
            if (component == null)
            {
                throw new ArgumentNullException("component is a required property for CoreTagGetTagindex200Response and cannot be null");
            }
            this.Component = component;
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new ArgumentNullException("content is a required property for CoreTagGetTagindex200Response and cannot be null");
            }
            this.Content = content;
            this.Hascontent = hascontent;
            // to ensure "itemtype" is required (not null)
            if (itemtype == null)
            {
                throw new ArgumentNullException("itemtype is a required property for CoreTagGetTagindex200Response and cannot be null");
            }
            this.Itemtype = itemtype;
            this.Ta = ta;
            this.Tagid = tagid;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for CoreTagGetTagindex200Response and cannot be null");
            }
            this.Title = title;
            // use default value if no "anchor" provided
            this.Anchor = anchor ?? @"null";
            // use default value if no "exclusivetext" provided
            this.Exclusivetext = exclusivetext ?? @"null";
            // use default value if no "exclusiveurl" provided
            this.Exclusiveurl = exclusiveurl ?? @"null";
            // use default value if no "nextpageurl" provided
            this.Nextpageurl = nextpageurl ?? @"null";
            this.Prevpageurl = prevpageurl;
        }

        /// <summary>
        /// name of anchor
        /// </summary>
        /// <value>name of anchor</value>
        [DataMember(Name = "anchor", EmitDefaultValue = false)]
        public string Anchor { get; set; }

        /// <summary>
        /// component
        /// </summary>
        /// <value>component</value>
        [DataMember(Name = "component", IsRequired = true, EmitDefaultValue = true)]
        public string Component { get; set; }

        /// <summary>
        /// title
        /// </summary>
        /// <value>title</value>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = true)]
        public string Content { get; set; }

        /// <summary>
        /// text for exclusive link
        /// </summary>
        /// <value>text for exclusive link</value>
        [DataMember(Name = "exclusivetext", EmitDefaultValue = false)]
        public string Exclusivetext { get; set; }

        /// <summary>
        /// URL for exclusive link
        /// </summary>
        /// <value>URL for exclusive link</value>
        [DataMember(Name = "exclusiveurl", EmitDefaultValue = false)]
        public string Exclusiveurl { get; set; }

        /// <summary>
        /// whether the content is present
        /// </summary>
        /// <value>whether the content is present</value>
        [DataMember(Name = "hascontent", IsRequired = true, EmitDefaultValue = true)]
        public int Hascontent { get; set; }

        /// <summary>
        /// itemtype
        /// </summary>
        /// <value>itemtype</value>
        [DataMember(Name = "itemtype", IsRequired = true, EmitDefaultValue = true)]
        public string Itemtype { get; set; }

        /// <summary>
        /// URL for the next page
        /// </summary>
        /// <value>URL for the next page</value>
        [DataMember(Name = "nextpageurl", EmitDefaultValue = false)]
        public string Nextpageurl { get; set; }

        /// <summary>
        /// URL for the next page
        /// </summary>
        /// <value>URL for the next page</value>
        [DataMember(Name = "prevpageurl", EmitDefaultValue = false)]
        public string Prevpageurl { get; set; }

        /// <summary>
        /// tag area id
        /// </summary>
        /// <value>tag area id</value>
        [DataMember(Name = "ta", IsRequired = true, EmitDefaultValue = true)]
        public int Ta { get; set; }

        /// <summary>
        /// tag id
        /// </summary>
        /// <value>tag id</value>
        [DataMember(Name = "tagid", IsRequired = true, EmitDefaultValue = true)]
        public int Tagid { get; set; }

        /// <summary>
        /// title
        /// </summary>
        /// <value>title</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreTagGetTagindex200Response {\n");
            sb.Append("  Anchor: ").Append(Anchor).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Exclusivetext: ").Append(Exclusivetext).Append("\n");
            sb.Append("  Exclusiveurl: ").Append(Exclusiveurl).Append("\n");
            sb.Append("  Hascontent: ").Append(Hascontent).Append("\n");
            sb.Append("  Itemtype: ").Append(Itemtype).Append("\n");
            sb.Append("  Nextpageurl: ").Append(Nextpageurl).Append("\n");
            sb.Append("  Prevpageurl: ").Append(Prevpageurl).Append("\n");
            sb.Append("  Ta: ").Append(Ta).Append("\n");
            sb.Append("  Tagid: ").Append(Tagid).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
