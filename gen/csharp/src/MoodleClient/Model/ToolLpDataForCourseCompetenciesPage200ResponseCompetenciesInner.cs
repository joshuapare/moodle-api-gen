/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner
    /// </summary>
    [DataContract(Name = "tool_lp_data_for_course_competencies_page_200_response_competencies_inner")]
    public partial class ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner" /> class.
        /// </summary>
        /// <param name="competency">competency.</param>
        /// <param name="comppath">comppath.</param>
        /// <param name="coursecompetency">coursecompetency.</param>
        /// <param name="coursemodules">coursemodules.</param>
        /// <param name="plans">plans.</param>
        /// <param name="ruleoutcomeoptions">ruleoutcomeoptions.</param>
        /// <param name="usercompetencycourse">usercompetencycourse.</param>
        public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner(CoreCompetencyCreateCompetency200Response competency = default(CoreCompetencyCreateCompetency200Response), ToolLpDataForCompetencySummary200ResponseComppath comppath = default(ToolLpDataForCompetencySummary200ResponseComppath), ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursecompetency coursecompetency = default(ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursecompetency), List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner> coursemodules = default(List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner>), List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner> plans = default(List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner>), List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerRuleoutcomeoptionsInner> ruleoutcomeoptions = default(List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerRuleoutcomeoptionsInner>), ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse usercompetencycourse = default(ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse))
        {
            this.Competency = competency;
            this.Comppath = comppath;
            this.Coursecompetency = coursecompetency;
            this.Coursemodules = coursemodules;
            this.Plans = plans;
            this.Ruleoutcomeoptions = ruleoutcomeoptions;
            this.Usercompetencycourse = usercompetencycourse;
        }

        /// <summary>
        /// Gets or Sets Competency
        /// </summary>
        [DataMember(Name = "competency", EmitDefaultValue = false)]
        public CoreCompetencyCreateCompetency200Response Competency { get; set; }

        /// <summary>
        /// Gets or Sets Comppath
        /// </summary>
        [DataMember(Name = "comppath", EmitDefaultValue = false)]
        public ToolLpDataForCompetencySummary200ResponseComppath Comppath { get; set; }

        /// <summary>
        /// Gets or Sets Coursecompetency
        /// </summary>
        [DataMember(Name = "coursecompetency", EmitDefaultValue = false)]
        public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursecompetency Coursecompetency { get; set; }

        /// <summary>
        /// Gets or Sets Coursemodules
        /// </summary>
        [DataMember(Name = "coursemodules", EmitDefaultValue = false)]
        public List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner> Coursemodules { get; set; }

        /// <summary>
        /// Gets or Sets Plans
        /// </summary>
        [DataMember(Name = "plans", EmitDefaultValue = false)]
        public List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner> Plans { get; set; }

        /// <summary>
        /// Gets or Sets Ruleoutcomeoptions
        /// </summary>
        [DataMember(Name = "ruleoutcomeoptions", EmitDefaultValue = false)]
        public List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerRuleoutcomeoptionsInner> Ruleoutcomeoptions { get; set; }

        /// <summary>
        /// Gets or Sets Usercompetencycourse
        /// </summary>
        [DataMember(Name = "usercompetencycourse", EmitDefaultValue = false)]
        public ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse Usercompetencycourse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner {\n");
            sb.Append("  Competency: ").Append(Competency).Append("\n");
            sb.Append("  Comppath: ").Append(Comppath).Append("\n");
            sb.Append("  Coursecompetency: ").Append(Coursecompetency).Append("\n");
            sb.Append("  Coursemodules: ").Append(Coursemodules).Append("\n");
            sb.Append("  Plans: ").Append(Plans).Append("\n");
            sb.Append("  Ruleoutcomeoptions: ").Append(Ruleoutcomeoptions).Append("\n");
            sb.Append("  Usercompetencycourse: ").Append(Usercompetencycourse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
