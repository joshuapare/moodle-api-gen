/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// CoreMessageDataForMessageareaSearchMessages200ResponseContactsInner
    /// </summary>
    [DataContract(Name = "core_message_data_for_messagearea_search_messages_200_response_contacts_inner")]
    public partial class CoreMessageDataForMessageareaSearchMessages200ResponseContactsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CoreMessageDataForMessageareaSearchMessages200ResponseContactsInner" /> class.
        /// </summary>
        /// <param name="conversationid">The id of the conversation (default to null).</param>
        /// <param name="fullname">The user&#39;s name (default to &quot;null&quot;).</param>
        /// <param name="isblocked">If the user has been blocked (default to null).</param>
        /// <param name="ismessaging">If we are messaging the user (default to null).</param>
        /// <param name="isonline">The user&#39;s online status (default to null).</param>
        /// <param name="isread">If the user has read the message (default to null).</param>
        /// <param name="lastmessage">The user&#39;s last message (default to &quot;null&quot;).</param>
        /// <param name="lastmessagedate">Timestamp for last message (default to null).</param>
        /// <param name="messageid">The unique search message id (default to null).</param>
        /// <param name="profileimageurl">User picture URL (default to &quot;null&quot;).</param>
        /// <param name="profileimageurlsmall">Small user picture URL (default to &quot;null&quot;).</param>
        /// <param name="sentfromcurrentuser">Was the last message sent from the current user? (default to null).</param>
        /// <param name="showonlinestatus">Show the user&#39;s online status? (default to null).</param>
        /// <param name="unreadcount">The number of unread messages in this conversation (default to null).</param>
        /// <param name="userid">The user&#39;s id (default to null).</param>
        public CoreMessageDataForMessageareaSearchMessages200ResponseContactsInner(int conversationid = null, string fullname = @"null", bool isblocked = null, bool ismessaging = null, bool isonline = null, bool isread = null, string lastmessage = @"null", int lastmessagedate = null, int messageid = null, string profileimageurl = @"null", string profileimageurlsmall = @"null", bool sentfromcurrentuser = null, bool showonlinestatus = null, int unreadcount = null, int userid = null)
        {
            this.Conversationid = conversationid;
            // use default value if no "fullname" provided
            this.Fullname = fullname ?? @"null";
            this.Isblocked = isblocked;
            this.Ismessaging = ismessaging;
            this.Isonline = isonline;
            this.Isread = isread;
            // use default value if no "lastmessage" provided
            this.Lastmessage = lastmessage ?? @"null";
            this.Lastmessagedate = lastmessagedate;
            this.Messageid = messageid;
            // use default value if no "profileimageurl" provided
            this.Profileimageurl = profileimageurl ?? @"null";
            // use default value if no "profileimageurlsmall" provided
            this.Profileimageurlsmall = profileimageurlsmall ?? @"null";
            this.Sentfromcurrentuser = sentfromcurrentuser;
            this.Showonlinestatus = showonlinestatus;
            this.Unreadcount = unreadcount;
            this.Userid = userid;
        }

        /// <summary>
        /// The id of the conversation
        /// </summary>
        /// <value>The id of the conversation</value>
        [DataMember(Name = "conversationid", EmitDefaultValue = false)]
        public int Conversationid { get; set; }

        /// <summary>
        /// The user&#39;s name
        /// </summary>
        /// <value>The user&#39;s name</value>
        [DataMember(Name = "fullname", EmitDefaultValue = false)]
        public string Fullname { get; set; }

        /// <summary>
        /// If the user has been blocked
        /// </summary>
        /// <value>If the user has been blocked</value>
        [DataMember(Name = "isblocked", EmitDefaultValue = true)]
        public bool Isblocked { get; set; }

        /// <summary>
        /// If we are messaging the user
        /// </summary>
        /// <value>If we are messaging the user</value>
        [DataMember(Name = "ismessaging", EmitDefaultValue = true)]
        public bool Ismessaging { get; set; }

        /// <summary>
        /// The user&#39;s online status
        /// </summary>
        /// <value>The user&#39;s online status</value>
        [DataMember(Name = "isonline", EmitDefaultValue = true)]
        public bool Isonline { get; set; }

        /// <summary>
        /// If the user has read the message
        /// </summary>
        /// <value>If the user has read the message</value>
        [DataMember(Name = "isread", EmitDefaultValue = true)]
        public bool Isread { get; set; }

        /// <summary>
        /// The user&#39;s last message
        /// </summary>
        /// <value>The user&#39;s last message</value>
        [DataMember(Name = "lastmessage", EmitDefaultValue = false)]
        public string Lastmessage { get; set; }

        /// <summary>
        /// Timestamp for last message
        /// </summary>
        /// <value>Timestamp for last message</value>
        [DataMember(Name = "lastmessagedate", EmitDefaultValue = false)]
        public int Lastmessagedate { get; set; }

        /// <summary>
        /// The unique search message id
        /// </summary>
        /// <value>The unique search message id</value>
        [DataMember(Name = "messageid", EmitDefaultValue = false)]
        public int Messageid { get; set; }

        /// <summary>
        /// User picture URL
        /// </summary>
        /// <value>User picture URL</value>
        [DataMember(Name = "profileimageurl", EmitDefaultValue = false)]
        public string Profileimageurl { get; set; }

        /// <summary>
        /// Small user picture URL
        /// </summary>
        /// <value>Small user picture URL</value>
        [DataMember(Name = "profileimageurlsmall", EmitDefaultValue = false)]
        public string Profileimageurlsmall { get; set; }

        /// <summary>
        /// Was the last message sent from the current user?
        /// </summary>
        /// <value>Was the last message sent from the current user?</value>
        [DataMember(Name = "sentfromcurrentuser", EmitDefaultValue = true)]
        public bool Sentfromcurrentuser { get; set; }

        /// <summary>
        /// Show the user&#39;s online status?
        /// </summary>
        /// <value>Show the user&#39;s online status?</value>
        [DataMember(Name = "showonlinestatus", EmitDefaultValue = true)]
        public bool Showonlinestatus { get; set; }

        /// <summary>
        /// The number of unread messages in this conversation
        /// </summary>
        /// <value>The number of unread messages in this conversation</value>
        [DataMember(Name = "unreadcount", EmitDefaultValue = false)]
        public int Unreadcount { get; set; }

        /// <summary>
        /// The user&#39;s id
        /// </summary>
        /// <value>The user&#39;s id</value>
        [DataMember(Name = "userid", EmitDefaultValue = false)]
        public int Userid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CoreMessageDataForMessageareaSearchMessages200ResponseContactsInner {\n");
            sb.Append("  Conversationid: ").Append(Conversationid).Append("\n");
            sb.Append("  Fullname: ").Append(Fullname).Append("\n");
            sb.Append("  Isblocked: ").Append(Isblocked).Append("\n");
            sb.Append("  Ismessaging: ").Append(Ismessaging).Append("\n");
            sb.Append("  Isonline: ").Append(Isonline).Append("\n");
            sb.Append("  Isread: ").Append(Isread).Append("\n");
            sb.Append("  Lastmessage: ").Append(Lastmessage).Append("\n");
            sb.Append("  Lastmessagedate: ").Append(Lastmessagedate).Append("\n");
            sb.Append("  Messageid: ").Append(Messageid).Append("\n");
            sb.Append("  Profileimageurl: ").Append(Profileimageurl).Append("\n");
            sb.Append("  Profileimageurlsmall: ").Append(Profileimageurlsmall).Append("\n");
            sb.Append("  Sentfromcurrentuser: ").Append(Sentfromcurrentuser).Append("\n");
            sb.Append("  Showonlinestatus: ").Append(Showonlinestatus).Append("\n");
            sb.Append("  Unreadcount: ").Append(Unreadcount).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
