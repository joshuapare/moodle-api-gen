/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// The page answers
    /// </summary>
    [DataContract(Name = "mod_lesson_get_page_data_200_response_answers_inner")]
    public partial class ModLessonGetPageData200ResponseAnswersInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModLessonGetPageData200ResponseAnswersInner" /> class.
        /// </summary>
        /// <param name="answer">Possible answer text (default to &quot;null&quot;).</param>
        /// <param name="answerfiles">answerfiles.</param>
        /// <param name="answerformat">answer format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to null).</param>
        /// <param name="flags">Used to store options for the answer (default to null).</param>
        /// <param name="grade">The grade this answer is worth (default to null).</param>
        /// <param name="id">The ID of this answer in the database (default to null).</param>
        /// <param name="jumpto">Identifies where the user goes upon completing a page with this answer (default to null).</param>
        /// <param name="response">Response text for the answer (default to &quot;null&quot;).</param>
        /// <param name="responsefiles">responsefiles.</param>
        /// <param name="responseformat">response format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN) (default to null).</param>
        /// <param name="score">The score this answer will give (default to null).</param>
        /// <param name="timecreated">A timestamp of when the answer was created (default to null).</param>
        /// <param name="timemodified">A timestamp of when the answer was modified (default to null).</param>
        public ModLessonGetPageData200ResponseAnswersInner(string answer = @"null", List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> answerfiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), int answerformat = null, int flags = null, int grade = null, int id = null, int jumpto = null, string response = @"null", List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> responsefiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), int responseformat = null, int score = null, int timecreated = null, int timemodified = null)
        {
            // use default value if no "answer" provided
            this.Answer = answer ?? @"null";
            this.Answerfiles = answerfiles;
            this.Answerformat = answerformat;
            this.Flags = flags;
            this.Grade = grade;
            this.Id = id;
            this.Jumpto = jumpto;
            // use default value if no "response" provided
            this.Response = response ?? @"null";
            this.Responsefiles = responsefiles;
            this.Responseformat = responseformat;
            this.Score = score;
            this.Timecreated = timecreated;
            this.Timemodified = timemodified;
        }

        /// <summary>
        /// Possible answer text
        /// </summary>
        /// <value>Possible answer text</value>
        [DataMember(Name = "answer", EmitDefaultValue = false)]
        public string Answer { get; set; }

        /// <summary>
        /// Gets or Sets Answerfiles
        /// </summary>
        [DataMember(Name = "answerfiles", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Answerfiles { get; set; }

        /// <summary>
        /// answer format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>answer format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "answerformat", EmitDefaultValue = false)]
        public int Answerformat { get; set; }

        /// <summary>
        /// Used to store options for the answer
        /// </summary>
        /// <value>Used to store options for the answer</value>
        [DataMember(Name = "flags", EmitDefaultValue = false)]
        public int Flags { get; set; }

        /// <summary>
        /// The grade this answer is worth
        /// </summary>
        /// <value>The grade this answer is worth</value>
        [DataMember(Name = "grade", EmitDefaultValue = false)]
        public int Grade { get; set; }

        /// <summary>
        /// The ID of this answer in the database
        /// </summary>
        /// <value>The ID of this answer in the database</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Identifies where the user goes upon completing a page with this answer
        /// </summary>
        /// <value>Identifies where the user goes upon completing a page with this answer</value>
        [DataMember(Name = "jumpto", EmitDefaultValue = false)]
        public int Jumpto { get; set; }

        /// <summary>
        /// Response text for the answer
        /// </summary>
        /// <value>Response text for the answer</value>
        [DataMember(Name = "response", EmitDefaultValue = false)]
        public string Response { get; set; }

        /// <summary>
        /// Gets or Sets Responsefiles
        /// </summary>
        [DataMember(Name = "responsefiles", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Responsefiles { get; set; }

        /// <summary>
        /// response format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>response format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "responseformat", EmitDefaultValue = false)]
        public int Responseformat { get; set; }

        /// <summary>
        /// The score this answer will give
        /// </summary>
        /// <value>The score this answer will give</value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public int Score { get; set; }

        /// <summary>
        /// A timestamp of when the answer was created
        /// </summary>
        /// <value>A timestamp of when the answer was created</value>
        [DataMember(Name = "timecreated", EmitDefaultValue = false)]
        public int Timecreated { get; set; }

        /// <summary>
        /// A timestamp of when the answer was modified
        /// </summary>
        /// <value>A timestamp of when the answer was modified</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModLessonGetPageData200ResponseAnswersInner {\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  Answerfiles: ").Append(Answerfiles).Append("\n");
            sb.Append("  Answerformat: ").Append(Answerformat).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Jumpto: ").Append(Jumpto).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  Responsefiles: ").Append(Responsefiles).Append("\n");
            sb.Append("  Responseformat: ").Append(Responseformat).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Timecreated: ").Append(Timecreated).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
