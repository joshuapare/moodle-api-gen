/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// ToolLpDataForPlansPage200Response
    /// </summary>
    [DataContract(Name = "tool_lp_data_for_plans_page_200_response")]
    public partial class ToolLpDataForPlansPage200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForPlansPage200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ToolLpDataForPlansPage200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ToolLpDataForPlansPage200Response" /> class.
        /// </summary>
        /// <param name="canmanageuserplans">Can the current user manage the user&#39;s plans (required) (default to null).</param>
        /// <param name="canreaduserevidence">Can the current user view the user&#39;s evidence (required) (default to null).</param>
        /// <param name="navigation">navigation (required).</param>
        /// <param name="plans">plans (required).</param>
        /// <param name="pluginbaseurl">Url to the tool_lp plugin folder on this Moodle site (required).</param>
        /// <param name="userid">The learning plan user id (required) (default to null).</param>
        public ToolLpDataForPlansPage200Response(bool canmanageuserplans = null, bool canreaduserevidence = null, List<Object> navigation = default(List<Object>), List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner> plans = default(List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner>), string pluginbaseurl = default(string), int userid = null)
        {
            this.Canmanageuserplans = canmanageuserplans;
            this.Canreaduserevidence = canreaduserevidence;
            // to ensure "navigation" is required (not null)
            if (navigation == null)
            {
                throw new ArgumentNullException("navigation is a required property for ToolLpDataForPlansPage200Response and cannot be null");
            }
            this.Navigation = navigation;
            // to ensure "plans" is required (not null)
            if (plans == null)
            {
                throw new ArgumentNullException("plans is a required property for ToolLpDataForPlansPage200Response and cannot be null");
            }
            this.Plans = plans;
            // to ensure "pluginbaseurl" is required (not null)
            if (pluginbaseurl == null)
            {
                throw new ArgumentNullException("pluginbaseurl is a required property for ToolLpDataForPlansPage200Response and cannot be null");
            }
            this.Pluginbaseurl = pluginbaseurl;
            this.Userid = userid;
        }

        /// <summary>
        /// Can the current user manage the user&#39;s plans
        /// </summary>
        /// <value>Can the current user manage the user&#39;s plans</value>
        [DataMember(Name = "canmanageuserplans", IsRequired = true, EmitDefaultValue = true)]
        public bool Canmanageuserplans { get; set; }

        /// <summary>
        /// Can the current user view the user&#39;s evidence
        /// </summary>
        /// <value>Can the current user view the user&#39;s evidence</value>
        [DataMember(Name = "canreaduserevidence", IsRequired = true, EmitDefaultValue = true)]
        public bool Canreaduserevidence { get; set; }

        /// <summary>
        /// Gets or Sets Navigation
        /// </summary>
        [DataMember(Name = "navigation", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Navigation { get; set; }

        /// <summary>
        /// Gets or Sets Plans
        /// </summary>
        [DataMember(Name = "plans", IsRequired = true, EmitDefaultValue = true)]
        public List<ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner> Plans { get; set; }

        /// <summary>
        /// Url to the tool_lp plugin folder on this Moodle site
        /// </summary>
        /// <value>Url to the tool_lp plugin folder on this Moodle site</value>
        [DataMember(Name = "pluginbaseurl", IsRequired = true, EmitDefaultValue = true)]
        public string Pluginbaseurl { get; set; }

        /// <summary>
        /// The learning plan user id
        /// </summary>
        /// <value>The learning plan user id</value>
        [DataMember(Name = "userid", IsRequired = true, EmitDefaultValue = true)]
        public int Userid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ToolLpDataForPlansPage200Response {\n");
            sb.Append("  Canmanageuserplans: ").Append(Canmanageuserplans).Append("\n");
            sb.Append("  Canreaduserevidence: ").Append(Canreaduserevidence).Append("\n");
            sb.Append("  Navigation: ").Append(Navigation).Append("\n");
            sb.Append("  Plans: ").Append(Plans).Append("\n");
            sb.Append("  Pluginbaseurl: ").Append(Pluginbaseurl).Append("\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
