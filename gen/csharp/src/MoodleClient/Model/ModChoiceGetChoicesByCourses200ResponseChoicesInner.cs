/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = MoodleClient.Client.OpenAPIDateConverter;

namespace MoodleClient.Model
{
    /// <summary>
    /// Choices
    /// </summary>
    [DataContract(Name = "mod_choice_get_choices_by_courses_200_response_choices_inner")]
    public partial class ModChoiceGetChoicesByCourses200ResponseChoicesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModChoiceGetChoicesByCourses200ResponseChoicesInner" /> class.
        /// </summary>
        /// <param name="allowmultiple">Allow multiple choices (default to null).</param>
        /// <param name="allowupdate">Allow update (default to null).</param>
        /// <param name="completionsubmit">Completion on user submission (default to null).</param>
        /// <param name="course">Course id.</param>
        /// <param name="coursemodule">Course module id.</param>
        /// <param name="display">Display mode (vertical, horizontal) (default to null).</param>
        /// <param name="groupingid">Group id.</param>
        /// <param name="groupmode">Group mode.</param>
        /// <param name="id">Activity instance id.</param>
        /// <param name="includeinactive">Include inactive users (default to null).</param>
        /// <param name="intro">Activity introduction.</param>
        /// <param name="introfiles">introfiles.</param>
        /// <param name="introformat">intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN).</param>
        /// <param name="lang">Forced activity language.</param>
        /// <param name="limitanswers">Limit unswers (default to null).</param>
        /// <param name="name">Activity name.</param>
        /// <param name="publish">If choice is published (default to null).</param>
        /// <param name="section">Course section id.</param>
        /// <param name="showavailable">Show available spaces (default to null).</param>
        /// <param name="showpreview">Show preview before timeopen (default to null).</param>
        /// <param name="showresults">0 never, 1 after answer, 2 after close, 3 always (default to null).</param>
        /// <param name="showunanswered">Show users who not answered yet (default to null).</param>
        /// <param name="timeclose">Date of closing validity (default to null).</param>
        /// <param name="timemodified">Time of last modification.</param>
        /// <param name="timeopen">Date of opening validity (default to null).</param>
        /// <param name="visible">Visible.</param>
        public ModChoiceGetChoicesByCourses200ResponseChoicesInner(bool allowmultiple = null, bool allowupdate = null, bool completionsubmit = null, int course = default(int), int coursemodule = default(int), int display = null, int groupingid = default(int), int groupmode = default(int), int id = default(int), bool includeinactive = null, string intro = default(string), List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> introfiles = default(List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>), int introformat = default(int), string lang = default(string), bool limitanswers = null, string name = default(string), bool publish = null, int section = default(int), bool showavailable = null, bool showpreview = null, int showresults = null, bool showunanswered = null, int timeclose = null, int timemodified = default(int), int timeopen = null, bool visible = default(bool))
        {
            this.Allowmultiple = allowmultiple;
            this.Allowupdate = allowupdate;
            this.Completionsubmit = completionsubmit;
            this.Course = course;
            this.Coursemodule = coursemodule;
            this.Display = display;
            this.Groupingid = groupingid;
            this.Groupmode = groupmode;
            this.Id = id;
            this.Includeinactive = includeinactive;
            this.Intro = intro;
            this.Introfiles = introfiles;
            this.Introformat = introformat;
            this.Lang = lang;
            this.Limitanswers = limitanswers;
            this.Name = name;
            this.Publish = publish;
            this.Section = section;
            this.Showavailable = showavailable;
            this.Showpreview = showpreview;
            this.Showresults = showresults;
            this.Showunanswered = showunanswered;
            this.Timeclose = timeclose;
            this.Timemodified = timemodified;
            this.Timeopen = timeopen;
            this.Visible = visible;
        }

        /// <summary>
        /// Allow multiple choices
        /// </summary>
        /// <value>Allow multiple choices</value>
        [DataMember(Name = "allowmultiple", EmitDefaultValue = true)]
        public bool Allowmultiple { get; set; }

        /// <summary>
        /// Allow update
        /// </summary>
        /// <value>Allow update</value>
        [DataMember(Name = "allowupdate", EmitDefaultValue = true)]
        public bool Allowupdate { get; set; }

        /// <summary>
        /// Completion on user submission
        /// </summary>
        /// <value>Completion on user submission</value>
        [DataMember(Name = "completionsubmit", EmitDefaultValue = true)]
        public bool Completionsubmit { get; set; }

        /// <summary>
        /// Course id
        /// </summary>
        /// <value>Course id</value>
        [DataMember(Name = "course", EmitDefaultValue = false)]
        public int Course { get; set; }

        /// <summary>
        /// Course module id
        /// </summary>
        /// <value>Course module id</value>
        [DataMember(Name = "coursemodule", EmitDefaultValue = false)]
        public int Coursemodule { get; set; }

        /// <summary>
        /// Display mode (vertical, horizontal)
        /// </summary>
        /// <value>Display mode (vertical, horizontal)</value>
        [DataMember(Name = "display", EmitDefaultValue = false)]
        public int Display { get; set; }

        /// <summary>
        /// Group id
        /// </summary>
        /// <value>Group id</value>
        [DataMember(Name = "groupingid", EmitDefaultValue = false)]
        public int Groupingid { get; set; }

        /// <summary>
        /// Group mode
        /// </summary>
        /// <value>Group mode</value>
        [DataMember(Name = "groupmode", EmitDefaultValue = false)]
        public int Groupmode { get; set; }

        /// <summary>
        /// Activity instance id
        /// </summary>
        /// <value>Activity instance id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Include inactive users
        /// </summary>
        /// <value>Include inactive users</value>
        [DataMember(Name = "includeinactive", EmitDefaultValue = true)]
        public bool Includeinactive { get; set; }

        /// <summary>
        /// Activity introduction
        /// </summary>
        /// <value>Activity introduction</value>
        [DataMember(Name = "intro", EmitDefaultValue = false)]
        public string Intro { get; set; }

        /// <summary>
        /// Gets or Sets Introfiles
        /// </summary>
        [DataMember(Name = "introfiles", EmitDefaultValue = false)]
        public List<CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner> Introfiles { get; set; }

        /// <summary>
        /// intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)
        /// </summary>
        /// <value>intro format (1 &#x3D; HTML, 0 &#x3D; MOODLE, 2 &#x3D; PLAIN, or 4 &#x3D; MARKDOWN)</value>
        [DataMember(Name = "introformat", EmitDefaultValue = false)]
        public int Introformat { get; set; }

        /// <summary>
        /// Forced activity language
        /// </summary>
        /// <value>Forced activity language</value>
        [DataMember(Name = "lang", EmitDefaultValue = false)]
        public string Lang { get; set; }

        /// <summary>
        /// Limit unswers
        /// </summary>
        /// <value>Limit unswers</value>
        [DataMember(Name = "limitanswers", EmitDefaultValue = true)]
        public bool Limitanswers { get; set; }

        /// <summary>
        /// Activity name
        /// </summary>
        /// <value>Activity name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// If choice is published
        /// </summary>
        /// <value>If choice is published</value>
        [DataMember(Name = "publish", EmitDefaultValue = true)]
        public bool Publish { get; set; }

        /// <summary>
        /// Course section id
        /// </summary>
        /// <value>Course section id</value>
        [DataMember(Name = "section", EmitDefaultValue = false)]
        public int Section { get; set; }

        /// <summary>
        /// Show available spaces
        /// </summary>
        /// <value>Show available spaces</value>
        [DataMember(Name = "showavailable", EmitDefaultValue = true)]
        public bool Showavailable { get; set; }

        /// <summary>
        /// Show preview before timeopen
        /// </summary>
        /// <value>Show preview before timeopen</value>
        [DataMember(Name = "showpreview", EmitDefaultValue = true)]
        public bool Showpreview { get; set; }

        /// <summary>
        /// 0 never, 1 after answer, 2 after close, 3 always
        /// </summary>
        /// <value>0 never, 1 after answer, 2 after close, 3 always</value>
        [DataMember(Name = "showresults", EmitDefaultValue = false)]
        public int Showresults { get; set; }

        /// <summary>
        /// Show users who not answered yet
        /// </summary>
        /// <value>Show users who not answered yet</value>
        [DataMember(Name = "showunanswered", EmitDefaultValue = true)]
        public bool Showunanswered { get; set; }

        /// <summary>
        /// Date of closing validity
        /// </summary>
        /// <value>Date of closing validity</value>
        [DataMember(Name = "timeclose", EmitDefaultValue = false)]
        public int Timeclose { get; set; }

        /// <summary>
        /// Time of last modification
        /// </summary>
        /// <value>Time of last modification</value>
        [DataMember(Name = "timemodified", EmitDefaultValue = false)]
        public int Timemodified { get; set; }

        /// <summary>
        /// Date of opening validity
        /// </summary>
        /// <value>Date of opening validity</value>
        [DataMember(Name = "timeopen", EmitDefaultValue = false)]
        public int Timeopen { get; set; }

        /// <summary>
        /// Visible
        /// </summary>
        /// <value>Visible</value>
        [DataMember(Name = "visible", EmitDefaultValue = true)]
        public bool Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModChoiceGetChoicesByCourses200ResponseChoicesInner {\n");
            sb.Append("  Allowmultiple: ").Append(Allowmultiple).Append("\n");
            sb.Append("  Allowupdate: ").Append(Allowupdate).Append("\n");
            sb.Append("  Completionsubmit: ").Append(Completionsubmit).Append("\n");
            sb.Append("  Course: ").Append(Course).Append("\n");
            sb.Append("  Coursemodule: ").Append(Coursemodule).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  Groupingid: ").Append(Groupingid).Append("\n");
            sb.Append("  Groupmode: ").Append(Groupmode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Includeinactive: ").Append(Includeinactive).Append("\n");
            sb.Append("  Intro: ").Append(Intro).Append("\n");
            sb.Append("  Introfiles: ").Append(Introfiles).Append("\n");
            sb.Append("  Introformat: ").Append(Introformat).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Limitanswers: ").Append(Limitanswers).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Publish: ").Append(Publish).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  Showavailable: ").Append(Showavailable).Append("\n");
            sb.Append("  Showpreview: ").Append(Showpreview).Append("\n");
            sb.Append("  Showresults: ").Append(Showresults).Append("\n");
            sb.Append("  Showunanswered: ").Append(Showunanswered).Append("\n");
            sb.Append("  Timeclose: ").Append(Timeclose).Append("\n");
            sb.Append("  Timemodified: ").Append(Timemodified).Append("\n");
            sb.Append("  Timeopen: ").Append(Timeopen).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
