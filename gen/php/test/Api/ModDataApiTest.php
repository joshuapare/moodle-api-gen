<?php
/**
 * ModDataApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ModDataApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModDataApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for modDataAddEntry
     *
     * Adds a new entry..
     *
     */
    public function testModDataAddEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modDataApproveEntry
     *
     * Approves or unapproves an entry..
     *
     */
    public function testModDataApproveEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modDataDeleteEntry
     *
     * Deletes an entry..
     *
     */
    public function testModDataDeleteEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modDataDeleteSavedPreset
     *
     * Delete site user preset..
     *
     */
    public function testModDataDeleteSavedPreset()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modDataGetDataAccessInformation
     *
     * Return access information for a given database..
     *
     */
    public function testModDataGetDataAccessInformation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modDataGetDatabasesByCourses
     *
     * Returns a list of database instances in a provided set of courses, if             no courses are provided then all the database instances the user has access to will be returned..
     *
     */
    public function testModDataGetDatabasesByCourses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modDataGetEntries
     *
     * Return the complete list of entries of the given database..
     *
     */
    public function testModDataGetEntries()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modDataGetEntry
     *
     * Return one entry record from the database, including contents optionally..
     *
     */
    public function testModDataGetEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modDataGetFields
     *
     * Return the list of configured fields for the given database..
     *
     */
    public function testModDataGetFields()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modDataGetMappingInformation
     *
     * Get importing information.
     *
     */
    public function testModDataGetMappingInformation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modDataSearchEntries
     *
     * Search for entries in the given database..
     *
     */
    public function testModDataSearchEntries()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modDataUpdateEntry
     *
     * Updates an existing entry..
     *
     */
    public function testModDataUpdateEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modDataViewDatabase
     *
     * Simulate the view.php web interface data: trigger events, completion, etc....
     *
     */
    public function testModDataViewDatabase()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
