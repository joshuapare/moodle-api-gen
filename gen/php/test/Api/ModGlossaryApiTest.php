<?php
/**
 * ModGlossaryApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ModGlossaryApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModGlossaryApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for modGlossaryAddEntry
     *
     * Add a new entry to a given glossary.
     *
     */
    public function testModGlossaryAddEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryDeleteEntry
     *
     * Delete the given entry from the glossary..
     *
     */
    public function testModGlossaryDeleteEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryGetAuthors
     *
     * Get the authors..
     *
     */
    public function testModGlossaryGetAuthors()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryGetCategories
     *
     * Get the categories..
     *
     */
    public function testModGlossaryGetCategories()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryGetEntriesByAuthor
     *
     * Browse entries by author..
     *
     */
    public function testModGlossaryGetEntriesByAuthor()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryGetEntriesByAuthorId
     *
     * Browse entries by author ID..
     *
     */
    public function testModGlossaryGetEntriesByAuthorId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryGetEntriesByCategory
     *
     * Browse entries by category..
     *
     */
    public function testModGlossaryGetEntriesByCategory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryGetEntriesByDate
     *
     * Browse entries by date..
     *
     */
    public function testModGlossaryGetEntriesByDate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryGetEntriesByLetter
     *
     * Browse entries by letter..
     *
     */
    public function testModGlossaryGetEntriesByLetter()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryGetEntriesBySearch
     *
     * Browse entries by search query..
     *
     */
    public function testModGlossaryGetEntriesBySearch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryGetEntriesByTerm
     *
     * Browse entries by term (concept or alias)..
     *
     */
    public function testModGlossaryGetEntriesByTerm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryGetEntriesToApprove
     *
     * Browse entries to be approved..
     *
     */
    public function testModGlossaryGetEntriesToApprove()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryGetEntryById
     *
     * Get an entry by ID.
     *
     */
    public function testModGlossaryGetEntryById()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryGetGlossariesByCourses
     *
     * Retrieve a list of glossaries from several courses..
     *
     */
    public function testModGlossaryGetGlossariesByCourses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryPrepareEntryForEdition
     *
     * Prepares the given entry for edition returning draft item areas and file areas information..
     *
     */
    public function testModGlossaryPrepareEntryForEdition()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryUpdateEntry
     *
     * Updates the given glossary entry..
     *
     */
    public function testModGlossaryUpdateEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryViewEntry
     *
     * Notify a glossary entry as being viewed..
     *
     */
    public function testModGlossaryViewEntry()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modGlossaryViewGlossary
     *
     * Notify the glossary as being viewed..
     *
     */
    public function testModGlossaryViewGlossary()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
