<?php
/**
 * MoodleApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * MoodleApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MoodleApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for coreAdminSetBlockProtection
     *
     * Set the protection state for a block plugin.
     *
     */
    public function testCoreAdminSetBlockProtection()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreAdminSetPluginOrder
     *
     * Set the order of a plugin.
     *
     */
    public function testCoreAdminSetPluginOrder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreAdminSetPluginState
     *
     * Set the state of a plugin.
     *
     */
    public function testCoreAdminSetPluginState()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreAuthConfirmUser
     *
     * Confirm a user account..
     *
     */
    public function testCoreAuthConfirmUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreAuthIsAgeDigitalConsentVerificationEnabled
     *
     * Checks if age digital consent verification is enabled..
     *
     */
    public function testCoreAuthIsAgeDigitalConsentVerificationEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreAuthIsMinor
     *
     * Requests a check if a user is a digital minor..
     *
     */
    public function testCoreAuthIsMinor()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreAuthRequestPasswordReset
     *
     * Requests a password reset..
     *
     */
    public function testCoreAuthRequestPasswordReset()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreAuthResendConfirmationEmail
     *
     * Resend confirmation email..
     *
     */
    public function testCoreAuthResendConfirmationEmail()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreBackupGetAsyncBackupLinksBackup
     *
     * Gets the data to use when updating the status table row in the UI for when an async backup completes..
     *
     */
    public function testCoreBackupGetAsyncBackupLinksBackup()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreBackupGetAsyncBackupLinksRestore
     *
     * Gets the data to use when updating the status table row in the UI for when an async restore completes..
     *
     */
    public function testCoreBackupGetAsyncBackupLinksRestore()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreBackupGetAsyncBackupProgress
     *
     * Get the progress of an Asyncronhous backup..
     *
     */
    public function testCoreBackupGetAsyncBackupProgress()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreBackupGetCopyProgress
     *
     * Gets the progress of course copy operations..
     *
     */
    public function testCoreBackupGetCopyProgress()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreBackupSubmitCopyForm
     *
     * Handles ajax submission of course copy form..
     *
     */
    public function testCoreBackupSubmitCopyForm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreBadgesGetUserBadgeByHash
     *
     * Returns the badge awarded to a user by hash..
     *
     */
    public function testCoreBadgesGetUserBadgeByHash()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreBadgesGetUserBadges
     *
     * Returns the list of badges awarded to a user..
     *
     */
    public function testCoreBadgesGetUserBadges()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreBlockFetchAddableBlocks
     *
     * Returns all addable blocks in a given page..
     *
     */
    public function testCoreBlockFetchAddableBlocks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreBlockGetCourseBlocks
     *
     * Returns blocks information for a course..
     *
     */
    public function testCoreBlockGetCourseBlocks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreBlockGetDashboardBlocks
     *
     * Returns blocks information for the given user dashboard..
     *
     */
    public function testCoreBlockGetDashboardBlocks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreBlogGetEntries
     *
     * Returns blog entries..
     *
     */
    public function testCoreBlogGetEntries()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreBlogViewEntries
     *
     * Trigger the blog_entries_viewed event..
     *
     */
    public function testCoreBlogViewEntries()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarCreateCalendarEvents
     *
     * Create calendar events.
     *
     */
    public function testCoreCalendarCreateCalendarEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarDeleteCalendarEvents
     *
     * Delete calendar events.
     *
     */
    public function testCoreCalendarDeleteCalendarEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarDeleteSubscription
     *
     * Delete the calendar subscription.
     *
     */
    public function testCoreCalendarDeleteSubscription()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarGetActionEventsByCourse
     *
     * Get calendar action events by course.
     *
     */
    public function testCoreCalendarGetActionEventsByCourse()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarGetActionEventsByCourses
     *
     * Get calendar action events by courses.
     *
     */
    public function testCoreCalendarGetActionEventsByCourses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarGetActionEventsByTimesort
     *
     * Get calendar action events by tiemsort.
     *
     */
    public function testCoreCalendarGetActionEventsByTimesort()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarGetAllowedEventTypes
     *
     * Get the type of events a user can create in the given course..
     *
     */
    public function testCoreCalendarGetAllowedEventTypes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarGetCalendarAccessInformation
     *
     * Convenience function to retrieve some permissions/access information for the given course calendar..
     *
     */
    public function testCoreCalendarGetCalendarAccessInformation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarGetCalendarDayView
     *
     * Fetch the day view data for a calendar.
     *
     */
    public function testCoreCalendarGetCalendarDayView()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarGetCalendarEventById
     *
     * Get calendar event by id.
     *
     */
    public function testCoreCalendarGetCalendarEventById()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarGetCalendarEvents
     *
     * Get calendar events.
     *
     */
    public function testCoreCalendarGetCalendarEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarGetCalendarExportToken
     *
     * Return the auth token required for exporting a calendar..
     *
     */
    public function testCoreCalendarGetCalendarExportToken()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarGetCalendarMonthlyView
     *
     * Fetch the monthly view data for a calendar.
     *
     */
    public function testCoreCalendarGetCalendarMonthlyView()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarGetCalendarUpcomingView
     *
     * Fetch the upcoming view data for a calendar.
     *
     */
    public function testCoreCalendarGetCalendarUpcomingView()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarGetTimestamps
     *
     * Fetch unix timestamps for given date times..
     *
     */
    public function testCoreCalendarGetTimestamps()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarSubmitCreateUpdateForm
     *
     * Submit form data for event form.
     *
     */
    public function testCoreCalendarSubmitCreateUpdateForm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCalendarUpdateEventStartDay
     *
     * Update the start day (but not time) for an event..
     *
     */
    public function testCoreCalendarUpdateEventStartDay()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreChangeEditmode
     *
     * Change the editing mode.
     *
     */
    public function testCoreChangeEditmode()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCohortAddCohortMembers
     *
     * Adds cohort members..
     *
     */
    public function testCoreCohortAddCohortMembers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCohortCreateCohorts
     *
     * Creates new cohorts..
     *
     */
    public function testCoreCohortCreateCohorts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCohortDeleteCohortMembers
     *
     * Deletes cohort members..
     *
     */
    public function testCoreCohortDeleteCohortMembers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCohortDeleteCohorts
     *
     * Deletes all specified cohorts..
     *
     */
    public function testCoreCohortDeleteCohorts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCohortGetCohortMembers
     *
     * Returns cohort members..
     *
     */
    public function testCoreCohortGetCohortMembers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCohortGetCohorts
     *
     * Returns cohort details..
     *
     */
    public function testCoreCohortGetCohorts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCohortSearchCohorts
     *
     * Search for cohorts..
     *
     */
    public function testCoreCohortSearchCohorts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCohortUpdateCohorts
     *
     * Updates existing cohorts..
     *
     */
    public function testCoreCohortUpdateCohorts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCommentAddComments
     *
     * Adds a comment or comments..
     *
     */
    public function testCoreCommentAddComments()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCommentDeleteComments
     *
     * Deletes a comment or comments..
     *
     */
    public function testCoreCommentDeleteComments()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCommentGetComments
     *
     * Returns comments..
     *
     */
    public function testCoreCommentGetComments()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyAddCompetencyToCourse
     *
     * Add the competency to a course.
     *
     */
    public function testCoreCompetencyAddCompetencyToCourse()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyAddCompetencyToPlan
     *
     * Add the competency to a learning plan.
     *
     */
    public function testCoreCompetencyAddCompetencyToPlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyAddCompetencyToTemplate
     *
     * Add the competency to a template.
     *
     */
    public function testCoreCompetencyAddCompetencyToTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyAddRelatedCompetency
     *
     * Adds a related competency.
     *
     */
    public function testCoreCompetencyAddRelatedCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyApprovePlan
     *
     * Approve a plan..
     *
     */
    public function testCoreCompetencyApprovePlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCompetencyFrameworkViewed
     *
     * Log event competency framework viewed.
     *
     */
    public function testCoreCompetencyCompetencyFrameworkViewed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCompetencyViewed
     *
     * Log event competency viewed.
     *
     */
    public function testCoreCompetencyCompetencyViewed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCompletePlan
     *
     * Complete learning plan..
     *
     */
    public function testCoreCompetencyCompletePlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCountCompetencies
     *
     * Count a list of a competencies..
     *
     */
    public function testCoreCompetencyCountCompetencies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCountCompetenciesInCourse
     *
     * List the competencies in a course.
     *
     */
    public function testCoreCompetencyCountCompetenciesInCourse()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCountCompetenciesInTemplate
     *
     * Count a list of a competencies for a given template..
     *
     */
    public function testCoreCompetencyCountCompetenciesInTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCountCompetencyFrameworks
     *
     * Count a list of a competency frameworks..
     *
     */
    public function testCoreCompetencyCountCompetencyFrameworks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCountCourseModuleCompetencies
     *
     * Count the competencies in a course module.
     *
     */
    public function testCoreCompetencyCountCourseModuleCompetencies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCountCoursesUsingCompetency
     *
     * List the courses using a competency.
     *
     */
    public function testCoreCompetencyCountCoursesUsingCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCountTemplates
     *
     * Count a list of a learning plan templates..
     *
     */
    public function testCoreCompetencyCountTemplates()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCountTemplatesUsingCompetency
     *
     * Count a list of a learning plan templates for a given competency..
     *
     */
    public function testCoreCompetencyCountTemplatesUsingCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCreateCompetency
     *
     * Creates new competencies..
     *
     */
    public function testCoreCompetencyCreateCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCreateCompetencyFramework
     *
     * Creates new competency frameworks..
     *
     */
    public function testCoreCompetencyCreateCompetencyFramework()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCreatePlan
     *
     * Creates a learning plan..
     *
     */
    public function testCoreCompetencyCreatePlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCreateTemplate
     *
     * Creates new learning plan templates..
     *
     */
    public function testCoreCompetencyCreateTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyCreateUserEvidenceCompetency
     *
     * Create an evidence of prior learning relationship with a competency..
     *
     */
    public function testCoreCompetencyCreateUserEvidenceCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyDeleteCompetency
     *
     * Delete a competency..
     *
     */
    public function testCoreCompetencyDeleteCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyDeleteCompetencyFramework
     *
     * Delete a competency framework..
     *
     */
    public function testCoreCompetencyDeleteCompetencyFramework()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyDeleteEvidence
     *
     * Delete an evidence.
     *
     */
    public function testCoreCompetencyDeleteEvidence()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyDeletePlan
     *
     * Delete a learning plan..
     *
     */
    public function testCoreCompetencyDeletePlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyDeleteTemplate
     *
     * Delete a learning plan template..
     *
     */
    public function testCoreCompetencyDeleteTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyDeleteUserEvidence
     *
     * Delete an evidence of prior learning..
     *
     */
    public function testCoreCompetencyDeleteUserEvidence()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyDeleteUserEvidenceCompetency
     *
     * Delete an evidence of prior learning relationship with a competency..
     *
     */
    public function testCoreCompetencyDeleteUserEvidenceCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyDuplicateCompetencyFramework
     *
     * Duplicate a competency framework..
     *
     */
    public function testCoreCompetencyDuplicateCompetencyFramework()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyDuplicateTemplate
     *
     * Duplicate learning plan template..
     *
     */
    public function testCoreCompetencyDuplicateTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyGetScaleValues
     *
     * Fetch the values for a specific scale.
     *
     */
    public function testCoreCompetencyGetScaleValues()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyGradeCompetency
     *
     * Grade a competency..
     *
     */
    public function testCoreCompetencyGradeCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyGradeCompetencyInCourse
     *
     * Grade a competency from the course page..
     *
     */
    public function testCoreCompetencyGradeCompetencyInCourse()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyGradeCompetencyInPlan
     *
     * Grade a competency from the user plan page..
     *
     */
    public function testCoreCompetencyGradeCompetencyInPlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyListCompetencies
     *
     * Load a list of a competencies..
     *
     */
    public function testCoreCompetencyListCompetencies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyListCompetenciesInTemplate
     *
     * Load a list of a competencies for a given template..
     *
     */
    public function testCoreCompetencyListCompetenciesInTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyListCompetencyFrameworks
     *
     * Load a list of a competency frameworks..
     *
     */
    public function testCoreCompetencyListCompetencyFrameworks()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyListCourseCompetencies
     *
     * List the competencies in a course.
     *
     */
    public function testCoreCompetencyListCourseCompetencies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyListCourseModuleCompetencies
     *
     * List the competencies in a course module.
     *
     */
    public function testCoreCompetencyListCourseModuleCompetencies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyListPlanCompetencies
     *
     * List the competencies in a plan.
     *
     */
    public function testCoreCompetencyListPlanCompetencies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyListTemplates
     *
     * Load a list of a learning plan templates..
     *
     */
    public function testCoreCompetencyListTemplates()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyListTemplatesUsingCompetency
     *
     * Load a list of a learning plan templates for a given competency..
     *
     */
    public function testCoreCompetencyListTemplatesUsingCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyListUserPlans
     *
     * List a user's learning plans..
     *
     */
    public function testCoreCompetencyListUserPlans()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyMoveDownCompetency
     *
     * Re-order a competency..
     *
     */
    public function testCoreCompetencyMoveDownCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyMoveUpCompetency
     *
     * Re-order a competency..
     *
     */
    public function testCoreCompetencyMoveUpCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyPlanCancelReviewRequest
     *
     * Cancel the review of a plan..
     *
     */
    public function testCoreCompetencyPlanCancelReviewRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyPlanRequestReview
     *
     * Request for a plan to be reviewed..
     *
     */
    public function testCoreCompetencyPlanRequestReview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyPlanStartReview
     *
     * Start the review of a plan..
     *
     */
    public function testCoreCompetencyPlanStartReview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyPlanStopReview
     *
     * Stop the review of a plan..
     *
     */
    public function testCoreCompetencyPlanStopReview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyReadCompetency
     *
     * Load a summary of a competency..
     *
     */
    public function testCoreCompetencyReadCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyReadCompetencyFramework
     *
     * Load a summary of a competency framework..
     *
     */
    public function testCoreCompetencyReadCompetencyFramework()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyReadPlan
     *
     * Load a learning plan..
     *
     */
    public function testCoreCompetencyReadPlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyReadTemplate
     *
     * Load a summary of a learning plan template..
     *
     */
    public function testCoreCompetencyReadTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyReadUserEvidence
     *
     * Read an evidence of prior learning..
     *
     */
    public function testCoreCompetencyReadUserEvidence()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyRemoveCompetencyFromCourse
     *
     * Remove a competency from a course.
     *
     */
    public function testCoreCompetencyRemoveCompetencyFromCourse()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyRemoveCompetencyFromPlan
     *
     * Remove the competency from a learning plan.
     *
     */
    public function testCoreCompetencyRemoveCompetencyFromPlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyRemoveCompetencyFromTemplate
     *
     * Remove a competency from a template.
     *
     */
    public function testCoreCompetencyRemoveCompetencyFromTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyRemoveRelatedCompetency
     *
     * Remove a related competency.
     *
     */
    public function testCoreCompetencyRemoveRelatedCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyReopenPlan
     *
     * Reopen learning plan..
     *
     */
    public function testCoreCompetencyReopenPlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyReorderCourseCompetency
     *
     * Move a course competency to a new relative sort order..
     *
     */
    public function testCoreCompetencyReorderCourseCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyReorderPlanCompetency
     *
     * Move a plan competency to a new relative sort order..
     *
     */
    public function testCoreCompetencyReorderPlanCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyReorderTemplateCompetency
     *
     * Move a template competency to a new relative sort order..
     *
     */
    public function testCoreCompetencyReorderTemplateCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyRequestReviewOfUserEvidenceLinkedCompetencies
     *
     * Send user evidence competencies in review.
     *
     */
    public function testCoreCompetencyRequestReviewOfUserEvidenceLinkedCompetencies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencySearchCompetencies
     *
     * Search a list of a competencies..
     *
     */
    public function testCoreCompetencySearchCompetencies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencySetCourseCompetencyRuleoutcome
     *
     * Modify the ruleoutcome value for course competency.
     *
     */
    public function testCoreCompetencySetCourseCompetencyRuleoutcome()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencySetParentCompetency
     *
     * Set a new parent for a competency..
     *
     */
    public function testCoreCompetencySetParentCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyTemplateHasRelatedData
     *
     * Check if a template has related data.
     *
     */
    public function testCoreCompetencyTemplateHasRelatedData()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyTemplateViewed
     *
     * Log event template viewed.
     *
     */
    public function testCoreCompetencyTemplateViewed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyUnapprovePlan
     *
     * Unapprove a plan..
     *
     */
    public function testCoreCompetencyUnapprovePlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyUnlinkPlanFromTemplate
     *
     * Unlink a plan form it template..
     *
     */
    public function testCoreCompetencyUnlinkPlanFromTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyUpdateCompetency
     *
     * Update a competency..
     *
     */
    public function testCoreCompetencyUpdateCompetency()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyUpdateCompetencyFramework
     *
     * Update a competency framework..
     *
     */
    public function testCoreCompetencyUpdateCompetencyFramework()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyUpdateCourseCompetencySettings
     *
     * Update the course competency settings.
     *
     */
    public function testCoreCompetencyUpdateCourseCompetencySettings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyUpdatePlan
     *
     * Updates a learning plan..
     *
     */
    public function testCoreCompetencyUpdatePlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyUpdateTemplate
     *
     * Update a learning plan template..
     *
     */
    public function testCoreCompetencyUpdateTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyUserCompetencyCancelReviewRequest
     *
     * Cancel a review request..
     *
     */
    public function testCoreCompetencyUserCompetencyCancelReviewRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyUserCompetencyPlanViewed
     *
     * Log the user competency plan viewed event..
     *
     */
    public function testCoreCompetencyUserCompetencyPlanViewed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyUserCompetencyRequestReview
     *
     * Request a review..
     *
     */
    public function testCoreCompetencyUserCompetencyRequestReview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyUserCompetencyStartReview
     *
     * Start a review..
     *
     */
    public function testCoreCompetencyUserCompetencyStartReview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyUserCompetencyStopReview
     *
     * Stop a review..
     *
     */
    public function testCoreCompetencyUserCompetencyStopReview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyUserCompetencyViewed
     *
     * Log the user competency viewed event..
     *
     */
    public function testCoreCompetencyUserCompetencyViewed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyUserCompetencyViewedInCourse
     *
     * Log the user competency viewed in course event.
     *
     */
    public function testCoreCompetencyUserCompetencyViewedInCourse()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompetencyUserCompetencyViewedInPlan
     *
     * Log the user competency viewed in plan event..
     *
     */
    public function testCoreCompetencyUserCompetencyViewedInPlan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompletionGetActivitiesCompletionStatus
     *
     * Return the activities completion status for a user in a course..
     *
     */
    public function testCoreCompletionGetActivitiesCompletionStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompletionGetCourseCompletionStatus
     *
     * Returns course completion status..
     *
     */
    public function testCoreCompletionGetCourseCompletionStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompletionMarkCourseSelfCompleted
     *
     * Update the course completion status for the current user (if course self-completion is enabled)..
     *
     */
    public function testCoreCompletionMarkCourseSelfCompleted()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompletionOverrideActivityCompletionStatus
     *
     * Update completion status for a user in an activity by overriding it..
     *
     */
    public function testCoreCompletionOverrideActivityCompletionStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCompletionUpdateActivityCompletionStatusManually
     *
     * Update completion status for the current user in an activity, only for activities with manual tracking..
     *
     */
    public function testCoreCompletionUpdateActivityCompletionStatusManually()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreContentbankCopyContent
     *
     * Copy a content in the content bank..
     *
     */
    public function testCoreContentbankCopyContent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreContentbankDeleteContent
     *
     * Delete a content from the content bank..
     *
     */
    public function testCoreContentbankDeleteContent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreContentbankRenameContent
     *
     * Rename a content in the content bank..
     *
     */
    public function testCoreContentbankRenameContent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreContentbankSetContentVisibility
     *
     * Set the visibility of a content in the content bank..
     *
     */
    public function testCoreContentbankSetContentVisibility()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseAddContentItemToUserFavourites
     *
     * Adds a content item (activity, resource or their subtypes) to the favourites for the user..
     *
     */
    public function testCoreCourseAddContentItemToUserFavourites()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseCheckUpdates
     *
     * Check if there is updates affecting the user for the given course and contexts..
     *
     */
    public function testCoreCourseCheckUpdates()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseCreateCategories
     *
     * Create course categories.
     *
     */
    public function testCoreCourseCreateCategories()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseCreateCourses
     *
     * Create new courses.
     *
     */
    public function testCoreCourseCreateCourses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseDeleteCategories
     *
     * Delete course categories.
     *
     */
    public function testCoreCourseDeleteCategories()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseDeleteCourses
     *
     * Deletes all specified courses.
     *
     */
    public function testCoreCourseDeleteCourses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseDeleteModules
     *
     * Deletes all specified module instances.
     *
     */
    public function testCoreCourseDeleteModules()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseDuplicateCourse
     *
     * Duplicate an existing course (creating a new one)..
     *
     */
    public function testCoreCourseDuplicateCourse()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseEditModule
     *
     * Performs an action on course module (change visibility, duplicate, delete, etc.).
     *
     */
    public function testCoreCourseEditModule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseEditSection
     *
     * Performs an action on course section (change visibility, set marker, delete).
     *
     */
    public function testCoreCourseEditSection()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetActivityChooserFooter
     *
     * Fetch the data for the activity chooser footer..
     *
     */
    public function testCoreCourseGetActivityChooserFooter()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetCategories
     *
     * Return category details.
     *
     */
    public function testCoreCourseGetCategories()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetContents
     *
     * Get course contents.
     *
     */
    public function testCoreCourseGetContents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetCourseContentItems
     *
     * Fetch all the content items (activities, resources and their subtypes) for the activity picker.
     *
     */
    public function testCoreCourseGetCourseContentItems()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetCourseModule
     *
     * Return information about a course module.
     *
     */
    public function testCoreCourseGetCourseModule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetCourseModuleByInstance
     *
     * Return information about a given module name and instance id.
     *
     */
    public function testCoreCourseGetCourseModuleByInstance()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetCourses
     *
     * Return course details.
     *
     */
    public function testCoreCourseGetCourses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetCoursesByField
     *
     * Get courses matching a specific field (id/s, shortname, idnumber, category).
     *
     */
    public function testCoreCourseGetCoursesByField()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetEnrolledCoursesByTimelineClassification
     *
     * List of enrolled courses for the given timeline classification (past, inprogress, or future)..
     *
     */
    public function testCoreCourseGetEnrolledCoursesByTimelineClassification()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification
     *
     * List of enrolled courses with action events in a given timeframe, for the given timeline classification..
     *
     */
    public function testCoreCourseGetEnrolledCoursesWithActionEventsByTimelineClassification()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetEnrolledUsersByCmid
     *
     * List users by course module id, filter by group and active enrolment status..
     *
     */
    public function testCoreCourseGetEnrolledUsersByCmid()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetModule
     *
     * Returns html with one activity module on course page.
     *
     */
    public function testCoreCourseGetModule()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetRecentCourses
     *
     * List of courses a user has accessed most recently..
     *
     */
    public function testCoreCourseGetRecentCourses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetUpdatesSince
     *
     * Check if there are updates affecting the user for the given course since the given time stamp..
     *
     */
    public function testCoreCourseGetUpdatesSince()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetUserAdministrationOptions
     *
     * Return a list of administration options in a set of courses that are avaialable or not for the current                             user..
     *
     */
    public function testCoreCourseGetUserAdministrationOptions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseGetUserNavigationOptions
     *
     * Return a list of navigation options in a set of courses that are avaialable or not for the current user..
     *
     */
    public function testCoreCourseGetUserNavigationOptions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseImportCourse
     *
     * Import course data from a course into another course. Does not include any user data..
     *
     */
    public function testCoreCourseImportCourse()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseRemoveContentItemFromUserFavourites
     *
     * Removes a content item (activity, resource or their subtypes) from the favourites for the user..
     *
     */
    public function testCoreCourseRemoveContentItemFromUserFavourites()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseSearchCourses
     *
     * Search courses by (name, module, block, tag).
     *
     */
    public function testCoreCourseSearchCourses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseSetFavouriteCourses
     *
     * Add a list of courses to the list of favourite courses..
     *
     */
    public function testCoreCourseSetFavouriteCourses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseToggleActivityRecommendation
     *
     * Adds or removes an activity as a recommendation in the activity chooser..
     *
     */
    public function testCoreCourseToggleActivityRecommendation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseUpdateCategories
     *
     * Update categories.
     *
     */
    public function testCoreCourseUpdateCategories()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseUpdateCourses
     *
     * Update courses.
     *
     */
    public function testCoreCourseUpdateCourses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseViewCourse
     *
     * Log that the course was viewed.
     *
     */
    public function testCoreCourseViewCourse()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseformatFileHandlers
     *
     * Get the current course file hanlders..
     *
     */
    public function testCoreCourseformatFileHandlers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseformatGetState
     *
     * Get the current course state..
     *
     */
    public function testCoreCourseformatGetState()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCourseformatUpdateCourse
     *
     * Update course contents..
     *
     */
    public function testCoreCourseformatUpdateCourse()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCreateUserfeedbackActionRecord
     *
     * Record the action that the user takes in the user feedback notification for future use..
     *
     */
    public function testCoreCreateUserfeedbackActionRecord()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCustomfieldCreateCategory
     *
     * Creates a new category.
     *
     */
    public function testCoreCustomfieldCreateCategory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCustomfieldDeleteCategory
     *
     * Deletes a category.
     *
     */
    public function testCoreCustomfieldDeleteCategory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCustomfieldDeleteField
     *
     * Deletes an entry.
     *
     */
    public function testCoreCustomfieldDeleteField()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCustomfieldMoveCategory
     *
     * Drag and drop categories.
     *
     */
    public function testCoreCustomfieldMoveCategory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCustomfieldMoveField
     *
     * Drag and drop.
     *
     */
    public function testCoreCustomfieldMoveField()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreCustomfieldReloadTemplate
     *
     * Reloads template.
     *
     */
    public function testCoreCustomfieldReloadTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreDynamicTabsGetContent
     *
     * Returns the content for a dynamic tab.
     *
     */
    public function testCoreDynamicTabsGetContent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreEnrolGetCourseEnrolmentMethods
     *
     * Get the list of course enrolment methods.
     *
     */
    public function testCoreEnrolGetCourseEnrolmentMethods()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreEnrolGetEnrolledUsers
     *
     * Get enrolled users by course id..
     *
     */
    public function testCoreEnrolGetEnrolledUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreEnrolGetEnrolledUsersWithCapability
     *
     * For each course and capability specified, return a list of the users that are enrolled in the course                                   and have that capability.
     *
     */
    public function testCoreEnrolGetEnrolledUsersWithCapability()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreEnrolGetPotentialUsers
     *
     * Get the list of potential users to enrol.
     *
     */
    public function testCoreEnrolGetPotentialUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreEnrolGetUsersCourses
     *
     * Get the list of courses where a user is enrolled in.
     *
     */
    public function testCoreEnrolGetUsersCourses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreEnrolSearchUsers
     *
     * Search within the list of course participants.
     *
     */
    public function testCoreEnrolSearchUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreEnrolSubmitUserEnrolmentForm
     *
     * Submit form data for enrolment form.
     *
     */
    public function testCoreEnrolSubmitUserEnrolmentForm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreEnrolUnenrolUserEnrolment
     *
     * External function that unenrols a given user enrolment.
     *
     */
    public function testCoreEnrolUnenrolUserEnrolment()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreFetchNotifications
     *
     * Return a list of notifications for the current session.
     *
     */
    public function testCoreFetchNotifications()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreFilesDeleteDraftFiles
     *
     * Delete the indicated files (or directories) from a user draft file area..
     *
     */
    public function testCoreFilesDeleteDraftFiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreFilesGetFiles
     *
     * browse moodle files.
     *
     */
    public function testCoreFilesGetFiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreFilesGetUnusedDraftItemid
     *
     * Generate a new draft itemid for the current user..
     *
     */
    public function testCoreFilesGetUnusedDraftItemid()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreFilesUpload
     *
     * upload a file to moodle.
     *
     */
    public function testCoreFilesUpload()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreFiltersGetAvailableInContext
     *
     * Returns the filters available in the given contexts..
     *
     */
    public function testCoreFiltersGetAvailableInContext()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreFormDynamicForm
     *
     * Process submission of a dynamic (modal) form.
     *
     */
    public function testCoreFormDynamicForm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreFormGetFiletypesBrowserData
     *
     * Provides data for the filetypes element browser..
     *
     */
    public function testCoreFormGetFiletypesBrowserData()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGetComponentStrings
     *
     * Return all raw strings (with {$a->xxx}), for a specific component - similar to core get_component_strings(), call.
     *
     */
    public function testCoreGetComponentStrings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGetFragment
     *
     * Return a fragment for inclusion, such as a JavaScript page..
     *
     */
    public function testCoreGetFragment()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGetString
     *
     * Return a translated string - similar to core get_string(), call.
     *
     */
    public function testCoreGetString()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGetStrings
     *
     * Return some translated strings - like several core get_string(), calls.
     *
     */
    public function testCoreGetStrings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGetUserDates
     *
     * Return formatted timestamps.
     *
     */
    public function testCoreGetUserDates()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradesCreateGradecategories
     *
     * Create grade categories inside a course gradebook..
     *
     */
    public function testCoreGradesCreateGradecategories()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradesGetEnrolledUsersForSearchWidget
     *
     * ** DEPRECATED ** Please do not call this function any more. Use core_grades_get_enrolled_users_for_selector instead. Returns the enrolled users within and map some fields to the returned array of user objects..
     *
     */
    public function testCoreGradesGetEnrolledUsersForSearchWidget()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradesGetEnrolledUsersForSelector
     *
     * Returns the enrolled users within and map some fields to the returned array of user objects..
     *
     */
    public function testCoreGradesGetEnrolledUsersForSelector()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradesGetFeedback
     *
     * Get the feedback data for a grade item.
     *
     */
    public function testCoreGradesGetFeedback()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradesGetGradableUsers
     *
     * Returns the gradable users in a course.
     *
     */
    public function testCoreGradesGetGradableUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradesGetGradeTree
     *
     * Get the grade tree structure for a course.
     *
     */
    public function testCoreGradesGetGradeTree()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradesGetGradeitems
     *
     * Get the gradeitems for a course.
     *
     */
    public function testCoreGradesGetGradeitems()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradesGetGroupsForSearchWidget
     *
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course.
     *
     */
    public function testCoreGradesGetGroupsForSearchWidget()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradesGetGroupsForSelector
     *
     * ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course.
     *
     */
    public function testCoreGradesGetGroupsForSelector()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradesGraderGradingpanelPointFetch
     *
     * Fetch the data required to display the grader grading panel for simple grading, creating the grade item if required.
     *
     */
    public function testCoreGradesGraderGradingpanelPointFetch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradesGraderGradingpanelPointStore
     *
     * Store the data required to display the grader grading panel for simple grading.
     *
     */
    public function testCoreGradesGraderGradingpanelPointStore()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradesGraderGradingpanelScaleFetch
     *
     * Fetch the data required to display the grader grading panel for scale-based grading, creating the grade item if required.
     *
     */
    public function testCoreGradesGraderGradingpanelScaleFetch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradesGraderGradingpanelScaleStore
     *
     * Store the data required to display the grader grading panel for scale-based grading.
     *
     */
    public function testCoreGradesGraderGradingpanelScaleStore()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradesUpdateGrades
     *
     * Update a grade item and associated student grades..
     *
     */
    public function testCoreGradesUpdateGrades()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradingGetDefinitions
     *
     * Get grading definitions.
     *
     */
    public function testCoreGradingGetDefinitions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradingGetGradingformInstances
     *
     * Get grading form instances.
     *
     */
    public function testCoreGradingGetGradingformInstances()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGradingSaveDefinitions
     *
     * Save grading definitions.
     *
     */
    public function testCoreGradingSaveDefinitions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupAddGroupMembers
     *
     * Adds group members..
     *
     */
    public function testCoreGroupAddGroupMembers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupAssignGrouping
     *
     * Assing groups from groupings.
     *
     */
    public function testCoreGroupAssignGrouping()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupCreateGroupings
     *
     * Creates new groupings.
     *
     */
    public function testCoreGroupCreateGroupings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupCreateGroups
     *
     * Creates new groups..
     *
     */
    public function testCoreGroupCreateGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupDeleteGroupMembers
     *
     * Deletes group members..
     *
     */
    public function testCoreGroupDeleteGroupMembers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupDeleteGroupings
     *
     * Deletes all specified groupings..
     *
     */
    public function testCoreGroupDeleteGroupings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupDeleteGroups
     *
     * Deletes all specified groups..
     *
     */
    public function testCoreGroupDeleteGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupGetActivityAllowedGroups
     *
     * Gets a list of groups that the user is allowed to access within the specified activity..
     *
     */
    public function testCoreGroupGetActivityAllowedGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupGetActivityGroupmode
     *
     * Returns effective groupmode used in a given activity..
     *
     */
    public function testCoreGroupGetActivityGroupmode()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupGetCourseGroupings
     *
     * Returns all groupings in specified course..
     *
     */
    public function testCoreGroupGetCourseGroupings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupGetCourseGroups
     *
     * Returns all groups in specified course..
     *
     */
    public function testCoreGroupGetCourseGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupGetCourseUserGroups
     *
     * Returns all groups in specified course for the specified user..
     *
     */
    public function testCoreGroupGetCourseUserGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupGetGroupMembers
     *
     * Returns group members..
     *
     */
    public function testCoreGroupGetGroupMembers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupGetGroupings
     *
     * Returns groupings details..
     *
     */
    public function testCoreGroupGetGroupings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupGetGroups
     *
     * Returns group details..
     *
     */
    public function testCoreGroupGetGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupGetGroupsForSelector
     *
     * Get the group/(s) for a course.
     *
     */
    public function testCoreGroupGetGroupsForSelector()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupUnassignGrouping
     *
     * Unassing groups from groupings.
     *
     */
    public function testCoreGroupUnassignGrouping()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupUpdateGroupings
     *
     * Updates existing groupings.
     *
     */
    public function testCoreGroupUpdateGroupings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreGroupUpdateGroups
     *
     * Updates existing groups..
     *
     */
    public function testCoreGroupUpdateGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreH5pGetTrustedH5pFile
     *
     * Get the H5P file cleaned for Mobile App..
     *
     */
    public function testCoreH5pGetTrustedH5pFile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageBlockUser
     *
     * Blocks a user.
     *
     */
    public function testCoreMessageBlockUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageConfirmContactRequest
     *
     * Confirms a contact request.
     *
     */
    public function testCoreMessageConfirmContactRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageCreateContactRequest
     *
     * Creates a contact request.
     *
     */
    public function testCoreMessageCreateContactRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageDataForMessageareaSearchMessages
     *
     * Retrieve the template data for searching for messages.
     *
     */
    public function testCoreMessageDataForMessageareaSearchMessages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageDeclineContactRequest
     *
     * Declines a contact request.
     *
     */
    public function testCoreMessageDeclineContactRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageDeleteContacts
     *
     * Remove contacts from the contact list.
     *
     */
    public function testCoreMessageDeleteContacts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageDeleteConversationsById
     *
     * Deletes a list of conversations..
     *
     */
    public function testCoreMessageDeleteConversationsById()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageDeleteMessage
     *
     * Deletes a message..
     *
     */
    public function testCoreMessageDeleteMessage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageDeleteMessageForAllUsers
     *
     * Deletes a message for all users..
     *
     */
    public function testCoreMessageDeleteMessageForAllUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetBlockedUsers
     *
     * Retrieve a list of users blocked.
     *
     */
    public function testCoreMessageGetBlockedUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetContactRequests
     *
     * Returns contact requests for a user.
     *
     */
    public function testCoreMessageGetContactRequests()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetConversation
     *
     * Retrieve a conversation for a user.
     *
     */
    public function testCoreMessageGetConversation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetConversationBetweenUsers
     *
     * Retrieve a conversation for a user between another user.
     *
     */
    public function testCoreMessageGetConversationBetweenUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetConversationCounts
     *
     * Retrieve a list of conversation counts, indexed by type..
     *
     */
    public function testCoreMessageGetConversationCounts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetConversationMembers
     *
     * Retrieve a list of members in a conversation.
     *
     */
    public function testCoreMessageGetConversationMembers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetConversationMessages
     *
     * Retrieve the conversation messages and relevant member information.
     *
     */
    public function testCoreMessageGetConversationMessages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetConversations
     *
     * Retrieve a list of conversations for a user.
     *
     */
    public function testCoreMessageGetConversations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetMemberInfo
     *
     * Retrieve a user message profiles.
     *
     */
    public function testCoreMessageGetMemberInfo()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetMessageProcessor
     *
     * Get a message processor.
     *
     */
    public function testCoreMessageGetMessageProcessor()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetMessages
     *
     * Retrieve a list of messages sent and received by a user (conversations, notifications or both).
     *
     */
    public function testCoreMessageGetMessages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetReceivedContactRequestsCount
     *
     * Gets the number of received contact requests.
     *
     */
    public function testCoreMessageGetReceivedContactRequestsCount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetSelfConversation
     *
     * Retrieve a self-conversation for a user.
     *
     */
    public function testCoreMessageGetSelfConversation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetUnreadConversationCounts
     *
     * Retrieve a list of unread conversation counts, indexed by type..
     *
     */
    public function testCoreMessageGetUnreadConversationCounts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetUnreadConversationsCount
     *
     * Retrieve the count of unread conversations for a given user.
     *
     */
    public function testCoreMessageGetUnreadConversationsCount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetUnreadNotificationCount
     *
     * Get number of unread notifications..
     *
     */
    public function testCoreMessageGetUnreadNotificationCount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetUserContacts
     *
     * Retrieve the contact list.
     *
     */
    public function testCoreMessageGetUserContacts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetUserMessagePreferences
     *
     * Get the message preferences for a given user..
     *
     */
    public function testCoreMessageGetUserMessagePreferences()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageGetUserNotificationPreferences
     *
     * Get the notification preferences for a given user..
     *
     */
    public function testCoreMessageGetUserNotificationPreferences()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageMarkAllConversationMessagesAsRead
     *
     * Mark all conversation messages as read for a given user.
     *
     */
    public function testCoreMessageMarkAllConversationMessagesAsRead()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageMarkAllNotificationsAsRead
     *
     * Mark all notifications as read for a given user.
     *
     */
    public function testCoreMessageMarkAllNotificationsAsRead()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageMarkMessageRead
     *
     * Mark a single message as read, trigger message_viewed event..
     *
     */
    public function testCoreMessageMarkMessageRead()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageMarkNotificationRead
     *
     * Mark a single notification as read, trigger notification_viewed event..
     *
     */
    public function testCoreMessageMarkNotificationRead()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageMessageProcessorConfigForm
     *
     * Process the message processor config form.
     *
     */
    public function testCoreMessageMessageProcessorConfigForm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageMessageSearchUsers
     *
     * Retrieve the data for searching for people.
     *
     */
    public function testCoreMessageMessageSearchUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageMuteConversations
     *
     * Mutes a list of conversations.
     *
     */
    public function testCoreMessageMuteConversations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageSearchContacts
     *
     * Search for contacts.
     *
     */
    public function testCoreMessageSearchContacts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageSendInstantMessages
     *
     * Send instant messages.
     *
     */
    public function testCoreMessageSendInstantMessages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageSendMessagesToConversation
     *
     * Send messages to an existing conversation between users.
     *
     */
    public function testCoreMessageSendMessagesToConversation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageSetFavouriteConversations
     *
     * Mark a conversation or group of conversations as favourites/starred conversations..
     *
     */
    public function testCoreMessageSetFavouriteConversations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageUnblockUser
     *
     * Unblocks a user.
     *
     */
    public function testCoreMessageUnblockUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageUnmuteConversations
     *
     * Unmutes a list of conversations.
     *
     */
    public function testCoreMessageUnmuteConversations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMessageUnsetFavouriteConversations
     *
     * Unset a conversation or group of conversations as favourites/starred conversations..
     *
     */
    public function testCoreMessageUnsetFavouriteConversations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMoodlenetAuthCheck
     *
     * Check a user has authorized for a given MoodleNet site.
     *
     */
    public function testCoreMoodlenetAuthCheck()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMoodlenetGetShareInfoActivity
     *
     * Get information about an activity being shared.
     *
     */
    public function testCoreMoodlenetGetShareInfoActivity()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMoodlenetGetSharedCourseInfo
     *
     * Get information about an course being shared.
     *
     */
    public function testCoreMoodlenetGetSharedCourseInfo()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMoodlenetSendActivity
     *
     * Send activity to MoodleNet.
     *
     */
    public function testCoreMoodlenetSendActivity()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMoodlenetSendCourse
     *
     * Send course to MoodleNet.
     *
     */
    public function testCoreMoodlenetSendCourse()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreMyViewPage
     *
     * Trigger the My or Dashboard viewed event..
     *
     */
    public function testCoreMyViewPage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreNotesCreateNotes
     *
     * Create notes.
     *
     */
    public function testCoreNotesCreateNotes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreNotesDeleteNotes
     *
     * Delete notes.
     *
     */
    public function testCoreNotesDeleteNotes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreNotesGetCourseNotes
     *
     * Returns all notes in specified course (or site), for the specified user..
     *
     */
    public function testCoreNotesGetCourseNotes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreNotesGetNotes
     *
     * Get notes.
     *
     */
    public function testCoreNotesGetNotes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreNotesUpdateNotes
     *
     * Update notes.
     *
     */
    public function testCoreNotesUpdateNotes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreNotesViewNotes
     *
     * Simulates the web interface view of notes/index.php: trigger events..
     *
     */
    public function testCoreNotesViewNotes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreOutputLoadFontawesomeIconMap
     *
     * Load the mapping of names to icons.
     *
     */
    public function testCoreOutputLoadFontawesomeIconMap()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreOutputLoadFontawesomeIconSystemMap
     *
     * Load the mapping of moodle pix names to fontawesome icon names.
     *
     */
    public function testCoreOutputLoadFontawesomeIconSystemMap()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreOutputLoadTemplate
     *
     * Load a template for a renderable.
     *
     */
    public function testCoreOutputLoadTemplate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreOutputLoadTemplateWithDependencies
     *
     * Load a template and its dependencies for a renderable.
     *
     */
    public function testCoreOutputLoadTemplateWithDependencies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corePaymentGetAvailableGateways
     *
     * Get the list of payment gateways that support the given component/area.
     *
     */
    public function testCorePaymentGetAvailableGateways()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreQuestionGetRandomQuestionSummaries
     *
     * Get the random question set for a criteria.
     *
     */
    public function testCoreQuestionGetRandomQuestionSummaries()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreQuestionSubmitTagsForm
     *
     * Update the question tags..
     *
     */
    public function testCoreQuestionSubmitTagsForm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreQuestionUpdateFlag
     *
     * Update the flag state of a question attempt..
     *
     */
    public function testCoreQuestionUpdateFlag()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreRatingAddRating
     *
     * Rates an item..
     *
     */
    public function testCoreRatingAddRating()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreRatingGetItemRatings
     *
     * Retrieve all the ratings for an item..
     *
     */
    public function testCoreRatingGetItemRatings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderAudiencesDelete
     *
     * Delete audience from report.
     *
     */
    public function testCoreReportbuilderAudiencesDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderCanViewSystemReport
     *
     * Determine access to a system report.
     *
     */
    public function testCoreReportbuilderCanViewSystemReport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderColumnsAdd
     *
     * Add column to report.
     *
     */
    public function testCoreReportbuilderColumnsAdd()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderColumnsDelete
     *
     * Delete column from report.
     *
     */
    public function testCoreReportbuilderColumnsDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderColumnsReorder
     *
     * Re-order column within report.
     *
     */
    public function testCoreReportbuilderColumnsReorder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderColumnsSortGet
     *
     * Retrieve column sorting for report.
     *
     */
    public function testCoreReportbuilderColumnsSortGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderColumnsSortReorder
     *
     * Re-order column sorting within report.
     *
     */
    public function testCoreReportbuilderColumnsSortReorder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderColumnsSortToggle
     *
     * Toggle sorting of column within report.
     *
     */
    public function testCoreReportbuilderColumnsSortToggle()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderConditionsAdd
     *
     * Add condition to report.
     *
     */
    public function testCoreReportbuilderConditionsAdd()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderConditionsDelete
     *
     * Delete condition from report.
     *
     */
    public function testCoreReportbuilderConditionsDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderConditionsReorder
     *
     * Re-order condition within report.
     *
     */
    public function testCoreReportbuilderConditionsReorder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderConditionsReset
     *
     * Reset conditions for given report.
     *
     */
    public function testCoreReportbuilderConditionsReset()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderFiltersAdd
     *
     * Add filter to report.
     *
     */
    public function testCoreReportbuilderFiltersAdd()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderFiltersDelete
     *
     * Delete filter from report.
     *
     */
    public function testCoreReportbuilderFiltersDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderFiltersReorder
     *
     * Re-order filter within report.
     *
     */
    public function testCoreReportbuilderFiltersReorder()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderFiltersReset
     *
     * Reset filters for given report.
     *
     */
    public function testCoreReportbuilderFiltersReset()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderListReports
     *
     * List custom reports for current user.
     *
     */
    public function testCoreReportbuilderListReports()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderReportsDelete
     *
     * Delete report.
     *
     */
    public function testCoreReportbuilderReportsDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderReportsGet
     *
     * Get custom report.
     *
     */
    public function testCoreReportbuilderReportsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderRetrieveReport
     *
     * Retrieve custom report content.
     *
     */
    public function testCoreReportbuilderRetrieveReport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderRetrieveSystemReport
     *
     * Retrieve system report content.
     *
     */
    public function testCoreReportbuilderRetrieveSystemReport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderSchedulesDelete
     *
     * Delete schedule from report.
     *
     */
    public function testCoreReportbuilderSchedulesDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderSchedulesSend
     *
     * Send report schedule.
     *
     */
    public function testCoreReportbuilderSchedulesSend()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderSchedulesToggle
     *
     * Toggle state of report schedule.
     *
     */
    public function testCoreReportbuilderSchedulesToggle()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderSetFilters
     *
     * Set filter values for given report.
     *
     */
    public function testCoreReportbuilderSetFilters()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreReportbuilderViewReport
     *
     * Trigger custom report viewed.
     *
     */
    public function testCoreReportbuilderViewReport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreRoleAssignRoles
     *
     * Manual role assignments..
     *
     */
    public function testCoreRoleAssignRoles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreRoleUnassignRoles
     *
     * Manual role unassignments..
     *
     */
    public function testCoreRoleUnassignRoles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreSearchGetRelevantUsers
     *
     * Gets relevant users for a search request..
     *
     */
    public function testCoreSearchGetRelevantUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreSearchGetResults
     *
     * Get search results..
     *
     */
    public function testCoreSearchGetResults()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreSearchGetSearchAreasList
     *
     * Get search areas..
     *
     */
    public function testCoreSearchGetSearchAreasList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreSearchGetTopResults
     *
     * Get top search results..
     *
     */
    public function testCoreSearchGetTopResults()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreSearchViewResults
     *
     * Trigger view search results event..
     *
     */
    public function testCoreSearchViewResults()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreSessionTimeRemaining
     *
     * Count the seconds remaining in this session.
     *
     */
    public function testCoreSessionTimeRemaining()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreSessionTouch
     *
     * Keep the users session alive.
     *
     */
    public function testCoreSessionTouch()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreTableGetDynamicTableContent
     *
     * Get the dynamic table content raw html.
     *
     */
    public function testCoreTableGetDynamicTableContent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreTagGetTagAreas
     *
     * Retrieves existing tag areas..
     *
     */
    public function testCoreTagGetTagAreas()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreTagGetTagCloud
     *
     * Retrieves a tag cloud for the given collection and/or query search..
     *
     */
    public function testCoreTagGetTagCloud()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreTagGetTagCollections
     *
     * Retrieves existing tag collections..
     *
     */
    public function testCoreTagGetTagCollections()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreTagGetTagindex
     *
     * Gets tag index page for one tag and one tag area.
     *
     */
    public function testCoreTagGetTagindex()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreTagGetTagindexPerArea
     *
     * Gets tag index page per different areas..
     *
     */
    public function testCoreTagGetTagindexPerArea()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreTagGetTags
     *
     * Gets tags by their ids.
     *
     */
    public function testCoreTagGetTags()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreTagUpdateTags
     *
     * Updates tags.
     *
     */
    public function testCoreTagUpdateTags()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUpdateInplaceEditable
     *
     * Generic service to update title.
     *
     */
    public function testCoreUpdateInplaceEditable()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserAddUserDevice
     *
     * Store mobile user devices information for PUSH Notifications..
     *
     */
    public function testCoreUserAddUserDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserAddUserPrivateFiles
     *
     * Copy files from a draft area to users private files area..
     *
     */
    public function testCoreUserAddUserPrivateFiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserAgreeSitePolicy
     *
     * Agree the site policy for the current user..
     *
     */
    public function testCoreUserAgreeSitePolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserCreateUsers
     *
     * Create users..
     *
     */
    public function testCoreUserCreateUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserDeleteUsers
     *
     * Delete users..
     *
     */
    public function testCoreUserDeleteUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserGetCourseUserProfiles
     *
     * Get course user profiles (each of the profils matching a course id and a user id),..
     *
     */
    public function testCoreUserGetCourseUserProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserGetPrivateFilesInfo
     *
     * Returns general information about files in the user private files area..
     *
     */
    public function testCoreUserGetPrivateFilesInfo()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserGetUserPreferences
     *
     * Return user preferences..
     *
     */
    public function testCoreUserGetUserPreferences()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserGetUsers
     *
     * search for users matching the parameters.
     *
     */
    public function testCoreUserGetUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserGetUsersByField
     *
     * Retrieve users' information for a specified unique field - If you want to do a user search, use core_user_get_users() or core_user_search_identity()..
     *
     */
    public function testCoreUserGetUsersByField()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserRemoveUserDevice
     *
     * Remove a user device from the Moodle database..
     *
     */
    public function testCoreUserRemoveUserDevice()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserSearchIdentity
     *
     * Return list of users identities matching the given criteria in their name or other identity fields..
     *
     */
    public function testCoreUserSearchIdentity()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserSetUserPreferences
     *
     * Set user preferences..
     *
     */
    public function testCoreUserSetUserPreferences()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserUpdatePicture
     *
     * Update or delete the user picture in the site.
     *
     */
    public function testCoreUserUpdatePicture()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserUpdateUserDevicePublicKey
     *
     * Store mobile user public key..
     *
     */
    public function testCoreUserUpdateUserDevicePublicKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserUpdateUserPreferences
     *
     * Update a user's preferences.
     *
     */
    public function testCoreUserUpdateUserPreferences()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserUpdateUsers
     *
     * Update users..
     *
     */
    public function testCoreUserUpdateUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserViewUserList
     *
     * Simulates the web-interface view of user/index.php (triggering events),..
     *
     */
    public function testCoreUserViewUserList()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreUserViewUserProfile
     *
     * Simulates the web-interface view of user/view.php and user/profile.php (triggering events),..
     *
     */
    public function testCoreUserViewUserProfile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreWebserviceGetSiteInfo
     *
     * Return some site info / user info / list web service functions.
     *
     */
    public function testCoreWebserviceGetSiteInfo()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreXapiDeleteState
     *
     * Delete an xAPI state data from an activityId..
     *
     */
    public function testCoreXapiDeleteState()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreXapiDeleteStates
     *
     * Delete all xAPI state data from an activityId..
     *
     */
    public function testCoreXapiDeleteStates()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreXapiGetState
     *
     * Get an xAPI state data from an activityId..
     *
     */
    public function testCoreXapiGetState()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreXapiGetStates
     *
     * Get all state ID from an activityId..
     *
     */
    public function testCoreXapiGetStates()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreXapiPostState
     *
     * Post an xAPI state into an activityId..
     *
     */
    public function testCoreXapiPostState()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for coreXapiStatementPost
     *
     * Post an xAPI statement..
     *
     */
    public function testCoreXapiStatementPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
