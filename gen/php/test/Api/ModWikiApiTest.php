<?php
/**
 * ModWikiApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ModWikiApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModWikiApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for modWikiEditPage
     *
     * Save the contents of a page..
     *
     */
    public function testModWikiEditPage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modWikiGetPageContents
     *
     * Returns the contents of a page..
     *
     */
    public function testModWikiGetPageContents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modWikiGetPageForEditing
     *
     * Locks and retrieves info of page-section to be edited..
     *
     */
    public function testModWikiGetPageForEditing()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modWikiGetSubwikiFiles
     *
     * Returns the list of files for a specific subwiki..
     *
     */
    public function testModWikiGetSubwikiFiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modWikiGetSubwikiPages
     *
     * Returns the list of pages for a specific subwiki..
     *
     */
    public function testModWikiGetSubwikiPages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modWikiGetSubwikis
     *
     * Returns the list of subwikis the user can see in a specific wiki..
     *
     */
    public function testModWikiGetSubwikis()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modWikiGetWikisByCourses
     *
     * Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned..
     *
     */
    public function testModWikiGetWikisByCourses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modWikiNewPage
     *
     * Create a new page in a subwiki..
     *
     */
    public function testModWikiNewPage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modWikiViewPage
     *
     * Trigger the page viewed event and update the module completion status..
     *
     */
    public function testModWikiViewPage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modWikiViewWiki
     *
     * Trigger the course module viewed event and update the module completion status..
     *
     */
    public function testModWikiViewWiki()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
