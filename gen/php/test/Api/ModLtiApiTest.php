<?php
/**
 * ModLtiApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ModLtiApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModLtiApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for modLtiCreateToolProxy
     *
     * Create a tool proxy.
     *
     */
    public function testModLtiCreateToolProxy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modLtiCreateToolType
     *
     * Create a tool type.
     *
     */
    public function testModLtiCreateToolType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modLtiDeleteCourseToolType
     *
     * Delete a course tool type.
     *
     */
    public function testModLtiDeleteCourseToolType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modLtiDeleteToolProxy
     *
     * Delete a tool proxy.
     *
     */
    public function testModLtiDeleteToolProxy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modLtiDeleteToolType
     *
     * Delete a tool type.
     *
     */
    public function testModLtiDeleteToolType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modLtiGetLtisByCourses
     *
     * Returns a list of external tool instances in a provided set of courses, if                             no courses are provided then all the external tool instances the user has access to will be returned..
     *
     */
    public function testModLtiGetLtisByCourses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modLtiGetToolLaunchData
     *
     * Return the launch data for a given external tool..
     *
     */
    public function testModLtiGetToolLaunchData()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modLtiGetToolProxies
     *
     * Get a list of the tool proxies.
     *
     */
    public function testModLtiGetToolProxies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modLtiGetToolProxyRegistrationRequest
     *
     * Get a registration request for a tool proxy.
     *
     */
    public function testModLtiGetToolProxyRegistrationRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modLtiGetToolTypes
     *
     * Get a list of the tool types.
     *
     */
    public function testModLtiGetToolTypes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modLtiGetToolTypesAndProxies
     *
     * Get a list of the tool types and tool proxies.
     *
     */
    public function testModLtiGetToolTypesAndProxies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modLtiGetToolTypesAndProxiesCount
     *
     * Get total number of the tool types and tool proxies.
     *
     */
    public function testModLtiGetToolTypesAndProxiesCount()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modLtiIsCartridge
     *
     * Determine if the given url is for a cartridge.
     *
     */
    public function testModLtiIsCartridge()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modLtiToggleShowinactivitychooser
     *
     * Toggle showinactivitychooser for a tool type in a course.
     *
     */
    public function testModLtiToggleShowinactivitychooser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modLtiUpdateToolType
     *
     * Update a tool type.
     *
     */
    public function testModLtiUpdateToolType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modLtiViewLti
     *
     * Trigger the course module viewed event and update the module completion status..
     *
     */
    public function testModLtiViewLti()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
