<?php
/**
 * ToolMobileApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ToolMobileApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ToolMobileApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for toolMobileCallExternalFunctions
     *
     * Call multiple external functions and return all responses..
     *
     */
    public function testToolMobileCallExternalFunctions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolMobileGetAutologinKey
     *
     * Creates an auto-login key for the current user.                             Is created only in https sites and is restricted by time, ip address and only works if the request                             comes from the Moodle mobile or desktop app..
     *
     */
    public function testToolMobileGetAutologinKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolMobileGetConfig
     *
     * Returns a list of the site configurations, filtering by section..
     *
     */
    public function testToolMobileGetConfig()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolMobileGetContent
     *
     * Returns a piece of content to be displayed in the Mobile app..
     *
     */
    public function testToolMobileGetContent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolMobileGetPluginsSupportingMobile
     *
     * Returns a list of Moodle plugins supporting the mobile app..
     *
     */
    public function testToolMobileGetPluginsSupportingMobile()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolMobileGetPublicConfig
     *
     * Returns a list of the site public settings, those not requiring authentication..
     *
     */
    public function testToolMobileGetPublicConfig()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolMobileGetTokensForQrLogin
     *
     * Returns a WebService token (and private token) for QR login..
     *
     */
    public function testToolMobileGetTokensForQrLogin()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolMobileValidateSubscriptionKey
     *
     * Check if the given site subscription key is valid..
     *
     */
    public function testToolMobileValidateSubscriptionKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
