<?php
/**
 * ModQuizApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ModQuizApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModQuizApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for modQuizAddRandomQuestions
     *
     * Add a number of random questions to a quiz..
     *
     */
    public function testModQuizAddRandomQuestions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizGetAttemptAccessInformation
     *
     * Return access information for a given attempt in a quiz..
     *
     */
    public function testModQuizGetAttemptAccessInformation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizGetAttemptData
     *
     * Returns information for the given attempt page for a quiz attempt in progress..
     *
     */
    public function testModQuizGetAttemptData()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizGetAttemptReview
     *
     * Returns review information for the given finished attempt, can be used by users or teachers..
     *
     */
    public function testModQuizGetAttemptReview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizGetAttemptSummary
     *
     * Returns a summary of a quiz attempt before it is submitted..
     *
     */
    public function testModQuizGetAttemptSummary()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizGetCombinedReviewOptions
     *
     * Combines the review options from a number of different quiz attempts..
     *
     */
    public function testModQuizGetCombinedReviewOptions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizGetQuizAccessInformation
     *
     * Return access information for a given quiz..
     *
     */
    public function testModQuizGetQuizAccessInformation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizGetQuizFeedbackForGrade
     *
     * Get the feedback text that should be show to a student who got the given grade in the given quiz..
     *
     */
    public function testModQuizGetQuizFeedbackForGrade()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizGetQuizRequiredQtypes
     *
     * Return the potential question types that would be required for a given quiz..
     *
     */
    public function testModQuizGetQuizRequiredQtypes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizGetQuizzesByCourses
     *
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned..
     *
     */
    public function testModQuizGetQuizzesByCourses()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizGetReopenAttemptConfirmation
     *
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message..
     *
     */
    public function testModQuizGetReopenAttemptConfirmation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizGetUserAttempts
     *
     * Return a list of attempts for the given quiz and user..
     *
     */
    public function testModQuizGetUserAttempts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizGetUserBestGrade
     *
     * Get the best current grade for the given user on a quiz..
     *
     */
    public function testModQuizGetUserBestGrade()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizProcessAttempt
     *
     * Process responses during an attempt at a quiz and also deals with attempts finishing..
     *
     */
    public function testModQuizProcessAttempt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizReopenAttempt
     *
     * Re-open an attempt that is currently in the never submitted state..
     *
     */
    public function testModQuizReopenAttempt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizSaveAttempt
     *
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature..
     *
     */
    public function testModQuizSaveAttempt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizSetQuestionVersion
     *
     * Set the version of question that would be required for a given quiz..
     *
     */
    public function testModQuizSetQuestionVersion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizStartAttempt
     *
     * Starts a new attempt at a quiz..
     *
     */
    public function testModQuizStartAttempt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizUpdateFilterCondition
     *
     * Update filter condition for a random question slot..
     *
     */
    public function testModQuizUpdateFilterCondition()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizViewAttempt
     *
     * Trigger the attempt viewed event..
     *
     */
    public function testModQuizViewAttempt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizViewAttemptReview
     *
     * Trigger the attempt reviewed event..
     *
     */
    public function testModQuizViewAttemptReview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizViewAttemptSummary
     *
     * Trigger the attempt summary viewed event..
     *
     */
    public function testModQuizViewAttemptSummary()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modQuizViewQuiz
     *
     * Trigger the course module viewed event and update the module completion status..
     *
     */
    public function testModQuizViewQuiz()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
