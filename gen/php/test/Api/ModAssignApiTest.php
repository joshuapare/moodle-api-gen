<?php
/**
 * ModAssignApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ModAssignApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModAssignApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for modAssignCopyPreviousAttempt
     *
     * Copy a students previous attempt to a new attempt..
     *
     */
    public function testModAssignCopyPreviousAttempt()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignGetAssignments
     *
     * Returns the courses and assignments for the users capability.
     *
     */
    public function testModAssignGetAssignments()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignGetGrades
     *
     * Returns grades from the assignment.
     *
     */
    public function testModAssignGetGrades()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignGetParticipant
     *
     * Get a participant for an assignment, with some summary info about their submissions..
     *
     */
    public function testModAssignGetParticipant()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignGetSubmissionStatus
     *
     * Returns information about an assignment submission status for a given user..
     *
     */
    public function testModAssignGetSubmissionStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignGetSubmissions
     *
     * Returns the submissions for assignments.
     *
     */
    public function testModAssignGetSubmissions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignGetUserFlags
     *
     * Returns the user flags for assignments.
     *
     */
    public function testModAssignGetUserFlags()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignGetUserMappings
     *
     * Returns the blind marking mappings for assignments.
     *
     */
    public function testModAssignGetUserMappings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignListParticipants
     *
     * List the participants for a single assignment, with some summary info about their submissions..
     *
     */
    public function testModAssignListParticipants()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignLockSubmissions
     *
     * Prevent students from making changes to a list of submissions.
     *
     */
    public function testModAssignLockSubmissions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignRevealIdentities
     *
     * Reveal the identities for a blind marking assignment.
     *
     */
    public function testModAssignRevealIdentities()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignRevertSubmissionsToDraft
     *
     * Reverts the list of submissions to draft status.
     *
     */
    public function testModAssignRevertSubmissionsToDraft()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignSaveGrade
     *
     * Save a grade update for a single student..
     *
     */
    public function testModAssignSaveGrade()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignSaveGrades
     *
     * Save multiple grade updates for an assignment..
     *
     */
    public function testModAssignSaveGrades()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignSaveSubmission
     *
     * Update the current students submission.
     *
     */
    public function testModAssignSaveSubmission()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignSaveUserExtensions
     *
     * Save a list of assignment extensions.
     *
     */
    public function testModAssignSaveUserExtensions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignSetUserFlags
     *
     * Creates or updates user flags.
     *
     */
    public function testModAssignSetUserFlags()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignStartSubmission
     *
     * Start a submission for user if assignment has a time limit..
     *
     */
    public function testModAssignStartSubmission()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignSubmitForGrading
     *
     * Submit the current students assignment for grading.
     *
     */
    public function testModAssignSubmitForGrading()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignSubmitGradingForm
     *
     * Submit the grading form data via ajax.
     *
     */
    public function testModAssignSubmitGradingForm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignUnlockSubmissions
     *
     * Allow students to make changes to a list of submissions.
     *
     */
    public function testModAssignUnlockSubmissions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignViewAssign
     *
     * Update the module completion status..
     *
     */
    public function testModAssignViewAssign()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignViewGradingTable
     *
     * Trigger the grading_table_viewed event..
     *
     */
    public function testModAssignViewGradingTable()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modAssignViewSubmissionStatus
     *
     * Trigger the submission status viewed event..
     *
     */
    public function testModAssignViewSubmissionStatus()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
