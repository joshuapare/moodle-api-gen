<?php
/**
 * ToolDataprivacyApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ToolDataprivacyApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ToolDataprivacyApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for toolDataprivacyApproveDataRequest
     *
     * Approve a data request.
     *
     */
    public function testToolDataprivacyApproveDataRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyBulkApproveDataRequests
     *
     * Bulk approve data requests.
     *
     */
    public function testToolDataprivacyBulkApproveDataRequests()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyBulkDenyDataRequests
     *
     * Bulk deny data requests.
     *
     */
    public function testToolDataprivacyBulkDenyDataRequests()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyCancelDataRequest
     *
     * Cancel the data request made by the user.
     *
     */
    public function testToolDataprivacyCancelDataRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyConfirmContextsForDeletion
     *
     * Mark the selected expired contexts as confirmed for deletion.
     *
     */
    public function testToolDataprivacyConfirmContextsForDeletion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyContactDpo
     *
     * Contact the site Data Protection Officer(s).
     *
     */
    public function testToolDataprivacyContactDpo()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyCreateCategoryForm
     *
     * Adds a data category.
     *
     */
    public function testToolDataprivacyCreateCategoryForm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyCreatePurposeForm
     *
     * Adds a data purpose.
     *
     */
    public function testToolDataprivacyCreatePurposeForm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyDeleteCategory
     *
     * Deletes an existing data category.
     *
     */
    public function testToolDataprivacyDeleteCategory()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyDeletePurpose
     *
     * Deletes an existing data purpose.
     *
     */
    public function testToolDataprivacyDeletePurpose()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyDenyDataRequest
     *
     * Deny a data request.
     *
     */
    public function testToolDataprivacyDenyDataRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyGetActivityOptions
     *
     * Fetches a list of activity options.
     *
     */
    public function testToolDataprivacyGetActivityOptions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyGetCategoryOptions
     *
     * Fetches a list of data category options.
     *
     */
    public function testToolDataprivacyGetCategoryOptions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyGetDataRequest
     *
     * Fetch the details of a user's data request.
     *
     */
    public function testToolDataprivacyGetDataRequest()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyGetPurposeOptions
     *
     * Fetches a list of data storage purpose options.
     *
     */
    public function testToolDataprivacyGetPurposeOptions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyGetUsers
     *
     * Fetches a list of users.
     *
     */
    public function testToolDataprivacyGetUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyMarkComplete
     *
     * Mark a user's general enquiry as complete.
     *
     */
    public function testToolDataprivacyMarkComplete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacySetContextDefaults
     *
     * Updates the default category and purpose for a given context level (and optionally, a plugin).
     *
     */
    public function testToolDataprivacySetContextDefaults()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacySetContextForm
     *
     * Sets purpose and category for a specific context.
     *
     */
    public function testToolDataprivacySetContextForm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacySetContextlevelForm
     *
     * Sets purpose and category across a context level.
     *
     */
    public function testToolDataprivacySetContextlevelForm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacySubmitSelectedCoursesForm
     *
     * Save list of selected courses for export.
     *
     */
    public function testToolDataprivacySubmitSelectedCoursesForm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolDataprivacyTreeExtraBranches
     *
     * Return branches for the context tree.
     *
     */
    public function testToolDataprivacyTreeExtraBranches()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
