<?php
/**
 * CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerTest Class Doc Comment
 *
 * @category    Class
 * @description CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner"
     */
    public function testCoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "calendareventtypes"
     */
    public function testPropertyCalendareventtypes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "daytitle"
     */
    public function testPropertyDaytitle()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "events"
     */
    public function testPropertyEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hasevents"
     */
    public function testPropertyHasevents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "haslastdayofevent"
     */
    public function testPropertyHaslastdayofevent()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hours"
     */
    public function testPropertyHours()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "istoday"
     */
    public function testPropertyIstoday()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "isweekend"
     */
    public function testPropertyIsweekend()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "mday"
     */
    public function testPropertyMday()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "minutes"
     */
    public function testPropertyMinutes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "neweventtimestamp"
     */
    public function testPropertyNeweventtimestamp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "nextperiod"
     */
    public function testPropertyNextperiod()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "popovertitle"
     */
    public function testPropertyPopovertitle()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "previousperiod"
     */
    public function testPropertyPreviousperiod()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "seconds"
     */
    public function testPropertySeconds()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "timestamp"
     */
    public function testPropertyTimestamp()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "viewdaylink"
     */
    public function testPropertyViewdaylink()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "viewdaylinktitle"
     */
    public function testPropertyViewdaylinktitle()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "wday"
     */
    public function testPropertyWday()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "yday"
     */
    public function testPropertyYday()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "year"
     */
    public function testPropertyYear()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
