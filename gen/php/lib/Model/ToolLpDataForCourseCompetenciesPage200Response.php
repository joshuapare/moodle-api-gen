<?php
/**
 * ToolLpDataForCourseCompetenciesPage200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ToolLpDataForCourseCompetenciesPage200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ToolLpDataForCourseCompetenciesPage200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tool_lp_data_for_course_competencies_page_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'canconfigurecoursecompetencies' => 'bool',
        'cangradecompetencies' => 'bool',
        'canmanagecompetencyframeworks' => 'bool',
        'canmanagecoursecompetencies' => 'bool',
        'competencies' => '\OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner[]',
        'courseid' => 'int',
        'gradableuserid' => 'int',
        'manageurl' => 'string',
        'pagecontextid' => 'int',
        'pluginbaseurl' => 'string',
        'settings' => '\OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200ResponseSettings',
        'statistics' => '\OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200ResponseStatistics'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'canconfigurecoursecompetencies' => null,
        'cangradecompetencies' => null,
        'canmanagecompetencyframeworks' => null,
        'canmanagecoursecompetencies' => null,
        'competencies' => null,
        'courseid' => null,
        'gradableuserid' => null,
        'manageurl' => null,
        'pagecontextid' => null,
        'pluginbaseurl' => null,
        'settings' => null,
        'statistics' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'canconfigurecoursecompetencies' => false,
        'cangradecompetencies' => false,
        'canmanagecompetencyframeworks' => false,
        'canmanagecoursecompetencies' => false,
        'competencies' => false,
        'courseid' => false,
        'gradableuserid' => false,
        'manageurl' => false,
        'pagecontextid' => false,
        'pluginbaseurl' => false,
        'settings' => false,
        'statistics' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canconfigurecoursecompetencies' => 'canconfigurecoursecompetencies',
        'cangradecompetencies' => 'cangradecompetencies',
        'canmanagecompetencyframeworks' => 'canmanagecompetencyframeworks',
        'canmanagecoursecompetencies' => 'canmanagecoursecompetencies',
        'competencies' => 'competencies',
        'courseid' => 'courseid',
        'gradableuserid' => 'gradableuserid',
        'manageurl' => 'manageurl',
        'pagecontextid' => 'pagecontextid',
        'pluginbaseurl' => 'pluginbaseurl',
        'settings' => 'settings',
        'statistics' => 'statistics'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canconfigurecoursecompetencies' => 'setCanconfigurecoursecompetencies',
        'cangradecompetencies' => 'setCangradecompetencies',
        'canmanagecompetencyframeworks' => 'setCanmanagecompetencyframeworks',
        'canmanagecoursecompetencies' => 'setCanmanagecoursecompetencies',
        'competencies' => 'setCompetencies',
        'courseid' => 'setCourseid',
        'gradableuserid' => 'setGradableuserid',
        'manageurl' => 'setManageurl',
        'pagecontextid' => 'setPagecontextid',
        'pluginbaseurl' => 'setPluginbaseurl',
        'settings' => 'setSettings',
        'statistics' => 'setStatistics'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canconfigurecoursecompetencies' => 'getCanconfigurecoursecompetencies',
        'cangradecompetencies' => 'getCangradecompetencies',
        'canmanagecompetencyframeworks' => 'getCanmanagecompetencyframeworks',
        'canmanagecoursecompetencies' => 'getCanmanagecoursecompetencies',
        'competencies' => 'getCompetencies',
        'courseid' => 'getCourseid',
        'gradableuserid' => 'getGradableuserid',
        'manageurl' => 'getManageurl',
        'pagecontextid' => 'getPagecontextid',
        'pluginbaseurl' => 'getPluginbaseurl',
        'settings' => 'getSettings',
        'statistics' => 'getStatistics'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('canconfigurecoursecompetencies', $data ?? [], null);
        $this->setIfExists('cangradecompetencies', $data ?? [], null);
        $this->setIfExists('canmanagecompetencyframeworks', $data ?? [], null);
        $this->setIfExists('canmanagecoursecompetencies', $data ?? [], null);
        $this->setIfExists('competencies', $data ?? [], null);
        $this->setIfExists('courseid', $data ?? [], null);
        $this->setIfExists('gradableuserid', $data ?? [], null);
        $this->setIfExists('manageurl', $data ?? [], 'null');
        $this->setIfExists('pagecontextid', $data ?? [], null);
        $this->setIfExists('pluginbaseurl', $data ?? [], 'null');
        $this->setIfExists('settings', $data ?? [], null);
        $this->setIfExists('statistics', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['canconfigurecoursecompetencies'] === null) {
            $invalidProperties[] = "'canconfigurecoursecompetencies' can't be null";
        }
        if ($this->container['cangradecompetencies'] === null) {
            $invalidProperties[] = "'cangradecompetencies' can't be null";
        }
        if ($this->container['canmanagecompetencyframeworks'] === null) {
            $invalidProperties[] = "'canmanagecompetencyframeworks' can't be null";
        }
        if ($this->container['canmanagecoursecompetencies'] === null) {
            $invalidProperties[] = "'canmanagecoursecompetencies' can't be null";
        }
        if ($this->container['competencies'] === null) {
            $invalidProperties[] = "'competencies' can't be null";
        }
        if ($this->container['courseid'] === null) {
            $invalidProperties[] = "'courseid' can't be null";
        }
        if ($this->container['manageurl'] === null) {
            $invalidProperties[] = "'manageurl' can't be null";
        }
        if ($this->container['pagecontextid'] === null) {
            $invalidProperties[] = "'pagecontextid' can't be null";
        }
        if ($this->container['pluginbaseurl'] === null) {
            $invalidProperties[] = "'pluginbaseurl' can't be null";
        }
        if ($this->container['settings'] === null) {
            $invalidProperties[] = "'settings' can't be null";
        }
        if ($this->container['statistics'] === null) {
            $invalidProperties[] = "'statistics' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canconfigurecoursecompetencies
     *
     * @return bool
     */
    public function getCanconfigurecoursecompetencies()
    {
        return $this->container['canconfigurecoursecompetencies'];
    }

    /**
     * Sets canconfigurecoursecompetencies
     *
     * @param bool $canconfigurecoursecompetencies User can configure course competency settings
     *
     * @return self
     */
    public function setCanconfigurecoursecompetencies($canconfigurecoursecompetencies)
    {
        if (is_null($canconfigurecoursecompetencies)) {
            throw new \InvalidArgumentException('non-nullable canconfigurecoursecompetencies cannot be null');
        }
        $this->container['canconfigurecoursecompetencies'] = $canconfigurecoursecompetencies;

        return $this;
    }

    /**
     * Gets cangradecompetencies
     *
     * @return bool
     */
    public function getCangradecompetencies()
    {
        return $this->container['cangradecompetencies'];
    }

    /**
     * Sets cangradecompetencies
     *
     * @param bool $cangradecompetencies User can grade competencies.
     *
     * @return self
     */
    public function setCangradecompetencies($cangradecompetencies)
    {
        if (is_null($cangradecompetencies)) {
            throw new \InvalidArgumentException('non-nullable cangradecompetencies cannot be null');
        }
        $this->container['cangradecompetencies'] = $cangradecompetencies;

        return $this;
    }

    /**
     * Gets canmanagecompetencyframeworks
     *
     * @return bool
     */
    public function getCanmanagecompetencyframeworks()
    {
        return $this->container['canmanagecompetencyframeworks'];
    }

    /**
     * Sets canmanagecompetencyframeworks
     *
     * @param bool $canmanagecompetencyframeworks User can manage competency frameworks
     *
     * @return self
     */
    public function setCanmanagecompetencyframeworks($canmanagecompetencyframeworks)
    {
        if (is_null($canmanagecompetencyframeworks)) {
            throw new \InvalidArgumentException('non-nullable canmanagecompetencyframeworks cannot be null');
        }
        $this->container['canmanagecompetencyframeworks'] = $canmanagecompetencyframeworks;

        return $this;
    }

    /**
     * Gets canmanagecoursecompetencies
     *
     * @return bool
     */
    public function getCanmanagecoursecompetencies()
    {
        return $this->container['canmanagecoursecompetencies'];
    }

    /**
     * Sets canmanagecoursecompetencies
     *
     * @param bool $canmanagecoursecompetencies User can manage linked course competencies
     *
     * @return self
     */
    public function setCanmanagecoursecompetencies($canmanagecoursecompetencies)
    {
        if (is_null($canmanagecoursecompetencies)) {
            throw new \InvalidArgumentException('non-nullable canmanagecoursecompetencies cannot be null');
        }
        $this->container['canmanagecoursecompetencies'] = $canmanagecoursecompetencies;

        return $this;
    }

    /**
     * Gets competencies
     *
     * @return \OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner[]
     */
    public function getCompetencies()
    {
        return $this->container['competencies'];
    }

    /**
     * Sets competencies
     *
     * @param \OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner[] $competencies competencies
     *
     * @return self
     */
    public function setCompetencies($competencies)
    {
        if (is_null($competencies)) {
            throw new \InvalidArgumentException('non-nullable competencies cannot be null');
        }
        $this->container['competencies'] = $competencies;

        return $this;
    }

    /**
     * Gets courseid
     *
     * @return int
     */
    public function getCourseid()
    {
        return $this->container['courseid'];
    }

    /**
     * Sets courseid
     *
     * @param int $courseid The current course id
     *
     * @return self
     */
    public function setCourseid($courseid)
    {
        if (is_null($courseid)) {
            throw new \InvalidArgumentException('non-nullable courseid cannot be null');
        }
        $this->container['courseid'] = $courseid;

        return $this;
    }

    /**
     * Gets gradableuserid
     *
     * @return int|null
     */
    public function getGradableuserid()
    {
        return $this->container['gradableuserid'];
    }

    /**
     * Sets gradableuserid
     *
     * @param int|null $gradableuserid Current user id, if the user is a gradable user.
     *
     * @return self
     */
    public function setGradableuserid($gradableuserid)
    {
        if (is_null($gradableuserid)) {
            throw new \InvalidArgumentException('non-nullable gradableuserid cannot be null');
        }
        $this->container['gradableuserid'] = $gradableuserid;

        return $this;
    }

    /**
     * Gets manageurl
     *
     * @return string
     */
    public function getManageurl()
    {
        return $this->container['manageurl'];
    }

    /**
     * Sets manageurl
     *
     * @param string $manageurl Url to the manage competencies page.
     *
     * @return self
     */
    public function setManageurl($manageurl)
    {
        if (is_null($manageurl)) {
            throw new \InvalidArgumentException('non-nullable manageurl cannot be null');
        }
        $this->container['manageurl'] = $manageurl;

        return $this;
    }

    /**
     * Gets pagecontextid
     *
     * @return int
     */
    public function getPagecontextid()
    {
        return $this->container['pagecontextid'];
    }

    /**
     * Sets pagecontextid
     *
     * @param int $pagecontextid The current page context ID.
     *
     * @return self
     */
    public function setPagecontextid($pagecontextid)
    {
        if (is_null($pagecontextid)) {
            throw new \InvalidArgumentException('non-nullable pagecontextid cannot be null');
        }
        $this->container['pagecontextid'] = $pagecontextid;

        return $this;
    }

    /**
     * Gets pluginbaseurl
     *
     * @return string
     */
    public function getPluginbaseurl()
    {
        return $this->container['pluginbaseurl'];
    }

    /**
     * Sets pluginbaseurl
     *
     * @param string $pluginbaseurl Url to the course competencies page.
     *
     * @return self
     */
    public function setPluginbaseurl($pluginbaseurl)
    {
        if (is_null($pluginbaseurl)) {
            throw new \InvalidArgumentException('non-nullable pluginbaseurl cannot be null');
        }
        $this->container['pluginbaseurl'] = $pluginbaseurl;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200ResponseSettings
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200ResponseSettings $settings settings
     *
     * @return self
     */
    public function setSettings($settings)
    {
        if (is_null($settings)) {
            throw new \InvalidArgumentException('non-nullable settings cannot be null');
        }
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets statistics
     *
     * @return \OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200ResponseStatistics
     */
    public function getStatistics()
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     *
     * @param \OpenAPI\Client\Model\ToolLpDataForCourseCompetenciesPage200ResponseStatistics $statistics statistics
     *
     * @return self
     */
    public function setStatistics($statistics)
    {
        if (is_null($statistics)) {
            throw new \InvalidArgumentException('non-nullable statistics cannot be null');
        }
        $this->container['statistics'] = $statistics;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


