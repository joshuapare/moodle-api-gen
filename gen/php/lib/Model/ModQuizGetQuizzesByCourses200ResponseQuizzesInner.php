<?php
/**
 * ModQuizGetQuizzesByCourses200ResponseQuizzesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModQuizGetQuizzesByCourses200ResponseQuizzesInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModQuizGetQuizzesByCourses200ResponseQuizzesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_quiz_get_quizzes_by_courses_200_response_quizzes_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allowofflineattempts' => 'int',
        'attemptonlast' => 'int',
        'attempts' => 'int',
        'autosaveperiod' => 'int',
        'browsersecurity' => 'string',
        'canredoquestions' => 'int',
        'completionattemptsexhausted' => 'int',
        'completionpass' => 'int',
        'course' => 'int',
        'coursemodule' => 'int',
        'decimalpoints' => 'int',
        'delay1' => 'int',
        'delay2' => 'int',
        'graceperiod' => 'int',
        'grade' => 'float',
        'grademethod' => 'int',
        'groupingid' => 'int',
        'groupmode' => 'int',
        'hasfeedback' => 'int',
        'hasquestions' => 'int',
        'id' => 'int',
        'intro' => 'string',
        'introfiles' => '\OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]',
        'introformat' => 'int',
        'lang' => 'string',
        'name' => 'string',
        'navmethod' => 'string',
        'overduehandling' => 'string',
        'password' => 'string',
        'preferredbehaviour' => 'string',
        'questiondecimalpoints' => 'int',
        'questionsperpage' => 'int',
        'reviewattempt' => 'int',
        'reviewcorrectness' => 'int',
        'reviewgeneralfeedback' => 'int',
        'reviewmarks' => 'int',
        'reviewmaxmarks' => 'int',
        'reviewoverallfeedback' => 'int',
        'reviewrightanswer' => 'int',
        'reviewspecificfeedback' => 'int',
        'section' => 'int',
        'showblocks' => 'int',
        'showuserpicture' => 'int',
        'shuffleanswers' => 'int',
        'subnet' => 'string',
        'sumgrades' => 'float',
        'timeclose' => 'int',
        'timecreated' => 'int',
        'timelimit' => 'int',
        'timemodified' => 'int',
        'timeopen' => 'int',
        'visible' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allowofflineattempts' => null,
        'attemptonlast' => null,
        'attempts' => null,
        'autosaveperiod' => null,
        'browsersecurity' => null,
        'canredoquestions' => null,
        'completionattemptsexhausted' => null,
        'completionpass' => null,
        'course' => null,
        'coursemodule' => null,
        'decimalpoints' => null,
        'delay1' => null,
        'delay2' => null,
        'graceperiod' => null,
        'grade' => null,
        'grademethod' => null,
        'groupingid' => null,
        'groupmode' => null,
        'hasfeedback' => null,
        'hasquestions' => null,
        'id' => null,
        'intro' => null,
        'introfiles' => null,
        'introformat' => null,
        'lang' => null,
        'name' => null,
        'navmethod' => null,
        'overduehandling' => null,
        'password' => null,
        'preferredbehaviour' => null,
        'questiondecimalpoints' => null,
        'questionsperpage' => null,
        'reviewattempt' => null,
        'reviewcorrectness' => null,
        'reviewgeneralfeedback' => null,
        'reviewmarks' => null,
        'reviewmaxmarks' => null,
        'reviewoverallfeedback' => null,
        'reviewrightanswer' => null,
        'reviewspecificfeedback' => null,
        'section' => null,
        'showblocks' => null,
        'showuserpicture' => null,
        'shuffleanswers' => null,
        'subnet' => null,
        'sumgrades' => null,
        'timeclose' => null,
        'timecreated' => null,
        'timelimit' => null,
        'timemodified' => null,
        'timeopen' => null,
        'visible' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allowofflineattempts' => false,
        'attemptonlast' => false,
        'attempts' => false,
        'autosaveperiod' => false,
        'browsersecurity' => false,
        'canredoquestions' => false,
        'completionattemptsexhausted' => false,
        'completionpass' => false,
        'course' => false,
        'coursemodule' => false,
        'decimalpoints' => false,
        'delay1' => false,
        'delay2' => false,
        'graceperiod' => false,
        'grade' => false,
        'grademethod' => false,
        'groupingid' => false,
        'groupmode' => false,
        'hasfeedback' => false,
        'hasquestions' => false,
        'id' => false,
        'intro' => false,
        'introfiles' => false,
        'introformat' => false,
        'lang' => false,
        'name' => false,
        'navmethod' => false,
        'overduehandling' => false,
        'password' => false,
        'preferredbehaviour' => false,
        'questiondecimalpoints' => false,
        'questionsperpage' => false,
        'reviewattempt' => false,
        'reviewcorrectness' => false,
        'reviewgeneralfeedback' => false,
        'reviewmarks' => false,
        'reviewmaxmarks' => false,
        'reviewoverallfeedback' => false,
        'reviewrightanswer' => false,
        'reviewspecificfeedback' => false,
        'section' => false,
        'showblocks' => false,
        'showuserpicture' => false,
        'shuffleanswers' => false,
        'subnet' => false,
        'sumgrades' => false,
        'timeclose' => false,
        'timecreated' => false,
        'timelimit' => false,
        'timemodified' => false,
        'timeopen' => false,
        'visible' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowofflineattempts' => 'allowofflineattempts',
        'attemptonlast' => 'attemptonlast',
        'attempts' => 'attempts',
        'autosaveperiod' => 'autosaveperiod',
        'browsersecurity' => 'browsersecurity',
        'canredoquestions' => 'canredoquestions',
        'completionattemptsexhausted' => 'completionattemptsexhausted',
        'completionpass' => 'completionpass',
        'course' => 'course',
        'coursemodule' => 'coursemodule',
        'decimalpoints' => 'decimalpoints',
        'delay1' => 'delay1',
        'delay2' => 'delay2',
        'graceperiod' => 'graceperiod',
        'grade' => 'grade',
        'grademethod' => 'grademethod',
        'groupingid' => 'groupingid',
        'groupmode' => 'groupmode',
        'hasfeedback' => 'hasfeedback',
        'hasquestions' => 'hasquestions',
        'id' => 'id',
        'intro' => 'intro',
        'introfiles' => 'introfiles',
        'introformat' => 'introformat',
        'lang' => 'lang',
        'name' => 'name',
        'navmethod' => 'navmethod',
        'overduehandling' => 'overduehandling',
        'password' => 'password',
        'preferredbehaviour' => 'preferredbehaviour',
        'questiondecimalpoints' => 'questiondecimalpoints',
        'questionsperpage' => 'questionsperpage',
        'reviewattempt' => 'reviewattempt',
        'reviewcorrectness' => 'reviewcorrectness',
        'reviewgeneralfeedback' => 'reviewgeneralfeedback',
        'reviewmarks' => 'reviewmarks',
        'reviewmaxmarks' => 'reviewmaxmarks',
        'reviewoverallfeedback' => 'reviewoverallfeedback',
        'reviewrightanswer' => 'reviewrightanswer',
        'reviewspecificfeedback' => 'reviewspecificfeedback',
        'section' => 'section',
        'showblocks' => 'showblocks',
        'showuserpicture' => 'showuserpicture',
        'shuffleanswers' => 'shuffleanswers',
        'subnet' => 'subnet',
        'sumgrades' => 'sumgrades',
        'timeclose' => 'timeclose',
        'timecreated' => 'timecreated',
        'timelimit' => 'timelimit',
        'timemodified' => 'timemodified',
        'timeopen' => 'timeopen',
        'visible' => 'visible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowofflineattempts' => 'setAllowofflineattempts',
        'attemptonlast' => 'setAttemptonlast',
        'attempts' => 'setAttempts',
        'autosaveperiod' => 'setAutosaveperiod',
        'browsersecurity' => 'setBrowsersecurity',
        'canredoquestions' => 'setCanredoquestions',
        'completionattemptsexhausted' => 'setCompletionattemptsexhausted',
        'completionpass' => 'setCompletionpass',
        'course' => 'setCourse',
        'coursemodule' => 'setCoursemodule',
        'decimalpoints' => 'setDecimalpoints',
        'delay1' => 'setDelay1',
        'delay2' => 'setDelay2',
        'graceperiod' => 'setGraceperiod',
        'grade' => 'setGrade',
        'grademethod' => 'setGrademethod',
        'groupingid' => 'setGroupingid',
        'groupmode' => 'setGroupmode',
        'hasfeedback' => 'setHasfeedback',
        'hasquestions' => 'setHasquestions',
        'id' => 'setId',
        'intro' => 'setIntro',
        'introfiles' => 'setIntrofiles',
        'introformat' => 'setIntroformat',
        'lang' => 'setLang',
        'name' => 'setName',
        'navmethod' => 'setNavmethod',
        'overduehandling' => 'setOverduehandling',
        'password' => 'setPassword',
        'preferredbehaviour' => 'setPreferredbehaviour',
        'questiondecimalpoints' => 'setQuestiondecimalpoints',
        'questionsperpage' => 'setQuestionsperpage',
        'reviewattempt' => 'setReviewattempt',
        'reviewcorrectness' => 'setReviewcorrectness',
        'reviewgeneralfeedback' => 'setReviewgeneralfeedback',
        'reviewmarks' => 'setReviewmarks',
        'reviewmaxmarks' => 'setReviewmaxmarks',
        'reviewoverallfeedback' => 'setReviewoverallfeedback',
        'reviewrightanswer' => 'setReviewrightanswer',
        'reviewspecificfeedback' => 'setReviewspecificfeedback',
        'section' => 'setSection',
        'showblocks' => 'setShowblocks',
        'showuserpicture' => 'setShowuserpicture',
        'shuffleanswers' => 'setShuffleanswers',
        'subnet' => 'setSubnet',
        'sumgrades' => 'setSumgrades',
        'timeclose' => 'setTimeclose',
        'timecreated' => 'setTimecreated',
        'timelimit' => 'setTimelimit',
        'timemodified' => 'setTimemodified',
        'timeopen' => 'setTimeopen',
        'visible' => 'setVisible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowofflineattempts' => 'getAllowofflineattempts',
        'attemptonlast' => 'getAttemptonlast',
        'attempts' => 'getAttempts',
        'autosaveperiod' => 'getAutosaveperiod',
        'browsersecurity' => 'getBrowsersecurity',
        'canredoquestions' => 'getCanredoquestions',
        'completionattemptsexhausted' => 'getCompletionattemptsexhausted',
        'completionpass' => 'getCompletionpass',
        'course' => 'getCourse',
        'coursemodule' => 'getCoursemodule',
        'decimalpoints' => 'getDecimalpoints',
        'delay1' => 'getDelay1',
        'delay2' => 'getDelay2',
        'graceperiod' => 'getGraceperiod',
        'grade' => 'getGrade',
        'grademethod' => 'getGrademethod',
        'groupingid' => 'getGroupingid',
        'groupmode' => 'getGroupmode',
        'hasfeedback' => 'getHasfeedback',
        'hasquestions' => 'getHasquestions',
        'id' => 'getId',
        'intro' => 'getIntro',
        'introfiles' => 'getIntrofiles',
        'introformat' => 'getIntroformat',
        'lang' => 'getLang',
        'name' => 'getName',
        'navmethod' => 'getNavmethod',
        'overduehandling' => 'getOverduehandling',
        'password' => 'getPassword',
        'preferredbehaviour' => 'getPreferredbehaviour',
        'questiondecimalpoints' => 'getQuestiondecimalpoints',
        'questionsperpage' => 'getQuestionsperpage',
        'reviewattempt' => 'getReviewattempt',
        'reviewcorrectness' => 'getReviewcorrectness',
        'reviewgeneralfeedback' => 'getReviewgeneralfeedback',
        'reviewmarks' => 'getReviewmarks',
        'reviewmaxmarks' => 'getReviewmaxmarks',
        'reviewoverallfeedback' => 'getReviewoverallfeedback',
        'reviewrightanswer' => 'getReviewrightanswer',
        'reviewspecificfeedback' => 'getReviewspecificfeedback',
        'section' => 'getSection',
        'showblocks' => 'getShowblocks',
        'showuserpicture' => 'getShowuserpicture',
        'shuffleanswers' => 'getShuffleanswers',
        'subnet' => 'getSubnet',
        'sumgrades' => 'getSumgrades',
        'timeclose' => 'getTimeclose',
        'timecreated' => 'getTimecreated',
        'timelimit' => 'getTimelimit',
        'timemodified' => 'getTimemodified',
        'timeopen' => 'getTimeopen',
        'visible' => 'getVisible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allowofflineattempts', $data ?? [], null);
        $this->setIfExists('attemptonlast', $data ?? [], null);
        $this->setIfExists('attempts', $data ?? [], null);
        $this->setIfExists('autosaveperiod', $data ?? [], null);
        $this->setIfExists('browsersecurity', $data ?? [], 'null');
        $this->setIfExists('canredoquestions', $data ?? [], null);
        $this->setIfExists('completionattemptsexhausted', $data ?? [], null);
        $this->setIfExists('completionpass', $data ?? [], null);
        $this->setIfExists('course', $data ?? [], null);
        $this->setIfExists('coursemodule', $data ?? [], null);
        $this->setIfExists('decimalpoints', $data ?? [], null);
        $this->setIfExists('delay1', $data ?? [], null);
        $this->setIfExists('delay2', $data ?? [], null);
        $this->setIfExists('graceperiod', $data ?? [], null);
        $this->setIfExists('grade', $data ?? [], null);
        $this->setIfExists('grademethod', $data ?? [], null);
        $this->setIfExists('groupingid', $data ?? [], null);
        $this->setIfExists('groupmode', $data ?? [], null);
        $this->setIfExists('hasfeedback', $data ?? [], null);
        $this->setIfExists('hasquestions', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('intro', $data ?? [], null);
        $this->setIfExists('introfiles', $data ?? [], null);
        $this->setIfExists('introformat', $data ?? [], null);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('navmethod', $data ?? [], 'null');
        $this->setIfExists('overduehandling', $data ?? [], 'null');
        $this->setIfExists('password', $data ?? [], 'null');
        $this->setIfExists('preferredbehaviour', $data ?? [], 'null');
        $this->setIfExists('questiondecimalpoints', $data ?? [], null);
        $this->setIfExists('questionsperpage', $data ?? [], null);
        $this->setIfExists('reviewattempt', $data ?? [], null);
        $this->setIfExists('reviewcorrectness', $data ?? [], null);
        $this->setIfExists('reviewgeneralfeedback', $data ?? [], null);
        $this->setIfExists('reviewmarks', $data ?? [], null);
        $this->setIfExists('reviewmaxmarks', $data ?? [], null);
        $this->setIfExists('reviewoverallfeedback', $data ?? [], null);
        $this->setIfExists('reviewrightanswer', $data ?? [], null);
        $this->setIfExists('reviewspecificfeedback', $data ?? [], null);
        $this->setIfExists('section', $data ?? [], null);
        $this->setIfExists('showblocks', $data ?? [], null);
        $this->setIfExists('showuserpicture', $data ?? [], null);
        $this->setIfExists('shuffleanswers', $data ?? [], null);
        $this->setIfExists('subnet', $data ?? [], 'null');
        $this->setIfExists('sumgrades', $data ?? [], null);
        $this->setIfExists('timeclose', $data ?? [], null);
        $this->setIfExists('timecreated', $data ?? [], null);
        $this->setIfExists('timelimit', $data ?? [], null);
        $this->setIfExists('timemodified', $data ?? [], null);
        $this->setIfExists('timeopen', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowofflineattempts
     *
     * @return int|null
     */
    public function getAllowofflineattempts()
    {
        return $this->container['allowofflineattempts'];
    }

    /**
     * Sets allowofflineattempts
     *
     * @param int|null $allowofflineattempts Whether to allow the quiz to be attempted                                                                             offline in the mobile app
     *
     * @return self
     */
    public function setAllowofflineattempts($allowofflineattempts)
    {
        if (is_null($allowofflineattempts)) {
            throw new \InvalidArgumentException('non-nullable allowofflineattempts cannot be null');
        }
        $this->container['allowofflineattempts'] = $allowofflineattempts;

        return $this;
    }

    /**
     * Gets attemptonlast
     *
     * @return int|null
     */
    public function getAttemptonlast()
    {
        return $this->container['attemptonlast'];
    }

    /**
     * Sets attemptonlast
     *
     * @param int|null $attemptonlast Whether subsequent attempts start from the answer                                                                     to the previous attempt (1) or start blank (0).
     *
     * @return self
     */
    public function setAttemptonlast($attemptonlast)
    {
        if (is_null($attemptonlast)) {
            throw new \InvalidArgumentException('non-nullable attemptonlast cannot be null');
        }
        $this->container['attemptonlast'] = $attemptonlast;

        return $this;
    }

    /**
     * Gets attempts
     *
     * @return int|null
     */
    public function getAttempts()
    {
        return $this->container['attempts'];
    }

    /**
     * Sets attempts
     *
     * @param int|null $attempts The maximum number of attempts a student is allowed.
     *
     * @return self
     */
    public function setAttempts($attempts)
    {
        if (is_null($attempts)) {
            throw new \InvalidArgumentException('non-nullable attempts cannot be null');
        }
        $this->container['attempts'] = $attempts;

        return $this;
    }

    /**
     * Gets autosaveperiod
     *
     * @return int|null
     */
    public function getAutosaveperiod()
    {
        return $this->container['autosaveperiod'];
    }

    /**
     * Sets autosaveperiod
     *
     * @param int|null $autosaveperiod Auto-save delay
     *
     * @return self
     */
    public function setAutosaveperiod($autosaveperiod)
    {
        if (is_null($autosaveperiod)) {
            throw new \InvalidArgumentException('non-nullable autosaveperiod cannot be null');
        }
        $this->container['autosaveperiod'] = $autosaveperiod;

        return $this;
    }

    /**
     * Gets browsersecurity
     *
     * @return string|null
     */
    public function getBrowsersecurity()
    {
        return $this->container['browsersecurity'];
    }

    /**
     * Sets browsersecurity
     *
     * @param string|null $browsersecurity Restriciton on the browser the student must                                                                     use. E.g. 'securewindow'.
     *
     * @return self
     */
    public function setBrowsersecurity($browsersecurity)
    {
        if (is_null($browsersecurity)) {
            throw new \InvalidArgumentException('non-nullable browsersecurity cannot be null');
        }
        $this->container['browsersecurity'] = $browsersecurity;

        return $this;
    }

    /**
     * Gets canredoquestions
     *
     * @return int|null
     */
    public function getCanredoquestions()
    {
        return $this->container['canredoquestions'];
    }

    /**
     * Sets canredoquestions
     *
     * @param int|null $canredoquestions Allows students to redo any completed question                                                                         within a quiz attempt.
     *
     * @return self
     */
    public function setCanredoquestions($canredoquestions)
    {
        if (is_null($canredoquestions)) {
            throw new \InvalidArgumentException('non-nullable canredoquestions cannot be null');
        }
        $this->container['canredoquestions'] = $canredoquestions;

        return $this;
    }

    /**
     * Gets completionattemptsexhausted
     *
     * @return int|null
     */
    public function getCompletionattemptsexhausted()
    {
        return $this->container['completionattemptsexhausted'];
    }

    /**
     * Sets completionattemptsexhausted
     *
     * @param int|null $completionattemptsexhausted Mark quiz complete when the student has                                                                                 exhausted the maximum number of attempts
     *
     * @return self
     */
    public function setCompletionattemptsexhausted($completionattemptsexhausted)
    {
        if (is_null($completionattemptsexhausted)) {
            throw new \InvalidArgumentException('non-nullable completionattemptsexhausted cannot be null');
        }
        $this->container['completionattemptsexhausted'] = $completionattemptsexhausted;

        return $this;
    }

    /**
     * Gets completionpass
     *
     * @return int|null
     */
    public function getCompletionpass()
    {
        return $this->container['completionpass'];
    }

    /**
     * Sets completionpass
     *
     * @param int|null $completionpass Whether to require passing grade
     *
     * @return self
     */
    public function setCompletionpass($completionpass)
    {
        if (is_null($completionpass)) {
            throw new \InvalidArgumentException('non-nullable completionpass cannot be null');
        }
        $this->container['completionpass'] = $completionpass;

        return $this;
    }

    /**
     * Gets course
     *
     * @return int|null
     */
    public function getCourse()
    {
        return $this->container['course'];
    }

    /**
     * Sets course
     *
     * @param int|null $course Course id
     *
     * @return self
     */
    public function setCourse($course)
    {
        if (is_null($course)) {
            throw new \InvalidArgumentException('non-nullable course cannot be null');
        }
        $this->container['course'] = $course;

        return $this;
    }

    /**
     * Gets coursemodule
     *
     * @return int|null
     */
    public function getCoursemodule()
    {
        return $this->container['coursemodule'];
    }

    /**
     * Sets coursemodule
     *
     * @param int|null $coursemodule Course module id
     *
     * @return self
     */
    public function setCoursemodule($coursemodule)
    {
        if (is_null($coursemodule)) {
            throw new \InvalidArgumentException('non-nullable coursemodule cannot be null');
        }
        $this->container['coursemodule'] = $coursemodule;

        return $this;
    }

    /**
     * Gets decimalpoints
     *
     * @return int|null
     */
    public function getDecimalpoints()
    {
        return $this->container['decimalpoints'];
    }

    /**
     * Sets decimalpoints
     *
     * @param int|null $decimalpoints Number of decimal points to use when displaying                                                                     grades.
     *
     * @return self
     */
    public function setDecimalpoints($decimalpoints)
    {
        if (is_null($decimalpoints)) {
            throw new \InvalidArgumentException('non-nullable decimalpoints cannot be null');
        }
        $this->container['decimalpoints'] = $decimalpoints;

        return $this;
    }

    /**
     * Gets delay1
     *
     * @return int|null
     */
    public function getDelay1()
    {
        return $this->container['delay1'];
    }

    /**
     * Sets delay1
     *
     * @param int|null $delay1 Delay that must be left between the first and second attempt,                                                             in seconds.
     *
     * @return self
     */
    public function setDelay1($delay1)
    {
        if (is_null($delay1)) {
            throw new \InvalidArgumentException('non-nullable delay1 cannot be null');
        }
        $this->container['delay1'] = $delay1;

        return $this;
    }

    /**
     * Gets delay2
     *
     * @return int|null
     */
    public function getDelay2()
    {
        return $this->container['delay2'];
    }

    /**
     * Sets delay2
     *
     * @param int|null $delay2 Delay that must be left between the second and subsequent                                                             attempt, in seconds.
     *
     * @return self
     */
    public function setDelay2($delay2)
    {
        if (is_null($delay2)) {
            throw new \InvalidArgumentException('non-nullable delay2 cannot be null');
        }
        $this->container['delay2'] = $delay2;

        return $this;
    }

    /**
     * Gets graceperiod
     *
     * @return int|null
     */
    public function getGraceperiod()
    {
        return $this->container['graceperiod'];
    }

    /**
     * Sets graceperiod
     *
     * @param int|null $graceperiod The amount of time (in seconds) after the time limit                                                                 runs out during which attempts can still be submitted,                                                                 if overduehandling is set to allow it.
     *
     * @return self
     */
    public function setGraceperiod($graceperiod)
    {
        if (is_null($graceperiod)) {
            throw new \InvalidArgumentException('non-nullable graceperiod cannot be null');
        }
        $this->container['graceperiod'] = $graceperiod;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return float|null
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param float|null $grade The total that the quiz overall grade is scaled to be                                                             out of.
     *
     * @return self
     */
    public function setGrade($grade)
    {
        if (is_null($grade)) {
            throw new \InvalidArgumentException('non-nullable grade cannot be null');
        }
        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets grademethod
     *
     * @return int|null
     */
    public function getGrademethod()
    {
        return $this->container['grademethod'];
    }

    /**
     * Sets grademethod
     *
     * @param int|null $grademethod One of the values QUIZ_GRADEHIGHEST, QUIZ_GRADEAVERAGE,                                                                     QUIZ_ATTEMPTFIRST or QUIZ_ATTEMPTLAST.
     *
     * @return self
     */
    public function setGrademethod($grademethod)
    {
        if (is_null($grademethod)) {
            throw new \InvalidArgumentException('non-nullable grademethod cannot be null');
        }
        $this->container['grademethod'] = $grademethod;

        return $this;
    }

    /**
     * Gets groupingid
     *
     * @return int|null
     */
    public function getGroupingid()
    {
        return $this->container['groupingid'];
    }

    /**
     * Sets groupingid
     *
     * @param int|null $groupingid Group id
     *
     * @return self
     */
    public function setGroupingid($groupingid)
    {
        if (is_null($groupingid)) {
            throw new \InvalidArgumentException('non-nullable groupingid cannot be null');
        }
        $this->container['groupingid'] = $groupingid;

        return $this;
    }

    /**
     * Gets groupmode
     *
     * @return int|null
     */
    public function getGroupmode()
    {
        return $this->container['groupmode'];
    }

    /**
     * Sets groupmode
     *
     * @param int|null $groupmode Group mode
     *
     * @return self
     */
    public function setGroupmode($groupmode)
    {
        if (is_null($groupmode)) {
            throw new \InvalidArgumentException('non-nullable groupmode cannot be null');
        }
        $this->container['groupmode'] = $groupmode;

        return $this;
    }

    /**
     * Gets hasfeedback
     *
     * @return int|null
     */
    public function getHasfeedback()
    {
        return $this->container['hasfeedback'];
    }

    /**
     * Sets hasfeedback
     *
     * @param int|null $hasfeedback Whether the quiz has any non-blank feedback text
     *
     * @return self
     */
    public function setHasfeedback($hasfeedback)
    {
        if (is_null($hasfeedback)) {
            throw new \InvalidArgumentException('non-nullable hasfeedback cannot be null');
        }
        $this->container['hasfeedback'] = $hasfeedback;

        return $this;
    }

    /**
     * Gets hasquestions
     *
     * @return int|null
     */
    public function getHasquestions()
    {
        return $this->container['hasquestions'];
    }

    /**
     * Sets hasquestions
     *
     * @param int|null $hasquestions Whether the quiz has questions
     *
     * @return self
     */
    public function setHasquestions($hasquestions)
    {
        if (is_null($hasquestions)) {
            throw new \InvalidArgumentException('non-nullable hasquestions cannot be null');
        }
        $this->container['hasquestions'] = $hasquestions;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Activity instance id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets intro
     *
     * @return string|null
     */
    public function getIntro()
    {
        return $this->container['intro'];
    }

    /**
     * Sets intro
     *
     * @param string|null $intro Activity introduction
     *
     * @return self
     */
    public function setIntro($intro)
    {
        if (is_null($intro)) {
            throw new \InvalidArgumentException('non-nullable intro cannot be null');
        }
        $this->container['intro'] = $intro;

        return $this;
    }

    /**
     * Gets introfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null
     */
    public function getIntrofiles()
    {
        return $this->container['introfiles'];
    }

    /**
     * Sets introfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null $introfiles introfiles
     *
     * @return self
     */
    public function setIntrofiles($introfiles)
    {
        if (is_null($introfiles)) {
            throw new \InvalidArgumentException('non-nullable introfiles cannot be null');
        }
        $this->container['introfiles'] = $introfiles;

        return $this;
    }

    /**
     * Gets introformat
     *
     * @return int|null
     */
    public function getIntroformat()
    {
        return $this->container['introformat'];
    }

    /**
     * Sets introformat
     *
     * @param int|null $introformat intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setIntroformat($introformat)
    {
        if (is_null($introformat)) {
            throw new \InvalidArgumentException('non-nullable introformat cannot be null');
        }
        $this->container['introformat'] = $introformat;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang Forced activity language
     *
     * @return self
     */
    public function setLang($lang)
    {
        if (is_null($lang)) {
            throw new \InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Activity name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets navmethod
     *
     * @return string|null
     */
    public function getNavmethod()
    {
        return $this->container['navmethod'];
    }

    /**
     * Sets navmethod
     *
     * @param string|null $navmethod Any constraints on how the user is allowed to navigate                                                                 around the quiz. Currently recognised values are                                                                 'free' and 'seq'.
     *
     * @return self
     */
    public function setNavmethod($navmethod)
    {
        if (is_null($navmethod)) {
            throw new \InvalidArgumentException('non-nullable navmethod cannot be null');
        }
        $this->container['navmethod'] = $navmethod;

        return $this;
    }

    /**
     * Gets overduehandling
     *
     * @return string|null
     */
    public function getOverduehandling()
    {
        return $this->container['overduehandling'];
    }

    /**
     * Sets overduehandling
     *
     * @param string|null $overduehandling The method used to handle overdue attempts.                                                                     'autosubmit', 'graceperiod' or 'autoabandon'.
     *
     * @return self
     */
    public function setOverduehandling($overduehandling)
    {
        if (is_null($overduehandling)) {
            throw new \InvalidArgumentException('non-nullable overduehandling cannot be null');
        }
        $this->container['overduehandling'] = $overduehandling;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password A password that the student must enter before starting or                                                                 continuing a quiz attempt.
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets preferredbehaviour
     *
     * @return string|null
     */
    public function getPreferredbehaviour()
    {
        return $this->container['preferredbehaviour'];
    }

    /**
     * Sets preferredbehaviour
     *
     * @param string|null $preferredbehaviour The behaviour to ask questions to use.
     *
     * @return self
     */
    public function setPreferredbehaviour($preferredbehaviour)
    {
        if (is_null($preferredbehaviour)) {
            throw new \InvalidArgumentException('non-nullable preferredbehaviour cannot be null');
        }
        $this->container['preferredbehaviour'] = $preferredbehaviour;

        return $this;
    }

    /**
     * Gets questiondecimalpoints
     *
     * @return int|null
     */
    public function getQuestiondecimalpoints()
    {
        return $this->container['questiondecimalpoints'];
    }

    /**
     * Sets questiondecimalpoints
     *
     * @param int|null $questiondecimalpoints Number of decimal points to use when                                                                             displaying question grades.                                                                             (-1 means use decimalpoints.)
     *
     * @return self
     */
    public function setQuestiondecimalpoints($questiondecimalpoints)
    {
        if (is_null($questiondecimalpoints)) {
            throw new \InvalidArgumentException('non-nullable questiondecimalpoints cannot be null');
        }
        $this->container['questiondecimalpoints'] = $questiondecimalpoints;

        return $this;
    }

    /**
     * Gets questionsperpage
     *
     * @return int|null
     */
    public function getQuestionsperpage()
    {
        return $this->container['questionsperpage'];
    }

    /**
     * Sets questionsperpage
     *
     * @param int|null $questionsperpage How often to insert a page break when editing                                                                         the quiz, or when shuffling the question order.
     *
     * @return self
     */
    public function setQuestionsperpage($questionsperpage)
    {
        if (is_null($questionsperpage)) {
            throw new \InvalidArgumentException('non-nullable questionsperpage cannot be null');
        }
        $this->container['questionsperpage'] = $questionsperpage;

        return $this;
    }

    /**
     * Gets reviewattempt
     *
     * @return int|null
     */
    public function getReviewattempt()
    {
        return $this->container['reviewattempt'];
    }

    /**
     * Sets reviewattempt
     *
     * @param int|null $reviewattempt Whether users are allowed to review their quiz                                                                     attempts at various times. This is a bit field, decoded by the                                                                     \\mod_quiz\\question\\display_options class. It is formed by ORing                                                                     together the constants defined there.
     *
     * @return self
     */
    public function setReviewattempt($reviewattempt)
    {
        if (is_null($reviewattempt)) {
            throw new \InvalidArgumentException('non-nullable reviewattempt cannot be null');
        }
        $this->container['reviewattempt'] = $reviewattempt;

        return $this;
    }

    /**
     * Gets reviewcorrectness
     *
     * @return int|null
     */
    public function getReviewcorrectness()
    {
        return $this->container['reviewcorrectness'];
    }

    /**
     * Sets reviewcorrectness
     *
     * @param int|null $reviewcorrectness Whether users are allowed to review their quiz                                                        attempts at various times.A bit field, like reviewattempt.
     *
     * @return self
     */
    public function setReviewcorrectness($reviewcorrectness)
    {
        if (is_null($reviewcorrectness)) {
            throw new \InvalidArgumentException('non-nullable reviewcorrectness cannot be null');
        }
        $this->container['reviewcorrectness'] = $reviewcorrectness;

        return $this;
    }

    /**
     * Gets reviewgeneralfeedback
     *
     * @return int|null
     */
    public function getReviewgeneralfeedback()
    {
        return $this->container['reviewgeneralfeedback'];
    }

    /**
     * Sets reviewgeneralfeedback
     *
     * @param int|null $reviewgeneralfeedback Whether users are allowed to review their                                                                             quiz attempts at various times. A bit field, like                                                                             reviewattempt.
     *
     * @return self
     */
    public function setReviewgeneralfeedback($reviewgeneralfeedback)
    {
        if (is_null($reviewgeneralfeedback)) {
            throw new \InvalidArgumentException('non-nullable reviewgeneralfeedback cannot be null');
        }
        $this->container['reviewgeneralfeedback'] = $reviewgeneralfeedback;

        return $this;
    }

    /**
     * Gets reviewmarks
     *
     * @return int|null
     */
    public function getReviewmarks()
    {
        return $this->container['reviewmarks'];
    }

    /**
     * Sets reviewmarks
     *
     * @param int|null $reviewmarks Whether users are allowed to review their quiz attempts                                                                 at various times. A bit field, like reviewattempt.
     *
     * @return self
     */
    public function setReviewmarks($reviewmarks)
    {
        if (is_null($reviewmarks)) {
            throw new \InvalidArgumentException('non-nullable reviewmarks cannot be null');
        }
        $this->container['reviewmarks'] = $reviewmarks;

        return $this;
    }

    /**
     * Gets reviewmaxmarks
     *
     * @return int|null
     */
    public function getReviewmaxmarks()
    {
        return $this->container['reviewmaxmarks'];
    }

    /**
     * Sets reviewmaxmarks
     *
     * @param int|null $reviewmaxmarks Whether users are allowed to review their quiz                                                   attempts at various times. A bit field, like reviewattempt.
     *
     * @return self
     */
    public function setReviewmaxmarks($reviewmaxmarks)
    {
        if (is_null($reviewmaxmarks)) {
            throw new \InvalidArgumentException('non-nullable reviewmaxmarks cannot be null');
        }
        $this->container['reviewmaxmarks'] = $reviewmaxmarks;

        return $this;
    }

    /**
     * Gets reviewoverallfeedback
     *
     * @return int|null
     */
    public function getReviewoverallfeedback()
    {
        return $this->container['reviewoverallfeedback'];
    }

    /**
     * Sets reviewoverallfeedback
     *
     * @param int|null $reviewoverallfeedback Whether users are allowed to review their quiz                                                                             attempts at various times. A bit field, like                                                                             reviewattempt.
     *
     * @return self
     */
    public function setReviewoverallfeedback($reviewoverallfeedback)
    {
        if (is_null($reviewoverallfeedback)) {
            throw new \InvalidArgumentException('non-nullable reviewoverallfeedback cannot be null');
        }
        $this->container['reviewoverallfeedback'] = $reviewoverallfeedback;

        return $this;
    }

    /**
     * Gets reviewrightanswer
     *
     * @return int|null
     */
    public function getReviewrightanswer()
    {
        return $this->container['reviewrightanswer'];
    }

    /**
     * Sets reviewrightanswer
     *
     * @param int|null $reviewrightanswer Whether users are allowed to review their quiz                                                                         attempts at various times. A bit field, like                                                                         reviewattempt.
     *
     * @return self
     */
    public function setReviewrightanswer($reviewrightanswer)
    {
        if (is_null($reviewrightanswer)) {
            throw new \InvalidArgumentException('non-nullable reviewrightanswer cannot be null');
        }
        $this->container['reviewrightanswer'] = $reviewrightanswer;

        return $this;
    }

    /**
     * Gets reviewspecificfeedback
     *
     * @return int|null
     */
    public function getReviewspecificfeedback()
    {
        return $this->container['reviewspecificfeedback'];
    }

    /**
     * Sets reviewspecificfeedback
     *
     * @param int|null $reviewspecificfeedback Whether users are allowed to review their                                                                             quiz attempts at various times. A bit field, like                                                                             reviewattempt.
     *
     * @return self
     */
    public function setReviewspecificfeedback($reviewspecificfeedback)
    {
        if (is_null($reviewspecificfeedback)) {
            throw new \InvalidArgumentException('non-nullable reviewspecificfeedback cannot be null');
        }
        $this->container['reviewspecificfeedback'] = $reviewspecificfeedback;

        return $this;
    }

    /**
     * Gets section
     *
     * @return int|null
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param int|null $section Course section id
     *
     * @return self
     */
    public function setSection($section)
    {
        if (is_null($section)) {
            throw new \InvalidArgumentException('non-nullable section cannot be null');
        }
        $this->container['section'] = $section;

        return $this;
    }

    /**
     * Gets showblocks
     *
     * @return int|null
     */
    public function getShowblocks()
    {
        return $this->container['showblocks'];
    }

    /**
     * Sets showblocks
     *
     * @param int|null $showblocks Whether blocks should be shown on the attempt.php and                                                                 review.php pages.
     *
     * @return self
     */
    public function setShowblocks($showblocks)
    {
        if (is_null($showblocks)) {
            throw new \InvalidArgumentException('non-nullable showblocks cannot be null');
        }
        $this->container['showblocks'] = $showblocks;

        return $this;
    }

    /**
     * Gets showuserpicture
     *
     * @return int|null
     */
    public function getShowuserpicture()
    {
        return $this->container['showuserpicture'];
    }

    /**
     * Sets showuserpicture
     *
     * @param int|null $showuserpicture Option to show the user's picture during the                                                                     attempt and on the review page.
     *
     * @return self
     */
    public function setShowuserpicture($showuserpicture)
    {
        if (is_null($showuserpicture)) {
            throw new \InvalidArgumentException('non-nullable showuserpicture cannot be null');
        }
        $this->container['showuserpicture'] = $showuserpicture;

        return $this;
    }

    /**
     * Gets shuffleanswers
     *
     * @return int|null
     */
    public function getShuffleanswers()
    {
        return $this->container['shuffleanswers'];
    }

    /**
     * Sets shuffleanswers
     *
     * @param int|null $shuffleanswers Whether the parts of the question should be shuffled,                                                                     in those question types that support it.
     *
     * @return self
     */
    public function setShuffleanswers($shuffleanswers)
    {
        if (is_null($shuffleanswers)) {
            throw new \InvalidArgumentException('non-nullable shuffleanswers cannot be null');
        }
        $this->container['shuffleanswers'] = $shuffleanswers;

        return $this;
    }

    /**
     * Gets subnet
     *
     * @return string|null
     */
    public function getSubnet()
    {
        return $this->container['subnet'];
    }

    /**
     * Sets subnet
     *
     * @param string|null $subnet Used to restrict the IP addresses from which this quiz can                                                             be attempted. The format is as requried by the address_in_subnet                                                             function.
     *
     * @return self
     */
    public function setSubnet($subnet)
    {
        if (is_null($subnet)) {
            throw new \InvalidArgumentException('non-nullable subnet cannot be null');
        }
        $this->container['subnet'] = $subnet;

        return $this;
    }

    /**
     * Gets sumgrades
     *
     * @return float|null
     */
    public function getSumgrades()
    {
        return $this->container['sumgrades'];
    }

    /**
     * Sets sumgrades
     *
     * @param float|null $sumgrades The total of all the question instance maxmarks.
     *
     * @return self
     */
    public function setSumgrades($sumgrades)
    {
        if (is_null($sumgrades)) {
            throw new \InvalidArgumentException('non-nullable sumgrades cannot be null');
        }
        $this->container['sumgrades'] = $sumgrades;

        return $this;
    }

    /**
     * Gets timeclose
     *
     * @return int|null
     */
    public function getTimeclose()
    {
        return $this->container['timeclose'];
    }

    /**
     * Sets timeclose
     *
     * @param int|null $timeclose The time when this quiz closes. (0 = no restriction.)
     *
     * @return self
     */
    public function setTimeclose($timeclose)
    {
        if (is_null($timeclose)) {
            throw new \InvalidArgumentException('non-nullable timeclose cannot be null');
        }
        $this->container['timeclose'] = $timeclose;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return int|null
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param int|null $timecreated The time when the quiz was added to the course.
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets timelimit
     *
     * @return int|null
     */
    public function getTimelimit()
    {
        return $this->container['timelimit'];
    }

    /**
     * Sets timelimit
     *
     * @param int|null $timelimit The time limit for quiz attempts, in seconds.
     *
     * @return self
     */
    public function setTimelimit($timelimit)
    {
        if (is_null($timelimit)) {
            throw new \InvalidArgumentException('non-nullable timelimit cannot be null');
        }
        $this->container['timelimit'] = $timelimit;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified Last modified time.
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets timeopen
     *
     * @return int|null
     */
    public function getTimeopen()
    {
        return $this->container['timeopen'];
    }

    /**
     * Sets timeopen
     *
     * @param int|null $timeopen The time when this quiz opens. (0 = no restriction.)
     *
     * @return self
     */
    public function setTimeopen($timeopen)
    {
        if (is_null($timeopen)) {
            throw new \InvalidArgumentException('non-nullable timeopen cannot be null');
        }
        $this->container['timeopen'] = $timeopen;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool|null $visible Visible
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


