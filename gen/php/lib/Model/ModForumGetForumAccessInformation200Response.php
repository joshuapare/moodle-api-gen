<?php
/**
 * ModForumGetForumAccessInformation200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModForumGetForumAccessInformation200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModForumGetForumAccessInformation200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_forum_get_forum_access_information_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'canaddinstance' => 'bool',
        'canaddnews' => 'bool',
        'canaddquestion' => 'bool',
        'canallowforcesubscribe' => 'bool',
        'cancanmailnow' => 'bool',
        'cancanoverridecutoff' => 'bool',
        'cancanoverridediscussionlock' => 'bool',
        'cancanposttomygroups' => 'bool',
        'cancantogglefavourite' => 'bool',
        'cancreateattachment' => 'bool',
        'candeleteanypost' => 'bool',
        'candeleteownpost' => 'bool',
        'caneditanypost' => 'bool',
        'canexportdiscussion' => 'bool',
        'canexportforum' => 'bool',
        'canexportownpost' => 'bool',
        'canexportpost' => 'bool',
        'cangrade' => 'bool',
        'canmanagesubscriptions' => 'bool',
        'canmovediscussions' => 'bool',
        'canpindiscussions' => 'bool',
        'canpostprivatereply' => 'bool',
        'canpostwithoutthrottling' => 'bool',
        'canrate' => 'bool',
        'canreadprivatereplies' => 'bool',
        'canreplynews' => 'bool',
        'canreplypost' => 'bool',
        'cansplitdiscussions' => 'bool',
        'canstartdiscussion' => 'bool',
        'canviewallratings' => 'bool',
        'canviewanyrating' => 'bool',
        'canviewdiscussion' => 'bool',
        'canviewhiddentimedposts' => 'bool',
        'canviewqandawithoutposting' => 'bool',
        'canviewrating' => 'bool',
        'canviewsubscribers' => 'bool',
        'warnings' => '\OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'canaddinstance' => null,
        'canaddnews' => null,
        'canaddquestion' => null,
        'canallowforcesubscribe' => null,
        'cancanmailnow' => null,
        'cancanoverridecutoff' => null,
        'cancanoverridediscussionlock' => null,
        'cancanposttomygroups' => null,
        'cancantogglefavourite' => null,
        'cancreateattachment' => null,
        'candeleteanypost' => null,
        'candeleteownpost' => null,
        'caneditanypost' => null,
        'canexportdiscussion' => null,
        'canexportforum' => null,
        'canexportownpost' => null,
        'canexportpost' => null,
        'cangrade' => null,
        'canmanagesubscriptions' => null,
        'canmovediscussions' => null,
        'canpindiscussions' => null,
        'canpostprivatereply' => null,
        'canpostwithoutthrottling' => null,
        'canrate' => null,
        'canreadprivatereplies' => null,
        'canreplynews' => null,
        'canreplypost' => null,
        'cansplitdiscussions' => null,
        'canstartdiscussion' => null,
        'canviewallratings' => null,
        'canviewanyrating' => null,
        'canviewdiscussion' => null,
        'canviewhiddentimedposts' => null,
        'canviewqandawithoutposting' => null,
        'canviewrating' => null,
        'canviewsubscribers' => null,
        'warnings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'canaddinstance' => false,
        'canaddnews' => false,
        'canaddquestion' => false,
        'canallowforcesubscribe' => false,
        'cancanmailnow' => false,
        'cancanoverridecutoff' => false,
        'cancanoverridediscussionlock' => false,
        'cancanposttomygroups' => false,
        'cancantogglefavourite' => false,
        'cancreateattachment' => false,
        'candeleteanypost' => false,
        'candeleteownpost' => false,
        'caneditanypost' => false,
        'canexportdiscussion' => false,
        'canexportforum' => false,
        'canexportownpost' => false,
        'canexportpost' => false,
        'cangrade' => false,
        'canmanagesubscriptions' => false,
        'canmovediscussions' => false,
        'canpindiscussions' => false,
        'canpostprivatereply' => false,
        'canpostwithoutthrottling' => false,
        'canrate' => false,
        'canreadprivatereplies' => false,
        'canreplynews' => false,
        'canreplypost' => false,
        'cansplitdiscussions' => false,
        'canstartdiscussion' => false,
        'canviewallratings' => false,
        'canviewanyrating' => false,
        'canviewdiscussion' => false,
        'canviewhiddentimedposts' => false,
        'canviewqandawithoutposting' => false,
        'canviewrating' => false,
        'canviewsubscribers' => false,
        'warnings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canaddinstance' => 'canaddinstance',
        'canaddnews' => 'canaddnews',
        'canaddquestion' => 'canaddquestion',
        'canallowforcesubscribe' => 'canallowforcesubscribe',
        'cancanmailnow' => 'cancanmailnow',
        'cancanoverridecutoff' => 'cancanoverridecutoff',
        'cancanoverridediscussionlock' => 'cancanoverridediscussionlock',
        'cancanposttomygroups' => 'cancanposttomygroups',
        'cancantogglefavourite' => 'cancantogglefavourite',
        'cancreateattachment' => 'cancreateattachment',
        'candeleteanypost' => 'candeleteanypost',
        'candeleteownpost' => 'candeleteownpost',
        'caneditanypost' => 'caneditanypost',
        'canexportdiscussion' => 'canexportdiscussion',
        'canexportforum' => 'canexportforum',
        'canexportownpost' => 'canexportownpost',
        'canexportpost' => 'canexportpost',
        'cangrade' => 'cangrade',
        'canmanagesubscriptions' => 'canmanagesubscriptions',
        'canmovediscussions' => 'canmovediscussions',
        'canpindiscussions' => 'canpindiscussions',
        'canpostprivatereply' => 'canpostprivatereply',
        'canpostwithoutthrottling' => 'canpostwithoutthrottling',
        'canrate' => 'canrate',
        'canreadprivatereplies' => 'canreadprivatereplies',
        'canreplynews' => 'canreplynews',
        'canreplypost' => 'canreplypost',
        'cansplitdiscussions' => 'cansplitdiscussions',
        'canstartdiscussion' => 'canstartdiscussion',
        'canviewallratings' => 'canviewallratings',
        'canviewanyrating' => 'canviewanyrating',
        'canviewdiscussion' => 'canviewdiscussion',
        'canviewhiddentimedposts' => 'canviewhiddentimedposts',
        'canviewqandawithoutposting' => 'canviewqandawithoutposting',
        'canviewrating' => 'canviewrating',
        'canviewsubscribers' => 'canviewsubscribers',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canaddinstance' => 'setCanaddinstance',
        'canaddnews' => 'setCanaddnews',
        'canaddquestion' => 'setCanaddquestion',
        'canallowforcesubscribe' => 'setCanallowforcesubscribe',
        'cancanmailnow' => 'setCancanmailnow',
        'cancanoverridecutoff' => 'setCancanoverridecutoff',
        'cancanoverridediscussionlock' => 'setCancanoverridediscussionlock',
        'cancanposttomygroups' => 'setCancanposttomygroups',
        'cancantogglefavourite' => 'setCancantogglefavourite',
        'cancreateattachment' => 'setCancreateattachment',
        'candeleteanypost' => 'setCandeleteanypost',
        'candeleteownpost' => 'setCandeleteownpost',
        'caneditanypost' => 'setCaneditanypost',
        'canexportdiscussion' => 'setCanexportdiscussion',
        'canexportforum' => 'setCanexportforum',
        'canexportownpost' => 'setCanexportownpost',
        'canexportpost' => 'setCanexportpost',
        'cangrade' => 'setCangrade',
        'canmanagesubscriptions' => 'setCanmanagesubscriptions',
        'canmovediscussions' => 'setCanmovediscussions',
        'canpindiscussions' => 'setCanpindiscussions',
        'canpostprivatereply' => 'setCanpostprivatereply',
        'canpostwithoutthrottling' => 'setCanpostwithoutthrottling',
        'canrate' => 'setCanrate',
        'canreadprivatereplies' => 'setCanreadprivatereplies',
        'canreplynews' => 'setCanreplynews',
        'canreplypost' => 'setCanreplypost',
        'cansplitdiscussions' => 'setCansplitdiscussions',
        'canstartdiscussion' => 'setCanstartdiscussion',
        'canviewallratings' => 'setCanviewallratings',
        'canviewanyrating' => 'setCanviewanyrating',
        'canviewdiscussion' => 'setCanviewdiscussion',
        'canviewhiddentimedposts' => 'setCanviewhiddentimedposts',
        'canviewqandawithoutposting' => 'setCanviewqandawithoutposting',
        'canviewrating' => 'setCanviewrating',
        'canviewsubscribers' => 'setCanviewsubscribers',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canaddinstance' => 'getCanaddinstance',
        'canaddnews' => 'getCanaddnews',
        'canaddquestion' => 'getCanaddquestion',
        'canallowforcesubscribe' => 'getCanallowforcesubscribe',
        'cancanmailnow' => 'getCancanmailnow',
        'cancanoverridecutoff' => 'getCancanoverridecutoff',
        'cancanoverridediscussionlock' => 'getCancanoverridediscussionlock',
        'cancanposttomygroups' => 'getCancanposttomygroups',
        'cancantogglefavourite' => 'getCancantogglefavourite',
        'cancreateattachment' => 'getCancreateattachment',
        'candeleteanypost' => 'getCandeleteanypost',
        'candeleteownpost' => 'getCandeleteownpost',
        'caneditanypost' => 'getCaneditanypost',
        'canexportdiscussion' => 'getCanexportdiscussion',
        'canexportforum' => 'getCanexportforum',
        'canexportownpost' => 'getCanexportownpost',
        'canexportpost' => 'getCanexportpost',
        'cangrade' => 'getCangrade',
        'canmanagesubscriptions' => 'getCanmanagesubscriptions',
        'canmovediscussions' => 'getCanmovediscussions',
        'canpindiscussions' => 'getCanpindiscussions',
        'canpostprivatereply' => 'getCanpostprivatereply',
        'canpostwithoutthrottling' => 'getCanpostwithoutthrottling',
        'canrate' => 'getCanrate',
        'canreadprivatereplies' => 'getCanreadprivatereplies',
        'canreplynews' => 'getCanreplynews',
        'canreplypost' => 'getCanreplypost',
        'cansplitdiscussions' => 'getCansplitdiscussions',
        'canstartdiscussion' => 'getCanstartdiscussion',
        'canviewallratings' => 'getCanviewallratings',
        'canviewanyrating' => 'getCanviewanyrating',
        'canviewdiscussion' => 'getCanviewdiscussion',
        'canviewhiddentimedposts' => 'getCanviewhiddentimedposts',
        'canviewqandawithoutposting' => 'getCanviewqandawithoutposting',
        'canviewrating' => 'getCanviewrating',
        'canviewsubscribers' => 'getCanviewsubscribers',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('canaddinstance', $data ?? [], null);
        $this->setIfExists('canaddnews', $data ?? [], null);
        $this->setIfExists('canaddquestion', $data ?? [], null);
        $this->setIfExists('canallowforcesubscribe', $data ?? [], null);
        $this->setIfExists('cancanmailnow', $data ?? [], null);
        $this->setIfExists('cancanoverridecutoff', $data ?? [], null);
        $this->setIfExists('cancanoverridediscussionlock', $data ?? [], null);
        $this->setIfExists('cancanposttomygroups', $data ?? [], null);
        $this->setIfExists('cancantogglefavourite', $data ?? [], null);
        $this->setIfExists('cancreateattachment', $data ?? [], null);
        $this->setIfExists('candeleteanypost', $data ?? [], null);
        $this->setIfExists('candeleteownpost', $data ?? [], null);
        $this->setIfExists('caneditanypost', $data ?? [], null);
        $this->setIfExists('canexportdiscussion', $data ?? [], null);
        $this->setIfExists('canexportforum', $data ?? [], null);
        $this->setIfExists('canexportownpost', $data ?? [], null);
        $this->setIfExists('canexportpost', $data ?? [], null);
        $this->setIfExists('cangrade', $data ?? [], null);
        $this->setIfExists('canmanagesubscriptions', $data ?? [], null);
        $this->setIfExists('canmovediscussions', $data ?? [], null);
        $this->setIfExists('canpindiscussions', $data ?? [], null);
        $this->setIfExists('canpostprivatereply', $data ?? [], null);
        $this->setIfExists('canpostwithoutthrottling', $data ?? [], null);
        $this->setIfExists('canrate', $data ?? [], null);
        $this->setIfExists('canreadprivatereplies', $data ?? [], null);
        $this->setIfExists('canreplynews', $data ?? [], null);
        $this->setIfExists('canreplypost', $data ?? [], null);
        $this->setIfExists('cansplitdiscussions', $data ?? [], null);
        $this->setIfExists('canstartdiscussion', $data ?? [], null);
        $this->setIfExists('canviewallratings', $data ?? [], null);
        $this->setIfExists('canviewanyrating', $data ?? [], null);
        $this->setIfExists('canviewdiscussion', $data ?? [], null);
        $this->setIfExists('canviewhiddentimedposts', $data ?? [], null);
        $this->setIfExists('canviewqandawithoutposting', $data ?? [], null);
        $this->setIfExists('canviewrating', $data ?? [], null);
        $this->setIfExists('canviewsubscribers', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canaddinstance
     *
     * @return bool|null
     */
    public function getCanaddinstance()
    {
        return $this->container['canaddinstance'];
    }

    /**
     * Sets canaddinstance
     *
     * @param bool|null $canaddinstance Whether the user has the capability mod/forum:addinstance allowed.
     *
     * @return self
     */
    public function setCanaddinstance($canaddinstance)
    {
        if (is_null($canaddinstance)) {
            throw new \InvalidArgumentException('non-nullable canaddinstance cannot be null');
        }
        $this->container['canaddinstance'] = $canaddinstance;

        return $this;
    }

    /**
     * Gets canaddnews
     *
     * @return bool|null
     */
    public function getCanaddnews()
    {
        return $this->container['canaddnews'];
    }

    /**
     * Sets canaddnews
     *
     * @param bool|null $canaddnews Whether the user has the capability mod/forum:addnews allowed.
     *
     * @return self
     */
    public function setCanaddnews($canaddnews)
    {
        if (is_null($canaddnews)) {
            throw new \InvalidArgumentException('non-nullable canaddnews cannot be null');
        }
        $this->container['canaddnews'] = $canaddnews;

        return $this;
    }

    /**
     * Gets canaddquestion
     *
     * @return bool|null
     */
    public function getCanaddquestion()
    {
        return $this->container['canaddquestion'];
    }

    /**
     * Sets canaddquestion
     *
     * @param bool|null $canaddquestion Whether the user has the capability mod/forum:addquestion allowed.
     *
     * @return self
     */
    public function setCanaddquestion($canaddquestion)
    {
        if (is_null($canaddquestion)) {
            throw new \InvalidArgumentException('non-nullable canaddquestion cannot be null');
        }
        $this->container['canaddquestion'] = $canaddquestion;

        return $this;
    }

    /**
     * Gets canallowforcesubscribe
     *
     * @return bool|null
     */
    public function getCanallowforcesubscribe()
    {
        return $this->container['canallowforcesubscribe'];
    }

    /**
     * Sets canallowforcesubscribe
     *
     * @param bool|null $canallowforcesubscribe Whether the user has the capability mod/forum:allowforcesubscribe allowed.
     *
     * @return self
     */
    public function setCanallowforcesubscribe($canallowforcesubscribe)
    {
        if (is_null($canallowforcesubscribe)) {
            throw new \InvalidArgumentException('non-nullable canallowforcesubscribe cannot be null');
        }
        $this->container['canallowforcesubscribe'] = $canallowforcesubscribe;

        return $this;
    }

    /**
     * Gets cancanmailnow
     *
     * @return bool|null
     */
    public function getCancanmailnow()
    {
        return $this->container['cancanmailnow'];
    }

    /**
     * Sets cancanmailnow
     *
     * @param bool|null $cancanmailnow Whether the user has the capability mod/forum:canmailnow allowed.
     *
     * @return self
     */
    public function setCancanmailnow($cancanmailnow)
    {
        if (is_null($cancanmailnow)) {
            throw new \InvalidArgumentException('non-nullable cancanmailnow cannot be null');
        }
        $this->container['cancanmailnow'] = $cancanmailnow;

        return $this;
    }

    /**
     * Gets cancanoverridecutoff
     *
     * @return bool|null
     */
    public function getCancanoverridecutoff()
    {
        return $this->container['cancanoverridecutoff'];
    }

    /**
     * Sets cancanoverridecutoff
     *
     * @param bool|null $cancanoverridecutoff Whether the user has the capability mod/forum:canoverridecutoff allowed.
     *
     * @return self
     */
    public function setCancanoverridecutoff($cancanoverridecutoff)
    {
        if (is_null($cancanoverridecutoff)) {
            throw new \InvalidArgumentException('non-nullable cancanoverridecutoff cannot be null');
        }
        $this->container['cancanoverridecutoff'] = $cancanoverridecutoff;

        return $this;
    }

    /**
     * Gets cancanoverridediscussionlock
     *
     * @return bool|null
     */
    public function getCancanoverridediscussionlock()
    {
        return $this->container['cancanoverridediscussionlock'];
    }

    /**
     * Sets cancanoverridediscussionlock
     *
     * @param bool|null $cancanoverridediscussionlock Whether the user has the capability mod/forum:canoverridediscussionlock allowed.
     *
     * @return self
     */
    public function setCancanoverridediscussionlock($cancanoverridediscussionlock)
    {
        if (is_null($cancanoverridediscussionlock)) {
            throw new \InvalidArgumentException('non-nullable cancanoverridediscussionlock cannot be null');
        }
        $this->container['cancanoverridediscussionlock'] = $cancanoverridediscussionlock;

        return $this;
    }

    /**
     * Gets cancanposttomygroups
     *
     * @return bool|null
     */
    public function getCancanposttomygroups()
    {
        return $this->container['cancanposttomygroups'];
    }

    /**
     * Sets cancanposttomygroups
     *
     * @param bool|null $cancanposttomygroups Whether the user has the capability mod/forum:canposttomygroups allowed.
     *
     * @return self
     */
    public function setCancanposttomygroups($cancanposttomygroups)
    {
        if (is_null($cancanposttomygroups)) {
            throw new \InvalidArgumentException('non-nullable cancanposttomygroups cannot be null');
        }
        $this->container['cancanposttomygroups'] = $cancanposttomygroups;

        return $this;
    }

    /**
     * Gets cancantogglefavourite
     *
     * @return bool|null
     */
    public function getCancantogglefavourite()
    {
        return $this->container['cancantogglefavourite'];
    }

    /**
     * Sets cancantogglefavourite
     *
     * @param bool|null $cancantogglefavourite Whether the user has the capability mod/forum:cantogglefavourite allowed.
     *
     * @return self
     */
    public function setCancantogglefavourite($cancantogglefavourite)
    {
        if (is_null($cancantogglefavourite)) {
            throw new \InvalidArgumentException('non-nullable cancantogglefavourite cannot be null');
        }
        $this->container['cancantogglefavourite'] = $cancantogglefavourite;

        return $this;
    }

    /**
     * Gets cancreateattachment
     *
     * @return bool|null
     */
    public function getCancreateattachment()
    {
        return $this->container['cancreateattachment'];
    }

    /**
     * Sets cancreateattachment
     *
     * @param bool|null $cancreateattachment Whether the user has the capability mod/forum:createattachment allowed.
     *
     * @return self
     */
    public function setCancreateattachment($cancreateattachment)
    {
        if (is_null($cancreateattachment)) {
            throw new \InvalidArgumentException('non-nullable cancreateattachment cannot be null');
        }
        $this->container['cancreateattachment'] = $cancreateattachment;

        return $this;
    }

    /**
     * Gets candeleteanypost
     *
     * @return bool|null
     */
    public function getCandeleteanypost()
    {
        return $this->container['candeleteanypost'];
    }

    /**
     * Sets candeleteanypost
     *
     * @param bool|null $candeleteanypost Whether the user has the capability mod/forum:deleteanypost allowed.
     *
     * @return self
     */
    public function setCandeleteanypost($candeleteanypost)
    {
        if (is_null($candeleteanypost)) {
            throw new \InvalidArgumentException('non-nullable candeleteanypost cannot be null');
        }
        $this->container['candeleteanypost'] = $candeleteanypost;

        return $this;
    }

    /**
     * Gets candeleteownpost
     *
     * @return bool|null
     */
    public function getCandeleteownpost()
    {
        return $this->container['candeleteownpost'];
    }

    /**
     * Sets candeleteownpost
     *
     * @param bool|null $candeleteownpost Whether the user has the capability mod/forum:deleteownpost allowed.
     *
     * @return self
     */
    public function setCandeleteownpost($candeleteownpost)
    {
        if (is_null($candeleteownpost)) {
            throw new \InvalidArgumentException('non-nullable candeleteownpost cannot be null');
        }
        $this->container['candeleteownpost'] = $candeleteownpost;

        return $this;
    }

    /**
     * Gets caneditanypost
     *
     * @return bool|null
     */
    public function getCaneditanypost()
    {
        return $this->container['caneditanypost'];
    }

    /**
     * Sets caneditanypost
     *
     * @param bool|null $caneditanypost Whether the user has the capability mod/forum:editanypost allowed.
     *
     * @return self
     */
    public function setCaneditanypost($caneditanypost)
    {
        if (is_null($caneditanypost)) {
            throw new \InvalidArgumentException('non-nullable caneditanypost cannot be null');
        }
        $this->container['caneditanypost'] = $caneditanypost;

        return $this;
    }

    /**
     * Gets canexportdiscussion
     *
     * @return bool|null
     */
    public function getCanexportdiscussion()
    {
        return $this->container['canexportdiscussion'];
    }

    /**
     * Sets canexportdiscussion
     *
     * @param bool|null $canexportdiscussion Whether the user has the capability mod/forum:exportdiscussion allowed.
     *
     * @return self
     */
    public function setCanexportdiscussion($canexportdiscussion)
    {
        if (is_null($canexportdiscussion)) {
            throw new \InvalidArgumentException('non-nullable canexportdiscussion cannot be null');
        }
        $this->container['canexportdiscussion'] = $canexportdiscussion;

        return $this;
    }

    /**
     * Gets canexportforum
     *
     * @return bool|null
     */
    public function getCanexportforum()
    {
        return $this->container['canexportforum'];
    }

    /**
     * Sets canexportforum
     *
     * @param bool|null $canexportforum Whether the user has the capability mod/forum:exportforum allowed.
     *
     * @return self
     */
    public function setCanexportforum($canexportforum)
    {
        if (is_null($canexportforum)) {
            throw new \InvalidArgumentException('non-nullable canexportforum cannot be null');
        }
        $this->container['canexportforum'] = $canexportforum;

        return $this;
    }

    /**
     * Gets canexportownpost
     *
     * @return bool|null
     */
    public function getCanexportownpost()
    {
        return $this->container['canexportownpost'];
    }

    /**
     * Sets canexportownpost
     *
     * @param bool|null $canexportownpost Whether the user has the capability mod/forum:exportownpost allowed.
     *
     * @return self
     */
    public function setCanexportownpost($canexportownpost)
    {
        if (is_null($canexportownpost)) {
            throw new \InvalidArgumentException('non-nullable canexportownpost cannot be null');
        }
        $this->container['canexportownpost'] = $canexportownpost;

        return $this;
    }

    /**
     * Gets canexportpost
     *
     * @return bool|null
     */
    public function getCanexportpost()
    {
        return $this->container['canexportpost'];
    }

    /**
     * Sets canexportpost
     *
     * @param bool|null $canexportpost Whether the user has the capability mod/forum:exportpost allowed.
     *
     * @return self
     */
    public function setCanexportpost($canexportpost)
    {
        if (is_null($canexportpost)) {
            throw new \InvalidArgumentException('non-nullable canexportpost cannot be null');
        }
        $this->container['canexportpost'] = $canexportpost;

        return $this;
    }

    /**
     * Gets cangrade
     *
     * @return bool|null
     */
    public function getCangrade()
    {
        return $this->container['cangrade'];
    }

    /**
     * Sets cangrade
     *
     * @param bool|null $cangrade Whether the user has the capability mod/forum:grade allowed.
     *
     * @return self
     */
    public function setCangrade($cangrade)
    {
        if (is_null($cangrade)) {
            throw new \InvalidArgumentException('non-nullable cangrade cannot be null');
        }
        $this->container['cangrade'] = $cangrade;

        return $this;
    }

    /**
     * Gets canmanagesubscriptions
     *
     * @return bool|null
     */
    public function getCanmanagesubscriptions()
    {
        return $this->container['canmanagesubscriptions'];
    }

    /**
     * Sets canmanagesubscriptions
     *
     * @param bool|null $canmanagesubscriptions Whether the user has the capability mod/forum:managesubscriptions allowed.
     *
     * @return self
     */
    public function setCanmanagesubscriptions($canmanagesubscriptions)
    {
        if (is_null($canmanagesubscriptions)) {
            throw new \InvalidArgumentException('non-nullable canmanagesubscriptions cannot be null');
        }
        $this->container['canmanagesubscriptions'] = $canmanagesubscriptions;

        return $this;
    }

    /**
     * Gets canmovediscussions
     *
     * @return bool|null
     */
    public function getCanmovediscussions()
    {
        return $this->container['canmovediscussions'];
    }

    /**
     * Sets canmovediscussions
     *
     * @param bool|null $canmovediscussions Whether the user has the capability mod/forum:movediscussions allowed.
     *
     * @return self
     */
    public function setCanmovediscussions($canmovediscussions)
    {
        if (is_null($canmovediscussions)) {
            throw new \InvalidArgumentException('non-nullable canmovediscussions cannot be null');
        }
        $this->container['canmovediscussions'] = $canmovediscussions;

        return $this;
    }

    /**
     * Gets canpindiscussions
     *
     * @return bool|null
     */
    public function getCanpindiscussions()
    {
        return $this->container['canpindiscussions'];
    }

    /**
     * Sets canpindiscussions
     *
     * @param bool|null $canpindiscussions Whether the user has the capability mod/forum:pindiscussions allowed.
     *
     * @return self
     */
    public function setCanpindiscussions($canpindiscussions)
    {
        if (is_null($canpindiscussions)) {
            throw new \InvalidArgumentException('non-nullable canpindiscussions cannot be null');
        }
        $this->container['canpindiscussions'] = $canpindiscussions;

        return $this;
    }

    /**
     * Gets canpostprivatereply
     *
     * @return bool|null
     */
    public function getCanpostprivatereply()
    {
        return $this->container['canpostprivatereply'];
    }

    /**
     * Sets canpostprivatereply
     *
     * @param bool|null $canpostprivatereply Whether the user has the capability mod/forum:postprivatereply allowed.
     *
     * @return self
     */
    public function setCanpostprivatereply($canpostprivatereply)
    {
        if (is_null($canpostprivatereply)) {
            throw new \InvalidArgumentException('non-nullable canpostprivatereply cannot be null');
        }
        $this->container['canpostprivatereply'] = $canpostprivatereply;

        return $this;
    }

    /**
     * Gets canpostwithoutthrottling
     *
     * @return bool|null
     */
    public function getCanpostwithoutthrottling()
    {
        return $this->container['canpostwithoutthrottling'];
    }

    /**
     * Sets canpostwithoutthrottling
     *
     * @param bool|null $canpostwithoutthrottling Whether the user has the capability mod/forum:postwithoutthrottling allowed.
     *
     * @return self
     */
    public function setCanpostwithoutthrottling($canpostwithoutthrottling)
    {
        if (is_null($canpostwithoutthrottling)) {
            throw new \InvalidArgumentException('non-nullable canpostwithoutthrottling cannot be null');
        }
        $this->container['canpostwithoutthrottling'] = $canpostwithoutthrottling;

        return $this;
    }

    /**
     * Gets canrate
     *
     * @return bool|null
     */
    public function getCanrate()
    {
        return $this->container['canrate'];
    }

    /**
     * Sets canrate
     *
     * @param bool|null $canrate Whether the user has the capability mod/forum:rate allowed.
     *
     * @return self
     */
    public function setCanrate($canrate)
    {
        if (is_null($canrate)) {
            throw new \InvalidArgumentException('non-nullable canrate cannot be null');
        }
        $this->container['canrate'] = $canrate;

        return $this;
    }

    /**
     * Gets canreadprivatereplies
     *
     * @return bool|null
     */
    public function getCanreadprivatereplies()
    {
        return $this->container['canreadprivatereplies'];
    }

    /**
     * Sets canreadprivatereplies
     *
     * @param bool|null $canreadprivatereplies Whether the user has the capability mod/forum:readprivatereplies allowed.
     *
     * @return self
     */
    public function setCanreadprivatereplies($canreadprivatereplies)
    {
        if (is_null($canreadprivatereplies)) {
            throw new \InvalidArgumentException('non-nullable canreadprivatereplies cannot be null');
        }
        $this->container['canreadprivatereplies'] = $canreadprivatereplies;

        return $this;
    }

    /**
     * Gets canreplynews
     *
     * @return bool|null
     */
    public function getCanreplynews()
    {
        return $this->container['canreplynews'];
    }

    /**
     * Sets canreplynews
     *
     * @param bool|null $canreplynews Whether the user has the capability mod/forum:replynews allowed.
     *
     * @return self
     */
    public function setCanreplynews($canreplynews)
    {
        if (is_null($canreplynews)) {
            throw new \InvalidArgumentException('non-nullable canreplynews cannot be null');
        }
        $this->container['canreplynews'] = $canreplynews;

        return $this;
    }

    /**
     * Gets canreplypost
     *
     * @return bool|null
     */
    public function getCanreplypost()
    {
        return $this->container['canreplypost'];
    }

    /**
     * Sets canreplypost
     *
     * @param bool|null $canreplypost Whether the user has the capability mod/forum:replypost allowed.
     *
     * @return self
     */
    public function setCanreplypost($canreplypost)
    {
        if (is_null($canreplypost)) {
            throw new \InvalidArgumentException('non-nullable canreplypost cannot be null');
        }
        $this->container['canreplypost'] = $canreplypost;

        return $this;
    }

    /**
     * Gets cansplitdiscussions
     *
     * @return bool|null
     */
    public function getCansplitdiscussions()
    {
        return $this->container['cansplitdiscussions'];
    }

    /**
     * Sets cansplitdiscussions
     *
     * @param bool|null $cansplitdiscussions Whether the user has the capability mod/forum:splitdiscussions allowed.
     *
     * @return self
     */
    public function setCansplitdiscussions($cansplitdiscussions)
    {
        if (is_null($cansplitdiscussions)) {
            throw new \InvalidArgumentException('non-nullable cansplitdiscussions cannot be null');
        }
        $this->container['cansplitdiscussions'] = $cansplitdiscussions;

        return $this;
    }

    /**
     * Gets canstartdiscussion
     *
     * @return bool|null
     */
    public function getCanstartdiscussion()
    {
        return $this->container['canstartdiscussion'];
    }

    /**
     * Sets canstartdiscussion
     *
     * @param bool|null $canstartdiscussion Whether the user has the capability mod/forum:startdiscussion allowed.
     *
     * @return self
     */
    public function setCanstartdiscussion($canstartdiscussion)
    {
        if (is_null($canstartdiscussion)) {
            throw new \InvalidArgumentException('non-nullable canstartdiscussion cannot be null');
        }
        $this->container['canstartdiscussion'] = $canstartdiscussion;

        return $this;
    }

    /**
     * Gets canviewallratings
     *
     * @return bool|null
     */
    public function getCanviewallratings()
    {
        return $this->container['canviewallratings'];
    }

    /**
     * Sets canviewallratings
     *
     * @param bool|null $canviewallratings Whether the user has the capability mod/forum:viewallratings allowed.
     *
     * @return self
     */
    public function setCanviewallratings($canviewallratings)
    {
        if (is_null($canviewallratings)) {
            throw new \InvalidArgumentException('non-nullable canviewallratings cannot be null');
        }
        $this->container['canviewallratings'] = $canviewallratings;

        return $this;
    }

    /**
     * Gets canviewanyrating
     *
     * @return bool|null
     */
    public function getCanviewanyrating()
    {
        return $this->container['canviewanyrating'];
    }

    /**
     * Sets canviewanyrating
     *
     * @param bool|null $canviewanyrating Whether the user has the capability mod/forum:viewanyrating allowed.
     *
     * @return self
     */
    public function setCanviewanyrating($canviewanyrating)
    {
        if (is_null($canviewanyrating)) {
            throw new \InvalidArgumentException('non-nullable canviewanyrating cannot be null');
        }
        $this->container['canviewanyrating'] = $canviewanyrating;

        return $this;
    }

    /**
     * Gets canviewdiscussion
     *
     * @return bool|null
     */
    public function getCanviewdiscussion()
    {
        return $this->container['canviewdiscussion'];
    }

    /**
     * Sets canviewdiscussion
     *
     * @param bool|null $canviewdiscussion Whether the user has the capability mod/forum:viewdiscussion allowed.
     *
     * @return self
     */
    public function setCanviewdiscussion($canviewdiscussion)
    {
        if (is_null($canviewdiscussion)) {
            throw new \InvalidArgumentException('non-nullable canviewdiscussion cannot be null');
        }
        $this->container['canviewdiscussion'] = $canviewdiscussion;

        return $this;
    }

    /**
     * Gets canviewhiddentimedposts
     *
     * @return bool|null
     */
    public function getCanviewhiddentimedposts()
    {
        return $this->container['canviewhiddentimedposts'];
    }

    /**
     * Sets canviewhiddentimedposts
     *
     * @param bool|null $canviewhiddentimedposts Whether the user has the capability mod/forum:viewhiddentimedposts allowed.
     *
     * @return self
     */
    public function setCanviewhiddentimedposts($canviewhiddentimedposts)
    {
        if (is_null($canviewhiddentimedposts)) {
            throw new \InvalidArgumentException('non-nullable canviewhiddentimedposts cannot be null');
        }
        $this->container['canviewhiddentimedposts'] = $canviewhiddentimedposts;

        return $this;
    }

    /**
     * Gets canviewqandawithoutposting
     *
     * @return bool|null
     */
    public function getCanviewqandawithoutposting()
    {
        return $this->container['canviewqandawithoutposting'];
    }

    /**
     * Sets canviewqandawithoutposting
     *
     * @param bool|null $canviewqandawithoutposting Whether the user has the capability mod/forum:viewqandawithoutposting allowed.
     *
     * @return self
     */
    public function setCanviewqandawithoutposting($canviewqandawithoutposting)
    {
        if (is_null($canviewqandawithoutposting)) {
            throw new \InvalidArgumentException('non-nullable canviewqandawithoutposting cannot be null');
        }
        $this->container['canviewqandawithoutposting'] = $canviewqandawithoutposting;

        return $this;
    }

    /**
     * Gets canviewrating
     *
     * @return bool|null
     */
    public function getCanviewrating()
    {
        return $this->container['canviewrating'];
    }

    /**
     * Sets canviewrating
     *
     * @param bool|null $canviewrating Whether the user has the capability mod/forum:viewrating allowed.
     *
     * @return self
     */
    public function setCanviewrating($canviewrating)
    {
        if (is_null($canviewrating)) {
            throw new \InvalidArgumentException('non-nullable canviewrating cannot be null');
        }
        $this->container['canviewrating'] = $canviewrating;

        return $this;
    }

    /**
     * Gets canviewsubscribers
     *
     * @return bool|null
     */
    public function getCanviewsubscribers()
    {
        return $this->container['canviewsubscribers'];
    }

    /**
     * Sets canviewsubscribers
     *
     * @param bool|null $canviewsubscribers Whether the user has the capability mod/forum:viewsubscribers allowed.
     *
     * @return self
     */
    public function setCanviewsubscribers($canviewsubscribers)
    {
        if (is_null($canviewsubscribers)) {
            throw new \InvalidArgumentException('non-nullable canviewsubscribers cannot be null');
        }
        $this->container['canviewsubscribers'] = $canviewsubscribers;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null $warnings warnings
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


