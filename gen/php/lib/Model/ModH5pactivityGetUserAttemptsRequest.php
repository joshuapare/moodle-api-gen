<?php
/**
 * ModH5pactivityGetUserAttemptsRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModH5pactivityGetUserAttemptsRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModH5pactivityGetUserAttemptsRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_h5pactivity_get_user_attempts_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'firstinitial' => 'string',
        'h5pactivityid' => 'int',
        'lastinitial' => 'string',
        'page' => 'int',
        'perpage' => 'int',
        'sortorder' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'firstinitial' => null,
        'h5pactivityid' => null,
        'lastinitial' => null,
        'page' => null,
        'perpage' => null,
        'sortorder' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'firstinitial' => false,
        'h5pactivityid' => false,
        'lastinitial' => false,
        'page' => false,
        'perpage' => false,
        'sortorder' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'firstinitial' => 'firstinitial',
        'h5pactivityid' => 'h5pactivityid',
        'lastinitial' => 'lastinitial',
        'page' => 'page',
        'perpage' => 'perpage',
        'sortorder' => 'sortorder'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'firstinitial' => 'setFirstinitial',
        'h5pactivityid' => 'setH5pactivityid',
        'lastinitial' => 'setLastinitial',
        'page' => 'setPage',
        'perpage' => 'setPerpage',
        'sortorder' => 'setSortorder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'firstinitial' => 'getFirstinitial',
        'h5pactivityid' => 'getH5pactivityid',
        'lastinitial' => 'getLastinitial',
        'page' => 'getPage',
        'perpage' => 'getPerpage',
        'sortorder' => 'getSortorder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('firstinitial', $data ?? [], '');
        $this->setIfExists('h5pactivityid', $data ?? [], null);
        $this->setIfExists('lastinitial', $data ?? [], '');
        $this->setIfExists('page', $data ?? [], -1);
        $this->setIfExists('perpage', $data ?? [], 0);
        $this->setIfExists('sortorder', $data ?? [], 'id ASC');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['h5pactivityid'] === null) {
            $invalidProperties[] = "'h5pactivityid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets firstinitial
     *
     * @return string|null
     */
    public function getFirstinitial()
    {
        return $this->container['firstinitial'];
    }

    /**
     * Sets firstinitial
     *
     * @param string|null $firstinitial Users whose first name starts with $firstinitial
     *
     * @return self
     */
    public function setFirstinitial($firstinitial)
    {
        if (is_null($firstinitial)) {
            throw new \InvalidArgumentException('non-nullable firstinitial cannot be null');
        }
        $this->container['firstinitial'] = $firstinitial;

        return $this;
    }

    /**
     * Gets h5pactivityid
     *
     * @return int
     */
    public function getH5pactivityid()
    {
        return $this->container['h5pactivityid'];
    }

    /**
     * Sets h5pactivityid
     *
     * @param int $h5pactivityid h5p activity instance id
     *
     * @return self
     */
    public function setH5pactivityid($h5pactivityid)
    {
        if (is_null($h5pactivityid)) {
            throw new \InvalidArgumentException('non-nullable h5pactivityid cannot be null');
        }
        $this->container['h5pactivityid'] = $h5pactivityid;

        return $this;
    }

    /**
     * Gets lastinitial
     *
     * @return string|null
     */
    public function getLastinitial()
    {
        return $this->container['lastinitial'];
    }

    /**
     * Sets lastinitial
     *
     * @param string|null $lastinitial Users whose last name starts with $lastinitial
     *
     * @return self
     */
    public function setLastinitial($lastinitial)
    {
        if (is_null($lastinitial)) {
            throw new \InvalidArgumentException('non-nullable lastinitial cannot be null');
        }
        $this->container['lastinitial'] = $lastinitial;

        return $this;
    }

    /**
     * Gets page
     *
     * @return int|null
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int|null $page current page
     *
     * @return self
     */
    public function setPage($page)
    {
        if (is_null($page)) {
            throw new \InvalidArgumentException('non-nullable page cannot be null');
        }
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets perpage
     *
     * @return int|null
     */
    public function getPerpage()
    {
        return $this->container['perpage'];
    }

    /**
     * Sets perpage
     *
     * @param int|null $perpage items per page
     *
     * @return self
     */
    public function setPerpage($perpage)
    {
        if (is_null($perpage)) {
            throw new \InvalidArgumentException('non-nullable perpage cannot be null');
        }
        $this->container['perpage'] = $perpage;

        return $this;
    }

    /**
     * Gets sortorder
     *
     * @return string|null
     */
    public function getSortorder()
    {
        return $this->container['sortorder'];
    }

    /**
     * Sets sortorder
     *
     * @param string|null $sortorder sort by either user id, firstname or lastname (with optional asc/desc)
     *
     * @return self
     */
    public function setSortorder($sortorder)
    {
        if (is_null($sortorder)) {
            throw new \InvalidArgumentException('non-nullable sortorder cannot be null');
        }
        $this->container['sortorder'] = $sortorder;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


