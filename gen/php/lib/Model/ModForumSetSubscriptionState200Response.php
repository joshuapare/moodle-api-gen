<?php
/**
 * ModForumSetSubscriptionState200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModForumSetSubscriptionState200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModForumSetSubscriptionState200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_forum_set_subscription_state_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'capabilities' => '\OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseCapabilities',
        'firstpostid' => 'int',
        'forumid' => 'int',
        'group' => '\OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseGroup',
        'id' => 'int',
        'istimelocked' => 'bool',
        'locked' => 'bool',
        'name' => 'string',
        'pinned' => 'bool',
        'timed' => '\OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseTimed',
        'times' => '\OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseTimes',
        'urls' => '\OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseUrls',
        'userstate' => '\OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseUserstate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'capabilities' => null,
        'firstpostid' => null,
        'forumid' => null,
        'group' => null,
        'id' => null,
        'istimelocked' => null,
        'locked' => null,
        'name' => null,
        'pinned' => null,
        'timed' => null,
        'times' => null,
        'urls' => null,
        'userstate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'capabilities' => false,
        'firstpostid' => false,
        'forumid' => false,
        'group' => false,
        'id' => false,
        'istimelocked' => false,
        'locked' => false,
        'name' => false,
        'pinned' => false,
        'timed' => false,
        'times' => false,
        'urls' => false,
        'userstate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'capabilities' => 'capabilities',
        'firstpostid' => 'firstpostid',
        'forumid' => 'forumid',
        'group' => 'group',
        'id' => 'id',
        'istimelocked' => 'istimelocked',
        'locked' => 'locked',
        'name' => 'name',
        'pinned' => 'pinned',
        'timed' => 'timed',
        'times' => 'times',
        'urls' => 'urls',
        'userstate' => 'userstate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'capabilities' => 'setCapabilities',
        'firstpostid' => 'setFirstpostid',
        'forumid' => 'setForumid',
        'group' => 'setGroup',
        'id' => 'setId',
        'istimelocked' => 'setIstimelocked',
        'locked' => 'setLocked',
        'name' => 'setName',
        'pinned' => 'setPinned',
        'timed' => 'setTimed',
        'times' => 'setTimes',
        'urls' => 'setUrls',
        'userstate' => 'setUserstate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'capabilities' => 'getCapabilities',
        'firstpostid' => 'getFirstpostid',
        'forumid' => 'getForumid',
        'group' => 'getGroup',
        'id' => 'getId',
        'istimelocked' => 'getIstimelocked',
        'locked' => 'getLocked',
        'name' => 'getName',
        'pinned' => 'getPinned',
        'timed' => 'getTimed',
        'times' => 'getTimes',
        'urls' => 'getUrls',
        'userstate' => 'getUserstate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('capabilities', $data ?? [], null);
        $this->setIfExists('firstpostid', $data ?? [], null);
        $this->setIfExists('forumid', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('istimelocked', $data ?? [], null);
        $this->setIfExists('locked', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('pinned', $data ?? [], null);
        $this->setIfExists('timed', $data ?? [], null);
        $this->setIfExists('times', $data ?? [], null);
        $this->setIfExists('urls', $data ?? [], null);
        $this->setIfExists('userstate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['capabilities'] === null) {
            $invalidProperties[] = "'capabilities' can't be null";
        }
        if ($this->container['firstpostid'] === null) {
            $invalidProperties[] = "'firstpostid' can't be null";
        }
        if ($this->container['forumid'] === null) {
            $invalidProperties[] = "'forumid' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['istimelocked'] === null) {
            $invalidProperties[] = "'istimelocked' can't be null";
        }
        if ($this->container['locked'] === null) {
            $invalidProperties[] = "'locked' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['pinned'] === null) {
            $invalidProperties[] = "'pinned' can't be null";
        }
        if ($this->container['timed'] === null) {
            $invalidProperties[] = "'timed' can't be null";
        }
        if ($this->container['times'] === null) {
            $invalidProperties[] = "'times' can't be null";
        }
        if ($this->container['urls'] === null) {
            $invalidProperties[] = "'urls' can't be null";
        }
        if ($this->container['userstate'] === null) {
            $invalidProperties[] = "'userstate' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets capabilities
     *
     * @return \OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseCapabilities
     */
    public function getCapabilities()
    {
        return $this->container['capabilities'];
    }

    /**
     * Sets capabilities
     *
     * @param \OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseCapabilities $capabilities capabilities
     *
     * @return self
     */
    public function setCapabilities($capabilities)
    {
        if (is_null($capabilities)) {
            throw new \InvalidArgumentException('non-nullable capabilities cannot be null');
        }
        $this->container['capabilities'] = $capabilities;

        return $this;
    }

    /**
     * Gets firstpostid
     *
     * @return int
     */
    public function getFirstpostid()
    {
        return $this->container['firstpostid'];
    }

    /**
     * Sets firstpostid
     *
     * @param int $firstpostid firstpostid
     *
     * @return self
     */
    public function setFirstpostid($firstpostid)
    {
        if (is_null($firstpostid)) {
            throw new \InvalidArgumentException('non-nullable firstpostid cannot be null');
        }
        $this->container['firstpostid'] = $firstpostid;

        return $this;
    }

    /**
     * Gets forumid
     *
     * @return int
     */
    public function getForumid()
    {
        return $this->container['forumid'];
    }

    /**
     * Sets forumid
     *
     * @param int $forumid forumid
     *
     * @return self
     */
    public function setForumid($forumid)
    {
        if (is_null($forumid)) {
            throw new \InvalidArgumentException('non-nullable forumid cannot be null');
        }
        $this->container['forumid'] = $forumid;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseGroup|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseGroup|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets istimelocked
     *
     * @return bool
     */
    public function getIstimelocked()
    {
        return $this->container['istimelocked'];
    }

    /**
     * Sets istimelocked
     *
     * @param bool $istimelocked istimelocked
     *
     * @return self
     */
    public function setIstimelocked($istimelocked)
    {
        if (is_null($istimelocked)) {
            throw new \InvalidArgumentException('non-nullable istimelocked cannot be null');
        }
        $this->container['istimelocked'] = $istimelocked;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked locked
     *
     * @return self
     */
    public function setLocked($locked)
    {
        if (is_null($locked)) {
            throw new \InvalidArgumentException('non-nullable locked cannot be null');
        }
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pinned
     *
     * @return bool
     */
    public function getPinned()
    {
        return $this->container['pinned'];
    }

    /**
     * Sets pinned
     *
     * @param bool $pinned pinned
     *
     * @return self
     */
    public function setPinned($pinned)
    {
        if (is_null($pinned)) {
            throw new \InvalidArgumentException('non-nullable pinned cannot be null');
        }
        $this->container['pinned'] = $pinned;

        return $this;
    }

    /**
     * Gets timed
     *
     * @return \OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseTimed
     */
    public function getTimed()
    {
        return $this->container['timed'];
    }

    /**
     * Sets timed
     *
     * @param \OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseTimed $timed timed
     *
     * @return self
     */
    public function setTimed($timed)
    {
        if (is_null($timed)) {
            throw new \InvalidArgumentException('non-nullable timed cannot be null');
        }
        $this->container['timed'] = $timed;

        return $this;
    }

    /**
     * Gets times
     *
     * @return \OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseTimes
     */
    public function getTimes()
    {
        return $this->container['times'];
    }

    /**
     * Sets times
     *
     * @param \OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseTimes $times times
     *
     * @return self
     */
    public function setTimes($times)
    {
        if (is_null($times)) {
            throw new \InvalidArgumentException('non-nullable times cannot be null');
        }
        $this->container['times'] = $times;

        return $this;
    }

    /**
     * Gets urls
     *
     * @return \OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseUrls
     */
    public function getUrls()
    {
        return $this->container['urls'];
    }

    /**
     * Sets urls
     *
     * @param \OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseUrls $urls urls
     *
     * @return self
     */
    public function setUrls($urls)
    {
        if (is_null($urls)) {
            throw new \InvalidArgumentException('non-nullable urls cannot be null');
        }
        $this->container['urls'] = $urls;

        return $this;
    }

    /**
     * Gets userstate
     *
     * @return \OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseUserstate
     */
    public function getUserstate()
    {
        return $this->container['userstate'];
    }

    /**
     * Sets userstate
     *
     * @param \OpenAPI\Client\Model\ModForumSetSubscriptionState200ResponseUserstate $userstate userstate
     *
     * @return self
     */
    public function setUserstate($userstate)
    {
        if (is_null($userstate)) {
            throw new \InvalidArgumentException('non-nullable userstate cannot be null');
        }
        $this->container['userstate'] = $userstate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


