<?php
/**
 * CoreCalendarGetCalendarDayView200ResponseEventsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreCalendarGetCalendarDayView200ResponseEventsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreCalendarGetCalendarDayView200ResponseEventsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_calendar_get_calendar_day_view_200_response_events_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'action' => '\OpenAPI\Client\Model\CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction',
        'activityname' => 'string',
        'activitystr' => 'string',
        'candelete' => 'bool',
        'canedit' => 'bool',
        'category' => '\OpenAPI\Client\Model\CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory',
        'categoryid' => 'int',
        'component' => 'string',
        'course' => '\OpenAPI\Client\Model\CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse',
        'deleteurl' => 'string',
        'description' => 'string',
        'descriptionformat' => 'int',
        'draggable' => 'bool',
        'editurl' => 'string',
        'eventcount' => 'int',
        'eventtype' => 'string',
        'formattedlocation' => 'string',
        'formattedtime' => 'string',
        'groupid' => 'int',
        'groupname' => 'string',
        'icon' => '\OpenAPI\Client\Model\CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon',
        'id' => 'int',
        'instance' => 'int',
        'isactionevent' => 'bool',
        'iscategoryevent' => 'bool',
        'iscourseevent' => 'bool',
        'islastday' => 'bool',
        'location' => 'string',
        'maxdayerror' => 'string',
        'maxdaytimestamp' => 'int',
        'mindayerror' => 'string',
        'mindaytimestamp' => 'int',
        'modulename' => 'string',
        'name' => 'string',
        'normalisedeventtype' => 'string',
        'normalisedeventtypetext' => 'string',
        'overdue' => 'bool',
        'popupname' => 'string',
        'purpose' => 'string',
        'repeatid' => 'int',
        'subscription' => '\OpenAPI\Client\Model\CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription',
        'timeduration' => 'int',
        'timemodified' => 'int',
        'timesort' => 'int',
        'timestart' => 'int',
        'timeusermidnight' => 'int',
        'url' => 'string',
        'userid' => 'int',
        'viewurl' => 'string',
        'visible' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'action' => null,
        'activityname' => null,
        'activitystr' => null,
        'candelete' => null,
        'canedit' => null,
        'category' => null,
        'categoryid' => null,
        'component' => null,
        'course' => null,
        'deleteurl' => null,
        'description' => null,
        'descriptionformat' => null,
        'draggable' => null,
        'editurl' => null,
        'eventcount' => null,
        'eventtype' => null,
        'formattedlocation' => null,
        'formattedtime' => null,
        'groupid' => null,
        'groupname' => null,
        'icon' => null,
        'id' => null,
        'instance' => null,
        'isactionevent' => null,
        'iscategoryevent' => null,
        'iscourseevent' => null,
        'islastday' => null,
        'location' => null,
        'maxdayerror' => null,
        'maxdaytimestamp' => null,
        'mindayerror' => null,
        'mindaytimestamp' => null,
        'modulename' => null,
        'name' => null,
        'normalisedeventtype' => null,
        'normalisedeventtypetext' => null,
        'overdue' => null,
        'popupname' => null,
        'purpose' => null,
        'repeatid' => null,
        'subscription' => null,
        'timeduration' => null,
        'timemodified' => null,
        'timesort' => null,
        'timestart' => null,
        'timeusermidnight' => null,
        'url' => null,
        'userid' => null,
        'viewurl' => null,
        'visible' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'action' => false,
        'activityname' => false,
        'activitystr' => false,
        'candelete' => false,
        'canedit' => false,
        'category' => false,
        'categoryid' => false,
        'component' => false,
        'course' => false,
        'deleteurl' => false,
        'description' => false,
        'descriptionformat' => false,
        'draggable' => false,
        'editurl' => false,
        'eventcount' => false,
        'eventtype' => false,
        'formattedlocation' => false,
        'formattedtime' => false,
        'groupid' => false,
        'groupname' => false,
        'icon' => false,
        'id' => false,
        'instance' => false,
        'isactionevent' => false,
        'iscategoryevent' => false,
        'iscourseevent' => false,
        'islastday' => false,
        'location' => false,
        'maxdayerror' => false,
        'maxdaytimestamp' => false,
        'mindayerror' => false,
        'mindaytimestamp' => false,
        'modulename' => false,
        'name' => false,
        'normalisedeventtype' => false,
        'normalisedeventtypetext' => false,
        'overdue' => false,
        'popupname' => false,
        'purpose' => false,
        'repeatid' => false,
        'subscription' => false,
        'timeduration' => false,
        'timemodified' => false,
        'timesort' => false,
        'timestart' => false,
        'timeusermidnight' => false,
        'url' => false,
        'userid' => false,
        'viewurl' => false,
        'visible' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'action',
        'activityname' => 'activityname',
        'activitystr' => 'activitystr',
        'candelete' => 'candelete',
        'canedit' => 'canedit',
        'category' => 'category',
        'categoryid' => 'categoryid',
        'component' => 'component',
        'course' => 'course',
        'deleteurl' => 'deleteurl',
        'description' => 'description',
        'descriptionformat' => 'descriptionformat',
        'draggable' => 'draggable',
        'editurl' => 'editurl',
        'eventcount' => 'eventcount',
        'eventtype' => 'eventtype',
        'formattedlocation' => 'formattedlocation',
        'formattedtime' => 'formattedtime',
        'groupid' => 'groupid',
        'groupname' => 'groupname',
        'icon' => 'icon',
        'id' => 'id',
        'instance' => 'instance',
        'isactionevent' => 'isactionevent',
        'iscategoryevent' => 'iscategoryevent',
        'iscourseevent' => 'iscourseevent',
        'islastday' => 'islastday',
        'location' => 'location',
        'maxdayerror' => 'maxdayerror',
        'maxdaytimestamp' => 'maxdaytimestamp',
        'mindayerror' => 'mindayerror',
        'mindaytimestamp' => 'mindaytimestamp',
        'modulename' => 'modulename',
        'name' => 'name',
        'normalisedeventtype' => 'normalisedeventtype',
        'normalisedeventtypetext' => 'normalisedeventtypetext',
        'overdue' => 'overdue',
        'popupname' => 'popupname',
        'purpose' => 'purpose',
        'repeatid' => 'repeatid',
        'subscription' => 'subscription',
        'timeduration' => 'timeduration',
        'timemodified' => 'timemodified',
        'timesort' => 'timesort',
        'timestart' => 'timestart',
        'timeusermidnight' => 'timeusermidnight',
        'url' => 'url',
        'userid' => 'userid',
        'viewurl' => 'viewurl',
        'visible' => 'visible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'activityname' => 'setActivityname',
        'activitystr' => 'setActivitystr',
        'candelete' => 'setCandelete',
        'canedit' => 'setCanedit',
        'category' => 'setCategory',
        'categoryid' => 'setCategoryid',
        'component' => 'setComponent',
        'course' => 'setCourse',
        'deleteurl' => 'setDeleteurl',
        'description' => 'setDescription',
        'descriptionformat' => 'setDescriptionformat',
        'draggable' => 'setDraggable',
        'editurl' => 'setEditurl',
        'eventcount' => 'setEventcount',
        'eventtype' => 'setEventtype',
        'formattedlocation' => 'setFormattedlocation',
        'formattedtime' => 'setFormattedtime',
        'groupid' => 'setGroupid',
        'groupname' => 'setGroupname',
        'icon' => 'setIcon',
        'id' => 'setId',
        'instance' => 'setInstance',
        'isactionevent' => 'setIsactionevent',
        'iscategoryevent' => 'setIscategoryevent',
        'iscourseevent' => 'setIscourseevent',
        'islastday' => 'setIslastday',
        'location' => 'setLocation',
        'maxdayerror' => 'setMaxdayerror',
        'maxdaytimestamp' => 'setMaxdaytimestamp',
        'mindayerror' => 'setMindayerror',
        'mindaytimestamp' => 'setMindaytimestamp',
        'modulename' => 'setModulename',
        'name' => 'setName',
        'normalisedeventtype' => 'setNormalisedeventtype',
        'normalisedeventtypetext' => 'setNormalisedeventtypetext',
        'overdue' => 'setOverdue',
        'popupname' => 'setPopupname',
        'purpose' => 'setPurpose',
        'repeatid' => 'setRepeatid',
        'subscription' => 'setSubscription',
        'timeduration' => 'setTimeduration',
        'timemodified' => 'setTimemodified',
        'timesort' => 'setTimesort',
        'timestart' => 'setTimestart',
        'timeusermidnight' => 'setTimeusermidnight',
        'url' => 'setUrl',
        'userid' => 'setUserid',
        'viewurl' => 'setViewurl',
        'visible' => 'setVisible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'activityname' => 'getActivityname',
        'activitystr' => 'getActivitystr',
        'candelete' => 'getCandelete',
        'canedit' => 'getCanedit',
        'category' => 'getCategory',
        'categoryid' => 'getCategoryid',
        'component' => 'getComponent',
        'course' => 'getCourse',
        'deleteurl' => 'getDeleteurl',
        'description' => 'getDescription',
        'descriptionformat' => 'getDescriptionformat',
        'draggable' => 'getDraggable',
        'editurl' => 'getEditurl',
        'eventcount' => 'getEventcount',
        'eventtype' => 'getEventtype',
        'formattedlocation' => 'getFormattedlocation',
        'formattedtime' => 'getFormattedtime',
        'groupid' => 'getGroupid',
        'groupname' => 'getGroupname',
        'icon' => 'getIcon',
        'id' => 'getId',
        'instance' => 'getInstance',
        'isactionevent' => 'getIsactionevent',
        'iscategoryevent' => 'getIscategoryevent',
        'iscourseevent' => 'getIscourseevent',
        'islastday' => 'getIslastday',
        'location' => 'getLocation',
        'maxdayerror' => 'getMaxdayerror',
        'maxdaytimestamp' => 'getMaxdaytimestamp',
        'mindayerror' => 'getMindayerror',
        'mindaytimestamp' => 'getMindaytimestamp',
        'modulename' => 'getModulename',
        'name' => 'getName',
        'normalisedeventtype' => 'getNormalisedeventtype',
        'normalisedeventtypetext' => 'getNormalisedeventtypetext',
        'overdue' => 'getOverdue',
        'popupname' => 'getPopupname',
        'purpose' => 'getPurpose',
        'repeatid' => 'getRepeatid',
        'subscription' => 'getSubscription',
        'timeduration' => 'getTimeduration',
        'timemodified' => 'getTimemodified',
        'timesort' => 'getTimesort',
        'timestart' => 'getTimestart',
        'timeusermidnight' => 'getTimeusermidnight',
        'url' => 'getUrl',
        'userid' => 'getUserid',
        'viewurl' => 'getViewurl',
        'visible' => 'getVisible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('activityname', $data ?? [], null);
        $this->setIfExists('activitystr', $data ?? [], null);
        $this->setIfExists('candelete', $data ?? [], null);
        $this->setIfExists('canedit', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('categoryid', $data ?? [], null);
        $this->setIfExists('component', $data ?? [], null);
        $this->setIfExists('course', $data ?? [], null);
        $this->setIfExists('deleteurl', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('descriptionformat', $data ?? [], 1);
        $this->setIfExists('draggable', $data ?? [], false);
        $this->setIfExists('editurl', $data ?? [], null);
        $this->setIfExists('eventcount', $data ?? [], null);
        $this->setIfExists('eventtype', $data ?? [], null);
        $this->setIfExists('formattedlocation', $data ?? [], null);
        $this->setIfExists('formattedtime', $data ?? [], null);
        $this->setIfExists('groupid', $data ?? [], null);
        $this->setIfExists('groupname', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('instance', $data ?? [], null);
        $this->setIfExists('isactionevent', $data ?? [], null);
        $this->setIfExists('iscategoryevent', $data ?? [], null);
        $this->setIfExists('iscourseevent', $data ?? [], null);
        $this->setIfExists('islastday', $data ?? [], false);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('maxdayerror', $data ?? [], 'null');
        $this->setIfExists('maxdaytimestamp', $data ?? [], null);
        $this->setIfExists('mindayerror', $data ?? [], 'null');
        $this->setIfExists('mindaytimestamp', $data ?? [], null);
        $this->setIfExists('modulename', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('normalisedeventtype', $data ?? [], null);
        $this->setIfExists('normalisedeventtypetext', $data ?? [], null);
        $this->setIfExists('overdue', $data ?? [], false);
        $this->setIfExists('popupname', $data ?? [], 'null');
        $this->setIfExists('purpose', $data ?? [], null);
        $this->setIfExists('repeatid', $data ?? [], null);
        $this->setIfExists('subscription', $data ?? [], null);
        $this->setIfExists('timeduration', $data ?? [], null);
        $this->setIfExists('timemodified', $data ?? [], null);
        $this->setIfExists('timesort', $data ?? [], null);
        $this->setIfExists('timestart', $data ?? [], null);
        $this->setIfExists('timeusermidnight', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('userid', $data ?? [], null);
        $this->setIfExists('viewurl', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return \OpenAPI\Client\Model\CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param \OpenAPI\Client\Model\CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerAction|null $action action
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets activityname
     *
     * @return string|null
     */
    public function getActivityname()
    {
        return $this->container['activityname'];
    }

    /**
     * Sets activityname
     *
     * @param string|null $activityname activityname
     *
     * @return self
     */
    public function setActivityname($activityname)
    {
        if (is_null($activityname)) {
            throw new \InvalidArgumentException('non-nullable activityname cannot be null');
        }
        $this->container['activityname'] = $activityname;

        return $this;
    }

    /**
     * Gets activitystr
     *
     * @return string|null
     */
    public function getActivitystr()
    {
        return $this->container['activitystr'];
    }

    /**
     * Sets activitystr
     *
     * @param string|null $activitystr activitystr
     *
     * @return self
     */
    public function setActivitystr($activitystr)
    {
        if (is_null($activitystr)) {
            throw new \InvalidArgumentException('non-nullable activitystr cannot be null');
        }
        $this->container['activitystr'] = $activitystr;

        return $this;
    }

    /**
     * Gets candelete
     *
     * @return bool|null
     */
    public function getCandelete()
    {
        return $this->container['candelete'];
    }

    /**
     * Sets candelete
     *
     * @param bool|null $candelete candelete
     *
     * @return self
     */
    public function setCandelete($candelete)
    {
        if (is_null($candelete)) {
            throw new \InvalidArgumentException('non-nullable candelete cannot be null');
        }
        $this->container['candelete'] = $candelete;

        return $this;
    }

    /**
     * Gets canedit
     *
     * @return bool|null
     */
    public function getCanedit()
    {
        return $this->container['canedit'];
    }

    /**
     * Sets canedit
     *
     * @param bool|null $canedit canedit
     *
     * @return self
     */
    public function setCanedit($canedit)
    {
        if (is_null($canedit)) {
            throw new \InvalidArgumentException('non-nullable canedit cannot be null');
        }
        $this->container['canedit'] = $canedit;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \OpenAPI\Client\Model\CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \OpenAPI\Client\Model\CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCategory|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets categoryid
     *
     * @return int|null
     */
    public function getCategoryid()
    {
        return $this->container['categoryid'];
    }

    /**
     * Sets categoryid
     *
     * @param int|null $categoryid categoryid
     *
     * @return self
     */
    public function setCategoryid($categoryid)
    {
        if (is_null($categoryid)) {
            throw new \InvalidArgumentException('non-nullable categoryid cannot be null');
        }
        $this->container['categoryid'] = $categoryid;

        return $this;
    }

    /**
     * Gets component
     *
     * @return string|null
     */
    public function getComponent()
    {
        return $this->container['component'];
    }

    /**
     * Sets component
     *
     * @param string|null $component component
     *
     * @return self
     */
    public function setComponent($component)
    {
        if (is_null($component)) {
            throw new \InvalidArgumentException('non-nullable component cannot be null');
        }
        $this->container['component'] = $component;

        return $this;
    }

    /**
     * Gets course
     *
     * @return \OpenAPI\Client\Model\CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse|null
     */
    public function getCourse()
    {
        return $this->container['course'];
    }

    /**
     * Sets course
     *
     * @param \OpenAPI\Client\Model\CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse|null $course course
     *
     * @return self
     */
    public function setCourse($course)
    {
        if (is_null($course)) {
            throw new \InvalidArgumentException('non-nullable course cannot be null');
        }
        $this->container['course'] = $course;

        return $this;
    }

    /**
     * Gets deleteurl
     *
     * @return string|null
     */
    public function getDeleteurl()
    {
        return $this->container['deleteurl'];
    }

    /**
     * Sets deleteurl
     *
     * @param string|null $deleteurl deleteurl
     *
     * @return self
     */
    public function setDeleteurl($deleteurl)
    {
        if (is_null($deleteurl)) {
            throw new \InvalidArgumentException('non-nullable deleteurl cannot be null');
        }
        $this->container['deleteurl'] = $deleteurl;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets descriptionformat
     *
     * @return int|null
     */
    public function getDescriptionformat()
    {
        return $this->container['descriptionformat'];
    }

    /**
     * Sets descriptionformat
     *
     * @param int|null $descriptionformat description format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setDescriptionformat($descriptionformat)
    {
        if (is_null($descriptionformat)) {
            throw new \InvalidArgumentException('non-nullable descriptionformat cannot be null');
        }
        $this->container['descriptionformat'] = $descriptionformat;

        return $this;
    }

    /**
     * Gets draggable
     *
     * @return bool|null
     */
    public function getDraggable()
    {
        return $this->container['draggable'];
    }

    /**
     * Sets draggable
     *
     * @param bool|null $draggable draggable
     *
     * @return self
     */
    public function setDraggable($draggable)
    {
        if (is_null($draggable)) {
            throw new \InvalidArgumentException('non-nullable draggable cannot be null');
        }
        $this->container['draggable'] = $draggable;

        return $this;
    }

    /**
     * Gets editurl
     *
     * @return string|null
     */
    public function getEditurl()
    {
        return $this->container['editurl'];
    }

    /**
     * Sets editurl
     *
     * @param string|null $editurl editurl
     *
     * @return self
     */
    public function setEditurl($editurl)
    {
        if (is_null($editurl)) {
            throw new \InvalidArgumentException('non-nullable editurl cannot be null');
        }
        $this->container['editurl'] = $editurl;

        return $this;
    }

    /**
     * Gets eventcount
     *
     * @return int|null
     */
    public function getEventcount()
    {
        return $this->container['eventcount'];
    }

    /**
     * Sets eventcount
     *
     * @param int|null $eventcount eventcount
     *
     * @return self
     */
    public function setEventcount($eventcount)
    {
        if (is_null($eventcount)) {
            throw new \InvalidArgumentException('non-nullable eventcount cannot be null');
        }
        $this->container['eventcount'] = $eventcount;

        return $this;
    }

    /**
     * Gets eventtype
     *
     * @return string|null
     */
    public function getEventtype()
    {
        return $this->container['eventtype'];
    }

    /**
     * Sets eventtype
     *
     * @param string|null $eventtype eventtype
     *
     * @return self
     */
    public function setEventtype($eventtype)
    {
        if (is_null($eventtype)) {
            throw new \InvalidArgumentException('non-nullable eventtype cannot be null');
        }
        $this->container['eventtype'] = $eventtype;

        return $this;
    }

    /**
     * Gets formattedlocation
     *
     * @return string|null
     */
    public function getFormattedlocation()
    {
        return $this->container['formattedlocation'];
    }

    /**
     * Sets formattedlocation
     *
     * @param string|null $formattedlocation formattedlocation
     *
     * @return self
     */
    public function setFormattedlocation($formattedlocation)
    {
        if (is_null($formattedlocation)) {
            throw new \InvalidArgumentException('non-nullable formattedlocation cannot be null');
        }
        $this->container['formattedlocation'] = $formattedlocation;

        return $this;
    }

    /**
     * Gets formattedtime
     *
     * @return string|null
     */
    public function getFormattedtime()
    {
        return $this->container['formattedtime'];
    }

    /**
     * Sets formattedtime
     *
     * @param string|null $formattedtime formattedtime
     *
     * @return self
     */
    public function setFormattedtime($formattedtime)
    {
        if (is_null($formattedtime)) {
            throw new \InvalidArgumentException('non-nullable formattedtime cannot be null');
        }
        $this->container['formattedtime'] = $formattedtime;

        return $this;
    }

    /**
     * Gets groupid
     *
     * @return int|null
     */
    public function getGroupid()
    {
        return $this->container['groupid'];
    }

    /**
     * Sets groupid
     *
     * @param int|null $groupid groupid
     *
     * @return self
     */
    public function setGroupid($groupid)
    {
        if (is_null($groupid)) {
            throw new \InvalidArgumentException('non-nullable groupid cannot be null');
        }
        $this->container['groupid'] = $groupid;

        return $this;
    }

    /**
     * Gets groupname
     *
     * @return string|null
     */
    public function getGroupname()
    {
        return $this->container['groupname'];
    }

    /**
     * Sets groupname
     *
     * @param string|null $groupname groupname
     *
     * @return self
     */
    public function setGroupname($groupname)
    {
        if (is_null($groupname)) {
            throw new \InvalidArgumentException('non-nullable groupname cannot be null');
        }
        $this->container['groupname'] = $groupname;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return \OpenAPI\Client\Model\CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param \OpenAPI\Client\Model\CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerIcon|null $icon icon
     *
     * @return self
     */
    public function setIcon($icon)
    {
        if (is_null($icon)) {
            throw new \InvalidArgumentException('non-nullable icon cannot be null');
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets instance
     *
     * @return int|null
     */
    public function getInstance()
    {
        return $this->container['instance'];
    }

    /**
     * Sets instance
     *
     * @param int|null $instance instance
     *
     * @return self
     */
    public function setInstance($instance)
    {
        if (is_null($instance)) {
            throw new \InvalidArgumentException('non-nullable instance cannot be null');
        }
        $this->container['instance'] = $instance;

        return $this;
    }

    /**
     * Gets isactionevent
     *
     * @return bool|null
     */
    public function getIsactionevent()
    {
        return $this->container['isactionevent'];
    }

    /**
     * Sets isactionevent
     *
     * @param bool|null $isactionevent isactionevent
     *
     * @return self
     */
    public function setIsactionevent($isactionevent)
    {
        if (is_null($isactionevent)) {
            throw new \InvalidArgumentException('non-nullable isactionevent cannot be null');
        }
        $this->container['isactionevent'] = $isactionevent;

        return $this;
    }

    /**
     * Gets iscategoryevent
     *
     * @return bool|null
     */
    public function getIscategoryevent()
    {
        return $this->container['iscategoryevent'];
    }

    /**
     * Sets iscategoryevent
     *
     * @param bool|null $iscategoryevent iscategoryevent
     *
     * @return self
     */
    public function setIscategoryevent($iscategoryevent)
    {
        if (is_null($iscategoryevent)) {
            throw new \InvalidArgumentException('non-nullable iscategoryevent cannot be null');
        }
        $this->container['iscategoryevent'] = $iscategoryevent;

        return $this;
    }

    /**
     * Gets iscourseevent
     *
     * @return bool|null
     */
    public function getIscourseevent()
    {
        return $this->container['iscourseevent'];
    }

    /**
     * Sets iscourseevent
     *
     * @param bool|null $iscourseevent iscourseevent
     *
     * @return self
     */
    public function setIscourseevent($iscourseevent)
    {
        if (is_null($iscourseevent)) {
            throw new \InvalidArgumentException('non-nullable iscourseevent cannot be null');
        }
        $this->container['iscourseevent'] = $iscourseevent;

        return $this;
    }

    /**
     * Gets islastday
     *
     * @return bool|null
     */
    public function getIslastday()
    {
        return $this->container['islastday'];
    }

    /**
     * Sets islastday
     *
     * @param bool|null $islastday islastday
     *
     * @return self
     */
    public function setIslastday($islastday)
    {
        if (is_null($islastday)) {
            throw new \InvalidArgumentException('non-nullable islastday cannot be null');
        }
        $this->container['islastday'] = $islastday;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets maxdayerror
     *
     * @return string|null
     */
    public function getMaxdayerror()
    {
        return $this->container['maxdayerror'];
    }

    /**
     * Sets maxdayerror
     *
     * @param string|null $maxdayerror maxdayerror
     *
     * @return self
     */
    public function setMaxdayerror($maxdayerror)
    {
        if (is_null($maxdayerror)) {
            throw new \InvalidArgumentException('non-nullable maxdayerror cannot be null');
        }
        $this->container['maxdayerror'] = $maxdayerror;

        return $this;
    }

    /**
     * Gets maxdaytimestamp
     *
     * @return int|null
     */
    public function getMaxdaytimestamp()
    {
        return $this->container['maxdaytimestamp'];
    }

    /**
     * Sets maxdaytimestamp
     *
     * @param int|null $maxdaytimestamp maxdaytimestamp
     *
     * @return self
     */
    public function setMaxdaytimestamp($maxdaytimestamp)
    {
        if (is_null($maxdaytimestamp)) {
            throw new \InvalidArgumentException('non-nullable maxdaytimestamp cannot be null');
        }
        $this->container['maxdaytimestamp'] = $maxdaytimestamp;

        return $this;
    }

    /**
     * Gets mindayerror
     *
     * @return string|null
     */
    public function getMindayerror()
    {
        return $this->container['mindayerror'];
    }

    /**
     * Sets mindayerror
     *
     * @param string|null $mindayerror mindayerror
     *
     * @return self
     */
    public function setMindayerror($mindayerror)
    {
        if (is_null($mindayerror)) {
            throw new \InvalidArgumentException('non-nullable mindayerror cannot be null');
        }
        $this->container['mindayerror'] = $mindayerror;

        return $this;
    }

    /**
     * Gets mindaytimestamp
     *
     * @return int|null
     */
    public function getMindaytimestamp()
    {
        return $this->container['mindaytimestamp'];
    }

    /**
     * Sets mindaytimestamp
     *
     * @param int|null $mindaytimestamp mindaytimestamp
     *
     * @return self
     */
    public function setMindaytimestamp($mindaytimestamp)
    {
        if (is_null($mindaytimestamp)) {
            throw new \InvalidArgumentException('non-nullable mindaytimestamp cannot be null');
        }
        $this->container['mindaytimestamp'] = $mindaytimestamp;

        return $this;
    }

    /**
     * Gets modulename
     *
     * @return string|null
     */
    public function getModulename()
    {
        return $this->container['modulename'];
    }

    /**
     * Sets modulename
     *
     * @param string|null $modulename modulename
     *
     * @return self
     */
    public function setModulename($modulename)
    {
        if (is_null($modulename)) {
            throw new \InvalidArgumentException('non-nullable modulename cannot be null');
        }
        $this->container['modulename'] = $modulename;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets normalisedeventtype
     *
     * @return string|null
     */
    public function getNormalisedeventtype()
    {
        return $this->container['normalisedeventtype'];
    }

    /**
     * Sets normalisedeventtype
     *
     * @param string|null $normalisedeventtype normalisedeventtype
     *
     * @return self
     */
    public function setNormalisedeventtype($normalisedeventtype)
    {
        if (is_null($normalisedeventtype)) {
            throw new \InvalidArgumentException('non-nullable normalisedeventtype cannot be null');
        }
        $this->container['normalisedeventtype'] = $normalisedeventtype;

        return $this;
    }

    /**
     * Gets normalisedeventtypetext
     *
     * @return string|null
     */
    public function getNormalisedeventtypetext()
    {
        return $this->container['normalisedeventtypetext'];
    }

    /**
     * Sets normalisedeventtypetext
     *
     * @param string|null $normalisedeventtypetext normalisedeventtypetext
     *
     * @return self
     */
    public function setNormalisedeventtypetext($normalisedeventtypetext)
    {
        if (is_null($normalisedeventtypetext)) {
            throw new \InvalidArgumentException('non-nullable normalisedeventtypetext cannot be null');
        }
        $this->container['normalisedeventtypetext'] = $normalisedeventtypetext;

        return $this;
    }

    /**
     * Gets overdue
     *
     * @return bool|null
     */
    public function getOverdue()
    {
        return $this->container['overdue'];
    }

    /**
     * Sets overdue
     *
     * @param bool|null $overdue overdue
     *
     * @return self
     */
    public function setOverdue($overdue)
    {
        if (is_null($overdue)) {
            throw new \InvalidArgumentException('non-nullable overdue cannot be null');
        }
        $this->container['overdue'] = $overdue;

        return $this;
    }

    /**
     * Gets popupname
     *
     * @return string|null
     */
    public function getPopupname()
    {
        return $this->container['popupname'];
    }

    /**
     * Sets popupname
     *
     * @param string|null $popupname popupname
     *
     * @return self
     */
    public function setPopupname($popupname)
    {
        if (is_null($popupname)) {
            throw new \InvalidArgumentException('non-nullable popupname cannot be null');
        }
        $this->container['popupname'] = $popupname;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string|null
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string|null $purpose purpose
     *
     * @return self
     */
    public function setPurpose($purpose)
    {
        if (is_null($purpose)) {
            throw new \InvalidArgumentException('non-nullable purpose cannot be null');
        }
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets repeatid
     *
     * @return int|null
     */
    public function getRepeatid()
    {
        return $this->container['repeatid'];
    }

    /**
     * Sets repeatid
     *
     * @param int|null $repeatid repeatid
     *
     * @return self
     */
    public function setRepeatid($repeatid)
    {
        if (is_null($repeatid)) {
            throw new \InvalidArgumentException('non-nullable repeatid cannot be null');
        }
        $this->container['repeatid'] = $repeatid;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return \OpenAPI\Client\Model\CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription|null
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param \OpenAPI\Client\Model\CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerSubscription|null $subscription subscription
     *
     * @return self
     */
    public function setSubscription($subscription)
    {
        if (is_null($subscription)) {
            throw new \InvalidArgumentException('non-nullable subscription cannot be null');
        }
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets timeduration
     *
     * @return int|null
     */
    public function getTimeduration()
    {
        return $this->container['timeduration'];
    }

    /**
     * Sets timeduration
     *
     * @param int|null $timeduration timeduration
     *
     * @return self
     */
    public function setTimeduration($timeduration)
    {
        if (is_null($timeduration)) {
            throw new \InvalidArgumentException('non-nullable timeduration cannot be null');
        }
        $this->container['timeduration'] = $timeduration;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified timemodified
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets timesort
     *
     * @return int|null
     */
    public function getTimesort()
    {
        return $this->container['timesort'];
    }

    /**
     * Sets timesort
     *
     * @param int|null $timesort timesort
     *
     * @return self
     */
    public function setTimesort($timesort)
    {
        if (is_null($timesort)) {
            throw new \InvalidArgumentException('non-nullable timesort cannot be null');
        }
        $this->container['timesort'] = $timesort;

        return $this;
    }

    /**
     * Gets timestart
     *
     * @return int|null
     */
    public function getTimestart()
    {
        return $this->container['timestart'];
    }

    /**
     * Sets timestart
     *
     * @param int|null $timestart timestart
     *
     * @return self
     */
    public function setTimestart($timestart)
    {
        if (is_null($timestart)) {
            throw new \InvalidArgumentException('non-nullable timestart cannot be null');
        }
        $this->container['timestart'] = $timestart;

        return $this;
    }

    /**
     * Gets timeusermidnight
     *
     * @return int|null
     */
    public function getTimeusermidnight()
    {
        return $this->container['timeusermidnight'];
    }

    /**
     * Sets timeusermidnight
     *
     * @param int|null $timeusermidnight timeusermidnight
     *
     * @return self
     */
    public function setTimeusermidnight($timeusermidnight)
    {
        if (is_null($timeusermidnight)) {
            throw new \InvalidArgumentException('non-nullable timeusermidnight cannot be null');
        }
        $this->container['timeusermidnight'] = $timeusermidnight;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets userid
     *
     * @return int|null
     */
    public function getUserid()
    {
        return $this->container['userid'];
    }

    /**
     * Sets userid
     *
     * @param int|null $userid userid
     *
     * @return self
     */
    public function setUserid($userid)
    {
        if (is_null($userid)) {
            throw new \InvalidArgumentException('non-nullable userid cannot be null');
        }
        $this->container['userid'] = $userid;

        return $this;
    }

    /**
     * Gets viewurl
     *
     * @return string|null
     */
    public function getViewurl()
    {
        return $this->container['viewurl'];
    }

    /**
     * Sets viewurl
     *
     * @param string|null $viewurl viewurl
     *
     * @return self
     */
    public function setViewurl($viewurl)
    {
        if (is_null($viewurl)) {
            throw new \InvalidArgumentException('non-nullable viewurl cannot be null');
        }
        $this->container['viewurl'] = $viewurl;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return int|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param int|null $visible visible
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


