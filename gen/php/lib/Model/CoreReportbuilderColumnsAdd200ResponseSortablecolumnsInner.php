<?php
/**
 * CoreReportbuilderColumnsAdd200ResponseSortablecolumnsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreReportbuilderColumnsAdd200ResponseSortablecolumnsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreReportbuilderColumnsAdd200ResponseSortablecolumnsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_reportbuilder_columns_add_200_response_sortablecolumns_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'heading' => 'string',
        'id' => 'int',
        'movetitle' => 'string',
        'sortdirection' => 'int',
        'sortenabled' => 'bool',
        'sortenabledtitle' => 'string',
        'sorticon' => '\OpenAPI\Client\Model\CoreReportbuilderColumnsAdd200ResponseSortablecolumnsInnerSorticon',
        'sortorder' => 'int',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'heading' => null,
        'id' => null,
        'movetitle' => null,
        'sortdirection' => null,
        'sortenabled' => null,
        'sortenabledtitle' => null,
        'sorticon' => null,
        'sortorder' => null,
        'title' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'heading' => false,
        'id' => false,
        'movetitle' => false,
        'sortdirection' => false,
        'sortenabled' => false,
        'sortenabledtitle' => false,
        'sorticon' => false,
        'sortorder' => false,
        'title' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'heading' => 'heading',
        'id' => 'id',
        'movetitle' => 'movetitle',
        'sortdirection' => 'sortdirection',
        'sortenabled' => 'sortenabled',
        'sortenabledtitle' => 'sortenabledtitle',
        'sorticon' => 'sorticon',
        'sortorder' => 'sortorder',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'heading' => 'setHeading',
        'id' => 'setId',
        'movetitle' => 'setMovetitle',
        'sortdirection' => 'setSortdirection',
        'sortenabled' => 'setSortenabled',
        'sortenabledtitle' => 'setSortenabledtitle',
        'sorticon' => 'setSorticon',
        'sortorder' => 'setSortorder',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'heading' => 'getHeading',
        'id' => 'getId',
        'movetitle' => 'getMovetitle',
        'sortdirection' => 'getSortdirection',
        'sortenabled' => 'getSortenabled',
        'sortenabledtitle' => 'getSortenabledtitle',
        'sorticon' => 'getSorticon',
        'sortorder' => 'getSortorder',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('heading', $data ?? [], 'null');
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('movetitle', $data ?? [], 'null');
        $this->setIfExists('sortdirection', $data ?? [], null);
        $this->setIfExists('sortenabled', $data ?? [], null);
        $this->setIfExists('sortenabledtitle', $data ?? [], 'null');
        $this->setIfExists('sorticon', $data ?? [], null);
        $this->setIfExists('sortorder', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets heading
     *
     * @return string|null
     */
    public function getHeading()
    {
        return $this->container['heading'];
    }

    /**
     * Sets heading
     *
     * @param string|null $heading heading
     *
     * @return self
     */
    public function setHeading($heading)
    {
        if (is_null($heading)) {
            throw new \InvalidArgumentException('non-nullable heading cannot be null');
        }
        $this->container['heading'] = $heading;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets movetitle
     *
     * @return string|null
     */
    public function getMovetitle()
    {
        return $this->container['movetitle'];
    }

    /**
     * Sets movetitle
     *
     * @param string|null $movetitle movetitle
     *
     * @return self
     */
    public function setMovetitle($movetitle)
    {
        if (is_null($movetitle)) {
            throw new \InvalidArgumentException('non-nullable movetitle cannot be null');
        }
        $this->container['movetitle'] = $movetitle;

        return $this;
    }

    /**
     * Gets sortdirection
     *
     * @return int|null
     */
    public function getSortdirection()
    {
        return $this->container['sortdirection'];
    }

    /**
     * Sets sortdirection
     *
     * @param int|null $sortdirection sortdirection
     *
     * @return self
     */
    public function setSortdirection($sortdirection)
    {
        if (is_null($sortdirection)) {
            throw new \InvalidArgumentException('non-nullable sortdirection cannot be null');
        }
        $this->container['sortdirection'] = $sortdirection;

        return $this;
    }

    /**
     * Gets sortenabled
     *
     * @return bool|null
     */
    public function getSortenabled()
    {
        return $this->container['sortenabled'];
    }

    /**
     * Sets sortenabled
     *
     * @param bool|null $sortenabled sortenabled
     *
     * @return self
     */
    public function setSortenabled($sortenabled)
    {
        if (is_null($sortenabled)) {
            throw new \InvalidArgumentException('non-nullable sortenabled cannot be null');
        }
        $this->container['sortenabled'] = $sortenabled;

        return $this;
    }

    /**
     * Gets sortenabledtitle
     *
     * @return string|null
     */
    public function getSortenabledtitle()
    {
        return $this->container['sortenabledtitle'];
    }

    /**
     * Sets sortenabledtitle
     *
     * @param string|null $sortenabledtitle sortenabledtitle
     *
     * @return self
     */
    public function setSortenabledtitle($sortenabledtitle)
    {
        if (is_null($sortenabledtitle)) {
            throw new \InvalidArgumentException('non-nullable sortenabledtitle cannot be null');
        }
        $this->container['sortenabledtitle'] = $sortenabledtitle;

        return $this;
    }

    /**
     * Gets sorticon
     *
     * @return \OpenAPI\Client\Model\CoreReportbuilderColumnsAdd200ResponseSortablecolumnsInnerSorticon|null
     */
    public function getSorticon()
    {
        return $this->container['sorticon'];
    }

    /**
     * Sets sorticon
     *
     * @param \OpenAPI\Client\Model\CoreReportbuilderColumnsAdd200ResponseSortablecolumnsInnerSorticon|null $sorticon sorticon
     *
     * @return self
     */
    public function setSorticon($sorticon)
    {
        if (is_null($sorticon)) {
            throw new \InvalidArgumentException('non-nullable sorticon cannot be null');
        }
        $this->container['sorticon'] = $sorticon;

        return $this;
    }

    /**
     * Gets sortorder
     *
     * @return int|null
     */
    public function getSortorder()
    {
        return $this->container['sortorder'];
    }

    /**
     * Sets sortorder
     *
     * @param int|null $sortorder sortorder
     *
     * @return self
     */
    public function setSortorder($sortorder)
    {
        if (is_null($sortorder)) {
            throw new \InvalidArgumentException('non-nullable sortorder cannot be null');
        }
        $this->container['sortorder'] = $sortorder;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


