<?php
/**
 * ModQuizGetUserAttempts200ResponseAttemptsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModQuizGetUserAttempts200ResponseAttemptsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModQuizGetUserAttempts200ResponseAttemptsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_quiz_get_user_attempts_200_response_attempts_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attempt' => 'int',
        'currentpage' => 'int',
        'gradednotificationsenttime' => 'int',
        'id' => 'int',
        'layout' => 'string',
        'preview' => 'int',
        'quiz' => 'int',
        'state' => 'string',
        'sumgrades' => 'float',
        'timecheckstate' => 'int',
        'timefinish' => 'int',
        'timemodified' => 'int',
        'timemodifiedoffline' => 'int',
        'timestart' => 'int',
        'uniqueid' => 'int',
        'userid' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'attempt' => null,
        'currentpage' => null,
        'gradednotificationsenttime' => null,
        'id' => null,
        'layout' => null,
        'preview' => null,
        'quiz' => null,
        'state' => null,
        'sumgrades' => null,
        'timecheckstate' => null,
        'timefinish' => null,
        'timemodified' => null,
        'timemodifiedoffline' => null,
        'timestart' => null,
        'uniqueid' => null,
        'userid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'attempt' => false,
        'currentpage' => false,
        'gradednotificationsenttime' => false,
        'id' => false,
        'layout' => false,
        'preview' => false,
        'quiz' => false,
        'state' => false,
        'sumgrades' => false,
        'timecheckstate' => false,
        'timefinish' => false,
        'timemodified' => false,
        'timemodifiedoffline' => false,
        'timestart' => false,
        'uniqueid' => false,
        'userid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attempt' => 'attempt',
        'currentpage' => 'currentpage',
        'gradednotificationsenttime' => 'gradednotificationsenttime',
        'id' => 'id',
        'layout' => 'layout',
        'preview' => 'preview',
        'quiz' => 'quiz',
        'state' => 'state',
        'sumgrades' => 'sumgrades',
        'timecheckstate' => 'timecheckstate',
        'timefinish' => 'timefinish',
        'timemodified' => 'timemodified',
        'timemodifiedoffline' => 'timemodifiedoffline',
        'timestart' => 'timestart',
        'uniqueid' => 'uniqueid',
        'userid' => 'userid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attempt' => 'setAttempt',
        'currentpage' => 'setCurrentpage',
        'gradednotificationsenttime' => 'setGradednotificationsenttime',
        'id' => 'setId',
        'layout' => 'setLayout',
        'preview' => 'setPreview',
        'quiz' => 'setQuiz',
        'state' => 'setState',
        'sumgrades' => 'setSumgrades',
        'timecheckstate' => 'setTimecheckstate',
        'timefinish' => 'setTimefinish',
        'timemodified' => 'setTimemodified',
        'timemodifiedoffline' => 'setTimemodifiedoffline',
        'timestart' => 'setTimestart',
        'uniqueid' => 'setUniqueid',
        'userid' => 'setUserid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attempt' => 'getAttempt',
        'currentpage' => 'getCurrentpage',
        'gradednotificationsenttime' => 'getGradednotificationsenttime',
        'id' => 'getId',
        'layout' => 'getLayout',
        'preview' => 'getPreview',
        'quiz' => 'getQuiz',
        'state' => 'getState',
        'sumgrades' => 'getSumgrades',
        'timecheckstate' => 'getTimecheckstate',
        'timefinish' => 'getTimefinish',
        'timemodified' => 'getTimemodified',
        'timemodifiedoffline' => 'getTimemodifiedoffline',
        'timestart' => 'getTimestart',
        'uniqueid' => 'getUniqueid',
        'userid' => 'getUserid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('attempt', $data ?? [], null);
        $this->setIfExists('currentpage', $data ?? [], null);
        $this->setIfExists('gradednotificationsenttime', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('layout', $data ?? [], null);
        $this->setIfExists('preview', $data ?? [], null);
        $this->setIfExists('quiz', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('sumgrades', $data ?? [], null);
        $this->setIfExists('timecheckstate', $data ?? [], null);
        $this->setIfExists('timefinish', $data ?? [], null);
        $this->setIfExists('timemodified', $data ?? [], null);
        $this->setIfExists('timemodifiedoffline', $data ?? [], null);
        $this->setIfExists('timestart', $data ?? [], null);
        $this->setIfExists('uniqueid', $data ?? [], null);
        $this->setIfExists('userid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attempt
     *
     * @return int|null
     */
    public function getAttempt()
    {
        return $this->container['attempt'];
    }

    /**
     * Sets attempt
     *
     * @param int|null $attempt Sequentially numbers this students attempts at this quiz.
     *
     * @return self
     */
    public function setAttempt($attempt)
    {
        if (is_null($attempt)) {
            throw new \InvalidArgumentException('non-nullable attempt cannot be null');
        }
        $this->container['attempt'] = $attempt;

        return $this;
    }

    /**
     * Gets currentpage
     *
     * @return int|null
     */
    public function getCurrentpage()
    {
        return $this->container['currentpage'];
    }

    /**
     * Sets currentpage
     *
     * @param int|null $currentpage Attempt current page.
     *
     * @return self
     */
    public function setCurrentpage($currentpage)
    {
        if (is_null($currentpage)) {
            throw new \InvalidArgumentException('non-nullable currentpage cannot be null');
        }
        $this->container['currentpage'] = $currentpage;

        return $this;
    }

    /**
     * Gets gradednotificationsenttime
     *
     * @return int|null
     */
    public function getGradednotificationsenttime()
    {
        return $this->container['gradednotificationsenttime'];
    }

    /**
     * Sets gradednotificationsenttime
     *
     * @param int|null $gradednotificationsenttime Time when the student was notified that manual grading of their attempt was complete.
     *
     * @return self
     */
    public function setGradednotificationsenttime($gradednotificationsenttime)
    {
        if (is_null($gradednotificationsenttime)) {
            throw new \InvalidArgumentException('non-nullable gradednotificationsenttime cannot be null');
        }
        $this->container['gradednotificationsenttime'] = $gradednotificationsenttime;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Attempt id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets layout
     *
     * @return string|null
     */
    public function getLayout()
    {
        return $this->container['layout'];
    }

    /**
     * Sets layout
     *
     * @param string|null $layout Attempt layout.
     *
     * @return self
     */
    public function setLayout($layout)
    {
        if (is_null($layout)) {
            throw new \InvalidArgumentException('non-nullable layout cannot be null');
        }
        $this->container['layout'] = $layout;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return int|null
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param int|null $preview Whether is a preview attempt or not.
     *
     * @return self
     */
    public function setPreview($preview)
    {
        if (is_null($preview)) {
            throw new \InvalidArgumentException('non-nullable preview cannot be null');
        }
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets quiz
     *
     * @return int|null
     */
    public function getQuiz()
    {
        return $this->container['quiz'];
    }

    /**
     * Sets quiz
     *
     * @param int|null $quiz Foreign key reference to the quiz that was attempted.
     *
     * @return self
     */
    public function setQuiz($quiz)
    {
        if (is_null($quiz)) {
            throw new \InvalidArgumentException('non-nullable quiz cannot be null');
        }
        $this->container['quiz'] = $quiz;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state The current state of the attempts. 'inprogress',                                                 'overdue', 'finished' or 'abandoned'.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets sumgrades
     *
     * @return float|null
     */
    public function getSumgrades()
    {
        return $this->container['sumgrades'];
    }

    /**
     * Sets sumgrades
     *
     * @param float|null $sumgrades Total marks for this attempt.
     *
     * @return self
     */
    public function setSumgrades($sumgrades)
    {
        if (is_null($sumgrades)) {
            throw new \InvalidArgumentException('non-nullable sumgrades cannot be null');
        }
        $this->container['sumgrades'] = $sumgrades;

        return $this;
    }

    /**
     * Gets timecheckstate
     *
     * @return int|null
     */
    public function getTimecheckstate()
    {
        return $this->container['timecheckstate'];
    }

    /**
     * Sets timecheckstate
     *
     * @param int|null $timecheckstate Next time quiz cron should check attempt for                                                         state changes.  NULL means never check.
     *
     * @return self
     */
    public function setTimecheckstate($timecheckstate)
    {
        if (is_null($timecheckstate)) {
            throw new \InvalidArgumentException('non-nullable timecheckstate cannot be null');
        }
        $this->container['timecheckstate'] = $timecheckstate;

        return $this;
    }

    /**
     * Gets timefinish
     *
     * @return int|null
     */
    public function getTimefinish()
    {
        return $this->container['timefinish'];
    }

    /**
     * Sets timefinish
     *
     * @param int|null $timefinish Time when the attempt was submitted.                                                     0 if the attempt has not been submitted yet.
     *
     * @return self
     */
    public function setTimefinish($timefinish)
    {
        if (is_null($timefinish)) {
            throw new \InvalidArgumentException('non-nullable timefinish cannot be null');
        }
        $this->container['timefinish'] = $timefinish;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified Last modified time.
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets timemodifiedoffline
     *
     * @return int|null
     */
    public function getTimemodifiedoffline()
    {
        return $this->container['timemodifiedoffline'];
    }

    /**
     * Sets timemodifiedoffline
     *
     * @param int|null $timemodifiedoffline Last modified time via webservices.
     *
     * @return self
     */
    public function setTimemodifiedoffline($timemodifiedoffline)
    {
        if (is_null($timemodifiedoffline)) {
            throw new \InvalidArgumentException('non-nullable timemodifiedoffline cannot be null');
        }
        $this->container['timemodifiedoffline'] = $timemodifiedoffline;

        return $this;
    }

    /**
     * Gets timestart
     *
     * @return int|null
     */
    public function getTimestart()
    {
        return $this->container['timestart'];
    }

    /**
     * Sets timestart
     *
     * @param int|null $timestart Time when the attempt was started.
     *
     * @return self
     */
    public function setTimestart($timestart)
    {
        if (is_null($timestart)) {
            throw new \InvalidArgumentException('non-nullable timestart cannot be null');
        }
        $this->container['timestart'] = $timestart;

        return $this;
    }

    /**
     * Gets uniqueid
     *
     * @return int|null
     */
    public function getUniqueid()
    {
        return $this->container['uniqueid'];
    }

    /**
     * Sets uniqueid
     *
     * @param int|null $uniqueid Foreign key reference to the question_usage that holds the                                                     details of the the question_attempts that make up this quiz                                                     attempt.
     *
     * @return self
     */
    public function setUniqueid($uniqueid)
    {
        if (is_null($uniqueid)) {
            throw new \InvalidArgumentException('non-nullable uniqueid cannot be null');
        }
        $this->container['uniqueid'] = $uniqueid;

        return $this;
    }

    /**
     * Gets userid
     *
     * @return int|null
     */
    public function getUserid()
    {
        return $this->container['userid'];
    }

    /**
     * Sets userid
     *
     * @param int|null $userid Foreign key reference to the user whose attempt this is.
     *
     * @return self
     */
    public function setUserid($userid)
    {
        if (is_null($userid)) {
            throw new \InvalidArgumentException('non-nullable userid cannot be null');
        }
        $this->container['userid'] = $userid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


