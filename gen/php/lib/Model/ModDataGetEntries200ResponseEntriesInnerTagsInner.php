<?php
/**
 * ModDataGetEntries200ResponseEntriesInnerTagsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModDataGetEntries200ResponseEntriesInnerTagsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModDataGetEntries200ResponseEntriesInnerTagsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_data_get_entries_200_response_entries_inner_tags_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'flag' => 'int',
        'id' => 'int',
        'isstandard' => 'bool',
        'itemid' => 'int',
        'name' => 'string',
        'ordering' => 'int',
        'rawname' => 'string',
        'tagcollid' => 'int',
        'taginstancecontextid' => 'int',
        'taginstanceid' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'flag' => null,
        'id' => null,
        'isstandard' => null,
        'itemid' => null,
        'name' => null,
        'ordering' => null,
        'rawname' => null,
        'tagcollid' => null,
        'taginstancecontextid' => null,
        'taginstanceid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'flag' => false,
        'id' => false,
        'isstandard' => false,
        'itemid' => false,
        'name' => false,
        'ordering' => false,
        'rawname' => false,
        'tagcollid' => false,
        'taginstancecontextid' => false,
        'taginstanceid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'flag' => 'flag',
        'id' => 'id',
        'isstandard' => 'isstandard',
        'itemid' => 'itemid',
        'name' => 'name',
        'ordering' => 'ordering',
        'rawname' => 'rawname',
        'tagcollid' => 'tagcollid',
        'taginstancecontextid' => 'taginstancecontextid',
        'taginstanceid' => 'taginstanceid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'flag' => 'setFlag',
        'id' => 'setId',
        'isstandard' => 'setIsstandard',
        'itemid' => 'setItemid',
        'name' => 'setName',
        'ordering' => 'setOrdering',
        'rawname' => 'setRawname',
        'tagcollid' => 'setTagcollid',
        'taginstancecontextid' => 'setTaginstancecontextid',
        'taginstanceid' => 'setTaginstanceid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'flag' => 'getFlag',
        'id' => 'getId',
        'isstandard' => 'getIsstandard',
        'itemid' => 'getItemid',
        'name' => 'getName',
        'ordering' => 'getOrdering',
        'rawname' => 'getRawname',
        'tagcollid' => 'getTagcollid',
        'taginstancecontextid' => 'getTaginstancecontextid',
        'taginstanceid' => 'getTaginstanceid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('flag', $data ?? [], 0);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('isstandard', $data ?? [], false);
        $this->setIfExists('itemid', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('ordering', $data ?? [], null);
        $this->setIfExists('rawname', $data ?? [], null);
        $this->setIfExists('tagcollid', $data ?? [], null);
        $this->setIfExists('taginstancecontextid', $data ?? [], null);
        $this->setIfExists('taginstanceid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets flag
     *
     * @return int|null
     */
    public function getFlag()
    {
        return $this->container['flag'];
    }

    /**
     * Sets flag
     *
     * @param int|null $flag Whether the tag is flagged as inappropriate.
     *
     * @return self
     */
    public function setFlag($flag)
    {
        if (is_null($flag)) {
            throw new \InvalidArgumentException('non-nullable flag cannot be null');
        }
        $this->container['flag'] = $flag;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Tag id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isstandard
     *
     * @return bool|null
     */
    public function getIsstandard()
    {
        return $this->container['isstandard'];
    }

    /**
     * Sets isstandard
     *
     * @param bool|null $isstandard Whether this tag is standard.
     *
     * @return self
     */
    public function setIsstandard($isstandard)
    {
        if (is_null($isstandard)) {
            throw new \InvalidArgumentException('non-nullable isstandard cannot be null');
        }
        $this->container['isstandard'] = $isstandard;

        return $this;
    }

    /**
     * Gets itemid
     *
     * @return int|null
     */
    public function getItemid()
    {
        return $this->container['itemid'];
    }

    /**
     * Sets itemid
     *
     * @param int|null $itemid Id of the record tagged.
     *
     * @return self
     */
    public function setItemid($itemid)
    {
        if (is_null($itemid)) {
            throw new \InvalidArgumentException('non-nullable itemid cannot be null');
        }
        $this->container['itemid'] = $itemid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Tag name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets ordering
     *
     * @return int|null
     */
    public function getOrdering()
    {
        return $this->container['ordering'];
    }

    /**
     * Sets ordering
     *
     * @param int|null $ordering Tag ordering.
     *
     * @return self
     */
    public function setOrdering($ordering)
    {
        if (is_null($ordering)) {
            throw new \InvalidArgumentException('non-nullable ordering cannot be null');
        }
        $this->container['ordering'] = $ordering;

        return $this;
    }

    /**
     * Gets rawname
     *
     * @return string|null
     */
    public function getRawname()
    {
        return $this->container['rawname'];
    }

    /**
     * Sets rawname
     *
     * @param string|null $rawname The raw, unnormalised name for the tag as entered by users.
     *
     * @return self
     */
    public function setRawname($rawname)
    {
        if (is_null($rawname)) {
            throw new \InvalidArgumentException('non-nullable rawname cannot be null');
        }
        $this->container['rawname'] = $rawname;

        return $this;
    }

    /**
     * Gets tagcollid
     *
     * @return int|null
     */
    public function getTagcollid()
    {
        return $this->container['tagcollid'];
    }

    /**
     * Sets tagcollid
     *
     * @param int|null $tagcollid Tag collection id.
     *
     * @return self
     */
    public function setTagcollid($tagcollid)
    {
        if (is_null($tagcollid)) {
            throw new \InvalidArgumentException('non-nullable tagcollid cannot be null');
        }
        $this->container['tagcollid'] = $tagcollid;

        return $this;
    }

    /**
     * Gets taginstancecontextid
     *
     * @return int|null
     */
    public function getTaginstancecontextid()
    {
        return $this->container['taginstancecontextid'];
    }

    /**
     * Sets taginstancecontextid
     *
     * @param int|null $taginstancecontextid Context the tag instance belongs to.
     *
     * @return self
     */
    public function setTaginstancecontextid($taginstancecontextid)
    {
        if (is_null($taginstancecontextid)) {
            throw new \InvalidArgumentException('non-nullable taginstancecontextid cannot be null');
        }
        $this->container['taginstancecontextid'] = $taginstancecontextid;

        return $this;
    }

    /**
     * Gets taginstanceid
     *
     * @return int|null
     */
    public function getTaginstanceid()
    {
        return $this->container['taginstanceid'];
    }

    /**
     * Sets taginstanceid
     *
     * @param int|null $taginstanceid Tag instance id.
     *
     * @return self
     */
    public function setTaginstanceid($taginstanceid)
    {
        if (is_null($taginstanceid)) {
            throw new \InvalidArgumentException('non-nullable taginstanceid cannot be null');
        }
        $this->container['taginstanceid'] = $taginstanceid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


