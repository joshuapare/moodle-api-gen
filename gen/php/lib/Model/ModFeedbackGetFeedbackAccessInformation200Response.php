<?php
/**
 * ModFeedbackGetFeedbackAccessInformation200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModFeedbackGetFeedbackAccessInformation200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModFeedbackGetFeedbackAccessInformation200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_feedback_get_feedback_access_information_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cancomplete' => 'bool',
        'candeletesubmissions' => 'bool',
        'canedititems' => 'bool',
        'cansubmit' => 'bool',
        'canviewanalysis' => 'bool',
        'canviewreports' => 'bool',
        'isalreadysubmitted' => 'bool',
        'isanonymous' => 'bool',
        'isempty' => 'bool',
        'isopen' => 'bool',
        'warnings' => '\OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cancomplete' => null,
        'candeletesubmissions' => null,
        'canedititems' => null,
        'cansubmit' => null,
        'canviewanalysis' => null,
        'canviewreports' => null,
        'isalreadysubmitted' => null,
        'isanonymous' => null,
        'isempty' => null,
        'isopen' => null,
        'warnings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cancomplete' => false,
        'candeletesubmissions' => false,
        'canedititems' => false,
        'cansubmit' => false,
        'canviewanalysis' => false,
        'canviewreports' => false,
        'isalreadysubmitted' => false,
        'isanonymous' => false,
        'isempty' => false,
        'isopen' => false,
        'warnings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cancomplete' => 'cancomplete',
        'candeletesubmissions' => 'candeletesubmissions',
        'canedititems' => 'canedititems',
        'cansubmit' => 'cansubmit',
        'canviewanalysis' => 'canviewanalysis',
        'canviewreports' => 'canviewreports',
        'isalreadysubmitted' => 'isalreadysubmitted',
        'isanonymous' => 'isanonymous',
        'isempty' => 'isempty',
        'isopen' => 'isopen',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cancomplete' => 'setCancomplete',
        'candeletesubmissions' => 'setCandeletesubmissions',
        'canedititems' => 'setCanedititems',
        'cansubmit' => 'setCansubmit',
        'canviewanalysis' => 'setCanviewanalysis',
        'canviewreports' => 'setCanviewreports',
        'isalreadysubmitted' => 'setIsalreadysubmitted',
        'isanonymous' => 'setIsanonymous',
        'isempty' => 'setIsempty',
        'isopen' => 'setIsopen',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cancomplete' => 'getCancomplete',
        'candeletesubmissions' => 'getCandeletesubmissions',
        'canedititems' => 'getCanedititems',
        'cansubmit' => 'getCansubmit',
        'canviewanalysis' => 'getCanviewanalysis',
        'canviewreports' => 'getCanviewreports',
        'isalreadysubmitted' => 'getIsalreadysubmitted',
        'isanonymous' => 'getIsanonymous',
        'isempty' => 'getIsempty',
        'isopen' => 'getIsopen',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cancomplete', $data ?? [], null);
        $this->setIfExists('candeletesubmissions', $data ?? [], null);
        $this->setIfExists('canedititems', $data ?? [], null);
        $this->setIfExists('cansubmit', $data ?? [], null);
        $this->setIfExists('canviewanalysis', $data ?? [], null);
        $this->setIfExists('canviewreports', $data ?? [], null);
        $this->setIfExists('isalreadysubmitted', $data ?? [], null);
        $this->setIfExists('isanonymous', $data ?? [], null);
        $this->setIfExists('isempty', $data ?? [], null);
        $this->setIfExists('isopen', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cancomplete'] === null) {
            $invalidProperties[] = "'cancomplete' can't be null";
        }
        if ($this->container['candeletesubmissions'] === null) {
            $invalidProperties[] = "'candeletesubmissions' can't be null";
        }
        if ($this->container['canedititems'] === null) {
            $invalidProperties[] = "'canedititems' can't be null";
        }
        if ($this->container['cansubmit'] === null) {
            $invalidProperties[] = "'cansubmit' can't be null";
        }
        if ($this->container['canviewanalysis'] === null) {
            $invalidProperties[] = "'canviewanalysis' can't be null";
        }
        if ($this->container['canviewreports'] === null) {
            $invalidProperties[] = "'canviewreports' can't be null";
        }
        if ($this->container['isalreadysubmitted'] === null) {
            $invalidProperties[] = "'isalreadysubmitted' can't be null";
        }
        if ($this->container['isanonymous'] === null) {
            $invalidProperties[] = "'isanonymous' can't be null";
        }
        if ($this->container['isempty'] === null) {
            $invalidProperties[] = "'isempty' can't be null";
        }
        if ($this->container['isopen'] === null) {
            $invalidProperties[] = "'isopen' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cancomplete
     *
     * @return bool
     */
    public function getCancomplete()
    {
        return $this->container['cancomplete'];
    }

    /**
     * Sets cancomplete
     *
     * @param bool $cancomplete Whether the user can complete the feedback or not.
     *
     * @return self
     */
    public function setCancomplete($cancomplete)
    {
        if (is_null($cancomplete)) {
            throw new \InvalidArgumentException('non-nullable cancomplete cannot be null');
        }
        $this->container['cancomplete'] = $cancomplete;

        return $this;
    }

    /**
     * Gets candeletesubmissions
     *
     * @return bool
     */
    public function getCandeletesubmissions()
    {
        return $this->container['candeletesubmissions'];
    }

    /**
     * Sets candeletesubmissions
     *
     * @param bool $candeletesubmissions Whether the user can delete submissions or not.
     *
     * @return self
     */
    public function setCandeletesubmissions($candeletesubmissions)
    {
        if (is_null($candeletesubmissions)) {
            throw new \InvalidArgumentException('non-nullable candeletesubmissions cannot be null');
        }
        $this->container['candeletesubmissions'] = $candeletesubmissions;

        return $this;
    }

    /**
     * Gets canedititems
     *
     * @return bool
     */
    public function getCanedititems()
    {
        return $this->container['canedititems'];
    }

    /**
     * Sets canedititems
     *
     * @param bool $canedititems Whether the user can edit feedback items or not.
     *
     * @return self
     */
    public function setCanedititems($canedititems)
    {
        if (is_null($canedititems)) {
            throw new \InvalidArgumentException('non-nullable canedititems cannot be null');
        }
        $this->container['canedititems'] = $canedititems;

        return $this;
    }

    /**
     * Gets cansubmit
     *
     * @return bool
     */
    public function getCansubmit()
    {
        return $this->container['cansubmit'];
    }

    /**
     * Sets cansubmit
     *
     * @param bool $cansubmit Whether the user can submit the feedback or not.
     *
     * @return self
     */
    public function setCansubmit($cansubmit)
    {
        if (is_null($cansubmit)) {
            throw new \InvalidArgumentException('non-nullable cansubmit cannot be null');
        }
        $this->container['cansubmit'] = $cansubmit;

        return $this;
    }

    /**
     * Gets canviewanalysis
     *
     * @return bool
     */
    public function getCanviewanalysis()
    {
        return $this->container['canviewanalysis'];
    }

    /**
     * Sets canviewanalysis
     *
     * @param bool $canviewanalysis Whether the user can view the analysis or not.
     *
     * @return self
     */
    public function setCanviewanalysis($canviewanalysis)
    {
        if (is_null($canviewanalysis)) {
            throw new \InvalidArgumentException('non-nullable canviewanalysis cannot be null');
        }
        $this->container['canviewanalysis'] = $canviewanalysis;

        return $this;
    }

    /**
     * Gets canviewreports
     *
     * @return bool
     */
    public function getCanviewreports()
    {
        return $this->container['canviewreports'];
    }

    /**
     * Sets canviewreports
     *
     * @param bool $canviewreports Whether the user can view the feedback reports or not.
     *
     * @return self
     */
    public function setCanviewreports($canviewreports)
    {
        if (is_null($canviewreports)) {
            throw new \InvalidArgumentException('non-nullable canviewreports cannot be null');
        }
        $this->container['canviewreports'] = $canviewreports;

        return $this;
    }

    /**
     * Gets isalreadysubmitted
     *
     * @return bool
     */
    public function getIsalreadysubmitted()
    {
        return $this->container['isalreadysubmitted'];
    }

    /**
     * Sets isalreadysubmitted
     *
     * @param bool $isalreadysubmitted Whether the feedback is already submitted or not.
     *
     * @return self
     */
    public function setIsalreadysubmitted($isalreadysubmitted)
    {
        if (is_null($isalreadysubmitted)) {
            throw new \InvalidArgumentException('non-nullable isalreadysubmitted cannot be null');
        }
        $this->container['isalreadysubmitted'] = $isalreadysubmitted;

        return $this;
    }

    /**
     * Gets isanonymous
     *
     * @return bool
     */
    public function getIsanonymous()
    {
        return $this->container['isanonymous'];
    }

    /**
     * Sets isanonymous
     *
     * @param bool $isanonymous Whether the feedback is anonymous or not.
     *
     * @return self
     */
    public function setIsanonymous($isanonymous)
    {
        if (is_null($isanonymous)) {
            throw new \InvalidArgumentException('non-nullable isanonymous cannot be null');
        }
        $this->container['isanonymous'] = $isanonymous;

        return $this;
    }

    /**
     * Gets isempty
     *
     * @return bool
     */
    public function getIsempty()
    {
        return $this->container['isempty'];
    }

    /**
     * Sets isempty
     *
     * @param bool $isempty Whether the feedback has questions or not.
     *
     * @return self
     */
    public function setIsempty($isempty)
    {
        if (is_null($isempty)) {
            throw new \InvalidArgumentException('non-nullable isempty cannot be null');
        }
        $this->container['isempty'] = $isempty;

        return $this;
    }

    /**
     * Gets isopen
     *
     * @return bool
     */
    public function getIsopen()
    {
        return $this->container['isopen'];
    }

    /**
     * Sets isopen
     *
     * @param bool $isopen Whether the feedback has active access time restrictions or not.
     *
     * @return self
     */
    public function setIsopen($isopen)
    {
        if (is_null($isopen)) {
            throw new \InvalidArgumentException('non-nullable isopen cannot be null');
        }
        $this->container['isopen'] = $isopen;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null $warnings warnings
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


