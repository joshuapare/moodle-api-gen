<?php
/**
 * CoreBlogGetEntries200ResponseEntriesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreBlogGetEntries200ResponseEntriesInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreBlogGetEntries200ResponseEntriesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_blog_get_entries_200_response_entries_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attachment' => 'string',
        'attachmentfiles' => '\OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerAttachmentfilesInner[]',
        'content' => 'string',
        'courseid' => 'int',
        'coursemoduleid' => 'int',
        'created' => 'int',
        'format' => 'int',
        'groupid' => 'int',
        'id' => 'int',
        'lastmodified' => 'int',
        'module' => 'string',
        'moduleid' => 'int',
        'publishstate' => 'string',
        'rating' => 'int',
        'subject' => 'string',
        'summary' => 'string',
        'summaryfiles' => '\OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]',
        'summaryformat' => 'int',
        'tags' => '\OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerTagsInner[]',
        'uniquehash' => 'string',
        'userid' => 'int',
        'usermodified' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'attachment' => null,
        'attachmentfiles' => null,
        'content' => null,
        'courseid' => null,
        'coursemoduleid' => null,
        'created' => null,
        'format' => null,
        'groupid' => null,
        'id' => null,
        'lastmodified' => null,
        'module' => null,
        'moduleid' => null,
        'publishstate' => null,
        'rating' => null,
        'subject' => null,
        'summary' => null,
        'summaryfiles' => null,
        'summaryformat' => null,
        'tags' => null,
        'uniquehash' => null,
        'userid' => null,
        'usermodified' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'attachment' => false,
        'attachmentfiles' => false,
        'content' => false,
        'courseid' => false,
        'coursemoduleid' => false,
        'created' => false,
        'format' => false,
        'groupid' => false,
        'id' => false,
        'lastmodified' => false,
        'module' => false,
        'moduleid' => false,
        'publishstate' => false,
        'rating' => false,
        'subject' => false,
        'summary' => false,
        'summaryfiles' => false,
        'summaryformat' => false,
        'tags' => false,
        'uniquehash' => false,
        'userid' => false,
        'usermodified' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attachment' => 'attachment',
        'attachmentfiles' => 'attachmentfiles',
        'content' => 'content',
        'courseid' => 'courseid',
        'coursemoduleid' => 'coursemoduleid',
        'created' => 'created',
        'format' => 'format',
        'groupid' => 'groupid',
        'id' => 'id',
        'lastmodified' => 'lastmodified',
        'module' => 'module',
        'moduleid' => 'moduleid',
        'publishstate' => 'publishstate',
        'rating' => 'rating',
        'subject' => 'subject',
        'summary' => 'summary',
        'summaryfiles' => 'summaryfiles',
        'summaryformat' => 'summaryformat',
        'tags' => 'tags',
        'uniquehash' => 'uniquehash',
        'userid' => 'userid',
        'usermodified' => 'usermodified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attachment' => 'setAttachment',
        'attachmentfiles' => 'setAttachmentfiles',
        'content' => 'setContent',
        'courseid' => 'setCourseid',
        'coursemoduleid' => 'setCoursemoduleid',
        'created' => 'setCreated',
        'format' => 'setFormat',
        'groupid' => 'setGroupid',
        'id' => 'setId',
        'lastmodified' => 'setLastmodified',
        'module' => 'setModule',
        'moduleid' => 'setModuleid',
        'publishstate' => 'setPublishstate',
        'rating' => 'setRating',
        'subject' => 'setSubject',
        'summary' => 'setSummary',
        'summaryfiles' => 'setSummaryfiles',
        'summaryformat' => 'setSummaryformat',
        'tags' => 'setTags',
        'uniquehash' => 'setUniquehash',
        'userid' => 'setUserid',
        'usermodified' => 'setUsermodified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attachment' => 'getAttachment',
        'attachmentfiles' => 'getAttachmentfiles',
        'content' => 'getContent',
        'courseid' => 'getCourseid',
        'coursemoduleid' => 'getCoursemoduleid',
        'created' => 'getCreated',
        'format' => 'getFormat',
        'groupid' => 'getGroupid',
        'id' => 'getId',
        'lastmodified' => 'getLastmodified',
        'module' => 'getModule',
        'moduleid' => 'getModuleid',
        'publishstate' => 'getPublishstate',
        'rating' => 'getRating',
        'subject' => 'getSubject',
        'summary' => 'getSummary',
        'summaryfiles' => 'getSummaryfiles',
        'summaryformat' => 'getSummaryformat',
        'tags' => 'getTags',
        'uniquehash' => 'getUniquehash',
        'userid' => 'getUserid',
        'usermodified' => 'getUsermodified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('attachment', $data ?? [], 'null');
        $this->setIfExists('attachmentfiles', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], 'null');
        $this->setIfExists('courseid', $data ?? [], 0);
        $this->setIfExists('coursemoduleid', $data ?? [], 0);
        $this->setIfExists('created', $data ?? [], 0);
        $this->setIfExists('format', $data ?? [], 0);
        $this->setIfExists('groupid', $data ?? [], 0);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('lastmodified', $data ?? [], 0);
        $this->setIfExists('module', $data ?? [], 'null');
        $this->setIfExists('moduleid', $data ?? [], 0);
        $this->setIfExists('publishstate', $data ?? [], 'draft');
        $this->setIfExists('rating', $data ?? [], 0);
        $this->setIfExists('subject', $data ?? [], 'null');
        $this->setIfExists('summary', $data ?? [], 'null');
        $this->setIfExists('summaryfiles', $data ?? [], null);
        $this->setIfExists('summaryformat', $data ?? [], 0);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('uniquehash', $data ?? [], 'null');
        $this->setIfExists('userid', $data ?? [], 0);
        $this->setIfExists('usermodified', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attachment
     *
     * @return string|null
     */
    public function getAttachment()
    {
        return $this->container['attachment'];
    }

    /**
     * Sets attachment
     *
     * @param string|null $attachment Post atachment.
     *
     * @return self
     */
    public function setAttachment($attachment)
    {
        if (is_null($attachment)) {
            throw new \InvalidArgumentException('non-nullable attachment cannot be null');
        }
        $this->container['attachment'] = $attachment;

        return $this;
    }

    /**
     * Gets attachmentfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerAttachmentfilesInner[]|null
     */
    public function getAttachmentfiles()
    {
        return $this->container['attachmentfiles'];
    }

    /**
     * Sets attachmentfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerAttachmentfilesInner[]|null $attachmentfiles attachmentfiles
     *
     * @return self
     */
    public function setAttachmentfiles($attachmentfiles)
    {
        if (is_null($attachmentfiles)) {
            throw new \InvalidArgumentException('non-nullable attachmentfiles cannot be null');
        }
        $this->container['attachmentfiles'] = $attachmentfiles;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content Post content.
     *
     * @return self
     */
    public function setContent($content)
    {
        if (is_null($content)) {
            throw new \InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets courseid
     *
     * @return int|null
     */
    public function getCourseid()
    {
        return $this->container['courseid'];
    }

    /**
     * Sets courseid
     *
     * @param int|null $courseid Course where the post was created.
     *
     * @return self
     */
    public function setCourseid($courseid)
    {
        if (is_null($courseid)) {
            throw new \InvalidArgumentException('non-nullable courseid cannot be null');
        }
        $this->container['courseid'] = $courseid;

        return $this;
    }

    /**
     * Gets coursemoduleid
     *
     * @return int|null
     */
    public function getCoursemoduleid()
    {
        return $this->container['coursemoduleid'];
    }

    /**
     * Sets coursemoduleid
     *
     * @param int|null $coursemoduleid Course module id where the post was created.
     *
     * @return self
     */
    public function setCoursemoduleid($coursemoduleid)
    {
        if (is_null($coursemoduleid)) {
            throw new \InvalidArgumentException('non-nullable coursemoduleid cannot be null');
        }
        $this->container['coursemoduleid'] = $coursemoduleid;

        return $this;
    }

    /**
     * Gets created
     *
     * @return int|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int|null $created When it was created.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets format
     *
     * @return int|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param int|null $format Post content format.
     *
     * @return self
     */
    public function setFormat($format)
    {
        if (is_null($format)) {
            throw new \InvalidArgumentException('non-nullable format cannot be null');
        }
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets groupid
     *
     * @return int|null
     */
    public function getGroupid()
    {
        return $this->container['groupid'];
    }

    /**
     * Sets groupid
     *
     * @param int|null $groupid Group post was created for.
     *
     * @return self
     */
    public function setGroupid($groupid)
    {
        if (is_null($groupid)) {
            throw new \InvalidArgumentException('non-nullable groupid cannot be null');
        }
        $this->container['groupid'] = $groupid;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Post/entry id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lastmodified
     *
     * @return int|null
     */
    public function getLastmodified()
    {
        return $this->container['lastmodified'];
    }

    /**
     * Sets lastmodified
     *
     * @param int|null $lastmodified When it was last modified.
     *
     * @return self
     */
    public function setLastmodified($lastmodified)
    {
        if (is_null($lastmodified)) {
            throw new \InvalidArgumentException('non-nullable lastmodified cannot be null');
        }
        $this->container['lastmodified'] = $lastmodified;

        return $this;
    }

    /**
     * Gets module
     *
     * @return string|null
     */
    public function getModule()
    {
        return $this->container['module'];
    }

    /**
     * Sets module
     *
     * @param string|null $module Where it was published the post (blog, blog_external...).
     *
     * @return self
     */
    public function setModule($module)
    {
        if (is_null($module)) {
            throw new \InvalidArgumentException('non-nullable module cannot be null');
        }
        $this->container['module'] = $module;

        return $this;
    }

    /**
     * Gets moduleid
     *
     * @return int|null
     */
    public function getModuleid()
    {
        return $this->container['moduleid'];
    }

    /**
     * Sets moduleid
     *
     * @param int|null $moduleid Module id where the post was created (not used anymore).
     *
     * @return self
     */
    public function setModuleid($moduleid)
    {
        if (is_null($moduleid)) {
            throw new \InvalidArgumentException('non-nullable moduleid cannot be null');
        }
        $this->container['moduleid'] = $moduleid;

        return $this;
    }

    /**
     * Gets publishstate
     *
     * @return string|null
     */
    public function getPublishstate()
    {
        return $this->container['publishstate'];
    }

    /**
     * Sets publishstate
     *
     * @param string|null $publishstate Post publish state.
     *
     * @return self
     */
    public function setPublishstate($publishstate)
    {
        if (is_null($publishstate)) {
            throw new \InvalidArgumentException('non-nullable publishstate cannot be null');
        }
        $this->container['publishstate'] = $publishstate;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return int|null
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param int|null $rating Post rating.
     *
     * @return self
     */
    public function setRating($rating)
    {
        if (is_null($rating)) {
            throw new \InvalidArgumentException('non-nullable rating cannot be null');
        }
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject Post subject.
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary Post summary.
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            throw new \InvalidArgumentException('non-nullable summary cannot be null');
        }
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets summaryfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null
     */
    public function getSummaryfiles()
    {
        return $this->container['summaryfiles'];
    }

    /**
     * Sets summaryfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null $summaryfiles summaryfiles
     *
     * @return self
     */
    public function setSummaryfiles($summaryfiles)
    {
        if (is_null($summaryfiles)) {
            throw new \InvalidArgumentException('non-nullable summaryfiles cannot be null');
        }
        $this->container['summaryfiles'] = $summaryfiles;

        return $this;
    }

    /**
     * Gets summaryformat
     *
     * @return int|null
     */
    public function getSummaryformat()
    {
        return $this->container['summaryformat'];
    }

    /**
     * Sets summaryformat
     *
     * @param int|null $summaryformat summary format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setSummaryformat($summaryformat)
    {
        if (is_null($summaryformat)) {
            throw new \InvalidArgumentException('non-nullable summaryformat cannot be null');
        }
        $this->container['summaryformat'] = $summaryformat;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerTagsInner[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerTagsInner[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets uniquehash
     *
     * @return string|null
     */
    public function getUniquehash()
    {
        return $this->container['uniquehash'];
    }

    /**
     * Sets uniquehash
     *
     * @param string|null $uniquehash Post unique hash.
     *
     * @return self
     */
    public function setUniquehash($uniquehash)
    {
        if (is_null($uniquehash)) {
            throw new \InvalidArgumentException('non-nullable uniquehash cannot be null');
        }
        $this->container['uniquehash'] = $uniquehash;

        return $this;
    }

    /**
     * Gets userid
     *
     * @return int|null
     */
    public function getUserid()
    {
        return $this->container['userid'];
    }

    /**
     * Sets userid
     *
     * @param int|null $userid Post author.
     *
     * @return self
     */
    public function setUserid($userid)
    {
        if (is_null($userid)) {
            throw new \InvalidArgumentException('non-nullable userid cannot be null');
        }
        $this->container['userid'] = $userid;

        return $this;
    }

    /**
     * Gets usermodified
     *
     * @return int|null
     */
    public function getUsermodified()
    {
        return $this->container['usermodified'];
    }

    /**
     * Sets usermodified
     *
     * @param int|null $usermodified User that updated the post.
     *
     * @return self
     */
    public function setUsermodified($usermodified)
    {
        if (is_null($usermodified)) {
            throw new \InvalidArgumentException('non-nullable usermodified cannot be null');
        }
        $this->container['usermodified'] = $usermodified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


