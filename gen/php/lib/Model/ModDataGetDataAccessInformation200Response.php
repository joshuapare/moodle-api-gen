<?php
/**
 * ModDataGetDataAccessInformation200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModDataGetDataAccessInformation200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModDataGetDataAccessInformation200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_data_get_data_access_information_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'canaddentry' => 'bool',
        'canapprove' => 'bool',
        'canmanageentries' => 'bool',
        'entrieslefttoadd' => 'int',
        'entrieslefttoview' => 'int',
        'groupid' => 'int',
        'inreadonlyperiod' => 'bool',
        'numentries' => 'int',
        'timeavailable' => 'bool',
        'warnings' => '\OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'canaddentry' => null,
        'canapprove' => null,
        'canmanageentries' => null,
        'entrieslefttoadd' => null,
        'entrieslefttoview' => null,
        'groupid' => null,
        'inreadonlyperiod' => null,
        'numentries' => null,
        'timeavailable' => null,
        'warnings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'canaddentry' => false,
        'canapprove' => false,
        'canmanageentries' => false,
        'entrieslefttoadd' => false,
        'entrieslefttoview' => false,
        'groupid' => false,
        'inreadonlyperiod' => false,
        'numentries' => false,
        'timeavailable' => false,
        'warnings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canaddentry' => 'canaddentry',
        'canapprove' => 'canapprove',
        'canmanageentries' => 'canmanageentries',
        'entrieslefttoadd' => 'entrieslefttoadd',
        'entrieslefttoview' => 'entrieslefttoview',
        'groupid' => 'groupid',
        'inreadonlyperiod' => 'inreadonlyperiod',
        'numentries' => 'numentries',
        'timeavailable' => 'timeavailable',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canaddentry' => 'setCanaddentry',
        'canapprove' => 'setCanapprove',
        'canmanageentries' => 'setCanmanageentries',
        'entrieslefttoadd' => 'setEntrieslefttoadd',
        'entrieslefttoview' => 'setEntrieslefttoview',
        'groupid' => 'setGroupid',
        'inreadonlyperiod' => 'setInreadonlyperiod',
        'numentries' => 'setNumentries',
        'timeavailable' => 'setTimeavailable',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canaddentry' => 'getCanaddentry',
        'canapprove' => 'getCanapprove',
        'canmanageentries' => 'getCanmanageentries',
        'entrieslefttoadd' => 'getEntrieslefttoadd',
        'entrieslefttoview' => 'getEntrieslefttoview',
        'groupid' => 'getGroupid',
        'inreadonlyperiod' => 'getInreadonlyperiod',
        'numentries' => 'getNumentries',
        'timeavailable' => 'getTimeavailable',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('canaddentry', $data ?? [], null);
        $this->setIfExists('canapprove', $data ?? [], null);
        $this->setIfExists('canmanageentries', $data ?? [], null);
        $this->setIfExists('entrieslefttoadd', $data ?? [], null);
        $this->setIfExists('entrieslefttoview', $data ?? [], null);
        $this->setIfExists('groupid', $data ?? [], null);
        $this->setIfExists('inreadonlyperiod', $data ?? [], null);
        $this->setIfExists('numentries', $data ?? [], null);
        $this->setIfExists('timeavailable', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['canaddentry'] === null) {
            $invalidProperties[] = "'canaddentry' can't be null";
        }
        if ($this->container['canapprove'] === null) {
            $invalidProperties[] = "'canapprove' can't be null";
        }
        if ($this->container['canmanageentries'] === null) {
            $invalidProperties[] = "'canmanageentries' can't be null";
        }
        if ($this->container['entrieslefttoadd'] === null) {
            $invalidProperties[] = "'entrieslefttoadd' can't be null";
        }
        if ($this->container['entrieslefttoview'] === null) {
            $invalidProperties[] = "'entrieslefttoview' can't be null";
        }
        if ($this->container['groupid'] === null) {
            $invalidProperties[] = "'groupid' can't be null";
        }
        if ($this->container['inreadonlyperiod'] === null) {
            $invalidProperties[] = "'inreadonlyperiod' can't be null";
        }
        if ($this->container['numentries'] === null) {
            $invalidProperties[] = "'numentries' can't be null";
        }
        if ($this->container['timeavailable'] === null) {
            $invalidProperties[] = "'timeavailable' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canaddentry
     *
     * @return bool
     */
    public function getCanaddentry()
    {
        return $this->container['canaddentry'];
    }

    /**
     * Sets canaddentry
     *
     * @param bool $canaddentry Whether the user can add entries or not.
     *
     * @return self
     */
    public function setCanaddentry($canaddentry)
    {
        if (is_null($canaddentry)) {
            throw new \InvalidArgumentException('non-nullable canaddentry cannot be null');
        }
        $this->container['canaddentry'] = $canaddentry;

        return $this;
    }

    /**
     * Gets canapprove
     *
     * @return bool
     */
    public function getCanapprove()
    {
        return $this->container['canapprove'];
    }

    /**
     * Sets canapprove
     *
     * @param bool $canapprove Whether the user can approve entries or not.
     *
     * @return self
     */
    public function setCanapprove($canapprove)
    {
        if (is_null($canapprove)) {
            throw new \InvalidArgumentException('non-nullable canapprove cannot be null');
        }
        $this->container['canapprove'] = $canapprove;

        return $this;
    }

    /**
     * Gets canmanageentries
     *
     * @return bool
     */
    public function getCanmanageentries()
    {
        return $this->container['canmanageentries'];
    }

    /**
     * Sets canmanageentries
     *
     * @param bool $canmanageentries Whether the user can manage entries or not.
     *
     * @return self
     */
    public function setCanmanageentries($canmanageentries)
    {
        if (is_null($canmanageentries)) {
            throw new \InvalidArgumentException('non-nullable canmanageentries cannot be null');
        }
        $this->container['canmanageentries'] = $canmanageentries;

        return $this;
    }

    /**
     * Gets entrieslefttoadd
     *
     * @return int
     */
    public function getEntrieslefttoadd()
    {
        return $this->container['entrieslefttoadd'];
    }

    /**
     * Sets entrieslefttoadd
     *
     * @param int $entrieslefttoadd The number of entries left to complete the activity.
     *
     * @return self
     */
    public function setEntrieslefttoadd($entrieslefttoadd)
    {
        if (is_null($entrieslefttoadd)) {
            throw new \InvalidArgumentException('non-nullable entrieslefttoadd cannot be null');
        }
        $this->container['entrieslefttoadd'] = $entrieslefttoadd;

        return $this;
    }

    /**
     * Gets entrieslefttoview
     *
     * @return int
     */
    public function getEntrieslefttoview()
    {
        return $this->container['entrieslefttoview'];
    }

    /**
     * Sets entrieslefttoview
     *
     * @param int $entrieslefttoview The number of entries left to view other users entries.
     *
     * @return self
     */
    public function setEntrieslefttoview($entrieslefttoview)
    {
        if (is_null($entrieslefttoview)) {
            throw new \InvalidArgumentException('non-nullable entrieslefttoview cannot be null');
        }
        $this->container['entrieslefttoview'] = $entrieslefttoview;

        return $this;
    }

    /**
     * Gets groupid
     *
     * @return int
     */
    public function getGroupid()
    {
        return $this->container['groupid'];
    }

    /**
     * Sets groupid
     *
     * @param int $groupid User current group id (calculated)
     *
     * @return self
     */
    public function setGroupid($groupid)
    {
        if (is_null($groupid)) {
            throw new \InvalidArgumentException('non-nullable groupid cannot be null');
        }
        $this->container['groupid'] = $groupid;

        return $this;
    }

    /**
     * Gets inreadonlyperiod
     *
     * @return bool
     */
    public function getInreadonlyperiod()
    {
        return $this->container['inreadonlyperiod'];
    }

    /**
     * Sets inreadonlyperiod
     *
     * @param bool $inreadonlyperiod Whether the database is in read mode only.
     *
     * @return self
     */
    public function setInreadonlyperiod($inreadonlyperiod)
    {
        if (is_null($inreadonlyperiod)) {
            throw new \InvalidArgumentException('non-nullable inreadonlyperiod cannot be null');
        }
        $this->container['inreadonlyperiod'] = $inreadonlyperiod;

        return $this;
    }

    /**
     * Gets numentries
     *
     * @return int
     */
    public function getNumentries()
    {
        return $this->container['numentries'];
    }

    /**
     * Sets numentries
     *
     * @param int $numentries The number of entries the current user added.
     *
     * @return self
     */
    public function setNumentries($numentries)
    {
        if (is_null($numentries)) {
            throw new \InvalidArgumentException('non-nullable numentries cannot be null');
        }
        $this->container['numentries'] = $numentries;

        return $this;
    }

    /**
     * Gets timeavailable
     *
     * @return bool
     */
    public function getTimeavailable()
    {
        return $this->container['timeavailable'];
    }

    /**
     * Sets timeavailable
     *
     * @param bool $timeavailable Whether the database is available or not by time restrictions.
     *
     * @return self
     */
    public function setTimeavailable($timeavailable)
    {
        if (is_null($timeavailable)) {
            throw new \InvalidArgumentException('non-nullable timeavailable cannot be null');
        }
        $this->container['timeavailable'] = $timeavailable;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null $warnings warnings
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


