<?php
/**
 * CoreGradesUpdateGradesRequestItemdetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreGradesUpdateGradesRequestItemdetails Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreGradesUpdateGradesRequestItemdetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_grades_update_grades_request_itemdetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'deleted' => 'bool',
        'grademax' => 'float',
        'grademin' => 'float',
        'gradetype' => 'int',
        'hidden' => 'bool',
        'idnumber' => 'int',
        'itemname' => 'string',
        'multfactor' => 'float',
        'plusfactor' => 'float',
        'scaleid' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'deleted' => null,
        'grademax' => null,
        'grademin' => null,
        'gradetype' => null,
        'hidden' => null,
        'idnumber' => null,
        'itemname' => null,
        'multfactor' => null,
        'plusfactor' => null,
        'scaleid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'deleted' => false,
        'grademax' => false,
        'grademin' => false,
        'gradetype' => false,
        'hidden' => false,
        'idnumber' => false,
        'itemname' => false,
        'multfactor' => false,
        'plusfactor' => false,
        'scaleid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deleted' => 'deleted',
        'grademax' => 'grademax',
        'grademin' => 'grademin',
        'gradetype' => 'gradetype',
        'hidden' => 'hidden',
        'idnumber' => 'idnumber',
        'itemname' => 'itemname',
        'multfactor' => 'multfactor',
        'plusfactor' => 'plusfactor',
        'scaleid' => 'scaleid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deleted' => 'setDeleted',
        'grademax' => 'setGrademax',
        'grademin' => 'setGrademin',
        'gradetype' => 'setGradetype',
        'hidden' => 'setHidden',
        'idnumber' => 'setIdnumber',
        'itemname' => 'setItemname',
        'multfactor' => 'setMultfactor',
        'plusfactor' => 'setPlusfactor',
        'scaleid' => 'setScaleid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deleted' => 'getDeleted',
        'grademax' => 'getGrademax',
        'grademin' => 'getGrademin',
        'gradetype' => 'getGradetype',
        'hidden' => 'getHidden',
        'idnumber' => 'getIdnumber',
        'itemname' => 'getItemname',
        'multfactor' => 'getMultfactor',
        'plusfactor' => 'getPlusfactor',
        'scaleid' => 'getScaleid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('grademax', $data ?? [], null);
        $this->setIfExists('grademin', $data ?? [], null);
        $this->setIfExists('gradetype', $data ?? [], null);
        $this->setIfExists('hidden', $data ?? [], null);
        $this->setIfExists('idnumber', $data ?? [], null);
        $this->setIfExists('itemname', $data ?? [], 'null');
        $this->setIfExists('multfactor', $data ?? [], null);
        $this->setIfExists('plusfactor', $data ?? [], null);
        $this->setIfExists('scaleid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted True if the grade item should be deleted
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            throw new \InvalidArgumentException('non-nullable deleted cannot be null');
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets grademax
     *
     * @return float|null
     */
    public function getGrademax()
    {
        return $this->container['grademax'];
    }

    /**
     * Sets grademax
     *
     * @param float|null $grademax Maximum grade allowed
     *
     * @return self
     */
    public function setGrademax($grademax)
    {
        if (is_null($grademax)) {
            throw new \InvalidArgumentException('non-nullable grademax cannot be null');
        }
        $this->container['grademax'] = $grademax;

        return $this;
    }

    /**
     * Gets grademin
     *
     * @return float|null
     */
    public function getGrademin()
    {
        return $this->container['grademin'];
    }

    /**
     * Sets grademin
     *
     * @param float|null $grademin Minimum grade allowed
     *
     * @return self
     */
    public function setGrademin($grademin)
    {
        if (is_null($grademin)) {
            throw new \InvalidArgumentException('non-nullable grademin cannot be null');
        }
        $this->container['grademin'] = $grademin;

        return $this;
    }

    /**
     * Gets gradetype
     *
     * @return int|null
     */
    public function getGradetype()
    {
        return $this->container['gradetype'];
    }

    /**
     * Sets gradetype
     *
     * @param int|null $gradetype The type of grade (0 = none, 1 = value, 2 = scale, 3 = text)
     *
     * @return self
     */
    public function setGradetype($gradetype)
    {
        if (is_null($gradetype)) {
            throw new \InvalidArgumentException('non-nullable gradetype cannot be null');
        }
        $this->container['gradetype'] = $gradetype;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool|null
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool|null $hidden True if the grade item is hidden
     *
     * @return self
     */
    public function setHidden($hidden)
    {
        if (is_null($hidden)) {
            throw new \InvalidArgumentException('non-nullable hidden cannot be null');
        }
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets idnumber
     *
     * @return int|null
     */
    public function getIdnumber()
    {
        return $this->container['idnumber'];
    }

    /**
     * Sets idnumber
     *
     * @param int|null $idnumber Arbitrary ID provided by the module responsible for the grade item
     *
     * @return self
     */
    public function setIdnumber($idnumber)
    {
        if (is_null($idnumber)) {
            throw new \InvalidArgumentException('non-nullable idnumber cannot be null');
        }
        $this->container['idnumber'] = $idnumber;

        return $this;
    }

    /**
     * Gets itemname
     *
     * @return string|null
     */
    public function getItemname()
    {
        return $this->container['itemname'];
    }

    /**
     * Sets itemname
     *
     * @param string|null $itemname The grade item name
     *
     * @return self
     */
    public function setItemname($itemname)
    {
        if (is_null($itemname)) {
            throw new \InvalidArgumentException('non-nullable itemname cannot be null');
        }
        $this->container['itemname'] = $itemname;

        return $this;
    }

    /**
     * Gets multfactor
     *
     * @return float|null
     */
    public function getMultfactor()
    {
        return $this->container['multfactor'];
    }

    /**
     * Sets multfactor
     *
     * @param float|null $multfactor Multiply all grades by this number
     *
     * @return self
     */
    public function setMultfactor($multfactor)
    {
        if (is_null($multfactor)) {
            throw new \InvalidArgumentException('non-nullable multfactor cannot be null');
        }
        $this->container['multfactor'] = $multfactor;

        return $this;
    }

    /**
     * Gets plusfactor
     *
     * @return float|null
     */
    public function getPlusfactor()
    {
        return $this->container['plusfactor'];
    }

    /**
     * Sets plusfactor
     *
     * @param float|null $plusfactor Add this to all grades
     *
     * @return self
     */
    public function setPlusfactor($plusfactor)
    {
        if (is_null($plusfactor)) {
            throw new \InvalidArgumentException('non-nullable plusfactor cannot be null');
        }
        $this->container['plusfactor'] = $plusfactor;

        return $this;
    }

    /**
     * Gets scaleid
     *
     * @return int|null
     */
    public function getScaleid()
    {
        return $this->container['scaleid'];
    }

    /**
     * Sets scaleid
     *
     * @param int|null $scaleid The ID of the custom scale being is used
     *
     * @return self
     */
    public function setScaleid($scaleid)
    {
        if (is_null($scaleid)) {
            throw new \InvalidArgumentException('non-nullable scaleid cannot be null');
        }
        $this->container['scaleid'] = $scaleid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


