<?php
/**
 * CoreCompetencyCreatePlan200ResponseCommentarea
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreCompetencyCreatePlan200ResponseCommentarea Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreCompetencyCreatePlan200ResponseCommentarea implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_competency_create_plan_200_response_commentarea';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'autostart' => 'bool',
        'canpost' => 'bool',
        'canpostorhascomments' => 'bool',
        'canview' => 'bool',
        'cid' => 'string',
        'collapsediconkey' => 'string',
        'commentarea' => 'string',
        'component' => 'string',
        'contextid' => 'int',
        'count' => 'int',
        'courseid' => 'int',
        'displaycancel' => 'bool',
        'displaytotalcount' => 'bool',
        'fullwidth' => 'bool',
        'itemid' => 'int',
        'linktext' => 'string',
        'notoggle' => 'bool',
        'template' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'autostart' => null,
        'canpost' => null,
        'canpostorhascomments' => null,
        'canview' => null,
        'cid' => null,
        'collapsediconkey' => null,
        'commentarea' => null,
        'component' => null,
        'contextid' => null,
        'count' => null,
        'courseid' => null,
        'displaycancel' => null,
        'displaytotalcount' => null,
        'fullwidth' => null,
        'itemid' => null,
        'linktext' => null,
        'notoggle' => null,
        'template' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'autostart' => false,
        'canpost' => false,
        'canpostorhascomments' => false,
        'canview' => false,
        'cid' => false,
        'collapsediconkey' => false,
        'commentarea' => false,
        'component' => false,
        'contextid' => false,
        'count' => false,
        'courseid' => false,
        'displaycancel' => false,
        'displaytotalcount' => false,
        'fullwidth' => false,
        'itemid' => false,
        'linktext' => false,
        'notoggle' => false,
        'template' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'autostart' => 'autostart',
        'canpost' => 'canpost',
        'canpostorhascomments' => 'canpostorhascomments',
        'canview' => 'canview',
        'cid' => 'cid',
        'collapsediconkey' => 'collapsediconkey',
        'commentarea' => 'commentarea',
        'component' => 'component',
        'contextid' => 'contextid',
        'count' => 'count',
        'courseid' => 'courseid',
        'displaycancel' => 'displaycancel',
        'displaytotalcount' => 'displaytotalcount',
        'fullwidth' => 'fullwidth',
        'itemid' => 'itemid',
        'linktext' => 'linktext',
        'notoggle' => 'notoggle',
        'template' => 'template'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'autostart' => 'setAutostart',
        'canpost' => 'setCanpost',
        'canpostorhascomments' => 'setCanpostorhascomments',
        'canview' => 'setCanview',
        'cid' => 'setCid',
        'collapsediconkey' => 'setCollapsediconkey',
        'commentarea' => 'setCommentarea',
        'component' => 'setComponent',
        'contextid' => 'setContextid',
        'count' => 'setCount',
        'courseid' => 'setCourseid',
        'displaycancel' => 'setDisplaycancel',
        'displaytotalcount' => 'setDisplaytotalcount',
        'fullwidth' => 'setFullwidth',
        'itemid' => 'setItemid',
        'linktext' => 'setLinktext',
        'notoggle' => 'setNotoggle',
        'template' => 'setTemplate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'autostart' => 'getAutostart',
        'canpost' => 'getCanpost',
        'canpostorhascomments' => 'getCanpostorhascomments',
        'canview' => 'getCanview',
        'cid' => 'getCid',
        'collapsediconkey' => 'getCollapsediconkey',
        'commentarea' => 'getCommentarea',
        'component' => 'getComponent',
        'contextid' => 'getContextid',
        'count' => 'getCount',
        'courseid' => 'getCourseid',
        'displaycancel' => 'getDisplaycancel',
        'displaytotalcount' => 'getDisplaytotalcount',
        'fullwidth' => 'getFullwidth',
        'itemid' => 'getItemid',
        'linktext' => 'getLinktext',
        'notoggle' => 'getNotoggle',
        'template' => 'getTemplate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('autostart', $data ?? [], null);
        $this->setIfExists('canpost', $data ?? [], null);
        $this->setIfExists('canpostorhascomments', $data ?? [], null);
        $this->setIfExists('canview', $data ?? [], null);
        $this->setIfExists('cid', $data ?? [], 'null');
        $this->setIfExists('collapsediconkey', $data ?? [], 'null');
        $this->setIfExists('commentarea', $data ?? [], 'null');
        $this->setIfExists('component', $data ?? [], null);
        $this->setIfExists('contextid', $data ?? [], null);
        $this->setIfExists('count', $data ?? [], null);
        $this->setIfExists('courseid', $data ?? [], null);
        $this->setIfExists('displaycancel', $data ?? [], null);
        $this->setIfExists('displaytotalcount', $data ?? [], null);
        $this->setIfExists('fullwidth', $data ?? [], null);
        $this->setIfExists('itemid', $data ?? [], null);
        $this->setIfExists('linktext', $data ?? [], 'null');
        $this->setIfExists('notoggle', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], 'null');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['autostart'] === null) {
            $invalidProperties[] = "'autostart' can't be null";
        }
        if ($this->container['canpost'] === null) {
            $invalidProperties[] = "'canpost' can't be null";
        }
        if ($this->container['canpostorhascomments'] === null) {
            $invalidProperties[] = "'canpostorhascomments' can't be null";
        }
        if ($this->container['canview'] === null) {
            $invalidProperties[] = "'canview' can't be null";
        }
        if ($this->container['cid'] === null) {
            $invalidProperties[] = "'cid' can't be null";
        }
        if ($this->container['collapsediconkey'] === null) {
            $invalidProperties[] = "'collapsediconkey' can't be null";
        }
        if ($this->container['commentarea'] === null) {
            $invalidProperties[] = "'commentarea' can't be null";
        }
        if ($this->container['component'] === null) {
            $invalidProperties[] = "'component' can't be null";
        }
        if ($this->container['contextid'] === null) {
            $invalidProperties[] = "'contextid' can't be null";
        }
        if ($this->container['count'] === null) {
            $invalidProperties[] = "'count' can't be null";
        }
        if ($this->container['courseid'] === null) {
            $invalidProperties[] = "'courseid' can't be null";
        }
        if ($this->container['displaycancel'] === null) {
            $invalidProperties[] = "'displaycancel' can't be null";
        }
        if ($this->container['displaytotalcount'] === null) {
            $invalidProperties[] = "'displaytotalcount' can't be null";
        }
        if ($this->container['fullwidth'] === null) {
            $invalidProperties[] = "'fullwidth' can't be null";
        }
        if ($this->container['itemid'] === null) {
            $invalidProperties[] = "'itemid' can't be null";
        }
        if ($this->container['linktext'] === null) {
            $invalidProperties[] = "'linktext' can't be null";
        }
        if ($this->container['notoggle'] === null) {
            $invalidProperties[] = "'notoggle' can't be null";
        }
        if ($this->container['template'] === null) {
            $invalidProperties[] = "'template' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets autostart
     *
     * @return bool
     */
    public function getAutostart()
    {
        return $this->container['autostart'];
    }

    /**
     * Sets autostart
     *
     * @param bool $autostart autostart
     *
     * @return self
     */
    public function setAutostart($autostart)
    {
        if (is_null($autostart)) {
            throw new \InvalidArgumentException('non-nullable autostart cannot be null');
        }
        $this->container['autostart'] = $autostart;

        return $this;
    }

    /**
     * Gets canpost
     *
     * @return bool
     */
    public function getCanpost()
    {
        return $this->container['canpost'];
    }

    /**
     * Sets canpost
     *
     * @param bool $canpost canpost
     *
     * @return self
     */
    public function setCanpost($canpost)
    {
        if (is_null($canpost)) {
            throw new \InvalidArgumentException('non-nullable canpost cannot be null');
        }
        $this->container['canpost'] = $canpost;

        return $this;
    }

    /**
     * Gets canpostorhascomments
     *
     * @return bool
     */
    public function getCanpostorhascomments()
    {
        return $this->container['canpostorhascomments'];
    }

    /**
     * Sets canpostorhascomments
     *
     * @param bool $canpostorhascomments canpostorhascomments
     *
     * @return self
     */
    public function setCanpostorhascomments($canpostorhascomments)
    {
        if (is_null($canpostorhascomments)) {
            throw new \InvalidArgumentException('non-nullable canpostorhascomments cannot be null');
        }
        $this->container['canpostorhascomments'] = $canpostorhascomments;

        return $this;
    }

    /**
     * Gets canview
     *
     * @return bool
     */
    public function getCanview()
    {
        return $this->container['canview'];
    }

    /**
     * Sets canview
     *
     * @param bool $canview canview
     *
     * @return self
     */
    public function setCanview($canview)
    {
        if (is_null($canview)) {
            throw new \InvalidArgumentException('non-nullable canview cannot be null');
        }
        $this->container['canview'] = $canview;

        return $this;
    }

    /**
     * Gets cid
     *
     * @return string
     */
    public function getCid()
    {
        return $this->container['cid'];
    }

    /**
     * Sets cid
     *
     * @param string $cid cid
     *
     * @return self
     */
    public function setCid($cid)
    {
        if (is_null($cid)) {
            throw new \InvalidArgumentException('non-nullable cid cannot be null');
        }
        $this->container['cid'] = $cid;

        return $this;
    }

    /**
     * Gets collapsediconkey
     *
     * @return string
     */
    public function getCollapsediconkey()
    {
        return $this->container['collapsediconkey'];
    }

    /**
     * Sets collapsediconkey
     *
     * @param string $collapsediconkey collapsediconkey
     *
     * @return self
     */
    public function setCollapsediconkey($collapsediconkey)
    {
        if (is_null($collapsediconkey)) {
            throw new \InvalidArgumentException('non-nullable collapsediconkey cannot be null');
        }
        $this->container['collapsediconkey'] = $collapsediconkey;

        return $this;
    }

    /**
     * Gets commentarea
     *
     * @return string
     */
    public function getCommentarea()
    {
        return $this->container['commentarea'];
    }

    /**
     * Sets commentarea
     *
     * @param string $commentarea commentarea
     *
     * @return self
     */
    public function setCommentarea($commentarea)
    {
        if (is_null($commentarea)) {
            throw new \InvalidArgumentException('non-nullable commentarea cannot be null');
        }
        $this->container['commentarea'] = $commentarea;

        return $this;
    }

    /**
     * Gets component
     *
     * @return string
     */
    public function getComponent()
    {
        return $this->container['component'];
    }

    /**
     * Sets component
     *
     * @param string $component component
     *
     * @return self
     */
    public function setComponent($component)
    {
        if (is_null($component)) {
            throw new \InvalidArgumentException('non-nullable component cannot be null');
        }
        $this->container['component'] = $component;

        return $this;
    }

    /**
     * Gets contextid
     *
     * @return int
     */
    public function getContextid()
    {
        return $this->container['contextid'];
    }

    /**
     * Sets contextid
     *
     * @param int $contextid contextid
     *
     * @return self
     */
    public function setContextid($contextid)
    {
        if (is_null($contextid)) {
            throw new \InvalidArgumentException('non-nullable contextid cannot be null');
        }
        $this->container['contextid'] = $contextid;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count count
     *
     * @return self
     */
    public function setCount($count)
    {
        if (is_null($count)) {
            throw new \InvalidArgumentException('non-nullable count cannot be null');
        }
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets courseid
     *
     * @return int
     */
    public function getCourseid()
    {
        return $this->container['courseid'];
    }

    /**
     * Sets courseid
     *
     * @param int $courseid courseid
     *
     * @return self
     */
    public function setCourseid($courseid)
    {
        if (is_null($courseid)) {
            throw new \InvalidArgumentException('non-nullable courseid cannot be null');
        }
        $this->container['courseid'] = $courseid;

        return $this;
    }

    /**
     * Gets displaycancel
     *
     * @return bool
     */
    public function getDisplaycancel()
    {
        return $this->container['displaycancel'];
    }

    /**
     * Sets displaycancel
     *
     * @param bool $displaycancel displaycancel
     *
     * @return self
     */
    public function setDisplaycancel($displaycancel)
    {
        if (is_null($displaycancel)) {
            throw new \InvalidArgumentException('non-nullable displaycancel cannot be null');
        }
        $this->container['displaycancel'] = $displaycancel;

        return $this;
    }

    /**
     * Gets displaytotalcount
     *
     * @return bool
     */
    public function getDisplaytotalcount()
    {
        return $this->container['displaytotalcount'];
    }

    /**
     * Sets displaytotalcount
     *
     * @param bool $displaytotalcount displaytotalcount
     *
     * @return self
     */
    public function setDisplaytotalcount($displaytotalcount)
    {
        if (is_null($displaytotalcount)) {
            throw new \InvalidArgumentException('non-nullable displaytotalcount cannot be null');
        }
        $this->container['displaytotalcount'] = $displaytotalcount;

        return $this;
    }

    /**
     * Gets fullwidth
     *
     * @return bool
     */
    public function getFullwidth()
    {
        return $this->container['fullwidth'];
    }

    /**
     * Sets fullwidth
     *
     * @param bool $fullwidth fullwidth
     *
     * @return self
     */
    public function setFullwidth($fullwidth)
    {
        if (is_null($fullwidth)) {
            throw new \InvalidArgumentException('non-nullable fullwidth cannot be null');
        }
        $this->container['fullwidth'] = $fullwidth;

        return $this;
    }

    /**
     * Gets itemid
     *
     * @return int
     */
    public function getItemid()
    {
        return $this->container['itemid'];
    }

    /**
     * Sets itemid
     *
     * @param int $itemid itemid
     *
     * @return self
     */
    public function setItemid($itemid)
    {
        if (is_null($itemid)) {
            throw new \InvalidArgumentException('non-nullable itemid cannot be null');
        }
        $this->container['itemid'] = $itemid;

        return $this;
    }

    /**
     * Gets linktext
     *
     * @return string
     */
    public function getLinktext()
    {
        return $this->container['linktext'];
    }

    /**
     * Sets linktext
     *
     * @param string $linktext linktext
     *
     * @return self
     */
    public function setLinktext($linktext)
    {
        if (is_null($linktext)) {
            throw new \InvalidArgumentException('non-nullable linktext cannot be null');
        }
        $this->container['linktext'] = $linktext;

        return $this;
    }

    /**
     * Gets notoggle
     *
     * @return bool
     */
    public function getNotoggle()
    {
        return $this->container['notoggle'];
    }

    /**
     * Sets notoggle
     *
     * @param bool $notoggle notoggle
     *
     * @return self
     */
    public function setNotoggle($notoggle)
    {
        if (is_null($notoggle)) {
            throw new \InvalidArgumentException('non-nullable notoggle cannot be null');
        }
        $this->container['notoggle'] = $notoggle;

        return $this;
    }

    /**
     * Gets template
     *
     * @return string
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param string $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


