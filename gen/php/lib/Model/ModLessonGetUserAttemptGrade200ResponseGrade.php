<?php
/**
 * ModLessonGetUserAttemptGrade200ResponseGrade
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModLessonGetUserAttemptGrade200ResponseGrade Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModLessonGetUserAttemptGrade200ResponseGrade implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_lesson_get_user_attempt_grade_200_response_grade';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attempts' => 'int',
        'earned' => 'float',
        'grade' => 'float',
        'manualpoints' => 'float',
        'nmanual' => 'int',
        'nquestions' => 'int',
        'total' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'attempts' => null,
        'earned' => null,
        'grade' => null,
        'manualpoints' => null,
        'nmanual' => null,
        'nquestions' => null,
        'total' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'attempts' => false,
        'earned' => false,
        'grade' => false,
        'manualpoints' => false,
        'nmanual' => false,
        'nquestions' => false,
        'total' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attempts' => 'attempts',
        'earned' => 'earned',
        'grade' => 'grade',
        'manualpoints' => 'manualpoints',
        'nmanual' => 'nmanual',
        'nquestions' => 'nquestions',
        'total' => 'total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attempts' => 'setAttempts',
        'earned' => 'setEarned',
        'grade' => 'setGrade',
        'manualpoints' => 'setManualpoints',
        'nmanual' => 'setNmanual',
        'nquestions' => 'setNquestions',
        'total' => 'setTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attempts' => 'getAttempts',
        'earned' => 'getEarned',
        'grade' => 'getGrade',
        'manualpoints' => 'getManualpoints',
        'nmanual' => 'getNmanual',
        'nquestions' => 'getNquestions',
        'total' => 'getTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('attempts', $data ?? [], null);
        $this->setIfExists('earned', $data ?? [], null);
        $this->setIfExists('grade', $data ?? [], null);
        $this->setIfExists('manualpoints', $data ?? [], null);
        $this->setIfExists('nmanual', $data ?? [], null);
        $this->setIfExists('nquestions', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['attempts'] === null) {
            $invalidProperties[] = "'attempts' can't be null";
        }
        if ($this->container['earned'] === null) {
            $invalidProperties[] = "'earned' can't be null";
        }
        if ($this->container['grade'] === null) {
            $invalidProperties[] = "'grade' can't be null";
        }
        if ($this->container['manualpoints'] === null) {
            $invalidProperties[] = "'manualpoints' can't be null";
        }
        if ($this->container['nmanual'] === null) {
            $invalidProperties[] = "'nmanual' can't be null";
        }
        if ($this->container['nquestions'] === null) {
            $invalidProperties[] = "'nquestions' can't be null";
        }
        if ($this->container['total'] === null) {
            $invalidProperties[] = "'total' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attempts
     *
     * @return int
     */
    public function getAttempts()
    {
        return $this->container['attempts'];
    }

    /**
     * Sets attempts
     *
     * @param int $attempts Number of question attempts
     *
     * @return self
     */
    public function setAttempts($attempts)
    {
        if (is_null($attempts)) {
            throw new \InvalidArgumentException('non-nullable attempts cannot be null');
        }
        $this->container['attempts'] = $attempts;

        return $this;
    }

    /**
     * Gets earned
     *
     * @return float
     */
    public function getEarned()
    {
        return $this->container['earned'];
    }

    /**
     * Sets earned
     *
     * @param float $earned Points earned by student
     *
     * @return self
     */
    public function setEarned($earned)
    {
        if (is_null($earned)) {
            throw new \InvalidArgumentException('non-nullable earned cannot be null');
        }
        $this->container['earned'] = $earned;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return float
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param float $grade Calculated percentage grade
     *
     * @return self
     */
    public function setGrade($grade)
    {
        if (is_null($grade)) {
            throw new \InvalidArgumentException('non-nullable grade cannot be null');
        }
        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets manualpoints
     *
     * @return float
     */
    public function getManualpoints()
    {
        return $this->container['manualpoints'];
    }

    /**
     * Sets manualpoints
     *
     * @param float $manualpoints Point value for manually graded questions
     *
     * @return self
     */
    public function setManualpoints($manualpoints)
    {
        if (is_null($manualpoints)) {
            throw new \InvalidArgumentException('non-nullable manualpoints cannot be null');
        }
        $this->container['manualpoints'] = $manualpoints;

        return $this;
    }

    /**
     * Gets nmanual
     *
     * @return int
     */
    public function getNmanual()
    {
        return $this->container['nmanual'];
    }

    /**
     * Sets nmanual
     *
     * @param int $nmanual Number of manually graded questions
     *
     * @return self
     */
    public function setNmanual($nmanual)
    {
        if (is_null($nmanual)) {
            throw new \InvalidArgumentException('non-nullable nmanual cannot be null');
        }
        $this->container['nmanual'] = $nmanual;

        return $this;
    }

    /**
     * Gets nquestions
     *
     * @return int
     */
    public function getNquestions()
    {
        return $this->container['nquestions'];
    }

    /**
     * Sets nquestions
     *
     * @param int $nquestions Number of questions answered
     *
     * @return self
     */
    public function setNquestions($nquestions)
    {
        if (is_null($nquestions)) {
            throw new \InvalidArgumentException('non-nullable nquestions cannot be null');
        }
        $this->container['nquestions'] = $nquestions;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float $total Max points possible
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


