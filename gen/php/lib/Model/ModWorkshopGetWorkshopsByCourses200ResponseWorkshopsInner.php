<?php
/**
 * ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_workshop_get_workshops_by_courses_200_response_workshops_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assessmentend' => 'int',
        'assessmentstart' => 'int',
        'conclusion' => 'string',
        'conclusionfiles' => '\OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]',
        'conclusionformat' => 'int',
        'course' => 'int',
        'coursemodule' => 'int',
        'evaluation' => 'string',
        'examplesmode' => 'int',
        'grade' => 'float',
        'gradedecimals' => 'int',
        'gradinggrade' => 'float',
        'id' => 'int',
        'instructauthors' => 'string',
        'instructauthorsfiles' => '\OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]',
        'instructauthorsformat' => 'int',
        'instructreviewers' => 'string',
        'instructreviewersfiles' => '\OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]',
        'instructreviewersformat' => 'int',
        'intro' => 'string',
        'introfiles' => '\OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]',
        'introformat' => 'int',
        'lang' => 'string',
        'latesubmissions' => 'bool',
        'maxbytes' => 'int',
        'name' => 'string',
        'nattachments' => 'int',
        'overallfeedbackfiles' => 'int',
        'overallfeedbackfiletypes' => 'string',
        'overallfeedbackmaxbytes' => 'int',
        'overallfeedbackmode' => 'int',
        'phase' => 'int',
        'phaseswitchassessment' => 'bool',
        'strategy' => 'string',
        'submissionend' => 'int',
        'submissionfiletypes' => 'string',
        'submissionstart' => 'int',
        'submissiontypefile' => 'int',
        'submissiontypetext' => 'int',
        'timemodified' => 'int',
        'useexamples' => 'bool',
        'usepeerassessment' => 'bool',
        'useselfassessment' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'assessmentend' => null,
        'assessmentstart' => null,
        'conclusion' => null,
        'conclusionfiles' => null,
        'conclusionformat' => null,
        'course' => null,
        'coursemodule' => null,
        'evaluation' => null,
        'examplesmode' => null,
        'grade' => null,
        'gradedecimals' => null,
        'gradinggrade' => null,
        'id' => null,
        'instructauthors' => null,
        'instructauthorsfiles' => null,
        'instructauthorsformat' => null,
        'instructreviewers' => null,
        'instructreviewersfiles' => null,
        'instructreviewersformat' => null,
        'intro' => null,
        'introfiles' => null,
        'introformat' => null,
        'lang' => null,
        'latesubmissions' => null,
        'maxbytes' => null,
        'name' => null,
        'nattachments' => null,
        'overallfeedbackfiles' => null,
        'overallfeedbackfiletypes' => null,
        'overallfeedbackmaxbytes' => null,
        'overallfeedbackmode' => null,
        'phase' => null,
        'phaseswitchassessment' => null,
        'strategy' => null,
        'submissionend' => null,
        'submissionfiletypes' => null,
        'submissionstart' => null,
        'submissiontypefile' => null,
        'submissiontypetext' => null,
        'timemodified' => null,
        'useexamples' => null,
        'usepeerassessment' => null,
        'useselfassessment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'assessmentend' => false,
        'assessmentstart' => false,
        'conclusion' => false,
        'conclusionfiles' => false,
        'conclusionformat' => false,
        'course' => false,
        'coursemodule' => false,
        'evaluation' => false,
        'examplesmode' => false,
        'grade' => false,
        'gradedecimals' => false,
        'gradinggrade' => false,
        'id' => false,
        'instructauthors' => false,
        'instructauthorsfiles' => false,
        'instructauthorsformat' => false,
        'instructreviewers' => false,
        'instructreviewersfiles' => false,
        'instructreviewersformat' => false,
        'intro' => false,
        'introfiles' => false,
        'introformat' => false,
        'lang' => false,
        'latesubmissions' => false,
        'maxbytes' => false,
        'name' => false,
        'nattachments' => false,
        'overallfeedbackfiles' => false,
        'overallfeedbackfiletypes' => false,
        'overallfeedbackmaxbytes' => false,
        'overallfeedbackmode' => false,
        'phase' => false,
        'phaseswitchassessment' => false,
        'strategy' => false,
        'submissionend' => false,
        'submissionfiletypes' => false,
        'submissionstart' => false,
        'submissiontypefile' => false,
        'submissiontypetext' => false,
        'timemodified' => false,
        'useexamples' => false,
        'usepeerassessment' => false,
        'useselfassessment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assessmentend' => 'assessmentend',
        'assessmentstart' => 'assessmentstart',
        'conclusion' => 'conclusion',
        'conclusionfiles' => 'conclusionfiles',
        'conclusionformat' => 'conclusionformat',
        'course' => 'course',
        'coursemodule' => 'coursemodule',
        'evaluation' => 'evaluation',
        'examplesmode' => 'examplesmode',
        'grade' => 'grade',
        'gradedecimals' => 'gradedecimals',
        'gradinggrade' => 'gradinggrade',
        'id' => 'id',
        'instructauthors' => 'instructauthors',
        'instructauthorsfiles' => 'instructauthorsfiles',
        'instructauthorsformat' => 'instructauthorsformat',
        'instructreviewers' => 'instructreviewers',
        'instructreviewersfiles' => 'instructreviewersfiles',
        'instructreviewersformat' => 'instructreviewersformat',
        'intro' => 'intro',
        'introfiles' => 'introfiles',
        'introformat' => 'introformat',
        'lang' => 'lang',
        'latesubmissions' => 'latesubmissions',
        'maxbytes' => 'maxbytes',
        'name' => 'name',
        'nattachments' => 'nattachments',
        'overallfeedbackfiles' => 'overallfeedbackfiles',
        'overallfeedbackfiletypes' => 'overallfeedbackfiletypes',
        'overallfeedbackmaxbytes' => 'overallfeedbackmaxbytes',
        'overallfeedbackmode' => 'overallfeedbackmode',
        'phase' => 'phase',
        'phaseswitchassessment' => 'phaseswitchassessment',
        'strategy' => 'strategy',
        'submissionend' => 'submissionend',
        'submissionfiletypes' => 'submissionfiletypes',
        'submissionstart' => 'submissionstart',
        'submissiontypefile' => 'submissiontypefile',
        'submissiontypetext' => 'submissiontypetext',
        'timemodified' => 'timemodified',
        'useexamples' => 'useexamples',
        'usepeerassessment' => 'usepeerassessment',
        'useselfassessment' => 'useselfassessment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assessmentend' => 'setAssessmentend',
        'assessmentstart' => 'setAssessmentstart',
        'conclusion' => 'setConclusion',
        'conclusionfiles' => 'setConclusionfiles',
        'conclusionformat' => 'setConclusionformat',
        'course' => 'setCourse',
        'coursemodule' => 'setCoursemodule',
        'evaluation' => 'setEvaluation',
        'examplesmode' => 'setExamplesmode',
        'grade' => 'setGrade',
        'gradedecimals' => 'setGradedecimals',
        'gradinggrade' => 'setGradinggrade',
        'id' => 'setId',
        'instructauthors' => 'setInstructauthors',
        'instructauthorsfiles' => 'setInstructauthorsfiles',
        'instructauthorsformat' => 'setInstructauthorsformat',
        'instructreviewers' => 'setInstructreviewers',
        'instructreviewersfiles' => 'setInstructreviewersfiles',
        'instructreviewersformat' => 'setInstructreviewersformat',
        'intro' => 'setIntro',
        'introfiles' => 'setIntrofiles',
        'introformat' => 'setIntroformat',
        'lang' => 'setLang',
        'latesubmissions' => 'setLatesubmissions',
        'maxbytes' => 'setMaxbytes',
        'name' => 'setName',
        'nattachments' => 'setNattachments',
        'overallfeedbackfiles' => 'setOverallfeedbackfiles',
        'overallfeedbackfiletypes' => 'setOverallfeedbackfiletypes',
        'overallfeedbackmaxbytes' => 'setOverallfeedbackmaxbytes',
        'overallfeedbackmode' => 'setOverallfeedbackmode',
        'phase' => 'setPhase',
        'phaseswitchassessment' => 'setPhaseswitchassessment',
        'strategy' => 'setStrategy',
        'submissionend' => 'setSubmissionend',
        'submissionfiletypes' => 'setSubmissionfiletypes',
        'submissionstart' => 'setSubmissionstart',
        'submissiontypefile' => 'setSubmissiontypefile',
        'submissiontypetext' => 'setSubmissiontypetext',
        'timemodified' => 'setTimemodified',
        'useexamples' => 'setUseexamples',
        'usepeerassessment' => 'setUsepeerassessment',
        'useselfassessment' => 'setUseselfassessment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assessmentend' => 'getAssessmentend',
        'assessmentstart' => 'getAssessmentstart',
        'conclusion' => 'getConclusion',
        'conclusionfiles' => 'getConclusionfiles',
        'conclusionformat' => 'getConclusionformat',
        'course' => 'getCourse',
        'coursemodule' => 'getCoursemodule',
        'evaluation' => 'getEvaluation',
        'examplesmode' => 'getExamplesmode',
        'grade' => 'getGrade',
        'gradedecimals' => 'getGradedecimals',
        'gradinggrade' => 'getGradinggrade',
        'id' => 'getId',
        'instructauthors' => 'getInstructauthors',
        'instructauthorsfiles' => 'getInstructauthorsfiles',
        'instructauthorsformat' => 'getInstructauthorsformat',
        'instructreviewers' => 'getInstructreviewers',
        'instructreviewersfiles' => 'getInstructreviewersfiles',
        'instructreviewersformat' => 'getInstructreviewersformat',
        'intro' => 'getIntro',
        'introfiles' => 'getIntrofiles',
        'introformat' => 'getIntroformat',
        'lang' => 'getLang',
        'latesubmissions' => 'getLatesubmissions',
        'maxbytes' => 'getMaxbytes',
        'name' => 'getName',
        'nattachments' => 'getNattachments',
        'overallfeedbackfiles' => 'getOverallfeedbackfiles',
        'overallfeedbackfiletypes' => 'getOverallfeedbackfiletypes',
        'overallfeedbackmaxbytes' => 'getOverallfeedbackmaxbytes',
        'overallfeedbackmode' => 'getOverallfeedbackmode',
        'phase' => 'getPhase',
        'phaseswitchassessment' => 'getPhaseswitchassessment',
        'strategy' => 'getStrategy',
        'submissionend' => 'getSubmissionend',
        'submissionfiletypes' => 'getSubmissionfiletypes',
        'submissionstart' => 'getSubmissionstart',
        'submissiontypefile' => 'getSubmissiontypefile',
        'submissiontypetext' => 'getSubmissiontypetext',
        'timemodified' => 'getTimemodified',
        'useexamples' => 'getUseexamples',
        'usepeerassessment' => 'getUsepeerassessment',
        'useselfassessment' => 'getUseselfassessment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('assessmentend', $data ?? [], 0);
        $this->setIfExists('assessmentstart', $data ?? [], 0);
        $this->setIfExists('conclusion', $data ?? [], 'null');
        $this->setIfExists('conclusionfiles', $data ?? [], null);
        $this->setIfExists('conclusionformat', $data ?? [], 0);
        $this->setIfExists('course', $data ?? [], null);
        $this->setIfExists('coursemodule', $data ?? [], null);
        $this->setIfExists('evaluation', $data ?? [], 'null');
        $this->setIfExists('examplesmode', $data ?? [], 0);
        $this->setIfExists('grade', $data ?? [], 80);
        $this->setIfExists('gradedecimals', $data ?? [], 0);
        $this->setIfExists('gradinggrade', $data ?? [], 20);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('instructauthors', $data ?? [], 'null');
        $this->setIfExists('instructauthorsfiles', $data ?? [], null);
        $this->setIfExists('instructauthorsformat', $data ?? [], 0);
        $this->setIfExists('instructreviewers', $data ?? [], 'null');
        $this->setIfExists('instructreviewersfiles', $data ?? [], null);
        $this->setIfExists('instructreviewersformat', $data ?? [], 0);
        $this->setIfExists('intro', $data ?? [], '');
        $this->setIfExists('introfiles', $data ?? [], null);
        $this->setIfExists('introformat', $data ?? [], 0);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('latesubmissions', $data ?? [], false);
        $this->setIfExists('maxbytes', $data ?? [], 100000);
        $this->setIfExists('name', $data ?? [], 'null');
        $this->setIfExists('nattachments', $data ?? [], 1);
        $this->setIfExists('overallfeedbackfiles', $data ?? [], 0);
        $this->setIfExists('overallfeedbackfiletypes', $data ?? [], 'null');
        $this->setIfExists('overallfeedbackmaxbytes', $data ?? [], 100000);
        $this->setIfExists('overallfeedbackmode', $data ?? [], 1);
        $this->setIfExists('phase', $data ?? [], 0);
        $this->setIfExists('phaseswitchassessment', $data ?? [], false);
        $this->setIfExists('strategy', $data ?? [], 'null');
        $this->setIfExists('submissionend', $data ?? [], 0);
        $this->setIfExists('submissionfiletypes', $data ?? [], null);
        $this->setIfExists('submissionstart', $data ?? [], 0);
        $this->setIfExists('submissiontypefile', $data ?? [], 1);
        $this->setIfExists('submissiontypetext', $data ?? [], 1);
        $this->setIfExists('timemodified', $data ?? [], null);
        $this->setIfExists('useexamples', $data ?? [], false);
        $this->setIfExists('usepeerassessment', $data ?? [], false);
        $this->setIfExists('useselfassessment', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assessmentend
     *
     * @return int|null
     */
    public function getAssessmentend()
    {
        return $this->container['assessmentend'];
    }

    /**
     * Sets assessmentend
     *
     * @param int|null $assessmentend 0 = will be closed manually, greater than 0 the timestamp of the end of the assessment phase.
     *
     * @return self
     */
    public function setAssessmentend($assessmentend)
    {
        if (is_null($assessmentend)) {
            throw new \InvalidArgumentException('non-nullable assessmentend cannot be null');
        }
        $this->container['assessmentend'] = $assessmentend;

        return $this;
    }

    /**
     * Gets assessmentstart
     *
     * @return int|null
     */
    public function getAssessmentstart()
    {
        return $this->container['assessmentstart'];
    }

    /**
     * Sets assessmentstart
     *
     * @param int|null $assessmentstart 0 = will be started manually, greater than 0 the timestamp of the start of the assessment phase.
     *
     * @return self
     */
    public function setAssessmentstart($assessmentstart)
    {
        if (is_null($assessmentstart)) {
            throw new \InvalidArgumentException('non-nullable assessmentstart cannot be null');
        }
        $this->container['assessmentstart'] = $assessmentstart;

        return $this;
    }

    /**
     * Gets conclusion
     *
     * @return string|null
     */
    public function getConclusion()
    {
        return $this->container['conclusion'];
    }

    /**
     * Sets conclusion
     *
     * @param string|null $conclusion A text to be displayed at the end of the workshop.
     *
     * @return self
     */
    public function setConclusion($conclusion)
    {
        if (is_null($conclusion)) {
            throw new \InvalidArgumentException('non-nullable conclusion cannot be null');
        }
        $this->container['conclusion'] = $conclusion;

        return $this;
    }

    /**
     * Gets conclusionfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null
     */
    public function getConclusionfiles()
    {
        return $this->container['conclusionfiles'];
    }

    /**
     * Sets conclusionfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null $conclusionfiles conclusionfiles
     *
     * @return self
     */
    public function setConclusionfiles($conclusionfiles)
    {
        if (is_null($conclusionfiles)) {
            throw new \InvalidArgumentException('non-nullable conclusionfiles cannot be null');
        }
        $this->container['conclusionfiles'] = $conclusionfiles;

        return $this;
    }

    /**
     * Gets conclusionformat
     *
     * @return int|null
     */
    public function getConclusionformat()
    {
        return $this->container['conclusionformat'];
    }

    /**
     * Sets conclusionformat
     *
     * @param int|null $conclusionformat conclusion format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setConclusionformat($conclusionformat)
    {
        if (is_null($conclusionformat)) {
            throw new \InvalidArgumentException('non-nullable conclusionformat cannot be null');
        }
        $this->container['conclusionformat'] = $conclusionformat;

        return $this;
    }

    /**
     * Gets course
     *
     * @return int|null
     */
    public function getCourse()
    {
        return $this->container['course'];
    }

    /**
     * Sets course
     *
     * @param int|null $course Course id this workshop is part of.
     *
     * @return self
     */
    public function setCourse($course)
    {
        if (is_null($course)) {
            throw new \InvalidArgumentException('non-nullable course cannot be null');
        }
        $this->container['course'] = $course;

        return $this;
    }

    /**
     * Gets coursemodule
     *
     * @return int|null
     */
    public function getCoursemodule()
    {
        return $this->container['coursemodule'];
    }

    /**
     * Sets coursemodule
     *
     * @param int|null $coursemodule coursemodule
     *
     * @return self
     */
    public function setCoursemodule($coursemodule)
    {
        if (is_null($coursemodule)) {
            throw new \InvalidArgumentException('non-nullable coursemodule cannot be null');
        }
        $this->container['coursemodule'] = $coursemodule;

        return $this;
    }

    /**
     * Gets evaluation
     *
     * @return string|null
     */
    public function getEvaluation()
    {
        return $this->container['evaluation'];
    }

    /**
     * Sets evaluation
     *
     * @param string|null $evaluation The recently used grading evaluation method.
     *
     * @return self
     */
    public function setEvaluation($evaluation)
    {
        if (is_null($evaluation)) {
            throw new \InvalidArgumentException('non-nullable evaluation cannot be null');
        }
        $this->container['evaluation'] = $evaluation;

        return $this;
    }

    /**
     * Gets examplesmode
     *
     * @return int|null
     */
    public function getExamplesmode()
    {
        return $this->container['examplesmode'];
    }

    /**
     * Sets examplesmode
     *
     * @param int|null $examplesmode 0 = example assessments are voluntary, 1 = examples must be assessed before submission,                     2 = examples are available after own submission and must be assessed before peer/self assessment phase.
     *
     * @return self
     */
    public function setExamplesmode($examplesmode)
    {
        if (is_null($examplesmode)) {
            throw new \InvalidArgumentException('non-nullable examplesmode cannot be null');
        }
        $this->container['examplesmode'] = $examplesmode;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return float|null
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param float|null $grade The maximum grade for submission.
     *
     * @return self
     */
    public function setGrade($grade)
    {
        if (is_null($grade)) {
            throw new \InvalidArgumentException('non-nullable grade cannot be null');
        }
        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets gradedecimals
     *
     * @return int|null
     */
    public function getGradedecimals()
    {
        return $this->container['gradedecimals'];
    }

    /**
     * Sets gradedecimals
     *
     * @param int|null $gradedecimals Number of digits that should be shown after the decimal point when displaying grades.
     *
     * @return self
     */
    public function setGradedecimals($gradedecimals)
    {
        if (is_null($gradedecimals)) {
            throw new \InvalidArgumentException('non-nullable gradedecimals cannot be null');
        }
        $this->container['gradedecimals'] = $gradedecimals;

        return $this;
    }

    /**
     * Gets gradinggrade
     *
     * @return float|null
     */
    public function getGradinggrade()
    {
        return $this->container['gradinggrade'];
    }

    /**
     * Sets gradinggrade
     *
     * @param float|null $gradinggrade The maximum grade for assessment.
     *
     * @return self
     */
    public function setGradinggrade($gradinggrade)
    {
        if (is_null($gradinggrade)) {
            throw new \InvalidArgumentException('non-nullable gradinggrade cannot be null');
        }
        $this->container['gradinggrade'] = $gradinggrade;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The primary key of the record.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets instructauthors
     *
     * @return string|null
     */
    public function getInstructauthors()
    {
        return $this->container['instructauthors'];
    }

    /**
     * Sets instructauthors
     *
     * @param string|null $instructauthors Instructions for the submission phase.
     *
     * @return self
     */
    public function setInstructauthors($instructauthors)
    {
        if (is_null($instructauthors)) {
            throw new \InvalidArgumentException('non-nullable instructauthors cannot be null');
        }
        $this->container['instructauthors'] = $instructauthors;

        return $this;
    }

    /**
     * Gets instructauthorsfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null
     */
    public function getInstructauthorsfiles()
    {
        return $this->container['instructauthorsfiles'];
    }

    /**
     * Sets instructauthorsfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null $instructauthorsfiles instructauthorsfiles
     *
     * @return self
     */
    public function setInstructauthorsfiles($instructauthorsfiles)
    {
        if (is_null($instructauthorsfiles)) {
            throw new \InvalidArgumentException('non-nullable instructauthorsfiles cannot be null');
        }
        $this->container['instructauthorsfiles'] = $instructauthorsfiles;

        return $this;
    }

    /**
     * Gets instructauthorsformat
     *
     * @return int|null
     */
    public function getInstructauthorsformat()
    {
        return $this->container['instructauthorsformat'];
    }

    /**
     * Sets instructauthorsformat
     *
     * @param int|null $instructauthorsformat instructauthors format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setInstructauthorsformat($instructauthorsformat)
    {
        if (is_null($instructauthorsformat)) {
            throw new \InvalidArgumentException('non-nullable instructauthorsformat cannot be null');
        }
        $this->container['instructauthorsformat'] = $instructauthorsformat;

        return $this;
    }

    /**
     * Gets instructreviewers
     *
     * @return string|null
     */
    public function getInstructreviewers()
    {
        return $this->container['instructreviewers'];
    }

    /**
     * Sets instructreviewers
     *
     * @param string|null $instructreviewers Instructions for the assessment phase.
     *
     * @return self
     */
    public function setInstructreviewers($instructreviewers)
    {
        if (is_null($instructreviewers)) {
            throw new \InvalidArgumentException('non-nullable instructreviewers cannot be null');
        }
        $this->container['instructreviewers'] = $instructreviewers;

        return $this;
    }

    /**
     * Gets instructreviewersfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null
     */
    public function getInstructreviewersfiles()
    {
        return $this->container['instructreviewersfiles'];
    }

    /**
     * Sets instructreviewersfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null $instructreviewersfiles instructreviewersfiles
     *
     * @return self
     */
    public function setInstructreviewersfiles($instructreviewersfiles)
    {
        if (is_null($instructreviewersfiles)) {
            throw new \InvalidArgumentException('non-nullable instructreviewersfiles cannot be null');
        }
        $this->container['instructreviewersfiles'] = $instructreviewersfiles;

        return $this;
    }

    /**
     * Gets instructreviewersformat
     *
     * @return int|null
     */
    public function getInstructreviewersformat()
    {
        return $this->container['instructreviewersformat'];
    }

    /**
     * Sets instructreviewersformat
     *
     * @param int|null $instructreviewersformat instructreviewers format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setInstructreviewersformat($instructreviewersformat)
    {
        if (is_null($instructreviewersformat)) {
            throw new \InvalidArgumentException('non-nullable instructreviewersformat cannot be null');
        }
        $this->container['instructreviewersformat'] = $instructreviewersformat;

        return $this;
    }

    /**
     * Gets intro
     *
     * @return string|null
     */
    public function getIntro()
    {
        return $this->container['intro'];
    }

    /**
     * Sets intro
     *
     * @param string|null $intro Workshop introduction text.
     *
     * @return self
     */
    public function setIntro($intro)
    {
        if (is_null($intro)) {
            throw new \InvalidArgumentException('non-nullable intro cannot be null');
        }
        $this->container['intro'] = $intro;

        return $this;
    }

    /**
     * Gets introfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null
     */
    public function getIntrofiles()
    {
        return $this->container['introfiles'];
    }

    /**
     * Sets introfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null $introfiles introfiles
     *
     * @return self
     */
    public function setIntrofiles($introfiles)
    {
        if (is_null($introfiles)) {
            throw new \InvalidArgumentException('non-nullable introfiles cannot be null');
        }
        $this->container['introfiles'] = $introfiles;

        return $this;
    }

    /**
     * Gets introformat
     *
     * @return int|null
     */
    public function getIntroformat()
    {
        return $this->container['introformat'];
    }

    /**
     * Sets introformat
     *
     * @param int|null $introformat intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setIntroformat($introformat)
    {
        if (is_null($introformat)) {
            throw new \InvalidArgumentException('non-nullable introformat cannot be null');
        }
        $this->container['introformat'] = $introformat;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang Forced activity language
     *
     * @return self
     */
    public function setLang($lang)
    {
        if (is_null($lang)) {
            throw new \InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets latesubmissions
     *
     * @return bool|null
     */
    public function getLatesubmissions()
    {
        return $this->container['latesubmissions'];
    }

    /**
     * Sets latesubmissions
     *
     * @param bool|null $latesubmissions Allow submitting the work after the deadline.
     *
     * @return self
     */
    public function setLatesubmissions($latesubmissions)
    {
        if (is_null($latesubmissions)) {
            throw new \InvalidArgumentException('non-nullable latesubmissions cannot be null');
        }
        $this->container['latesubmissions'] = $latesubmissions;

        return $this;
    }

    /**
     * Gets maxbytes
     *
     * @return int|null
     */
    public function getMaxbytes()
    {
        return $this->container['maxbytes'];
    }

    /**
     * Sets maxbytes
     *
     * @param int|null $maxbytes Maximum size of the one attached file.
     *
     * @return self
     */
    public function setMaxbytes($maxbytes)
    {
        if (is_null($maxbytes)) {
            throw new \InvalidArgumentException('non-nullable maxbytes cannot be null');
        }
        $this->container['maxbytes'] = $maxbytes;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Workshop name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nattachments
     *
     * @return int|null
     */
    public function getNattachments()
    {
        return $this->container['nattachments'];
    }

    /**
     * Sets nattachments
     *
     * @param int|null $nattachments Maximum number of submission attachments.
     *
     * @return self
     */
    public function setNattachments($nattachments)
    {
        if (is_null($nattachments)) {
            throw new \InvalidArgumentException('non-nullable nattachments cannot be null');
        }
        $this->container['nattachments'] = $nattachments;

        return $this;
    }

    /**
     * Gets overallfeedbackfiles
     *
     * @return int|null
     */
    public function getOverallfeedbackfiles()
    {
        return $this->container['overallfeedbackfiles'];
    }

    /**
     * Sets overallfeedbackfiles
     *
     * @param int|null $overallfeedbackfiles Number of allowed attachments to the overall feedback.
     *
     * @return self
     */
    public function setOverallfeedbackfiles($overallfeedbackfiles)
    {
        if (is_null($overallfeedbackfiles)) {
            throw new \InvalidArgumentException('non-nullable overallfeedbackfiles cannot be null');
        }
        $this->container['overallfeedbackfiles'] = $overallfeedbackfiles;

        return $this;
    }

    /**
     * Gets overallfeedbackfiletypes
     *
     * @return string|null
     */
    public function getOverallfeedbackfiletypes()
    {
        return $this->container['overallfeedbackfiletypes'];
    }

    /**
     * Sets overallfeedbackfiletypes
     *
     * @param string|null $overallfeedbackfiletypes Comma separated list of file extensions.
     *
     * @return self
     */
    public function setOverallfeedbackfiletypes($overallfeedbackfiletypes)
    {
        if (is_null($overallfeedbackfiletypes)) {
            throw new \InvalidArgumentException('non-nullable overallfeedbackfiletypes cannot be null');
        }
        $this->container['overallfeedbackfiletypes'] = $overallfeedbackfiletypes;

        return $this;
    }

    /**
     * Gets overallfeedbackmaxbytes
     *
     * @return int|null
     */
    public function getOverallfeedbackmaxbytes()
    {
        return $this->container['overallfeedbackmaxbytes'];
    }

    /**
     * Sets overallfeedbackmaxbytes
     *
     * @param int|null $overallfeedbackmaxbytes Maximum size of one file attached to the overall feedback.
     *
     * @return self
     */
    public function setOverallfeedbackmaxbytes($overallfeedbackmaxbytes)
    {
        if (is_null($overallfeedbackmaxbytes)) {
            throw new \InvalidArgumentException('non-nullable overallfeedbackmaxbytes cannot be null');
        }
        $this->container['overallfeedbackmaxbytes'] = $overallfeedbackmaxbytes;

        return $this;
    }

    /**
     * Gets overallfeedbackmode
     *
     * @return int|null
     */
    public function getOverallfeedbackmode()
    {
        return $this->container['overallfeedbackmode'];
    }

    /**
     * Sets overallfeedbackmode
     *
     * @param int|null $overallfeedbackmode Mode of the overall feedback support.
     *
     * @return self
     */
    public function setOverallfeedbackmode($overallfeedbackmode)
    {
        if (is_null($overallfeedbackmode)) {
            throw new \InvalidArgumentException('non-nullable overallfeedbackmode cannot be null');
        }
        $this->container['overallfeedbackmode'] = $overallfeedbackmode;

        return $this;
    }

    /**
     * Gets phase
     *
     * @return int|null
     */
    public function getPhase()
    {
        return $this->container['phase'];
    }

    /**
     * Sets phase
     *
     * @param int|null $phase The current phase of workshop (0 = not available, 1 = submission, 2 = assessment, 3 = closed).
     *
     * @return self
     */
    public function setPhase($phase)
    {
        if (is_null($phase)) {
            throw new \InvalidArgumentException('non-nullable phase cannot be null');
        }
        $this->container['phase'] = $phase;

        return $this;
    }

    /**
     * Gets phaseswitchassessment
     *
     * @return bool|null
     */
    public function getPhaseswitchassessment()
    {
        return $this->container['phaseswitchassessment'];
    }

    /**
     * Sets phaseswitchassessment
     *
     * @param bool|null $phaseswitchassessment Automatically switch to the assessment phase after the submissions deadline.
     *
     * @return self
     */
    public function setPhaseswitchassessment($phaseswitchassessment)
    {
        if (is_null($phaseswitchassessment)) {
            throw new \InvalidArgumentException('non-nullable phaseswitchassessment cannot be null');
        }
        $this->container['phaseswitchassessment'] = $phaseswitchassessment;

        return $this;
    }

    /**
     * Gets strategy
     *
     * @return string|null
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     *
     * @param string|null $strategy The type of the current grading strategy used in this workshop.
     *
     * @return self
     */
    public function setStrategy($strategy)
    {
        if (is_null($strategy)) {
            throw new \InvalidArgumentException('non-nullable strategy cannot be null');
        }
        $this->container['strategy'] = $strategy;

        return $this;
    }

    /**
     * Gets submissionend
     *
     * @return int|null
     */
    public function getSubmissionend()
    {
        return $this->container['submissionend'];
    }

    /**
     * Sets submissionend
     *
     * @param int|null $submissionend 0 = will be closed manually, greater than 0 the timestamp of the end of the submission phase.
     *
     * @return self
     */
    public function setSubmissionend($submissionend)
    {
        if (is_null($submissionend)) {
            throw new \InvalidArgumentException('non-nullable submissionend cannot be null');
        }
        $this->container['submissionend'] = $submissionend;

        return $this;
    }

    /**
     * Gets submissionfiletypes
     *
     * @return string|null
     */
    public function getSubmissionfiletypes()
    {
        return $this->container['submissionfiletypes'];
    }

    /**
     * Sets submissionfiletypes
     *
     * @param string|null $submissionfiletypes Comma separated list of file extensions.
     *
     * @return self
     */
    public function setSubmissionfiletypes($submissionfiletypes)
    {
        if (is_null($submissionfiletypes)) {
            throw new \InvalidArgumentException('non-nullable submissionfiletypes cannot be null');
        }
        $this->container['submissionfiletypes'] = $submissionfiletypes;

        return $this;
    }

    /**
     * Gets submissionstart
     *
     * @return int|null
     */
    public function getSubmissionstart()
    {
        return $this->container['submissionstart'];
    }

    /**
     * Sets submissionstart
     *
     * @param int|null $submissionstart 0 = will be started manually, greater than 0 the timestamp of the start of the submission phase.
     *
     * @return self
     */
    public function setSubmissionstart($submissionstart)
    {
        if (is_null($submissionstart)) {
            throw new \InvalidArgumentException('non-nullable submissionstart cannot be null');
        }
        $this->container['submissionstart'] = $submissionstart;

        return $this;
    }

    /**
     * Gets submissiontypefile
     *
     * @return int|null
     */
    public function getSubmissiontypefile()
    {
        return $this->container['submissiontypefile'];
    }

    /**
     * Sets submissiontypefile
     *
     * @param int|null $submissiontypefile Indicates whether a file upload is required as part of each submission. 0 for no, 1 for optional, 2 for required.
     *
     * @return self
     */
    public function setSubmissiontypefile($submissiontypefile)
    {
        if (is_null($submissiontypefile)) {
            throw new \InvalidArgumentException('non-nullable submissiontypefile cannot be null');
        }
        $this->container['submissiontypefile'] = $submissiontypefile;

        return $this;
    }

    /**
     * Gets submissiontypetext
     *
     * @return int|null
     */
    public function getSubmissiontypetext()
    {
        return $this->container['submissiontypetext'];
    }

    /**
     * Sets submissiontypetext
     *
     * @param int|null $submissiontypetext Indicates whether text is required as part of each submission. 0 for no, 1 for optional, 2 for required.
     *
     * @return self
     */
    public function setSubmissiontypetext($submissiontypetext)
    {
        if (is_null($submissiontypetext)) {
            throw new \InvalidArgumentException('non-nullable submissiontypetext cannot be null');
        }
        $this->container['submissiontypetext'] = $submissiontypetext;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified The timestamp when the module was modified.
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets useexamples
     *
     * @return bool|null
     */
    public function getUseexamples()
    {
        return $this->container['useexamples'];
    }

    /**
     * Sets useexamples
     *
     * @param bool|null $useexamples Optional feature: students practise evaluating on example submissions from teacher.
     *
     * @return self
     */
    public function setUseexamples($useexamples)
    {
        if (is_null($useexamples)) {
            throw new \InvalidArgumentException('non-nullable useexamples cannot be null');
        }
        $this->container['useexamples'] = $useexamples;

        return $this;
    }

    /**
     * Gets usepeerassessment
     *
     * @return bool|null
     */
    public function getUsepeerassessment()
    {
        return $this->container['usepeerassessment'];
    }

    /**
     * Sets usepeerassessment
     *
     * @param bool|null $usepeerassessment Optional feature: students perform peer assessment of others' work.
     *
     * @return self
     */
    public function setUsepeerassessment($usepeerassessment)
    {
        if (is_null($usepeerassessment)) {
            throw new \InvalidArgumentException('non-nullable usepeerassessment cannot be null');
        }
        $this->container['usepeerassessment'] = $usepeerassessment;

        return $this;
    }

    /**
     * Gets useselfassessment
     *
     * @return bool|null
     */
    public function getUseselfassessment()
    {
        return $this->container['useselfassessment'];
    }

    /**
     * Sets useselfassessment
     *
     * @param bool|null $useselfassessment Optional feature: students perform self assessment of their own work.
     *
     * @return self
     */
    public function setUseselfassessment($useselfassessment)
    {
        if (is_null($useselfassessment)) {
            throw new \InvalidArgumentException('non-nullable useselfassessment cannot be null');
        }
        $this->container['useselfassessment'] = $useselfassessment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


