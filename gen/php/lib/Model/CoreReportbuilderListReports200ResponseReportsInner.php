<?php
/**
 * CoreReportbuilderListReports200ResponseReportsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreReportbuilderListReports200ResponseReportsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreReportbuilderListReports200ResponseReportsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_reportbuilder_list_reports_200_response_reports_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'area' => 'string',
        'component' => 'string',
        'conditiondata' => 'string',
        'contextid' => 'int',
        'id' => 'int',
        'itemid' => 'int',
        'modifiedby' => '\OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser',
        'name' => 'string',
        'settingsdata' => 'string',
        'source' => 'string',
        'sourcename' => 'string',
        'timecreated' => 'int',
        'timemodified' => 'int',
        'type' => 'int',
        'uniquerows' => 'bool',
        'usercreated' => 'int',
        'usermodified' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'area' => null,
        'component' => null,
        'conditiondata' => null,
        'contextid' => null,
        'id' => null,
        'itemid' => null,
        'modifiedby' => null,
        'name' => null,
        'settingsdata' => null,
        'source' => null,
        'sourcename' => null,
        'timecreated' => null,
        'timemodified' => null,
        'type' => null,
        'uniquerows' => null,
        'usercreated' => null,
        'usermodified' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'area' => false,
        'component' => false,
        'conditiondata' => false,
        'contextid' => false,
        'id' => false,
        'itemid' => false,
        'modifiedby' => false,
        'name' => false,
        'settingsdata' => false,
        'source' => false,
        'sourcename' => false,
        'timecreated' => false,
        'timemodified' => false,
        'type' => false,
        'uniquerows' => false,
        'usercreated' => false,
        'usermodified' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'area' => 'area',
        'component' => 'component',
        'conditiondata' => 'conditiondata',
        'contextid' => 'contextid',
        'id' => 'id',
        'itemid' => 'itemid',
        'modifiedby' => 'modifiedby',
        'name' => 'name',
        'settingsdata' => 'settingsdata',
        'source' => 'source',
        'sourcename' => 'sourcename',
        'timecreated' => 'timecreated',
        'timemodified' => 'timemodified',
        'type' => 'type',
        'uniquerows' => 'uniquerows',
        'usercreated' => 'usercreated',
        'usermodified' => 'usermodified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'area' => 'setArea',
        'component' => 'setComponent',
        'conditiondata' => 'setConditiondata',
        'contextid' => 'setContextid',
        'id' => 'setId',
        'itemid' => 'setItemid',
        'modifiedby' => 'setModifiedby',
        'name' => 'setName',
        'settingsdata' => 'setSettingsdata',
        'source' => 'setSource',
        'sourcename' => 'setSourcename',
        'timecreated' => 'setTimecreated',
        'timemodified' => 'setTimemodified',
        'type' => 'setType',
        'uniquerows' => 'setUniquerows',
        'usercreated' => 'setUsercreated',
        'usermodified' => 'setUsermodified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'area' => 'getArea',
        'component' => 'getComponent',
        'conditiondata' => 'getConditiondata',
        'contextid' => 'getContextid',
        'id' => 'getId',
        'itemid' => 'getItemid',
        'modifiedby' => 'getModifiedby',
        'name' => 'getName',
        'settingsdata' => 'getSettingsdata',
        'source' => 'getSource',
        'sourcename' => 'getSourcename',
        'timecreated' => 'getTimecreated',
        'timemodified' => 'getTimemodified',
        'type' => 'getType',
        'uniquerows' => 'getUniquerows',
        'usercreated' => 'getUsercreated',
        'usermodified' => 'getUsermodified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('area', $data ?? [], '');
        $this->setIfExists('component', $data ?? [], '');
        $this->setIfExists('conditiondata', $data ?? [], 'null');
        $this->setIfExists('contextid', $data ?? [], {});
        $this->setIfExists('id', $data ?? [], 0);
        $this->setIfExists('itemid', $data ?? [], 0);
        $this->setIfExists('modifiedby', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('settingsdata', $data ?? [], 'null');
        $this->setIfExists('source', $data ?? [], 'null');
        $this->setIfExists('sourcename', $data ?? [], 'null');
        $this->setIfExists('timecreated', $data ?? [], 0);
        $this->setIfExists('timemodified', $data ?? [], 0);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('uniquerows', $data ?? [], false);
        $this->setIfExists('usercreated', $data ?? [], {});
        $this->setIfExists('usermodified', $data ?? [], 0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets area
     *
     * @return string|null
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param string|null $area area
     *
     * @return self
     */
    public function setArea($area)
    {
        if (is_null($area)) {
            throw new \InvalidArgumentException('non-nullable area cannot be null');
        }
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets component
     *
     * @return string|null
     */
    public function getComponent()
    {
        return $this->container['component'];
    }

    /**
     * Sets component
     *
     * @param string|null $component component
     *
     * @return self
     */
    public function setComponent($component)
    {
        if (is_null($component)) {
            throw new \InvalidArgumentException('non-nullable component cannot be null');
        }
        $this->container['component'] = $component;

        return $this;
    }

    /**
     * Gets conditiondata
     *
     * @return string|null
     */
    public function getConditiondata()
    {
        return $this->container['conditiondata'];
    }

    /**
     * Sets conditiondata
     *
     * @param string|null $conditiondata conditiondata
     *
     * @return self
     */
    public function setConditiondata($conditiondata)
    {
        if (is_null($conditiondata)) {
            throw new \InvalidArgumentException('non-nullable conditiondata cannot be null');
        }
        $this->container['conditiondata'] = $conditiondata;

        return $this;
    }

    /**
     * Gets contextid
     *
     * @return int|null
     */
    public function getContextid()
    {
        return $this->container['contextid'];
    }

    /**
     * Sets contextid
     *
     * @param int|null $contextid contextid
     *
     * @return self
     */
    public function setContextid($contextid)
    {
        if (is_null($contextid)) {
            throw new \InvalidArgumentException('non-nullable contextid cannot be null');
        }
        $this->container['contextid'] = $contextid;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets itemid
     *
     * @return int|null
     */
    public function getItemid()
    {
        return $this->container['itemid'];
    }

    /**
     * Sets itemid
     *
     * @param int|null $itemid itemid
     *
     * @return self
     */
    public function setItemid($itemid)
    {
        if (is_null($itemid)) {
            throw new \InvalidArgumentException('non-nullable itemid cannot be null');
        }
        $this->container['itemid'] = $itemid;

        return $this;
    }

    /**
     * Gets modifiedby
     *
     * @return \OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser|null
     */
    public function getModifiedby()
    {
        return $this->container['modifiedby'];
    }

    /**
     * Sets modifiedby
     *
     * @param \OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser|null $modifiedby modifiedby
     *
     * @return self
     */
    public function setModifiedby($modifiedby)
    {
        if (is_null($modifiedby)) {
            throw new \InvalidArgumentException('non-nullable modifiedby cannot be null');
        }
        $this->container['modifiedby'] = $modifiedby;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets settingsdata
     *
     * @return string|null
     */
    public function getSettingsdata()
    {
        return $this->container['settingsdata'];
    }

    /**
     * Sets settingsdata
     *
     * @param string|null $settingsdata settingsdata
     *
     * @return self
     */
    public function setSettingsdata($settingsdata)
    {
        if (is_null($settingsdata)) {
            throw new \InvalidArgumentException('non-nullable settingsdata cannot be null');
        }
        $this->container['settingsdata'] = $settingsdata;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets sourcename
     *
     * @return string|null
     */
    public function getSourcename()
    {
        return $this->container['sourcename'];
    }

    /**
     * Sets sourcename
     *
     * @param string|null $sourcename sourcename
     *
     * @return self
     */
    public function setSourcename($sourcename)
    {
        if (is_null($sourcename)) {
            throw new \InvalidArgumentException('non-nullable sourcename cannot be null');
        }
        $this->container['sourcename'] = $sourcename;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return int|null
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param int|null $timecreated timecreated
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified timemodified
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets uniquerows
     *
     * @return bool|null
     */
    public function getUniquerows()
    {
        return $this->container['uniquerows'];
    }

    /**
     * Sets uniquerows
     *
     * @param bool|null $uniquerows uniquerows
     *
     * @return self
     */
    public function setUniquerows($uniquerows)
    {
        if (is_null($uniquerows)) {
            throw new \InvalidArgumentException('non-nullable uniquerows cannot be null');
        }
        $this->container['uniquerows'] = $uniquerows;

        return $this;
    }

    /**
     * Gets usercreated
     *
     * @return int|null
     */
    public function getUsercreated()
    {
        return $this->container['usercreated'];
    }

    /**
     * Sets usercreated
     *
     * @param int|null $usercreated usercreated
     *
     * @return self
     */
    public function setUsercreated($usercreated)
    {
        if (is_null($usercreated)) {
            throw new \InvalidArgumentException('non-nullable usercreated cannot be null');
        }
        $this->container['usercreated'] = $usercreated;

        return $this;
    }

    /**
     * Gets usermodified
     *
     * @return int|null
     */
    public function getUsermodified()
    {
        return $this->container['usermodified'];
    }

    /**
     * Sets usermodified
     *
     * @param int|null $usermodified usermodified
     *
     * @return self
     */
    public function setUsermodified($usermodified)
    {
        if (is_null($usermodified)) {
            throw new \InvalidArgumentException('non-nullable usermodified cannot be null');
        }
        $this->container['usermodified'] = $usermodified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


