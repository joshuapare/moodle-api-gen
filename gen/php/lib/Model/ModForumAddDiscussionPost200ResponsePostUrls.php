<?php
/**
 * ModForumAddDiscussionPost200ResponsePostUrls
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModForumAddDiscussionPost200ResponsePostUrls Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModForumAddDiscussionPost200ResponsePostUrls implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_forum_add_discussion_post_200_response_post_urls';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'delete' => 'string',
        'discuss' => 'string',
        'edit' => 'string',
        'export' => 'string',
        'markasread' => 'string',
        'markasunread' => 'string',
        'reply' => 'string',
        'split' => 'string',
        'view' => 'string',
        'viewisolated' => 'string',
        'viewparent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'delete' => null,
        'discuss' => null,
        'edit' => null,
        'export' => null,
        'markasread' => null,
        'markasunread' => null,
        'reply' => null,
        'split' => null,
        'view' => null,
        'viewisolated' => null,
        'viewparent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'delete' => false,
        'discuss' => false,
        'edit' => false,
        'export' => false,
        'markasread' => false,
        'markasunread' => false,
        'reply' => false,
        'split' => false,
        'view' => false,
        'viewisolated' => false,
        'viewparent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delete' => 'delete',
        'discuss' => 'discuss',
        'edit' => 'edit',
        'export' => 'export',
        'markasread' => 'markasread',
        'markasunread' => 'markasunread',
        'reply' => 'reply',
        'split' => 'split',
        'view' => 'view',
        'viewisolated' => 'viewisolated',
        'viewparent' => 'viewparent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delete' => 'setDelete',
        'discuss' => 'setDiscuss',
        'edit' => 'setEdit',
        'export' => 'setExport',
        'markasread' => 'setMarkasread',
        'markasunread' => 'setMarkasunread',
        'reply' => 'setReply',
        'split' => 'setSplit',
        'view' => 'setView',
        'viewisolated' => 'setViewisolated',
        'viewparent' => 'setViewparent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delete' => 'getDelete',
        'discuss' => 'getDiscuss',
        'edit' => 'getEdit',
        'export' => 'getExport',
        'markasread' => 'getMarkasread',
        'markasunread' => 'getMarkasunread',
        'reply' => 'getReply',
        'split' => 'getSplit',
        'view' => 'getView',
        'viewisolated' => 'getViewisolated',
        'viewparent' => 'getViewparent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('delete', $data ?? [], 'null');
        $this->setIfExists('discuss', $data ?? [], 'null');
        $this->setIfExists('edit', $data ?? [], 'null');
        $this->setIfExists('export', $data ?? [], 'null');
        $this->setIfExists('markasread', $data ?? [], 'null');
        $this->setIfExists('markasunread', $data ?? [], 'null');
        $this->setIfExists('reply', $data ?? [], 'null');
        $this->setIfExists('split', $data ?? [], 'null');
        $this->setIfExists('view', $data ?? [], 'null');
        $this->setIfExists('viewisolated', $data ?? [], 'null');
        $this->setIfExists('viewparent', $data ?? [], 'null');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delete
     *
     * @return string|null
     */
    public function getDelete()
    {
        return $this->container['delete'];
    }

    /**
     * Sets delete
     *
     * @param string|null $delete The URL used to delete the post
     *
     * @return self
     */
    public function setDelete($delete)
    {
        if (is_null($delete)) {
            throw new \InvalidArgumentException('non-nullable delete cannot be null');
        }
        $this->container['delete'] = $delete;

        return $this;
    }

    /**
     * Gets discuss
     *
     * @return string|null
     */
    public function getDiscuss()
    {
        return $this->container['discuss'];
    }

    /**
     * Sets discuss
     *
     * @param string|null $discuss discuss
     *
     * @return self
     */
    public function setDiscuss($discuss)
    {
        if (is_null($discuss)) {
            throw new \InvalidArgumentException('non-nullable discuss cannot be null');
        }
        $this->container['discuss'] = $discuss;

        return $this;
    }

    /**
     * Gets edit
     *
     * @return string|null
     */
    public function getEdit()
    {
        return $this->container['edit'];
    }

    /**
     * Sets edit
     *
     * @param string|null $edit The URL used to edit the post
     *
     * @return self
     */
    public function setEdit($edit)
    {
        if (is_null($edit)) {
            throw new \InvalidArgumentException('non-nullable edit cannot be null');
        }
        $this->container['edit'] = $edit;

        return $this;
    }

    /**
     * Gets export
     *
     * @return string|null
     */
    public function getExport()
    {
        return $this->container['export'];
    }

    /**
     * Sets export
     *
     * @param string|null $export The URL used to export the post
     *
     * @return self
     */
    public function setExport($export)
    {
        if (is_null($export)) {
            throw new \InvalidArgumentException('non-nullable export cannot be null');
        }
        $this->container['export'] = $export;

        return $this;
    }

    /**
     * Gets markasread
     *
     * @return string|null
     */
    public function getMarkasread()
    {
        return $this->container['markasread'];
    }

    /**
     * Sets markasread
     *
     * @param string|null $markasread The URL used to mark the post as read
     *
     * @return self
     */
    public function setMarkasread($markasread)
    {
        if (is_null($markasread)) {
            throw new \InvalidArgumentException('non-nullable markasread cannot be null');
        }
        $this->container['markasread'] = $markasread;

        return $this;
    }

    /**
     * Gets markasunread
     *
     * @return string|null
     */
    public function getMarkasunread()
    {
        return $this->container['markasunread'];
    }

    /**
     * Sets markasunread
     *
     * @param string|null $markasunread The URL used to mark the post as unread
     *
     * @return self
     */
    public function setMarkasunread($markasunread)
    {
        if (is_null($markasunread)) {
            throw new \InvalidArgumentException('non-nullable markasunread cannot be null');
        }
        $this->container['markasunread'] = $markasunread;

        return $this;
    }

    /**
     * Gets reply
     *
     * @return string|null
     */
    public function getReply()
    {
        return $this->container['reply'];
    }

    /**
     * Sets reply
     *
     * @param string|null $reply The URL used to reply to the post
     *
     * @return self
     */
    public function setReply($reply)
    {
        if (is_null($reply)) {
            throw new \InvalidArgumentException('non-nullable reply cannot be null');
        }
        $this->container['reply'] = $reply;

        return $this;
    }

    /**
     * Gets split
     *
     * @return string|null
     */
    public function getSplit()
    {
        return $this->container['split'];
    }

    /**
     * Sets split
     *
     * @param string|null $split The URL used to split the discussion with the selected post being the first post in the new discussion
     *
     * @return self
     */
    public function setSplit($split)
    {
        if (is_null($split)) {
            throw new \InvalidArgumentException('non-nullable split cannot be null');
        }
        $this->container['split'] = $split;

        return $this;
    }

    /**
     * Gets view
     *
     * @return string|null
     */
    public function getView()
    {
        return $this->container['view'];
    }

    /**
     * Sets view
     *
     * @param string|null $view The URL used to view the post
     *
     * @return self
     */
    public function setView($view)
    {
        if (is_null($view)) {
            throw new \InvalidArgumentException('non-nullable view cannot be null');
        }
        $this->container['view'] = $view;

        return $this;
    }

    /**
     * Gets viewisolated
     *
     * @return string|null
     */
    public function getViewisolated()
    {
        return $this->container['viewisolated'];
    }

    /**
     * Sets viewisolated
     *
     * @param string|null $viewisolated The URL used to view the post in isolation
     *
     * @return self
     */
    public function setViewisolated($viewisolated)
    {
        if (is_null($viewisolated)) {
            throw new \InvalidArgumentException('non-nullable viewisolated cannot be null');
        }
        $this->container['viewisolated'] = $viewisolated;

        return $this;
    }

    /**
     * Gets viewparent
     *
     * @return string|null
     */
    public function getViewparent()
    {
        return $this->container['viewparent'];
    }

    /**
     * Sets viewparent
     *
     * @param string|null $viewparent The URL used to view the parent of the post
     *
     * @return self
     */
    public function setViewparent($viewparent)
    {
        if (is_null($viewparent)) {
            throw new \InvalidArgumentException('non-nullable viewparent cannot be null');
        }
        $this->container['viewparent'] = $viewparent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


