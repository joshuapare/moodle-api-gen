<?php
/**
 * CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner Class Doc Comment
 *
 * @category Class
 * @description Activity
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_completion_get_activities_completion_status_200_response_statuses_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cmid' => 'int',
        'details' => '\OpenAPI\Client\Model\CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInnerDetailsInner[]',
        'hascompletion' => 'bool',
        'instance' => 'int',
        'isautomatic' => 'bool',
        'istrackeduser' => 'bool',
        'modname' => 'string',
        'overrideby' => 'int',
        'state' => 'int',
        'timecompleted' => 'int',
        'tracking' => 'int',
        'uservisible' => 'bool',
        'valueused' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cmid' => null,
        'details' => null,
        'hascompletion' => null,
        'instance' => null,
        'isautomatic' => null,
        'istrackeduser' => null,
        'modname' => null,
        'overrideby' => null,
        'state' => null,
        'timecompleted' => null,
        'tracking' => null,
        'uservisible' => null,
        'valueused' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cmid' => false,
        'details' => false,
        'hascompletion' => false,
        'instance' => false,
        'isautomatic' => false,
        'istrackeduser' => false,
        'modname' => false,
        'overrideby' => false,
        'state' => false,
        'timecompleted' => false,
        'tracking' => false,
        'uservisible' => false,
        'valueused' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cmid' => 'cmid',
        'details' => 'details',
        'hascompletion' => 'hascompletion',
        'instance' => 'instance',
        'isautomatic' => 'isautomatic',
        'istrackeduser' => 'istrackeduser',
        'modname' => 'modname',
        'overrideby' => 'overrideby',
        'state' => 'state',
        'timecompleted' => 'timecompleted',
        'tracking' => 'tracking',
        'uservisible' => 'uservisible',
        'valueused' => 'valueused'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cmid' => 'setCmid',
        'details' => 'setDetails',
        'hascompletion' => 'setHascompletion',
        'instance' => 'setInstance',
        'isautomatic' => 'setIsautomatic',
        'istrackeduser' => 'setIstrackeduser',
        'modname' => 'setModname',
        'overrideby' => 'setOverrideby',
        'state' => 'setState',
        'timecompleted' => 'setTimecompleted',
        'tracking' => 'setTracking',
        'uservisible' => 'setUservisible',
        'valueused' => 'setValueused'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cmid' => 'getCmid',
        'details' => 'getDetails',
        'hascompletion' => 'getHascompletion',
        'instance' => 'getInstance',
        'isautomatic' => 'getIsautomatic',
        'istrackeduser' => 'getIstrackeduser',
        'modname' => 'getModname',
        'overrideby' => 'getOverrideby',
        'state' => 'getState',
        'timecompleted' => 'getTimecompleted',
        'tracking' => 'getTracking',
        'uservisible' => 'getUservisible',
        'valueused' => 'getValueused'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cmid', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('hascompletion', $data ?? [], null);
        $this->setIfExists('instance', $data ?? [], null);
        $this->setIfExists('isautomatic', $data ?? [], null);
        $this->setIfExists('istrackeduser', $data ?? [], null);
        $this->setIfExists('modname', $data ?? [], 'null');
        $this->setIfExists('overrideby', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('timecompleted', $data ?? [], null);
        $this->setIfExists('tracking', $data ?? [], null);
        $this->setIfExists('uservisible', $data ?? [], null);
        $this->setIfExists('valueused', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cmid
     *
     * @return int|null
     */
    public function getCmid()
    {
        return $this->container['cmid'];
    }

    /**
     * Sets cmid
     *
     * @param int|null $cmid course module ID
     *
     * @return self
     */
    public function setCmid($cmid)
    {
        if (is_null($cmid)) {
            throw new \InvalidArgumentException('non-nullable cmid cannot be null');
        }
        $this->container['cmid'] = $cmid;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \OpenAPI\Client\Model\CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInnerDetailsInner[]|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \OpenAPI\Client\Model\CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInnerDetailsInner[]|null $details details
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets hascompletion
     *
     * @return bool|null
     */
    public function getHascompletion()
    {
        return $this->container['hascompletion'];
    }

    /**
     * Sets hascompletion
     *
     * @param bool|null $hascompletion Whether this activity module has completion enabled
     *
     * @return self
     */
    public function setHascompletion($hascompletion)
    {
        if (is_null($hascompletion)) {
            throw new \InvalidArgumentException('non-nullable hascompletion cannot be null');
        }
        $this->container['hascompletion'] = $hascompletion;

        return $this;
    }

    /**
     * Gets instance
     *
     * @return int|null
     */
    public function getInstance()
    {
        return $this->container['instance'];
    }

    /**
     * Sets instance
     *
     * @param int|null $instance instance ID
     *
     * @return self
     */
    public function setInstance($instance)
    {
        if (is_null($instance)) {
            throw new \InvalidArgumentException('non-nullable instance cannot be null');
        }
        $this->container['instance'] = $instance;

        return $this;
    }

    /**
     * Gets isautomatic
     *
     * @return bool|null
     */
    public function getIsautomatic()
    {
        return $this->container['isautomatic'];
    }

    /**
     * Sets isautomatic
     *
     * @param bool|null $isautomatic Whether this activity module instance tracks completion automatically.
     *
     * @return self
     */
    public function setIsautomatic($isautomatic)
    {
        if (is_null($isautomatic)) {
            throw new \InvalidArgumentException('non-nullable isautomatic cannot be null');
        }
        $this->container['isautomatic'] = $isautomatic;

        return $this;
    }

    /**
     * Gets istrackeduser
     *
     * @return bool|null
     */
    public function getIstrackeduser()
    {
        return $this->container['istrackeduser'];
    }

    /**
     * Sets istrackeduser
     *
     * @param bool|null $istrackeduser Whether completion is being tracked for this user.
     *
     * @return self
     */
    public function setIstrackeduser($istrackeduser)
    {
        if (is_null($istrackeduser)) {
            throw new \InvalidArgumentException('non-nullable istrackeduser cannot be null');
        }
        $this->container['istrackeduser'] = $istrackeduser;

        return $this;
    }

    /**
     * Gets modname
     *
     * @return string|null
     */
    public function getModname()
    {
        return $this->container['modname'];
    }

    /**
     * Sets modname
     *
     * @param string|null $modname activity module name
     *
     * @return self
     */
    public function setModname($modname)
    {
        if (is_null($modname)) {
            throw new \InvalidArgumentException('non-nullable modname cannot be null');
        }
        $this->container['modname'] = $modname;

        return $this;
    }

    /**
     * Gets overrideby
     *
     * @return int|null
     */
    public function getOverrideby()
    {
        return $this->container['overrideby'];
    }

    /**
     * Sets overrideby
     *
     * @param int|null $overrideby The user id who has overriden the status, or null
     *
     * @return self
     */
    public function setOverrideby($overrideby)
    {
        if (is_null($overrideby)) {
            throw new \InvalidArgumentException('non-nullable overrideby cannot be null');
        }
        $this->container['overrideby'] = $overrideby;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int|null $state Completion state value:                                     0 means incomplete,                                     1 complete,                                     2 complete pass,                                     3 complete fail
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets timecompleted
     *
     * @return int|null
     */
    public function getTimecompleted()
    {
        return $this->container['timecompleted'];
    }

    /**
     * Sets timecompleted
     *
     * @param int|null $timecompleted timestamp for completed activity
     *
     * @return self
     */
    public function setTimecompleted($timecompleted)
    {
        if (is_null($timecompleted)) {
            throw new \InvalidArgumentException('non-nullable timecompleted cannot be null');
        }
        $this->container['timecompleted'] = $timecompleted;

        return $this;
    }

    /**
     * Gets tracking
     *
     * @return int|null
     */
    public function getTracking()
    {
        return $this->container['tracking'];
    }

    /**
     * Sets tracking
     *
     * @param int|null $tracking type of tracking:                                     0 means none,                                     1 manual,                                     2 automatic
     *
     * @return self
     */
    public function setTracking($tracking)
    {
        if (is_null($tracking)) {
            throw new \InvalidArgumentException('non-nullable tracking cannot be null');
        }
        $this->container['tracking'] = $tracking;

        return $this;
    }

    /**
     * Gets uservisible
     *
     * @return bool|null
     */
    public function getUservisible()
    {
        return $this->container['uservisible'];
    }

    /**
     * Sets uservisible
     *
     * @param bool|null $uservisible Whether this activity is visible to the user.
     *
     * @return self
     */
    public function setUservisible($uservisible)
    {
        if (is_null($uservisible)) {
            throw new \InvalidArgumentException('non-nullable uservisible cannot be null');
        }
        $this->container['uservisible'] = $uservisible;

        return $this;
    }

    /**
     * Gets valueused
     *
     * @return bool|null
     */
    public function getValueused()
    {
        return $this->container['valueused'];
    }

    /**
     * Sets valueused
     *
     * @param bool|null $valueused Whether the completion status affects the availability of another activity.
     *
     * @return self
     */
    public function setValueused($valueused)
    {
        if (is_null($valueused)) {
            throw new \InvalidArgumentException('non-nullable valueused cannot be null');
        }
        $this->container['valueused'] = $valueused;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


