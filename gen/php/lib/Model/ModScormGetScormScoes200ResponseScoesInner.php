<?php
/**
 * ModScormGetScormScoes200ResponseScoesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModScormGetScormScoes200ResponseScoesInner Class Doc Comment
 *
 * @category Class
 * @description SCORM SCO data
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModScormGetScormScoes200ResponseScoesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_scorm_get_scorm_scoes_200_response_scoes_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'extradata' => '\OpenAPI\Client\Model\ModScormGetScormScoes200ResponseScoesInnerExtradataInner[]',
        'id' => 'int',
        'identifier' => 'string',
        'launch' => 'string',
        'manifest' => 'string',
        'organization' => 'string',
        'parent' => 'string',
        'scorm' => 'int',
        'scormtype' => 'string',
        'sortorder' => 'int',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'extradata' => null,
        'id' => null,
        'identifier' => null,
        'launch' => null,
        'manifest' => null,
        'organization' => null,
        'parent' => null,
        'scorm' => null,
        'scormtype' => null,
        'sortorder' => null,
        'title' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'extradata' => false,
        'id' => false,
        'identifier' => false,
        'launch' => false,
        'manifest' => false,
        'organization' => false,
        'parent' => false,
        'scorm' => false,
        'scormtype' => false,
        'sortorder' => false,
        'title' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'extradata' => 'extradata',
        'id' => 'id',
        'identifier' => 'identifier',
        'launch' => 'launch',
        'manifest' => 'manifest',
        'organization' => 'organization',
        'parent' => 'parent',
        'scorm' => 'scorm',
        'scormtype' => 'scormtype',
        'sortorder' => 'sortorder',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'extradata' => 'setExtradata',
        'id' => 'setId',
        'identifier' => 'setIdentifier',
        'launch' => 'setLaunch',
        'manifest' => 'setManifest',
        'organization' => 'setOrganization',
        'parent' => 'setParent',
        'scorm' => 'setScorm',
        'scormtype' => 'setScormtype',
        'sortorder' => 'setSortorder',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'extradata' => 'getExtradata',
        'id' => 'getId',
        'identifier' => 'getIdentifier',
        'launch' => 'getLaunch',
        'manifest' => 'getManifest',
        'organization' => 'getOrganization',
        'parent' => 'getParent',
        'scorm' => 'getScorm',
        'scormtype' => 'getScormtype',
        'sortorder' => 'getSortorder',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('extradata', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('identifier', $data ?? [], 'null');
        $this->setIfExists('launch', $data ?? [], 'null');
        $this->setIfExists('manifest', $data ?? [], 'null');
        $this->setIfExists('organization', $data ?? [], 'null');
        $this->setIfExists('parent', $data ?? [], 'null');
        $this->setIfExists('scorm', $data ?? [], null);
        $this->setIfExists('scormtype', $data ?? [], 'null');
        $this->setIfExists('sortorder', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], 'null');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets extradata
     *
     * @return \OpenAPI\Client\Model\ModScormGetScormScoes200ResponseScoesInnerExtradataInner[]|null
     */
    public function getExtradata()
    {
        return $this->container['extradata'];
    }

    /**
     * Sets extradata
     *
     * @param \OpenAPI\Client\Model\ModScormGetScormScoes200ResponseScoesInnerExtradataInner[]|null $extradata extradata
     *
     * @return self
     */
    public function setExtradata($extradata)
    {
        if (is_null($extradata)) {
            throw new \InvalidArgumentException('non-nullable extradata cannot be null');
        }
        $this->container['extradata'] = $extradata;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id sco id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string|null $identifier identifier
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        if (is_null($identifier)) {
            throw new \InvalidArgumentException('non-nullable identifier cannot be null');
        }
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets launch
     *
     * @return string|null
     */
    public function getLaunch()
    {
        return $this->container['launch'];
    }

    /**
     * Sets launch
     *
     * @param string|null $launch launch file
     *
     * @return self
     */
    public function setLaunch($launch)
    {
        if (is_null($launch)) {
            throw new \InvalidArgumentException('non-nullable launch cannot be null');
        }
        $this->container['launch'] = $launch;

        return $this;
    }

    /**
     * Gets manifest
     *
     * @return string|null
     */
    public function getManifest()
    {
        return $this->container['manifest'];
    }

    /**
     * Sets manifest
     *
     * @param string|null $manifest manifest id
     *
     * @return self
     */
    public function setManifest($manifest)
    {
        if (is_null($manifest)) {
            throw new \InvalidArgumentException('non-nullable manifest cannot be null');
        }
        $this->container['manifest'] = $manifest;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return string|null
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string|null $organization organization id
     *
     * @return self
     */
    public function setOrganization($organization)
    {
        if (is_null($organization)) {
            throw new \InvalidArgumentException('non-nullable organization cannot be null');
        }
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return string|null
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param string|null $parent parent
     *
     * @return self
     */
    public function setParent($parent)
    {
        if (is_null($parent)) {
            throw new \InvalidArgumentException('non-nullable parent cannot be null');
        }
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets scorm
     *
     * @return int|null
     */
    public function getScorm()
    {
        return $this->container['scorm'];
    }

    /**
     * Sets scorm
     *
     * @param int|null $scorm scorm id
     *
     * @return self
     */
    public function setScorm($scorm)
    {
        if (is_null($scorm)) {
            throw new \InvalidArgumentException('non-nullable scorm cannot be null');
        }
        $this->container['scorm'] = $scorm;

        return $this;
    }

    /**
     * Gets scormtype
     *
     * @return string|null
     */
    public function getScormtype()
    {
        return $this->container['scormtype'];
    }

    /**
     * Sets scormtype
     *
     * @param string|null $scormtype scorm type (asset, sco)
     *
     * @return self
     */
    public function setScormtype($scormtype)
    {
        if (is_null($scormtype)) {
            throw new \InvalidArgumentException('non-nullable scormtype cannot be null');
        }
        $this->container['scormtype'] = $scormtype;

        return $this;
    }

    /**
     * Gets sortorder
     *
     * @return int|null
     */
    public function getSortorder()
    {
        return $this->container['sortorder'];
    }

    /**
     * Sets sortorder
     *
     * @param int|null $sortorder sort order
     *
     * @return self
     */
    public function setSortorder($sortorder)
    {
        if (is_null($sortorder)) {
            throw new \InvalidArgumentException('non-nullable sortorder cannot be null');
        }
        $this->container['sortorder'] = $sortorder;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title sco title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


