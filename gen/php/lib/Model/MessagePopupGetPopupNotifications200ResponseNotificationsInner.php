<?php
/**
 * MessagePopupGetPopupNotifications200ResponseNotificationsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MessagePopupGetPopupNotifications200ResponseNotificationsInner Class Doc Comment
 *
 * @category Class
 * @description message
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MessagePopupGetPopupNotifications200ResponseNotificationsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'message_popup_get_popup_notifications_200_response_notifications_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'component' => 'string',
        'contexturl' => 'string',
        'contexturlname' => 'string',
        'customdata' => 'string',
        'deleted' => 'bool',
        'eventtype' => 'string',
        'fullmessage' => 'string',
        'fullmessageformat' => 'int',
        'fullmessagehtml' => 'string',
        'iconurl' => 'string',
        'id' => 'int',
        'read' => 'bool',
        'shortenedsubject' => 'string',
        'smallmessage' => 'string',
        'subject' => 'string',
        'text' => 'string',
        'timecreated' => 'int',
        'timecreatedpretty' => 'string',
        'timeread' => 'int',
        'useridfrom' => 'int',
        'useridto' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'component' => null,
        'contexturl' => null,
        'contexturlname' => null,
        'customdata' => null,
        'deleted' => null,
        'eventtype' => null,
        'fullmessage' => null,
        'fullmessageformat' => null,
        'fullmessagehtml' => null,
        'iconurl' => null,
        'id' => null,
        'read' => null,
        'shortenedsubject' => null,
        'smallmessage' => null,
        'subject' => null,
        'text' => null,
        'timecreated' => null,
        'timecreatedpretty' => null,
        'timeread' => null,
        'useridfrom' => null,
        'useridto' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'component' => false,
        'contexturl' => false,
        'contexturlname' => false,
        'customdata' => false,
        'deleted' => false,
        'eventtype' => false,
        'fullmessage' => false,
        'fullmessageformat' => false,
        'fullmessagehtml' => false,
        'iconurl' => false,
        'id' => false,
        'read' => false,
        'shortenedsubject' => false,
        'smallmessage' => false,
        'subject' => false,
        'text' => false,
        'timecreated' => false,
        'timecreatedpretty' => false,
        'timeread' => false,
        'useridfrom' => false,
        'useridto' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'component' => 'component',
        'contexturl' => 'contexturl',
        'contexturlname' => 'contexturlname',
        'customdata' => 'customdata',
        'deleted' => 'deleted',
        'eventtype' => 'eventtype',
        'fullmessage' => 'fullmessage',
        'fullmessageformat' => 'fullmessageformat',
        'fullmessagehtml' => 'fullmessagehtml',
        'iconurl' => 'iconurl',
        'id' => 'id',
        'read' => 'read',
        'shortenedsubject' => 'shortenedsubject',
        'smallmessage' => 'smallmessage',
        'subject' => 'subject',
        'text' => 'text',
        'timecreated' => 'timecreated',
        'timecreatedpretty' => 'timecreatedpretty',
        'timeread' => 'timeread',
        'useridfrom' => 'useridfrom',
        'useridto' => 'useridto'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'component' => 'setComponent',
        'contexturl' => 'setContexturl',
        'contexturlname' => 'setContexturlname',
        'customdata' => 'setCustomdata',
        'deleted' => 'setDeleted',
        'eventtype' => 'setEventtype',
        'fullmessage' => 'setFullmessage',
        'fullmessageformat' => 'setFullmessageformat',
        'fullmessagehtml' => 'setFullmessagehtml',
        'iconurl' => 'setIconurl',
        'id' => 'setId',
        'read' => 'setRead',
        'shortenedsubject' => 'setShortenedsubject',
        'smallmessage' => 'setSmallmessage',
        'subject' => 'setSubject',
        'text' => 'setText',
        'timecreated' => 'setTimecreated',
        'timecreatedpretty' => 'setTimecreatedpretty',
        'timeread' => 'setTimeread',
        'useridfrom' => 'setUseridfrom',
        'useridto' => 'setUseridto'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'component' => 'getComponent',
        'contexturl' => 'getContexturl',
        'contexturlname' => 'getContexturlname',
        'customdata' => 'getCustomdata',
        'deleted' => 'getDeleted',
        'eventtype' => 'getEventtype',
        'fullmessage' => 'getFullmessage',
        'fullmessageformat' => 'getFullmessageformat',
        'fullmessagehtml' => 'getFullmessagehtml',
        'iconurl' => 'getIconurl',
        'id' => 'getId',
        'read' => 'getRead',
        'shortenedsubject' => 'getShortenedsubject',
        'smallmessage' => 'getSmallmessage',
        'subject' => 'getSubject',
        'text' => 'getText',
        'timecreated' => 'getTimecreated',
        'timecreatedpretty' => 'getTimecreatedpretty',
        'timeread' => 'getTimeread',
        'useridfrom' => 'getUseridfrom',
        'useridto' => 'getUseridto'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('component', $data ?? [], null);
        $this->setIfExists('contexturl', $data ?? [], null);
        $this->setIfExists('contexturlname', $data ?? [], null);
        $this->setIfExists('customdata', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('eventtype', $data ?? [], null);
        $this->setIfExists('fullmessage', $data ?? [], null);
        $this->setIfExists('fullmessageformat', $data ?? [], null);
        $this->setIfExists('fullmessagehtml', $data ?? [], null);
        $this->setIfExists('iconurl', $data ?? [], 'null');
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('read', $data ?? [], null);
        $this->setIfExists('shortenedsubject', $data ?? [], 'null');
        $this->setIfExists('smallmessage', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], 'null');
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('timecreated', $data ?? [], null);
        $this->setIfExists('timecreatedpretty', $data ?? [], 'null');
        $this->setIfExists('timeread', $data ?? [], null);
        $this->setIfExists('useridfrom', $data ?? [], null);
        $this->setIfExists('useridto', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets component
     *
     * @return string|null
     */
    public function getComponent()
    {
        return $this->container['component'];
    }

    /**
     * Sets component
     *
     * @param string|null $component The component that generated the notification
     *
     * @return self
     */
    public function setComponent($component)
    {
        if (is_null($component)) {
            throw new \InvalidArgumentException('non-nullable component cannot be null');
        }
        $this->container['component'] = $component;

        return $this;
    }

    /**
     * Gets contexturl
     *
     * @return string|null
     */
    public function getContexturl()
    {
        return $this->container['contexturl'];
    }

    /**
     * Sets contexturl
     *
     * @param string|null $contexturl Context URL
     *
     * @return self
     */
    public function setContexturl($contexturl)
    {
        if (is_null($contexturl)) {
            throw new \InvalidArgumentException('non-nullable contexturl cannot be null');
        }
        $this->container['contexturl'] = $contexturl;

        return $this;
    }

    /**
     * Gets contexturlname
     *
     * @return string|null
     */
    public function getContexturlname()
    {
        return $this->container['contexturlname'];
    }

    /**
     * Sets contexturlname
     *
     * @param string|null $contexturlname Context URL link name
     *
     * @return self
     */
    public function setContexturlname($contexturlname)
    {
        if (is_null($contexturlname)) {
            throw new \InvalidArgumentException('non-nullable contexturlname cannot be null');
        }
        $this->container['contexturlname'] = $contexturlname;

        return $this;
    }

    /**
     * Gets customdata
     *
     * @return string|null
     */
    public function getCustomdata()
    {
        return $this->container['customdata'];
    }

    /**
     * Sets customdata
     *
     * @param string|null $customdata Custom data to be passed to the message processor.                                 The data here is serialised using json_encode().
     *
     * @return self
     */
    public function setCustomdata($customdata)
    {
        if (is_null($customdata)) {
            throw new \InvalidArgumentException('non-nullable customdata cannot be null');
        }
        $this->container['customdata'] = $customdata;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted notification deletion status
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            throw new \InvalidArgumentException('non-nullable deleted cannot be null');
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets eventtype
     *
     * @return string|null
     */
    public function getEventtype()
    {
        return $this->container['eventtype'];
    }

    /**
     * Sets eventtype
     *
     * @param string|null $eventtype The type of notification
     *
     * @return self
     */
    public function setEventtype($eventtype)
    {
        if (is_null($eventtype)) {
            throw new \InvalidArgumentException('non-nullable eventtype cannot be null');
        }
        $this->container['eventtype'] = $eventtype;

        return $this;
    }

    /**
     * Gets fullmessage
     *
     * @return string|null
     */
    public function getFullmessage()
    {
        return $this->container['fullmessage'];
    }

    /**
     * Sets fullmessage
     *
     * @param string|null $fullmessage The message
     *
     * @return self
     */
    public function setFullmessage($fullmessage)
    {
        if (is_null($fullmessage)) {
            throw new \InvalidArgumentException('non-nullable fullmessage cannot be null');
        }
        $this->container['fullmessage'] = $fullmessage;

        return $this;
    }

    /**
     * Gets fullmessageformat
     *
     * @return int|null
     */
    public function getFullmessageformat()
    {
        return $this->container['fullmessageformat'];
    }

    /**
     * Sets fullmessageformat
     *
     * @param int|null $fullmessageformat fullmessage format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setFullmessageformat($fullmessageformat)
    {
        if (is_null($fullmessageformat)) {
            throw new \InvalidArgumentException('non-nullable fullmessageformat cannot be null');
        }
        $this->container['fullmessageformat'] = $fullmessageformat;

        return $this;
    }

    /**
     * Gets fullmessagehtml
     *
     * @return string|null
     */
    public function getFullmessagehtml()
    {
        return $this->container['fullmessagehtml'];
    }

    /**
     * Sets fullmessagehtml
     *
     * @param string|null $fullmessagehtml The message in html
     *
     * @return self
     */
    public function setFullmessagehtml($fullmessagehtml)
    {
        if (is_null($fullmessagehtml)) {
            throw new \InvalidArgumentException('non-nullable fullmessagehtml cannot be null');
        }
        $this->container['fullmessagehtml'] = $fullmessagehtml;

        return $this;
    }

    /**
     * Gets iconurl
     *
     * @return string|null
     */
    public function getIconurl()
    {
        return $this->container['iconurl'];
    }

    /**
     * Sets iconurl
     *
     * @param string|null $iconurl URL for notification icon
     *
     * @return self
     */
    public function setIconurl($iconurl)
    {
        if (is_null($iconurl)) {
            throw new \InvalidArgumentException('non-nullable iconurl cannot be null');
        }
        $this->container['iconurl'] = $iconurl;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Notification id (this is not guaranteed to be unique                                 within this result set)
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets read
     *
     * @return bool|null
     */
    public function getRead()
    {
        return $this->container['read'];
    }

    /**
     * Sets read
     *
     * @param bool|null $read notification read status
     *
     * @return self
     */
    public function setRead($read)
    {
        if (is_null($read)) {
            throw new \InvalidArgumentException('non-nullable read cannot be null');
        }
        $this->container['read'] = $read;

        return $this;
    }

    /**
     * Gets shortenedsubject
     *
     * @return string|null
     */
    public function getShortenedsubject()
    {
        return $this->container['shortenedsubject'];
    }

    /**
     * Sets shortenedsubject
     *
     * @param string|null $shortenedsubject The notification subject shortened                                 with ellipsis
     *
     * @return self
     */
    public function setShortenedsubject($shortenedsubject)
    {
        if (is_null($shortenedsubject)) {
            throw new \InvalidArgumentException('non-nullable shortenedsubject cannot be null');
        }
        $this->container['shortenedsubject'] = $shortenedsubject;

        return $this;
    }

    /**
     * Gets smallmessage
     *
     * @return string|null
     */
    public function getSmallmessage()
    {
        return $this->container['smallmessage'];
    }

    /**
     * Sets smallmessage
     *
     * @param string|null $smallmessage The shorten message
     *
     * @return self
     */
    public function setSmallmessage($smallmessage)
    {
        if (is_null($smallmessage)) {
            throw new \InvalidArgumentException('non-nullable smallmessage cannot be null');
        }
        $this->container['smallmessage'] = $smallmessage;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject The notification subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text The message text formated
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return int|null
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param int|null $timecreated Time created
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets timecreatedpretty
     *
     * @return string|null
     */
    public function getTimecreatedpretty()
    {
        return $this->container['timecreatedpretty'];
    }

    /**
     * Sets timecreatedpretty
     *
     * @param string|null $timecreatedpretty Time created in a pretty format
     *
     * @return self
     */
    public function setTimecreatedpretty($timecreatedpretty)
    {
        if (is_null($timecreatedpretty)) {
            throw new \InvalidArgumentException('non-nullable timecreatedpretty cannot be null');
        }
        $this->container['timecreatedpretty'] = $timecreatedpretty;

        return $this;
    }

    /**
     * Gets timeread
     *
     * @return int|null
     */
    public function getTimeread()
    {
        return $this->container['timeread'];
    }

    /**
     * Sets timeread
     *
     * @param int|null $timeread Time read
     *
     * @return self
     */
    public function setTimeread($timeread)
    {
        if (is_null($timeread)) {
            throw new \InvalidArgumentException('non-nullable timeread cannot be null');
        }
        $this->container['timeread'] = $timeread;

        return $this;
    }

    /**
     * Gets useridfrom
     *
     * @return int|null
     */
    public function getUseridfrom()
    {
        return $this->container['useridfrom'];
    }

    /**
     * Sets useridfrom
     *
     * @param int|null $useridfrom User from id
     *
     * @return self
     */
    public function setUseridfrom($useridfrom)
    {
        if (is_null($useridfrom)) {
            throw new \InvalidArgumentException('non-nullable useridfrom cannot be null');
        }
        $this->container['useridfrom'] = $useridfrom;

        return $this;
    }

    /**
     * Gets useridto
     *
     * @return int|null
     */
    public function getUseridto()
    {
        return $this->container['useridto'];
    }

    /**
     * Sets useridto
     *
     * @param int|null $useridto User to id
     *
     * @return self
     */
    public function setUseridto($useridto)
    {
        if (is_null($useridto)) {
            throw new \InvalidArgumentException('non-nullable useridto cannot be null');
        }
        $this->container['useridto'] = $useridto;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


