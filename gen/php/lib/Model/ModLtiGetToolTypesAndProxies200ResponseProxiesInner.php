<?php
/**
 * ModLtiGetToolTypesAndProxies200ResponseProxiesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModLtiGetToolTypesAndProxies200ResponseProxiesInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModLtiGetToolTypesAndProxies200ResponseProxiesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_lti_get_tool_types_and_proxies_200_response_proxies_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'capabilityoffered' => 'string',
        'guid' => 'string',
        'id' => 'int',
        'name' => 'string',
        'regurl' => 'string',
        'secret' => 'string',
        'serviceoffered' => 'string',
        'state' => 'int',
        'timecreated' => 'int',
        'timemodified' => 'int',
        'toolproxy' => 'string',
        'vendorcode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'capabilityoffered' => null,
        'guid' => null,
        'id' => null,
        'name' => null,
        'regurl' => null,
        'secret' => null,
        'serviceoffered' => null,
        'state' => null,
        'timecreated' => null,
        'timemodified' => null,
        'toolproxy' => null,
        'vendorcode' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'capabilityoffered' => false,
        'guid' => false,
        'id' => false,
        'name' => false,
        'regurl' => false,
        'secret' => false,
        'serviceoffered' => false,
        'state' => false,
        'timecreated' => false,
        'timemodified' => false,
        'toolproxy' => false,
        'vendorcode' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'capabilityoffered' => 'capabilityoffered',
        'guid' => 'guid',
        'id' => 'id',
        'name' => 'name',
        'regurl' => 'regurl',
        'secret' => 'secret',
        'serviceoffered' => 'serviceoffered',
        'state' => 'state',
        'timecreated' => 'timecreated',
        'timemodified' => 'timemodified',
        'toolproxy' => 'toolproxy',
        'vendorcode' => 'vendorcode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'capabilityoffered' => 'setCapabilityoffered',
        'guid' => 'setGuid',
        'id' => 'setId',
        'name' => 'setName',
        'regurl' => 'setRegurl',
        'secret' => 'setSecret',
        'serviceoffered' => 'setServiceoffered',
        'state' => 'setState',
        'timecreated' => 'setTimecreated',
        'timemodified' => 'setTimemodified',
        'toolproxy' => 'setToolproxy',
        'vendorcode' => 'setVendorcode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'capabilityoffered' => 'getCapabilityoffered',
        'guid' => 'getGuid',
        'id' => 'getId',
        'name' => 'getName',
        'regurl' => 'getRegurl',
        'secret' => 'getSecret',
        'serviceoffered' => 'getServiceoffered',
        'state' => 'getState',
        'timecreated' => 'getTimecreated',
        'timemodified' => 'getTimemodified',
        'toolproxy' => 'getToolproxy',
        'vendorcode' => 'getVendorcode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('capabilityoffered', $data ?? [], null);
        $this->setIfExists('guid', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('regurl', $data ?? [], null);
        $this->setIfExists('secret', $data ?? [], null);
        $this->setIfExists('serviceoffered', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('timecreated', $data ?? [], null);
        $this->setIfExists('timemodified', $data ?? [], null);
        $this->setIfExists('toolproxy', $data ?? [], null);
        $this->setIfExists('vendorcode', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets capabilityoffered
     *
     * @return string|null
     */
    public function getCapabilityoffered()
    {
        return $this->container['capabilityoffered'];
    }

    /**
     * Sets capabilityoffered
     *
     * @param string|null $capabilityoffered Tool proxy capabilities offered
     *
     * @return self
     */
    public function setCapabilityoffered($capabilityoffered)
    {
        if (is_null($capabilityoffered)) {
            throw new \InvalidArgumentException('non-nullable capabilityoffered cannot be null');
        }
        $this->container['capabilityoffered'] = $capabilityoffered;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid Tool proxy globally unique identifier
     *
     * @return self
     */
    public function setGuid($guid)
    {
        if (is_null($guid)) {
            throw new \InvalidArgumentException('non-nullable guid cannot be null');
        }
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Tool proxy id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Tool proxy name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets regurl
     *
     * @return string|null
     */
    public function getRegurl()
    {
        return $this->container['regurl'];
    }

    /**
     * Sets regurl
     *
     * @param string|null $regurl Tool proxy registration URL
     *
     * @return self
     */
    public function setRegurl($regurl)
    {
        if (is_null($regurl)) {
            throw new \InvalidArgumentException('non-nullable regurl cannot be null');
        }
        $this->container['regurl'] = $regurl;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return string|null
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string|null $secret Tool proxy shared secret
     *
     * @return self
     */
    public function setSecret($secret)
    {
        if (is_null($secret)) {
            throw new \InvalidArgumentException('non-nullable secret cannot be null');
        }
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets serviceoffered
     *
     * @return string|null
     */
    public function getServiceoffered()
    {
        return $this->container['serviceoffered'];
    }

    /**
     * Sets serviceoffered
     *
     * @param string|null $serviceoffered Tool proxy services offered
     *
     * @return self
     */
    public function setServiceoffered($serviceoffered)
    {
        if (is_null($serviceoffered)) {
            throw new \InvalidArgumentException('non-nullable serviceoffered cannot be null');
        }
        $this->container['serviceoffered'] = $serviceoffered;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int|null $state Tool proxy state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return int|null
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param int|null $timecreated Tool proxy time created
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified Tool proxy modified
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets toolproxy
     *
     * @return string|null
     */
    public function getToolproxy()
    {
        return $this->container['toolproxy'];
    }

    /**
     * Sets toolproxy
     *
     * @param string|null $toolproxy Tool proxy
     *
     * @return self
     */
    public function setToolproxy($toolproxy)
    {
        if (is_null($toolproxy)) {
            throw new \InvalidArgumentException('non-nullable toolproxy cannot be null');
        }
        $this->container['toolproxy'] = $toolproxy;

        return $this;
    }

    /**
     * Gets vendorcode
     *
     * @return string|null
     */
    public function getVendorcode()
    {
        return $this->container['vendorcode'];
    }

    /**
     * Sets vendorcode
     *
     * @param string|null $vendorcode Tool proxy consumer code
     *
     * @return self
     */
    public function setVendorcode($vendorcode)
    {
        if (is_null($vendorcode)) {
            throw new \InvalidArgumentException('non-nullable vendorcode cannot be null');
        }
        $this->container['vendorcode'] = $vendorcode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


