<?php
/**
 * CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_calendar_get_calendar_monthly_view_200_response_weeks_inner_days_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'calendareventtypes' => 'object[]',
        'daytitle' => 'string',
        'events' => '\OpenAPI\Client\Model\CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner[]',
        'hasevents' => 'bool',
        'haslastdayofevent' => 'bool',
        'hours' => 'int',
        'istoday' => 'bool',
        'isweekend' => 'bool',
        'mday' => 'int',
        'minutes' => 'int',
        'neweventtimestamp' => 'int',
        'nextperiod' => 'int',
        'popovertitle' => 'string',
        'previousperiod' => 'int',
        'seconds' => 'int',
        'timestamp' => 'int',
        'viewdaylink' => 'string',
        'viewdaylinktitle' => 'string',
        'wday' => 'int',
        'yday' => 'int',
        'year' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'calendareventtypes' => null,
        'daytitle' => null,
        'events' => null,
        'hasevents' => null,
        'haslastdayofevent' => null,
        'hours' => null,
        'istoday' => null,
        'isweekend' => null,
        'mday' => null,
        'minutes' => null,
        'neweventtimestamp' => null,
        'nextperiod' => null,
        'popovertitle' => null,
        'previousperiod' => null,
        'seconds' => null,
        'timestamp' => null,
        'viewdaylink' => null,
        'viewdaylinktitle' => null,
        'wday' => null,
        'yday' => null,
        'year' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'calendareventtypes' => false,
        'daytitle' => false,
        'events' => false,
        'hasevents' => false,
        'haslastdayofevent' => false,
        'hours' => false,
        'istoday' => false,
        'isweekend' => false,
        'mday' => false,
        'minutes' => false,
        'neweventtimestamp' => false,
        'nextperiod' => false,
        'popovertitle' => false,
        'previousperiod' => false,
        'seconds' => false,
        'timestamp' => false,
        'viewdaylink' => false,
        'viewdaylinktitle' => false,
        'wday' => false,
        'yday' => false,
        'year' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'calendareventtypes' => 'calendareventtypes',
        'daytitle' => 'daytitle',
        'events' => 'events',
        'hasevents' => 'hasevents',
        'haslastdayofevent' => 'haslastdayofevent',
        'hours' => 'hours',
        'istoday' => 'istoday',
        'isweekend' => 'isweekend',
        'mday' => 'mday',
        'minutes' => 'minutes',
        'neweventtimestamp' => 'neweventtimestamp',
        'nextperiod' => 'nextperiod',
        'popovertitle' => 'popovertitle',
        'previousperiod' => 'previousperiod',
        'seconds' => 'seconds',
        'timestamp' => 'timestamp',
        'viewdaylink' => 'viewdaylink',
        'viewdaylinktitle' => 'viewdaylinktitle',
        'wday' => 'wday',
        'yday' => 'yday',
        'year' => 'year'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'calendareventtypes' => 'setCalendareventtypes',
        'daytitle' => 'setDaytitle',
        'events' => 'setEvents',
        'hasevents' => 'setHasevents',
        'haslastdayofevent' => 'setHaslastdayofevent',
        'hours' => 'setHours',
        'istoday' => 'setIstoday',
        'isweekend' => 'setIsweekend',
        'mday' => 'setMday',
        'minutes' => 'setMinutes',
        'neweventtimestamp' => 'setNeweventtimestamp',
        'nextperiod' => 'setNextperiod',
        'popovertitle' => 'setPopovertitle',
        'previousperiod' => 'setPreviousperiod',
        'seconds' => 'setSeconds',
        'timestamp' => 'setTimestamp',
        'viewdaylink' => 'setViewdaylink',
        'viewdaylinktitle' => 'setViewdaylinktitle',
        'wday' => 'setWday',
        'yday' => 'setYday',
        'year' => 'setYear'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'calendareventtypes' => 'getCalendareventtypes',
        'daytitle' => 'getDaytitle',
        'events' => 'getEvents',
        'hasevents' => 'getHasevents',
        'haslastdayofevent' => 'getHaslastdayofevent',
        'hours' => 'getHours',
        'istoday' => 'getIstoday',
        'isweekend' => 'getIsweekend',
        'mday' => 'getMday',
        'minutes' => 'getMinutes',
        'neweventtimestamp' => 'getNeweventtimestamp',
        'nextperiod' => 'getNextperiod',
        'popovertitle' => 'getPopovertitle',
        'previousperiod' => 'getPreviousperiod',
        'seconds' => 'getSeconds',
        'timestamp' => 'getTimestamp',
        'viewdaylink' => 'getViewdaylink',
        'viewdaylinktitle' => 'getViewdaylinktitle',
        'wday' => 'getWday',
        'yday' => 'getYday',
        'year' => 'getYear'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('calendareventtypes', $data ?? [], null);
        $this->setIfExists('daytitle', $data ?? [], 'null');
        $this->setIfExists('events', $data ?? [], null);
        $this->setIfExists('hasevents', $data ?? [], false);
        $this->setIfExists('haslastdayofevent', $data ?? [], false);
        $this->setIfExists('hours', $data ?? [], null);
        $this->setIfExists('istoday', $data ?? [], false);
        $this->setIfExists('isweekend', $data ?? [], false);
        $this->setIfExists('mday', $data ?? [], null);
        $this->setIfExists('minutes', $data ?? [], null);
        $this->setIfExists('neweventtimestamp', $data ?? [], null);
        $this->setIfExists('nextperiod', $data ?? [], null);
        $this->setIfExists('popovertitle', $data ?? [], '');
        $this->setIfExists('previousperiod', $data ?? [], null);
        $this->setIfExists('seconds', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('viewdaylink', $data ?? [], 'null');
        $this->setIfExists('viewdaylinktitle', $data ?? [], 'null');
        $this->setIfExists('wday', $data ?? [], null);
        $this->setIfExists('yday', $data ?? [], null);
        $this->setIfExists('year', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets calendareventtypes
     *
     * @return object[]|null
     */
    public function getCalendareventtypes()
    {
        return $this->container['calendareventtypes'];
    }

    /**
     * Sets calendareventtypes
     *
     * @param object[]|null $calendareventtypes calendareventtypes
     *
     * @return self
     */
    public function setCalendareventtypes($calendareventtypes)
    {
        if (is_null($calendareventtypes)) {
            throw new \InvalidArgumentException('non-nullable calendareventtypes cannot be null');
        }
        $this->container['calendareventtypes'] = $calendareventtypes;

        return $this;
    }

    /**
     * Gets daytitle
     *
     * @return string|null
     */
    public function getDaytitle()
    {
        return $this->container['daytitle'];
    }

    /**
     * Sets daytitle
     *
     * @param string|null $daytitle daytitle
     *
     * @return self
     */
    public function setDaytitle($daytitle)
    {
        if (is_null($daytitle)) {
            throw new \InvalidArgumentException('non-nullable daytitle cannot be null');
        }
        $this->container['daytitle'] = $daytitle;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \OpenAPI\Client\Model\CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner[]|null
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \OpenAPI\Client\Model\CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner[]|null $events events
     *
     * @return self
     */
    public function setEvents($events)
    {
        if (is_null($events)) {
            throw new \InvalidArgumentException('non-nullable events cannot be null');
        }
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets hasevents
     *
     * @return bool|null
     */
    public function getHasevents()
    {
        return $this->container['hasevents'];
    }

    /**
     * Sets hasevents
     *
     * @param bool|null $hasevents hasevents
     *
     * @return self
     */
    public function setHasevents($hasevents)
    {
        if (is_null($hasevents)) {
            throw new \InvalidArgumentException('non-nullable hasevents cannot be null');
        }
        $this->container['hasevents'] = $hasevents;

        return $this;
    }

    /**
     * Gets haslastdayofevent
     *
     * @return bool|null
     */
    public function getHaslastdayofevent()
    {
        return $this->container['haslastdayofevent'];
    }

    /**
     * Sets haslastdayofevent
     *
     * @param bool|null $haslastdayofevent haslastdayofevent
     *
     * @return self
     */
    public function setHaslastdayofevent($haslastdayofevent)
    {
        if (is_null($haslastdayofevent)) {
            throw new \InvalidArgumentException('non-nullable haslastdayofevent cannot be null');
        }
        $this->container['haslastdayofevent'] = $haslastdayofevent;

        return $this;
    }

    /**
     * Gets hours
     *
     * @return int|null
     */
    public function getHours()
    {
        return $this->container['hours'];
    }

    /**
     * Sets hours
     *
     * @param int|null $hours hours
     *
     * @return self
     */
    public function setHours($hours)
    {
        if (is_null($hours)) {
            throw new \InvalidArgumentException('non-nullable hours cannot be null');
        }
        $this->container['hours'] = $hours;

        return $this;
    }

    /**
     * Gets istoday
     *
     * @return bool|null
     */
    public function getIstoday()
    {
        return $this->container['istoday'];
    }

    /**
     * Sets istoday
     *
     * @param bool|null $istoday istoday
     *
     * @return self
     */
    public function setIstoday($istoday)
    {
        if (is_null($istoday)) {
            throw new \InvalidArgumentException('non-nullable istoday cannot be null');
        }
        $this->container['istoday'] = $istoday;

        return $this;
    }

    /**
     * Gets isweekend
     *
     * @return bool|null
     */
    public function getIsweekend()
    {
        return $this->container['isweekend'];
    }

    /**
     * Sets isweekend
     *
     * @param bool|null $isweekend isweekend
     *
     * @return self
     */
    public function setIsweekend($isweekend)
    {
        if (is_null($isweekend)) {
            throw new \InvalidArgumentException('non-nullable isweekend cannot be null');
        }
        $this->container['isweekend'] = $isweekend;

        return $this;
    }

    /**
     * Gets mday
     *
     * @return int|null
     */
    public function getMday()
    {
        return $this->container['mday'];
    }

    /**
     * Sets mday
     *
     * @param int|null $mday mday
     *
     * @return self
     */
    public function setMday($mday)
    {
        if (is_null($mday)) {
            throw new \InvalidArgumentException('non-nullable mday cannot be null');
        }
        $this->container['mday'] = $mday;

        return $this;
    }

    /**
     * Gets minutes
     *
     * @return int|null
     */
    public function getMinutes()
    {
        return $this->container['minutes'];
    }

    /**
     * Sets minutes
     *
     * @param int|null $minutes minutes
     *
     * @return self
     */
    public function setMinutes($minutes)
    {
        if (is_null($minutes)) {
            throw new \InvalidArgumentException('non-nullable minutes cannot be null');
        }
        $this->container['minutes'] = $minutes;

        return $this;
    }

    /**
     * Gets neweventtimestamp
     *
     * @return int|null
     */
    public function getNeweventtimestamp()
    {
        return $this->container['neweventtimestamp'];
    }

    /**
     * Sets neweventtimestamp
     *
     * @param int|null $neweventtimestamp neweventtimestamp
     *
     * @return self
     */
    public function setNeweventtimestamp($neweventtimestamp)
    {
        if (is_null($neweventtimestamp)) {
            throw new \InvalidArgumentException('non-nullable neweventtimestamp cannot be null');
        }
        $this->container['neweventtimestamp'] = $neweventtimestamp;

        return $this;
    }

    /**
     * Gets nextperiod
     *
     * @return int|null
     */
    public function getNextperiod()
    {
        return $this->container['nextperiod'];
    }

    /**
     * Sets nextperiod
     *
     * @param int|null $nextperiod nextperiod
     *
     * @return self
     */
    public function setNextperiod($nextperiod)
    {
        if (is_null($nextperiod)) {
            throw new \InvalidArgumentException('non-nullable nextperiod cannot be null');
        }
        $this->container['nextperiod'] = $nextperiod;

        return $this;
    }

    /**
     * Gets popovertitle
     *
     * @return string|null
     */
    public function getPopovertitle()
    {
        return $this->container['popovertitle'];
    }

    /**
     * Sets popovertitle
     *
     * @param string|null $popovertitle popovertitle
     *
     * @return self
     */
    public function setPopovertitle($popovertitle)
    {
        if (is_null($popovertitle)) {
            throw new \InvalidArgumentException('non-nullable popovertitle cannot be null');
        }
        $this->container['popovertitle'] = $popovertitle;

        return $this;
    }

    /**
     * Gets previousperiod
     *
     * @return int|null
     */
    public function getPreviousperiod()
    {
        return $this->container['previousperiod'];
    }

    /**
     * Sets previousperiod
     *
     * @param int|null $previousperiod previousperiod
     *
     * @return self
     */
    public function setPreviousperiod($previousperiod)
    {
        if (is_null($previousperiod)) {
            throw new \InvalidArgumentException('non-nullable previousperiod cannot be null');
        }
        $this->container['previousperiod'] = $previousperiod;

        return $this;
    }

    /**
     * Gets seconds
     *
     * @return int|null
     */
    public function getSeconds()
    {
        return $this->container['seconds'];
    }

    /**
     * Sets seconds
     *
     * @param int|null $seconds seconds
     *
     * @return self
     */
    public function setSeconds($seconds)
    {
        if (is_null($seconds)) {
            throw new \InvalidArgumentException('non-nullable seconds cannot be null');
        }
        $this->container['seconds'] = $seconds;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets viewdaylink
     *
     * @return string|null
     */
    public function getViewdaylink()
    {
        return $this->container['viewdaylink'];
    }

    /**
     * Sets viewdaylink
     *
     * @param string|null $viewdaylink viewdaylink
     *
     * @return self
     */
    public function setViewdaylink($viewdaylink)
    {
        if (is_null($viewdaylink)) {
            throw new \InvalidArgumentException('non-nullable viewdaylink cannot be null');
        }
        $this->container['viewdaylink'] = $viewdaylink;

        return $this;
    }

    /**
     * Gets viewdaylinktitle
     *
     * @return string|null
     */
    public function getViewdaylinktitle()
    {
        return $this->container['viewdaylinktitle'];
    }

    /**
     * Sets viewdaylinktitle
     *
     * @param string|null $viewdaylinktitle viewdaylinktitle
     *
     * @return self
     */
    public function setViewdaylinktitle($viewdaylinktitle)
    {
        if (is_null($viewdaylinktitle)) {
            throw new \InvalidArgumentException('non-nullable viewdaylinktitle cannot be null');
        }
        $this->container['viewdaylinktitle'] = $viewdaylinktitle;

        return $this;
    }

    /**
     * Gets wday
     *
     * @return int|null
     */
    public function getWday()
    {
        return $this->container['wday'];
    }

    /**
     * Sets wday
     *
     * @param int|null $wday wday
     *
     * @return self
     */
    public function setWday($wday)
    {
        if (is_null($wday)) {
            throw new \InvalidArgumentException('non-nullable wday cannot be null');
        }
        $this->container['wday'] = $wday;

        return $this;
    }

    /**
     * Gets yday
     *
     * @return int|null
     */
    public function getYday()
    {
        return $this->container['yday'];
    }

    /**
     * Sets yday
     *
     * @param int|null $yday yday
     *
     * @return self
     */
    public function setYday($yday)
    {
        if (is_null($yday)) {
            throw new \InvalidArgumentException('non-nullable yday cannot be null');
        }
        $this->container['yday'] = $yday;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int|null
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int|null $year year
     *
     * @return self
     */
    public function setYear($year)
    {
        if (is_null($year)) {
            throw new \InvalidArgumentException('non-nullable year cannot be null');
        }
        $this->container['year'] = $year;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


