<?php
/**
 * ModLessonGetPageData200ResponsePage
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModLessonGetPageData200ResponsePage Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModLessonGetPageData200ResponsePage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_lesson_get_page_data_200_response_page';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contents' => 'string',
        'contentsformat' => 'int',
        'display' => 'int',
        'displayinmenublock' => 'bool',
        'id' => 'int',
        'layout' => 'int',
        'lessonid' => 'int',
        'nextpageid' => 'int',
        'prevpageid' => 'int',
        'qoption' => 'int',
        'qtype' => 'int',
        'timecreated' => 'int',
        'timemodified' => 'int',
        'title' => 'string',
        'type' => 'int',
        'typeid' => 'int',
        'typestring' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contents' => null,
        'contentsformat' => null,
        'display' => null,
        'displayinmenublock' => null,
        'id' => null,
        'layout' => null,
        'lessonid' => null,
        'nextpageid' => null,
        'prevpageid' => null,
        'qoption' => null,
        'qtype' => null,
        'timecreated' => null,
        'timemodified' => null,
        'title' => null,
        'type' => null,
        'typeid' => null,
        'typestring' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'contents' => false,
        'contentsformat' => false,
        'display' => false,
        'displayinmenublock' => false,
        'id' => false,
        'layout' => false,
        'lessonid' => false,
        'nextpageid' => false,
        'prevpageid' => false,
        'qoption' => false,
        'qtype' => false,
        'timecreated' => false,
        'timemodified' => false,
        'title' => false,
        'type' => false,
        'typeid' => false,
        'typestring' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contents' => 'contents',
        'contentsformat' => 'contentsformat',
        'display' => 'display',
        'displayinmenublock' => 'displayinmenublock',
        'id' => 'id',
        'layout' => 'layout',
        'lessonid' => 'lessonid',
        'nextpageid' => 'nextpageid',
        'prevpageid' => 'prevpageid',
        'qoption' => 'qoption',
        'qtype' => 'qtype',
        'timecreated' => 'timecreated',
        'timemodified' => 'timemodified',
        'title' => 'title',
        'type' => 'type',
        'typeid' => 'typeid',
        'typestring' => 'typestring'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contents' => 'setContents',
        'contentsformat' => 'setContentsformat',
        'display' => 'setDisplay',
        'displayinmenublock' => 'setDisplayinmenublock',
        'id' => 'setId',
        'layout' => 'setLayout',
        'lessonid' => 'setLessonid',
        'nextpageid' => 'setNextpageid',
        'prevpageid' => 'setPrevpageid',
        'qoption' => 'setQoption',
        'qtype' => 'setQtype',
        'timecreated' => 'setTimecreated',
        'timemodified' => 'setTimemodified',
        'title' => 'setTitle',
        'type' => 'setType',
        'typeid' => 'setTypeid',
        'typestring' => 'setTypestring'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contents' => 'getContents',
        'contentsformat' => 'getContentsformat',
        'display' => 'getDisplay',
        'displayinmenublock' => 'getDisplayinmenublock',
        'id' => 'getId',
        'layout' => 'getLayout',
        'lessonid' => 'getLessonid',
        'nextpageid' => 'getNextpageid',
        'prevpageid' => 'getPrevpageid',
        'qoption' => 'getQoption',
        'qtype' => 'getQtype',
        'timecreated' => 'getTimecreated',
        'timemodified' => 'getTimemodified',
        'title' => 'getTitle',
        'type' => 'getType',
        'typeid' => 'getTypeid',
        'typestring' => 'getTypestring'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('contents', $data ?? [], 'null');
        $this->setIfExists('contentsformat', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('displayinmenublock', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('layout', $data ?? [], null);
        $this->setIfExists('lessonid', $data ?? [], null);
        $this->setIfExists('nextpageid', $data ?? [], null);
        $this->setIfExists('prevpageid', $data ?? [], null);
        $this->setIfExists('qoption', $data ?? [], null);
        $this->setIfExists('qtype', $data ?? [], null);
        $this->setIfExists('timecreated', $data ?? [], null);
        $this->setIfExists('timemodified', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], 'null');
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('typeid', $data ?? [], null);
        $this->setIfExists('typestring', $data ?? [], 'null');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['display'] === null) {
            $invalidProperties[] = "'display' can't be null";
        }
        if ($this->container['displayinmenublock'] === null) {
            $invalidProperties[] = "'displayinmenublock' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['layout'] === null) {
            $invalidProperties[] = "'layout' can't be null";
        }
        if ($this->container['lessonid'] === null) {
            $invalidProperties[] = "'lessonid' can't be null";
        }
        if ($this->container['nextpageid'] === null) {
            $invalidProperties[] = "'nextpageid' can't be null";
        }
        if ($this->container['prevpageid'] === null) {
            $invalidProperties[] = "'prevpageid' can't be null";
        }
        if ($this->container['qoption'] === null) {
            $invalidProperties[] = "'qoption' can't be null";
        }
        if ($this->container['qtype'] === null) {
            $invalidProperties[] = "'qtype' can't be null";
        }
        if ($this->container['timecreated'] === null) {
            $invalidProperties[] = "'timecreated' can't be null";
        }
        if ($this->container['timemodified'] === null) {
            $invalidProperties[] = "'timemodified' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['typeid'] === null) {
            $invalidProperties[] = "'typeid' can't be null";
        }
        if ($this->container['typestring'] === null) {
            $invalidProperties[] = "'typestring' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contents
     *
     * @return string|null
     */
    public function getContents()
    {
        return $this->container['contents'];
    }

    /**
     * Sets contents
     *
     * @param string|null $contents The contents of this page
     *
     * @return self
     */
    public function setContents($contents)
    {
        if (is_null($contents)) {
            throw new \InvalidArgumentException('non-nullable contents cannot be null');
        }
        $this->container['contents'] = $contents;

        return $this;
    }

    /**
     * Gets contentsformat
     *
     * @return int|null
     */
    public function getContentsformat()
    {
        return $this->container['contentsformat'];
    }

    /**
     * Sets contentsformat
     *
     * @param int|null $contentsformat contents format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setContentsformat($contentsformat)
    {
        if (is_null($contentsformat)) {
            throw new \InvalidArgumentException('non-nullable contentsformat cannot be null');
        }
        $this->container['contentsformat'] = $contentsformat;

        return $this;
    }

    /**
     * Gets display
     *
     * @return int
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param int $display Used to record page specific display selections
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            throw new \InvalidArgumentException('non-nullable display cannot be null');
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets displayinmenublock
     *
     * @return bool
     */
    public function getDisplayinmenublock()
    {
        return $this->container['displayinmenublock'];
    }

    /**
     * Sets displayinmenublock
     *
     * @param bool $displayinmenublock Toggles display in the left menu block
     *
     * @return self
     */
    public function setDisplayinmenublock($displayinmenublock)
    {
        if (is_null($displayinmenublock)) {
            throw new \InvalidArgumentException('non-nullable displayinmenublock cannot be null');
        }
        $this->container['displayinmenublock'] = $displayinmenublock;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The id of this lesson page
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets layout
     *
     * @return int
     */
    public function getLayout()
    {
        return $this->container['layout'];
    }

    /**
     * Sets layout
     *
     * @param int $layout Used to record page specific layout selections
     *
     * @return self
     */
    public function setLayout($layout)
    {
        if (is_null($layout)) {
            throw new \InvalidArgumentException('non-nullable layout cannot be null');
        }
        $this->container['layout'] = $layout;

        return $this;
    }

    /**
     * Gets lessonid
     *
     * @return int
     */
    public function getLessonid()
    {
        return $this->container['lessonid'];
    }

    /**
     * Sets lessonid
     *
     * @param int $lessonid The id of the lesson this page belongs to
     *
     * @return self
     */
    public function setLessonid($lessonid)
    {
        if (is_null($lessonid)) {
            throw new \InvalidArgumentException('non-nullable lessonid cannot be null');
        }
        $this->container['lessonid'] = $lessonid;

        return $this;
    }

    /**
     * Gets nextpageid
     *
     * @return int
     */
    public function getNextpageid()
    {
        return $this->container['nextpageid'];
    }

    /**
     * Sets nextpageid
     *
     * @param int $nextpageid The id of the next page in the page sequence
     *
     * @return self
     */
    public function setNextpageid($nextpageid)
    {
        if (is_null($nextpageid)) {
            throw new \InvalidArgumentException('non-nullable nextpageid cannot be null');
        }
        $this->container['nextpageid'] = $nextpageid;

        return $this;
    }

    /**
     * Gets prevpageid
     *
     * @return int
     */
    public function getPrevpageid()
    {
        return $this->container['prevpageid'];
    }

    /**
     * Sets prevpageid
     *
     * @param int $prevpageid The id of the page before this one
     *
     * @return self
     */
    public function setPrevpageid($prevpageid)
    {
        if (is_null($prevpageid)) {
            throw new \InvalidArgumentException('non-nullable prevpageid cannot be null');
        }
        $this->container['prevpageid'] = $prevpageid;

        return $this;
    }

    /**
     * Gets qoption
     *
     * @return int
     */
    public function getQoption()
    {
        return $this->container['qoption'];
    }

    /**
     * Sets qoption
     *
     * @param int $qoption Used to record page type specific options
     *
     * @return self
     */
    public function setQoption($qoption)
    {
        if (is_null($qoption)) {
            throw new \InvalidArgumentException('non-nullable qoption cannot be null');
        }
        $this->container['qoption'] = $qoption;

        return $this;
    }

    /**
     * Gets qtype
     *
     * @return int
     */
    public function getQtype()
    {
        return $this->container['qtype'];
    }

    /**
     * Sets qtype
     *
     * @param int $qtype Identifies the page type of this page
     *
     * @return self
     */
    public function setQtype($qtype)
    {
        if (is_null($qtype)) {
            throw new \InvalidArgumentException('non-nullable qtype cannot be null');
        }
        $this->container['qtype'] = $qtype;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return int
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param int $timecreated Timestamp for when the page was created
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int $timemodified Timestamp for when the page was last modified
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of this page
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type The type of the page [question | structure]
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets typeid
     *
     * @return int
     */
    public function getTypeid()
    {
        return $this->container['typeid'];
    }

    /**
     * Sets typeid
     *
     * @param int $typeid The unique identifier for the page type
     *
     * @return self
     */
    public function setTypeid($typeid)
    {
        if (is_null($typeid)) {
            throw new \InvalidArgumentException('non-nullable typeid cannot be null');
        }
        $this->container['typeid'] = $typeid;

        return $this;
    }

    /**
     * Gets typestring
     *
     * @return string
     */
    public function getTypestring()
    {
        return $this->container['typestring'];
    }

    /**
     * Sets typestring
     *
     * @param string $typestring The string that describes this page type
     *
     * @return self
     */
    public function setTypestring($typestring)
    {
        if (is_null($typestring)) {
            throw new \InvalidArgumentException('non-nullable typestring cannot be null');
        }
        $this->container['typestring'] = $typestring;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


