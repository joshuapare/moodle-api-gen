<?php
/**
 * ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ToolUsertoursFetchAndStartTour200ResponseTourconfigStepsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tool_usertours_fetch_and_start_tour_200_response_tourconfig_steps_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'backdrop' => 'bool',
        'content' => 'string',
        'delay' => 'int',
        'element' => 'string',
        'orphan' => 'bool',
        'placement' => 'string',
        'reflex' => 'bool',
        'stepid' => 'int',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'backdrop' => null,
        'content' => null,
        'delay' => null,
        'element' => null,
        'orphan' => null,
        'placement' => null,
        'reflex' => null,
        'stepid' => null,
        'title' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'backdrop' => false,
        'content' => false,
        'delay' => false,
        'element' => false,
        'orphan' => false,
        'placement' => false,
        'reflex' => false,
        'stepid' => false,
        'title' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backdrop' => 'backdrop',
        'content' => 'content',
        'delay' => 'delay',
        'element' => 'element',
        'orphan' => 'orphan',
        'placement' => 'placement',
        'reflex' => 'reflex',
        'stepid' => 'stepid',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backdrop' => 'setBackdrop',
        'content' => 'setContent',
        'delay' => 'setDelay',
        'element' => 'setElement',
        'orphan' => 'setOrphan',
        'placement' => 'setPlacement',
        'reflex' => 'setReflex',
        'stepid' => 'setStepid',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backdrop' => 'getBackdrop',
        'content' => 'getContent',
        'delay' => 'getDelay',
        'element' => 'getElement',
        'orphan' => 'getOrphan',
        'placement' => 'getPlacement',
        'reflex' => 'getReflex',
        'stepid' => 'getStepid',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('backdrop', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], 'null');
        $this->setIfExists('delay', $data ?? [], null);
        $this->setIfExists('element', $data ?? [], 'null');
        $this->setIfExists('orphan', $data ?? [], null);
        $this->setIfExists('placement', $data ?? [], 'null');
        $this->setIfExists('reflex', $data ?? [], null);
        $this->setIfExists('stepid', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], 'null');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backdrop
     *
     * @return bool|null
     */
    public function getBackdrop()
    {
        return $this->container['backdrop'];
    }

    /**
     * Sets backdrop
     *
     * @param bool|null $backdrop Whether a backdrop should be used
     *
     * @return self
     */
    public function setBackdrop($backdrop)
    {
        if (is_null($backdrop)) {
            throw new \InvalidArgumentException('non-nullable backdrop cannot be null');
        }
        $this->container['backdrop'] = $backdrop;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content Step Content
     *
     * @return self
     */
    public function setContent($content)
    {
        if (is_null($content)) {
            throw new \InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets delay
     *
     * @return int|null
     */
    public function getDelay()
    {
        return $this->container['delay'];
    }

    /**
     * Sets delay
     *
     * @param int|null $delay Delay before showing the step (ms)
     *
     * @return self
     */
    public function setDelay($delay)
    {
        if (is_null($delay)) {
            throw new \InvalidArgumentException('non-nullable delay cannot be null');
        }
        $this->container['delay'] = $delay;

        return $this;
    }

    /**
     * Gets element
     *
     * @return string|null
     */
    public function getElement()
    {
        return $this->container['element'];
    }

    /**
     * Sets element
     *
     * @param string|null $element Step Target
     *
     * @return self
     */
    public function setElement($element)
    {
        if (is_null($element)) {
            throw new \InvalidArgumentException('non-nullable element cannot be null');
        }
        $this->container['element'] = $element;

        return $this;
    }

    /**
     * Gets orphan
     *
     * @return bool|null
     */
    public function getOrphan()
    {
        return $this->container['orphan'];
    }

    /**
     * Sets orphan
     *
     * @param bool|null $orphan Whether to display the step even if it could not be found
     *
     * @return self
     */
    public function setOrphan($orphan)
    {
        if (is_null($orphan)) {
            throw new \InvalidArgumentException('non-nullable orphan cannot be null');
        }
        $this->container['orphan'] = $orphan;

        return $this;
    }

    /**
     * Gets placement
     *
     * @return string|null
     */
    public function getPlacement()
    {
        return $this->container['placement'];
    }

    /**
     * Sets placement
     *
     * @param string|null $placement Step Placement
     *
     * @return self
     */
    public function setPlacement($placement)
    {
        if (is_null($placement)) {
            throw new \InvalidArgumentException('non-nullable placement cannot be null');
        }
        $this->container['placement'] = $placement;

        return $this;
    }

    /**
     * Gets reflex
     *
     * @return bool|null
     */
    public function getReflex()
    {
        return $this->container['reflex'];
    }

    /**
     * Sets reflex
     *
     * @param bool|null $reflex Whether to move to the next step when the target element is clicked
     *
     * @return self
     */
    public function setReflex($reflex)
    {
        if (is_null($reflex)) {
            throw new \InvalidArgumentException('non-nullable reflex cannot be null');
        }
        $this->container['reflex'] = $reflex;

        return $this;
    }

    /**
     * Gets stepid
     *
     * @return int|null
     */
    public function getStepid()
    {
        return $this->container['stepid'];
    }

    /**
     * Sets stepid
     *
     * @param int|null $stepid The actual ID of the step
     *
     * @return self
     */
    public function setStepid($stepid)
    {
        if (is_null($stepid)) {
            throw new \InvalidArgumentException('non-nullable stepid cannot be null');
        }
        $this->container['stepid'] = $stepid;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Step Title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


