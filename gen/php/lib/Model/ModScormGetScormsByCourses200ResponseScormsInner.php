<?php
/**
 * ModScormGetScormsByCourses200ResponseScormsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModScormGetScormsByCourses200ResponseScormsInner Class Doc Comment
 *
 * @category Class
 * @description SCORM
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModScormGetScormsByCourses200ResponseScormsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_scorm_get_scorms_by_courses_200_response_scorms_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'auto' => 'bool',
        'autocommit' => 'bool',
        'completionscorerequired' => 'int',
        'completionstatusallscos' => 'int',
        'completionstatusrequired' => 'int',
        'course' => 'int',
        'coursemodule' => 'int',
        'displayattemptstatus' => 'int',
        'displaycoursestructure' => 'bool',
        'forcecompleted' => 'bool',
        'forcenewattempt' => 'int',
        'grademethod' => 'int',
        'groupingid' => 'int',
        'groupmode' => 'int',
        'height' => 'int',
        'hidebrowse' => 'bool',
        'hidetoc' => 'int',
        'id' => 'int',
        'intro' => 'string',
        'introfiles' => '\OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]',
        'introformat' => 'int',
        'lang' => 'string',
        'lastattemptlock' => 'bool',
        'launch' => 'int',
        'maxattempt' => 'int',
        'maxgrade' => 'int',
        'md5hash' => 'string',
        'name' => 'string',
        'nav' => 'int',
        'navpositionleft' => 'int',
        'navpositiontop' => 'int',
        'options' => 'string',
        'packagesize' => 'int',
        'packageurl' => 'string',
        'popup' => 'int',
        'protectpackagedownloads' => 'bool',
        'reference' => 'string',
        'revision' => 'int',
        'scormtype' => 'string',
        'section' => 'int',
        'sha1hash' => 'string',
        'skipview' => 'int',
        'timeclose' => 'int',
        'timemodified' => 'int',
        'timeopen' => 'int',
        'updatefreq' => 'int',
        'version' => 'string',
        'visible' => 'bool',
        'whatgrade' => 'int',
        'width' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'auto' => null,
        'autocommit' => null,
        'completionscorerequired' => null,
        'completionstatusallscos' => null,
        'completionstatusrequired' => null,
        'course' => null,
        'coursemodule' => null,
        'displayattemptstatus' => null,
        'displaycoursestructure' => null,
        'forcecompleted' => null,
        'forcenewattempt' => null,
        'grademethod' => null,
        'groupingid' => null,
        'groupmode' => null,
        'height' => null,
        'hidebrowse' => null,
        'hidetoc' => null,
        'id' => null,
        'intro' => null,
        'introfiles' => null,
        'introformat' => null,
        'lang' => null,
        'lastattemptlock' => null,
        'launch' => null,
        'maxattempt' => null,
        'maxgrade' => null,
        'md5hash' => null,
        'name' => null,
        'nav' => null,
        'navpositionleft' => null,
        'navpositiontop' => null,
        'options' => null,
        'packagesize' => null,
        'packageurl' => null,
        'popup' => null,
        'protectpackagedownloads' => null,
        'reference' => null,
        'revision' => null,
        'scormtype' => null,
        'section' => null,
        'sha1hash' => null,
        'skipview' => null,
        'timeclose' => null,
        'timemodified' => null,
        'timeopen' => null,
        'updatefreq' => null,
        'version' => null,
        'visible' => null,
        'whatgrade' => null,
        'width' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'auto' => false,
        'autocommit' => false,
        'completionscorerequired' => false,
        'completionstatusallscos' => false,
        'completionstatusrequired' => false,
        'course' => false,
        'coursemodule' => false,
        'displayattemptstatus' => false,
        'displaycoursestructure' => false,
        'forcecompleted' => false,
        'forcenewattempt' => false,
        'grademethod' => false,
        'groupingid' => false,
        'groupmode' => false,
        'height' => false,
        'hidebrowse' => false,
        'hidetoc' => false,
        'id' => false,
        'intro' => false,
        'introfiles' => false,
        'introformat' => false,
        'lang' => false,
        'lastattemptlock' => false,
        'launch' => false,
        'maxattempt' => false,
        'maxgrade' => false,
        'md5hash' => false,
        'name' => false,
        'nav' => false,
        'navpositionleft' => false,
        'navpositiontop' => false,
        'options' => false,
        'packagesize' => false,
        'packageurl' => false,
        'popup' => false,
        'protectpackagedownloads' => false,
        'reference' => false,
        'revision' => false,
        'scormtype' => false,
        'section' => false,
        'sha1hash' => false,
        'skipview' => false,
        'timeclose' => false,
        'timemodified' => false,
        'timeopen' => false,
        'updatefreq' => false,
        'version' => false,
        'visible' => false,
        'whatgrade' => false,
        'width' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto' => 'auto',
        'autocommit' => 'autocommit',
        'completionscorerequired' => 'completionscorerequired',
        'completionstatusallscos' => 'completionstatusallscos',
        'completionstatusrequired' => 'completionstatusrequired',
        'course' => 'course',
        'coursemodule' => 'coursemodule',
        'displayattemptstatus' => 'displayattemptstatus',
        'displaycoursestructure' => 'displaycoursestructure',
        'forcecompleted' => 'forcecompleted',
        'forcenewattempt' => 'forcenewattempt',
        'grademethod' => 'grademethod',
        'groupingid' => 'groupingid',
        'groupmode' => 'groupmode',
        'height' => 'height',
        'hidebrowse' => 'hidebrowse',
        'hidetoc' => 'hidetoc',
        'id' => 'id',
        'intro' => 'intro',
        'introfiles' => 'introfiles',
        'introformat' => 'introformat',
        'lang' => 'lang',
        'lastattemptlock' => 'lastattemptlock',
        'launch' => 'launch',
        'maxattempt' => 'maxattempt',
        'maxgrade' => 'maxgrade',
        'md5hash' => 'md5hash',
        'name' => 'name',
        'nav' => 'nav',
        'navpositionleft' => 'navpositionleft',
        'navpositiontop' => 'navpositiontop',
        'options' => 'options',
        'packagesize' => 'packagesize',
        'packageurl' => 'packageurl',
        'popup' => 'popup',
        'protectpackagedownloads' => 'protectpackagedownloads',
        'reference' => 'reference',
        'revision' => 'revision',
        'scormtype' => 'scormtype',
        'section' => 'section',
        'sha1hash' => 'sha1hash',
        'skipview' => 'skipview',
        'timeclose' => 'timeclose',
        'timemodified' => 'timemodified',
        'timeopen' => 'timeopen',
        'updatefreq' => 'updatefreq',
        'version' => 'version',
        'visible' => 'visible',
        'whatgrade' => 'whatgrade',
        'width' => 'width'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto' => 'setAuto',
        'autocommit' => 'setAutocommit',
        'completionscorerequired' => 'setCompletionscorerequired',
        'completionstatusallscos' => 'setCompletionstatusallscos',
        'completionstatusrequired' => 'setCompletionstatusrequired',
        'course' => 'setCourse',
        'coursemodule' => 'setCoursemodule',
        'displayattemptstatus' => 'setDisplayattemptstatus',
        'displaycoursestructure' => 'setDisplaycoursestructure',
        'forcecompleted' => 'setForcecompleted',
        'forcenewattempt' => 'setForcenewattempt',
        'grademethod' => 'setGrademethod',
        'groupingid' => 'setGroupingid',
        'groupmode' => 'setGroupmode',
        'height' => 'setHeight',
        'hidebrowse' => 'setHidebrowse',
        'hidetoc' => 'setHidetoc',
        'id' => 'setId',
        'intro' => 'setIntro',
        'introfiles' => 'setIntrofiles',
        'introformat' => 'setIntroformat',
        'lang' => 'setLang',
        'lastattemptlock' => 'setLastattemptlock',
        'launch' => 'setLaunch',
        'maxattempt' => 'setMaxattempt',
        'maxgrade' => 'setMaxgrade',
        'md5hash' => 'setMd5hash',
        'name' => 'setName',
        'nav' => 'setNav',
        'navpositionleft' => 'setNavpositionleft',
        'navpositiontop' => 'setNavpositiontop',
        'options' => 'setOptions',
        'packagesize' => 'setPackagesize',
        'packageurl' => 'setPackageurl',
        'popup' => 'setPopup',
        'protectpackagedownloads' => 'setProtectpackagedownloads',
        'reference' => 'setReference',
        'revision' => 'setRevision',
        'scormtype' => 'setScormtype',
        'section' => 'setSection',
        'sha1hash' => 'setSha1hash',
        'skipview' => 'setSkipview',
        'timeclose' => 'setTimeclose',
        'timemodified' => 'setTimemodified',
        'timeopen' => 'setTimeopen',
        'updatefreq' => 'setUpdatefreq',
        'version' => 'setVersion',
        'visible' => 'setVisible',
        'whatgrade' => 'setWhatgrade',
        'width' => 'setWidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto' => 'getAuto',
        'autocommit' => 'getAutocommit',
        'completionscorerequired' => 'getCompletionscorerequired',
        'completionstatusallscos' => 'getCompletionstatusallscos',
        'completionstatusrequired' => 'getCompletionstatusrequired',
        'course' => 'getCourse',
        'coursemodule' => 'getCoursemodule',
        'displayattemptstatus' => 'getDisplayattemptstatus',
        'displaycoursestructure' => 'getDisplaycoursestructure',
        'forcecompleted' => 'getForcecompleted',
        'forcenewattempt' => 'getForcenewattempt',
        'grademethod' => 'getGrademethod',
        'groupingid' => 'getGroupingid',
        'groupmode' => 'getGroupmode',
        'height' => 'getHeight',
        'hidebrowse' => 'getHidebrowse',
        'hidetoc' => 'getHidetoc',
        'id' => 'getId',
        'intro' => 'getIntro',
        'introfiles' => 'getIntrofiles',
        'introformat' => 'getIntroformat',
        'lang' => 'getLang',
        'lastattemptlock' => 'getLastattemptlock',
        'launch' => 'getLaunch',
        'maxattempt' => 'getMaxattempt',
        'maxgrade' => 'getMaxgrade',
        'md5hash' => 'getMd5hash',
        'name' => 'getName',
        'nav' => 'getNav',
        'navpositionleft' => 'getNavpositionleft',
        'navpositiontop' => 'getNavpositiontop',
        'options' => 'getOptions',
        'packagesize' => 'getPackagesize',
        'packageurl' => 'getPackageurl',
        'popup' => 'getPopup',
        'protectpackagedownloads' => 'getProtectpackagedownloads',
        'reference' => 'getReference',
        'revision' => 'getRevision',
        'scormtype' => 'getScormtype',
        'section' => 'getSection',
        'sha1hash' => 'getSha1hash',
        'skipview' => 'getSkipview',
        'timeclose' => 'getTimeclose',
        'timemodified' => 'getTimemodified',
        'timeopen' => 'getTimeopen',
        'updatefreq' => 'getUpdatefreq',
        'version' => 'getVersion',
        'visible' => 'getVisible',
        'whatgrade' => 'getWhatgrade',
        'width' => 'getWidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('auto', $data ?? [], null);
        $this->setIfExists('autocommit', $data ?? [], null);
        $this->setIfExists('completionscorerequired', $data ?? [], null);
        $this->setIfExists('completionstatusallscos', $data ?? [], null);
        $this->setIfExists('completionstatusrequired', $data ?? [], null);
        $this->setIfExists('course', $data ?? [], null);
        $this->setIfExists('coursemodule', $data ?? [], null);
        $this->setIfExists('displayattemptstatus', $data ?? [], null);
        $this->setIfExists('displaycoursestructure', $data ?? [], null);
        $this->setIfExists('forcecompleted', $data ?? [], null);
        $this->setIfExists('forcenewattempt', $data ?? [], null);
        $this->setIfExists('grademethod', $data ?? [], null);
        $this->setIfExists('groupingid', $data ?? [], null);
        $this->setIfExists('groupmode', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('hidebrowse', $data ?? [], null);
        $this->setIfExists('hidetoc', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('intro', $data ?? [], null);
        $this->setIfExists('introfiles', $data ?? [], null);
        $this->setIfExists('introformat', $data ?? [], null);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('lastattemptlock', $data ?? [], null);
        $this->setIfExists('launch', $data ?? [], null);
        $this->setIfExists('maxattempt', $data ?? [], null);
        $this->setIfExists('maxgrade', $data ?? [], null);
        $this->setIfExists('md5hash', $data ?? [], 'null');
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('nav', $data ?? [], null);
        $this->setIfExists('navpositionleft', $data ?? [], null);
        $this->setIfExists('navpositiontop', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('packagesize', $data ?? [], null);
        $this->setIfExists('packageurl', $data ?? [], 'null');
        $this->setIfExists('popup', $data ?? [], null);
        $this->setIfExists('protectpackagedownloads', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], 'null');
        $this->setIfExists('revision', $data ?? [], null);
        $this->setIfExists('scormtype', $data ?? [], 'null');
        $this->setIfExists('section', $data ?? [], null);
        $this->setIfExists('sha1hash', $data ?? [], 'null');
        $this->setIfExists('skipview', $data ?? [], null);
        $this->setIfExists('timeclose', $data ?? [], null);
        $this->setIfExists('timemodified', $data ?? [], null);
        $this->setIfExists('timeopen', $data ?? [], null);
        $this->setIfExists('updatefreq', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], 'null');
        $this->setIfExists('visible', $data ?? [], null);
        $this->setIfExists('whatgrade', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto
     *
     * @return bool|null
     */
    public function getAuto()
    {
        return $this->container['auto'];
    }

    /**
     * Sets auto
     *
     * @param bool|null $auto Auto continue?
     *
     * @return self
     */
    public function setAuto($auto)
    {
        if (is_null($auto)) {
            throw new \InvalidArgumentException('non-nullable auto cannot be null');
        }
        $this->container['auto'] = $auto;

        return $this;
    }

    /**
     * Gets autocommit
     *
     * @return bool|null
     */
    public function getAutocommit()
    {
        return $this->container['autocommit'];
    }

    /**
     * Sets autocommit
     *
     * @param bool|null $autocommit Save track data automatically?
     *
     * @return self
     */
    public function setAutocommit($autocommit)
    {
        if (is_null($autocommit)) {
            throw new \InvalidArgumentException('non-nullable autocommit cannot be null');
        }
        $this->container['autocommit'] = $autocommit;

        return $this;
    }

    /**
     * Gets completionscorerequired
     *
     * @return int|null
     */
    public function getCompletionscorerequired()
    {
        return $this->container['completionscorerequired'];
    }

    /**
     * Sets completionscorerequired
     *
     * @param int|null $completionscorerequired Minimum score required
     *
     * @return self
     */
    public function setCompletionscorerequired($completionscorerequired)
    {
        if (is_null($completionscorerequired)) {
            throw new \InvalidArgumentException('non-nullable completionscorerequired cannot be null');
        }
        $this->container['completionscorerequired'] = $completionscorerequired;

        return $this;
    }

    /**
     * Gets completionstatusallscos
     *
     * @return int|null
     */
    public function getCompletionstatusallscos()
    {
        return $this->container['completionstatusallscos'];
    }

    /**
     * Sets completionstatusallscos
     *
     * @param int|null $completionstatusallscos Require all scos to return completion status
     *
     * @return self
     */
    public function setCompletionstatusallscos($completionstatusallscos)
    {
        if (is_null($completionstatusallscos)) {
            throw new \InvalidArgumentException('non-nullable completionstatusallscos cannot be null');
        }
        $this->container['completionstatusallscos'] = $completionstatusallscos;

        return $this;
    }

    /**
     * Gets completionstatusrequired
     *
     * @return int|null
     */
    public function getCompletionstatusrequired()
    {
        return $this->container['completionstatusrequired'];
    }

    /**
     * Sets completionstatusrequired
     *
     * @param int|null $completionstatusrequired Status passed/completed required?
     *
     * @return self
     */
    public function setCompletionstatusrequired($completionstatusrequired)
    {
        if (is_null($completionstatusrequired)) {
            throw new \InvalidArgumentException('non-nullable completionstatusrequired cannot be null');
        }
        $this->container['completionstatusrequired'] = $completionstatusrequired;

        return $this;
    }

    /**
     * Gets course
     *
     * @return int|null
     */
    public function getCourse()
    {
        return $this->container['course'];
    }

    /**
     * Sets course
     *
     * @param int|null $course Course id
     *
     * @return self
     */
    public function setCourse($course)
    {
        if (is_null($course)) {
            throw new \InvalidArgumentException('non-nullable course cannot be null');
        }
        $this->container['course'] = $course;

        return $this;
    }

    /**
     * Gets coursemodule
     *
     * @return int|null
     */
    public function getCoursemodule()
    {
        return $this->container['coursemodule'];
    }

    /**
     * Sets coursemodule
     *
     * @param int|null $coursemodule Course module id
     *
     * @return self
     */
    public function setCoursemodule($coursemodule)
    {
        if (is_null($coursemodule)) {
            throw new \InvalidArgumentException('non-nullable coursemodule cannot be null');
        }
        $this->container['coursemodule'] = $coursemodule;

        return $this;
    }

    /**
     * Gets displayattemptstatus
     *
     * @return int|null
     */
    public function getDisplayattemptstatus()
    {
        return $this->container['displayattemptstatus'];
    }

    /**
     * Sets displayattemptstatus
     *
     * @param int|null $displayattemptstatus How to display attempt status
     *
     * @return self
     */
    public function setDisplayattemptstatus($displayattemptstatus)
    {
        if (is_null($displayattemptstatus)) {
            throw new \InvalidArgumentException('non-nullable displayattemptstatus cannot be null');
        }
        $this->container['displayattemptstatus'] = $displayattemptstatus;

        return $this;
    }

    /**
     * Gets displaycoursestructure
     *
     * @return bool|null
     */
    public function getDisplaycoursestructure()
    {
        return $this->container['displaycoursestructure'];
    }

    /**
     * Sets displaycoursestructure
     *
     * @param bool|null $displaycoursestructure Display contents structure
     *
     * @return self
     */
    public function setDisplaycoursestructure($displaycoursestructure)
    {
        if (is_null($displaycoursestructure)) {
            throw new \InvalidArgumentException('non-nullable displaycoursestructure cannot be null');
        }
        $this->container['displaycoursestructure'] = $displaycoursestructure;

        return $this;
    }

    /**
     * Gets forcecompleted
     *
     * @return bool|null
     */
    public function getForcecompleted()
    {
        return $this->container['forcecompleted'];
    }

    /**
     * Sets forcecompleted
     *
     * @param bool|null $forcecompleted Status current attempt is forced to \"completed\"
     *
     * @return self
     */
    public function setForcecompleted($forcecompleted)
    {
        if (is_null($forcecompleted)) {
            throw new \InvalidArgumentException('non-nullable forcecompleted cannot be null');
        }
        $this->container['forcecompleted'] = $forcecompleted;

        return $this;
    }

    /**
     * Gets forcenewattempt
     *
     * @return int|null
     */
    public function getForcenewattempt()
    {
        return $this->container['forcenewattempt'];
    }

    /**
     * Sets forcenewattempt
     *
     * @param int|null $forcenewattempt Controls re-entry behaviour
     *
     * @return self
     */
    public function setForcenewattempt($forcenewattempt)
    {
        if (is_null($forcenewattempt)) {
            throw new \InvalidArgumentException('non-nullable forcenewattempt cannot be null');
        }
        $this->container['forcenewattempt'] = $forcenewattempt;

        return $this;
    }

    /**
     * Gets grademethod
     *
     * @return int|null
     */
    public function getGrademethod()
    {
        return $this->container['grademethod'];
    }

    /**
     * Sets grademethod
     *
     * @param int|null $grademethod Grade method
     *
     * @return self
     */
    public function setGrademethod($grademethod)
    {
        if (is_null($grademethod)) {
            throw new \InvalidArgumentException('non-nullable grademethod cannot be null');
        }
        $this->container['grademethod'] = $grademethod;

        return $this;
    }

    /**
     * Gets groupingid
     *
     * @return int|null
     */
    public function getGroupingid()
    {
        return $this->container['groupingid'];
    }

    /**
     * Sets groupingid
     *
     * @param int|null $groupingid Group id
     *
     * @return self
     */
    public function setGroupingid($groupingid)
    {
        if (is_null($groupingid)) {
            throw new \InvalidArgumentException('non-nullable groupingid cannot be null');
        }
        $this->container['groupingid'] = $groupingid;

        return $this;
    }

    /**
     * Gets groupmode
     *
     * @return int|null
     */
    public function getGroupmode()
    {
        return $this->container['groupmode'];
    }

    /**
     * Sets groupmode
     *
     * @param int|null $groupmode Group mode
     *
     * @return self
     */
    public function setGroupmode($groupmode)
    {
        if (is_null($groupmode)) {
            throw new \InvalidArgumentException('non-nullable groupmode cannot be null');
        }
        $this->container['groupmode'] = $groupmode;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height Frame height
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets hidebrowse
     *
     * @return bool|null
     */
    public function getHidebrowse()
    {
        return $this->container['hidebrowse'];
    }

    /**
     * Sets hidebrowse
     *
     * @param bool|null $hidebrowse Disable preview mode?
     *
     * @return self
     */
    public function setHidebrowse($hidebrowse)
    {
        if (is_null($hidebrowse)) {
            throw new \InvalidArgumentException('non-nullable hidebrowse cannot be null');
        }
        $this->container['hidebrowse'] = $hidebrowse;

        return $this;
    }

    /**
     * Gets hidetoc
     *
     * @return int|null
     */
    public function getHidetoc()
    {
        return $this->container['hidetoc'];
    }

    /**
     * Sets hidetoc
     *
     * @param int|null $hidetoc How to display the SCORM structure in player
     *
     * @return self
     */
    public function setHidetoc($hidetoc)
    {
        if (is_null($hidetoc)) {
            throw new \InvalidArgumentException('non-nullable hidetoc cannot be null');
        }
        $this->container['hidetoc'] = $hidetoc;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Activity instance id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets intro
     *
     * @return string|null
     */
    public function getIntro()
    {
        return $this->container['intro'];
    }

    /**
     * Sets intro
     *
     * @param string|null $intro Activity introduction
     *
     * @return self
     */
    public function setIntro($intro)
    {
        if (is_null($intro)) {
            throw new \InvalidArgumentException('non-nullable intro cannot be null');
        }
        $this->container['intro'] = $intro;

        return $this;
    }

    /**
     * Gets introfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null
     */
    public function getIntrofiles()
    {
        return $this->container['introfiles'];
    }

    /**
     * Sets introfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null $introfiles introfiles
     *
     * @return self
     */
    public function setIntrofiles($introfiles)
    {
        if (is_null($introfiles)) {
            throw new \InvalidArgumentException('non-nullable introfiles cannot be null');
        }
        $this->container['introfiles'] = $introfiles;

        return $this;
    }

    /**
     * Gets introformat
     *
     * @return int|null
     */
    public function getIntroformat()
    {
        return $this->container['introformat'];
    }

    /**
     * Sets introformat
     *
     * @param int|null $introformat intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setIntroformat($introformat)
    {
        if (is_null($introformat)) {
            throw new \InvalidArgumentException('non-nullable introformat cannot be null');
        }
        $this->container['introformat'] = $introformat;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang Forced activity language
     *
     * @return self
     */
    public function setLang($lang)
    {
        if (is_null($lang)) {
            throw new \InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets lastattemptlock
     *
     * @return bool|null
     */
    public function getLastattemptlock()
    {
        return $this->container['lastattemptlock'];
    }

    /**
     * Sets lastattemptlock
     *
     * @param bool|null $lastattemptlock Prevents to launch new attempts once finished
     *
     * @return self
     */
    public function setLastattemptlock($lastattemptlock)
    {
        if (is_null($lastattemptlock)) {
            throw new \InvalidArgumentException('non-nullable lastattemptlock cannot be null');
        }
        $this->container['lastattemptlock'] = $lastattemptlock;

        return $this;
    }

    /**
     * Gets launch
     *
     * @return int|null
     */
    public function getLaunch()
    {
        return $this->container['launch'];
    }

    /**
     * Sets launch
     *
     * @param int|null $launch First content to launch
     *
     * @return self
     */
    public function setLaunch($launch)
    {
        if (is_null($launch)) {
            throw new \InvalidArgumentException('non-nullable launch cannot be null');
        }
        $this->container['launch'] = $launch;

        return $this;
    }

    /**
     * Gets maxattempt
     *
     * @return int|null
     */
    public function getMaxattempt()
    {
        return $this->container['maxattempt'];
    }

    /**
     * Sets maxattempt
     *
     * @param int|null $maxattempt Maximum number of attemtps
     *
     * @return self
     */
    public function setMaxattempt($maxattempt)
    {
        if (is_null($maxattempt)) {
            throw new \InvalidArgumentException('non-nullable maxattempt cannot be null');
        }
        $this->container['maxattempt'] = $maxattempt;

        return $this;
    }

    /**
     * Gets maxgrade
     *
     * @return int|null
     */
    public function getMaxgrade()
    {
        return $this->container['maxgrade'];
    }

    /**
     * Sets maxgrade
     *
     * @param int|null $maxgrade Max grade
     *
     * @return self
     */
    public function setMaxgrade($maxgrade)
    {
        if (is_null($maxgrade)) {
            throw new \InvalidArgumentException('non-nullable maxgrade cannot be null');
        }
        $this->container['maxgrade'] = $maxgrade;

        return $this;
    }

    /**
     * Gets md5hash
     *
     * @return string|null
     */
    public function getMd5hash()
    {
        return $this->container['md5hash'];
    }

    /**
     * Sets md5hash
     *
     * @param string|null $md5hash MD5 Hash of package file
     *
     * @return self
     */
    public function setMd5hash($md5hash)
    {
        if (is_null($md5hash)) {
            throw new \InvalidArgumentException('non-nullable md5hash cannot be null');
        }
        $this->container['md5hash'] = $md5hash;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Activity name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nav
     *
     * @return int|null
     */
    public function getNav()
    {
        return $this->container['nav'];
    }

    /**
     * Sets nav
     *
     * @param int|null $nav Show navigation buttons
     *
     * @return self
     */
    public function setNav($nav)
    {
        if (is_null($nav)) {
            throw new \InvalidArgumentException('non-nullable nav cannot be null');
        }
        $this->container['nav'] = $nav;

        return $this;
    }

    /**
     * Gets navpositionleft
     *
     * @return int|null
     */
    public function getNavpositionleft()
    {
        return $this->container['navpositionleft'];
    }

    /**
     * Sets navpositionleft
     *
     * @param int|null $navpositionleft Navigation position left
     *
     * @return self
     */
    public function setNavpositionleft($navpositionleft)
    {
        if (is_null($navpositionleft)) {
            throw new \InvalidArgumentException('non-nullable navpositionleft cannot be null');
        }
        $this->container['navpositionleft'] = $navpositionleft;

        return $this;
    }

    /**
     * Gets navpositiontop
     *
     * @return int|null
     */
    public function getNavpositiontop()
    {
        return $this->container['navpositiontop'];
    }

    /**
     * Sets navpositiontop
     *
     * @param int|null $navpositiontop Navigation position top
     *
     * @return self
     */
    public function setNavpositiontop($navpositiontop)
    {
        if (is_null($navpositiontop)) {
            throw new \InvalidArgumentException('non-nullable navpositiontop cannot be null');
        }
        $this->container['navpositiontop'] = $navpositiontop;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string|null $options Additional options
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets packagesize
     *
     * @return int|null
     */
    public function getPackagesize()
    {
        return $this->container['packagesize'];
    }

    /**
     * Sets packagesize
     *
     * @param int|null $packagesize SCORM zip package size
     *
     * @return self
     */
    public function setPackagesize($packagesize)
    {
        if (is_null($packagesize)) {
            throw new \InvalidArgumentException('non-nullable packagesize cannot be null');
        }
        $this->container['packagesize'] = $packagesize;

        return $this;
    }

    /**
     * Gets packageurl
     *
     * @return string|null
     */
    public function getPackageurl()
    {
        return $this->container['packageurl'];
    }

    /**
     * Sets packageurl
     *
     * @param string|null $packageurl SCORM zip package URL
     *
     * @return self
     */
    public function setPackageurl($packageurl)
    {
        if (is_null($packageurl)) {
            throw new \InvalidArgumentException('non-nullable packageurl cannot be null');
        }
        $this->container['packageurl'] = $packageurl;

        return $this;
    }

    /**
     * Gets popup
     *
     * @return int|null
     */
    public function getPopup()
    {
        return $this->container['popup'];
    }

    /**
     * Sets popup
     *
     * @param int|null $popup Display in current or new window
     *
     * @return self
     */
    public function setPopup($popup)
    {
        if (is_null($popup)) {
            throw new \InvalidArgumentException('non-nullable popup cannot be null');
        }
        $this->container['popup'] = $popup;

        return $this;
    }

    /**
     * Gets protectpackagedownloads
     *
     * @return bool|null
     */
    public function getProtectpackagedownloads()
    {
        return $this->container['protectpackagedownloads'];
    }

    /**
     * Sets protectpackagedownloads
     *
     * @param bool|null $protectpackagedownloads Protect package downloads?
     *
     * @return self
     */
    public function setProtectpackagedownloads($protectpackagedownloads)
    {
        if (is_null($protectpackagedownloads)) {
            throw new \InvalidArgumentException('non-nullable protectpackagedownloads cannot be null');
        }
        $this->container['protectpackagedownloads'] = $protectpackagedownloads;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Reference to the package
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int|null
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int|null $revision Revison number
     *
     * @return self
     */
    public function setRevision($revision)
    {
        if (is_null($revision)) {
            throw new \InvalidArgumentException('non-nullable revision cannot be null');
        }
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets scormtype
     *
     * @return string|null
     */
    public function getScormtype()
    {
        return $this->container['scormtype'];
    }

    /**
     * Sets scormtype
     *
     * @param string|null $scormtype SCORM type
     *
     * @return self
     */
    public function setScormtype($scormtype)
    {
        if (is_null($scormtype)) {
            throw new \InvalidArgumentException('non-nullable scormtype cannot be null');
        }
        $this->container['scormtype'] = $scormtype;

        return $this;
    }

    /**
     * Gets section
     *
     * @return int|null
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param int|null $section Course section id
     *
     * @return self
     */
    public function setSection($section)
    {
        if (is_null($section)) {
            throw new \InvalidArgumentException('non-nullable section cannot be null');
        }
        $this->container['section'] = $section;

        return $this;
    }

    /**
     * Gets sha1hash
     *
     * @return string|null
     */
    public function getSha1hash()
    {
        return $this->container['sha1hash'];
    }

    /**
     * Sets sha1hash
     *
     * @param string|null $sha1hash Package content or ext path hash
     *
     * @return self
     */
    public function setSha1hash($sha1hash)
    {
        if (is_null($sha1hash)) {
            throw new \InvalidArgumentException('non-nullable sha1hash cannot be null');
        }
        $this->container['sha1hash'] = $sha1hash;

        return $this;
    }

    /**
     * Gets skipview
     *
     * @return int|null
     */
    public function getSkipview()
    {
        return $this->container['skipview'];
    }

    /**
     * Sets skipview
     *
     * @param int|null $skipview How to skip the content structure page
     *
     * @return self
     */
    public function setSkipview($skipview)
    {
        if (is_null($skipview)) {
            throw new \InvalidArgumentException('non-nullable skipview cannot be null');
        }
        $this->container['skipview'] = $skipview;

        return $this;
    }

    /**
     * Gets timeclose
     *
     * @return int|null
     */
    public function getTimeclose()
    {
        return $this->container['timeclose'];
    }

    /**
     * Sets timeclose
     *
     * @param int|null $timeclose Available to
     *
     * @return self
     */
    public function setTimeclose($timeclose)
    {
        if (is_null($timeclose)) {
            throw new \InvalidArgumentException('non-nullable timeclose cannot be null');
        }
        $this->container['timeclose'] = $timeclose;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified Time of last modification
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets timeopen
     *
     * @return int|null
     */
    public function getTimeopen()
    {
        return $this->container['timeopen'];
    }

    /**
     * Sets timeopen
     *
     * @param int|null $timeopen Available from
     *
     * @return self
     */
    public function setTimeopen($timeopen)
    {
        if (is_null($timeopen)) {
            throw new \InvalidArgumentException('non-nullable timeopen cannot be null');
        }
        $this->container['timeopen'] = $timeopen;

        return $this;
    }

    /**
     * Gets updatefreq
     *
     * @return int|null
     */
    public function getUpdatefreq()
    {
        return $this->container['updatefreq'];
    }

    /**
     * Sets updatefreq
     *
     * @param int|null $updatefreq Auto-update frequency for remote packages
     *
     * @return self
     */
    public function setUpdatefreq($updatefreq)
    {
        if (is_null($updatefreq)) {
            throw new \InvalidArgumentException('non-nullable updatefreq cannot be null');
        }
        $this->container['updatefreq'] = $updatefreq;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version SCORM version (SCORM_12, SCORM_13, SCORM_AICC)
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool|null $visible Visible
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets whatgrade
     *
     * @return int|null
     */
    public function getWhatgrade()
    {
        return $this->container['whatgrade'];
    }

    /**
     * Sets whatgrade
     *
     * @param int|null $whatgrade What grade
     *
     * @return self
     */
    public function setWhatgrade($whatgrade)
    {
        if (is_null($whatgrade)) {
            throw new \InvalidArgumentException('non-nullable whatgrade cannot be null');
        }
        $this->container['whatgrade'] = $whatgrade;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width Frame width
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


