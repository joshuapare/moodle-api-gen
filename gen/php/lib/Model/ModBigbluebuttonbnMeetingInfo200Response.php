<?php
/**
 * ModBigbluebuttonbnMeetingInfo200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModBigbluebuttonbnMeetingInfo200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModBigbluebuttonbnMeetingInfo200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_bigbluebuttonbn_meeting_info_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bigbluebuttonbnid' => 'string',
        'canjoin' => 'bool',
        'closingtime' => 'int',
        'cmid' => 'int',
        'features' => '\OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfo200ResponseFeaturesInner[]',
        'groupid' => 'int',
        'guestaccessenabled' => 'bool',
        'guestjoinurl' => 'string',
        'guestpassword' => 'string',
        'ismoderator' => 'bool',
        'joinurl' => 'string',
        'meetingid' => 'string',
        'moderatorcount' => 'int',
        'moderatorplural' => 'bool',
        'openingtime' => 'int',
        'participantcount' => 'int',
        'participantplural' => 'bool',
        'presentations' => '\OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner[]',
        'startedat' => 'int',
        'statusclosed' => 'bool',
        'statusmessage' => 'string',
        'statusopen' => 'bool',
        'statusrunning' => 'bool',
        'userlimit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bigbluebuttonbnid' => null,
        'canjoin' => null,
        'closingtime' => null,
        'cmid' => null,
        'features' => null,
        'groupid' => null,
        'guestaccessenabled' => null,
        'guestjoinurl' => null,
        'guestpassword' => null,
        'ismoderator' => null,
        'joinurl' => null,
        'meetingid' => null,
        'moderatorcount' => null,
        'moderatorplural' => null,
        'openingtime' => null,
        'participantcount' => null,
        'participantplural' => null,
        'presentations' => null,
        'startedat' => null,
        'statusclosed' => null,
        'statusmessage' => null,
        'statusopen' => null,
        'statusrunning' => null,
        'userlimit' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bigbluebuttonbnid' => false,
        'canjoin' => false,
        'closingtime' => false,
        'cmid' => false,
        'features' => false,
        'groupid' => false,
        'guestaccessenabled' => false,
        'guestjoinurl' => false,
        'guestpassword' => false,
        'ismoderator' => false,
        'joinurl' => false,
        'meetingid' => false,
        'moderatorcount' => false,
        'moderatorplural' => false,
        'openingtime' => false,
        'participantcount' => false,
        'participantplural' => false,
        'presentations' => false,
        'startedat' => false,
        'statusclosed' => false,
        'statusmessage' => false,
        'statusopen' => false,
        'statusrunning' => false,
        'userlimit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bigbluebuttonbnid' => 'bigbluebuttonbnid',
        'canjoin' => 'canjoin',
        'closingtime' => 'closingtime',
        'cmid' => 'cmid',
        'features' => 'features',
        'groupid' => 'groupid',
        'guestaccessenabled' => 'guestaccessenabled',
        'guestjoinurl' => 'guestjoinurl',
        'guestpassword' => 'guestpassword',
        'ismoderator' => 'ismoderator',
        'joinurl' => 'joinurl',
        'meetingid' => 'meetingid',
        'moderatorcount' => 'moderatorcount',
        'moderatorplural' => 'moderatorplural',
        'openingtime' => 'openingtime',
        'participantcount' => 'participantcount',
        'participantplural' => 'participantplural',
        'presentations' => 'presentations',
        'startedat' => 'startedat',
        'statusclosed' => 'statusclosed',
        'statusmessage' => 'statusmessage',
        'statusopen' => 'statusopen',
        'statusrunning' => 'statusrunning',
        'userlimit' => 'userlimit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bigbluebuttonbnid' => 'setBigbluebuttonbnid',
        'canjoin' => 'setCanjoin',
        'closingtime' => 'setClosingtime',
        'cmid' => 'setCmid',
        'features' => 'setFeatures',
        'groupid' => 'setGroupid',
        'guestaccessenabled' => 'setGuestaccessenabled',
        'guestjoinurl' => 'setGuestjoinurl',
        'guestpassword' => 'setGuestpassword',
        'ismoderator' => 'setIsmoderator',
        'joinurl' => 'setJoinurl',
        'meetingid' => 'setMeetingid',
        'moderatorcount' => 'setModeratorcount',
        'moderatorplural' => 'setModeratorplural',
        'openingtime' => 'setOpeningtime',
        'participantcount' => 'setParticipantcount',
        'participantplural' => 'setParticipantplural',
        'presentations' => 'setPresentations',
        'startedat' => 'setStartedat',
        'statusclosed' => 'setStatusclosed',
        'statusmessage' => 'setStatusmessage',
        'statusopen' => 'setStatusopen',
        'statusrunning' => 'setStatusrunning',
        'userlimit' => 'setUserlimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bigbluebuttonbnid' => 'getBigbluebuttonbnid',
        'canjoin' => 'getCanjoin',
        'closingtime' => 'getClosingtime',
        'cmid' => 'getCmid',
        'features' => 'getFeatures',
        'groupid' => 'getGroupid',
        'guestaccessenabled' => 'getGuestaccessenabled',
        'guestjoinurl' => 'getGuestjoinurl',
        'guestpassword' => 'getGuestpassword',
        'ismoderator' => 'getIsmoderator',
        'joinurl' => 'getJoinurl',
        'meetingid' => 'getMeetingid',
        'moderatorcount' => 'getModeratorcount',
        'moderatorplural' => 'getModeratorplural',
        'openingtime' => 'getOpeningtime',
        'participantcount' => 'getParticipantcount',
        'participantplural' => 'getParticipantplural',
        'presentations' => 'getPresentations',
        'startedat' => 'getStartedat',
        'statusclosed' => 'getStatusclosed',
        'statusmessage' => 'getStatusmessage',
        'statusopen' => 'getStatusopen',
        'statusrunning' => 'getStatusrunning',
        'userlimit' => 'getUserlimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bigbluebuttonbnid', $data ?? [], 'null');
        $this->setIfExists('canjoin', $data ?? [], null);
        $this->setIfExists('closingtime', $data ?? [], null);
        $this->setIfExists('cmid', $data ?? [], null);
        $this->setIfExists('features', $data ?? [], null);
        $this->setIfExists('groupid', $data ?? [], 0);
        $this->setIfExists('guestaccessenabled', $data ?? [], null);
        $this->setIfExists('guestjoinurl', $data ?? [], 'null');
        $this->setIfExists('guestpassword', $data ?? [], 'null');
        $this->setIfExists('ismoderator', $data ?? [], null);
        $this->setIfExists('joinurl', $data ?? [], 'null');
        $this->setIfExists('meetingid', $data ?? [], null);
        $this->setIfExists('moderatorcount', $data ?? [], null);
        $this->setIfExists('moderatorplural', $data ?? [], null);
        $this->setIfExists('openingtime', $data ?? [], null);
        $this->setIfExists('participantcount', $data ?? [], null);
        $this->setIfExists('participantplural', $data ?? [], null);
        $this->setIfExists('presentations', $data ?? [], null);
        $this->setIfExists('startedat', $data ?? [], null);
        $this->setIfExists('statusclosed', $data ?? [], null);
        $this->setIfExists('statusmessage', $data ?? [], 'null');
        $this->setIfExists('statusopen', $data ?? [], null);
        $this->setIfExists('statusrunning', $data ?? [], null);
        $this->setIfExists('userlimit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bigbluebuttonbnid'] === null) {
            $invalidProperties[] = "'bigbluebuttonbnid' can't be null";
        }
        if ($this->container['canjoin'] === null) {
            $invalidProperties[] = "'canjoin' can't be null";
        }
        if ($this->container['cmid'] === null) {
            $invalidProperties[] = "'cmid' can't be null";
        }
        if ($this->container['ismoderator'] === null) {
            $invalidProperties[] = "'ismoderator' can't be null";
        }
        if ($this->container['joinurl'] === null) {
            $invalidProperties[] = "'joinurl' can't be null";
        }
        if ($this->container['meetingid'] === null) {
            $invalidProperties[] = "'meetingid' can't be null";
        }
        if ($this->container['presentations'] === null) {
            $invalidProperties[] = "'presentations' can't be null";
        }
        if ($this->container['userlimit'] === null) {
            $invalidProperties[] = "'userlimit' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bigbluebuttonbnid
     *
     * @return string
     */
    public function getBigbluebuttonbnid()
    {
        return $this->container['bigbluebuttonbnid'];
    }

    /**
     * Sets bigbluebuttonbnid
     *
     * @param string $bigbluebuttonbnid bigbluebuttonbn instance id
     *
     * @return self
     */
    public function setBigbluebuttonbnid($bigbluebuttonbnid)
    {
        if (is_null($bigbluebuttonbnid)) {
            throw new \InvalidArgumentException('non-nullable bigbluebuttonbnid cannot be null');
        }
        $this->container['bigbluebuttonbnid'] = $bigbluebuttonbnid;

        return $this;
    }

    /**
     * Gets canjoin
     *
     * @return bool
     */
    public function getCanjoin()
    {
        return $this->container['canjoin'];
    }

    /**
     * Sets canjoin
     *
     * @param bool $canjoin Can join
     *
     * @return self
     */
    public function setCanjoin($canjoin)
    {
        if (is_null($canjoin)) {
            throw new \InvalidArgumentException('non-nullable canjoin cannot be null');
        }
        $this->container['canjoin'] = $canjoin;

        return $this;
    }

    /**
     * Gets closingtime
     *
     * @return int|null
     */
    public function getClosingtime()
    {
        return $this->container['closingtime'];
    }

    /**
     * Sets closingtime
     *
     * @param int|null $closingtime Closing time
     *
     * @return self
     */
    public function setClosingtime($closingtime)
    {
        if (is_null($closingtime)) {
            throw new \InvalidArgumentException('non-nullable closingtime cannot be null');
        }
        $this->container['closingtime'] = $closingtime;

        return $this;
    }

    /**
     * Gets cmid
     *
     * @return int
     */
    public function getCmid()
    {
        return $this->container['cmid'];
    }

    /**
     * Sets cmid
     *
     * @param int $cmid CM id
     *
     * @return self
     */
    public function setCmid($cmid)
    {
        if (is_null($cmid)) {
            throw new \InvalidArgumentException('non-nullable cmid cannot be null');
        }
        $this->container['cmid'] = $cmid;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfo200ResponseFeaturesInner[]|null
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfo200ResponseFeaturesInner[]|null $features features
     *
     * @return self
     */
    public function setFeatures($features)
    {
        if (is_null($features)) {
            throw new \InvalidArgumentException('non-nullable features cannot be null');
        }
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets groupid
     *
     * @return int|null
     */
    public function getGroupid()
    {
        return $this->container['groupid'];
    }

    /**
     * Sets groupid
     *
     * @param int|null $groupid bigbluebuttonbn group id
     *
     * @return self
     */
    public function setGroupid($groupid)
    {
        if (is_null($groupid)) {
            throw new \InvalidArgumentException('non-nullable groupid cannot be null');
        }
        $this->container['groupid'] = $groupid;

        return $this;
    }

    /**
     * Gets guestaccessenabled
     *
     * @return bool|null
     */
    public function getGuestaccessenabled()
    {
        return $this->container['guestaccessenabled'];
    }

    /**
     * Sets guestaccessenabled
     *
     * @param bool|null $guestaccessenabled Guest access enabled
     *
     * @return self
     */
    public function setGuestaccessenabled($guestaccessenabled)
    {
        if (is_null($guestaccessenabled)) {
            throw new \InvalidArgumentException('non-nullable guestaccessenabled cannot be null');
        }
        $this->container['guestaccessenabled'] = $guestaccessenabled;

        return $this;
    }

    /**
     * Gets guestjoinurl
     *
     * @return string|null
     */
    public function getGuestjoinurl()
    {
        return $this->container['guestjoinurl'];
    }

    /**
     * Sets guestjoinurl
     *
     * @param string|null $guestjoinurl Guest URL
     *
     * @return self
     */
    public function setGuestjoinurl($guestjoinurl)
    {
        if (is_null($guestjoinurl)) {
            throw new \InvalidArgumentException('non-nullable guestjoinurl cannot be null');
        }
        $this->container['guestjoinurl'] = $guestjoinurl;

        return $this;
    }

    /**
     * Gets guestpassword
     *
     * @return string|null
     */
    public function getGuestpassword()
    {
        return $this->container['guestpassword'];
    }

    /**
     * Sets guestpassword
     *
     * @param string|null $guestpassword Guest join password
     *
     * @return self
     */
    public function setGuestpassword($guestpassword)
    {
        if (is_null($guestpassword)) {
            throw new \InvalidArgumentException('non-nullable guestpassword cannot be null');
        }
        $this->container['guestpassword'] = $guestpassword;

        return $this;
    }

    /**
     * Gets ismoderator
     *
     * @return bool
     */
    public function getIsmoderator()
    {
        return $this->container['ismoderator'];
    }

    /**
     * Sets ismoderator
     *
     * @param bool $ismoderator Is moderator
     *
     * @return self
     */
    public function setIsmoderator($ismoderator)
    {
        if (is_null($ismoderator)) {
            throw new \InvalidArgumentException('non-nullable ismoderator cannot be null');
        }
        $this->container['ismoderator'] = $ismoderator;

        return $this;
    }

    /**
     * Gets joinurl
     *
     * @return string
     */
    public function getJoinurl()
    {
        return $this->container['joinurl'];
    }

    /**
     * Sets joinurl
     *
     * @param string $joinurl Join URL
     *
     * @return self
     */
    public function setJoinurl($joinurl)
    {
        if (is_null($joinurl)) {
            throw new \InvalidArgumentException('non-nullable joinurl cannot be null');
        }
        $this->container['joinurl'] = $joinurl;

        return $this;
    }

    /**
     * Gets meetingid
     *
     * @return string
     */
    public function getMeetingid()
    {
        return $this->container['meetingid'];
    }

    /**
     * Sets meetingid
     *
     * @param string $meetingid Meeting id
     *
     * @return self
     */
    public function setMeetingid($meetingid)
    {
        if (is_null($meetingid)) {
            throw new \InvalidArgumentException('non-nullable meetingid cannot be null');
        }
        $this->container['meetingid'] = $meetingid;

        return $this;
    }

    /**
     * Gets moderatorcount
     *
     * @return int|null
     */
    public function getModeratorcount()
    {
        return $this->container['moderatorcount'];
    }

    /**
     * Sets moderatorcount
     *
     * @param int|null $moderatorcount Moderator count
     *
     * @return self
     */
    public function setModeratorcount($moderatorcount)
    {
        if (is_null($moderatorcount)) {
            throw new \InvalidArgumentException('non-nullable moderatorcount cannot be null');
        }
        $this->container['moderatorcount'] = $moderatorcount;

        return $this;
    }

    /**
     * Gets moderatorplural
     *
     * @return bool|null
     */
    public function getModeratorplural()
    {
        return $this->container['moderatorplural'];
    }

    /**
     * Sets moderatorplural
     *
     * @param bool|null $moderatorplural Several moderators ?
     *
     * @return self
     */
    public function setModeratorplural($moderatorplural)
    {
        if (is_null($moderatorplural)) {
            throw new \InvalidArgumentException('non-nullable moderatorplural cannot be null');
        }
        $this->container['moderatorplural'] = $moderatorplural;

        return $this;
    }

    /**
     * Gets openingtime
     *
     * @return int|null
     */
    public function getOpeningtime()
    {
        return $this->container['openingtime'];
    }

    /**
     * Sets openingtime
     *
     * @param int|null $openingtime Opening time
     *
     * @return self
     */
    public function setOpeningtime($openingtime)
    {
        if (is_null($openingtime)) {
            throw new \InvalidArgumentException('non-nullable openingtime cannot be null');
        }
        $this->container['openingtime'] = $openingtime;

        return $this;
    }

    /**
     * Gets participantcount
     *
     * @return int|null
     */
    public function getParticipantcount()
    {
        return $this->container['participantcount'];
    }

    /**
     * Sets participantcount
     *
     * @param int|null $participantcount Participant count
     *
     * @return self
     */
    public function setParticipantcount($participantcount)
    {
        if (is_null($participantcount)) {
            throw new \InvalidArgumentException('non-nullable participantcount cannot be null');
        }
        $this->container['participantcount'] = $participantcount;

        return $this;
    }

    /**
     * Gets participantplural
     *
     * @return bool|null
     */
    public function getParticipantplural()
    {
        return $this->container['participantplural'];
    }

    /**
     * Sets participantplural
     *
     * @param bool|null $participantplural Several participants ?
     *
     * @return self
     */
    public function setParticipantplural($participantplural)
    {
        if (is_null($participantplural)) {
            throw new \InvalidArgumentException('non-nullable participantplural cannot be null');
        }
        $this->container['participantplural'] = $participantplural;

        return $this;
    }

    /**
     * Gets presentations
     *
     * @return \OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner[]
     */
    public function getPresentations()
    {
        return $this->container['presentations'];
    }

    /**
     * Sets presentations
     *
     * @param \OpenAPI\Client\Model\ModBigbluebuttonbnMeetingInfo200ResponsePresentationsInner[] $presentations presentations
     *
     * @return self
     */
    public function setPresentations($presentations)
    {
        if (is_null($presentations)) {
            throw new \InvalidArgumentException('non-nullable presentations cannot be null');
        }
        $this->container['presentations'] = $presentations;

        return $this;
    }

    /**
     * Gets startedat
     *
     * @return int|null
     */
    public function getStartedat()
    {
        return $this->container['startedat'];
    }

    /**
     * Sets startedat
     *
     * @param int|null $startedat Started at
     *
     * @return self
     */
    public function setStartedat($startedat)
    {
        if (is_null($startedat)) {
            throw new \InvalidArgumentException('non-nullable startedat cannot be null');
        }
        $this->container['startedat'] = $startedat;

        return $this;
    }

    /**
     * Gets statusclosed
     *
     * @return bool|null
     */
    public function getStatusclosed()
    {
        return $this->container['statusclosed'];
    }

    /**
     * Sets statusclosed
     *
     * @param bool|null $statusclosed Status closed
     *
     * @return self
     */
    public function setStatusclosed($statusclosed)
    {
        if (is_null($statusclosed)) {
            throw new \InvalidArgumentException('non-nullable statusclosed cannot be null');
        }
        $this->container['statusclosed'] = $statusclosed;

        return $this;
    }

    /**
     * Gets statusmessage
     *
     * @return string|null
     */
    public function getStatusmessage()
    {
        return $this->container['statusmessage'];
    }

    /**
     * Sets statusmessage
     *
     * @param string|null $statusmessage Status message
     *
     * @return self
     */
    public function setStatusmessage($statusmessage)
    {
        if (is_null($statusmessage)) {
            throw new \InvalidArgumentException('non-nullable statusmessage cannot be null');
        }
        $this->container['statusmessage'] = $statusmessage;

        return $this;
    }

    /**
     * Gets statusopen
     *
     * @return bool|null
     */
    public function getStatusopen()
    {
        return $this->container['statusopen'];
    }

    /**
     * Sets statusopen
     *
     * @param bool|null $statusopen Status open
     *
     * @return self
     */
    public function setStatusopen($statusopen)
    {
        if (is_null($statusopen)) {
            throw new \InvalidArgumentException('non-nullable statusopen cannot be null');
        }
        $this->container['statusopen'] = $statusopen;

        return $this;
    }

    /**
     * Gets statusrunning
     *
     * @return bool|null
     */
    public function getStatusrunning()
    {
        return $this->container['statusrunning'];
    }

    /**
     * Sets statusrunning
     *
     * @param bool|null $statusrunning Status running
     *
     * @return self
     */
    public function setStatusrunning($statusrunning)
    {
        if (is_null($statusrunning)) {
            throw new \InvalidArgumentException('non-nullable statusrunning cannot be null');
        }
        $this->container['statusrunning'] = $statusrunning;

        return $this;
    }

    /**
     * Gets userlimit
     *
     * @return int
     */
    public function getUserlimit()
    {
        return $this->container['userlimit'];
    }

    /**
     * Sets userlimit
     *
     * @param int $userlimit User limit
     *
     * @return self
     */
    public function setUserlimit($userlimit)
    {
        if (is_null($userlimit)) {
            throw new \InvalidArgumentException('non-nullable userlimit cannot be null');
        }
        $this->container['userlimit'] = $userlimit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


