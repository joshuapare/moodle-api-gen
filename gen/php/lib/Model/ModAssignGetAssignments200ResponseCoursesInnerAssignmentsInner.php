<?php
/**
 * ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner Class Doc Comment
 *
 * @category Class
 * @description assignment information object
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_assign_get_assignments_200_response_courses_inner_assignments_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activity' => 'string',
        'activityattachments' => '\OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]',
        'activityformat' => 'int',
        'allowsubmissionsfromdate' => 'int',
        'attemptreopenmethod' => 'string',
        'blindmarking' => 'int',
        'cmid' => 'int',
        'completionsubmit' => 'int',
        'configs' => '\OpenAPI\Client\Model\ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner[]',
        'course' => 'int',
        'cutoffdate' => 'int',
        'duedate' => 'int',
        'grade' => 'int',
        'gradingduedate' => 'int',
        'hidegrader' => 'int',
        'id' => 'int',
        'intro' => 'string',
        'introattachments' => '\OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]',
        'introfiles' => '\OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]',
        'introformat' => 'int',
        'markingallocation' => 'int',
        'markingworkflow' => 'int',
        'maxattempts' => 'int',
        'name' => 'string',
        'nosubmissions' => 'int',
        'preventsubmissionnotingroup' => 'int',
        'requireallteammemberssubmit' => 'int',
        'requiresubmissionstatement' => 'int',
        'revealidentities' => 'int',
        'sendlatenotifications' => 'int',
        'sendnotifications' => 'int',
        'sendstudentnotifications' => 'int',
        'submissionattachments' => 'int',
        'submissiondrafts' => 'int',
        'submissionstatement' => 'string',
        'submissionstatementformat' => 'int',
        'teamsubmission' => 'int',
        'teamsubmissiongroupingid' => 'int',
        'timelimit' => 'int',
        'timemodified' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'activity' => null,
        'activityattachments' => null,
        'activityformat' => null,
        'allowsubmissionsfromdate' => null,
        'attemptreopenmethod' => null,
        'blindmarking' => null,
        'cmid' => null,
        'completionsubmit' => null,
        'configs' => null,
        'course' => null,
        'cutoffdate' => null,
        'duedate' => null,
        'grade' => null,
        'gradingduedate' => null,
        'hidegrader' => null,
        'id' => null,
        'intro' => null,
        'introattachments' => null,
        'introfiles' => null,
        'introformat' => null,
        'markingallocation' => null,
        'markingworkflow' => null,
        'maxattempts' => null,
        'name' => null,
        'nosubmissions' => null,
        'preventsubmissionnotingroup' => null,
        'requireallteammemberssubmit' => null,
        'requiresubmissionstatement' => null,
        'revealidentities' => null,
        'sendlatenotifications' => null,
        'sendnotifications' => null,
        'sendstudentnotifications' => null,
        'submissionattachments' => null,
        'submissiondrafts' => null,
        'submissionstatement' => null,
        'submissionstatementformat' => null,
        'teamsubmission' => null,
        'teamsubmissiongroupingid' => null,
        'timelimit' => null,
        'timemodified' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'activity' => false,
        'activityattachments' => false,
        'activityformat' => false,
        'allowsubmissionsfromdate' => false,
        'attemptreopenmethod' => false,
        'blindmarking' => false,
        'cmid' => false,
        'completionsubmit' => false,
        'configs' => false,
        'course' => false,
        'cutoffdate' => false,
        'duedate' => false,
        'grade' => false,
        'gradingduedate' => false,
        'hidegrader' => false,
        'id' => false,
        'intro' => false,
        'introattachments' => false,
        'introfiles' => false,
        'introformat' => false,
        'markingallocation' => false,
        'markingworkflow' => false,
        'maxattempts' => false,
        'name' => false,
        'nosubmissions' => false,
        'preventsubmissionnotingroup' => false,
        'requireallteammemberssubmit' => false,
        'requiresubmissionstatement' => false,
        'revealidentities' => false,
        'sendlatenotifications' => false,
        'sendnotifications' => false,
        'sendstudentnotifications' => false,
        'submissionattachments' => false,
        'submissiondrafts' => false,
        'submissionstatement' => false,
        'submissionstatementformat' => false,
        'teamsubmission' => false,
        'teamsubmissiongroupingid' => false,
        'timelimit' => false,
        'timemodified' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activity' => 'activity',
        'activityattachments' => 'activityattachments',
        'activityformat' => 'activityformat',
        'allowsubmissionsfromdate' => 'allowsubmissionsfromdate',
        'attemptreopenmethod' => 'attemptreopenmethod',
        'blindmarking' => 'blindmarking',
        'cmid' => 'cmid',
        'completionsubmit' => 'completionsubmit',
        'configs' => 'configs',
        'course' => 'course',
        'cutoffdate' => 'cutoffdate',
        'duedate' => 'duedate',
        'grade' => 'grade',
        'gradingduedate' => 'gradingduedate',
        'hidegrader' => 'hidegrader',
        'id' => 'id',
        'intro' => 'intro',
        'introattachments' => 'introattachments',
        'introfiles' => 'introfiles',
        'introformat' => 'introformat',
        'markingallocation' => 'markingallocation',
        'markingworkflow' => 'markingworkflow',
        'maxattempts' => 'maxattempts',
        'name' => 'name',
        'nosubmissions' => 'nosubmissions',
        'preventsubmissionnotingroup' => 'preventsubmissionnotingroup',
        'requireallteammemberssubmit' => 'requireallteammemberssubmit',
        'requiresubmissionstatement' => 'requiresubmissionstatement',
        'revealidentities' => 'revealidentities',
        'sendlatenotifications' => 'sendlatenotifications',
        'sendnotifications' => 'sendnotifications',
        'sendstudentnotifications' => 'sendstudentnotifications',
        'submissionattachments' => 'submissionattachments',
        'submissiondrafts' => 'submissiondrafts',
        'submissionstatement' => 'submissionstatement',
        'submissionstatementformat' => 'submissionstatementformat',
        'teamsubmission' => 'teamsubmission',
        'teamsubmissiongroupingid' => 'teamsubmissiongroupingid',
        'timelimit' => 'timelimit',
        'timemodified' => 'timemodified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activity' => 'setActivity',
        'activityattachments' => 'setActivityattachments',
        'activityformat' => 'setActivityformat',
        'allowsubmissionsfromdate' => 'setAllowsubmissionsfromdate',
        'attemptreopenmethod' => 'setAttemptreopenmethod',
        'blindmarking' => 'setBlindmarking',
        'cmid' => 'setCmid',
        'completionsubmit' => 'setCompletionsubmit',
        'configs' => 'setConfigs',
        'course' => 'setCourse',
        'cutoffdate' => 'setCutoffdate',
        'duedate' => 'setDuedate',
        'grade' => 'setGrade',
        'gradingduedate' => 'setGradingduedate',
        'hidegrader' => 'setHidegrader',
        'id' => 'setId',
        'intro' => 'setIntro',
        'introattachments' => 'setIntroattachments',
        'introfiles' => 'setIntrofiles',
        'introformat' => 'setIntroformat',
        'markingallocation' => 'setMarkingallocation',
        'markingworkflow' => 'setMarkingworkflow',
        'maxattempts' => 'setMaxattempts',
        'name' => 'setName',
        'nosubmissions' => 'setNosubmissions',
        'preventsubmissionnotingroup' => 'setPreventsubmissionnotingroup',
        'requireallteammemberssubmit' => 'setRequireallteammemberssubmit',
        'requiresubmissionstatement' => 'setRequiresubmissionstatement',
        'revealidentities' => 'setRevealidentities',
        'sendlatenotifications' => 'setSendlatenotifications',
        'sendnotifications' => 'setSendnotifications',
        'sendstudentnotifications' => 'setSendstudentnotifications',
        'submissionattachments' => 'setSubmissionattachments',
        'submissiondrafts' => 'setSubmissiondrafts',
        'submissionstatement' => 'setSubmissionstatement',
        'submissionstatementformat' => 'setSubmissionstatementformat',
        'teamsubmission' => 'setTeamsubmission',
        'teamsubmissiongroupingid' => 'setTeamsubmissiongroupingid',
        'timelimit' => 'setTimelimit',
        'timemodified' => 'setTimemodified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activity' => 'getActivity',
        'activityattachments' => 'getActivityattachments',
        'activityformat' => 'getActivityformat',
        'allowsubmissionsfromdate' => 'getAllowsubmissionsfromdate',
        'attemptreopenmethod' => 'getAttemptreopenmethod',
        'blindmarking' => 'getBlindmarking',
        'cmid' => 'getCmid',
        'completionsubmit' => 'getCompletionsubmit',
        'configs' => 'getConfigs',
        'course' => 'getCourse',
        'cutoffdate' => 'getCutoffdate',
        'duedate' => 'getDuedate',
        'grade' => 'getGrade',
        'gradingduedate' => 'getGradingduedate',
        'hidegrader' => 'getHidegrader',
        'id' => 'getId',
        'intro' => 'getIntro',
        'introattachments' => 'getIntroattachments',
        'introfiles' => 'getIntrofiles',
        'introformat' => 'getIntroformat',
        'markingallocation' => 'getMarkingallocation',
        'markingworkflow' => 'getMarkingworkflow',
        'maxattempts' => 'getMaxattempts',
        'name' => 'getName',
        'nosubmissions' => 'getNosubmissions',
        'preventsubmissionnotingroup' => 'getPreventsubmissionnotingroup',
        'requireallteammemberssubmit' => 'getRequireallteammemberssubmit',
        'requiresubmissionstatement' => 'getRequiresubmissionstatement',
        'revealidentities' => 'getRevealidentities',
        'sendlatenotifications' => 'getSendlatenotifications',
        'sendnotifications' => 'getSendnotifications',
        'sendstudentnotifications' => 'getSendstudentnotifications',
        'submissionattachments' => 'getSubmissionattachments',
        'submissiondrafts' => 'getSubmissiondrafts',
        'submissionstatement' => 'getSubmissionstatement',
        'submissionstatementformat' => 'getSubmissionstatementformat',
        'teamsubmission' => 'getTeamsubmission',
        'teamsubmissiongroupingid' => 'getTeamsubmissiongroupingid',
        'timelimit' => 'getTimelimit',
        'timemodified' => 'getTimemodified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('activity', $data ?? [], 'null');
        $this->setIfExists('activityattachments', $data ?? [], null);
        $this->setIfExists('activityformat', $data ?? [], null);
        $this->setIfExists('allowsubmissionsfromdate', $data ?? [], null);
        $this->setIfExists('attemptreopenmethod', $data ?? [], 'null');
        $this->setIfExists('blindmarking', $data ?? [], null);
        $this->setIfExists('cmid', $data ?? [], null);
        $this->setIfExists('completionsubmit', $data ?? [], null);
        $this->setIfExists('configs', $data ?? [], null);
        $this->setIfExists('course', $data ?? [], null);
        $this->setIfExists('cutoffdate', $data ?? [], null);
        $this->setIfExists('duedate', $data ?? [], null);
        $this->setIfExists('grade', $data ?? [], null);
        $this->setIfExists('gradingduedate', $data ?? [], null);
        $this->setIfExists('hidegrader', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('intro', $data ?? [], 'null');
        $this->setIfExists('introattachments', $data ?? [], null);
        $this->setIfExists('introfiles', $data ?? [], null);
        $this->setIfExists('introformat', $data ?? [], null);
        $this->setIfExists('markingallocation', $data ?? [], null);
        $this->setIfExists('markingworkflow', $data ?? [], null);
        $this->setIfExists('maxattempts', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], 'null');
        $this->setIfExists('nosubmissions', $data ?? [], null);
        $this->setIfExists('preventsubmissionnotingroup', $data ?? [], null);
        $this->setIfExists('requireallteammemberssubmit', $data ?? [], null);
        $this->setIfExists('requiresubmissionstatement', $data ?? [], null);
        $this->setIfExists('revealidentities', $data ?? [], null);
        $this->setIfExists('sendlatenotifications', $data ?? [], null);
        $this->setIfExists('sendnotifications', $data ?? [], null);
        $this->setIfExists('sendstudentnotifications', $data ?? [], null);
        $this->setIfExists('submissionattachments', $data ?? [], null);
        $this->setIfExists('submissiondrafts', $data ?? [], null);
        $this->setIfExists('submissionstatement', $data ?? [], 'null');
        $this->setIfExists('submissionstatementformat', $data ?? [], null);
        $this->setIfExists('teamsubmission', $data ?? [], null);
        $this->setIfExists('teamsubmissiongroupingid', $data ?? [], null);
        $this->setIfExists('timelimit', $data ?? [], null);
        $this->setIfExists('timemodified', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activity
     *
     * @return string|null
     */
    public function getActivity()
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     *
     * @param string|null $activity Description of activity
     *
     * @return self
     */
    public function setActivity($activity)
    {
        if (is_null($activity)) {
            throw new \InvalidArgumentException('non-nullable activity cannot be null');
        }
        $this->container['activity'] = $activity;

        return $this;
    }

    /**
     * Gets activityattachments
     *
     * @return \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null
     */
    public function getActivityattachments()
    {
        return $this->container['activityattachments'];
    }

    /**
     * Sets activityattachments
     *
     * @param \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null $activityattachments activityattachments
     *
     * @return self
     */
    public function setActivityattachments($activityattachments)
    {
        if (is_null($activityattachments)) {
            throw new \InvalidArgumentException('non-nullable activityattachments cannot be null');
        }
        $this->container['activityattachments'] = $activityattachments;

        return $this;
    }

    /**
     * Gets activityformat
     *
     * @return int|null
     */
    public function getActivityformat()
    {
        return $this->container['activityformat'];
    }

    /**
     * Sets activityformat
     *
     * @param int|null $activityformat activity format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setActivityformat($activityformat)
    {
        if (is_null($activityformat)) {
            throw new \InvalidArgumentException('non-nullable activityformat cannot be null');
        }
        $this->container['activityformat'] = $activityformat;

        return $this;
    }

    /**
     * Gets allowsubmissionsfromdate
     *
     * @return int|null
     */
    public function getAllowsubmissionsfromdate()
    {
        return $this->container['allowsubmissionsfromdate'];
    }

    /**
     * Sets allowsubmissionsfromdate
     *
     * @param int|null $allowsubmissionsfromdate allow submissions from date
     *
     * @return self
     */
    public function setAllowsubmissionsfromdate($allowsubmissionsfromdate)
    {
        if (is_null($allowsubmissionsfromdate)) {
            throw new \InvalidArgumentException('non-nullable allowsubmissionsfromdate cannot be null');
        }
        $this->container['allowsubmissionsfromdate'] = $allowsubmissionsfromdate;

        return $this;
    }

    /**
     * Gets attemptreopenmethod
     *
     * @return string|null
     */
    public function getAttemptreopenmethod()
    {
        return $this->container['attemptreopenmethod'];
    }

    /**
     * Sets attemptreopenmethod
     *
     * @param string|null $attemptreopenmethod method used to control opening new attempts
     *
     * @return self
     */
    public function setAttemptreopenmethod($attemptreopenmethod)
    {
        if (is_null($attemptreopenmethod)) {
            throw new \InvalidArgumentException('non-nullable attemptreopenmethod cannot be null');
        }
        $this->container['attemptreopenmethod'] = $attemptreopenmethod;

        return $this;
    }

    /**
     * Gets blindmarking
     *
     * @return int|null
     */
    public function getBlindmarking()
    {
        return $this->container['blindmarking'];
    }

    /**
     * Sets blindmarking
     *
     * @param int|null $blindmarking if enabled, hide identities until reveal identities actioned
     *
     * @return self
     */
    public function setBlindmarking($blindmarking)
    {
        if (is_null($blindmarking)) {
            throw new \InvalidArgumentException('non-nullable blindmarking cannot be null');
        }
        $this->container['blindmarking'] = $blindmarking;

        return $this;
    }

    /**
     * Gets cmid
     *
     * @return int|null
     */
    public function getCmid()
    {
        return $this->container['cmid'];
    }

    /**
     * Sets cmid
     *
     * @param int|null $cmid course module id
     *
     * @return self
     */
    public function setCmid($cmid)
    {
        if (is_null($cmid)) {
            throw new \InvalidArgumentException('non-nullable cmid cannot be null');
        }
        $this->container['cmid'] = $cmid;

        return $this;
    }

    /**
     * Gets completionsubmit
     *
     * @return int|null
     */
    public function getCompletionsubmit()
    {
        return $this->container['completionsubmit'];
    }

    /**
     * Sets completionsubmit
     *
     * @param int|null $completionsubmit if enabled, set activity as complete following submission
     *
     * @return self
     */
    public function setCompletionsubmit($completionsubmit)
    {
        if (is_null($completionsubmit)) {
            throw new \InvalidArgumentException('non-nullable completionsubmit cannot be null');
        }
        $this->container['completionsubmit'] = $completionsubmit;

        return $this;
    }

    /**
     * Gets configs
     *
     * @return \OpenAPI\Client\Model\ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner[]|null
     */
    public function getConfigs()
    {
        return $this->container['configs'];
    }

    /**
     * Sets configs
     *
     * @param \OpenAPI\Client\Model\ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner[]|null $configs configs
     *
     * @return self
     */
    public function setConfigs($configs)
    {
        if (is_null($configs)) {
            throw new \InvalidArgumentException('non-nullable configs cannot be null');
        }
        $this->container['configs'] = $configs;

        return $this;
    }

    /**
     * Gets course
     *
     * @return int|null
     */
    public function getCourse()
    {
        return $this->container['course'];
    }

    /**
     * Sets course
     *
     * @param int|null $course course id
     *
     * @return self
     */
    public function setCourse($course)
    {
        if (is_null($course)) {
            throw new \InvalidArgumentException('non-nullable course cannot be null');
        }
        $this->container['course'] = $course;

        return $this;
    }

    /**
     * Gets cutoffdate
     *
     * @return int|null
     */
    public function getCutoffdate()
    {
        return $this->container['cutoffdate'];
    }

    /**
     * Sets cutoffdate
     *
     * @param int|null $cutoffdate date after which submission is not accepted without an extension
     *
     * @return self
     */
    public function setCutoffdate($cutoffdate)
    {
        if (is_null($cutoffdate)) {
            throw new \InvalidArgumentException('non-nullable cutoffdate cannot be null');
        }
        $this->container['cutoffdate'] = $cutoffdate;

        return $this;
    }

    /**
     * Gets duedate
     *
     * @return int|null
     */
    public function getDuedate()
    {
        return $this->container['duedate'];
    }

    /**
     * Sets duedate
     *
     * @param int|null $duedate assignment due date
     *
     * @return self
     */
    public function setDuedate($duedate)
    {
        if (is_null($duedate)) {
            throw new \InvalidArgumentException('non-nullable duedate cannot be null');
        }
        $this->container['duedate'] = $duedate;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return int|null
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param int|null $grade grade type
     *
     * @return self
     */
    public function setGrade($grade)
    {
        if (is_null($grade)) {
            throw new \InvalidArgumentException('non-nullable grade cannot be null');
        }
        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets gradingduedate
     *
     * @return int|null
     */
    public function getGradingduedate()
    {
        return $this->container['gradingduedate'];
    }

    /**
     * Sets gradingduedate
     *
     * @param int|null $gradingduedate the expected date for marking the submissions
     *
     * @return self
     */
    public function setGradingduedate($gradingduedate)
    {
        if (is_null($gradingduedate)) {
            throw new \InvalidArgumentException('non-nullable gradingduedate cannot be null');
        }
        $this->container['gradingduedate'] = $gradingduedate;

        return $this;
    }

    /**
     * Gets hidegrader
     *
     * @return int|null
     */
    public function getHidegrader()
    {
        return $this->container['hidegrader'];
    }

    /**
     * Sets hidegrader
     *
     * @param int|null $hidegrader If enabled, hide grader to student
     *
     * @return self
     */
    public function setHidegrader($hidegrader)
    {
        if (is_null($hidegrader)) {
            throw new \InvalidArgumentException('non-nullable hidegrader cannot be null');
        }
        $this->container['hidegrader'] = $hidegrader;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id assignment id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets intro
     *
     * @return string|null
     */
    public function getIntro()
    {
        return $this->container['intro'];
    }

    /**
     * Sets intro
     *
     * @param string|null $intro assignment intro, not allways returned because it deppends on the activity configuration
     *
     * @return self
     */
    public function setIntro($intro)
    {
        if (is_null($intro)) {
            throw new \InvalidArgumentException('non-nullable intro cannot be null');
        }
        $this->container['intro'] = $intro;

        return $this;
    }

    /**
     * Gets introattachments
     *
     * @return \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null
     */
    public function getIntroattachments()
    {
        return $this->container['introattachments'];
    }

    /**
     * Sets introattachments
     *
     * @param \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null $introattachments introattachments
     *
     * @return self
     */
    public function setIntroattachments($introattachments)
    {
        if (is_null($introattachments)) {
            throw new \InvalidArgumentException('non-nullable introattachments cannot be null');
        }
        $this->container['introattachments'] = $introattachments;

        return $this;
    }

    /**
     * Gets introfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null
     */
    public function getIntrofiles()
    {
        return $this->container['introfiles'];
    }

    /**
     * Sets introfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null $introfiles introfiles
     *
     * @return self
     */
    public function setIntrofiles($introfiles)
    {
        if (is_null($introfiles)) {
            throw new \InvalidArgumentException('non-nullable introfiles cannot be null');
        }
        $this->container['introfiles'] = $introfiles;

        return $this;
    }

    /**
     * Gets introformat
     *
     * @return int|null
     */
    public function getIntroformat()
    {
        return $this->container['introformat'];
    }

    /**
     * Sets introformat
     *
     * @param int|null $introformat intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setIntroformat($introformat)
    {
        if (is_null($introformat)) {
            throw new \InvalidArgumentException('non-nullable introformat cannot be null');
        }
        $this->container['introformat'] = $introformat;

        return $this;
    }

    /**
     * Gets markingallocation
     *
     * @return int|null
     */
    public function getMarkingallocation()
    {
        return $this->container['markingallocation'];
    }

    /**
     * Sets markingallocation
     *
     * @param int|null $markingallocation enable marking allocation
     *
     * @return self
     */
    public function setMarkingallocation($markingallocation)
    {
        if (is_null($markingallocation)) {
            throw new \InvalidArgumentException('non-nullable markingallocation cannot be null');
        }
        $this->container['markingallocation'] = $markingallocation;

        return $this;
    }

    /**
     * Gets markingworkflow
     *
     * @return int|null
     */
    public function getMarkingworkflow()
    {
        return $this->container['markingworkflow'];
    }

    /**
     * Sets markingworkflow
     *
     * @param int|null $markingworkflow enable marking workflow
     *
     * @return self
     */
    public function setMarkingworkflow($markingworkflow)
    {
        if (is_null($markingworkflow)) {
            throw new \InvalidArgumentException('non-nullable markingworkflow cannot be null');
        }
        $this->container['markingworkflow'] = $markingworkflow;

        return $this;
    }

    /**
     * Gets maxattempts
     *
     * @return int|null
     */
    public function getMaxattempts()
    {
        return $this->container['maxattempts'];
    }

    /**
     * Sets maxattempts
     *
     * @param int|null $maxattempts maximum number of attempts allowed
     *
     * @return self
     */
    public function setMaxattempts($maxattempts)
    {
        if (is_null($maxattempts)) {
            throw new \InvalidArgumentException('non-nullable maxattempts cannot be null');
        }
        $this->container['maxattempts'] = $maxattempts;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name assignment name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nosubmissions
     *
     * @return int|null
     */
    public function getNosubmissions()
    {
        return $this->container['nosubmissions'];
    }

    /**
     * Sets nosubmissions
     *
     * @param int|null $nosubmissions no submissions
     *
     * @return self
     */
    public function setNosubmissions($nosubmissions)
    {
        if (is_null($nosubmissions)) {
            throw new \InvalidArgumentException('non-nullable nosubmissions cannot be null');
        }
        $this->container['nosubmissions'] = $nosubmissions;

        return $this;
    }

    /**
     * Gets preventsubmissionnotingroup
     *
     * @return int|null
     */
    public function getPreventsubmissionnotingroup()
    {
        return $this->container['preventsubmissionnotingroup'];
    }

    /**
     * Sets preventsubmissionnotingroup
     *
     * @param int|null $preventsubmissionnotingroup Prevent submission not in group
     *
     * @return self
     */
    public function setPreventsubmissionnotingroup($preventsubmissionnotingroup)
    {
        if (is_null($preventsubmissionnotingroup)) {
            throw new \InvalidArgumentException('non-nullable preventsubmissionnotingroup cannot be null');
        }
        $this->container['preventsubmissionnotingroup'] = $preventsubmissionnotingroup;

        return $this;
    }

    /**
     * Gets requireallteammemberssubmit
     *
     * @return int|null
     */
    public function getRequireallteammemberssubmit()
    {
        return $this->container['requireallteammemberssubmit'];
    }

    /**
     * Sets requireallteammemberssubmit
     *
     * @param int|null $requireallteammemberssubmit if enabled, all team members must submit
     *
     * @return self
     */
    public function setRequireallteammemberssubmit($requireallteammemberssubmit)
    {
        if (is_null($requireallteammemberssubmit)) {
            throw new \InvalidArgumentException('non-nullable requireallteammemberssubmit cannot be null');
        }
        $this->container['requireallteammemberssubmit'] = $requireallteammemberssubmit;

        return $this;
    }

    /**
     * Gets requiresubmissionstatement
     *
     * @return int|null
     */
    public function getRequiresubmissionstatement()
    {
        return $this->container['requiresubmissionstatement'];
    }

    /**
     * Sets requiresubmissionstatement
     *
     * @param int|null $requiresubmissionstatement student must accept submission statement
     *
     * @return self
     */
    public function setRequiresubmissionstatement($requiresubmissionstatement)
    {
        if (is_null($requiresubmissionstatement)) {
            throw new \InvalidArgumentException('non-nullable requiresubmissionstatement cannot be null');
        }
        $this->container['requiresubmissionstatement'] = $requiresubmissionstatement;

        return $this;
    }

    /**
     * Gets revealidentities
     *
     * @return int|null
     */
    public function getRevealidentities()
    {
        return $this->container['revealidentities'];
    }

    /**
     * Sets revealidentities
     *
     * @param int|null $revealidentities show identities for a blind marking assignment
     *
     * @return self
     */
    public function setRevealidentities($revealidentities)
    {
        if (is_null($revealidentities)) {
            throw new \InvalidArgumentException('non-nullable revealidentities cannot be null');
        }
        $this->container['revealidentities'] = $revealidentities;

        return $this;
    }

    /**
     * Gets sendlatenotifications
     *
     * @return int|null
     */
    public function getSendlatenotifications()
    {
        return $this->container['sendlatenotifications'];
    }

    /**
     * Sets sendlatenotifications
     *
     * @param int|null $sendlatenotifications send notifications
     *
     * @return self
     */
    public function setSendlatenotifications($sendlatenotifications)
    {
        if (is_null($sendlatenotifications)) {
            throw new \InvalidArgumentException('non-nullable sendlatenotifications cannot be null');
        }
        $this->container['sendlatenotifications'] = $sendlatenotifications;

        return $this;
    }

    /**
     * Gets sendnotifications
     *
     * @return int|null
     */
    public function getSendnotifications()
    {
        return $this->container['sendnotifications'];
    }

    /**
     * Sets sendnotifications
     *
     * @param int|null $sendnotifications send notifications
     *
     * @return self
     */
    public function setSendnotifications($sendnotifications)
    {
        if (is_null($sendnotifications)) {
            throw new \InvalidArgumentException('non-nullable sendnotifications cannot be null');
        }
        $this->container['sendnotifications'] = $sendnotifications;

        return $this;
    }

    /**
     * Gets sendstudentnotifications
     *
     * @return int|null
     */
    public function getSendstudentnotifications()
    {
        return $this->container['sendstudentnotifications'];
    }

    /**
     * Sets sendstudentnotifications
     *
     * @param int|null $sendstudentnotifications send student notifications (default)
     *
     * @return self
     */
    public function setSendstudentnotifications($sendstudentnotifications)
    {
        if (is_null($sendstudentnotifications)) {
            throw new \InvalidArgumentException('non-nullable sendstudentnotifications cannot be null');
        }
        $this->container['sendstudentnotifications'] = $sendstudentnotifications;

        return $this;
    }

    /**
     * Gets submissionattachments
     *
     * @return int|null
     */
    public function getSubmissionattachments()
    {
        return $this->container['submissionattachments'];
    }

    /**
     * Sets submissionattachments
     *
     * @param int|null $submissionattachments Flag to only show files during submission
     *
     * @return self
     */
    public function setSubmissionattachments($submissionattachments)
    {
        if (is_null($submissionattachments)) {
            throw new \InvalidArgumentException('non-nullable submissionattachments cannot be null');
        }
        $this->container['submissionattachments'] = $submissionattachments;

        return $this;
    }

    /**
     * Gets submissiondrafts
     *
     * @return int|null
     */
    public function getSubmissiondrafts()
    {
        return $this->container['submissiondrafts'];
    }

    /**
     * Sets submissiondrafts
     *
     * @param int|null $submissiondrafts submissions drafts
     *
     * @return self
     */
    public function setSubmissiondrafts($submissiondrafts)
    {
        if (is_null($submissiondrafts)) {
            throw new \InvalidArgumentException('non-nullable submissiondrafts cannot be null');
        }
        $this->container['submissiondrafts'] = $submissiondrafts;

        return $this;
    }

    /**
     * Gets submissionstatement
     *
     * @return string|null
     */
    public function getSubmissionstatement()
    {
        return $this->container['submissionstatement'];
    }

    /**
     * Sets submissionstatement
     *
     * @param string|null $submissionstatement Submission statement formatted.
     *
     * @return self
     */
    public function setSubmissionstatement($submissionstatement)
    {
        if (is_null($submissionstatement)) {
            throw new \InvalidArgumentException('non-nullable submissionstatement cannot be null');
        }
        $this->container['submissionstatement'] = $submissionstatement;

        return $this;
    }

    /**
     * Gets submissionstatementformat
     *
     * @return int|null
     */
    public function getSubmissionstatementformat()
    {
        return $this->container['submissionstatementformat'];
    }

    /**
     * Sets submissionstatementformat
     *
     * @param int|null $submissionstatementformat submissionstatement format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setSubmissionstatementformat($submissionstatementformat)
    {
        if (is_null($submissionstatementformat)) {
            throw new \InvalidArgumentException('non-nullable submissionstatementformat cannot be null');
        }
        $this->container['submissionstatementformat'] = $submissionstatementformat;

        return $this;
    }

    /**
     * Gets teamsubmission
     *
     * @return int|null
     */
    public function getTeamsubmission()
    {
        return $this->container['teamsubmission'];
    }

    /**
     * Sets teamsubmission
     *
     * @param int|null $teamsubmission if enabled, students submit as a team
     *
     * @return self
     */
    public function setTeamsubmission($teamsubmission)
    {
        if (is_null($teamsubmission)) {
            throw new \InvalidArgumentException('non-nullable teamsubmission cannot be null');
        }
        $this->container['teamsubmission'] = $teamsubmission;

        return $this;
    }

    /**
     * Gets teamsubmissiongroupingid
     *
     * @return int|null
     */
    public function getTeamsubmissiongroupingid()
    {
        return $this->container['teamsubmissiongroupingid'];
    }

    /**
     * Sets teamsubmissiongroupingid
     *
     * @param int|null $teamsubmissiongroupingid the grouping id for the team submission groups
     *
     * @return self
     */
    public function setTeamsubmissiongroupingid($teamsubmissiongroupingid)
    {
        if (is_null($teamsubmissiongroupingid)) {
            throw new \InvalidArgumentException('non-nullable teamsubmissiongroupingid cannot be null');
        }
        $this->container['teamsubmissiongroupingid'] = $teamsubmissiongroupingid;

        return $this;
    }

    /**
     * Gets timelimit
     *
     * @return int|null
     */
    public function getTimelimit()
    {
        return $this->container['timelimit'];
    }

    /**
     * Sets timelimit
     *
     * @param int|null $timelimit Time limit to complete assigment
     *
     * @return self
     */
    public function setTimelimit($timelimit)
    {
        if (is_null($timelimit)) {
            throw new \InvalidArgumentException('non-nullable timelimit cannot be null');
        }
        $this->container['timelimit'] = $timelimit;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified last time assignment was modified
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


