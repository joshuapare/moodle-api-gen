<?php
/**
 * ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModGlossaryGetEntriesByAuthor200ResponseEntriesInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModGlossaryGetEntriesByAuthor200ResponseEntriesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_glossary_get_entries_by_author_200_response_entries_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'approved' => 'bool',
        'attachment' => 'bool',
        'attachments' => '\OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]',
        'casesensitive' => 'bool',
        'concept' => 'string',
        'definition' => 'string',
        'definitionformat' => 'int',
        'definitioninlinefiles' => '\OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]',
        'definitiontrust' => 'bool',
        'fullmatch' => 'bool',
        'glossaryid' => 'int',
        'id' => 'int',
        'sourceglossaryid' => 'int',
        'tags' => '\OpenAPI\Client\Model\ModDataGetEntries200ResponseEntriesInnerTagsInner[]',
        'teacherentry' => 'bool',
        'timecreated' => 'int',
        'timemodified' => 'int',
        'usedynalink' => 'bool',
        'userfullname' => 'string',
        'userid' => 'int',
        'userpictureurl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'approved' => null,
        'attachment' => null,
        'attachments' => null,
        'casesensitive' => null,
        'concept' => null,
        'definition' => null,
        'definitionformat' => null,
        'definitioninlinefiles' => null,
        'definitiontrust' => null,
        'fullmatch' => null,
        'glossaryid' => null,
        'id' => null,
        'sourceglossaryid' => null,
        'tags' => null,
        'teacherentry' => null,
        'timecreated' => null,
        'timemodified' => null,
        'usedynalink' => null,
        'userfullname' => null,
        'userid' => null,
        'userpictureurl' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'approved' => false,
        'attachment' => false,
        'attachments' => false,
        'casesensitive' => false,
        'concept' => false,
        'definition' => false,
        'definitionformat' => false,
        'definitioninlinefiles' => false,
        'definitiontrust' => false,
        'fullmatch' => false,
        'glossaryid' => false,
        'id' => false,
        'sourceglossaryid' => false,
        'tags' => false,
        'teacherentry' => false,
        'timecreated' => false,
        'timemodified' => false,
        'usedynalink' => false,
        'userfullname' => false,
        'userid' => false,
        'userpictureurl' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'approved' => 'approved',
        'attachment' => 'attachment',
        'attachments' => 'attachments',
        'casesensitive' => 'casesensitive',
        'concept' => 'concept',
        'definition' => 'definition',
        'definitionformat' => 'definitionformat',
        'definitioninlinefiles' => 'definitioninlinefiles',
        'definitiontrust' => 'definitiontrust',
        'fullmatch' => 'fullmatch',
        'glossaryid' => 'glossaryid',
        'id' => 'id',
        'sourceglossaryid' => 'sourceglossaryid',
        'tags' => 'tags',
        'teacherentry' => 'teacherentry',
        'timecreated' => 'timecreated',
        'timemodified' => 'timemodified',
        'usedynalink' => 'usedynalink',
        'userfullname' => 'userfullname',
        'userid' => 'userid',
        'userpictureurl' => 'userpictureurl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'approved' => 'setApproved',
        'attachment' => 'setAttachment',
        'attachments' => 'setAttachments',
        'casesensitive' => 'setCasesensitive',
        'concept' => 'setConcept',
        'definition' => 'setDefinition',
        'definitionformat' => 'setDefinitionformat',
        'definitioninlinefiles' => 'setDefinitioninlinefiles',
        'definitiontrust' => 'setDefinitiontrust',
        'fullmatch' => 'setFullmatch',
        'glossaryid' => 'setGlossaryid',
        'id' => 'setId',
        'sourceglossaryid' => 'setSourceglossaryid',
        'tags' => 'setTags',
        'teacherentry' => 'setTeacherentry',
        'timecreated' => 'setTimecreated',
        'timemodified' => 'setTimemodified',
        'usedynalink' => 'setUsedynalink',
        'userfullname' => 'setUserfullname',
        'userid' => 'setUserid',
        'userpictureurl' => 'setUserpictureurl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'approved' => 'getApproved',
        'attachment' => 'getAttachment',
        'attachments' => 'getAttachments',
        'casesensitive' => 'getCasesensitive',
        'concept' => 'getConcept',
        'definition' => 'getDefinition',
        'definitionformat' => 'getDefinitionformat',
        'definitioninlinefiles' => 'getDefinitioninlinefiles',
        'definitiontrust' => 'getDefinitiontrust',
        'fullmatch' => 'getFullmatch',
        'glossaryid' => 'getGlossaryid',
        'id' => 'getId',
        'sourceglossaryid' => 'getSourceglossaryid',
        'tags' => 'getTags',
        'teacherentry' => 'getTeacherentry',
        'timecreated' => 'getTimecreated',
        'timemodified' => 'getTimemodified',
        'usedynalink' => 'getUsedynalink',
        'userfullname' => 'getUserfullname',
        'userid' => 'getUserid',
        'userpictureurl' => 'getUserpictureurl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('approved', $data ?? [], null);
        $this->setIfExists('attachment', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('casesensitive', $data ?? [], null);
        $this->setIfExists('concept', $data ?? [], 'null');
        $this->setIfExists('definition', $data ?? [], 'null');
        $this->setIfExists('definitionformat', $data ?? [], null);
        $this->setIfExists('definitioninlinefiles', $data ?? [], null);
        $this->setIfExists('definitiontrust', $data ?? [], null);
        $this->setIfExists('fullmatch', $data ?? [], null);
        $this->setIfExists('glossaryid', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('sourceglossaryid', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('teacherentry', $data ?? [], null);
        $this->setIfExists('timecreated', $data ?? [], null);
        $this->setIfExists('timemodified', $data ?? [], null);
        $this->setIfExists('usedynalink', $data ?? [], null);
        $this->setIfExists('userfullname', $data ?? [], 'null');
        $this->setIfExists('userid', $data ?? [], null);
        $this->setIfExists('userpictureurl', $data ?? [], 'null');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets approved
     *
     * @return bool|null
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param bool|null $approved Whether the entry was approved
     *
     * @return self
     */
    public function setApproved($approved)
    {
        if (is_null($approved)) {
            throw new \InvalidArgumentException('non-nullable approved cannot be null');
        }
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets attachment
     *
     * @return bool|null
     */
    public function getAttachment()
    {
        return $this->container['attachment'];
    }

    /**
     * Sets attachment
     *
     * @param bool|null $attachment Whether or not the entry has attachments
     *
     * @return self
     */
    public function setAttachment($attachment)
    {
        if (is_null($attachment)) {
            throw new \InvalidArgumentException('non-nullable attachment cannot be null');
        }
        $this->container['attachment'] = $attachment;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null $attachments attachments
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        if (is_null($attachments)) {
            throw new \InvalidArgumentException('non-nullable attachments cannot be null');
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets casesensitive
     *
     * @return bool|null
     */
    public function getCasesensitive()
    {
        return $this->container['casesensitive'];
    }

    /**
     * Sets casesensitive
     *
     * @param bool|null $casesensitive When true, the matching is case sensitive
     *
     * @return self
     */
    public function setCasesensitive($casesensitive)
    {
        if (is_null($casesensitive)) {
            throw new \InvalidArgumentException('non-nullable casesensitive cannot be null');
        }
        $this->container['casesensitive'] = $casesensitive;

        return $this;
    }

    /**
     * Gets concept
     *
     * @return string|null
     */
    public function getConcept()
    {
        return $this->container['concept'];
    }

    /**
     * Sets concept
     *
     * @param string|null $concept The concept
     *
     * @return self
     */
    public function setConcept($concept)
    {
        if (is_null($concept)) {
            throw new \InvalidArgumentException('non-nullable concept cannot be null');
        }
        $this->container['concept'] = $concept;

        return $this;
    }

    /**
     * Gets definition
     *
     * @return string|null
     */
    public function getDefinition()
    {
        return $this->container['definition'];
    }

    /**
     * Sets definition
     *
     * @param string|null $definition The definition
     *
     * @return self
     */
    public function setDefinition($definition)
    {
        if (is_null($definition)) {
            throw new \InvalidArgumentException('non-nullable definition cannot be null');
        }
        $this->container['definition'] = $definition;

        return $this;
    }

    /**
     * Gets definitionformat
     *
     * @return int|null
     */
    public function getDefinitionformat()
    {
        return $this->container['definitionformat'];
    }

    /**
     * Sets definitionformat
     *
     * @param int|null $definitionformat definition format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setDefinitionformat($definitionformat)
    {
        if (is_null($definitionformat)) {
            throw new \InvalidArgumentException('non-nullable definitionformat cannot be null');
        }
        $this->container['definitionformat'] = $definitionformat;

        return $this;
    }

    /**
     * Gets definitioninlinefiles
     *
     * @return \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null
     */
    public function getDefinitioninlinefiles()
    {
        return $this->container['definitioninlinefiles'];
    }

    /**
     * Sets definitioninlinefiles
     *
     * @param \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null $definitioninlinefiles definitioninlinefiles
     *
     * @return self
     */
    public function setDefinitioninlinefiles($definitioninlinefiles)
    {
        if (is_null($definitioninlinefiles)) {
            throw new \InvalidArgumentException('non-nullable definitioninlinefiles cannot be null');
        }
        $this->container['definitioninlinefiles'] = $definitioninlinefiles;

        return $this;
    }

    /**
     * Gets definitiontrust
     *
     * @return bool|null
     */
    public function getDefinitiontrust()
    {
        return $this->container['definitiontrust'];
    }

    /**
     * Sets definitiontrust
     *
     * @param bool|null $definitiontrust The definition trust flag
     *
     * @return self
     */
    public function setDefinitiontrust($definitiontrust)
    {
        if (is_null($definitiontrust)) {
            throw new \InvalidArgumentException('non-nullable definitiontrust cannot be null');
        }
        $this->container['definitiontrust'] = $definitiontrust;

        return $this;
    }

    /**
     * Gets fullmatch
     *
     * @return bool|null
     */
    public function getFullmatch()
    {
        return $this->container['fullmatch'];
    }

    /**
     * Sets fullmatch
     *
     * @param bool|null $fullmatch When true, the matching is done on full words only
     *
     * @return self
     */
    public function setFullmatch($fullmatch)
    {
        if (is_null($fullmatch)) {
            throw new \InvalidArgumentException('non-nullable fullmatch cannot be null');
        }
        $this->container['fullmatch'] = $fullmatch;

        return $this;
    }

    /**
     * Gets glossaryid
     *
     * @return int|null
     */
    public function getGlossaryid()
    {
        return $this->container['glossaryid'];
    }

    /**
     * Sets glossaryid
     *
     * @param int|null $glossaryid The glossary ID
     *
     * @return self
     */
    public function setGlossaryid($glossaryid)
    {
        if (is_null($glossaryid)) {
            throw new \InvalidArgumentException('non-nullable glossaryid cannot be null');
        }
        $this->container['glossaryid'] = $glossaryid;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The entry ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sourceglossaryid
     *
     * @return int|null
     */
    public function getSourceglossaryid()
    {
        return $this->container['sourceglossaryid'];
    }

    /**
     * Sets sourceglossaryid
     *
     * @param int|null $sourceglossaryid The source glossary ID
     *
     * @return self
     */
    public function setSourceglossaryid($sourceglossaryid)
    {
        if (is_null($sourceglossaryid)) {
            throw new \InvalidArgumentException('non-nullable sourceglossaryid cannot be null');
        }
        $this->container['sourceglossaryid'] = $sourceglossaryid;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\ModDataGetEntries200ResponseEntriesInnerTagsInner[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\ModDataGetEntries200ResponseEntriesInnerTagsInner[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets teacherentry
     *
     * @return bool|null
     */
    public function getTeacherentry()
    {
        return $this->container['teacherentry'];
    }

    /**
     * Sets teacherentry
     *
     * @param bool|null $teacherentry The entry was created by a teacher, or equivalent.
     *
     * @return self
     */
    public function setTeacherentry($teacherentry)
    {
        if (is_null($teacherentry)) {
            throw new \InvalidArgumentException('non-nullable teacherentry cannot be null');
        }
        $this->container['teacherentry'] = $teacherentry;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return int|null
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param int|null $timecreated Time created
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified Time modified
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets usedynalink
     *
     * @return bool|null
     */
    public function getUsedynalink()
    {
        return $this->container['usedynalink'];
    }

    /**
     * Sets usedynalink
     *
     * @param bool|null $usedynalink Whether the concept should be automatically linked
     *
     * @return self
     */
    public function setUsedynalink($usedynalink)
    {
        if (is_null($usedynalink)) {
            throw new \InvalidArgumentException('non-nullable usedynalink cannot be null');
        }
        $this->container['usedynalink'] = $usedynalink;

        return $this;
    }

    /**
     * Gets userfullname
     *
     * @return string|null
     */
    public function getUserfullname()
    {
        return $this->container['userfullname'];
    }

    /**
     * Sets userfullname
     *
     * @param string|null $userfullname Author full name
     *
     * @return self
     */
    public function setUserfullname($userfullname)
    {
        if (is_null($userfullname)) {
            throw new \InvalidArgumentException('non-nullable userfullname cannot be null');
        }
        $this->container['userfullname'] = $userfullname;

        return $this;
    }

    /**
     * Gets userid
     *
     * @return int|null
     */
    public function getUserid()
    {
        return $this->container['userid'];
    }

    /**
     * Sets userid
     *
     * @param int|null $userid Author ID
     *
     * @return self
     */
    public function setUserid($userid)
    {
        if (is_null($userid)) {
            throw new \InvalidArgumentException('non-nullable userid cannot be null');
        }
        $this->container['userid'] = $userid;

        return $this;
    }

    /**
     * Gets userpictureurl
     *
     * @return string|null
     */
    public function getUserpictureurl()
    {
        return $this->container['userpictureurl'];
    }

    /**
     * Sets userpictureurl
     *
     * @param string|null $userpictureurl Author picture
     *
     * @return self
     */
    public function setUserpictureurl($userpictureurl)
    {
        if (is_null($userpictureurl)) {
            throw new \InvalidArgumentException('non-nullable userpictureurl cannot be null');
        }
        $this->container['userpictureurl'] = $userpictureurl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


