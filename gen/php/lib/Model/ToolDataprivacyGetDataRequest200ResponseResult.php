<?php
/**
 * ToolDataprivacyGetDataRequest200ResponseResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ToolDataprivacyGetDataRequest200ResponseResult Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ToolDataprivacyGetDataRequest200ResponseResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tool_dataprivacy_get_data_request_200_response_result';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allowfiltering' => 'bool',
        'approvedeny' => 'bool',
        'canmarkcomplete' => 'bool',
        'canreview' => 'bool',
        'comments' => 'string',
        'commentsformat' => 'int',
        'creationmethod' => 'int',
        'dpo' => 'int',
        'dpocomment' => 'string',
        'dpocommentformat' => 'int',
        'dpouser' => '\OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser',
        'foruser' => '\OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser',
        'id' => 'int',
        'messagehtml' => 'string',
        'requestedby' => 'int',
        'requestedbyuser' => '\OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser',
        'status' => 'int',
        'statuslabel' => 'string',
        'statuslabelclass' => 'string',
        'systemapproved' => 'bool',
        'timecreated' => 'int',
        'timemodified' => 'int',
        'type' => 'int',
        'typename' => 'string',
        'typenameshort' => 'string',
        'userid' => 'int',
        'usermodified' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allowfiltering' => null,
        'approvedeny' => null,
        'canmarkcomplete' => null,
        'canreview' => null,
        'comments' => null,
        'commentsformat' => null,
        'creationmethod' => null,
        'dpo' => null,
        'dpocomment' => null,
        'dpocommentformat' => null,
        'dpouser' => null,
        'foruser' => null,
        'id' => null,
        'messagehtml' => null,
        'requestedby' => null,
        'requestedbyuser' => null,
        'status' => null,
        'statuslabel' => null,
        'statuslabelclass' => null,
        'systemapproved' => null,
        'timecreated' => null,
        'timemodified' => null,
        'type' => null,
        'typename' => null,
        'typenameshort' => null,
        'userid' => null,
        'usermodified' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allowfiltering' => false,
        'approvedeny' => false,
        'canmarkcomplete' => false,
        'canreview' => false,
        'comments' => false,
        'commentsformat' => false,
        'creationmethod' => false,
        'dpo' => false,
        'dpocomment' => false,
        'dpocommentformat' => false,
        'dpouser' => false,
        'foruser' => false,
        'id' => false,
        'messagehtml' => false,
        'requestedby' => false,
        'requestedbyuser' => false,
        'status' => false,
        'statuslabel' => false,
        'statuslabelclass' => false,
        'systemapproved' => false,
        'timecreated' => false,
        'timemodified' => false,
        'type' => false,
        'typename' => false,
        'typenameshort' => false,
        'userid' => false,
        'usermodified' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowfiltering' => 'allowfiltering',
        'approvedeny' => 'approvedeny',
        'canmarkcomplete' => 'canmarkcomplete',
        'canreview' => 'canreview',
        'comments' => 'comments',
        'commentsformat' => 'commentsformat',
        'creationmethod' => 'creationmethod',
        'dpo' => 'dpo',
        'dpocomment' => 'dpocomment',
        'dpocommentformat' => 'dpocommentformat',
        'dpouser' => 'dpouser',
        'foruser' => 'foruser',
        'id' => 'id',
        'messagehtml' => 'messagehtml',
        'requestedby' => 'requestedby',
        'requestedbyuser' => 'requestedbyuser',
        'status' => 'status',
        'statuslabel' => 'statuslabel',
        'statuslabelclass' => 'statuslabelclass',
        'systemapproved' => 'systemapproved',
        'timecreated' => 'timecreated',
        'timemodified' => 'timemodified',
        'type' => 'type',
        'typename' => 'typename',
        'typenameshort' => 'typenameshort',
        'userid' => 'userid',
        'usermodified' => 'usermodified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowfiltering' => 'setAllowfiltering',
        'approvedeny' => 'setApprovedeny',
        'canmarkcomplete' => 'setCanmarkcomplete',
        'canreview' => 'setCanreview',
        'comments' => 'setComments',
        'commentsformat' => 'setCommentsformat',
        'creationmethod' => 'setCreationmethod',
        'dpo' => 'setDpo',
        'dpocomment' => 'setDpocomment',
        'dpocommentformat' => 'setDpocommentformat',
        'dpouser' => 'setDpouser',
        'foruser' => 'setForuser',
        'id' => 'setId',
        'messagehtml' => 'setMessagehtml',
        'requestedby' => 'setRequestedby',
        'requestedbyuser' => 'setRequestedbyuser',
        'status' => 'setStatus',
        'statuslabel' => 'setStatuslabel',
        'statuslabelclass' => 'setStatuslabelclass',
        'systemapproved' => 'setSystemapproved',
        'timecreated' => 'setTimecreated',
        'timemodified' => 'setTimemodified',
        'type' => 'setType',
        'typename' => 'setTypename',
        'typenameshort' => 'setTypenameshort',
        'userid' => 'setUserid',
        'usermodified' => 'setUsermodified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowfiltering' => 'getAllowfiltering',
        'approvedeny' => 'getApprovedeny',
        'canmarkcomplete' => 'getCanmarkcomplete',
        'canreview' => 'getCanreview',
        'comments' => 'getComments',
        'commentsformat' => 'getCommentsformat',
        'creationmethod' => 'getCreationmethod',
        'dpo' => 'getDpo',
        'dpocomment' => 'getDpocomment',
        'dpocommentformat' => 'getDpocommentformat',
        'dpouser' => 'getDpouser',
        'foruser' => 'getForuser',
        'id' => 'getId',
        'messagehtml' => 'getMessagehtml',
        'requestedby' => 'getRequestedby',
        'requestedbyuser' => 'getRequestedbyuser',
        'status' => 'getStatus',
        'statuslabel' => 'getStatuslabel',
        'statuslabelclass' => 'getStatuslabelclass',
        'systemapproved' => 'getSystemapproved',
        'timecreated' => 'getTimecreated',
        'timemodified' => 'getTimemodified',
        'type' => 'getType',
        'typename' => 'getTypename',
        'typenameshort' => 'getTypenameshort',
        'userid' => 'getUserid',
        'usermodified' => 'getUsermodified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allowfiltering', $data ?? [], false);
        $this->setIfExists('approvedeny', $data ?? [], false);
        $this->setIfExists('canmarkcomplete', $data ?? [], false);
        $this->setIfExists('canreview', $data ?? [], false);
        $this->setIfExists('comments', $data ?? [], '');
        $this->setIfExists('commentsformat', $data ?? [], 2);
        $this->setIfExists('creationmethod', $data ?? [], 0);
        $this->setIfExists('dpo', $data ?? [], 0);
        $this->setIfExists('dpocomment', $data ?? [], '');
        $this->setIfExists('dpocommentformat', $data ?? [], 2);
        $this->setIfExists('dpouser', $data ?? [], null);
        $this->setIfExists('foruser', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], 0);
        $this->setIfExists('messagehtml', $data ?? [], 'null');
        $this->setIfExists('requestedby', $data ?? [], 0);
        $this->setIfExists('requestedbyuser', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], 2);
        $this->setIfExists('statuslabel', $data ?? [], 'null');
        $this->setIfExists('statuslabelclass', $data ?? [], 'null');
        $this->setIfExists('systemapproved', $data ?? [], false);
        $this->setIfExists('timecreated', $data ?? [], 0);
        $this->setIfExists('timemodified', $data ?? [], 0);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('typename', $data ?? [], 'null');
        $this->setIfExists('typenameshort', $data ?? [], 'null');
        $this->setIfExists('userid', $data ?? [], {});
        $this->setIfExists('usermodified', $data ?? [], 0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['comments'] === null) {
            $invalidProperties[] = "'comments' can't be null";
        }
        if ($this->container['commentsformat'] === null) {
            $invalidProperties[] = "'commentsformat' can't be null";
        }
        if ($this->container['creationmethod'] === null) {
            $invalidProperties[] = "'creationmethod' can't be null";
        }
        if ($this->container['dpo'] === null) {
            $invalidProperties[] = "'dpo' can't be null";
        }
        if ($this->container['dpocomment'] === null) {
            $invalidProperties[] = "'dpocomment' can't be null";
        }
        if ($this->container['dpocommentformat'] === null) {
            $invalidProperties[] = "'dpocommentformat' can't be null";
        }
        if ($this->container['foruser'] === null) {
            $invalidProperties[] = "'foruser' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['requestedby'] === null) {
            $invalidProperties[] = "'requestedby' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['statuslabel'] === null) {
            $invalidProperties[] = "'statuslabel' can't be null";
        }
        if ($this->container['statuslabelclass'] === null) {
            $invalidProperties[] = "'statuslabelclass' can't be null";
        }
        if ($this->container['systemapproved'] === null) {
            $invalidProperties[] = "'systemapproved' can't be null";
        }
        if ($this->container['timecreated'] === null) {
            $invalidProperties[] = "'timecreated' can't be null";
        }
        if ($this->container['timemodified'] === null) {
            $invalidProperties[] = "'timemodified' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['typename'] === null) {
            $invalidProperties[] = "'typename' can't be null";
        }
        if ($this->container['typenameshort'] === null) {
            $invalidProperties[] = "'typenameshort' can't be null";
        }
        if ($this->container['userid'] === null) {
            $invalidProperties[] = "'userid' can't be null";
        }
        if ($this->container['usermodified'] === null) {
            $invalidProperties[] = "'usermodified' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowfiltering
     *
     * @return bool|null
     */
    public function getAllowfiltering()
    {
        return $this->container['allowfiltering'];
    }

    /**
     * Sets allowfiltering
     *
     * @param bool|null $allowfiltering allowfiltering
     *
     * @return self
     */
    public function setAllowfiltering($allowfiltering)
    {
        if (is_null($allowfiltering)) {
            throw new \InvalidArgumentException('non-nullable allowfiltering cannot be null');
        }
        $this->container['allowfiltering'] = $allowfiltering;

        return $this;
    }

    /**
     * Gets approvedeny
     *
     * @return bool|null
     */
    public function getApprovedeny()
    {
        return $this->container['approvedeny'];
    }

    /**
     * Sets approvedeny
     *
     * @param bool|null $approvedeny approvedeny
     *
     * @return self
     */
    public function setApprovedeny($approvedeny)
    {
        if (is_null($approvedeny)) {
            throw new \InvalidArgumentException('non-nullable approvedeny cannot be null');
        }
        $this->container['approvedeny'] = $approvedeny;

        return $this;
    }

    /**
     * Gets canmarkcomplete
     *
     * @return bool|null
     */
    public function getCanmarkcomplete()
    {
        return $this->container['canmarkcomplete'];
    }

    /**
     * Sets canmarkcomplete
     *
     * @param bool|null $canmarkcomplete canmarkcomplete
     *
     * @return self
     */
    public function setCanmarkcomplete($canmarkcomplete)
    {
        if (is_null($canmarkcomplete)) {
            throw new \InvalidArgumentException('non-nullable canmarkcomplete cannot be null');
        }
        $this->container['canmarkcomplete'] = $canmarkcomplete;

        return $this;
    }

    /**
     * Gets canreview
     *
     * @return bool|null
     */
    public function getCanreview()
    {
        return $this->container['canreview'];
    }

    /**
     * Sets canreview
     *
     * @param bool|null $canreview canreview
     *
     * @return self
     */
    public function setCanreview($canreview)
    {
        if (is_null($canreview)) {
            throw new \InvalidArgumentException('non-nullable canreview cannot be null');
        }
        $this->container['canreview'] = $canreview;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets commentsformat
     *
     * @return int
     */
    public function getCommentsformat()
    {
        return $this->container['commentsformat'];
    }

    /**
     * Sets commentsformat
     *
     * @param int $commentsformat commentsformat
     *
     * @return self
     */
    public function setCommentsformat($commentsformat)
    {
        if (is_null($commentsformat)) {
            throw new \InvalidArgumentException('non-nullable commentsformat cannot be null');
        }
        $this->container['commentsformat'] = $commentsformat;

        return $this;
    }

    /**
     * Gets creationmethod
     *
     * @return int
     */
    public function getCreationmethod()
    {
        return $this->container['creationmethod'];
    }

    /**
     * Sets creationmethod
     *
     * @param int $creationmethod creationmethod
     *
     * @return self
     */
    public function setCreationmethod($creationmethod)
    {
        if (is_null($creationmethod)) {
            throw new \InvalidArgumentException('non-nullable creationmethod cannot be null');
        }
        $this->container['creationmethod'] = $creationmethod;

        return $this;
    }

    /**
     * Gets dpo
     *
     * @return int
     */
    public function getDpo()
    {
        return $this->container['dpo'];
    }

    /**
     * Sets dpo
     *
     * @param int $dpo dpo
     *
     * @return self
     */
    public function setDpo($dpo)
    {
        if (is_null($dpo)) {
            throw new \InvalidArgumentException('non-nullable dpo cannot be null');
        }
        $this->container['dpo'] = $dpo;

        return $this;
    }

    /**
     * Gets dpocomment
     *
     * @return string
     */
    public function getDpocomment()
    {
        return $this->container['dpocomment'];
    }

    /**
     * Sets dpocomment
     *
     * @param string $dpocomment dpocomment
     *
     * @return self
     */
    public function setDpocomment($dpocomment)
    {
        if (is_null($dpocomment)) {
            throw new \InvalidArgumentException('non-nullable dpocomment cannot be null');
        }
        $this->container['dpocomment'] = $dpocomment;

        return $this;
    }

    /**
     * Gets dpocommentformat
     *
     * @return int
     */
    public function getDpocommentformat()
    {
        return $this->container['dpocommentformat'];
    }

    /**
     * Sets dpocommentformat
     *
     * @param int $dpocommentformat dpocommentformat
     *
     * @return self
     */
    public function setDpocommentformat($dpocommentformat)
    {
        if (is_null($dpocommentformat)) {
            throw new \InvalidArgumentException('non-nullable dpocommentformat cannot be null');
        }
        $this->container['dpocommentformat'] = $dpocommentformat;

        return $this;
    }

    /**
     * Gets dpouser
     *
     * @return \OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser|null
     */
    public function getDpouser()
    {
        return $this->container['dpouser'];
    }

    /**
     * Sets dpouser
     *
     * @param \OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser|null $dpouser dpouser
     *
     * @return self
     */
    public function setDpouser($dpouser)
    {
        if (is_null($dpouser)) {
            throw new \InvalidArgumentException('non-nullable dpouser cannot be null');
        }
        $this->container['dpouser'] = $dpouser;

        return $this;
    }

    /**
     * Gets foruser
     *
     * @return \OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser
     */
    public function getForuser()
    {
        return $this->container['foruser'];
    }

    /**
     * Sets foruser
     *
     * @param \OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser $foruser foruser
     *
     * @return self
     */
    public function setForuser($foruser)
    {
        if (is_null($foruser)) {
            throw new \InvalidArgumentException('non-nullable foruser cannot be null');
        }
        $this->container['foruser'] = $foruser;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets messagehtml
     *
     * @return string|null
     */
    public function getMessagehtml()
    {
        return $this->container['messagehtml'];
    }

    /**
     * Sets messagehtml
     *
     * @param string|null $messagehtml messagehtml
     *
     * @return self
     */
    public function setMessagehtml($messagehtml)
    {
        if (is_null($messagehtml)) {
            throw new \InvalidArgumentException('non-nullable messagehtml cannot be null');
        }
        $this->container['messagehtml'] = $messagehtml;

        return $this;
    }

    /**
     * Gets requestedby
     *
     * @return int
     */
    public function getRequestedby()
    {
        return $this->container['requestedby'];
    }

    /**
     * Sets requestedby
     *
     * @param int $requestedby requestedby
     *
     * @return self
     */
    public function setRequestedby($requestedby)
    {
        if (is_null($requestedby)) {
            throw new \InvalidArgumentException('non-nullable requestedby cannot be null');
        }
        $this->container['requestedby'] = $requestedby;

        return $this;
    }

    /**
     * Gets requestedbyuser
     *
     * @return \OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser|null
     */
    public function getRequestedbyuser()
    {
        return $this->container['requestedbyuser'];
    }

    /**
     * Sets requestedbyuser
     *
     * @param \OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser|null $requestedbyuser requestedbyuser
     *
     * @return self
     */
    public function setRequestedbyuser($requestedbyuser)
    {
        if (is_null($requestedbyuser)) {
            throw new \InvalidArgumentException('non-nullable requestedbyuser cannot be null');
        }
        $this->container['requestedbyuser'] = $requestedbyuser;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statuslabel
     *
     * @return string
     */
    public function getStatuslabel()
    {
        return $this->container['statuslabel'];
    }

    /**
     * Sets statuslabel
     *
     * @param string $statuslabel statuslabel
     *
     * @return self
     */
    public function setStatuslabel($statuslabel)
    {
        if (is_null($statuslabel)) {
            throw new \InvalidArgumentException('non-nullable statuslabel cannot be null');
        }
        $this->container['statuslabel'] = $statuslabel;

        return $this;
    }

    /**
     * Gets statuslabelclass
     *
     * @return string
     */
    public function getStatuslabelclass()
    {
        return $this->container['statuslabelclass'];
    }

    /**
     * Sets statuslabelclass
     *
     * @param string $statuslabelclass statuslabelclass
     *
     * @return self
     */
    public function setStatuslabelclass($statuslabelclass)
    {
        if (is_null($statuslabelclass)) {
            throw new \InvalidArgumentException('non-nullable statuslabelclass cannot be null');
        }
        $this->container['statuslabelclass'] = $statuslabelclass;

        return $this;
    }

    /**
     * Gets systemapproved
     *
     * @return bool
     */
    public function getSystemapproved()
    {
        return $this->container['systemapproved'];
    }

    /**
     * Sets systemapproved
     *
     * @param bool $systemapproved systemapproved
     *
     * @return self
     */
    public function setSystemapproved($systemapproved)
    {
        if (is_null($systemapproved)) {
            throw new \InvalidArgumentException('non-nullable systemapproved cannot be null');
        }
        $this->container['systemapproved'] = $systemapproved;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return int
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param int $timecreated timecreated
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int $timemodified timemodified
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets typename
     *
     * @return string
     */
    public function getTypename()
    {
        return $this->container['typename'];
    }

    /**
     * Sets typename
     *
     * @param string $typename typename
     *
     * @return self
     */
    public function setTypename($typename)
    {
        if (is_null($typename)) {
            throw new \InvalidArgumentException('non-nullable typename cannot be null');
        }
        $this->container['typename'] = $typename;

        return $this;
    }

    /**
     * Gets typenameshort
     *
     * @return string
     */
    public function getTypenameshort()
    {
        return $this->container['typenameshort'];
    }

    /**
     * Sets typenameshort
     *
     * @param string $typenameshort typenameshort
     *
     * @return self
     */
    public function setTypenameshort($typenameshort)
    {
        if (is_null($typenameshort)) {
            throw new \InvalidArgumentException('non-nullable typenameshort cannot be null');
        }
        $this->container['typenameshort'] = $typenameshort;

        return $this;
    }

    /**
     * Gets userid
     *
     * @return int
     */
    public function getUserid()
    {
        return $this->container['userid'];
    }

    /**
     * Sets userid
     *
     * @param int $userid userid
     *
     * @return self
     */
    public function setUserid($userid)
    {
        if (is_null($userid)) {
            throw new \InvalidArgumentException('non-nullable userid cannot be null');
        }
        $this->container['userid'] = $userid;

        return $this;
    }

    /**
     * Gets usermodified
     *
     * @return int
     */
    public function getUsermodified()
    {
        return $this->container['usermodified'];
    }

    /**
     * Sets usermodified
     *
     * @param int $usermodified usermodified
     *
     * @return self
     */
    public function setUsermodified($usermodified)
    {
        if (is_null($usermodified)) {
            throw new \InvalidArgumentException('non-nullable usermodified cannot be null');
        }
        $this->container['usermodified'] = $usermodified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


