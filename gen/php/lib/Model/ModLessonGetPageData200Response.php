<?php
/**
 * ModLessonGetPageData200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModLessonGetPageData200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModLessonGetPageData200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_lesson_get_page_data_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'answers' => '\OpenAPI\Client\Model\ModLessonGetPageData200ResponseAnswersInner[]',
        'contentfiles' => '\OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]',
        'displaymenu' => 'bool',
        'messages' => '\OpenAPI\Client\Model\ModLessonGetPageData200ResponseMessagesInner[]',
        'newpageid' => 'int',
        'ongoingscore' => 'string',
        'page' => '\OpenAPI\Client\Model\ModLessonGetPageData200ResponsePage',
        'pagecontent' => 'string',
        'progress' => 'int',
        'warnings' => '\OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'answers' => null,
        'contentfiles' => null,
        'displaymenu' => null,
        'messages' => null,
        'newpageid' => null,
        'ongoingscore' => null,
        'page' => null,
        'pagecontent' => null,
        'progress' => null,
        'warnings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'answers' => false,
        'contentfiles' => false,
        'displaymenu' => false,
        'messages' => false,
        'newpageid' => false,
        'ongoingscore' => false,
        'page' => false,
        'pagecontent' => false,
        'progress' => false,
        'warnings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'answers' => 'answers',
        'contentfiles' => 'contentfiles',
        'displaymenu' => 'displaymenu',
        'messages' => 'messages',
        'newpageid' => 'newpageid',
        'ongoingscore' => 'ongoingscore',
        'page' => 'page',
        'pagecontent' => 'pagecontent',
        'progress' => 'progress',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'answers' => 'setAnswers',
        'contentfiles' => 'setContentfiles',
        'displaymenu' => 'setDisplaymenu',
        'messages' => 'setMessages',
        'newpageid' => 'setNewpageid',
        'ongoingscore' => 'setOngoingscore',
        'page' => 'setPage',
        'pagecontent' => 'setPagecontent',
        'progress' => 'setProgress',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'answers' => 'getAnswers',
        'contentfiles' => 'getContentfiles',
        'displaymenu' => 'getDisplaymenu',
        'messages' => 'getMessages',
        'newpageid' => 'getNewpageid',
        'ongoingscore' => 'getOngoingscore',
        'page' => 'getPage',
        'pagecontent' => 'getPagecontent',
        'progress' => 'getProgress',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('answers', $data ?? [], null);
        $this->setIfExists('contentfiles', $data ?? [], null);
        $this->setIfExists('displaymenu', $data ?? [], null);
        $this->setIfExists('messages', $data ?? [], null);
        $this->setIfExists('newpageid', $data ?? [], null);
        $this->setIfExists('ongoingscore', $data ?? [], 'null');
        $this->setIfExists('page', $data ?? [], null);
        $this->setIfExists('pagecontent', $data ?? [], 'null');
        $this->setIfExists('progress', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['answers'] === null) {
            $invalidProperties[] = "'answers' can't be null";
        }
        if ($this->container['contentfiles'] === null) {
            $invalidProperties[] = "'contentfiles' can't be null";
        }
        if ($this->container['displaymenu'] === null) {
            $invalidProperties[] = "'displaymenu' can't be null";
        }
        if ($this->container['messages'] === null) {
            $invalidProperties[] = "'messages' can't be null";
        }
        if ($this->container['newpageid'] === null) {
            $invalidProperties[] = "'newpageid' can't be null";
        }
        if ($this->container['ongoingscore'] === null) {
            $invalidProperties[] = "'ongoingscore' can't be null";
        }
        if ($this->container['progress'] === null) {
            $invalidProperties[] = "'progress' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets answers
     *
     * @return \OpenAPI\Client\Model\ModLessonGetPageData200ResponseAnswersInner[]
     */
    public function getAnswers()
    {
        return $this->container['answers'];
    }

    /**
     * Sets answers
     *
     * @param \OpenAPI\Client\Model\ModLessonGetPageData200ResponseAnswersInner[] $answers answers
     *
     * @return self
     */
    public function setAnswers($answers)
    {
        if (is_null($answers)) {
            throw new \InvalidArgumentException('non-nullable answers cannot be null');
        }
        $this->container['answers'] = $answers;

        return $this;
    }

    /**
     * Gets contentfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]
     */
    public function getContentfiles()
    {
        return $this->container['contentfiles'];
    }

    /**
     * Sets contentfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[] $contentfiles contentfiles
     *
     * @return self
     */
    public function setContentfiles($contentfiles)
    {
        if (is_null($contentfiles)) {
            throw new \InvalidArgumentException('non-nullable contentfiles cannot be null');
        }
        $this->container['contentfiles'] = $contentfiles;

        return $this;
    }

    /**
     * Gets displaymenu
     *
     * @return bool
     */
    public function getDisplaymenu()
    {
        return $this->container['displaymenu'];
    }

    /**
     * Sets displaymenu
     *
     * @param bool $displaymenu Whether we should display the menu or not in this page.
     *
     * @return self
     */
    public function setDisplaymenu($displaymenu)
    {
        if (is_null($displaymenu)) {
            throw new \InvalidArgumentException('non-nullable displaymenu cannot be null');
        }
        $this->container['displaymenu'] = $displaymenu;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return \OpenAPI\Client\Model\ModLessonGetPageData200ResponseMessagesInner[]
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \OpenAPI\Client\Model\ModLessonGetPageData200ResponseMessagesInner[] $messages messages
     *
     * @return self
     */
    public function setMessages($messages)
    {
        if (is_null($messages)) {
            throw new \InvalidArgumentException('non-nullable messages cannot be null');
        }
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets newpageid
     *
     * @return int
     */
    public function getNewpageid()
    {
        return $this->container['newpageid'];
    }

    /**
     * Sets newpageid
     *
     * @param int $newpageid New page id (if a jump was made)
     *
     * @return self
     */
    public function setNewpageid($newpageid)
    {
        if (is_null($newpageid)) {
            throw new \InvalidArgumentException('non-nullable newpageid cannot be null');
        }
        $this->container['newpageid'] = $newpageid;

        return $this;
    }

    /**
     * Gets ongoingscore
     *
     * @return string
     */
    public function getOngoingscore()
    {
        return $this->container['ongoingscore'];
    }

    /**
     * Sets ongoingscore
     *
     * @param string $ongoingscore The ongoing score message
     *
     * @return self
     */
    public function setOngoingscore($ongoingscore)
    {
        if (is_null($ongoingscore)) {
            throw new \InvalidArgumentException('non-nullable ongoingscore cannot be null');
        }
        $this->container['ongoingscore'] = $ongoingscore;

        return $this;
    }

    /**
     * Gets page
     *
     * @return \OpenAPI\Client\Model\ModLessonGetPageData200ResponsePage|null
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param \OpenAPI\Client\Model\ModLessonGetPageData200ResponsePage|null $page page
     *
     * @return self
     */
    public function setPage($page)
    {
        if (is_null($page)) {
            throw new \InvalidArgumentException('non-nullable page cannot be null');
        }
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets pagecontent
     *
     * @return string|null
     */
    public function getPagecontent()
    {
        return $this->container['pagecontent'];
    }

    /**
     * Sets pagecontent
     *
     * @param string|null $pagecontent Page html content
     *
     * @return self
     */
    public function setPagecontent($pagecontent)
    {
        if (is_null($pagecontent)) {
            throw new \InvalidArgumentException('non-nullable pagecontent cannot be null');
        }
        $this->container['pagecontent'] = $pagecontent;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return int
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param int $progress Progress percentage in the lesson
     *
     * @return self
     */
    public function setProgress($progress)
    {
        if (is_null($progress)) {
            throw new \InvalidArgumentException('non-nullable progress cannot be null');
        }
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null $warnings warnings
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


