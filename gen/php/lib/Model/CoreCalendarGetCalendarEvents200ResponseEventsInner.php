<?php
/**
 * CoreCalendarGetCalendarEvents200ResponseEventsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreCalendarGetCalendarEvents200ResponseEventsInner Class Doc Comment
 *
 * @category Class
 * @description event
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreCalendarGetCalendarEvents200ResponseEventsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_calendar_get_calendar_events_200_response_events_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'categoryid' => 'int',
        'courseid' => 'int',
        'description' => 'string',
        'eventtype' => 'string',
        'format' => 'int',
        'groupid' => 'int',
        'id' => 'int',
        'instance' => 'int',
        'modulename' => 'string',
        'name' => 'string',
        'repeatid' => 'int',
        'sequence' => 'int',
        'subscriptionid' => 'int',
        'timeduration' => 'int',
        'timemodified' => 'int',
        'timestart' => 'int',
        'userid' => 'int',
        'uuid' => 'string',
        'visible' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'categoryid' => null,
        'courseid' => null,
        'description' => null,
        'eventtype' => null,
        'format' => null,
        'groupid' => null,
        'id' => null,
        'instance' => null,
        'modulename' => null,
        'name' => null,
        'repeatid' => null,
        'sequence' => null,
        'subscriptionid' => null,
        'timeduration' => null,
        'timemodified' => null,
        'timestart' => null,
        'userid' => null,
        'uuid' => null,
        'visible' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'categoryid' => false,
        'courseid' => false,
        'description' => false,
        'eventtype' => false,
        'format' => false,
        'groupid' => false,
        'id' => false,
        'instance' => false,
        'modulename' => false,
        'name' => false,
        'repeatid' => false,
        'sequence' => false,
        'subscriptionid' => false,
        'timeduration' => false,
        'timemodified' => false,
        'timestart' => false,
        'userid' => false,
        'uuid' => false,
        'visible' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'categoryid' => 'categoryid',
        'courseid' => 'courseid',
        'description' => 'description',
        'eventtype' => 'eventtype',
        'format' => 'format',
        'groupid' => 'groupid',
        'id' => 'id',
        'instance' => 'instance',
        'modulename' => 'modulename',
        'name' => 'name',
        'repeatid' => 'repeatid',
        'sequence' => 'sequence',
        'subscriptionid' => 'subscriptionid',
        'timeduration' => 'timeduration',
        'timemodified' => 'timemodified',
        'timestart' => 'timestart',
        'userid' => 'userid',
        'uuid' => 'uuid',
        'visible' => 'visible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'categoryid' => 'setCategoryid',
        'courseid' => 'setCourseid',
        'description' => 'setDescription',
        'eventtype' => 'setEventtype',
        'format' => 'setFormat',
        'groupid' => 'setGroupid',
        'id' => 'setId',
        'instance' => 'setInstance',
        'modulename' => 'setModulename',
        'name' => 'setName',
        'repeatid' => 'setRepeatid',
        'sequence' => 'setSequence',
        'subscriptionid' => 'setSubscriptionid',
        'timeduration' => 'setTimeduration',
        'timemodified' => 'setTimemodified',
        'timestart' => 'setTimestart',
        'userid' => 'setUserid',
        'uuid' => 'setUuid',
        'visible' => 'setVisible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'categoryid' => 'getCategoryid',
        'courseid' => 'getCourseid',
        'description' => 'getDescription',
        'eventtype' => 'getEventtype',
        'format' => 'getFormat',
        'groupid' => 'getGroupid',
        'id' => 'getId',
        'instance' => 'getInstance',
        'modulename' => 'getModulename',
        'name' => 'getName',
        'repeatid' => 'getRepeatid',
        'sequence' => 'getSequence',
        'subscriptionid' => 'getSubscriptionid',
        'timeduration' => 'getTimeduration',
        'timemodified' => 'getTimemodified',
        'timestart' => 'getTimestart',
        'userid' => 'getUserid',
        'uuid' => 'getUuid',
        'visible' => 'getVisible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('categoryid', $data ?? [], null);
        $this->setIfExists('courseid', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('eventtype', $data ?? [], null);
        $this->setIfExists('format', $data ?? [], null);
        $this->setIfExists('groupid', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('instance', $data ?? [], null);
        $this->setIfExists('modulename', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('repeatid', $data ?? [], null);
        $this->setIfExists('sequence', $data ?? [], null);
        $this->setIfExists('subscriptionid', $data ?? [], null);
        $this->setIfExists('timeduration', $data ?? [], null);
        $this->setIfExists('timemodified', $data ?? [], null);
        $this->setIfExists('timestart', $data ?? [], null);
        $this->setIfExists('userid', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], 'null');
        $this->setIfExists('visible', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets categoryid
     *
     * @return int|null
     */
    public function getCategoryid()
    {
        return $this->container['categoryid'];
    }

    /**
     * Sets categoryid
     *
     * @param int|null $categoryid Category id (only for category events).
     *
     * @return self
     */
    public function setCategoryid($categoryid)
    {
        if (is_null($categoryid)) {
            throw new \InvalidArgumentException('non-nullable categoryid cannot be null');
        }
        $this->container['categoryid'] = $categoryid;

        return $this;
    }

    /**
     * Gets courseid
     *
     * @return int|null
     */
    public function getCourseid()
    {
        return $this->container['courseid'];
    }

    /**
     * Sets courseid
     *
     * @param int|null $courseid course id
     *
     * @return self
     */
    public function setCourseid($courseid)
    {
        if (is_null($courseid)) {
            throw new \InvalidArgumentException('non-nullable courseid cannot be null');
        }
        $this->container['courseid'] = $courseid;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets eventtype
     *
     * @return string|null
     */
    public function getEventtype()
    {
        return $this->container['eventtype'];
    }

    /**
     * Sets eventtype
     *
     * @param string|null $eventtype Event type
     *
     * @return self
     */
    public function setEventtype($eventtype)
    {
        if (is_null($eventtype)) {
            throw new \InvalidArgumentException('non-nullable eventtype cannot be null');
        }
        $this->container['eventtype'] = $eventtype;

        return $this;
    }

    /**
     * Gets format
     *
     * @return int|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param int|null $format description format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setFormat($format)
    {
        if (is_null($format)) {
            throw new \InvalidArgumentException('non-nullable format cannot be null');
        }
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets groupid
     *
     * @return int|null
     */
    public function getGroupid()
    {
        return $this->container['groupid'];
    }

    /**
     * Sets groupid
     *
     * @param int|null $groupid group id
     *
     * @return self
     */
    public function setGroupid($groupid)
    {
        if (is_null($groupid)) {
            throw new \InvalidArgumentException('non-nullable groupid cannot be null');
        }
        $this->container['groupid'] = $groupid;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id event id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets instance
     *
     * @return int|null
     */
    public function getInstance()
    {
        return $this->container['instance'];
    }

    /**
     * Sets instance
     *
     * @param int|null $instance instance id
     *
     * @return self
     */
    public function setInstance($instance)
    {
        if (is_null($instance)) {
            throw new \InvalidArgumentException('non-nullable instance cannot be null');
        }
        $this->container['instance'] = $instance;

        return $this;
    }

    /**
     * Gets modulename
     *
     * @return string|null
     */
    public function getModulename()
    {
        return $this->container['modulename'];
    }

    /**
     * Sets modulename
     *
     * @param string|null $modulename module name
     *
     * @return self
     */
    public function setModulename($modulename)
    {
        if (is_null($modulename)) {
            throw new \InvalidArgumentException('non-nullable modulename cannot be null');
        }
        $this->container['modulename'] = $modulename;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name event name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets repeatid
     *
     * @return int|null
     */
    public function getRepeatid()
    {
        return $this->container['repeatid'];
    }

    /**
     * Sets repeatid
     *
     * @param int|null $repeatid repeat id
     *
     * @return self
     */
    public function setRepeatid($repeatid)
    {
        if (is_null($repeatid)) {
            throw new \InvalidArgumentException('non-nullable repeatid cannot be null');
        }
        $this->container['repeatid'] = $repeatid;

        return $this;
    }

    /**
     * Gets sequence
     *
     * @return int|null
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param int|null $sequence sequence
     *
     * @return self
     */
    public function setSequence($sequence)
    {
        if (is_null($sequence)) {
            throw new \InvalidArgumentException('non-nullable sequence cannot be null');
        }
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets subscriptionid
     *
     * @return int|null
     */
    public function getSubscriptionid()
    {
        return $this->container['subscriptionid'];
    }

    /**
     * Sets subscriptionid
     *
     * @param int|null $subscriptionid Subscription id
     *
     * @return self
     */
    public function setSubscriptionid($subscriptionid)
    {
        if (is_null($subscriptionid)) {
            throw new \InvalidArgumentException('non-nullable subscriptionid cannot be null');
        }
        $this->container['subscriptionid'] = $subscriptionid;

        return $this;
    }

    /**
     * Gets timeduration
     *
     * @return int|null
     */
    public function getTimeduration()
    {
        return $this->container['timeduration'];
    }

    /**
     * Sets timeduration
     *
     * @param int|null $timeduration time duration
     *
     * @return self
     */
    public function setTimeduration($timeduration)
    {
        if (is_null($timeduration)) {
            throw new \InvalidArgumentException('non-nullable timeduration cannot be null');
        }
        $this->container['timeduration'] = $timeduration;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified time modified
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets timestart
     *
     * @return int|null
     */
    public function getTimestart()
    {
        return $this->container['timestart'];
    }

    /**
     * Sets timestart
     *
     * @param int|null $timestart timestart
     *
     * @return self
     */
    public function setTimestart($timestart)
    {
        if (is_null($timestart)) {
            throw new \InvalidArgumentException('non-nullable timestart cannot be null');
        }
        $this->container['timestart'] = $timestart;

        return $this;
    }

    /**
     * Gets userid
     *
     * @return int|null
     */
    public function getUserid()
    {
        return $this->container['userid'];
    }

    /**
     * Sets userid
     *
     * @param int|null $userid user id
     *
     * @return self
     */
    public function setUserid($userid)
    {
        if (is_null($userid)) {
            throw new \InvalidArgumentException('non-nullable userid cannot be null');
        }
        $this->container['userid'] = $userid;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid unique id of ical events
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return int|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param int|null $visible visible
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


