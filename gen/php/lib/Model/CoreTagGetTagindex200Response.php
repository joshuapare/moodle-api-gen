<?php
/**
 * CoreTagGetTagindex200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreTagGetTagindex200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreTagGetTagindex200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_tag_get_tagindex_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'anchor' => 'string',
        'component' => 'string',
        'content' => 'string',
        'exclusivetext' => 'string',
        'exclusiveurl' => 'string',
        'hascontent' => 'int',
        'itemtype' => 'string',
        'nextpageurl' => 'string',
        'prevpageurl' => 'string',
        'ta' => 'int',
        'tagid' => 'int',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'anchor' => null,
        'component' => null,
        'content' => null,
        'exclusivetext' => null,
        'exclusiveurl' => null,
        'hascontent' => null,
        'itemtype' => null,
        'nextpageurl' => null,
        'prevpageurl' => null,
        'ta' => null,
        'tagid' => null,
        'title' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'anchor' => false,
        'component' => false,
        'content' => false,
        'exclusivetext' => false,
        'exclusiveurl' => false,
        'hascontent' => false,
        'itemtype' => false,
        'nextpageurl' => false,
        'prevpageurl' => false,
        'ta' => false,
        'tagid' => false,
        'title' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'anchor' => 'anchor',
        'component' => 'component',
        'content' => 'content',
        'exclusivetext' => 'exclusivetext',
        'exclusiveurl' => 'exclusiveurl',
        'hascontent' => 'hascontent',
        'itemtype' => 'itemtype',
        'nextpageurl' => 'nextpageurl',
        'prevpageurl' => 'prevpageurl',
        'ta' => 'ta',
        'tagid' => 'tagid',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'anchor' => 'setAnchor',
        'component' => 'setComponent',
        'content' => 'setContent',
        'exclusivetext' => 'setExclusivetext',
        'exclusiveurl' => 'setExclusiveurl',
        'hascontent' => 'setHascontent',
        'itemtype' => 'setItemtype',
        'nextpageurl' => 'setNextpageurl',
        'prevpageurl' => 'setPrevpageurl',
        'ta' => 'setTa',
        'tagid' => 'setTagid',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'anchor' => 'getAnchor',
        'component' => 'getComponent',
        'content' => 'getContent',
        'exclusivetext' => 'getExclusivetext',
        'exclusiveurl' => 'getExclusiveurl',
        'hascontent' => 'getHascontent',
        'itemtype' => 'getItemtype',
        'nextpageurl' => 'getNextpageurl',
        'prevpageurl' => 'getPrevpageurl',
        'ta' => 'getTa',
        'tagid' => 'getTagid',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('anchor', $data ?? [], 'null');
        $this->setIfExists('component', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], 'null');
        $this->setIfExists('exclusivetext', $data ?? [], 'null');
        $this->setIfExists('exclusiveurl', $data ?? [], 'null');
        $this->setIfExists('hascontent', $data ?? [], null);
        $this->setIfExists('itemtype', $data ?? [], 'null');
        $this->setIfExists('nextpageurl', $data ?? [], 'null');
        $this->setIfExists('prevpageurl', $data ?? [], null);
        $this->setIfExists('ta', $data ?? [], null);
        $this->setIfExists('tagid', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['component'] === null) {
            $invalidProperties[] = "'component' can't be null";
        }
        if ($this->container['content'] === null) {
            $invalidProperties[] = "'content' can't be null";
        }
        if ($this->container['hascontent'] === null) {
            $invalidProperties[] = "'hascontent' can't be null";
        }
        if ($this->container['itemtype'] === null) {
            $invalidProperties[] = "'itemtype' can't be null";
        }
        if ($this->container['ta'] === null) {
            $invalidProperties[] = "'ta' can't be null";
        }
        if ($this->container['tagid'] === null) {
            $invalidProperties[] = "'tagid' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets anchor
     *
     * @return string|null
     */
    public function getAnchor()
    {
        return $this->container['anchor'];
    }

    /**
     * Sets anchor
     *
     * @param string|null $anchor name of anchor
     *
     * @return self
     */
    public function setAnchor($anchor)
    {
        if (is_null($anchor)) {
            throw new \InvalidArgumentException('non-nullable anchor cannot be null');
        }
        $this->container['anchor'] = $anchor;

        return $this;
    }

    /**
     * Gets component
     *
     * @return string
     */
    public function getComponent()
    {
        return $this->container['component'];
    }

    /**
     * Sets component
     *
     * @param string $component component
     *
     * @return self
     */
    public function setComponent($component)
    {
        if (is_null($component)) {
            throw new \InvalidArgumentException('non-nullable component cannot be null');
        }
        $this->container['component'] = $component;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content title
     *
     * @return self
     */
    public function setContent($content)
    {
        if (is_null($content)) {
            throw new \InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets exclusivetext
     *
     * @return string|null
     */
    public function getExclusivetext()
    {
        return $this->container['exclusivetext'];
    }

    /**
     * Sets exclusivetext
     *
     * @param string|null $exclusivetext text for exclusive link
     *
     * @return self
     */
    public function setExclusivetext($exclusivetext)
    {
        if (is_null($exclusivetext)) {
            throw new \InvalidArgumentException('non-nullable exclusivetext cannot be null');
        }
        $this->container['exclusivetext'] = $exclusivetext;

        return $this;
    }

    /**
     * Gets exclusiveurl
     *
     * @return string|null
     */
    public function getExclusiveurl()
    {
        return $this->container['exclusiveurl'];
    }

    /**
     * Sets exclusiveurl
     *
     * @param string|null $exclusiveurl URL for exclusive link
     *
     * @return self
     */
    public function setExclusiveurl($exclusiveurl)
    {
        if (is_null($exclusiveurl)) {
            throw new \InvalidArgumentException('non-nullable exclusiveurl cannot be null');
        }
        $this->container['exclusiveurl'] = $exclusiveurl;

        return $this;
    }

    /**
     * Gets hascontent
     *
     * @return int
     */
    public function getHascontent()
    {
        return $this->container['hascontent'];
    }

    /**
     * Sets hascontent
     *
     * @param int $hascontent whether the content is present
     *
     * @return self
     */
    public function setHascontent($hascontent)
    {
        if (is_null($hascontent)) {
            throw new \InvalidArgumentException('non-nullable hascontent cannot be null');
        }
        $this->container['hascontent'] = $hascontent;

        return $this;
    }

    /**
     * Gets itemtype
     *
     * @return string
     */
    public function getItemtype()
    {
        return $this->container['itemtype'];
    }

    /**
     * Sets itemtype
     *
     * @param string $itemtype itemtype
     *
     * @return self
     */
    public function setItemtype($itemtype)
    {
        if (is_null($itemtype)) {
            throw new \InvalidArgumentException('non-nullable itemtype cannot be null');
        }
        $this->container['itemtype'] = $itemtype;

        return $this;
    }

    /**
     * Gets nextpageurl
     *
     * @return string|null
     */
    public function getNextpageurl()
    {
        return $this->container['nextpageurl'];
    }

    /**
     * Sets nextpageurl
     *
     * @param string|null $nextpageurl URL for the next page
     *
     * @return self
     */
    public function setNextpageurl($nextpageurl)
    {
        if (is_null($nextpageurl)) {
            throw new \InvalidArgumentException('non-nullable nextpageurl cannot be null');
        }
        $this->container['nextpageurl'] = $nextpageurl;

        return $this;
    }

    /**
     * Gets prevpageurl
     *
     * @return string|null
     */
    public function getPrevpageurl()
    {
        return $this->container['prevpageurl'];
    }

    /**
     * Sets prevpageurl
     *
     * @param string|null $prevpageurl URL for the next page
     *
     * @return self
     */
    public function setPrevpageurl($prevpageurl)
    {
        if (is_null($prevpageurl)) {
            throw new \InvalidArgumentException('non-nullable prevpageurl cannot be null');
        }
        $this->container['prevpageurl'] = $prevpageurl;

        return $this;
    }

    /**
     * Gets ta
     *
     * @return int
     */
    public function getTa()
    {
        return $this->container['ta'];
    }

    /**
     * Sets ta
     *
     * @param int $ta tag area id
     *
     * @return self
     */
    public function setTa($ta)
    {
        if (is_null($ta)) {
            throw new \InvalidArgumentException('non-nullable ta cannot be null');
        }
        $this->container['ta'] = $ta;

        return $this;
    }

    /**
     * Gets tagid
     *
     * @return int
     */
    public function getTagid()
    {
        return $this->container['tagid'];
    }

    /**
     * Sets tagid
     *
     * @param int $tagid tag id
     *
     * @return self
     */
    public function setTagid($tagid)
    {
        if (is_null($tagid)) {
            throw new \InvalidArgumentException('non-nullable tagid cannot be null');
        }
        $this->container['tagid'] = $tagid;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


