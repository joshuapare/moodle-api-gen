<?php
/**
 * CoreWebserviceGetSiteInfo200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreWebserviceGetSiteInfo200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreWebserviceGetSiteInfo200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_webservice_get_site_info_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'advancedfeatures' => '\OpenAPI\Client\Model\CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner[]',
        'downloadfiles' => 'int',
        'firstname' => 'string',
        'fullname' => 'string',
        'functions' => '\OpenAPI\Client\Model\CoreWebserviceGetSiteInfo200ResponseFunctionsInner[]',
        'lang' => 'string',
        'lastname' => 'string',
        'limitconcurrentlogins' => 'int',
        'mobilecssurl' => 'string',
        'release' => 'string',
        'sitecalendartype' => 'string',
        'siteid' => 'int',
        'sitename' => 'string',
        'siteurl' => 'string',
        'theme' => 'string',
        'uploadfiles' => 'int',
        'usercalendartype' => 'string',
        'usercanmanageownfiles' => 'bool',
        'userhomepage' => 'int',
        'userid' => 'int',
        'userissiteadmin' => 'bool',
        'usermaxuploadfilesize' => 'int',
        'username' => 'string',
        'userpictureurl' => 'string',
        'userprivateaccesskey' => 'string',
        'userquota' => 'int',
        'usersessionscount' => 'int',
        'version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'advancedfeatures' => null,
        'downloadfiles' => null,
        'firstname' => null,
        'fullname' => null,
        'functions' => null,
        'lang' => null,
        'lastname' => null,
        'limitconcurrentlogins' => null,
        'mobilecssurl' => null,
        'release' => null,
        'sitecalendartype' => null,
        'siteid' => null,
        'sitename' => null,
        'siteurl' => null,
        'theme' => null,
        'uploadfiles' => null,
        'usercalendartype' => null,
        'usercanmanageownfiles' => null,
        'userhomepage' => null,
        'userid' => null,
        'userissiteadmin' => null,
        'usermaxuploadfilesize' => null,
        'username' => null,
        'userpictureurl' => null,
        'userprivateaccesskey' => null,
        'userquota' => null,
        'usersessionscount' => null,
        'version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'advancedfeatures' => false,
        'downloadfiles' => false,
        'firstname' => false,
        'fullname' => false,
        'functions' => false,
        'lang' => false,
        'lastname' => false,
        'limitconcurrentlogins' => false,
        'mobilecssurl' => false,
        'release' => false,
        'sitecalendartype' => false,
        'siteid' => false,
        'sitename' => false,
        'siteurl' => false,
        'theme' => false,
        'uploadfiles' => false,
        'usercalendartype' => false,
        'usercanmanageownfiles' => false,
        'userhomepage' => false,
        'userid' => false,
        'userissiteadmin' => false,
        'usermaxuploadfilesize' => false,
        'username' => false,
        'userpictureurl' => false,
        'userprivateaccesskey' => false,
        'userquota' => false,
        'usersessionscount' => false,
        'version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'advancedfeatures' => 'advancedfeatures',
        'downloadfiles' => 'downloadfiles',
        'firstname' => 'firstname',
        'fullname' => 'fullname',
        'functions' => 'functions',
        'lang' => 'lang',
        'lastname' => 'lastname',
        'limitconcurrentlogins' => 'limitconcurrentlogins',
        'mobilecssurl' => 'mobilecssurl',
        'release' => 'release',
        'sitecalendartype' => 'sitecalendartype',
        'siteid' => 'siteid',
        'sitename' => 'sitename',
        'siteurl' => 'siteurl',
        'theme' => 'theme',
        'uploadfiles' => 'uploadfiles',
        'usercalendartype' => 'usercalendartype',
        'usercanmanageownfiles' => 'usercanmanageownfiles',
        'userhomepage' => 'userhomepage',
        'userid' => 'userid',
        'userissiteadmin' => 'userissiteadmin',
        'usermaxuploadfilesize' => 'usermaxuploadfilesize',
        'username' => 'username',
        'userpictureurl' => 'userpictureurl',
        'userprivateaccesskey' => 'userprivateaccesskey',
        'userquota' => 'userquota',
        'usersessionscount' => 'usersessionscount',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'advancedfeatures' => 'setAdvancedfeatures',
        'downloadfiles' => 'setDownloadfiles',
        'firstname' => 'setFirstname',
        'fullname' => 'setFullname',
        'functions' => 'setFunctions',
        'lang' => 'setLang',
        'lastname' => 'setLastname',
        'limitconcurrentlogins' => 'setLimitconcurrentlogins',
        'mobilecssurl' => 'setMobilecssurl',
        'release' => 'setRelease',
        'sitecalendartype' => 'setSitecalendartype',
        'siteid' => 'setSiteid',
        'sitename' => 'setSitename',
        'siteurl' => 'setSiteurl',
        'theme' => 'setTheme',
        'uploadfiles' => 'setUploadfiles',
        'usercalendartype' => 'setUsercalendartype',
        'usercanmanageownfiles' => 'setUsercanmanageownfiles',
        'userhomepage' => 'setUserhomepage',
        'userid' => 'setUserid',
        'userissiteadmin' => 'setUserissiteadmin',
        'usermaxuploadfilesize' => 'setUsermaxuploadfilesize',
        'username' => 'setUsername',
        'userpictureurl' => 'setUserpictureurl',
        'userprivateaccesskey' => 'setUserprivateaccesskey',
        'userquota' => 'setUserquota',
        'usersessionscount' => 'setUsersessionscount',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'advancedfeatures' => 'getAdvancedfeatures',
        'downloadfiles' => 'getDownloadfiles',
        'firstname' => 'getFirstname',
        'fullname' => 'getFullname',
        'functions' => 'getFunctions',
        'lang' => 'getLang',
        'lastname' => 'getLastname',
        'limitconcurrentlogins' => 'getLimitconcurrentlogins',
        'mobilecssurl' => 'getMobilecssurl',
        'release' => 'getRelease',
        'sitecalendartype' => 'getSitecalendartype',
        'siteid' => 'getSiteid',
        'sitename' => 'getSitename',
        'siteurl' => 'getSiteurl',
        'theme' => 'getTheme',
        'uploadfiles' => 'getUploadfiles',
        'usercalendartype' => 'getUsercalendartype',
        'usercanmanageownfiles' => 'getUsercanmanageownfiles',
        'userhomepage' => 'getUserhomepage',
        'userid' => 'getUserid',
        'userissiteadmin' => 'getUserissiteadmin',
        'usermaxuploadfilesize' => 'getUsermaxuploadfilesize',
        'username' => 'getUsername',
        'userpictureurl' => 'getUserpictureurl',
        'userprivateaccesskey' => 'getUserprivateaccesskey',
        'userquota' => 'getUserquota',
        'usersessionscount' => 'getUsersessionscount',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('advancedfeatures', $data ?? [], null);
        $this->setIfExists('downloadfiles', $data ?? [], null);
        $this->setIfExists('firstname', $data ?? [], 'null');
        $this->setIfExists('fullname', $data ?? [], 'null');
        $this->setIfExists('functions', $data ?? [], null);
        $this->setIfExists('lang', $data ?? [], 'null');
        $this->setIfExists('lastname', $data ?? [], 'null');
        $this->setIfExists('limitconcurrentlogins', $data ?? [], null);
        $this->setIfExists('mobilecssurl', $data ?? [], 'null');
        $this->setIfExists('release', $data ?? [], 'null');
        $this->setIfExists('sitecalendartype', $data ?? [], 'null');
        $this->setIfExists('siteid', $data ?? [], null);
        $this->setIfExists('sitename', $data ?? [], 'null');
        $this->setIfExists('siteurl', $data ?? [], 'null');
        $this->setIfExists('theme', $data ?? [], 'null');
        $this->setIfExists('uploadfiles', $data ?? [], null);
        $this->setIfExists('usercalendartype', $data ?? [], 'null');
        $this->setIfExists('usercanmanageownfiles', $data ?? [], null);
        $this->setIfExists('userhomepage', $data ?? [], null);
        $this->setIfExists('userid', $data ?? [], null);
        $this->setIfExists('userissiteadmin', $data ?? [], null);
        $this->setIfExists('usermaxuploadfilesize', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], 'null');
        $this->setIfExists('userpictureurl', $data ?? [], 'null');
        $this->setIfExists('userprivateaccesskey', $data ?? [], 'null');
        $this->setIfExists('userquota', $data ?? [], null);
        $this->setIfExists('usersessionscount', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], 'null');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['firstname'] === null) {
            $invalidProperties[] = "'firstname' can't be null";
        }
        if ($this->container['fullname'] === null) {
            $invalidProperties[] = "'fullname' can't be null";
        }
        if ($this->container['functions'] === null) {
            $invalidProperties[] = "'functions' can't be null";
        }
        if ($this->container['lang'] === null) {
            $invalidProperties[] = "'lang' can't be null";
        }
        if ($this->container['lastname'] === null) {
            $invalidProperties[] = "'lastname' can't be null";
        }
        if ($this->container['sitename'] === null) {
            $invalidProperties[] = "'sitename' can't be null";
        }
        if ($this->container['siteurl'] === null) {
            $invalidProperties[] = "'siteurl' can't be null";
        }
        if ($this->container['userid'] === null) {
            $invalidProperties[] = "'userid' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ($this->container['userpictureurl'] === null) {
            $invalidProperties[] = "'userpictureurl' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets advancedfeatures
     *
     * @return \OpenAPI\Client\Model\CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner[]|null
     */
    public function getAdvancedfeatures()
    {
        return $this->container['advancedfeatures'];
    }

    /**
     * Sets advancedfeatures
     *
     * @param \OpenAPI\Client\Model\CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner[]|null $advancedfeatures advancedfeatures
     *
     * @return self
     */
    public function setAdvancedfeatures($advancedfeatures)
    {
        if (is_null($advancedfeatures)) {
            throw new \InvalidArgumentException('non-nullable advancedfeatures cannot be null');
        }
        $this->container['advancedfeatures'] = $advancedfeatures;

        return $this;
    }

    /**
     * Gets downloadfiles
     *
     * @return int|null
     */
    public function getDownloadfiles()
    {
        return $this->container['downloadfiles'];
    }

    /**
     * Sets downloadfiles
     *
     * @param int|null $downloadfiles 1 if users are allowed to download files, 0 if not
     *
     * @return self
     */
    public function setDownloadfiles($downloadfiles)
    {
        if (is_null($downloadfiles)) {
            throw new \InvalidArgumentException('non-nullable downloadfiles cannot be null');
        }
        $this->container['downloadfiles'] = $downloadfiles;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname first name
     *
     * @return self
     */
    public function setFirstname($firstname)
    {
        if (is_null($firstname)) {
            throw new \InvalidArgumentException('non-nullable firstname cannot be null');
        }
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets fullname
     *
     * @return string
     */
    public function getFullname()
    {
        return $this->container['fullname'];
    }

    /**
     * Sets fullname
     *
     * @param string $fullname user full name
     *
     * @return self
     */
    public function setFullname($fullname)
    {
        if (is_null($fullname)) {
            throw new \InvalidArgumentException('non-nullable fullname cannot be null');
        }
        $this->container['fullname'] = $fullname;

        return $this;
    }

    /**
     * Gets functions
     *
     * @return \OpenAPI\Client\Model\CoreWebserviceGetSiteInfo200ResponseFunctionsInner[]
     */
    public function getFunctions()
    {
        return $this->container['functions'];
    }

    /**
     * Sets functions
     *
     * @param \OpenAPI\Client\Model\CoreWebserviceGetSiteInfo200ResponseFunctionsInner[] $functions functions
     *
     * @return self
     */
    public function setFunctions($functions)
    {
        if (is_null($functions)) {
            throw new \InvalidArgumentException('non-nullable functions cannot be null');
        }
        $this->container['functions'] = $functions;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang Current language.
     *
     * @return self
     */
    public function setLang($lang)
    {
        if (is_null($lang)) {
            throw new \InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname last name
     *
     * @return self
     */
    public function setLastname($lastname)
    {
        if (is_null($lastname)) {
            throw new \InvalidArgumentException('non-nullable lastname cannot be null');
        }
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets limitconcurrentlogins
     *
     * @return int|null
     */
    public function getLimitconcurrentlogins()
    {
        return $this->container['limitconcurrentlogins'];
    }

    /**
     * Sets limitconcurrentlogins
     *
     * @param int|null $limitconcurrentlogins Number of concurrent sessions allowed
     *
     * @return self
     */
    public function setLimitconcurrentlogins($limitconcurrentlogins)
    {
        if (is_null($limitconcurrentlogins)) {
            throw new \InvalidArgumentException('non-nullable limitconcurrentlogins cannot be null');
        }
        $this->container['limitconcurrentlogins'] = $limitconcurrentlogins;

        return $this;
    }

    /**
     * Gets mobilecssurl
     *
     * @return string|null
     */
    public function getMobilecssurl()
    {
        return $this->container['mobilecssurl'];
    }

    /**
     * Sets mobilecssurl
     *
     * @param string|null $mobilecssurl Mobile custom CSS theme
     *
     * @return self
     */
    public function setMobilecssurl($mobilecssurl)
    {
        if (is_null($mobilecssurl)) {
            throw new \InvalidArgumentException('non-nullable mobilecssurl cannot be null');
        }
        $this->container['mobilecssurl'] = $mobilecssurl;

        return $this;
    }

    /**
     * Gets release
     *
     * @return string|null
     */
    public function getRelease()
    {
        return $this->container['release'];
    }

    /**
     * Sets release
     *
     * @param string|null $release Moodle release number
     *
     * @return self
     */
    public function setRelease($release)
    {
        if (is_null($release)) {
            throw new \InvalidArgumentException('non-nullable release cannot be null');
        }
        $this->container['release'] = $release;

        return $this;
    }

    /**
     * Gets sitecalendartype
     *
     * @return string|null
     */
    public function getSitecalendartype()
    {
        return $this->container['sitecalendartype'];
    }

    /**
     * Sets sitecalendartype
     *
     * @param string|null $sitecalendartype Calendar type set in the site.
     *
     * @return self
     */
    public function setSitecalendartype($sitecalendartype)
    {
        if (is_null($sitecalendartype)) {
            throw new \InvalidArgumentException('non-nullable sitecalendartype cannot be null');
        }
        $this->container['sitecalendartype'] = $sitecalendartype;

        return $this;
    }

    /**
     * Gets siteid
     *
     * @return int|null
     */
    public function getSiteid()
    {
        return $this->container['siteid'];
    }

    /**
     * Sets siteid
     *
     * @param int|null $siteid Site course ID
     *
     * @return self
     */
    public function setSiteid($siteid)
    {
        if (is_null($siteid)) {
            throw new \InvalidArgumentException('non-nullable siteid cannot be null');
        }
        $this->container['siteid'] = $siteid;

        return $this;
    }

    /**
     * Gets sitename
     *
     * @return string
     */
    public function getSitename()
    {
        return $this->container['sitename'];
    }

    /**
     * Sets sitename
     *
     * @param string $sitename site name
     *
     * @return self
     */
    public function setSitename($sitename)
    {
        if (is_null($sitename)) {
            throw new \InvalidArgumentException('non-nullable sitename cannot be null');
        }
        $this->container['sitename'] = $sitename;

        return $this;
    }

    /**
     * Gets siteurl
     *
     * @return string
     */
    public function getSiteurl()
    {
        return $this->container['siteurl'];
    }

    /**
     * Sets siteurl
     *
     * @param string $siteurl site url
     *
     * @return self
     */
    public function setSiteurl($siteurl)
    {
        if (is_null($siteurl)) {
            throw new \InvalidArgumentException('non-nullable siteurl cannot be null');
        }
        $this->container['siteurl'] = $siteurl;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return string|null
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param string|null $theme Current theme for the user.
     *
     * @return self
     */
    public function setTheme($theme)
    {
        if (is_null($theme)) {
            throw new \InvalidArgumentException('non-nullable theme cannot be null');
        }
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets uploadfiles
     *
     * @return int|null
     */
    public function getUploadfiles()
    {
        return $this->container['uploadfiles'];
    }

    /**
     * Sets uploadfiles
     *
     * @param int|null $uploadfiles 1 if users are allowed to upload files, 0 if not
     *
     * @return self
     */
    public function setUploadfiles($uploadfiles)
    {
        if (is_null($uploadfiles)) {
            throw new \InvalidArgumentException('non-nullable uploadfiles cannot be null');
        }
        $this->container['uploadfiles'] = $uploadfiles;

        return $this;
    }

    /**
     * Gets usercalendartype
     *
     * @return string|null
     */
    public function getUsercalendartype()
    {
        return $this->container['usercalendartype'];
    }

    /**
     * Sets usercalendartype
     *
     * @param string|null $usercalendartype Calendar typed used by the user.
     *
     * @return self
     */
    public function setUsercalendartype($usercalendartype)
    {
        if (is_null($usercalendartype)) {
            throw new \InvalidArgumentException('non-nullable usercalendartype cannot be null');
        }
        $this->container['usercalendartype'] = $usercalendartype;

        return $this;
    }

    /**
     * Gets usercanmanageownfiles
     *
     * @return bool|null
     */
    public function getUsercanmanageownfiles()
    {
        return $this->container['usercanmanageownfiles'];
    }

    /**
     * Sets usercanmanageownfiles
     *
     * @param bool|null $usercanmanageownfiles true if the user can manage his own files
     *
     * @return self
     */
    public function setUsercanmanageownfiles($usercanmanageownfiles)
    {
        if (is_null($usercanmanageownfiles)) {
            throw new \InvalidArgumentException('non-nullable usercanmanageownfiles cannot be null');
        }
        $this->container['usercanmanageownfiles'] = $usercanmanageownfiles;

        return $this;
    }

    /**
     * Gets userhomepage
     *
     * @return int|null
     */
    public function getUserhomepage()
    {
        return $this->container['userhomepage'];
    }

    /**
     * Sets userhomepage
     *
     * @param int|null $userhomepage the default home page for the user: 0 for the site home, 1 for dashboard
     *
     * @return self
     */
    public function setUserhomepage($userhomepage)
    {
        if (is_null($userhomepage)) {
            throw new \InvalidArgumentException('non-nullable userhomepage cannot be null');
        }
        $this->container['userhomepage'] = $userhomepage;

        return $this;
    }

    /**
     * Gets userid
     *
     * @return int
     */
    public function getUserid()
    {
        return $this->container['userid'];
    }

    /**
     * Sets userid
     *
     * @param int $userid user id
     *
     * @return self
     */
    public function setUserid($userid)
    {
        if (is_null($userid)) {
            throw new \InvalidArgumentException('non-nullable userid cannot be null');
        }
        $this->container['userid'] = $userid;

        return $this;
    }

    /**
     * Gets userissiteadmin
     *
     * @return bool|null
     */
    public function getUserissiteadmin()
    {
        return $this->container['userissiteadmin'];
    }

    /**
     * Sets userissiteadmin
     *
     * @param bool|null $userissiteadmin Whether the user is a site admin or not.
     *
     * @return self
     */
    public function setUserissiteadmin($userissiteadmin)
    {
        if (is_null($userissiteadmin)) {
            throw new \InvalidArgumentException('non-nullable userissiteadmin cannot be null');
        }
        $this->container['userissiteadmin'] = $userissiteadmin;

        return $this;
    }

    /**
     * Gets usermaxuploadfilesize
     *
     * @return int|null
     */
    public function getUsermaxuploadfilesize()
    {
        return $this->container['usermaxuploadfilesize'];
    }

    /**
     * Sets usermaxuploadfilesize
     *
     * @param int|null $usermaxuploadfilesize user max upload file size (bytes). -1 means the user can ignore the upload file size
     *
     * @return self
     */
    public function setUsermaxuploadfilesize($usermaxuploadfilesize)
    {
        if (is_null($usermaxuploadfilesize)) {
            throw new \InvalidArgumentException('non-nullable usermaxuploadfilesize cannot be null');
        }
        $this->container['usermaxuploadfilesize'] = $usermaxuploadfilesize;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets userpictureurl
     *
     * @return string
     */
    public function getUserpictureurl()
    {
        return $this->container['userpictureurl'];
    }

    /**
     * Sets userpictureurl
     *
     * @param string $userpictureurl the user profile picture.                     Warning: this url is the public URL that only works when forcelogin is set to NO and guestaccess is set to YES.                     In order to retrieve user profile pictures independently of the Moodle config, replace \"pluginfile.php\" by                     \"webservice/pluginfile.php?token=WSTOKEN&file=\"                     Of course the user can only see profile picture depending                     on his/her permissions. Moreover it is recommended to use HTTPS too.
     *
     * @return self
     */
    public function setUserpictureurl($userpictureurl)
    {
        if (is_null($userpictureurl)) {
            throw new \InvalidArgumentException('non-nullable userpictureurl cannot be null');
        }
        $this->container['userpictureurl'] = $userpictureurl;

        return $this;
    }

    /**
     * Gets userprivateaccesskey
     *
     * @return string|null
     */
    public function getUserprivateaccesskey()
    {
        return $this->container['userprivateaccesskey'];
    }

    /**
     * Sets userprivateaccesskey
     *
     * @param string|null $userprivateaccesskey Private user access key for fetching files.
     *
     * @return self
     */
    public function setUserprivateaccesskey($userprivateaccesskey)
    {
        if (is_null($userprivateaccesskey)) {
            throw new \InvalidArgumentException('non-nullable userprivateaccesskey cannot be null');
        }
        $this->container['userprivateaccesskey'] = $userprivateaccesskey;

        return $this;
    }

    /**
     * Gets userquota
     *
     * @return int|null
     */
    public function getUserquota()
    {
        return $this->container['userquota'];
    }

    /**
     * Sets userquota
     *
     * @param int|null $userquota user quota (bytes). 0 means user can ignore the quota
     *
     * @return self
     */
    public function setUserquota($userquota)
    {
        if (is_null($userquota)) {
            throw new \InvalidArgumentException('non-nullable userquota cannot be null');
        }
        $this->container['userquota'] = $userquota;

        return $this;
    }

    /**
     * Gets usersessionscount
     *
     * @return int|null
     */
    public function getUsersessionscount()
    {
        return $this->container['usersessionscount'];
    }

    /**
     * Sets usersessionscount
     *
     * @param int|null $usersessionscount Number of active sessions for current user.                     Only returned when limitconcurrentlogins is used.
     *
     * @return self
     */
    public function setUsersessionscount($usersessionscount)
    {
        if (is_null($usersessionscount)) {
            throw new \InvalidArgumentException('non-nullable usersessionscount cannot be null');
        }
        $this->container['usersessionscount'] = $usersessionscount;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Moodle version number
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


