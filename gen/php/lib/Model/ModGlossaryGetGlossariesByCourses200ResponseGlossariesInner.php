<?php
/**
 * ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner Class Doc Comment
 *
 * @category Class
 * @description Glossaries
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_glossary_get_glossaries_by_courses_200_response_glossaries_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allowcomments' => 'int',
        'allowduplicatedentries' => 'int',
        'allowprintview' => 'int',
        'approvaldisplayformat' => 'string',
        'assessed' => 'int',
        'assesstimefinish' => 'int',
        'assesstimestart' => 'int',
        'browsemodes' => 'object[]',
        'canaddentry' => 'int',
        'completionentries' => 'int',
        'course' => 'int',
        'coursemodule' => 'int',
        'defaultapproval' => 'int',
        'displayformat' => 'string',
        'editalways' => 'int',
        'entbypage' => 'int',
        'globalglossary' => 'int',
        'groupingid' => 'int',
        'groupmode' => 'int',
        'id' => 'int',
        'intro' => 'string',
        'introfiles' => '\OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]',
        'introformat' => 'int',
        'lang' => 'string',
        'mainglossary' => 'int',
        'name' => 'string',
        'rssarticles' => 'int',
        'rsstype' => 'int',
        'scale' => 'int',
        'section' => 'int',
        'showall' => 'int',
        'showalphabet' => 'int',
        'showspecial' => 'int',
        'timecreated' => 'int',
        'timemodified' => 'int',
        'usedynalink' => 'int',
        'visible' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allowcomments' => null,
        'allowduplicatedentries' => null,
        'allowprintview' => null,
        'approvaldisplayformat' => null,
        'assessed' => null,
        'assesstimefinish' => null,
        'assesstimestart' => null,
        'browsemodes' => null,
        'canaddentry' => null,
        'completionentries' => null,
        'course' => null,
        'coursemodule' => null,
        'defaultapproval' => null,
        'displayformat' => null,
        'editalways' => null,
        'entbypage' => null,
        'globalglossary' => null,
        'groupingid' => null,
        'groupmode' => null,
        'id' => null,
        'intro' => null,
        'introfiles' => null,
        'introformat' => null,
        'lang' => null,
        'mainglossary' => null,
        'name' => null,
        'rssarticles' => null,
        'rsstype' => null,
        'scale' => null,
        'section' => null,
        'showall' => null,
        'showalphabet' => null,
        'showspecial' => null,
        'timecreated' => null,
        'timemodified' => null,
        'usedynalink' => null,
        'visible' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allowcomments' => false,
        'allowduplicatedentries' => false,
        'allowprintview' => false,
        'approvaldisplayformat' => false,
        'assessed' => false,
        'assesstimefinish' => false,
        'assesstimestart' => false,
        'browsemodes' => false,
        'canaddentry' => false,
        'completionentries' => false,
        'course' => false,
        'coursemodule' => false,
        'defaultapproval' => false,
        'displayformat' => false,
        'editalways' => false,
        'entbypage' => false,
        'globalglossary' => false,
        'groupingid' => false,
        'groupmode' => false,
        'id' => false,
        'intro' => false,
        'introfiles' => false,
        'introformat' => false,
        'lang' => false,
        'mainglossary' => false,
        'name' => false,
        'rssarticles' => false,
        'rsstype' => false,
        'scale' => false,
        'section' => false,
        'showall' => false,
        'showalphabet' => false,
        'showspecial' => false,
        'timecreated' => false,
        'timemodified' => false,
        'usedynalink' => false,
        'visible' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowcomments' => 'allowcomments',
        'allowduplicatedentries' => 'allowduplicatedentries',
        'allowprintview' => 'allowprintview',
        'approvaldisplayformat' => 'approvaldisplayformat',
        'assessed' => 'assessed',
        'assesstimefinish' => 'assesstimefinish',
        'assesstimestart' => 'assesstimestart',
        'browsemodes' => 'browsemodes',
        'canaddentry' => 'canaddentry',
        'completionentries' => 'completionentries',
        'course' => 'course',
        'coursemodule' => 'coursemodule',
        'defaultapproval' => 'defaultapproval',
        'displayformat' => 'displayformat',
        'editalways' => 'editalways',
        'entbypage' => 'entbypage',
        'globalglossary' => 'globalglossary',
        'groupingid' => 'groupingid',
        'groupmode' => 'groupmode',
        'id' => 'id',
        'intro' => 'intro',
        'introfiles' => 'introfiles',
        'introformat' => 'introformat',
        'lang' => 'lang',
        'mainglossary' => 'mainglossary',
        'name' => 'name',
        'rssarticles' => 'rssarticles',
        'rsstype' => 'rsstype',
        'scale' => 'scale',
        'section' => 'section',
        'showall' => 'showall',
        'showalphabet' => 'showalphabet',
        'showspecial' => 'showspecial',
        'timecreated' => 'timecreated',
        'timemodified' => 'timemodified',
        'usedynalink' => 'usedynalink',
        'visible' => 'visible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowcomments' => 'setAllowcomments',
        'allowduplicatedentries' => 'setAllowduplicatedentries',
        'allowprintview' => 'setAllowprintview',
        'approvaldisplayformat' => 'setApprovaldisplayformat',
        'assessed' => 'setAssessed',
        'assesstimefinish' => 'setAssesstimefinish',
        'assesstimestart' => 'setAssesstimestart',
        'browsemodes' => 'setBrowsemodes',
        'canaddentry' => 'setCanaddentry',
        'completionentries' => 'setCompletionentries',
        'course' => 'setCourse',
        'coursemodule' => 'setCoursemodule',
        'defaultapproval' => 'setDefaultapproval',
        'displayformat' => 'setDisplayformat',
        'editalways' => 'setEditalways',
        'entbypage' => 'setEntbypage',
        'globalglossary' => 'setGlobalglossary',
        'groupingid' => 'setGroupingid',
        'groupmode' => 'setGroupmode',
        'id' => 'setId',
        'intro' => 'setIntro',
        'introfiles' => 'setIntrofiles',
        'introformat' => 'setIntroformat',
        'lang' => 'setLang',
        'mainglossary' => 'setMainglossary',
        'name' => 'setName',
        'rssarticles' => 'setRssarticles',
        'rsstype' => 'setRsstype',
        'scale' => 'setScale',
        'section' => 'setSection',
        'showall' => 'setShowall',
        'showalphabet' => 'setShowalphabet',
        'showspecial' => 'setShowspecial',
        'timecreated' => 'setTimecreated',
        'timemodified' => 'setTimemodified',
        'usedynalink' => 'setUsedynalink',
        'visible' => 'setVisible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowcomments' => 'getAllowcomments',
        'allowduplicatedentries' => 'getAllowduplicatedentries',
        'allowprintview' => 'getAllowprintview',
        'approvaldisplayformat' => 'getApprovaldisplayformat',
        'assessed' => 'getAssessed',
        'assesstimefinish' => 'getAssesstimefinish',
        'assesstimestart' => 'getAssesstimestart',
        'browsemodes' => 'getBrowsemodes',
        'canaddentry' => 'getCanaddentry',
        'completionentries' => 'getCompletionentries',
        'course' => 'getCourse',
        'coursemodule' => 'getCoursemodule',
        'defaultapproval' => 'getDefaultapproval',
        'displayformat' => 'getDisplayformat',
        'editalways' => 'getEditalways',
        'entbypage' => 'getEntbypage',
        'globalglossary' => 'getGlobalglossary',
        'groupingid' => 'getGroupingid',
        'groupmode' => 'getGroupmode',
        'id' => 'getId',
        'intro' => 'getIntro',
        'introfiles' => 'getIntrofiles',
        'introformat' => 'getIntroformat',
        'lang' => 'getLang',
        'mainglossary' => 'getMainglossary',
        'name' => 'getName',
        'rssarticles' => 'getRssarticles',
        'rsstype' => 'getRsstype',
        'scale' => 'getScale',
        'section' => 'getSection',
        'showall' => 'getShowall',
        'showalphabet' => 'getShowalphabet',
        'showspecial' => 'getShowspecial',
        'timecreated' => 'getTimecreated',
        'timemodified' => 'getTimemodified',
        'usedynalink' => 'getUsedynalink',
        'visible' => 'getVisible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allowcomments', $data ?? [], null);
        $this->setIfExists('allowduplicatedentries', $data ?? [], null);
        $this->setIfExists('allowprintview', $data ?? [], null);
        $this->setIfExists('approvaldisplayformat', $data ?? [], 'null');
        $this->setIfExists('assessed', $data ?? [], null);
        $this->setIfExists('assesstimefinish', $data ?? [], null);
        $this->setIfExists('assesstimestart', $data ?? [], null);
        $this->setIfExists('browsemodes', $data ?? [], null);
        $this->setIfExists('canaddentry', $data ?? [], null);
        $this->setIfExists('completionentries', $data ?? [], null);
        $this->setIfExists('course', $data ?? [], null);
        $this->setIfExists('coursemodule', $data ?? [], null);
        $this->setIfExists('defaultapproval', $data ?? [], null);
        $this->setIfExists('displayformat', $data ?? [], 'null');
        $this->setIfExists('editalways', $data ?? [], null);
        $this->setIfExists('entbypage', $data ?? [], null);
        $this->setIfExists('globalglossary', $data ?? [], null);
        $this->setIfExists('groupingid', $data ?? [], null);
        $this->setIfExists('groupmode', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('intro', $data ?? [], null);
        $this->setIfExists('introfiles', $data ?? [], null);
        $this->setIfExists('introformat', $data ?? [], null);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('mainglossary', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('rssarticles', $data ?? [], null);
        $this->setIfExists('rsstype', $data ?? [], null);
        $this->setIfExists('scale', $data ?? [], null);
        $this->setIfExists('section', $data ?? [], null);
        $this->setIfExists('showall', $data ?? [], null);
        $this->setIfExists('showalphabet', $data ?? [], null);
        $this->setIfExists('showspecial', $data ?? [], null);
        $this->setIfExists('timecreated', $data ?? [], null);
        $this->setIfExists('timemodified', $data ?? [], null);
        $this->setIfExists('usedynalink', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowcomments
     *
     * @return int|null
     */
    public function getAllowcomments()
    {
        return $this->container['allowcomments'];
    }

    /**
     * Sets allowcomments
     *
     * @param int|null $allowcomments If enabled, all participants with permission to create comments will be able to add comments to glossary entries
     *
     * @return self
     */
    public function setAllowcomments($allowcomments)
    {
        if (is_null($allowcomments)) {
            throw new \InvalidArgumentException('non-nullable allowcomments cannot be null');
        }
        $this->container['allowcomments'] = $allowcomments;

        return $this;
    }

    /**
     * Gets allowduplicatedentries
     *
     * @return int|null
     */
    public function getAllowduplicatedentries()
    {
        return $this->container['allowduplicatedentries'];
    }

    /**
     * Sets allowduplicatedentries
     *
     * @param int|null $allowduplicatedentries If enabled, multiple entries can have the same concept name
     *
     * @return self
     */
    public function setAllowduplicatedentries($allowduplicatedentries)
    {
        if (is_null($allowduplicatedentries)) {
            throw new \InvalidArgumentException('non-nullable allowduplicatedentries cannot be null');
        }
        $this->container['allowduplicatedentries'] = $allowduplicatedentries;

        return $this;
    }

    /**
     * Gets allowprintview
     *
     * @return int|null
     */
    public function getAllowprintview()
    {
        return $this->container['allowprintview'];
    }

    /**
     * Sets allowprintview
     *
     * @param int|null $allowprintview If enabled, students are provided with a link to a printer-friendly version of the glossary. The link is always available to teachers
     *
     * @return self
     */
    public function setAllowprintview($allowprintview)
    {
        if (is_null($allowprintview)) {
            throw new \InvalidArgumentException('non-nullable allowprintview cannot be null');
        }
        $this->container['allowprintview'] = $allowprintview;

        return $this;
    }

    /**
     * Gets approvaldisplayformat
     *
     * @return string|null
     */
    public function getApprovaldisplayformat()
    {
        return $this->container['approvaldisplayformat'];
    }

    /**
     * Sets approvaldisplayformat
     *
     * @param string|null $approvaldisplayformat When approving glossary items you may wish to use a different display format
     *
     * @return self
     */
    public function setApprovaldisplayformat($approvaldisplayformat)
    {
        if (is_null($approvaldisplayformat)) {
            throw new \InvalidArgumentException('non-nullable approvaldisplayformat cannot be null');
        }
        $this->container['approvaldisplayformat'] = $approvaldisplayformat;

        return $this;
    }

    /**
     * Gets assessed
     *
     * @return int|null
     */
    public function getAssessed()
    {
        return $this->container['assessed'];
    }

    /**
     * Sets assessed
     *
     * @param int|null $assessed Aggregate type
     *
     * @return self
     */
    public function setAssessed($assessed)
    {
        if (is_null($assessed)) {
            throw new \InvalidArgumentException('non-nullable assessed cannot be null');
        }
        $this->container['assessed'] = $assessed;

        return $this;
    }

    /**
     * Gets assesstimefinish
     *
     * @return int|null
     */
    public function getAssesstimefinish()
    {
        return $this->container['assesstimefinish'];
    }

    /**
     * Sets assesstimefinish
     *
     * @param int|null $assesstimefinish Restrict rating to items created before this
     *
     * @return self
     */
    public function setAssesstimefinish($assesstimefinish)
    {
        if (is_null($assesstimefinish)) {
            throw new \InvalidArgumentException('non-nullable assesstimefinish cannot be null');
        }
        $this->container['assesstimefinish'] = $assesstimefinish;

        return $this;
    }

    /**
     * Gets assesstimestart
     *
     * @return int|null
     */
    public function getAssesstimestart()
    {
        return $this->container['assesstimestart'];
    }

    /**
     * Sets assesstimestart
     *
     * @param int|null $assesstimestart Restrict rating to items created after this
     *
     * @return self
     */
    public function setAssesstimestart($assesstimestart)
    {
        if (is_null($assesstimestart)) {
            throw new \InvalidArgumentException('non-nullable assesstimestart cannot be null');
        }
        $this->container['assesstimestart'] = $assesstimestart;

        return $this;
    }

    /**
     * Gets browsemodes
     *
     * @return object[]|null
     */
    public function getBrowsemodes()
    {
        return $this->container['browsemodes'];
    }

    /**
     * Sets browsemodes
     *
     * @param object[]|null $browsemodes browsemodes
     *
     * @return self
     */
    public function setBrowsemodes($browsemodes)
    {
        if (is_null($browsemodes)) {
            throw new \InvalidArgumentException('non-nullable browsemodes cannot be null');
        }
        $this->container['browsemodes'] = $browsemodes;

        return $this;
    }

    /**
     * Gets canaddentry
     *
     * @return int|null
     */
    public function getCanaddentry()
    {
        return $this->container['canaddentry'];
    }

    /**
     * Sets canaddentry
     *
     * @param int|null $canaddentry Whether the user can add a new entry
     *
     * @return self
     */
    public function setCanaddentry($canaddentry)
    {
        if (is_null($canaddentry)) {
            throw new \InvalidArgumentException('non-nullable canaddentry cannot be null');
        }
        $this->container['canaddentry'] = $canaddentry;

        return $this;
    }

    /**
     * Gets completionentries
     *
     * @return int|null
     */
    public function getCompletionentries()
    {
        return $this->container['completionentries'];
    }

    /**
     * Sets completionentries
     *
     * @param int|null $completionentries Number of entries to complete
     *
     * @return self
     */
    public function setCompletionentries($completionentries)
    {
        if (is_null($completionentries)) {
            throw new \InvalidArgumentException('non-nullable completionentries cannot be null');
        }
        $this->container['completionentries'] = $completionentries;

        return $this;
    }

    /**
     * Gets course
     *
     * @return int|null
     */
    public function getCourse()
    {
        return $this->container['course'];
    }

    /**
     * Sets course
     *
     * @param int|null $course Course id
     *
     * @return self
     */
    public function setCourse($course)
    {
        if (is_null($course)) {
            throw new \InvalidArgumentException('non-nullable course cannot be null');
        }
        $this->container['course'] = $course;

        return $this;
    }

    /**
     * Gets coursemodule
     *
     * @return int|null
     */
    public function getCoursemodule()
    {
        return $this->container['coursemodule'];
    }

    /**
     * Sets coursemodule
     *
     * @param int|null $coursemodule Course module id
     *
     * @return self
     */
    public function setCoursemodule($coursemodule)
    {
        if (is_null($coursemodule)) {
            throw new \InvalidArgumentException('non-nullable coursemodule cannot be null');
        }
        $this->container['coursemodule'] = $coursemodule;

        return $this;
    }

    /**
     * Gets defaultapproval
     *
     * @return int|null
     */
    public function getDefaultapproval()
    {
        return $this->container['defaultapproval'];
    }

    /**
     * Sets defaultapproval
     *
     * @param int|null $defaultapproval If set to no, entries require approving by a teacher before they are viewable by everyone.
     *
     * @return self
     */
    public function setDefaultapproval($defaultapproval)
    {
        if (is_null($defaultapproval)) {
            throw new \InvalidArgumentException('non-nullable defaultapproval cannot be null');
        }
        $this->container['defaultapproval'] = $defaultapproval;

        return $this;
    }

    /**
     * Gets displayformat
     *
     * @return string|null
     */
    public function getDisplayformat()
    {
        return $this->container['displayformat'];
    }

    /**
     * Sets displayformat
     *
     * @param string|null $displayformat Display format type
     *
     * @return self
     */
    public function setDisplayformat($displayformat)
    {
        if (is_null($displayformat)) {
            throw new \InvalidArgumentException('non-nullable displayformat cannot be null');
        }
        $this->container['displayformat'] = $displayformat;

        return $this;
    }

    /**
     * Gets editalways
     *
     * @return int|null
     */
    public function getEditalways()
    {
        return $this->container['editalways'];
    }

    /**
     * Sets editalways
     *
     * @param int|null $editalways Always allow editing
     *
     * @return self
     */
    public function setEditalways($editalways)
    {
        if (is_null($editalways)) {
            throw new \InvalidArgumentException('non-nullable editalways cannot be null');
        }
        $this->container['editalways'] = $editalways;

        return $this;
    }

    /**
     * Gets entbypage
     *
     * @return int|null
     */
    public function getEntbypage()
    {
        return $this->container['entbypage'];
    }

    /**
     * Sets entbypage
     *
     * @param int|null $entbypage Entries shown per page
     *
     * @return self
     */
    public function setEntbypage($entbypage)
    {
        if (is_null($entbypage)) {
            throw new \InvalidArgumentException('non-nullable entbypage cannot be null');
        }
        $this->container['entbypage'] = $entbypage;

        return $this;
    }

    /**
     * Gets globalglossary
     *
     * @return int|null
     */
    public function getGlobalglossary()
    {
        return $this->container['globalglossary'];
    }

    /**
     * Sets globalglossary
     *
     * @param int|null $globalglossary globalglossary
     *
     * @return self
     */
    public function setGlobalglossary($globalglossary)
    {
        if (is_null($globalglossary)) {
            throw new \InvalidArgumentException('non-nullable globalglossary cannot be null');
        }
        $this->container['globalglossary'] = $globalglossary;

        return $this;
    }

    /**
     * Gets groupingid
     *
     * @return int|null
     */
    public function getGroupingid()
    {
        return $this->container['groupingid'];
    }

    /**
     * Sets groupingid
     *
     * @param int|null $groupingid Group id
     *
     * @return self
     */
    public function setGroupingid($groupingid)
    {
        if (is_null($groupingid)) {
            throw new \InvalidArgumentException('non-nullable groupingid cannot be null');
        }
        $this->container['groupingid'] = $groupingid;

        return $this;
    }

    /**
     * Gets groupmode
     *
     * @return int|null
     */
    public function getGroupmode()
    {
        return $this->container['groupmode'];
    }

    /**
     * Sets groupmode
     *
     * @param int|null $groupmode Group mode
     *
     * @return self
     */
    public function setGroupmode($groupmode)
    {
        if (is_null($groupmode)) {
            throw new \InvalidArgumentException('non-nullable groupmode cannot be null');
        }
        $this->container['groupmode'] = $groupmode;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Activity instance id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets intro
     *
     * @return string|null
     */
    public function getIntro()
    {
        return $this->container['intro'];
    }

    /**
     * Sets intro
     *
     * @param string|null $intro Activity introduction
     *
     * @return self
     */
    public function setIntro($intro)
    {
        if (is_null($intro)) {
            throw new \InvalidArgumentException('non-nullable intro cannot be null');
        }
        $this->container['intro'] = $intro;

        return $this;
    }

    /**
     * Gets introfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null
     */
    public function getIntrofiles()
    {
        return $this->container['introfiles'];
    }

    /**
     * Sets introfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null $introfiles introfiles
     *
     * @return self
     */
    public function setIntrofiles($introfiles)
    {
        if (is_null($introfiles)) {
            throw new \InvalidArgumentException('non-nullable introfiles cannot be null');
        }
        $this->container['introfiles'] = $introfiles;

        return $this;
    }

    /**
     * Gets introformat
     *
     * @return int|null
     */
    public function getIntroformat()
    {
        return $this->container['introformat'];
    }

    /**
     * Sets introformat
     *
     * @param int|null $introformat intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setIntroformat($introformat)
    {
        if (is_null($introformat)) {
            throw new \InvalidArgumentException('non-nullable introformat cannot be null');
        }
        $this->container['introformat'] = $introformat;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang Forced activity language
     *
     * @return self
     */
    public function setLang($lang)
    {
        if (is_null($lang)) {
            throw new \InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets mainglossary
     *
     * @return int|null
     */
    public function getMainglossary()
    {
        return $this->container['mainglossary'];
    }

    /**
     * Sets mainglossary
     *
     * @param int|null $mainglossary If enabled this glossary is a main glossary.
     *
     * @return self
     */
    public function setMainglossary($mainglossary)
    {
        if (is_null($mainglossary)) {
            throw new \InvalidArgumentException('non-nullable mainglossary cannot be null');
        }
        $this->container['mainglossary'] = $mainglossary;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Activity name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets rssarticles
     *
     * @return int|null
     */
    public function getRssarticles()
    {
        return $this->container['rssarticles'];
    }

    /**
     * Sets rssarticles
     *
     * @param int|null $rssarticles This setting specifies the number of glossary entry concepts to include in the RSS feed. Between 5 and 20 generally acceptable
     *
     * @return self
     */
    public function setRssarticles($rssarticles)
    {
        if (is_null($rssarticles)) {
            throw new \InvalidArgumentException('non-nullable rssarticles cannot be null');
        }
        $this->container['rssarticles'] = $rssarticles;

        return $this;
    }

    /**
     * Gets rsstype
     *
     * @return int|null
     */
    public function getRsstype()
    {
        return $this->container['rsstype'];
    }

    /**
     * Sets rsstype
     *
     * @param int|null $rsstype To enable the RSS feed for this activity, select either concepts with author or concepts without author to be included in the feed
     *
     * @return self
     */
    public function setRsstype($rsstype)
    {
        if (is_null($rsstype)) {
            throw new \InvalidArgumentException('non-nullable rsstype cannot be null');
        }
        $this->container['rsstype'] = $rsstype;

        return $this;
    }

    /**
     * Gets scale
     *
     * @return int|null
     */
    public function getScale()
    {
        return $this->container['scale'];
    }

    /**
     * Sets scale
     *
     * @param int|null $scale Scale ID
     *
     * @return self
     */
    public function setScale($scale)
    {
        if (is_null($scale)) {
            throw new \InvalidArgumentException('non-nullable scale cannot be null');
        }
        $this->container['scale'] = $scale;

        return $this;
    }

    /**
     * Gets section
     *
     * @return int|null
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param int|null $section Course section id
     *
     * @return self
     */
    public function setSection($section)
    {
        if (is_null($section)) {
            throw new \InvalidArgumentException('non-nullable section cannot be null');
        }
        $this->container['section'] = $section;

        return $this;
    }

    /**
     * Gets showall
     *
     * @return int|null
     */
    public function getShowall()
    {
        return $this->container['showall'];
    }

    /**
     * Sets showall
     *
     * @param int|null $showall If enabled, participants can browse all entries at once
     *
     * @return self
     */
    public function setShowall($showall)
    {
        if (is_null($showall)) {
            throw new \InvalidArgumentException('non-nullable showall cannot be null');
        }
        $this->container['showall'] = $showall;

        return $this;
    }

    /**
     * Gets showalphabet
     *
     * @return int|null
     */
    public function getShowalphabet()
    {
        return $this->container['showalphabet'];
    }

    /**
     * Sets showalphabet
     *
     * @param int|null $showalphabet If enabled, participants can browse the glossary by letters of the alphabet
     *
     * @return self
     */
    public function setShowalphabet($showalphabet)
    {
        if (is_null($showalphabet)) {
            throw new \InvalidArgumentException('non-nullable showalphabet cannot be null');
        }
        $this->container['showalphabet'] = $showalphabet;

        return $this;
    }

    /**
     * Gets showspecial
     *
     * @return int|null
     */
    public function getShowspecial()
    {
        return $this->container['showspecial'];
    }

    /**
     * Sets showspecial
     *
     * @param int|null $showspecial If enabled, participants can browse the glossary by special characters, such as @ and #
     *
     * @return self
     */
    public function setShowspecial($showspecial)
    {
        if (is_null($showspecial)) {
            throw new \InvalidArgumentException('non-nullable showspecial cannot be null');
        }
        $this->container['showspecial'] = $showspecial;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return int|null
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param int|null $timecreated Time created
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified Time modified
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets usedynalink
     *
     * @return int|null
     */
    public function getUsedynalink()
    {
        return $this->container['usedynalink'];
    }

    /**
     * Sets usedynalink
     *
     * @param int|null $usedynalink If site-wide glossary auto-linking has been enabled by an administrator and this checkbox is ticked, the entry will be automatically linked wherever the concept words and phrases appear throughout the rest of the course.
     *
     * @return self
     */
    public function setUsedynalink($usedynalink)
    {
        if (is_null($usedynalink)) {
            throw new \InvalidArgumentException('non-nullable usedynalink cannot be null');
        }
        $this->container['usedynalink'] = $usedynalink;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool|null $visible Visible
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


