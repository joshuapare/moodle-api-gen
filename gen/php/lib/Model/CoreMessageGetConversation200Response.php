<?php
/**
 * CoreMessageGetConversation200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreMessageGetConversation200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreMessageGetConversation200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_message_get_conversation_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'candeletemessagesforallusers' => 'bool',
        'id' => 'int',
        'imageurl' => 'string',
        'isfavourite' => 'bool',
        'ismuted' => 'bool',
        'isread' => 'bool',
        'membercount' => 'int',
        'members' => '\OpenAPI\Client\Model\CoreMessageGetConversation200ResponseMembersInner[]',
        'messages' => '\OpenAPI\Client\Model\CoreMessageGetConversation200ResponseMessagesInner[]',
        'name' => 'string',
        'subname' => 'string',
        'type' => 'int',
        'unreadcount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'candeletemessagesforallusers' => null,
        'id' => null,
        'imageurl' => null,
        'isfavourite' => null,
        'ismuted' => null,
        'isread' => null,
        'membercount' => null,
        'members' => null,
        'messages' => null,
        'name' => null,
        'subname' => null,
        'type' => null,
        'unreadcount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'candeletemessagesforallusers' => false,
        'id' => false,
        'imageurl' => false,
        'isfavourite' => false,
        'ismuted' => false,
        'isread' => false,
        'membercount' => false,
        'members' => false,
        'messages' => false,
        'name' => false,
        'subname' => false,
        'type' => false,
        'unreadcount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'candeletemessagesforallusers' => 'candeletemessagesforallusers',
        'id' => 'id',
        'imageurl' => 'imageurl',
        'isfavourite' => 'isfavourite',
        'ismuted' => 'ismuted',
        'isread' => 'isread',
        'membercount' => 'membercount',
        'members' => 'members',
        'messages' => 'messages',
        'name' => 'name',
        'subname' => 'subname',
        'type' => 'type',
        'unreadcount' => 'unreadcount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'candeletemessagesforallusers' => 'setCandeletemessagesforallusers',
        'id' => 'setId',
        'imageurl' => 'setImageurl',
        'isfavourite' => 'setIsfavourite',
        'ismuted' => 'setIsmuted',
        'isread' => 'setIsread',
        'membercount' => 'setMembercount',
        'members' => 'setMembers',
        'messages' => 'setMessages',
        'name' => 'setName',
        'subname' => 'setSubname',
        'type' => 'setType',
        'unreadcount' => 'setUnreadcount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'candeletemessagesforallusers' => 'getCandeletemessagesforallusers',
        'id' => 'getId',
        'imageurl' => 'getImageurl',
        'isfavourite' => 'getIsfavourite',
        'ismuted' => 'getIsmuted',
        'isread' => 'getIsread',
        'membercount' => 'getMembercount',
        'members' => 'getMembers',
        'messages' => 'getMessages',
        'name' => 'getName',
        'subname' => 'getSubname',
        'type' => 'getType',
        'unreadcount' => 'getUnreadcount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('candeletemessagesforallusers', $data ?? [], false);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('imageurl', $data ?? [], 'null');
        $this->setIfExists('isfavourite', $data ?? [], null);
        $this->setIfExists('ismuted', $data ?? [], null);
        $this->setIfExists('isread', $data ?? [], null);
        $this->setIfExists('membercount', $data ?? [], null);
        $this->setIfExists('members', $data ?? [], null);
        $this->setIfExists('messages', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], 'null');
        $this->setIfExists('subname', $data ?? [], 'null');
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('unreadcount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['isfavourite'] === null) {
            $invalidProperties[] = "'isfavourite' can't be null";
        }
        if ($this->container['ismuted'] === null) {
            $invalidProperties[] = "'ismuted' can't be null";
        }
        if ($this->container['isread'] === null) {
            $invalidProperties[] = "'isread' can't be null";
        }
        if ($this->container['membercount'] === null) {
            $invalidProperties[] = "'membercount' can't be null";
        }
        if ($this->container['members'] === null) {
            $invalidProperties[] = "'members' can't be null";
        }
        if ($this->container['messages'] === null) {
            $invalidProperties[] = "'messages' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets candeletemessagesforallusers
     *
     * @return bool|null
     */
    public function getCandeletemessagesforallusers()
    {
        return $this->container['candeletemessagesforallusers'];
    }

    /**
     * Sets candeletemessagesforallusers
     *
     * @param bool|null $candeletemessagesforallusers If the user can delete messages in the conversation for all users
     *
     * @return self
     */
    public function setCandeletemessagesforallusers($candeletemessagesforallusers)
    {
        if (is_null($candeletemessagesforallusers)) {
            throw new \InvalidArgumentException('non-nullable candeletemessagesforallusers cannot be null');
        }
        $this->container['candeletemessagesforallusers'] = $candeletemessagesforallusers;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The conversation id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets imageurl
     *
     * @return string|null
     */
    public function getImageurl()
    {
        return $this->container['imageurl'];
    }

    /**
     * Sets imageurl
     *
     * @param string|null $imageurl A link to the conversation picture, if set
     *
     * @return self
     */
    public function setImageurl($imageurl)
    {
        if (is_null($imageurl)) {
            throw new \InvalidArgumentException('non-nullable imageurl cannot be null');
        }
        $this->container['imageurl'] = $imageurl;

        return $this;
    }

    /**
     * Gets isfavourite
     *
     * @return bool
     */
    public function getIsfavourite()
    {
        return $this->container['isfavourite'];
    }

    /**
     * Sets isfavourite
     *
     * @param bool $isfavourite If the user marked this conversation as a favourite
     *
     * @return self
     */
    public function setIsfavourite($isfavourite)
    {
        if (is_null($isfavourite)) {
            throw new \InvalidArgumentException('non-nullable isfavourite cannot be null');
        }
        $this->container['isfavourite'] = $isfavourite;

        return $this;
    }

    /**
     * Gets ismuted
     *
     * @return bool
     */
    public function getIsmuted()
    {
        return $this->container['ismuted'];
    }

    /**
     * Sets ismuted
     *
     * @param bool $ismuted If the user muted this conversation
     *
     * @return self
     */
    public function setIsmuted($ismuted)
    {
        if (is_null($ismuted)) {
            throw new \InvalidArgumentException('non-nullable ismuted cannot be null');
        }
        $this->container['ismuted'] = $ismuted;

        return $this;
    }

    /**
     * Gets isread
     *
     * @return bool
     */
    public function getIsread()
    {
        return $this->container['isread'];
    }

    /**
     * Sets isread
     *
     * @param bool $isread If the user has read all messages in the conversation
     *
     * @return self
     */
    public function setIsread($isread)
    {
        if (is_null($isread)) {
            throw new \InvalidArgumentException('non-nullable isread cannot be null');
        }
        $this->container['isread'] = $isread;

        return $this;
    }

    /**
     * Gets membercount
     *
     * @return int
     */
    public function getMembercount()
    {
        return $this->container['membercount'];
    }

    /**
     * Sets membercount
     *
     * @param int $membercount Total number of conversation members
     *
     * @return self
     */
    public function setMembercount($membercount)
    {
        if (is_null($membercount)) {
            throw new \InvalidArgumentException('non-nullable membercount cannot be null');
        }
        $this->container['membercount'] = $membercount;

        return $this;
    }

    /**
     * Gets members
     *
     * @return \OpenAPI\Client\Model\CoreMessageGetConversation200ResponseMembersInner[]
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param \OpenAPI\Client\Model\CoreMessageGetConversation200ResponseMembersInner[] $members members
     *
     * @return self
     */
    public function setMembers($members)
    {
        if (is_null($members)) {
            throw new \InvalidArgumentException('non-nullable members cannot be null');
        }
        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return \OpenAPI\Client\Model\CoreMessageGetConversation200ResponseMessagesInner[]
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \OpenAPI\Client\Model\CoreMessageGetConversation200ResponseMessagesInner[] $messages messages
     *
     * @return self
     */
    public function setMessages($messages)
    {
        if (is_null($messages)) {
            throw new \InvalidArgumentException('non-nullable messages cannot be null');
        }
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The conversation name, if set
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets subname
     *
     * @return string|null
     */
    public function getSubname()
    {
        return $this->container['subname'];
    }

    /**
     * Sets subname
     *
     * @param string|null $subname A subtitle for the conversation name, if set
     *
     * @return self
     */
    public function setSubname($subname)
    {
        if (is_null($subname)) {
            throw new \InvalidArgumentException('non-nullable subname cannot be null');
        }
        $this->container['subname'] = $subname;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type The type of the conversation (1=individual,2=group,3=self)
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets unreadcount
     *
     * @return int|null
     */
    public function getUnreadcount()
    {
        return $this->container['unreadcount'];
    }

    /**
     * Sets unreadcount
     *
     * @param int|null $unreadcount The number of unread messages in this conversation
     *
     * @return self
     */
    public function setUnreadcount($unreadcount)
    {
        if (is_null($unreadcount)) {
            throw new \InvalidArgumentException('non-nullable unreadcount cannot be null');
        }
        $this->container['unreadcount'] = $unreadcount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


