<?php
/**
 * ToolLpDataForTemplateCompetenciesPage200ResponseStatistics
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ToolLpDataForTemplateCompetenciesPage200ResponseStatistics Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ToolLpDataForTemplateCompetenciesPage200ResponseStatistics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tool_lp_data_for_template_competencies_page_200_response_statistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'competencycount' => 'int',
        'completedplancount' => 'int',
        'completedplanpercentage' => 'float',
        'completedplanpercentageformatted' => 'string',
        'leastproficient' => '\OpenAPI\Client\Model\CoreCompetencyReadUserEvidence200ResponseCompetenciesInner[]',
        'leastproficientcount' => 'int',
        'linkedcompetencycount' => 'int',
        'linkedcompetencypercentage' => 'float',
        'linkedcompetencypercentageformatted' => 'string',
        'plancount' => 'int',
        'proficientusercompetencyplancount' => 'int',
        'proficientusercompetencyplanpercentage' => 'float',
        'proficientusercompetencyplanpercentageformatted' => 'string',
        'unlinkedcompetencycount' => 'int',
        'usercompetencyplancount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'competencycount' => null,
        'completedplancount' => null,
        'completedplanpercentage' => null,
        'completedplanpercentageformatted' => null,
        'leastproficient' => null,
        'leastproficientcount' => null,
        'linkedcompetencycount' => null,
        'linkedcompetencypercentage' => null,
        'linkedcompetencypercentageformatted' => null,
        'plancount' => null,
        'proficientusercompetencyplancount' => null,
        'proficientusercompetencyplanpercentage' => null,
        'proficientusercompetencyplanpercentageformatted' => null,
        'unlinkedcompetencycount' => null,
        'usercompetencyplancount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'competencycount' => false,
        'completedplancount' => false,
        'completedplanpercentage' => false,
        'completedplanpercentageformatted' => false,
        'leastproficient' => false,
        'leastproficientcount' => false,
        'linkedcompetencycount' => false,
        'linkedcompetencypercentage' => false,
        'linkedcompetencypercentageformatted' => false,
        'plancount' => false,
        'proficientusercompetencyplancount' => false,
        'proficientusercompetencyplanpercentage' => false,
        'proficientusercompetencyplanpercentageformatted' => false,
        'unlinkedcompetencycount' => false,
        'usercompetencyplancount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'competencycount' => 'competencycount',
        'completedplancount' => 'completedplancount',
        'completedplanpercentage' => 'completedplanpercentage',
        'completedplanpercentageformatted' => 'completedplanpercentageformatted',
        'leastproficient' => 'leastproficient',
        'leastproficientcount' => 'leastproficientcount',
        'linkedcompetencycount' => 'linkedcompetencycount',
        'linkedcompetencypercentage' => 'linkedcompetencypercentage',
        'linkedcompetencypercentageformatted' => 'linkedcompetencypercentageformatted',
        'plancount' => 'plancount',
        'proficientusercompetencyplancount' => 'proficientusercompetencyplancount',
        'proficientusercompetencyplanpercentage' => 'proficientusercompetencyplanpercentage',
        'proficientusercompetencyplanpercentageformatted' => 'proficientusercompetencyplanpercentageformatted',
        'unlinkedcompetencycount' => 'unlinkedcompetencycount',
        'usercompetencyplancount' => 'usercompetencyplancount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'competencycount' => 'setCompetencycount',
        'completedplancount' => 'setCompletedplancount',
        'completedplanpercentage' => 'setCompletedplanpercentage',
        'completedplanpercentageformatted' => 'setCompletedplanpercentageformatted',
        'leastproficient' => 'setLeastproficient',
        'leastproficientcount' => 'setLeastproficientcount',
        'linkedcompetencycount' => 'setLinkedcompetencycount',
        'linkedcompetencypercentage' => 'setLinkedcompetencypercentage',
        'linkedcompetencypercentageformatted' => 'setLinkedcompetencypercentageformatted',
        'plancount' => 'setPlancount',
        'proficientusercompetencyplancount' => 'setProficientusercompetencyplancount',
        'proficientusercompetencyplanpercentage' => 'setProficientusercompetencyplanpercentage',
        'proficientusercompetencyplanpercentageformatted' => 'setProficientusercompetencyplanpercentageformatted',
        'unlinkedcompetencycount' => 'setUnlinkedcompetencycount',
        'usercompetencyplancount' => 'setUsercompetencyplancount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'competencycount' => 'getCompetencycount',
        'completedplancount' => 'getCompletedplancount',
        'completedplanpercentage' => 'getCompletedplanpercentage',
        'completedplanpercentageformatted' => 'getCompletedplanpercentageformatted',
        'leastproficient' => 'getLeastproficient',
        'leastproficientcount' => 'getLeastproficientcount',
        'linkedcompetencycount' => 'getLinkedcompetencycount',
        'linkedcompetencypercentage' => 'getLinkedcompetencypercentage',
        'linkedcompetencypercentageformatted' => 'getLinkedcompetencypercentageformatted',
        'plancount' => 'getPlancount',
        'proficientusercompetencyplancount' => 'getProficientusercompetencyplancount',
        'proficientusercompetencyplanpercentage' => 'getProficientusercompetencyplanpercentage',
        'proficientusercompetencyplanpercentageformatted' => 'getProficientusercompetencyplanpercentageformatted',
        'unlinkedcompetencycount' => 'getUnlinkedcompetencycount',
        'usercompetencyplancount' => 'getUsercompetencyplancount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('competencycount', $data ?? [], null);
        $this->setIfExists('completedplancount', $data ?? [], null);
        $this->setIfExists('completedplanpercentage', $data ?? [], null);
        $this->setIfExists('completedplanpercentageformatted', $data ?? [], 'null');
        $this->setIfExists('leastproficient', $data ?? [], null);
        $this->setIfExists('leastproficientcount', $data ?? [], null);
        $this->setIfExists('linkedcompetencycount', $data ?? [], null);
        $this->setIfExists('linkedcompetencypercentage', $data ?? [], null);
        $this->setIfExists('linkedcompetencypercentageformatted', $data ?? [], 'null');
        $this->setIfExists('plancount', $data ?? [], null);
        $this->setIfExists('proficientusercompetencyplancount', $data ?? [], null);
        $this->setIfExists('proficientusercompetencyplanpercentage', $data ?? [], null);
        $this->setIfExists('proficientusercompetencyplanpercentageformatted', $data ?? [], 'null');
        $this->setIfExists('unlinkedcompetencycount', $data ?? [], null);
        $this->setIfExists('usercompetencyplancount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['competencycount'] === null) {
            $invalidProperties[] = "'competencycount' can't be null";
        }
        if ($this->container['completedplancount'] === null) {
            $invalidProperties[] = "'completedplancount' can't be null";
        }
        if ($this->container['completedplanpercentage'] === null) {
            $invalidProperties[] = "'completedplanpercentage' can't be null";
        }
        if ($this->container['completedplanpercentageformatted'] === null) {
            $invalidProperties[] = "'completedplanpercentageformatted' can't be null";
        }
        if ($this->container['leastproficient'] === null) {
            $invalidProperties[] = "'leastproficient' can't be null";
        }
        if ($this->container['leastproficientcount'] === null) {
            $invalidProperties[] = "'leastproficientcount' can't be null";
        }
        if ($this->container['linkedcompetencycount'] === null) {
            $invalidProperties[] = "'linkedcompetencycount' can't be null";
        }
        if ($this->container['linkedcompetencypercentage'] === null) {
            $invalidProperties[] = "'linkedcompetencypercentage' can't be null";
        }
        if ($this->container['linkedcompetencypercentageformatted'] === null) {
            $invalidProperties[] = "'linkedcompetencypercentageformatted' can't be null";
        }
        if ($this->container['plancount'] === null) {
            $invalidProperties[] = "'plancount' can't be null";
        }
        if ($this->container['proficientusercompetencyplancount'] === null) {
            $invalidProperties[] = "'proficientusercompetencyplancount' can't be null";
        }
        if ($this->container['proficientusercompetencyplanpercentage'] === null) {
            $invalidProperties[] = "'proficientusercompetencyplanpercentage' can't be null";
        }
        if ($this->container['proficientusercompetencyplanpercentageformatted'] === null) {
            $invalidProperties[] = "'proficientusercompetencyplanpercentageformatted' can't be null";
        }
        if ($this->container['unlinkedcompetencycount'] === null) {
            $invalidProperties[] = "'unlinkedcompetencycount' can't be null";
        }
        if ($this->container['usercompetencyplancount'] === null) {
            $invalidProperties[] = "'usercompetencyplancount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets competencycount
     *
     * @return int
     */
    public function getCompetencycount()
    {
        return $this->container['competencycount'];
    }

    /**
     * Sets competencycount
     *
     * @param int $competencycount competencycount
     *
     * @return self
     */
    public function setCompetencycount($competencycount)
    {
        if (is_null($competencycount)) {
            throw new \InvalidArgumentException('non-nullable competencycount cannot be null');
        }
        $this->container['competencycount'] = $competencycount;

        return $this;
    }

    /**
     * Gets completedplancount
     *
     * @return int
     */
    public function getCompletedplancount()
    {
        return $this->container['completedplancount'];
    }

    /**
     * Sets completedplancount
     *
     * @param int $completedplancount completedplancount
     *
     * @return self
     */
    public function setCompletedplancount($completedplancount)
    {
        if (is_null($completedplancount)) {
            throw new \InvalidArgumentException('non-nullable completedplancount cannot be null');
        }
        $this->container['completedplancount'] = $completedplancount;

        return $this;
    }

    /**
     * Gets completedplanpercentage
     *
     * @return float
     */
    public function getCompletedplanpercentage()
    {
        return $this->container['completedplanpercentage'];
    }

    /**
     * Sets completedplanpercentage
     *
     * @param float $completedplanpercentage completedplanpercentage
     *
     * @return self
     */
    public function setCompletedplanpercentage($completedplanpercentage)
    {
        if (is_null($completedplanpercentage)) {
            throw new \InvalidArgumentException('non-nullable completedplanpercentage cannot be null');
        }
        $this->container['completedplanpercentage'] = $completedplanpercentage;

        return $this;
    }

    /**
     * Gets completedplanpercentageformatted
     *
     * @return string
     */
    public function getCompletedplanpercentageformatted()
    {
        return $this->container['completedplanpercentageformatted'];
    }

    /**
     * Sets completedplanpercentageformatted
     *
     * @param string $completedplanpercentageformatted completedplanpercentageformatted
     *
     * @return self
     */
    public function setCompletedplanpercentageformatted($completedplanpercentageformatted)
    {
        if (is_null($completedplanpercentageformatted)) {
            throw new \InvalidArgumentException('non-nullable completedplanpercentageformatted cannot be null');
        }
        $this->container['completedplanpercentageformatted'] = $completedplanpercentageformatted;

        return $this;
    }

    /**
     * Gets leastproficient
     *
     * @return \OpenAPI\Client\Model\CoreCompetencyReadUserEvidence200ResponseCompetenciesInner[]
     */
    public function getLeastproficient()
    {
        return $this->container['leastproficient'];
    }

    /**
     * Sets leastproficient
     *
     * @param \OpenAPI\Client\Model\CoreCompetencyReadUserEvidence200ResponseCompetenciesInner[] $leastproficient leastproficient
     *
     * @return self
     */
    public function setLeastproficient($leastproficient)
    {
        if (is_null($leastproficient)) {
            throw new \InvalidArgumentException('non-nullable leastproficient cannot be null');
        }
        $this->container['leastproficient'] = $leastproficient;

        return $this;
    }

    /**
     * Gets leastproficientcount
     *
     * @return int
     */
    public function getLeastproficientcount()
    {
        return $this->container['leastproficientcount'];
    }

    /**
     * Sets leastproficientcount
     *
     * @param int $leastproficientcount leastproficientcount
     *
     * @return self
     */
    public function setLeastproficientcount($leastproficientcount)
    {
        if (is_null($leastproficientcount)) {
            throw new \InvalidArgumentException('non-nullable leastproficientcount cannot be null');
        }
        $this->container['leastproficientcount'] = $leastproficientcount;

        return $this;
    }

    /**
     * Gets linkedcompetencycount
     *
     * @return int
     */
    public function getLinkedcompetencycount()
    {
        return $this->container['linkedcompetencycount'];
    }

    /**
     * Sets linkedcompetencycount
     *
     * @param int $linkedcompetencycount linkedcompetencycount
     *
     * @return self
     */
    public function setLinkedcompetencycount($linkedcompetencycount)
    {
        if (is_null($linkedcompetencycount)) {
            throw new \InvalidArgumentException('non-nullable linkedcompetencycount cannot be null');
        }
        $this->container['linkedcompetencycount'] = $linkedcompetencycount;

        return $this;
    }

    /**
     * Gets linkedcompetencypercentage
     *
     * @return float
     */
    public function getLinkedcompetencypercentage()
    {
        return $this->container['linkedcompetencypercentage'];
    }

    /**
     * Sets linkedcompetencypercentage
     *
     * @param float $linkedcompetencypercentage linkedcompetencypercentage
     *
     * @return self
     */
    public function setLinkedcompetencypercentage($linkedcompetencypercentage)
    {
        if (is_null($linkedcompetencypercentage)) {
            throw new \InvalidArgumentException('non-nullable linkedcompetencypercentage cannot be null');
        }
        $this->container['linkedcompetencypercentage'] = $linkedcompetencypercentage;

        return $this;
    }

    /**
     * Gets linkedcompetencypercentageformatted
     *
     * @return string
     */
    public function getLinkedcompetencypercentageformatted()
    {
        return $this->container['linkedcompetencypercentageformatted'];
    }

    /**
     * Sets linkedcompetencypercentageformatted
     *
     * @param string $linkedcompetencypercentageformatted linkedcompetencypercentageformatted
     *
     * @return self
     */
    public function setLinkedcompetencypercentageformatted($linkedcompetencypercentageformatted)
    {
        if (is_null($linkedcompetencypercentageformatted)) {
            throw new \InvalidArgumentException('non-nullable linkedcompetencypercentageformatted cannot be null');
        }
        $this->container['linkedcompetencypercentageformatted'] = $linkedcompetencypercentageformatted;

        return $this;
    }

    /**
     * Gets plancount
     *
     * @return int
     */
    public function getPlancount()
    {
        return $this->container['plancount'];
    }

    /**
     * Sets plancount
     *
     * @param int $plancount plancount
     *
     * @return self
     */
    public function setPlancount($plancount)
    {
        if (is_null($plancount)) {
            throw new \InvalidArgumentException('non-nullable plancount cannot be null');
        }
        $this->container['plancount'] = $plancount;

        return $this;
    }

    /**
     * Gets proficientusercompetencyplancount
     *
     * @return int
     */
    public function getProficientusercompetencyplancount()
    {
        return $this->container['proficientusercompetencyplancount'];
    }

    /**
     * Sets proficientusercompetencyplancount
     *
     * @param int $proficientusercompetencyplancount proficientusercompetencyplancount
     *
     * @return self
     */
    public function setProficientusercompetencyplancount($proficientusercompetencyplancount)
    {
        if (is_null($proficientusercompetencyplancount)) {
            throw new \InvalidArgumentException('non-nullable proficientusercompetencyplancount cannot be null');
        }
        $this->container['proficientusercompetencyplancount'] = $proficientusercompetencyplancount;

        return $this;
    }

    /**
     * Gets proficientusercompetencyplanpercentage
     *
     * @return float
     */
    public function getProficientusercompetencyplanpercentage()
    {
        return $this->container['proficientusercompetencyplanpercentage'];
    }

    /**
     * Sets proficientusercompetencyplanpercentage
     *
     * @param float $proficientusercompetencyplanpercentage proficientusercompetencyplanpercentage
     *
     * @return self
     */
    public function setProficientusercompetencyplanpercentage($proficientusercompetencyplanpercentage)
    {
        if (is_null($proficientusercompetencyplanpercentage)) {
            throw new \InvalidArgumentException('non-nullable proficientusercompetencyplanpercentage cannot be null');
        }
        $this->container['proficientusercompetencyplanpercentage'] = $proficientusercompetencyplanpercentage;

        return $this;
    }

    /**
     * Gets proficientusercompetencyplanpercentageformatted
     *
     * @return string
     */
    public function getProficientusercompetencyplanpercentageformatted()
    {
        return $this->container['proficientusercompetencyplanpercentageformatted'];
    }

    /**
     * Sets proficientusercompetencyplanpercentageformatted
     *
     * @param string $proficientusercompetencyplanpercentageformatted proficientusercompetencyplanpercentageformatted
     *
     * @return self
     */
    public function setProficientusercompetencyplanpercentageformatted($proficientusercompetencyplanpercentageformatted)
    {
        if (is_null($proficientusercompetencyplanpercentageformatted)) {
            throw new \InvalidArgumentException('non-nullable proficientusercompetencyplanpercentageformatted cannot be null');
        }
        $this->container['proficientusercompetencyplanpercentageformatted'] = $proficientusercompetencyplanpercentageformatted;

        return $this;
    }

    /**
     * Gets unlinkedcompetencycount
     *
     * @return int
     */
    public function getUnlinkedcompetencycount()
    {
        return $this->container['unlinkedcompetencycount'];
    }

    /**
     * Sets unlinkedcompetencycount
     *
     * @param int $unlinkedcompetencycount unlinkedcompetencycount
     *
     * @return self
     */
    public function setUnlinkedcompetencycount($unlinkedcompetencycount)
    {
        if (is_null($unlinkedcompetencycount)) {
            throw new \InvalidArgumentException('non-nullable unlinkedcompetencycount cannot be null');
        }
        $this->container['unlinkedcompetencycount'] = $unlinkedcompetencycount;

        return $this;
    }

    /**
     * Gets usercompetencyplancount
     *
     * @return int
     */
    public function getUsercompetencyplancount()
    {
        return $this->container['usercompetencyplancount'];
    }

    /**
     * Sets usercompetencyplancount
     *
     * @param int $usercompetencyplancount usercompetencyplancount
     *
     * @return self
     */
    public function setUsercompetencyplancount($usercompetencyplancount)
    {
        if (is_null($usercompetencyplancount)) {
            throw new \InvalidArgumentException('non-nullable usercompetencyplancount cannot be null');
        }
        $this->container['usercompetencyplancount'] = $usercompetencyplancount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


