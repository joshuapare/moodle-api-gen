<?php
/**
 * CoreUpdateInplaceEditable200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreUpdateInplaceEditable200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreUpdateInplaceEditable200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_update_inplace_editable_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'component' => 'string',
        'displayvalue' => 'string',
        'edithint' => 'string',
        'editicon' => '\OpenAPI\Client\Model\CoreUpdateInplaceEditable200ResponseEditicon',
        'editlabel' => 'string',
        'itemid' => 'string',
        'itemtype' => 'string',
        'linkeverything' => 'int',
        'options' => 'string',
        'type' => 'string',
        'value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'component' => null,
        'displayvalue' => null,
        'edithint' => null,
        'editicon' => null,
        'editlabel' => null,
        'itemid' => null,
        'itemtype' => null,
        'linkeverything' => null,
        'options' => null,
        'type' => null,
        'value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'component' => false,
        'displayvalue' => false,
        'edithint' => false,
        'editicon' => false,
        'editlabel' => false,
        'itemid' => false,
        'itemtype' => false,
        'linkeverything' => false,
        'options' => false,
        'type' => false,
        'value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'component' => 'component',
        'displayvalue' => 'displayvalue',
        'edithint' => 'edithint',
        'editicon' => 'editicon',
        'editlabel' => 'editlabel',
        'itemid' => 'itemid',
        'itemtype' => 'itemtype',
        'linkeverything' => 'linkeverything',
        'options' => 'options',
        'type' => 'type',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'component' => 'setComponent',
        'displayvalue' => 'setDisplayvalue',
        'edithint' => 'setEdithint',
        'editicon' => 'setEditicon',
        'editlabel' => 'setEditlabel',
        'itemid' => 'setItemid',
        'itemtype' => 'setItemtype',
        'linkeverything' => 'setLinkeverything',
        'options' => 'setOptions',
        'type' => 'setType',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'component' => 'getComponent',
        'displayvalue' => 'getDisplayvalue',
        'edithint' => 'getEdithint',
        'editicon' => 'getEditicon',
        'editlabel' => 'getEditlabel',
        'itemid' => 'getItemid',
        'itemtype' => 'getItemtype',
        'linkeverything' => 'getLinkeverything',
        'options' => 'getOptions',
        'type' => 'getType',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('component', $data ?? [], null);
        $this->setIfExists('displayvalue', $data ?? [], 'null');
        $this->setIfExists('edithint', $data ?? [], 'null');
        $this->setIfExists('editicon', $data ?? [], null);
        $this->setIfExists('editlabel', $data ?? [], 'null');
        $this->setIfExists('itemid', $data ?? [], null);
        $this->setIfExists('itemtype', $data ?? [], null);
        $this->setIfExists('linkeverything', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], 'null');
        $this->setIfExists('type', $data ?? [], 'null');
        $this->setIfExists('value', $data ?? [], 'null');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['displayvalue'] === null) {
            $invalidProperties[] = "'displayvalue' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets component
     *
     * @return string|null
     */
    public function getComponent()
    {
        return $this->container['component'];
    }

    /**
     * Sets component
     *
     * @param string|null $component component responsible for the update
     *
     * @return self
     */
    public function setComponent($component)
    {
        if (is_null($component)) {
            throw new \InvalidArgumentException('non-nullable component cannot be null');
        }
        $this->container['component'] = $component;

        return $this;
    }

    /**
     * Gets displayvalue
     *
     * @return string
     */
    public function getDisplayvalue()
    {
        return $this->container['displayvalue'];
    }

    /**
     * Sets displayvalue
     *
     * @param string $displayvalue display value (may contain link or other html tags)
     *
     * @return self
     */
    public function setDisplayvalue($displayvalue)
    {
        if (is_null($displayvalue)) {
            throw new \InvalidArgumentException('non-nullable displayvalue cannot be null');
        }
        $this->container['displayvalue'] = $displayvalue;

        return $this;
    }

    /**
     * Gets edithint
     *
     * @return string|null
     */
    public function getEdithint()
    {
        return $this->container['edithint'];
    }

    /**
     * Sets edithint
     *
     * @param string|null $edithint hint for editing element
     *
     * @return self
     */
    public function setEdithint($edithint)
    {
        if (is_null($edithint)) {
            throw new \InvalidArgumentException('non-nullable edithint cannot be null');
        }
        $this->container['edithint'] = $edithint;

        return $this;
    }

    /**
     * Gets editicon
     *
     * @return \OpenAPI\Client\Model\CoreUpdateInplaceEditable200ResponseEditicon|null
     */
    public function getEditicon()
    {
        return $this->container['editicon'];
    }

    /**
     * Sets editicon
     *
     * @param \OpenAPI\Client\Model\CoreUpdateInplaceEditable200ResponseEditicon|null $editicon editicon
     *
     * @return self
     */
    public function setEditicon($editicon)
    {
        if (is_null($editicon)) {
            throw new \InvalidArgumentException('non-nullable editicon cannot be null');
        }
        $this->container['editicon'] = $editicon;

        return $this;
    }

    /**
     * Gets editlabel
     *
     * @return string|null
     */
    public function getEditlabel()
    {
        return $this->container['editlabel'];
    }

    /**
     * Sets editlabel
     *
     * @param string|null $editlabel label for editing element
     *
     * @return self
     */
    public function setEditlabel($editlabel)
    {
        if (is_null($editlabel)) {
            throw new \InvalidArgumentException('non-nullable editlabel cannot be null');
        }
        $this->container['editlabel'] = $editlabel;

        return $this;
    }

    /**
     * Gets itemid
     *
     * @return string|null
     */
    public function getItemid()
    {
        return $this->container['itemid'];
    }

    /**
     * Sets itemid
     *
     * @param string|null $itemid identifier of the updated item
     *
     * @return self
     */
    public function setItemid($itemid)
    {
        if (is_null($itemid)) {
            throw new \InvalidArgumentException('non-nullable itemid cannot be null');
        }
        $this->container['itemid'] = $itemid;

        return $this;
    }

    /**
     * Gets itemtype
     *
     * @return string|null
     */
    public function getItemtype()
    {
        return $this->container['itemtype'];
    }

    /**
     * Sets itemtype
     *
     * @param string|null $itemtype itemtype
     *
     * @return self
     */
    public function setItemtype($itemtype)
    {
        if (is_null($itemtype)) {
            throw new \InvalidArgumentException('non-nullable itemtype cannot be null');
        }
        $this->container['itemtype'] = $itemtype;

        return $this;
    }

    /**
     * Gets linkeverything
     *
     * @return int|null
     */
    public function getLinkeverything()
    {
        return $this->container['linkeverything'];
    }

    /**
     * Sets linkeverything
     *
     * @param int|null $linkeverything Should everything be wrapped in the edit link or link displayed separately
     *
     * @return self
     */
    public function setLinkeverything($linkeverything)
    {
        if (is_null($linkeverything)) {
            throw new \InvalidArgumentException('non-nullable linkeverything cannot be null');
        }
        $this->container['linkeverything'] = $linkeverything;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string|null $options options of the element, format depends on type
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type of the element (text, toggle, select)
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value value of the item as it is stored
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


