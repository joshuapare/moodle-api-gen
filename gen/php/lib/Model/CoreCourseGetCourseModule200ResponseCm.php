<?php
/**
 * CoreCourseGetCourseModule200ResponseCm
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreCourseGetCourseModule200ResponseCm Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreCourseGetCourseModule200ResponseCm implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_course_get_course_module_200_response_cm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'added' => 'int',
        'advancedgrading' => '\OpenAPI\Client\Model\CoreCourseGetCourseModule200ResponseCmAdvancedgradingInner[]',
        'availability' => 'string',
        'completion' => 'int',
        'completionexpected' => 'int',
        'completiongradeitemnumber' => 'int',
        'completionpassgrade' => 'int',
        'completionview' => 'int',
        'course' => 'int',
        'downloadcontent' => 'int',
        'grade' => 'float',
        'gradecat' => 'int',
        'gradepass' => 'string',
        'groupingid' => 'int',
        'groupmode' => 'int',
        'id' => 'int',
        'idnumber' => 'string',
        'indent' => 'int',
        'instance' => 'int',
        'modname' => 'string',
        'module' => 'int',
        'name' => 'string',
        'outcomes' => '\OpenAPI\Client\Model\CoreCourseGetCourseModule200ResponseCmOutcomesInner[]',
        'scale' => 'string',
        'score' => 'int',
        'section' => 'int',
        'sectionnum' => 'int',
        'showdescription' => 'int',
        'visible' => 'int',
        'visibleold' => 'int',
        'visibleoncoursepage' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'added' => null,
        'advancedgrading' => null,
        'availability' => null,
        'completion' => null,
        'completionexpected' => null,
        'completiongradeitemnumber' => null,
        'completionpassgrade' => null,
        'completionview' => null,
        'course' => null,
        'downloadcontent' => null,
        'grade' => null,
        'gradecat' => null,
        'gradepass' => null,
        'groupingid' => null,
        'groupmode' => null,
        'id' => null,
        'idnumber' => null,
        'indent' => null,
        'instance' => null,
        'modname' => null,
        'module' => null,
        'name' => null,
        'outcomes' => null,
        'scale' => null,
        'score' => null,
        'section' => null,
        'sectionnum' => null,
        'showdescription' => null,
        'visible' => null,
        'visibleold' => null,
        'visibleoncoursepage' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'added' => false,
        'advancedgrading' => false,
        'availability' => false,
        'completion' => false,
        'completionexpected' => false,
        'completiongradeitemnumber' => false,
        'completionpassgrade' => false,
        'completionview' => false,
        'course' => false,
        'downloadcontent' => false,
        'grade' => false,
        'gradecat' => false,
        'gradepass' => false,
        'groupingid' => false,
        'groupmode' => false,
        'id' => false,
        'idnumber' => false,
        'indent' => false,
        'instance' => false,
        'modname' => false,
        'module' => false,
        'name' => false,
        'outcomes' => false,
        'scale' => false,
        'score' => false,
        'section' => false,
        'sectionnum' => false,
        'showdescription' => false,
        'visible' => false,
        'visibleold' => false,
        'visibleoncoursepage' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'added' => 'added',
        'advancedgrading' => 'advancedgrading',
        'availability' => 'availability',
        'completion' => 'completion',
        'completionexpected' => 'completionexpected',
        'completiongradeitemnumber' => 'completiongradeitemnumber',
        'completionpassgrade' => 'completionpassgrade',
        'completionview' => 'completionview',
        'course' => 'course',
        'downloadcontent' => 'downloadcontent',
        'grade' => 'grade',
        'gradecat' => 'gradecat',
        'gradepass' => 'gradepass',
        'groupingid' => 'groupingid',
        'groupmode' => 'groupmode',
        'id' => 'id',
        'idnumber' => 'idnumber',
        'indent' => 'indent',
        'instance' => 'instance',
        'modname' => 'modname',
        'module' => 'module',
        'name' => 'name',
        'outcomes' => 'outcomes',
        'scale' => 'scale',
        'score' => 'score',
        'section' => 'section',
        'sectionnum' => 'sectionnum',
        'showdescription' => 'showdescription',
        'visible' => 'visible',
        'visibleold' => 'visibleold',
        'visibleoncoursepage' => 'visibleoncoursepage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'added' => 'setAdded',
        'advancedgrading' => 'setAdvancedgrading',
        'availability' => 'setAvailability',
        'completion' => 'setCompletion',
        'completionexpected' => 'setCompletionexpected',
        'completiongradeitemnumber' => 'setCompletiongradeitemnumber',
        'completionpassgrade' => 'setCompletionpassgrade',
        'completionview' => 'setCompletionview',
        'course' => 'setCourse',
        'downloadcontent' => 'setDownloadcontent',
        'grade' => 'setGrade',
        'gradecat' => 'setGradecat',
        'gradepass' => 'setGradepass',
        'groupingid' => 'setGroupingid',
        'groupmode' => 'setGroupmode',
        'id' => 'setId',
        'idnumber' => 'setIdnumber',
        'indent' => 'setIndent',
        'instance' => 'setInstance',
        'modname' => 'setModname',
        'module' => 'setModule',
        'name' => 'setName',
        'outcomes' => 'setOutcomes',
        'scale' => 'setScale',
        'score' => 'setScore',
        'section' => 'setSection',
        'sectionnum' => 'setSectionnum',
        'showdescription' => 'setShowdescription',
        'visible' => 'setVisible',
        'visibleold' => 'setVisibleold',
        'visibleoncoursepage' => 'setVisibleoncoursepage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'added' => 'getAdded',
        'advancedgrading' => 'getAdvancedgrading',
        'availability' => 'getAvailability',
        'completion' => 'getCompletion',
        'completionexpected' => 'getCompletionexpected',
        'completiongradeitemnumber' => 'getCompletiongradeitemnumber',
        'completionpassgrade' => 'getCompletionpassgrade',
        'completionview' => 'getCompletionview',
        'course' => 'getCourse',
        'downloadcontent' => 'getDownloadcontent',
        'grade' => 'getGrade',
        'gradecat' => 'getGradecat',
        'gradepass' => 'getGradepass',
        'groupingid' => 'getGroupingid',
        'groupmode' => 'getGroupmode',
        'id' => 'getId',
        'idnumber' => 'getIdnumber',
        'indent' => 'getIndent',
        'instance' => 'getInstance',
        'modname' => 'getModname',
        'module' => 'getModule',
        'name' => 'getName',
        'outcomes' => 'getOutcomes',
        'scale' => 'getScale',
        'score' => 'getScore',
        'section' => 'getSection',
        'sectionnum' => 'getSectionnum',
        'showdescription' => 'getShowdescription',
        'visible' => 'getVisible',
        'visibleold' => 'getVisibleold',
        'visibleoncoursepage' => 'getVisibleoncoursepage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('added', $data ?? [], null);
        $this->setIfExists('advancedgrading', $data ?? [], null);
        $this->setIfExists('availability', $data ?? [], 'null');
        $this->setIfExists('completion', $data ?? [], null);
        $this->setIfExists('completionexpected', $data ?? [], null);
        $this->setIfExists('completiongradeitemnumber', $data ?? [], null);
        $this->setIfExists('completionpassgrade', $data ?? [], null);
        $this->setIfExists('completionview', $data ?? [], null);
        $this->setIfExists('course', $data ?? [], null);
        $this->setIfExists('downloadcontent', $data ?? [], null);
        $this->setIfExists('grade', $data ?? [], null);
        $this->setIfExists('gradecat', $data ?? [], null);
        $this->setIfExists('gradepass', $data ?? [], 'null');
        $this->setIfExists('groupingid', $data ?? [], null);
        $this->setIfExists('groupmode', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('idnumber', $data ?? [], 'null');
        $this->setIfExists('indent', $data ?? [], null);
        $this->setIfExists('instance', $data ?? [], null);
        $this->setIfExists('modname', $data ?? [], 'null');
        $this->setIfExists('module', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], 'null');
        $this->setIfExists('outcomes', $data ?? [], null);
        $this->setIfExists('scale', $data ?? [], 'null');
        $this->setIfExists('score', $data ?? [], null);
        $this->setIfExists('section', $data ?? [], null);
        $this->setIfExists('sectionnum', $data ?? [], null);
        $this->setIfExists('showdescription', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], null);
        $this->setIfExists('visibleold', $data ?? [], null);
        $this->setIfExists('visibleoncoursepage', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['completion'] === null) {
            $invalidProperties[] = "'completion' can't be null";
        }
        if ($this->container['course'] === null) {
            $invalidProperties[] = "'course' can't be null";
        }
        if ($this->container['groupingid'] === null) {
            $invalidProperties[] = "'groupingid' can't be null";
        }
        if ($this->container['groupmode'] === null) {
            $invalidProperties[] = "'groupmode' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['instance'] === null) {
            $invalidProperties[] = "'instance' can't be null";
        }
        if ($this->container['modname'] === null) {
            $invalidProperties[] = "'modname' can't be null";
        }
        if ($this->container['module'] === null) {
            $invalidProperties[] = "'module' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['section'] === null) {
            $invalidProperties[] = "'section' can't be null";
        }
        if ($this->container['sectionnum'] === null) {
            $invalidProperties[] = "'sectionnum' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets added
     *
     * @return int|null
     */
    public function getAdded()
    {
        return $this->container['added'];
    }

    /**
     * Sets added
     *
     * @param int|null $added Time added
     *
     * @return self
     */
    public function setAdded($added)
    {
        if (is_null($added)) {
            throw new \InvalidArgumentException('non-nullable added cannot be null');
        }
        $this->container['added'] = $added;

        return $this;
    }

    /**
     * Gets advancedgrading
     *
     * @return \OpenAPI\Client\Model\CoreCourseGetCourseModule200ResponseCmAdvancedgradingInner[]|null
     */
    public function getAdvancedgrading()
    {
        return $this->container['advancedgrading'];
    }

    /**
     * Sets advancedgrading
     *
     * @param \OpenAPI\Client\Model\CoreCourseGetCourseModule200ResponseCmAdvancedgradingInner[]|null $advancedgrading advancedgrading
     *
     * @return self
     */
    public function setAdvancedgrading($advancedgrading)
    {
        if (is_null($advancedgrading)) {
            throw new \InvalidArgumentException('non-nullable advancedgrading cannot be null');
        }
        $this->container['advancedgrading'] = $advancedgrading;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return string|null
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param string|null $availability Availability settings
     *
     * @return self
     */
    public function setAvailability($availability)
    {
        if (is_null($availability)) {
            throw new \InvalidArgumentException('non-nullable availability cannot be null');
        }
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets completion
     *
     * @return int
     */
    public function getCompletion()
    {
        return $this->container['completion'];
    }

    /**
     * Sets completion
     *
     * @param int $completion If completion is enabled
     *
     * @return self
     */
    public function setCompletion($completion)
    {
        if (is_null($completion)) {
            throw new \InvalidArgumentException('non-nullable completion cannot be null');
        }
        $this->container['completion'] = $completion;

        return $this;
    }

    /**
     * Gets completionexpected
     *
     * @return int|null
     */
    public function getCompletionexpected()
    {
        return $this->container['completionexpected'];
    }

    /**
     * Sets completionexpected
     *
     * @param int|null $completionexpected Completion time expected
     *
     * @return self
     */
    public function setCompletionexpected($completionexpected)
    {
        if (is_null($completionexpected)) {
            throw new \InvalidArgumentException('non-nullable completionexpected cannot be null');
        }
        $this->container['completionexpected'] = $completionexpected;

        return $this;
    }

    /**
     * Gets completiongradeitemnumber
     *
     * @return int|null
     */
    public function getCompletiongradeitemnumber()
    {
        return $this->container['completiongradeitemnumber'];
    }

    /**
     * Sets completiongradeitemnumber
     *
     * @param int|null $completiongradeitemnumber Completion grade item
     *
     * @return self
     */
    public function setCompletiongradeitemnumber($completiongradeitemnumber)
    {
        if (is_null($completiongradeitemnumber)) {
            throw new \InvalidArgumentException('non-nullable completiongradeitemnumber cannot be null');
        }
        $this->container['completiongradeitemnumber'] = $completiongradeitemnumber;

        return $this;
    }

    /**
     * Gets completionpassgrade
     *
     * @return int|null
     */
    public function getCompletionpassgrade()
    {
        return $this->container['completionpassgrade'];
    }

    /**
     * Sets completionpassgrade
     *
     * @param int|null $completionpassgrade Completion pass grade setting
     *
     * @return self
     */
    public function setCompletionpassgrade($completionpassgrade)
    {
        if (is_null($completionpassgrade)) {
            throw new \InvalidArgumentException('non-nullable completionpassgrade cannot be null');
        }
        $this->container['completionpassgrade'] = $completionpassgrade;

        return $this;
    }

    /**
     * Gets completionview
     *
     * @return int|null
     */
    public function getCompletionview()
    {
        return $this->container['completionview'];
    }

    /**
     * Sets completionview
     *
     * @param int|null $completionview Completion view setting
     *
     * @return self
     */
    public function setCompletionview($completionview)
    {
        if (is_null($completionview)) {
            throw new \InvalidArgumentException('non-nullable completionview cannot be null');
        }
        $this->container['completionview'] = $completionview;

        return $this;
    }

    /**
     * Gets course
     *
     * @return int
     */
    public function getCourse()
    {
        return $this->container['course'];
    }

    /**
     * Sets course
     *
     * @param int $course The course id
     *
     * @return self
     */
    public function setCourse($course)
    {
        if (is_null($course)) {
            throw new \InvalidArgumentException('non-nullable course cannot be null');
        }
        $this->container['course'] = $course;

        return $this;
    }

    /**
     * Gets downloadcontent
     *
     * @return int|null
     */
    public function getDownloadcontent()
    {
        return $this->container['downloadcontent'];
    }

    /**
     * Sets downloadcontent
     *
     * @param int|null $downloadcontent The download content value
     *
     * @return self
     */
    public function setDownloadcontent($downloadcontent)
    {
        if (is_null($downloadcontent)) {
            throw new \InvalidArgumentException('non-nullable downloadcontent cannot be null');
        }
        $this->container['downloadcontent'] = $downloadcontent;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return float|null
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param float|null $grade Grade (max value or scale id)
     *
     * @return self
     */
    public function setGrade($grade)
    {
        if (is_null($grade)) {
            throw new \InvalidArgumentException('non-nullable grade cannot be null');
        }
        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets gradecat
     *
     * @return int|null
     */
    public function getGradecat()
    {
        return $this->container['gradecat'];
    }

    /**
     * Sets gradecat
     *
     * @param int|null $gradecat Grade category
     *
     * @return self
     */
    public function setGradecat($gradecat)
    {
        if (is_null($gradecat)) {
            throw new \InvalidArgumentException('non-nullable gradecat cannot be null');
        }
        $this->container['gradecat'] = $gradecat;

        return $this;
    }

    /**
     * Gets gradepass
     *
     * @return string|null
     */
    public function getGradepass()
    {
        return $this->container['gradepass'];
    }

    /**
     * Sets gradepass
     *
     * @param string|null $gradepass Grade to pass (float)
     *
     * @return self
     */
    public function setGradepass($gradepass)
    {
        if (is_null($gradepass)) {
            throw new \InvalidArgumentException('non-nullable gradepass cannot be null');
        }
        $this->container['gradepass'] = $gradepass;

        return $this;
    }

    /**
     * Gets groupingid
     *
     * @return int
     */
    public function getGroupingid()
    {
        return $this->container['groupingid'];
    }

    /**
     * Sets groupingid
     *
     * @param int $groupingid Grouping id
     *
     * @return self
     */
    public function setGroupingid($groupingid)
    {
        if (is_null($groupingid)) {
            throw new \InvalidArgumentException('non-nullable groupingid cannot be null');
        }
        $this->container['groupingid'] = $groupingid;

        return $this;
    }

    /**
     * Gets groupmode
     *
     * @return int
     */
    public function getGroupmode()
    {
        return $this->container['groupmode'];
    }

    /**
     * Sets groupmode
     *
     * @param int $groupmode Group mode
     *
     * @return self
     */
    public function setGroupmode($groupmode)
    {
        if (is_null($groupmode)) {
            throw new \InvalidArgumentException('non-nullable groupmode cannot be null');
        }
        $this->container['groupmode'] = $groupmode;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The course module id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets idnumber
     *
     * @return string|null
     */
    public function getIdnumber()
    {
        return $this->container['idnumber'];
    }

    /**
     * Sets idnumber
     *
     * @param string|null $idnumber Module id number
     *
     * @return self
     */
    public function setIdnumber($idnumber)
    {
        if (is_null($idnumber)) {
            throw new \InvalidArgumentException('non-nullable idnumber cannot be null');
        }
        $this->container['idnumber'] = $idnumber;

        return $this;
    }

    /**
     * Gets indent
     *
     * @return int|null
     */
    public function getIndent()
    {
        return $this->container['indent'];
    }

    /**
     * Sets indent
     *
     * @param int|null $indent Indentation
     *
     * @return self
     */
    public function setIndent($indent)
    {
        if (is_null($indent)) {
            throw new \InvalidArgumentException('non-nullable indent cannot be null');
        }
        $this->container['indent'] = $indent;

        return $this;
    }

    /**
     * Gets instance
     *
     * @return int
     */
    public function getInstance()
    {
        return $this->container['instance'];
    }

    /**
     * Sets instance
     *
     * @param int $instance The activity instance id
     *
     * @return self
     */
    public function setInstance($instance)
    {
        if (is_null($instance)) {
            throw new \InvalidArgumentException('non-nullable instance cannot be null');
        }
        $this->container['instance'] = $instance;

        return $this;
    }

    /**
     * Gets modname
     *
     * @return string
     */
    public function getModname()
    {
        return $this->container['modname'];
    }

    /**
     * Sets modname
     *
     * @param string $modname The module component name (forum, assign, etc..)
     *
     * @return self
     */
    public function setModname($modname)
    {
        if (is_null($modname)) {
            throw new \InvalidArgumentException('non-nullable modname cannot be null');
        }
        $this->container['modname'] = $modname;

        return $this;
    }

    /**
     * Gets module
     *
     * @return int
     */
    public function getModule()
    {
        return $this->container['module'];
    }

    /**
     * Sets module
     *
     * @param int $module The module type id
     *
     * @return self
     */
    public function setModule($module)
    {
        if (is_null($module)) {
            throw new \InvalidArgumentException('non-nullable module cannot be null');
        }
        $this->container['module'] = $module;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The activity name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets outcomes
     *
     * @return \OpenAPI\Client\Model\CoreCourseGetCourseModule200ResponseCmOutcomesInner[]|null
     */
    public function getOutcomes()
    {
        return $this->container['outcomes'];
    }

    /**
     * Sets outcomes
     *
     * @param \OpenAPI\Client\Model\CoreCourseGetCourseModule200ResponseCmOutcomesInner[]|null $outcomes outcomes
     *
     * @return self
     */
    public function setOutcomes($outcomes)
    {
        if (is_null($outcomes)) {
            throw new \InvalidArgumentException('non-nullable outcomes cannot be null');
        }
        $this->container['outcomes'] = $outcomes;

        return $this;
    }

    /**
     * Gets scale
     *
     * @return string|null
     */
    public function getScale()
    {
        return $this->container['scale'];
    }

    /**
     * Sets scale
     *
     * @param string|null $scale Scale items (if used)
     *
     * @return self
     */
    public function setScale($scale)
    {
        if (is_null($scale)) {
            throw new \InvalidArgumentException('non-nullable scale cannot be null');
        }
        $this->container['scale'] = $scale;

        return $this;
    }

    /**
     * Gets score
     *
     * @return int|null
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param int|null $score Score
     *
     * @return self
     */
    public function setScore($score)
    {
        if (is_null($score)) {
            throw new \InvalidArgumentException('non-nullable score cannot be null');
        }
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets section
     *
     * @return int
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param int $section The module section id
     *
     * @return self
     */
    public function setSection($section)
    {
        if (is_null($section)) {
            throw new \InvalidArgumentException('non-nullable section cannot be null');
        }
        $this->container['section'] = $section;

        return $this;
    }

    /**
     * Gets sectionnum
     *
     * @return int
     */
    public function getSectionnum()
    {
        return $this->container['sectionnum'];
    }

    /**
     * Sets sectionnum
     *
     * @param int $sectionnum The module section number
     *
     * @return self
     */
    public function setSectionnum($sectionnum)
    {
        if (is_null($sectionnum)) {
            throw new \InvalidArgumentException('non-nullable sectionnum cannot be null');
        }
        $this->container['sectionnum'] = $sectionnum;

        return $this;
    }

    /**
     * Gets showdescription
     *
     * @return int|null
     */
    public function getShowdescription()
    {
        return $this->container['showdescription'];
    }

    /**
     * Sets showdescription
     *
     * @param int|null $showdescription If the description is showed
     *
     * @return self
     */
    public function setShowdescription($showdescription)
    {
        if (is_null($showdescription)) {
            throw new \InvalidArgumentException('non-nullable showdescription cannot be null');
        }
        $this->container['showdescription'] = $showdescription;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return int|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param int|null $visible If visible
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets visibleold
     *
     * @return int|null
     */
    public function getVisibleold()
    {
        return $this->container['visibleold'];
    }

    /**
     * Sets visibleold
     *
     * @param int|null $visibleold Visible old
     *
     * @return self
     */
    public function setVisibleold($visibleold)
    {
        if (is_null($visibleold)) {
            throw new \InvalidArgumentException('non-nullable visibleold cannot be null');
        }
        $this->container['visibleold'] = $visibleold;

        return $this;
    }

    /**
     * Gets visibleoncoursepage
     *
     * @return int|null
     */
    public function getVisibleoncoursepage()
    {
        return $this->container['visibleoncoursepage'];
    }

    /**
     * Sets visibleoncoursepage
     *
     * @param int|null $visibleoncoursepage If visible on course page
     *
     * @return self
     */
    public function setVisibleoncoursepage($visibleoncoursepage)
    {
        if (is_null($visibleoncoursepage)) {
            throw new \InvalidArgumentException('non-nullable visibleoncoursepage cannot be null');
        }
        $this->container['visibleoncoursepage'] = $visibleoncoursepage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


