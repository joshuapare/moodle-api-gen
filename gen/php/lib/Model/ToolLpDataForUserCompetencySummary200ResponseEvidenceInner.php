<?php
/**
 * ToolLpDataForUserCompetencySummary200ResponseEvidenceInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ToolLpDataForUserCompetencySummary200ResponseEvidenceInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ToolLpDataForUserCompetencySummary200ResponseEvidenceInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tool_lp_data_for_user_competency_summary_200_response_evidence_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'action' => 'int',
        'actionuser' => '\OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser',
        'actionuserid' => 'int',
        'candelete' => 'bool',
        'contextid' => 'int',
        'desca' => 'string',
        'desccomponent' => 'string',
        'descidentifier' => 'string',
        'description' => 'string',
        'grade' => 'int',
        'gradename' => 'string',
        'id' => 'int',
        'note' => 'string',
        'timecreated' => 'int',
        'timemodified' => 'int',
        'url' => 'string',
        'usercompetencyid' => 'int',
        'userdate' => 'string',
        'usermodified' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'action' => null,
        'actionuser' => null,
        'actionuserid' => null,
        'candelete' => null,
        'contextid' => null,
        'desca' => null,
        'desccomponent' => null,
        'descidentifier' => null,
        'description' => null,
        'grade' => null,
        'gradename' => null,
        'id' => null,
        'note' => null,
        'timecreated' => null,
        'timemodified' => null,
        'url' => null,
        'usercompetencyid' => null,
        'userdate' => null,
        'usermodified' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'action' => false,
        'actionuser' => false,
        'actionuserid' => false,
        'candelete' => false,
        'contextid' => false,
        'desca' => false,
        'desccomponent' => false,
        'descidentifier' => false,
        'description' => false,
        'grade' => false,
        'gradename' => false,
        'id' => false,
        'note' => false,
        'timecreated' => false,
        'timemodified' => false,
        'url' => false,
        'usercompetencyid' => false,
        'userdate' => false,
        'usermodified' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'action',
        'actionuser' => 'actionuser',
        'actionuserid' => 'actionuserid',
        'candelete' => 'candelete',
        'contextid' => 'contextid',
        'desca' => 'desca',
        'desccomponent' => 'desccomponent',
        'descidentifier' => 'descidentifier',
        'description' => 'description',
        'grade' => 'grade',
        'gradename' => 'gradename',
        'id' => 'id',
        'note' => 'note',
        'timecreated' => 'timecreated',
        'timemodified' => 'timemodified',
        'url' => 'url',
        'usercompetencyid' => 'usercompetencyid',
        'userdate' => 'userdate',
        'usermodified' => 'usermodified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'actionuser' => 'setActionuser',
        'actionuserid' => 'setActionuserid',
        'candelete' => 'setCandelete',
        'contextid' => 'setContextid',
        'desca' => 'setDesca',
        'desccomponent' => 'setDesccomponent',
        'descidentifier' => 'setDescidentifier',
        'description' => 'setDescription',
        'grade' => 'setGrade',
        'gradename' => 'setGradename',
        'id' => 'setId',
        'note' => 'setNote',
        'timecreated' => 'setTimecreated',
        'timemodified' => 'setTimemodified',
        'url' => 'setUrl',
        'usercompetencyid' => 'setUsercompetencyid',
        'userdate' => 'setUserdate',
        'usermodified' => 'setUsermodified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'actionuser' => 'getActionuser',
        'actionuserid' => 'getActionuserid',
        'candelete' => 'getCandelete',
        'contextid' => 'getContextid',
        'desca' => 'getDesca',
        'desccomponent' => 'getDesccomponent',
        'descidentifier' => 'getDescidentifier',
        'description' => 'getDescription',
        'grade' => 'getGrade',
        'gradename' => 'getGradename',
        'id' => 'getId',
        'note' => 'getNote',
        'timecreated' => 'getTimecreated',
        'timemodified' => 'getTimemodified',
        'url' => 'getUrl',
        'usercompetencyid' => 'getUsercompetencyid',
        'userdate' => 'getUserdate',
        'usermodified' => 'getUsermodified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('actionuser', $data ?? [], null);
        $this->setIfExists('actionuserid', $data ?? [], null);
        $this->setIfExists('candelete', $data ?? [], null);
        $this->setIfExists('contextid', $data ?? [], null);
        $this->setIfExists('desca', $data ?? [], null);
        $this->setIfExists('desccomponent', $data ?? [], null);
        $this->setIfExists('descidentifier', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('grade', $data ?? [], null);
        $this->setIfExists('gradename', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], 0);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('timecreated', $data ?? [], 0);
        $this->setIfExists('timemodified', $data ?? [], 0);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('usercompetencyid', $data ?? [], null);
        $this->setIfExists('userdate', $data ?? [], null);
        $this->setIfExists('usermodified', $data ?? [], 0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return int|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param int|null $action action
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets actionuser
     *
     * @return \OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser|null
     */
    public function getActionuser()
    {
        return $this->container['actionuser'];
    }

    /**
     * Sets actionuser
     *
     * @param \OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser|null $actionuser actionuser
     *
     * @return self
     */
    public function setActionuser($actionuser)
    {
        if (is_null($actionuser)) {
            throw new \InvalidArgumentException('non-nullable actionuser cannot be null');
        }
        $this->container['actionuser'] = $actionuser;

        return $this;
    }

    /**
     * Gets actionuserid
     *
     * @return int|null
     */
    public function getActionuserid()
    {
        return $this->container['actionuserid'];
    }

    /**
     * Sets actionuserid
     *
     * @param int|null $actionuserid actionuserid
     *
     * @return self
     */
    public function setActionuserid($actionuserid)
    {
        if (is_null($actionuserid)) {
            throw new \InvalidArgumentException('non-nullable actionuserid cannot be null');
        }
        $this->container['actionuserid'] = $actionuserid;

        return $this;
    }

    /**
     * Gets candelete
     *
     * @return bool|null
     */
    public function getCandelete()
    {
        return $this->container['candelete'];
    }

    /**
     * Sets candelete
     *
     * @param bool|null $candelete candelete
     *
     * @return self
     */
    public function setCandelete($candelete)
    {
        if (is_null($candelete)) {
            throw new \InvalidArgumentException('non-nullable candelete cannot be null');
        }
        $this->container['candelete'] = $candelete;

        return $this;
    }

    /**
     * Gets contextid
     *
     * @return int|null
     */
    public function getContextid()
    {
        return $this->container['contextid'];
    }

    /**
     * Sets contextid
     *
     * @param int|null $contextid contextid
     *
     * @return self
     */
    public function setContextid($contextid)
    {
        if (is_null($contextid)) {
            throw new \InvalidArgumentException('non-nullable contextid cannot be null');
        }
        $this->container['contextid'] = $contextid;

        return $this;
    }

    /**
     * Gets desca
     *
     * @return string|null
     */
    public function getDesca()
    {
        return $this->container['desca'];
    }

    /**
     * Sets desca
     *
     * @param string|null $desca desca
     *
     * @return self
     */
    public function setDesca($desca)
    {
        if (is_null($desca)) {
            throw new \InvalidArgumentException('non-nullable desca cannot be null');
        }
        $this->container['desca'] = $desca;

        return $this;
    }

    /**
     * Gets desccomponent
     *
     * @return string|null
     */
    public function getDesccomponent()
    {
        return $this->container['desccomponent'];
    }

    /**
     * Sets desccomponent
     *
     * @param string|null $desccomponent desccomponent
     *
     * @return self
     */
    public function setDesccomponent($desccomponent)
    {
        if (is_null($desccomponent)) {
            throw new \InvalidArgumentException('non-nullable desccomponent cannot be null');
        }
        $this->container['desccomponent'] = $desccomponent;

        return $this;
    }

    /**
     * Gets descidentifier
     *
     * @return string|null
     */
    public function getDescidentifier()
    {
        return $this->container['descidentifier'];
    }

    /**
     * Sets descidentifier
     *
     * @param string|null $descidentifier descidentifier
     *
     * @return self
     */
    public function setDescidentifier($descidentifier)
    {
        if (is_null($descidentifier)) {
            throw new \InvalidArgumentException('non-nullable descidentifier cannot be null');
        }
        $this->container['descidentifier'] = $descidentifier;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return int|null
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param int|null $grade grade
     *
     * @return self
     */
    public function setGrade($grade)
    {
        if (is_null($grade)) {
            throw new \InvalidArgumentException('non-nullable grade cannot be null');
        }
        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets gradename
     *
     * @return string|null
     */
    public function getGradename()
    {
        return $this->container['gradename'];
    }

    /**
     * Sets gradename
     *
     * @param string|null $gradename gradename
     *
     * @return self
     */
    public function setGradename($gradename)
    {
        if (is_null($gradename)) {
            throw new \InvalidArgumentException('non-nullable gradename cannot be null');
        }
        $this->container['gradename'] = $gradename;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return int|null
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param int|null $timecreated timecreated
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified timemodified
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets usercompetencyid
     *
     * @return int|null
     */
    public function getUsercompetencyid()
    {
        return $this->container['usercompetencyid'];
    }

    /**
     * Sets usercompetencyid
     *
     * @param int|null $usercompetencyid usercompetencyid
     *
     * @return self
     */
    public function setUsercompetencyid($usercompetencyid)
    {
        if (is_null($usercompetencyid)) {
            throw new \InvalidArgumentException('non-nullable usercompetencyid cannot be null');
        }
        $this->container['usercompetencyid'] = $usercompetencyid;

        return $this;
    }

    /**
     * Gets userdate
     *
     * @return string|null
     */
    public function getUserdate()
    {
        return $this->container['userdate'];
    }

    /**
     * Sets userdate
     *
     * @param string|null $userdate userdate
     *
     * @return self
     */
    public function setUserdate($userdate)
    {
        if (is_null($userdate)) {
            throw new \InvalidArgumentException('non-nullable userdate cannot be null');
        }
        $this->container['userdate'] = $userdate;

        return $this;
    }

    /**
     * Gets usermodified
     *
     * @return int|null
     */
    public function getUsermodified()
    {
        return $this->container['usermodified'];
    }

    /**
     * Sets usermodified
     *
     * @param int|null $usermodified usermodified
     *
     * @return self
     */
    public function setUsermodified($usermodified)
    {
        if (is_null($usermodified)) {
            throw new \InvalidArgumentException('non-nullable usermodified cannot be null');
        }
        $this->container['usermodified'] = $usermodified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


