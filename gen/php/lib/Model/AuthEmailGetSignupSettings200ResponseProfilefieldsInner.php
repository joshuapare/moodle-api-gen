<?php
/**
 * AuthEmailGetSignupSettings200ResponseProfilefieldsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuthEmailGetSignupSettings200ResponseProfilefieldsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuthEmailGetSignupSettings200ResponseProfilefieldsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'auth_email_get_signup_settings_200_response_profilefields_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'categoryid' => 'int',
        'categoryname' => 'string',
        'datatype' => 'string',
        'defaultdata' => 'string',
        'defaultdataformat' => 'int',
        'description' => 'string',
        'descriptionformat' => 'int',
        'forceunique' => 'int',
        'id' => 'int',
        'locked' => 'int',
        'name' => 'string',
        'param1' => 'string',
        'param2' => 'string',
        'param3' => 'string',
        'param4' => 'string',
        'param5' => 'string',
        'required' => 'int',
        'shortname' => 'string',
        'signup' => 'int',
        'sortorder' => 'int',
        'visible' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'categoryid' => null,
        'categoryname' => null,
        'datatype' => null,
        'defaultdata' => null,
        'defaultdataformat' => null,
        'description' => null,
        'descriptionformat' => null,
        'forceunique' => null,
        'id' => null,
        'locked' => null,
        'name' => null,
        'param1' => null,
        'param2' => null,
        'param3' => null,
        'param4' => null,
        'param5' => null,
        'required' => null,
        'shortname' => null,
        'signup' => null,
        'sortorder' => null,
        'visible' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'categoryid' => false,
        'categoryname' => false,
        'datatype' => false,
        'defaultdata' => false,
        'defaultdataformat' => false,
        'description' => false,
        'descriptionformat' => false,
        'forceunique' => false,
        'id' => false,
        'locked' => false,
        'name' => false,
        'param1' => false,
        'param2' => false,
        'param3' => false,
        'param4' => false,
        'param5' => false,
        'required' => false,
        'shortname' => false,
        'signup' => false,
        'sortorder' => false,
        'visible' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'categoryid' => 'categoryid',
        'categoryname' => 'categoryname',
        'datatype' => 'datatype',
        'defaultdata' => 'defaultdata',
        'defaultdataformat' => 'defaultdataformat',
        'description' => 'description',
        'descriptionformat' => 'descriptionformat',
        'forceunique' => 'forceunique',
        'id' => 'id',
        'locked' => 'locked',
        'name' => 'name',
        'param1' => 'param1',
        'param2' => 'param2',
        'param3' => 'param3',
        'param4' => 'param4',
        'param5' => 'param5',
        'required' => 'required',
        'shortname' => 'shortname',
        'signup' => 'signup',
        'sortorder' => 'sortorder',
        'visible' => 'visible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'categoryid' => 'setCategoryid',
        'categoryname' => 'setCategoryname',
        'datatype' => 'setDatatype',
        'defaultdata' => 'setDefaultdata',
        'defaultdataformat' => 'setDefaultdataformat',
        'description' => 'setDescription',
        'descriptionformat' => 'setDescriptionformat',
        'forceunique' => 'setForceunique',
        'id' => 'setId',
        'locked' => 'setLocked',
        'name' => 'setName',
        'param1' => 'setParam1',
        'param2' => 'setParam2',
        'param3' => 'setParam3',
        'param4' => 'setParam4',
        'param5' => 'setParam5',
        'required' => 'setRequired',
        'shortname' => 'setShortname',
        'signup' => 'setSignup',
        'sortorder' => 'setSortorder',
        'visible' => 'setVisible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'categoryid' => 'getCategoryid',
        'categoryname' => 'getCategoryname',
        'datatype' => 'getDatatype',
        'defaultdata' => 'getDefaultdata',
        'defaultdataformat' => 'getDefaultdataformat',
        'description' => 'getDescription',
        'descriptionformat' => 'getDescriptionformat',
        'forceunique' => 'getForceunique',
        'id' => 'getId',
        'locked' => 'getLocked',
        'name' => 'getName',
        'param1' => 'getParam1',
        'param2' => 'getParam2',
        'param3' => 'getParam3',
        'param4' => 'getParam4',
        'param5' => 'getParam5',
        'required' => 'getRequired',
        'shortname' => 'getShortname',
        'signup' => 'getSignup',
        'sortorder' => 'getSortorder',
        'visible' => 'getVisible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('categoryid', $data ?? [], null);
        $this->setIfExists('categoryname', $data ?? [], 'null');
        $this->setIfExists('datatype', $data ?? [], 'null');
        $this->setIfExists('defaultdata', $data ?? [], 'null');
        $this->setIfExists('defaultdataformat', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], 'null');
        $this->setIfExists('descriptionformat', $data ?? [], null);
        $this->setIfExists('forceunique', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('locked', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], 'null');
        $this->setIfExists('param1', $data ?? [], 'null');
        $this->setIfExists('param2', $data ?? [], null);
        $this->setIfExists('param3', $data ?? [], null);
        $this->setIfExists('param4', $data ?? [], null);
        $this->setIfExists('param5', $data ?? [], null);
        $this->setIfExists('required', $data ?? [], null);
        $this->setIfExists('shortname', $data ?? [], 'null');
        $this->setIfExists('signup', $data ?? [], null);
        $this->setIfExists('sortorder', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets categoryid
     *
     * @return int|null
     */
    public function getCategoryid()
    {
        return $this->container['categoryid'];
    }

    /**
     * Sets categoryid
     *
     * @param int|null $categoryid Profield field category id
     *
     * @return self
     */
    public function setCategoryid($categoryid)
    {
        if (is_null($categoryid)) {
            throw new \InvalidArgumentException('non-nullable categoryid cannot be null');
        }
        $this->container['categoryid'] = $categoryid;

        return $this;
    }

    /**
     * Gets categoryname
     *
     * @return string|null
     */
    public function getCategoryname()
    {
        return $this->container['categoryname'];
    }

    /**
     * Sets categoryname
     *
     * @param string|null $categoryname Profield field category name
     *
     * @return self
     */
    public function setCategoryname($categoryname)
    {
        if (is_null($categoryname)) {
            throw new \InvalidArgumentException('non-nullable categoryname cannot be null');
        }
        $this->container['categoryname'] = $categoryname;

        return $this;
    }

    /**
     * Gets datatype
     *
     * @return string|null
     */
    public function getDatatype()
    {
        return $this->container['datatype'];
    }

    /**
     * Sets datatype
     *
     * @param string|null $datatype Profield field datatype
     *
     * @return self
     */
    public function setDatatype($datatype)
    {
        if (is_null($datatype)) {
            throw new \InvalidArgumentException('non-nullable datatype cannot be null');
        }
        $this->container['datatype'] = $datatype;

        return $this;
    }

    /**
     * Gets defaultdata
     *
     * @return string|null
     */
    public function getDefaultdata()
    {
        return $this->container['defaultdata'];
    }

    /**
     * Sets defaultdata
     *
     * @param string|null $defaultdata Profield field default data
     *
     * @return self
     */
    public function setDefaultdata($defaultdata)
    {
        if (is_null($defaultdata)) {
            throw new \InvalidArgumentException('non-nullable defaultdata cannot be null');
        }
        $this->container['defaultdata'] = $defaultdata;

        return $this;
    }

    /**
     * Gets defaultdataformat
     *
     * @return int|null
     */
    public function getDefaultdataformat()
    {
        return $this->container['defaultdataformat'];
    }

    /**
     * Sets defaultdataformat
     *
     * @param int|null $defaultdataformat defaultdata format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setDefaultdataformat($defaultdataformat)
    {
        if (is_null($defaultdataformat)) {
            throw new \InvalidArgumentException('non-nullable defaultdataformat cannot be null');
        }
        $this->container['defaultdataformat'] = $defaultdataformat;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Profield field description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets descriptionformat
     *
     * @return int|null
     */
    public function getDescriptionformat()
    {
        return $this->container['descriptionformat'];
    }

    /**
     * Sets descriptionformat
     *
     * @param int|null $descriptionformat description format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setDescriptionformat($descriptionformat)
    {
        if (is_null($descriptionformat)) {
            throw new \InvalidArgumentException('non-nullable descriptionformat cannot be null');
        }
        $this->container['descriptionformat'] = $descriptionformat;

        return $this;
    }

    /**
     * Gets forceunique
     *
     * @return int|null
     */
    public function getForceunique()
    {
        return $this->container['forceunique'];
    }

    /**
     * Sets forceunique
     *
     * @param int|null $forceunique Profield field unique
     *
     * @return self
     */
    public function setForceunique($forceunique)
    {
        if (is_null($forceunique)) {
            throw new \InvalidArgumentException('non-nullable forceunique cannot be null');
        }
        $this->container['forceunique'] = $forceunique;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Profile field id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return int|null
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param int|null $locked Profield field locked
     *
     * @return self
     */
    public function setLocked($locked)
    {
        if (is_null($locked)) {
            throw new \InvalidArgumentException('non-nullable locked cannot be null');
        }
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Profield field name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets param1
     *
     * @return string|null
     */
    public function getParam1()
    {
        return $this->container['param1'];
    }

    /**
     * Sets param1
     *
     * @param string|null $param1 Profield field settings
     *
     * @return self
     */
    public function setParam1($param1)
    {
        if (is_null($param1)) {
            throw new \InvalidArgumentException('non-nullable param1 cannot be null');
        }
        $this->container['param1'] = $param1;

        return $this;
    }

    /**
     * Gets param2
     *
     * @return string|null
     */
    public function getParam2()
    {
        return $this->container['param2'];
    }

    /**
     * Sets param2
     *
     * @param string|null $param2 Profield field settings
     *
     * @return self
     */
    public function setParam2($param2)
    {
        if (is_null($param2)) {
            throw new \InvalidArgumentException('non-nullable param2 cannot be null');
        }
        $this->container['param2'] = $param2;

        return $this;
    }

    /**
     * Gets param3
     *
     * @return string|null
     */
    public function getParam3()
    {
        return $this->container['param3'];
    }

    /**
     * Sets param3
     *
     * @param string|null $param3 Profield field settings
     *
     * @return self
     */
    public function setParam3($param3)
    {
        if (is_null($param3)) {
            throw new \InvalidArgumentException('non-nullable param3 cannot be null');
        }
        $this->container['param3'] = $param3;

        return $this;
    }

    /**
     * Gets param4
     *
     * @return string|null
     */
    public function getParam4()
    {
        return $this->container['param4'];
    }

    /**
     * Sets param4
     *
     * @param string|null $param4 Profield field settings
     *
     * @return self
     */
    public function setParam4($param4)
    {
        if (is_null($param4)) {
            throw new \InvalidArgumentException('non-nullable param4 cannot be null');
        }
        $this->container['param4'] = $param4;

        return $this;
    }

    /**
     * Gets param5
     *
     * @return string|null
     */
    public function getParam5()
    {
        return $this->container['param5'];
    }

    /**
     * Sets param5
     *
     * @param string|null $param5 Profield field settings
     *
     * @return self
     */
    public function setParam5($param5)
    {
        if (is_null($param5)) {
            throw new \InvalidArgumentException('non-nullable param5 cannot be null');
        }
        $this->container['param5'] = $param5;

        return $this;
    }

    /**
     * Gets required
     *
     * @return int|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param int|null $required Profield field required
     *
     * @return self
     */
    public function setRequired($required)
    {
        if (is_null($required)) {
            throw new \InvalidArgumentException('non-nullable required cannot be null');
        }
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets shortname
     *
     * @return string|null
     */
    public function getShortname()
    {
        return $this->container['shortname'];
    }

    /**
     * Sets shortname
     *
     * @param string|null $shortname Profile field shortname
     *
     * @return self
     */
    public function setShortname($shortname)
    {
        if (is_null($shortname)) {
            throw new \InvalidArgumentException('non-nullable shortname cannot be null');
        }
        $this->container['shortname'] = $shortname;

        return $this;
    }

    /**
     * Gets signup
     *
     * @return int|null
     */
    public function getSignup()
    {
        return $this->container['signup'];
    }

    /**
     * Sets signup
     *
     * @param int|null $signup Profield field in signup form
     *
     * @return self
     */
    public function setSignup($signup)
    {
        if (is_null($signup)) {
            throw new \InvalidArgumentException('non-nullable signup cannot be null');
        }
        $this->container['signup'] = $signup;

        return $this;
    }

    /**
     * Gets sortorder
     *
     * @return int|null
     */
    public function getSortorder()
    {
        return $this->container['sortorder'];
    }

    /**
     * Sets sortorder
     *
     * @param int|null $sortorder Profield field sort order
     *
     * @return self
     */
    public function setSortorder($sortorder)
    {
        if (is_null($sortorder)) {
            throw new \InvalidArgumentException('non-nullable sortorder cannot be null');
        }
        $this->container['sortorder'] = $sortorder;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return int|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param int|null $visible Profield field visible
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


