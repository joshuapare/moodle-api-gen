<?php
/**
 * ModFeedbackGetAnalysis200ResponseItemsdataInnerItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModFeedbackGetAnalysis200ResponseItemsdataInnerItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModFeedbackGetAnalysis200ResponseItemsdataInnerItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_feedback_get_analysis_200_response_itemsdata_inner_item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dependitem' => 'int',
        'dependvalue' => 'string',
        'feedback' => 'int',
        'hasvalue' => 'int',
        'id' => 'int',
        'itemfiles' => '\OpenAPI\Client\Model\ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner[]',
        'itemnumber' => 'int',
        'label' => 'string',
        'name' => 'string',
        'options' => 'string',
        'otherdata' => 'string',
        'position' => 'int',
        'presentation' => 'string',
        'required' => 'bool',
        'template' => 'int',
        'typ' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dependitem' => null,
        'dependvalue' => null,
        'feedback' => null,
        'hasvalue' => null,
        'id' => null,
        'itemfiles' => null,
        'itemnumber' => null,
        'label' => null,
        'name' => null,
        'options' => null,
        'otherdata' => null,
        'position' => null,
        'presentation' => null,
        'required' => null,
        'template' => null,
        'typ' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dependitem' => false,
        'dependvalue' => false,
        'feedback' => false,
        'hasvalue' => false,
        'id' => false,
        'itemfiles' => false,
        'itemnumber' => false,
        'label' => false,
        'name' => false,
        'options' => false,
        'otherdata' => false,
        'position' => false,
        'presentation' => false,
        'required' => false,
        'template' => false,
        'typ' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dependitem' => 'dependitem',
        'dependvalue' => 'dependvalue',
        'feedback' => 'feedback',
        'hasvalue' => 'hasvalue',
        'id' => 'id',
        'itemfiles' => 'itemfiles',
        'itemnumber' => 'itemnumber',
        'label' => 'label',
        'name' => 'name',
        'options' => 'options',
        'otherdata' => 'otherdata',
        'position' => 'position',
        'presentation' => 'presentation',
        'required' => 'required',
        'template' => 'template',
        'typ' => 'typ'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dependitem' => 'setDependitem',
        'dependvalue' => 'setDependvalue',
        'feedback' => 'setFeedback',
        'hasvalue' => 'setHasvalue',
        'id' => 'setId',
        'itemfiles' => 'setItemfiles',
        'itemnumber' => 'setItemnumber',
        'label' => 'setLabel',
        'name' => 'setName',
        'options' => 'setOptions',
        'otherdata' => 'setOtherdata',
        'position' => 'setPosition',
        'presentation' => 'setPresentation',
        'required' => 'setRequired',
        'template' => 'setTemplate',
        'typ' => 'setTyp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dependitem' => 'getDependitem',
        'dependvalue' => 'getDependvalue',
        'feedback' => 'getFeedback',
        'hasvalue' => 'getHasvalue',
        'id' => 'getId',
        'itemfiles' => 'getItemfiles',
        'itemnumber' => 'getItemnumber',
        'label' => 'getLabel',
        'name' => 'getName',
        'options' => 'getOptions',
        'otherdata' => 'getOtherdata',
        'position' => 'getPosition',
        'presentation' => 'getPresentation',
        'required' => 'getRequired',
        'template' => 'getTemplate',
        'typ' => 'getTyp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('dependitem', $data ?? [], 0);
        $this->setIfExists('dependvalue', $data ?? [], 'null');
        $this->setIfExists('feedback', $data ?? [], 0);
        $this->setIfExists('hasvalue', $data ?? [], 0);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('itemfiles', $data ?? [], null);
        $this->setIfExists('itemnumber', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], 'null');
        $this->setIfExists('name', $data ?? [], 'null');
        $this->setIfExists('options', $data ?? [], 'null');
        $this->setIfExists('otherdata', $data ?? [], 'null');
        $this->setIfExists('position', $data ?? [], 0);
        $this->setIfExists('presentation', $data ?? [], 'null');
        $this->setIfExists('required', $data ?? [], 0);
        $this->setIfExists('template', $data ?? [], 0);
        $this->setIfExists('typ', $data ?? [], 'null');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dependitem'] === null) {
            $invalidProperties[] = "'dependitem' can't be null";
        }
        if ($this->container['dependvalue'] === null) {
            $invalidProperties[] = "'dependvalue' can't be null";
        }
        if ($this->container['feedback'] === null) {
            $invalidProperties[] = "'feedback' can't be null";
        }
        if ($this->container['hasvalue'] === null) {
            $invalidProperties[] = "'hasvalue' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['itemfiles'] === null) {
            $invalidProperties[] = "'itemfiles' can't be null";
        }
        if ($this->container['itemnumber'] === null) {
            $invalidProperties[] = "'itemnumber' can't be null";
        }
        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['options'] === null) {
            $invalidProperties[] = "'options' can't be null";
        }
        if ($this->container['otherdata'] === null) {
            $invalidProperties[] = "'otherdata' can't be null";
        }
        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if ($this->container['presentation'] === null) {
            $invalidProperties[] = "'presentation' can't be null";
        }
        if ($this->container['required'] === null) {
            $invalidProperties[] = "'required' can't be null";
        }
        if ($this->container['template'] === null) {
            $invalidProperties[] = "'template' can't be null";
        }
        if ($this->container['typ'] === null) {
            $invalidProperties[] = "'typ' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dependitem
     *
     * @return int
     */
    public function getDependitem()
    {
        return $this->container['dependitem'];
    }

    /**
     * Sets dependitem
     *
     * @param int $dependitem The item id this item depend on.
     *
     * @return self
     */
    public function setDependitem($dependitem)
    {
        if (is_null($dependitem)) {
            throw new \InvalidArgumentException('non-nullable dependitem cannot be null');
        }
        $this->container['dependitem'] = $dependitem;

        return $this;
    }

    /**
     * Gets dependvalue
     *
     * @return string
     */
    public function getDependvalue()
    {
        return $this->container['dependvalue'];
    }

    /**
     * Sets dependvalue
     *
     * @param string $dependvalue The depend value.
     *
     * @return self
     */
    public function setDependvalue($dependvalue)
    {
        if (is_null($dependvalue)) {
            throw new \InvalidArgumentException('non-nullable dependvalue cannot be null');
        }
        $this->container['dependvalue'] = $dependvalue;

        return $this;
    }

    /**
     * Gets feedback
     *
     * @return int
     */
    public function getFeedback()
    {
        return $this->container['feedback'];
    }

    /**
     * Sets feedback
     *
     * @param int $feedback The feedback instance id this records belongs to.
     *
     * @return self
     */
    public function setFeedback($feedback)
    {
        if (is_null($feedback)) {
            throw new \InvalidArgumentException('non-nullable feedback cannot be null');
        }
        $this->container['feedback'] = $feedback;

        return $this;
    }

    /**
     * Gets hasvalue
     *
     * @return int
     */
    public function getHasvalue()
    {
        return $this->container['hasvalue'];
    }

    /**
     * Sets hasvalue
     *
     * @param int $hasvalue Whether it has a value or not.
     *
     * @return self
     */
    public function setHasvalue($hasvalue)
    {
        if (is_null($hasvalue)) {
            throw new \InvalidArgumentException('non-nullable hasvalue cannot be null');
        }
        $this->container['hasvalue'] = $hasvalue;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The record id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets itemfiles
     *
     * @return \OpenAPI\Client\Model\ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner[]
     */
    public function getItemfiles()
    {
        return $this->container['itemfiles'];
    }

    /**
     * Sets itemfiles
     *
     * @param \OpenAPI\Client\Model\ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner[] $itemfiles itemfiles
     *
     * @return self
     */
    public function setItemfiles($itemfiles)
    {
        if (is_null($itemfiles)) {
            throw new \InvalidArgumentException('non-nullable itemfiles cannot be null');
        }
        $this->container['itemfiles'] = $itemfiles;

        return $this;
    }

    /**
     * Gets itemnumber
     *
     * @return int
     */
    public function getItemnumber()
    {
        return $this->container['itemnumber'];
    }

    /**
     * Sets itemnumber
     *
     * @param int $itemnumber The item position number
     *
     * @return self
     */
    public function setItemnumber($itemnumber)
    {
        if (is_null($itemnumber)) {
            throw new \InvalidArgumentException('non-nullable itemnumber cannot be null');
        }
        $this->container['itemnumber'] = $itemnumber;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label The item label.
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The item name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string $options Different additional settings for the item (question).
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets otherdata
     *
     * @return string
     */
    public function getOtherdata()
    {
        return $this->container['otherdata'];
    }

    /**
     * Sets otherdata
     *
     * @param string $otherdata Additional data that may be required by external functions
     *
     * @return self
     */
    public function setOtherdata($otherdata)
    {
        if (is_null($otherdata)) {
            throw new \InvalidArgumentException('non-nullable otherdata cannot be null');
        }
        $this->container['otherdata'] = $otherdata;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position The position in the list of questions.
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets presentation
     *
     * @return string
     */
    public function getPresentation()
    {
        return $this->container['presentation'];
    }

    /**
     * Sets presentation
     *
     * @param string $presentation The text describing the item or the available possible answers.
     *
     * @return self
     */
    public function setPresentation($presentation)
    {
        if (is_null($presentation)) {
            throw new \InvalidArgumentException('non-nullable presentation cannot be null');
        }
        $this->container['presentation'] = $presentation;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool $required Whether is a item (question) required or not.
     *
     * @return self
     */
    public function setRequired($required)
    {
        if (is_null($required)) {
            throw new \InvalidArgumentException('non-nullable required cannot be null');
        }
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets template
     *
     * @return int
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param int $template If it belogns to a template, the template id.
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets typ
     *
     * @return string
     */
    public function getTyp()
    {
        return $this->container['typ'];
    }

    /**
     * Sets typ
     *
     * @param string $typ The type of the item.
     *
     * @return self
     */
    public function setTyp($typ)
    {
        if (is_null($typ)) {
            throw new \InvalidArgumentException('non-nullable typ cannot be null');
        }
        $this->container['typ'] = $typ;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


