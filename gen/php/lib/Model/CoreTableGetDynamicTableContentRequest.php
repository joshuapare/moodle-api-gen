<?php
/**
 * CoreTableGetDynamicTableContentRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreTableGetDynamicTableContentRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreTableGetDynamicTableContentRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_table_get_dynamic_table_content_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'component' => 'string',
        'filters' => '\OpenAPI\Client\Model\CoreTableGetDynamicTableContentRequestFiltersInner[]',
        'firstinitial' => 'string',
        'handler' => 'string',
        'hiddencolumns' => 'object[]',
        'jointype' => 'int',
        'lastinitial' => 'string',
        'pagenumber' => 'int',
        'pagesize' => 'int',
        'resetpreferences' => 'bool',
        'sortdata' => '\OpenAPI\Client\Model\CoreTableGetDynamicTableContentRequestSortdataInner[]',
        'uniqueid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'component' => null,
        'filters' => null,
        'firstinitial' => null,
        'handler' => null,
        'hiddencolumns' => null,
        'jointype' => null,
        'lastinitial' => null,
        'pagenumber' => null,
        'pagesize' => null,
        'resetpreferences' => null,
        'sortdata' => null,
        'uniqueid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'component' => false,
        'filters' => false,
        'firstinitial' => false,
        'handler' => false,
        'hiddencolumns' => false,
        'jointype' => false,
        'lastinitial' => false,
        'pagenumber' => false,
        'pagesize' => false,
        'resetpreferences' => false,
        'sortdata' => false,
        'uniqueid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'component' => 'component',
        'filters' => 'filters',
        'firstinitial' => 'firstinitial',
        'handler' => 'handler',
        'hiddencolumns' => 'hiddencolumns',
        'jointype' => 'jointype',
        'lastinitial' => 'lastinitial',
        'pagenumber' => 'pagenumber',
        'pagesize' => 'pagesize',
        'resetpreferences' => 'resetpreferences',
        'sortdata' => 'sortdata',
        'uniqueid' => 'uniqueid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'component' => 'setComponent',
        'filters' => 'setFilters',
        'firstinitial' => 'setFirstinitial',
        'handler' => 'setHandler',
        'hiddencolumns' => 'setHiddencolumns',
        'jointype' => 'setJointype',
        'lastinitial' => 'setLastinitial',
        'pagenumber' => 'setPagenumber',
        'pagesize' => 'setPagesize',
        'resetpreferences' => 'setResetpreferences',
        'sortdata' => 'setSortdata',
        'uniqueid' => 'setUniqueid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'component' => 'getComponent',
        'filters' => 'getFilters',
        'firstinitial' => 'getFirstinitial',
        'handler' => 'getHandler',
        'hiddencolumns' => 'getHiddencolumns',
        'jointype' => 'getJointype',
        'lastinitial' => 'getLastinitial',
        'pagenumber' => 'getPagenumber',
        'pagesize' => 'getPagesize',
        'resetpreferences' => 'getResetpreferences',
        'sortdata' => 'getSortdata',
        'uniqueid' => 'getUniqueid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('component', $data ?? [], null);
        $this->setIfExists('filters', $data ?? [], null);
        $this->setIfExists('firstinitial', $data ?? [], 'null');
        $this->setIfExists('handler', $data ?? [], 'null');
        $this->setIfExists('hiddencolumns', $data ?? [], null);
        $this->setIfExists('jointype', $data ?? [], null);
        $this->setIfExists('lastinitial', $data ?? [], 'null');
        $this->setIfExists('pagenumber', $data ?? [], null);
        $this->setIfExists('pagesize', $data ?? [], null);
        $this->setIfExists('resetpreferences', $data ?? [], null);
        $this->setIfExists('sortdata', $data ?? [], null);
        $this->setIfExists('uniqueid', $data ?? [], 'null');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['component'] === null) {
            $invalidProperties[] = "'component' can't be null";
        }
        if ($this->container['firstinitial'] === null) {
            $invalidProperties[] = "'firstinitial' can't be null";
        }
        if ($this->container['handler'] === null) {
            $invalidProperties[] = "'handler' can't be null";
        }
        if ($this->container['hiddencolumns'] === null) {
            $invalidProperties[] = "'hiddencolumns' can't be null";
        }
        if ($this->container['jointype'] === null) {
            $invalidProperties[] = "'jointype' can't be null";
        }
        if ($this->container['lastinitial'] === null) {
            $invalidProperties[] = "'lastinitial' can't be null";
        }
        if ($this->container['pagenumber'] === null) {
            $invalidProperties[] = "'pagenumber' can't be null";
        }
        if ($this->container['pagesize'] === null) {
            $invalidProperties[] = "'pagesize' can't be null";
        }
        if ($this->container['resetpreferences'] === null) {
            $invalidProperties[] = "'resetpreferences' can't be null";
        }
        if ($this->container['uniqueid'] === null) {
            $invalidProperties[] = "'uniqueid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets component
     *
     * @return string
     */
    public function getComponent()
    {
        return $this->container['component'];
    }

    /**
     * Sets component
     *
     * @param string $component Component
     *
     * @return self
     */
    public function setComponent($component)
    {
        if (is_null($component)) {
            throw new \InvalidArgumentException('non-nullable component cannot be null');
        }
        $this->container['component'] = $component;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \OpenAPI\Client\Model\CoreTableGetDynamicTableContentRequestFiltersInner[]|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \OpenAPI\Client\Model\CoreTableGetDynamicTableContentRequestFiltersInner[]|null $filters filters
     *
     * @return self
     */
    public function setFilters($filters)
    {
        if (is_null($filters)) {
            throw new \InvalidArgumentException('non-nullable filters cannot be null');
        }
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets firstinitial
     *
     * @return string
     */
    public function getFirstinitial()
    {
        return $this->container['firstinitial'];
    }

    /**
     * Sets firstinitial
     *
     * @param string $firstinitial The first initial to sort filter on
     *
     * @return self
     */
    public function setFirstinitial($firstinitial)
    {
        if (is_null($firstinitial)) {
            throw new \InvalidArgumentException('non-nullable firstinitial cannot be null');
        }
        $this->container['firstinitial'] = $firstinitial;

        return $this;
    }

    /**
     * Gets handler
     *
     * @return string
     */
    public function getHandler()
    {
        return $this->container['handler'];
    }

    /**
     * Sets handler
     *
     * @param string $handler Handler
     *
     * @return self
     */
    public function setHandler($handler)
    {
        if (is_null($handler)) {
            throw new \InvalidArgumentException('non-nullable handler cannot be null');
        }
        $this->container['handler'] = $handler;

        return $this;
    }

    /**
     * Gets hiddencolumns
     *
     * @return object[]
     */
    public function getHiddencolumns()
    {
        return $this->container['hiddencolumns'];
    }

    /**
     * Sets hiddencolumns
     *
     * @param object[] $hiddencolumns hiddencolumns
     *
     * @return self
     */
    public function setHiddencolumns($hiddencolumns)
    {
        if (is_null($hiddencolumns)) {
            throw new \InvalidArgumentException('non-nullable hiddencolumns cannot be null');
        }
        $this->container['hiddencolumns'] = $hiddencolumns;

        return $this;
    }

    /**
     * Gets jointype
     *
     * @return int
     */
    public function getJointype()
    {
        return $this->container['jointype'];
    }

    /**
     * Sets jointype
     *
     * @param int $jointype Type of join to join all filters together
     *
     * @return self
     */
    public function setJointype($jointype)
    {
        if (is_null($jointype)) {
            throw new \InvalidArgumentException('non-nullable jointype cannot be null');
        }
        $this->container['jointype'] = $jointype;

        return $this;
    }

    /**
     * Gets lastinitial
     *
     * @return string
     */
    public function getLastinitial()
    {
        return $this->container['lastinitial'];
    }

    /**
     * Sets lastinitial
     *
     * @param string $lastinitial The last initial to sort filter on
     *
     * @return self
     */
    public function setLastinitial($lastinitial)
    {
        if (is_null($lastinitial)) {
            throw new \InvalidArgumentException('non-nullable lastinitial cannot be null');
        }
        $this->container['lastinitial'] = $lastinitial;

        return $this;
    }

    /**
     * Gets pagenumber
     *
     * @return int
     */
    public function getPagenumber()
    {
        return $this->container['pagenumber'];
    }

    /**
     * Sets pagenumber
     *
     * @param int $pagenumber The page number
     *
     * @return self
     */
    public function setPagenumber($pagenumber)
    {
        if (is_null($pagenumber)) {
            throw new \InvalidArgumentException('non-nullable pagenumber cannot be null');
        }
        $this->container['pagenumber'] = $pagenumber;

        return $this;
    }

    /**
     * Gets pagesize
     *
     * @return int
     */
    public function getPagesize()
    {
        return $this->container['pagesize'];
    }

    /**
     * Sets pagesize
     *
     * @param int $pagesize The number of records per page
     *
     * @return self
     */
    public function setPagesize($pagesize)
    {
        if (is_null($pagesize)) {
            throw new \InvalidArgumentException('non-nullable pagesize cannot be null');
        }
        $this->container['pagesize'] = $pagesize;

        return $this;
    }

    /**
     * Gets resetpreferences
     *
     * @return bool
     */
    public function getResetpreferences()
    {
        return $this->container['resetpreferences'];
    }

    /**
     * Sets resetpreferences
     *
     * @param bool $resetpreferences Whether the table preferences should be reset
     *
     * @return self
     */
    public function setResetpreferences($resetpreferences)
    {
        if (is_null($resetpreferences)) {
            throw new \InvalidArgumentException('non-nullable resetpreferences cannot be null');
        }
        $this->container['resetpreferences'] = $resetpreferences;

        return $this;
    }

    /**
     * Gets sortdata
     *
     * @return \OpenAPI\Client\Model\CoreTableGetDynamicTableContentRequestSortdataInner[]|null
     */
    public function getSortdata()
    {
        return $this->container['sortdata'];
    }

    /**
     * Sets sortdata
     *
     * @param \OpenAPI\Client\Model\CoreTableGetDynamicTableContentRequestSortdataInner[]|null $sortdata sortdata
     *
     * @return self
     */
    public function setSortdata($sortdata)
    {
        if (is_null($sortdata)) {
            throw new \InvalidArgumentException('non-nullable sortdata cannot be null');
        }
        $this->container['sortdata'] = $sortdata;

        return $this;
    }

    /**
     * Gets uniqueid
     *
     * @return string
     */
    public function getUniqueid()
    {
        return $this->container['uniqueid'];
    }

    /**
     * Sets uniqueid
     *
     * @param string $uniqueid Unique ID for the container
     *
     * @return self
     */
    public function setUniqueid($uniqueid)
    {
        if (is_null($uniqueid)) {
            throw new \InvalidArgumentException('non-nullable uniqueid cannot be null');
        }
        $this->container['uniqueid'] = $uniqueid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


