<?php
/**
 * CoreCourseGetCoursesByField200ResponseCoursesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreCourseGetCoursesByField200ResponseCoursesInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreCourseGetCoursesByField200ResponseCoursesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_course_get_courses_by_field_200_response_courses_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cacherev' => 'int',
        'calendartype' => 'string',
        'categoryid' => 'int',
        'categoryname' => 'string',
        'completionnotify' => 'int',
        'contacts' => '\OpenAPI\Client\Model\CoreCourseGetCoursesByField200ResponseCoursesInnerContactsInner[]',
        'courseformatoptions' => '\OpenAPI\Client\Model\CoreCourseGetCoursesByField200ResponseCoursesInnerCourseformatoptionsInner[]',
        'courseimage' => 'string',
        'customfields' => '\OpenAPI\Client\Model\CoreCourseGetCoursesByField200ResponseCoursesInnerCustomfieldsInner[]',
        'defaultgroupingid' => 'int',
        'displayname' => 'string',
        'enablecompletion' => 'int',
        'enddate' => 'int',
        'enrollmentmethods' => 'object[]',
        'filters' => '\OpenAPI\Client\Model\CoreCourseGetCoursesByField200ResponseCoursesInnerFiltersInner[]',
        'format' => 'string',
        'fullname' => 'string',
        'groupmode' => 'int',
        'groupmodeforce' => 'int',
        'id' => 'int',
        'idnumber' => 'string',
        'lang' => 'string',
        'legacyfiles' => 'int',
        'marker' => 'int',
        'maxbytes' => 'int',
        'newsitems' => 'int',
        'overviewfiles' => '\OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]',
        'requested' => 'int',
        'shortname' => 'string',
        'showactivitydates' => 'bool',
        'showcompletionconditions' => 'bool',
        'showgrades' => 'int',
        'showreports' => 'int',
        'sortorder' => 'int',
        'startdate' => 'int',
        'summary' => 'string',
        'summaryfiles' => '\OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]',
        'summaryformat' => 'int',
        'theme' => 'string',
        'timecreated' => 'int',
        'timemodified' => 'int',
        'visible' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cacherev' => null,
        'calendartype' => null,
        'categoryid' => null,
        'categoryname' => null,
        'completionnotify' => null,
        'contacts' => null,
        'courseformatoptions' => null,
        'courseimage' => null,
        'customfields' => null,
        'defaultgroupingid' => null,
        'displayname' => null,
        'enablecompletion' => null,
        'enddate' => null,
        'enrollmentmethods' => null,
        'filters' => null,
        'format' => null,
        'fullname' => null,
        'groupmode' => null,
        'groupmodeforce' => null,
        'id' => null,
        'idnumber' => null,
        'lang' => null,
        'legacyfiles' => null,
        'marker' => null,
        'maxbytes' => null,
        'newsitems' => null,
        'overviewfiles' => null,
        'requested' => null,
        'shortname' => null,
        'showactivitydates' => null,
        'showcompletionconditions' => null,
        'showgrades' => null,
        'showreports' => null,
        'sortorder' => null,
        'startdate' => null,
        'summary' => null,
        'summaryfiles' => null,
        'summaryformat' => null,
        'theme' => null,
        'timecreated' => null,
        'timemodified' => null,
        'visible' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cacherev' => false,
        'calendartype' => false,
        'categoryid' => false,
        'categoryname' => false,
        'completionnotify' => false,
        'contacts' => false,
        'courseformatoptions' => false,
        'courseimage' => false,
        'customfields' => false,
        'defaultgroupingid' => false,
        'displayname' => false,
        'enablecompletion' => false,
        'enddate' => false,
        'enrollmentmethods' => false,
        'filters' => false,
        'format' => false,
        'fullname' => false,
        'groupmode' => false,
        'groupmodeforce' => false,
        'id' => false,
        'idnumber' => false,
        'lang' => false,
        'legacyfiles' => false,
        'marker' => false,
        'maxbytes' => false,
        'newsitems' => false,
        'overviewfiles' => false,
        'requested' => false,
        'shortname' => false,
        'showactivitydates' => false,
        'showcompletionconditions' => false,
        'showgrades' => false,
        'showreports' => false,
        'sortorder' => false,
        'startdate' => false,
        'summary' => false,
        'summaryfiles' => false,
        'summaryformat' => false,
        'theme' => false,
        'timecreated' => false,
        'timemodified' => false,
        'visible' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cacherev' => 'cacherev',
        'calendartype' => 'calendartype',
        'categoryid' => 'categoryid',
        'categoryname' => 'categoryname',
        'completionnotify' => 'completionnotify',
        'contacts' => 'contacts',
        'courseformatoptions' => 'courseformatoptions',
        'courseimage' => 'courseimage',
        'customfields' => 'customfields',
        'defaultgroupingid' => 'defaultgroupingid',
        'displayname' => 'displayname',
        'enablecompletion' => 'enablecompletion',
        'enddate' => 'enddate',
        'enrollmentmethods' => 'enrollmentmethods',
        'filters' => 'filters',
        'format' => 'format',
        'fullname' => 'fullname',
        'groupmode' => 'groupmode',
        'groupmodeforce' => 'groupmodeforce',
        'id' => 'id',
        'idnumber' => 'idnumber',
        'lang' => 'lang',
        'legacyfiles' => 'legacyfiles',
        'marker' => 'marker',
        'maxbytes' => 'maxbytes',
        'newsitems' => 'newsitems',
        'overviewfiles' => 'overviewfiles',
        'requested' => 'requested',
        'shortname' => 'shortname',
        'showactivitydates' => 'showactivitydates',
        'showcompletionconditions' => 'showcompletionconditions',
        'showgrades' => 'showgrades',
        'showreports' => 'showreports',
        'sortorder' => 'sortorder',
        'startdate' => 'startdate',
        'summary' => 'summary',
        'summaryfiles' => 'summaryfiles',
        'summaryformat' => 'summaryformat',
        'theme' => 'theme',
        'timecreated' => 'timecreated',
        'timemodified' => 'timemodified',
        'visible' => 'visible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cacherev' => 'setCacherev',
        'calendartype' => 'setCalendartype',
        'categoryid' => 'setCategoryid',
        'categoryname' => 'setCategoryname',
        'completionnotify' => 'setCompletionnotify',
        'contacts' => 'setContacts',
        'courseformatoptions' => 'setCourseformatoptions',
        'courseimage' => 'setCourseimage',
        'customfields' => 'setCustomfields',
        'defaultgroupingid' => 'setDefaultgroupingid',
        'displayname' => 'setDisplayname',
        'enablecompletion' => 'setEnablecompletion',
        'enddate' => 'setEnddate',
        'enrollmentmethods' => 'setEnrollmentmethods',
        'filters' => 'setFilters',
        'format' => 'setFormat',
        'fullname' => 'setFullname',
        'groupmode' => 'setGroupmode',
        'groupmodeforce' => 'setGroupmodeforce',
        'id' => 'setId',
        'idnumber' => 'setIdnumber',
        'lang' => 'setLang',
        'legacyfiles' => 'setLegacyfiles',
        'marker' => 'setMarker',
        'maxbytes' => 'setMaxbytes',
        'newsitems' => 'setNewsitems',
        'overviewfiles' => 'setOverviewfiles',
        'requested' => 'setRequested',
        'shortname' => 'setShortname',
        'showactivitydates' => 'setShowactivitydates',
        'showcompletionconditions' => 'setShowcompletionconditions',
        'showgrades' => 'setShowgrades',
        'showreports' => 'setShowreports',
        'sortorder' => 'setSortorder',
        'startdate' => 'setStartdate',
        'summary' => 'setSummary',
        'summaryfiles' => 'setSummaryfiles',
        'summaryformat' => 'setSummaryformat',
        'theme' => 'setTheme',
        'timecreated' => 'setTimecreated',
        'timemodified' => 'setTimemodified',
        'visible' => 'setVisible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cacherev' => 'getCacherev',
        'calendartype' => 'getCalendartype',
        'categoryid' => 'getCategoryid',
        'categoryname' => 'getCategoryname',
        'completionnotify' => 'getCompletionnotify',
        'contacts' => 'getContacts',
        'courseformatoptions' => 'getCourseformatoptions',
        'courseimage' => 'getCourseimage',
        'customfields' => 'getCustomfields',
        'defaultgroupingid' => 'getDefaultgroupingid',
        'displayname' => 'getDisplayname',
        'enablecompletion' => 'getEnablecompletion',
        'enddate' => 'getEnddate',
        'enrollmentmethods' => 'getEnrollmentmethods',
        'filters' => 'getFilters',
        'format' => 'getFormat',
        'fullname' => 'getFullname',
        'groupmode' => 'getGroupmode',
        'groupmodeforce' => 'getGroupmodeforce',
        'id' => 'getId',
        'idnumber' => 'getIdnumber',
        'lang' => 'getLang',
        'legacyfiles' => 'getLegacyfiles',
        'marker' => 'getMarker',
        'maxbytes' => 'getMaxbytes',
        'newsitems' => 'getNewsitems',
        'overviewfiles' => 'getOverviewfiles',
        'requested' => 'getRequested',
        'shortname' => 'getShortname',
        'showactivitydates' => 'getShowactivitydates',
        'showcompletionconditions' => 'getShowcompletionconditions',
        'showgrades' => 'getShowgrades',
        'showreports' => 'getShowreports',
        'sortorder' => 'getSortorder',
        'startdate' => 'getStartdate',
        'summary' => 'getSummary',
        'summaryfiles' => 'getSummaryfiles',
        'summaryformat' => 'getSummaryformat',
        'theme' => 'getTheme',
        'timecreated' => 'getTimecreated',
        'timemodified' => 'getTimemodified',
        'visible' => 'getVisible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cacherev', $data ?? [], null);
        $this->setIfExists('calendartype', $data ?? [], 'null');
        $this->setIfExists('categoryid', $data ?? [], null);
        $this->setIfExists('categoryname', $data ?? [], 'null');
        $this->setIfExists('completionnotify', $data ?? [], null);
        $this->setIfExists('contacts', $data ?? [], null);
        $this->setIfExists('courseformatoptions', $data ?? [], null);
        $this->setIfExists('courseimage', $data ?? [], 'null');
        $this->setIfExists('customfields', $data ?? [], null);
        $this->setIfExists('defaultgroupingid', $data ?? [], null);
        $this->setIfExists('displayname', $data ?? [], 'null');
        $this->setIfExists('enablecompletion', $data ?? [], null);
        $this->setIfExists('enddate', $data ?? [], null);
        $this->setIfExists('enrollmentmethods', $data ?? [], null);
        $this->setIfExists('filters', $data ?? [], null);
        $this->setIfExists('format', $data ?? [], 'null');
        $this->setIfExists('fullname', $data ?? [], 'null');
        $this->setIfExists('groupmode', $data ?? [], null);
        $this->setIfExists('groupmodeforce', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('idnumber', $data ?? [], 'null');
        $this->setIfExists('lang', $data ?? [], 'null');
        $this->setIfExists('legacyfiles', $data ?? [], null);
        $this->setIfExists('marker', $data ?? [], null);
        $this->setIfExists('maxbytes', $data ?? [], null);
        $this->setIfExists('newsitems', $data ?? [], null);
        $this->setIfExists('overviewfiles', $data ?? [], null);
        $this->setIfExists('requested', $data ?? [], null);
        $this->setIfExists('shortname', $data ?? [], null);
        $this->setIfExists('showactivitydates', $data ?? [], null);
        $this->setIfExists('showcompletionconditions', $data ?? [], null);
        $this->setIfExists('showgrades', $data ?? [], null);
        $this->setIfExists('showreports', $data ?? [], null);
        $this->setIfExists('sortorder', $data ?? [], null);
        $this->setIfExists('startdate', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('summaryfiles', $data ?? [], null);
        $this->setIfExists('summaryformat', $data ?? [], null);
        $this->setIfExists('theme', $data ?? [], 'null');
        $this->setIfExists('timecreated', $data ?? [], null);
        $this->setIfExists('timemodified', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cacherev
     *
     * @return int|null
     */
    public function getCacherev()
    {
        return $this->container['cacherev'];
    }

    /**
     * Sets cacherev
     *
     * @param int|null $cacherev Cache revision number
     *
     * @return self
     */
    public function setCacherev($cacherev)
    {
        if (is_null($cacherev)) {
            throw new \InvalidArgumentException('non-nullable cacherev cannot be null');
        }
        $this->container['cacherev'] = $cacherev;

        return $this;
    }

    /**
     * Gets calendartype
     *
     * @return string|null
     */
    public function getCalendartype()
    {
        return $this->container['calendartype'];
    }

    /**
     * Sets calendartype
     *
     * @param string|null $calendartype Calendar type
     *
     * @return self
     */
    public function setCalendartype($calendartype)
    {
        if (is_null($calendartype)) {
            throw new \InvalidArgumentException('non-nullable calendartype cannot be null');
        }
        $this->container['calendartype'] = $calendartype;

        return $this;
    }

    /**
     * Gets categoryid
     *
     * @return int|null
     */
    public function getCategoryid()
    {
        return $this->container['categoryid'];
    }

    /**
     * Sets categoryid
     *
     * @param int|null $categoryid category id
     *
     * @return self
     */
    public function setCategoryid($categoryid)
    {
        if (is_null($categoryid)) {
            throw new \InvalidArgumentException('non-nullable categoryid cannot be null');
        }
        $this->container['categoryid'] = $categoryid;

        return $this;
    }

    /**
     * Gets categoryname
     *
     * @return string|null
     */
    public function getCategoryname()
    {
        return $this->container['categoryname'];
    }

    /**
     * Sets categoryname
     *
     * @param string|null $categoryname category name
     *
     * @return self
     */
    public function setCategoryname($categoryname)
    {
        if (is_null($categoryname)) {
            throw new \InvalidArgumentException('non-nullable categoryname cannot be null');
        }
        $this->container['categoryname'] = $categoryname;

        return $this;
    }

    /**
     * Gets completionnotify
     *
     * @return int|null
     */
    public function getCompletionnotify()
    {
        return $this->container['completionnotify'];
    }

    /**
     * Sets completionnotify
     *
     * @param int|null $completionnotify 1: yes 0: no
     *
     * @return self
     */
    public function setCompletionnotify($completionnotify)
    {
        if (is_null($completionnotify)) {
            throw new \InvalidArgumentException('non-nullable completionnotify cannot be null');
        }
        $this->container['completionnotify'] = $completionnotify;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \OpenAPI\Client\Model\CoreCourseGetCoursesByField200ResponseCoursesInnerContactsInner[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \OpenAPI\Client\Model\CoreCourseGetCoursesByField200ResponseCoursesInnerContactsInner[]|null $contacts contacts
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets courseformatoptions
     *
     * @return \OpenAPI\Client\Model\CoreCourseGetCoursesByField200ResponseCoursesInnerCourseformatoptionsInner[]|null
     */
    public function getCourseformatoptions()
    {
        return $this->container['courseformatoptions'];
    }

    /**
     * Sets courseformatoptions
     *
     * @param \OpenAPI\Client\Model\CoreCourseGetCoursesByField200ResponseCoursesInnerCourseformatoptionsInner[]|null $courseformatoptions courseformatoptions
     *
     * @return self
     */
    public function setCourseformatoptions($courseformatoptions)
    {
        if (is_null($courseformatoptions)) {
            throw new \InvalidArgumentException('non-nullable courseformatoptions cannot be null');
        }
        $this->container['courseformatoptions'] = $courseformatoptions;

        return $this;
    }

    /**
     * Gets courseimage
     *
     * @return string|null
     */
    public function getCourseimage()
    {
        return $this->container['courseimage'];
    }

    /**
     * Sets courseimage
     *
     * @param string|null $courseimage Course image
     *
     * @return self
     */
    public function setCourseimage($courseimage)
    {
        if (is_null($courseimage)) {
            throw new \InvalidArgumentException('non-nullable courseimage cannot be null');
        }
        $this->container['courseimage'] = $courseimage;

        return $this;
    }

    /**
     * Gets customfields
     *
     * @return \OpenAPI\Client\Model\CoreCourseGetCoursesByField200ResponseCoursesInnerCustomfieldsInner[]|null
     */
    public function getCustomfields()
    {
        return $this->container['customfields'];
    }

    /**
     * Sets customfields
     *
     * @param \OpenAPI\Client\Model\CoreCourseGetCoursesByField200ResponseCoursesInnerCustomfieldsInner[]|null $customfields customfields
     *
     * @return self
     */
    public function setCustomfields($customfields)
    {
        if (is_null($customfields)) {
            throw new \InvalidArgumentException('non-nullable customfields cannot be null');
        }
        $this->container['customfields'] = $customfields;

        return $this;
    }

    /**
     * Gets defaultgroupingid
     *
     * @return int|null
     */
    public function getDefaultgroupingid()
    {
        return $this->container['defaultgroupingid'];
    }

    /**
     * Sets defaultgroupingid
     *
     * @param int|null $defaultgroupingid default grouping id
     *
     * @return self
     */
    public function setDefaultgroupingid($defaultgroupingid)
    {
        if (is_null($defaultgroupingid)) {
            throw new \InvalidArgumentException('non-nullable defaultgroupingid cannot be null');
        }
        $this->container['defaultgroupingid'] = $defaultgroupingid;

        return $this;
    }

    /**
     * Gets displayname
     *
     * @return string|null
     */
    public function getDisplayname()
    {
        return $this->container['displayname'];
    }

    /**
     * Sets displayname
     *
     * @param string|null $displayname course display name
     *
     * @return self
     */
    public function setDisplayname($displayname)
    {
        if (is_null($displayname)) {
            throw new \InvalidArgumentException('non-nullable displayname cannot be null');
        }
        $this->container['displayname'] = $displayname;

        return $this;
    }

    /**
     * Gets enablecompletion
     *
     * @return int|null
     */
    public function getEnablecompletion()
    {
        return $this->container['enablecompletion'];
    }

    /**
     * Sets enablecompletion
     *
     * @param int|null $enablecompletion Completion enabled? 1: yes 0: no
     *
     * @return self
     */
    public function setEnablecompletion($enablecompletion)
    {
        if (is_null($enablecompletion)) {
            throw new \InvalidArgumentException('non-nullable enablecompletion cannot be null');
        }
        $this->container['enablecompletion'] = $enablecompletion;

        return $this;
    }

    /**
     * Gets enddate
     *
     * @return int|null
     */
    public function getEnddate()
    {
        return $this->container['enddate'];
    }

    /**
     * Sets enddate
     *
     * @param int|null $enddate Timestamp when the course end
     *
     * @return self
     */
    public function setEnddate($enddate)
    {
        if (is_null($enddate)) {
            throw new \InvalidArgumentException('non-nullable enddate cannot be null');
        }
        $this->container['enddate'] = $enddate;

        return $this;
    }

    /**
     * Gets enrollmentmethods
     *
     * @return object[]|null
     */
    public function getEnrollmentmethods()
    {
        return $this->container['enrollmentmethods'];
    }

    /**
     * Sets enrollmentmethods
     *
     * @param object[]|null $enrollmentmethods enrollmentmethods
     *
     * @return self
     */
    public function setEnrollmentmethods($enrollmentmethods)
    {
        if (is_null($enrollmentmethods)) {
            throw new \InvalidArgumentException('non-nullable enrollmentmethods cannot be null');
        }
        $this->container['enrollmentmethods'] = $enrollmentmethods;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \OpenAPI\Client\Model\CoreCourseGetCoursesByField200ResponseCoursesInnerFiltersInner[]|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \OpenAPI\Client\Model\CoreCourseGetCoursesByField200ResponseCoursesInnerFiltersInner[]|null $filters filters
     *
     * @return self
     */
    public function setFilters($filters)
    {
        if (is_null($filters)) {
            throw new \InvalidArgumentException('non-nullable filters cannot be null');
        }
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string|null $format Course format: weeks, topics, social, site,..
     *
     * @return self
     */
    public function setFormat($format)
    {
        if (is_null($format)) {
            throw new \InvalidArgumentException('non-nullable format cannot be null');
        }
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets fullname
     *
     * @return string|null
     */
    public function getFullname()
    {
        return $this->container['fullname'];
    }

    /**
     * Sets fullname
     *
     * @param string|null $fullname course full name
     *
     * @return self
     */
    public function setFullname($fullname)
    {
        if (is_null($fullname)) {
            throw new \InvalidArgumentException('non-nullable fullname cannot be null');
        }
        $this->container['fullname'] = $fullname;

        return $this;
    }

    /**
     * Gets groupmode
     *
     * @return int|null
     */
    public function getGroupmode()
    {
        return $this->container['groupmode'];
    }

    /**
     * Sets groupmode
     *
     * @param int|null $groupmode no group, separate, visible
     *
     * @return self
     */
    public function setGroupmode($groupmode)
    {
        if (is_null($groupmode)) {
            throw new \InvalidArgumentException('non-nullable groupmode cannot be null');
        }
        $this->container['groupmode'] = $groupmode;

        return $this;
    }

    /**
     * Gets groupmodeforce
     *
     * @return int|null
     */
    public function getGroupmodeforce()
    {
        return $this->container['groupmodeforce'];
    }

    /**
     * Sets groupmodeforce
     *
     * @param int|null $groupmodeforce 1: yes, 0: no
     *
     * @return self
     */
    public function setGroupmodeforce($groupmodeforce)
    {
        if (is_null($groupmodeforce)) {
            throw new \InvalidArgumentException('non-nullable groupmodeforce cannot be null');
        }
        $this->container['groupmodeforce'] = $groupmodeforce;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id course id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets idnumber
     *
     * @return string|null
     */
    public function getIdnumber()
    {
        return $this->container['idnumber'];
    }

    /**
     * Sets idnumber
     *
     * @param string|null $idnumber Id number
     *
     * @return self
     */
    public function setIdnumber($idnumber)
    {
        if (is_null($idnumber)) {
            throw new \InvalidArgumentException('non-nullable idnumber cannot be null');
        }
        $this->container['idnumber'] = $idnumber;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang Forced course language
     *
     * @return self
     */
    public function setLang($lang)
    {
        if (is_null($lang)) {
            throw new \InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets legacyfiles
     *
     * @return int|null
     */
    public function getLegacyfiles()
    {
        return $this->container['legacyfiles'];
    }

    /**
     * Sets legacyfiles
     *
     * @param int|null $legacyfiles If legacy files are enabled
     *
     * @return self
     */
    public function setLegacyfiles($legacyfiles)
    {
        if (is_null($legacyfiles)) {
            throw new \InvalidArgumentException('non-nullable legacyfiles cannot be null');
        }
        $this->container['legacyfiles'] = $legacyfiles;

        return $this;
    }

    /**
     * Gets marker
     *
     * @return int|null
     */
    public function getMarker()
    {
        return $this->container['marker'];
    }

    /**
     * Sets marker
     *
     * @param int|null $marker Current course marker
     *
     * @return self
     */
    public function setMarker($marker)
    {
        if (is_null($marker)) {
            throw new \InvalidArgumentException('non-nullable marker cannot be null');
        }
        $this->container['marker'] = $marker;

        return $this;
    }

    /**
     * Gets maxbytes
     *
     * @return int|null
     */
    public function getMaxbytes()
    {
        return $this->container['maxbytes'];
    }

    /**
     * Sets maxbytes
     *
     * @param int|null $maxbytes Largest size of file that can be uploaded into
     *
     * @return self
     */
    public function setMaxbytes($maxbytes)
    {
        if (is_null($maxbytes)) {
            throw new \InvalidArgumentException('non-nullable maxbytes cannot be null');
        }
        $this->container['maxbytes'] = $maxbytes;

        return $this;
    }

    /**
     * Gets newsitems
     *
     * @return int|null
     */
    public function getNewsitems()
    {
        return $this->container['newsitems'];
    }

    /**
     * Sets newsitems
     *
     * @param int|null $newsitems Number of recent items appearing on the course page
     *
     * @return self
     */
    public function setNewsitems($newsitems)
    {
        if (is_null($newsitems)) {
            throw new \InvalidArgumentException('non-nullable newsitems cannot be null');
        }
        $this->container['newsitems'] = $newsitems;

        return $this;
    }

    /**
     * Gets overviewfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null
     */
    public function getOverviewfiles()
    {
        return $this->container['overviewfiles'];
    }

    /**
     * Sets overviewfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null $overviewfiles overviewfiles
     *
     * @return self
     */
    public function setOverviewfiles($overviewfiles)
    {
        if (is_null($overviewfiles)) {
            throw new \InvalidArgumentException('non-nullable overviewfiles cannot be null');
        }
        $this->container['overviewfiles'] = $overviewfiles;

        return $this;
    }

    /**
     * Gets requested
     *
     * @return int|null
     */
    public function getRequested()
    {
        return $this->container['requested'];
    }

    /**
     * Sets requested
     *
     * @param int|null $requested If is a requested course
     *
     * @return self
     */
    public function setRequested($requested)
    {
        if (is_null($requested)) {
            throw new \InvalidArgumentException('non-nullable requested cannot be null');
        }
        $this->container['requested'] = $requested;

        return $this;
    }

    /**
     * Gets shortname
     *
     * @return string|null
     */
    public function getShortname()
    {
        return $this->container['shortname'];
    }

    /**
     * Sets shortname
     *
     * @param string|null $shortname course short name
     *
     * @return self
     */
    public function setShortname($shortname)
    {
        if (is_null($shortname)) {
            throw new \InvalidArgumentException('non-nullable shortname cannot be null');
        }
        $this->container['shortname'] = $shortname;

        return $this;
    }

    /**
     * Gets showactivitydates
     *
     * @return bool|null
     */
    public function getShowactivitydates()
    {
        return $this->container['showactivitydates'];
    }

    /**
     * Sets showactivitydates
     *
     * @param bool|null $showactivitydates Whether the activity dates are shown or not
     *
     * @return self
     */
    public function setShowactivitydates($showactivitydates)
    {
        if (is_null($showactivitydates)) {
            throw new \InvalidArgumentException('non-nullable showactivitydates cannot be null');
        }
        $this->container['showactivitydates'] = $showactivitydates;

        return $this;
    }

    /**
     * Gets showcompletionconditions
     *
     * @return bool|null
     */
    public function getShowcompletionconditions()
    {
        return $this->container['showcompletionconditions'];
    }

    /**
     * Sets showcompletionconditions
     *
     * @param bool|null $showcompletionconditions Whether the activity completion conditions are shown or not
     *
     * @return self
     */
    public function setShowcompletionconditions($showcompletionconditions)
    {
        if (is_null($showcompletionconditions)) {
            throw new \InvalidArgumentException('non-nullable showcompletionconditions cannot be null');
        }
        $this->container['showcompletionconditions'] = $showcompletionconditions;

        return $this;
    }

    /**
     * Gets showgrades
     *
     * @return int|null
     */
    public function getShowgrades()
    {
        return $this->container['showgrades'];
    }

    /**
     * Sets showgrades
     *
     * @param int|null $showgrades 1 if grades are shown, otherwise 0
     *
     * @return self
     */
    public function setShowgrades($showgrades)
    {
        if (is_null($showgrades)) {
            throw new \InvalidArgumentException('non-nullable showgrades cannot be null');
        }
        $this->container['showgrades'] = $showgrades;

        return $this;
    }

    /**
     * Gets showreports
     *
     * @return int|null
     */
    public function getShowreports()
    {
        return $this->container['showreports'];
    }

    /**
     * Sets showreports
     *
     * @param int|null $showreports Are activity report shown (yes = 1, no =0)
     *
     * @return self
     */
    public function setShowreports($showreports)
    {
        if (is_null($showreports)) {
            throw new \InvalidArgumentException('non-nullable showreports cannot be null');
        }
        $this->container['showreports'] = $showreports;

        return $this;
    }

    /**
     * Gets sortorder
     *
     * @return int|null
     */
    public function getSortorder()
    {
        return $this->container['sortorder'];
    }

    /**
     * Sets sortorder
     *
     * @param int|null $sortorder Sort order in the category
     *
     * @return self
     */
    public function setSortorder($sortorder)
    {
        if (is_null($sortorder)) {
            throw new \InvalidArgumentException('non-nullable sortorder cannot be null');
        }
        $this->container['sortorder'] = $sortorder;

        return $this;
    }

    /**
     * Gets startdate
     *
     * @return int|null
     */
    public function getStartdate()
    {
        return $this->container['startdate'];
    }

    /**
     * Sets startdate
     *
     * @param int|null $startdate Timestamp when the course start
     *
     * @return self
     */
    public function setStartdate($startdate)
    {
        if (is_null($startdate)) {
            throw new \InvalidArgumentException('non-nullable startdate cannot be null');
        }
        $this->container['startdate'] = $startdate;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            throw new \InvalidArgumentException('non-nullable summary cannot be null');
        }
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets summaryfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null
     */
    public function getSummaryfiles()
    {
        return $this->container['summaryfiles'];
    }

    /**
     * Sets summaryfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner[]|null $summaryfiles summaryfiles
     *
     * @return self
     */
    public function setSummaryfiles($summaryfiles)
    {
        if (is_null($summaryfiles)) {
            throw new \InvalidArgumentException('non-nullable summaryfiles cannot be null');
        }
        $this->container['summaryfiles'] = $summaryfiles;

        return $this;
    }

    /**
     * Gets summaryformat
     *
     * @return int|null
     */
    public function getSummaryformat()
    {
        return $this->container['summaryformat'];
    }

    /**
     * Sets summaryformat
     *
     * @param int|null $summaryformat summary format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setSummaryformat($summaryformat)
    {
        if (is_null($summaryformat)) {
            throw new \InvalidArgumentException('non-nullable summaryformat cannot be null');
        }
        $this->container['summaryformat'] = $summaryformat;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return string|null
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param string|null $theme Fame of the forced theme
     *
     * @return self
     */
    public function setTheme($theme)
    {
        if (is_null($theme)) {
            throw new \InvalidArgumentException('non-nullable theme cannot be null');
        }
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return int|null
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param int|null $timecreated Time when the course was created
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified Last time  the course was updated
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return int|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param int|null $visible 1: available to student, 0:not available
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


