<?php
/**
 * ModDataGetDatabasesByCourses200ResponseDatabasesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModDataGetDatabasesByCourses200ResponseDatabasesInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModDataGetDatabasesByCourses200ResponseDatabasesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_data_get_databases_by_courses_200_response_databases_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'addtemplate' => 'string',
        'approval' => 'bool',
        'asearchtemplate' => 'string',
        'assessed' => 'int',
        'assesstimefinish' => 'int',
        'assesstimestart' => 'int',
        'comments' => 'bool',
        'course' => 'int',
        'coursemodule' => 'int',
        'csstemplate' => 'string',
        'defaultsort' => 'int',
        'defaultsortdir' => 'int',
        'editany' => 'bool',
        'id' => 'int',
        'intro' => 'string',
        'introfiles' => '\OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]',
        'introformat' => 'int',
        'jstemplate' => 'string',
        'lang' => 'string',
        'listtemplate' => 'string',
        'listtemplatefooter' => 'string',
        'listtemplateheader' => 'string',
        'manageapproved' => 'bool',
        'maxentries' => 'int',
        'name' => 'string',
        'notification' => 'int',
        'requiredentries' => 'int',
        'requiredentriestoview' => 'int',
        'rssarticles' => 'int',
        'rsstemplate' => 'string',
        'rsstitletemplate' => 'string',
        'scale' => 'int',
        'singletemplate' => 'string',
        'timeavailablefrom' => 'int',
        'timeavailableto' => 'int',
        'timemodified' => 'int',
        'timeviewfrom' => 'int',
        'timeviewto' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'addtemplate' => null,
        'approval' => null,
        'asearchtemplate' => null,
        'assessed' => null,
        'assesstimefinish' => null,
        'assesstimestart' => null,
        'comments' => null,
        'course' => null,
        'coursemodule' => null,
        'csstemplate' => null,
        'defaultsort' => null,
        'defaultsortdir' => null,
        'editany' => null,
        'id' => null,
        'intro' => null,
        'introfiles' => null,
        'introformat' => null,
        'jstemplate' => null,
        'lang' => null,
        'listtemplate' => null,
        'listtemplatefooter' => null,
        'listtemplateheader' => null,
        'manageapproved' => null,
        'maxentries' => null,
        'name' => null,
        'notification' => null,
        'requiredentries' => null,
        'requiredentriestoview' => null,
        'rssarticles' => null,
        'rsstemplate' => null,
        'rsstitletemplate' => null,
        'scale' => null,
        'singletemplate' => null,
        'timeavailablefrom' => null,
        'timeavailableto' => null,
        'timemodified' => null,
        'timeviewfrom' => null,
        'timeviewto' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'addtemplate' => false,
        'approval' => false,
        'asearchtemplate' => false,
        'assessed' => false,
        'assesstimefinish' => false,
        'assesstimestart' => false,
        'comments' => false,
        'course' => false,
        'coursemodule' => false,
        'csstemplate' => false,
        'defaultsort' => false,
        'defaultsortdir' => false,
        'editany' => false,
        'id' => false,
        'intro' => false,
        'introfiles' => false,
        'introformat' => false,
        'jstemplate' => false,
        'lang' => false,
        'listtemplate' => false,
        'listtemplatefooter' => false,
        'listtemplateheader' => false,
        'manageapproved' => false,
        'maxentries' => false,
        'name' => false,
        'notification' => false,
        'requiredentries' => false,
        'requiredentriestoview' => false,
        'rssarticles' => false,
        'rsstemplate' => false,
        'rsstitletemplate' => false,
        'scale' => false,
        'singletemplate' => false,
        'timeavailablefrom' => false,
        'timeavailableto' => false,
        'timemodified' => false,
        'timeviewfrom' => false,
        'timeviewto' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addtemplate' => 'addtemplate',
        'approval' => 'approval',
        'asearchtemplate' => 'asearchtemplate',
        'assessed' => 'assessed',
        'assesstimefinish' => 'assesstimefinish',
        'assesstimestart' => 'assesstimestart',
        'comments' => 'comments',
        'course' => 'course',
        'coursemodule' => 'coursemodule',
        'csstemplate' => 'csstemplate',
        'defaultsort' => 'defaultsort',
        'defaultsortdir' => 'defaultsortdir',
        'editany' => 'editany',
        'id' => 'id',
        'intro' => 'intro',
        'introfiles' => 'introfiles',
        'introformat' => 'introformat',
        'jstemplate' => 'jstemplate',
        'lang' => 'lang',
        'listtemplate' => 'listtemplate',
        'listtemplatefooter' => 'listtemplatefooter',
        'listtemplateheader' => 'listtemplateheader',
        'manageapproved' => 'manageapproved',
        'maxentries' => 'maxentries',
        'name' => 'name',
        'notification' => 'notification',
        'requiredentries' => 'requiredentries',
        'requiredentriestoview' => 'requiredentriestoview',
        'rssarticles' => 'rssarticles',
        'rsstemplate' => 'rsstemplate',
        'rsstitletemplate' => 'rsstitletemplate',
        'scale' => 'scale',
        'singletemplate' => 'singletemplate',
        'timeavailablefrom' => 'timeavailablefrom',
        'timeavailableto' => 'timeavailableto',
        'timemodified' => 'timemodified',
        'timeviewfrom' => 'timeviewfrom',
        'timeviewto' => 'timeviewto'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addtemplate' => 'setAddtemplate',
        'approval' => 'setApproval',
        'asearchtemplate' => 'setAsearchtemplate',
        'assessed' => 'setAssessed',
        'assesstimefinish' => 'setAssesstimefinish',
        'assesstimestart' => 'setAssesstimestart',
        'comments' => 'setComments',
        'course' => 'setCourse',
        'coursemodule' => 'setCoursemodule',
        'csstemplate' => 'setCsstemplate',
        'defaultsort' => 'setDefaultsort',
        'defaultsortdir' => 'setDefaultsortdir',
        'editany' => 'setEditany',
        'id' => 'setId',
        'intro' => 'setIntro',
        'introfiles' => 'setIntrofiles',
        'introformat' => 'setIntroformat',
        'jstemplate' => 'setJstemplate',
        'lang' => 'setLang',
        'listtemplate' => 'setListtemplate',
        'listtemplatefooter' => 'setListtemplatefooter',
        'listtemplateheader' => 'setListtemplateheader',
        'manageapproved' => 'setManageapproved',
        'maxentries' => 'setMaxentries',
        'name' => 'setName',
        'notification' => 'setNotification',
        'requiredentries' => 'setRequiredentries',
        'requiredentriestoview' => 'setRequiredentriestoview',
        'rssarticles' => 'setRssarticles',
        'rsstemplate' => 'setRsstemplate',
        'rsstitletemplate' => 'setRsstitletemplate',
        'scale' => 'setScale',
        'singletemplate' => 'setSingletemplate',
        'timeavailablefrom' => 'setTimeavailablefrom',
        'timeavailableto' => 'setTimeavailableto',
        'timemodified' => 'setTimemodified',
        'timeviewfrom' => 'setTimeviewfrom',
        'timeviewto' => 'setTimeviewto'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addtemplate' => 'getAddtemplate',
        'approval' => 'getApproval',
        'asearchtemplate' => 'getAsearchtemplate',
        'assessed' => 'getAssessed',
        'assesstimefinish' => 'getAssesstimefinish',
        'assesstimestart' => 'getAssesstimestart',
        'comments' => 'getComments',
        'course' => 'getCourse',
        'coursemodule' => 'getCoursemodule',
        'csstemplate' => 'getCsstemplate',
        'defaultsort' => 'getDefaultsort',
        'defaultsortdir' => 'getDefaultsortdir',
        'editany' => 'getEditany',
        'id' => 'getId',
        'intro' => 'getIntro',
        'introfiles' => 'getIntrofiles',
        'introformat' => 'getIntroformat',
        'jstemplate' => 'getJstemplate',
        'lang' => 'getLang',
        'listtemplate' => 'getListtemplate',
        'listtemplatefooter' => 'getListtemplatefooter',
        'listtemplateheader' => 'getListtemplateheader',
        'manageapproved' => 'getManageapproved',
        'maxentries' => 'getMaxentries',
        'name' => 'getName',
        'notification' => 'getNotification',
        'requiredentries' => 'getRequiredentries',
        'requiredentriestoview' => 'getRequiredentriestoview',
        'rssarticles' => 'getRssarticles',
        'rsstemplate' => 'getRsstemplate',
        'rsstitletemplate' => 'getRsstitletemplate',
        'scale' => 'getScale',
        'singletemplate' => 'getSingletemplate',
        'timeavailablefrom' => 'getTimeavailablefrom',
        'timeavailableto' => 'getTimeavailableto',
        'timemodified' => 'getTimemodified',
        'timeviewfrom' => 'getTimeviewfrom',
        'timeviewto' => 'getTimeviewto'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('addtemplate', $data ?? [], 'null');
        $this->setIfExists('approval', $data ?? [], null);
        $this->setIfExists('asearchtemplate', $data ?? [], 'null');
        $this->setIfExists('assessed', $data ?? [], null);
        $this->setIfExists('assesstimefinish', $data ?? [], null);
        $this->setIfExists('assesstimestart', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('course', $data ?? [], null);
        $this->setIfExists('coursemodule', $data ?? [], null);
        $this->setIfExists('csstemplate', $data ?? [], 'null');
        $this->setIfExists('defaultsort', $data ?? [], null);
        $this->setIfExists('defaultsortdir', $data ?? [], null);
        $this->setIfExists('editany', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('intro', $data ?? [], 'null');
        $this->setIfExists('introfiles', $data ?? [], null);
        $this->setIfExists('introformat', $data ?? [], 0);
        $this->setIfExists('jstemplate', $data ?? [], 'null');
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('listtemplate', $data ?? [], 'null');
        $this->setIfExists('listtemplatefooter', $data ?? [], 'null');
        $this->setIfExists('listtemplateheader', $data ?? [], 'null');
        $this->setIfExists('manageapproved', $data ?? [], null);
        $this->setIfExists('maxentries', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], 'null');
        $this->setIfExists('notification', $data ?? [], null);
        $this->setIfExists('requiredentries', $data ?? [], null);
        $this->setIfExists('requiredentriestoview', $data ?? [], null);
        $this->setIfExists('rssarticles', $data ?? [], null);
        $this->setIfExists('rsstemplate', $data ?? [], 'null');
        $this->setIfExists('rsstitletemplate', $data ?? [], 'null');
        $this->setIfExists('scale', $data ?? [], null);
        $this->setIfExists('singletemplate', $data ?? [], 'null');
        $this->setIfExists('timeavailablefrom', $data ?? [], null);
        $this->setIfExists('timeavailableto', $data ?? [], null);
        $this->setIfExists('timemodified', $data ?? [], null);
        $this->setIfExists('timeviewfrom', $data ?? [], null);
        $this->setIfExists('timeviewto', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addtemplate
     *
     * @return string|null
     */
    public function getAddtemplate()
    {
        return $this->container['addtemplate'];
    }

    /**
     * Sets addtemplate
     *
     * @param string|null $addtemplate addtemplate field
     *
     * @return self
     */
    public function setAddtemplate($addtemplate)
    {
        if (is_null($addtemplate)) {
            throw new \InvalidArgumentException('non-nullable addtemplate cannot be null');
        }
        $this->container['addtemplate'] = $addtemplate;

        return $this;
    }

    /**
     * Gets approval
     *
     * @return bool|null
     */
    public function getApproval()
    {
        return $this->container['approval'];
    }

    /**
     * Sets approval
     *
     * @param bool|null $approval approval field
     *
     * @return self
     */
    public function setApproval($approval)
    {
        if (is_null($approval)) {
            throw new \InvalidArgumentException('non-nullable approval cannot be null');
        }
        $this->container['approval'] = $approval;

        return $this;
    }

    /**
     * Gets asearchtemplate
     *
     * @return string|null
     */
    public function getAsearchtemplate()
    {
        return $this->container['asearchtemplate'];
    }

    /**
     * Sets asearchtemplate
     *
     * @param string|null $asearchtemplate asearchtemplate field
     *
     * @return self
     */
    public function setAsearchtemplate($asearchtemplate)
    {
        if (is_null($asearchtemplate)) {
            throw new \InvalidArgumentException('non-nullable asearchtemplate cannot be null');
        }
        $this->container['asearchtemplate'] = $asearchtemplate;

        return $this;
    }

    /**
     * Gets assessed
     *
     * @return int|null
     */
    public function getAssessed()
    {
        return $this->container['assessed'];
    }

    /**
     * Sets assessed
     *
     * @param int|null $assessed assessed field
     *
     * @return self
     */
    public function setAssessed($assessed)
    {
        if (is_null($assessed)) {
            throw new \InvalidArgumentException('non-nullable assessed cannot be null');
        }
        $this->container['assessed'] = $assessed;

        return $this;
    }

    /**
     * Gets assesstimefinish
     *
     * @return int|null
     */
    public function getAssesstimefinish()
    {
        return $this->container['assesstimefinish'];
    }

    /**
     * Sets assesstimefinish
     *
     * @param int|null $assesstimefinish assesstimefinish field
     *
     * @return self
     */
    public function setAssesstimefinish($assesstimefinish)
    {
        if (is_null($assesstimefinish)) {
            throw new \InvalidArgumentException('non-nullable assesstimefinish cannot be null');
        }
        $this->container['assesstimefinish'] = $assesstimefinish;

        return $this;
    }

    /**
     * Gets assesstimestart
     *
     * @return int|null
     */
    public function getAssesstimestart()
    {
        return $this->container['assesstimestart'];
    }

    /**
     * Sets assesstimestart
     *
     * @param int|null $assesstimestart assesstimestart field
     *
     * @return self
     */
    public function setAssesstimestart($assesstimestart)
    {
        if (is_null($assesstimestart)) {
            throw new \InvalidArgumentException('non-nullable assesstimestart cannot be null');
        }
        $this->container['assesstimestart'] = $assesstimestart;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return bool|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param bool|null $comments comments enabled
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets course
     *
     * @return int|null
     */
    public function getCourse()
    {
        return $this->container['course'];
    }

    /**
     * Sets course
     *
     * @param int|null $course Course id
     *
     * @return self
     */
    public function setCourse($course)
    {
        if (is_null($course)) {
            throw new \InvalidArgumentException('non-nullable course cannot be null');
        }
        $this->container['course'] = $course;

        return $this;
    }

    /**
     * Gets coursemodule
     *
     * @return int|null
     */
    public function getCoursemodule()
    {
        return $this->container['coursemodule'];
    }

    /**
     * Sets coursemodule
     *
     * @param int|null $coursemodule coursemodule
     *
     * @return self
     */
    public function setCoursemodule($coursemodule)
    {
        if (is_null($coursemodule)) {
            throw new \InvalidArgumentException('non-nullable coursemodule cannot be null');
        }
        $this->container['coursemodule'] = $coursemodule;

        return $this;
    }

    /**
     * Gets csstemplate
     *
     * @return string|null
     */
    public function getCsstemplate()
    {
        return $this->container['csstemplate'];
    }

    /**
     * Sets csstemplate
     *
     * @param string|null $csstemplate csstemplate field
     *
     * @return self
     */
    public function setCsstemplate($csstemplate)
    {
        if (is_null($csstemplate)) {
            throw new \InvalidArgumentException('non-nullable csstemplate cannot be null');
        }
        $this->container['csstemplate'] = $csstemplate;

        return $this;
    }

    /**
     * Gets defaultsort
     *
     * @return int|null
     */
    public function getDefaultsort()
    {
        return $this->container['defaultsort'];
    }

    /**
     * Sets defaultsort
     *
     * @param int|null $defaultsort defaultsort field
     *
     * @return self
     */
    public function setDefaultsort($defaultsort)
    {
        if (is_null($defaultsort)) {
            throw new \InvalidArgumentException('non-nullable defaultsort cannot be null');
        }
        $this->container['defaultsort'] = $defaultsort;

        return $this;
    }

    /**
     * Gets defaultsortdir
     *
     * @return int|null
     */
    public function getDefaultsortdir()
    {
        return $this->container['defaultsortdir'];
    }

    /**
     * Sets defaultsortdir
     *
     * @param int|null $defaultsortdir defaultsortdir field
     *
     * @return self
     */
    public function setDefaultsortdir($defaultsortdir)
    {
        if (is_null($defaultsortdir)) {
            throw new \InvalidArgumentException('non-nullable defaultsortdir cannot be null');
        }
        $this->container['defaultsortdir'] = $defaultsortdir;

        return $this;
    }

    /**
     * Gets editany
     *
     * @return bool|null
     */
    public function getEditany()
    {
        return $this->container['editany'];
    }

    /**
     * Sets editany
     *
     * @param bool|null $editany editany field (not used any more)
     *
     * @return self
     */
    public function setEditany($editany)
    {
        if (is_null($editany)) {
            throw new \InvalidArgumentException('non-nullable editany cannot be null');
        }
        $this->container['editany'] = $editany;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Database id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets intro
     *
     * @return string|null
     */
    public function getIntro()
    {
        return $this->container['intro'];
    }

    /**
     * Sets intro
     *
     * @param string|null $intro The Database intro
     *
     * @return self
     */
    public function setIntro($intro)
    {
        if (is_null($intro)) {
            throw new \InvalidArgumentException('non-nullable intro cannot be null');
        }
        $this->container['intro'] = $intro;

        return $this;
    }

    /**
     * Gets introfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null
     */
    public function getIntrofiles()
    {
        return $this->container['introfiles'];
    }

    /**
     * Sets introfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null $introfiles introfiles
     *
     * @return self
     */
    public function setIntrofiles($introfiles)
    {
        if (is_null($introfiles)) {
            throw new \InvalidArgumentException('non-nullable introfiles cannot be null');
        }
        $this->container['introfiles'] = $introfiles;

        return $this;
    }

    /**
     * Gets introformat
     *
     * @return int|null
     */
    public function getIntroformat()
    {
        return $this->container['introformat'];
    }

    /**
     * Sets introformat
     *
     * @param int|null $introformat intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setIntroformat($introformat)
    {
        if (is_null($introformat)) {
            throw new \InvalidArgumentException('non-nullable introformat cannot be null');
        }
        $this->container['introformat'] = $introformat;

        return $this;
    }

    /**
     * Gets jstemplate
     *
     * @return string|null
     */
    public function getJstemplate()
    {
        return $this->container['jstemplate'];
    }

    /**
     * Sets jstemplate
     *
     * @param string|null $jstemplate jstemplate field
     *
     * @return self
     */
    public function setJstemplate($jstemplate)
    {
        if (is_null($jstemplate)) {
            throw new \InvalidArgumentException('non-nullable jstemplate cannot be null');
        }
        $this->container['jstemplate'] = $jstemplate;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang Forced activity language
     *
     * @return self
     */
    public function setLang($lang)
    {
        if (is_null($lang)) {
            throw new \InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets listtemplate
     *
     * @return string|null
     */
    public function getListtemplate()
    {
        return $this->container['listtemplate'];
    }

    /**
     * Sets listtemplate
     *
     * @param string|null $listtemplate listtemplate field
     *
     * @return self
     */
    public function setListtemplate($listtemplate)
    {
        if (is_null($listtemplate)) {
            throw new \InvalidArgumentException('non-nullable listtemplate cannot be null');
        }
        $this->container['listtemplate'] = $listtemplate;

        return $this;
    }

    /**
     * Gets listtemplatefooter
     *
     * @return string|null
     */
    public function getListtemplatefooter()
    {
        return $this->container['listtemplatefooter'];
    }

    /**
     * Sets listtemplatefooter
     *
     * @param string|null $listtemplatefooter listtemplatefooter field
     *
     * @return self
     */
    public function setListtemplatefooter($listtemplatefooter)
    {
        if (is_null($listtemplatefooter)) {
            throw new \InvalidArgumentException('non-nullable listtemplatefooter cannot be null');
        }
        $this->container['listtemplatefooter'] = $listtemplatefooter;

        return $this;
    }

    /**
     * Gets listtemplateheader
     *
     * @return string|null
     */
    public function getListtemplateheader()
    {
        return $this->container['listtemplateheader'];
    }

    /**
     * Sets listtemplateheader
     *
     * @param string|null $listtemplateheader listtemplateheader field
     *
     * @return self
     */
    public function setListtemplateheader($listtemplateheader)
    {
        if (is_null($listtemplateheader)) {
            throw new \InvalidArgumentException('non-nullable listtemplateheader cannot be null');
        }
        $this->container['listtemplateheader'] = $listtemplateheader;

        return $this;
    }

    /**
     * Gets manageapproved
     *
     * @return bool|null
     */
    public function getManageapproved()
    {
        return $this->container['manageapproved'];
    }

    /**
     * Sets manageapproved
     *
     * @param bool|null $manageapproved manageapproved field
     *
     * @return self
     */
    public function setManageapproved($manageapproved)
    {
        if (is_null($manageapproved)) {
            throw new \InvalidArgumentException('non-nullable manageapproved cannot be null');
        }
        $this->container['manageapproved'] = $manageapproved;

        return $this;
    }

    /**
     * Gets maxentries
     *
     * @return int|null
     */
    public function getMaxentries()
    {
        return $this->container['maxentries'];
    }

    /**
     * Sets maxentries
     *
     * @param int|null $maxentries maxentries field
     *
     * @return self
     */
    public function setMaxentries($maxentries)
    {
        if (is_null($maxentries)) {
            throw new \InvalidArgumentException('non-nullable maxentries cannot be null');
        }
        $this->container['maxentries'] = $maxentries;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Database name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets notification
     *
     * @return int|null
     */
    public function getNotification()
    {
        return $this->container['notification'];
    }

    /**
     * Sets notification
     *
     * @param int|null $notification notification field (not used any more)
     *
     * @return self
     */
    public function setNotification($notification)
    {
        if (is_null($notification)) {
            throw new \InvalidArgumentException('non-nullable notification cannot be null');
        }
        $this->container['notification'] = $notification;

        return $this;
    }

    /**
     * Gets requiredentries
     *
     * @return int|null
     */
    public function getRequiredentries()
    {
        return $this->container['requiredentries'];
    }

    /**
     * Sets requiredentries
     *
     * @param int|null $requiredentries requiredentries field
     *
     * @return self
     */
    public function setRequiredentries($requiredentries)
    {
        if (is_null($requiredentries)) {
            throw new \InvalidArgumentException('non-nullable requiredentries cannot be null');
        }
        $this->container['requiredentries'] = $requiredentries;

        return $this;
    }

    /**
     * Gets requiredentriestoview
     *
     * @return int|null
     */
    public function getRequiredentriestoview()
    {
        return $this->container['requiredentriestoview'];
    }

    /**
     * Sets requiredentriestoview
     *
     * @param int|null $requiredentriestoview requiredentriestoview field
     *
     * @return self
     */
    public function setRequiredentriestoview($requiredentriestoview)
    {
        if (is_null($requiredentriestoview)) {
            throw new \InvalidArgumentException('non-nullable requiredentriestoview cannot be null');
        }
        $this->container['requiredentriestoview'] = $requiredentriestoview;

        return $this;
    }

    /**
     * Gets rssarticles
     *
     * @return int|null
     */
    public function getRssarticles()
    {
        return $this->container['rssarticles'];
    }

    /**
     * Sets rssarticles
     *
     * @param int|null $rssarticles rssarticles field
     *
     * @return self
     */
    public function setRssarticles($rssarticles)
    {
        if (is_null($rssarticles)) {
            throw new \InvalidArgumentException('non-nullable rssarticles cannot be null');
        }
        $this->container['rssarticles'] = $rssarticles;

        return $this;
    }

    /**
     * Gets rsstemplate
     *
     * @return string|null
     */
    public function getRsstemplate()
    {
        return $this->container['rsstemplate'];
    }

    /**
     * Sets rsstemplate
     *
     * @param string|null $rsstemplate rsstemplate field
     *
     * @return self
     */
    public function setRsstemplate($rsstemplate)
    {
        if (is_null($rsstemplate)) {
            throw new \InvalidArgumentException('non-nullable rsstemplate cannot be null');
        }
        $this->container['rsstemplate'] = $rsstemplate;

        return $this;
    }

    /**
     * Gets rsstitletemplate
     *
     * @return string|null
     */
    public function getRsstitletemplate()
    {
        return $this->container['rsstitletemplate'];
    }

    /**
     * Sets rsstitletemplate
     *
     * @param string|null $rsstitletemplate rsstitletemplate field
     *
     * @return self
     */
    public function setRsstitletemplate($rsstitletemplate)
    {
        if (is_null($rsstitletemplate)) {
            throw new \InvalidArgumentException('non-nullable rsstitletemplate cannot be null');
        }
        $this->container['rsstitletemplate'] = $rsstitletemplate;

        return $this;
    }

    /**
     * Gets scale
     *
     * @return int|null
     */
    public function getScale()
    {
        return $this->container['scale'];
    }

    /**
     * Sets scale
     *
     * @param int|null $scale scale field
     *
     * @return self
     */
    public function setScale($scale)
    {
        if (is_null($scale)) {
            throw new \InvalidArgumentException('non-nullable scale cannot be null');
        }
        $this->container['scale'] = $scale;

        return $this;
    }

    /**
     * Gets singletemplate
     *
     * @return string|null
     */
    public function getSingletemplate()
    {
        return $this->container['singletemplate'];
    }

    /**
     * Sets singletemplate
     *
     * @param string|null $singletemplate singletemplate field
     *
     * @return self
     */
    public function setSingletemplate($singletemplate)
    {
        if (is_null($singletemplate)) {
            throw new \InvalidArgumentException('non-nullable singletemplate cannot be null');
        }
        $this->container['singletemplate'] = $singletemplate;

        return $this;
    }

    /**
     * Gets timeavailablefrom
     *
     * @return int|null
     */
    public function getTimeavailablefrom()
    {
        return $this->container['timeavailablefrom'];
    }

    /**
     * Sets timeavailablefrom
     *
     * @param int|null $timeavailablefrom timeavailablefrom field
     *
     * @return self
     */
    public function setTimeavailablefrom($timeavailablefrom)
    {
        if (is_null($timeavailablefrom)) {
            throw new \InvalidArgumentException('non-nullable timeavailablefrom cannot be null');
        }
        $this->container['timeavailablefrom'] = $timeavailablefrom;

        return $this;
    }

    /**
     * Gets timeavailableto
     *
     * @return int|null
     */
    public function getTimeavailableto()
    {
        return $this->container['timeavailableto'];
    }

    /**
     * Sets timeavailableto
     *
     * @param int|null $timeavailableto timeavailableto field
     *
     * @return self
     */
    public function setTimeavailableto($timeavailableto)
    {
        if (is_null($timeavailableto)) {
            throw new \InvalidArgumentException('non-nullable timeavailableto cannot be null');
        }
        $this->container['timeavailableto'] = $timeavailableto;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified Time modified
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets timeviewfrom
     *
     * @return int|null
     */
    public function getTimeviewfrom()
    {
        return $this->container['timeviewfrom'];
    }

    /**
     * Sets timeviewfrom
     *
     * @param int|null $timeviewfrom timeviewfrom field
     *
     * @return self
     */
    public function setTimeviewfrom($timeviewfrom)
    {
        if (is_null($timeviewfrom)) {
            throw new \InvalidArgumentException('non-nullable timeviewfrom cannot be null');
        }
        $this->container['timeviewfrom'] = $timeviewfrom;

        return $this;
    }

    /**
     * Gets timeviewto
     *
     * @return int|null
     */
    public function getTimeviewto()
    {
        return $this->container['timeviewto'];
    }

    /**
     * Sets timeviewto
     *
     * @param int|null $timeviewto timeviewto field
     *
     * @return self
     */
    public function setTimeviewto($timeviewto)
    {
        if (is_null($timeviewto)) {
            throw new \InvalidArgumentException('non-nullable timeviewto cannot be null');
        }
        $this->container['timeviewto'] = $timeviewto;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


