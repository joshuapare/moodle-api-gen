<?php
/**
 * CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreBadgesGetUserBadgeByHash200ResponseBadgeInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreBadgesGetUserBadgeByHash200ResponseBadgeInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_badges_get_user_badge_by_hash_200_response_badge_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'alignment' => '\OpenAPI\Client\Model\CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner[]',
        'attachment' => 'int',
        'badgeurl' => 'string',
        'courseid' => 'int',
        'dateexpire' => 'int',
        'dateissued' => 'int',
        'description' => 'string',
        'email' => 'string',
        'endorsement' => '\OpenAPI\Client\Model\CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement',
        'expiredate' => 'int',
        'expireperiod' => 'int',
        'id' => 'int',
        'imageauthoremail' => 'string',
        'imageauthorname' => 'string',
        'imageauthorurl' => 'string',
        'imagecaption' => 'string',
        'issuedid' => 'int',
        'issuercontact' => 'string',
        'issuername' => 'string',
        'issuerurl' => 'string',
        'language' => 'string',
        'message' => 'string',
        'messagesubject' => 'string',
        'name' => 'string',
        'nextcron' => 'int',
        'notification' => 'int',
        'relatedbadges' => '\OpenAPI\Client\Model\CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInner[]',
        'status' => 'int',
        'timecreated' => 'int',
        'timemodified' => 'int',
        'type' => 'int',
        'uniquehash' => 'string',
        'usercreated' => 'int',
        'usermodified' => 'int',
        'version' => 'string',
        'visible' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'alignment' => null,
        'attachment' => null,
        'badgeurl' => null,
        'courseid' => null,
        'dateexpire' => null,
        'dateissued' => null,
        'description' => null,
        'email' => null,
        'endorsement' => null,
        'expiredate' => null,
        'expireperiod' => null,
        'id' => null,
        'imageauthoremail' => null,
        'imageauthorname' => null,
        'imageauthorurl' => null,
        'imagecaption' => null,
        'issuedid' => null,
        'issuercontact' => null,
        'issuername' => null,
        'issuerurl' => null,
        'language' => null,
        'message' => null,
        'messagesubject' => null,
        'name' => null,
        'nextcron' => null,
        'notification' => null,
        'relatedbadges' => null,
        'status' => null,
        'timecreated' => null,
        'timemodified' => null,
        'type' => null,
        'uniquehash' => null,
        'usercreated' => null,
        'usermodified' => null,
        'version' => null,
        'visible' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'alignment' => false,
        'attachment' => false,
        'badgeurl' => false,
        'courseid' => false,
        'dateexpire' => false,
        'dateissued' => false,
        'description' => false,
        'email' => false,
        'endorsement' => false,
        'expiredate' => false,
        'expireperiod' => false,
        'id' => false,
        'imageauthoremail' => false,
        'imageauthorname' => false,
        'imageauthorurl' => false,
        'imagecaption' => false,
        'issuedid' => false,
        'issuercontact' => false,
        'issuername' => false,
        'issuerurl' => false,
        'language' => false,
        'message' => false,
        'messagesubject' => false,
        'name' => false,
        'nextcron' => false,
        'notification' => false,
        'relatedbadges' => false,
        'status' => false,
        'timecreated' => false,
        'timemodified' => false,
        'type' => false,
        'uniquehash' => false,
        'usercreated' => false,
        'usermodified' => false,
        'version' => false,
        'visible' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alignment' => 'alignment',
        'attachment' => 'attachment',
        'badgeurl' => 'badgeurl',
        'courseid' => 'courseid',
        'dateexpire' => 'dateexpire',
        'dateissued' => 'dateissued',
        'description' => 'description',
        'email' => 'email',
        'endorsement' => 'endorsement',
        'expiredate' => 'expiredate',
        'expireperiod' => 'expireperiod',
        'id' => 'id',
        'imageauthoremail' => 'imageauthoremail',
        'imageauthorname' => 'imageauthorname',
        'imageauthorurl' => 'imageauthorurl',
        'imagecaption' => 'imagecaption',
        'issuedid' => 'issuedid',
        'issuercontact' => 'issuercontact',
        'issuername' => 'issuername',
        'issuerurl' => 'issuerurl',
        'language' => 'language',
        'message' => 'message',
        'messagesubject' => 'messagesubject',
        'name' => 'name',
        'nextcron' => 'nextcron',
        'notification' => 'notification',
        'relatedbadges' => 'relatedbadges',
        'status' => 'status',
        'timecreated' => 'timecreated',
        'timemodified' => 'timemodified',
        'type' => 'type',
        'uniquehash' => 'uniquehash',
        'usercreated' => 'usercreated',
        'usermodified' => 'usermodified',
        'version' => 'version',
        'visible' => 'visible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alignment' => 'setAlignment',
        'attachment' => 'setAttachment',
        'badgeurl' => 'setBadgeurl',
        'courseid' => 'setCourseid',
        'dateexpire' => 'setDateexpire',
        'dateissued' => 'setDateissued',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'endorsement' => 'setEndorsement',
        'expiredate' => 'setExpiredate',
        'expireperiod' => 'setExpireperiod',
        'id' => 'setId',
        'imageauthoremail' => 'setImageauthoremail',
        'imageauthorname' => 'setImageauthorname',
        'imageauthorurl' => 'setImageauthorurl',
        'imagecaption' => 'setImagecaption',
        'issuedid' => 'setIssuedid',
        'issuercontact' => 'setIssuercontact',
        'issuername' => 'setIssuername',
        'issuerurl' => 'setIssuerurl',
        'language' => 'setLanguage',
        'message' => 'setMessage',
        'messagesubject' => 'setMessagesubject',
        'name' => 'setName',
        'nextcron' => 'setNextcron',
        'notification' => 'setNotification',
        'relatedbadges' => 'setRelatedbadges',
        'status' => 'setStatus',
        'timecreated' => 'setTimecreated',
        'timemodified' => 'setTimemodified',
        'type' => 'setType',
        'uniquehash' => 'setUniquehash',
        'usercreated' => 'setUsercreated',
        'usermodified' => 'setUsermodified',
        'version' => 'setVersion',
        'visible' => 'setVisible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alignment' => 'getAlignment',
        'attachment' => 'getAttachment',
        'badgeurl' => 'getBadgeurl',
        'courseid' => 'getCourseid',
        'dateexpire' => 'getDateexpire',
        'dateissued' => 'getDateissued',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'endorsement' => 'getEndorsement',
        'expiredate' => 'getExpiredate',
        'expireperiod' => 'getExpireperiod',
        'id' => 'getId',
        'imageauthoremail' => 'getImageauthoremail',
        'imageauthorname' => 'getImageauthorname',
        'imageauthorurl' => 'getImageauthorurl',
        'imagecaption' => 'getImagecaption',
        'issuedid' => 'getIssuedid',
        'issuercontact' => 'getIssuercontact',
        'issuername' => 'getIssuername',
        'issuerurl' => 'getIssuerurl',
        'language' => 'getLanguage',
        'message' => 'getMessage',
        'messagesubject' => 'getMessagesubject',
        'name' => 'getName',
        'nextcron' => 'getNextcron',
        'notification' => 'getNotification',
        'relatedbadges' => 'getRelatedbadges',
        'status' => 'getStatus',
        'timecreated' => 'getTimecreated',
        'timemodified' => 'getTimemodified',
        'type' => 'getType',
        'uniquehash' => 'getUniquehash',
        'usercreated' => 'getUsercreated',
        'usermodified' => 'getUsermodified',
        'version' => 'getVersion',
        'visible' => 'getVisible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('alignment', $data ?? [], null);
        $this->setIfExists('attachment', $data ?? [], 1);
        $this->setIfExists('badgeurl', $data ?? [], 'null');
        $this->setIfExists('courseid', $data ?? [], null);
        $this->setIfExists('dateexpire', $data ?? [], null);
        $this->setIfExists('dateissued', $data ?? [], 0);
        $this->setIfExists('description', $data ?? [], 'null');
        $this->setIfExists('email', $data ?? [], 'null');
        $this->setIfExists('endorsement', $data ?? [], null);
        $this->setIfExists('expiredate', $data ?? [], null);
        $this->setIfExists('expireperiod', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('imageauthoremail', $data ?? [], 'null');
        $this->setIfExists('imageauthorname', $data ?? [], 'null');
        $this->setIfExists('imageauthorurl', $data ?? [], 'null');
        $this->setIfExists('imagecaption', $data ?? [], 'null');
        $this->setIfExists('issuedid', $data ?? [], null);
        $this->setIfExists('issuercontact', $data ?? [], 'null');
        $this->setIfExists('issuername', $data ?? [], 'null');
        $this->setIfExists('issuerurl', $data ?? [], 'null');
        $this->setIfExists('language', $data ?? [], 'null');
        $this->setIfExists('message', $data ?? [], 'null');
        $this->setIfExists('messagesubject', $data ?? [], 'null');
        $this->setIfExists('name', $data ?? [], 'null');
        $this->setIfExists('nextcron', $data ?? [], null);
        $this->setIfExists('notification', $data ?? [], 1);
        $this->setIfExists('relatedbadges', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], 0);
        $this->setIfExists('timecreated', $data ?? [], 0);
        $this->setIfExists('timemodified', $data ?? [], 0);
        $this->setIfExists('type', $data ?? [], 1);
        $this->setIfExists('uniquehash', $data ?? [], 'null');
        $this->setIfExists('usercreated', $data ?? [], null);
        $this->setIfExists('usermodified', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], 0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alignment
     *
     * @return \OpenAPI\Client\Model\CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner[]|null
     */
    public function getAlignment()
    {
        return $this->container['alignment'];
    }

    /**
     * Sets alignment
     *
     * @param \OpenAPI\Client\Model\CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner[]|null $alignment alignment
     *
     * @return self
     */
    public function setAlignment($alignment)
    {
        if (is_null($alignment)) {
            throw new \InvalidArgumentException('non-nullable alignment cannot be null');
        }
        $this->container['alignment'] = $alignment;

        return $this;
    }

    /**
     * Gets attachment
     *
     * @return int|null
     */
    public function getAttachment()
    {
        return $this->container['attachment'];
    }

    /**
     * Sets attachment
     *
     * @param int|null $attachment Attachment
     *
     * @return self
     */
    public function setAttachment($attachment)
    {
        if (is_null($attachment)) {
            throw new \InvalidArgumentException('non-nullable attachment cannot be null');
        }
        $this->container['attachment'] = $attachment;

        return $this;
    }

    /**
     * Gets badgeurl
     *
     * @return string|null
     */
    public function getBadgeurl()
    {
        return $this->container['badgeurl'];
    }

    /**
     * Sets badgeurl
     *
     * @param string|null $badgeurl Badge URL
     *
     * @return self
     */
    public function setBadgeurl($badgeurl)
    {
        if (is_null($badgeurl)) {
            throw new \InvalidArgumentException('non-nullable badgeurl cannot be null');
        }
        $this->container['badgeurl'] = $badgeurl;

        return $this;
    }

    /**
     * Gets courseid
     *
     * @return int|null
     */
    public function getCourseid()
    {
        return $this->container['courseid'];
    }

    /**
     * Sets courseid
     *
     * @param int|null $courseid Course id
     *
     * @return self
     */
    public function setCourseid($courseid)
    {
        if (is_null($courseid)) {
            throw new \InvalidArgumentException('non-nullable courseid cannot be null');
        }
        $this->container['courseid'] = $courseid;

        return $this;
    }

    /**
     * Gets dateexpire
     *
     * @return int|null
     */
    public function getDateexpire()
    {
        return $this->container['dateexpire'];
    }

    /**
     * Sets dateexpire
     *
     * @param int|null $dateexpire Date expire
     *
     * @return self
     */
    public function setDateexpire($dateexpire)
    {
        if (is_null($dateexpire)) {
            throw new \InvalidArgumentException('non-nullable dateexpire cannot be null');
        }
        $this->container['dateexpire'] = $dateexpire;

        return $this;
    }

    /**
     * Gets dateissued
     *
     * @return int|null
     */
    public function getDateissued()
    {
        return $this->container['dateissued'];
    }

    /**
     * Sets dateissued
     *
     * @param int|null $dateissued Date issued
     *
     * @return self
     */
    public function setDateissued($dateissued)
    {
        if (is_null($dateissued)) {
            throw new \InvalidArgumentException('non-nullable dateissued cannot be null');
        }
        $this->container['dateissued'] = $dateissued;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Badge description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email User email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets endorsement
     *
     * @return \OpenAPI\Client\Model\CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement|null
     */
    public function getEndorsement()
    {
        return $this->container['endorsement'];
    }

    /**
     * Sets endorsement
     *
     * @param \OpenAPI\Client\Model\CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement|null $endorsement endorsement
     *
     * @return self
     */
    public function setEndorsement($endorsement)
    {
        if (is_null($endorsement)) {
            throw new \InvalidArgumentException('non-nullable endorsement cannot be null');
        }
        $this->container['endorsement'] = $endorsement;

        return $this;
    }

    /**
     * Gets expiredate
     *
     * @return int|null
     */
    public function getExpiredate()
    {
        return $this->container['expiredate'];
    }

    /**
     * Sets expiredate
     *
     * @param int|null $expiredate Expire date
     *
     * @return self
     */
    public function setExpiredate($expiredate)
    {
        if (is_null($expiredate)) {
            throw new \InvalidArgumentException('non-nullable expiredate cannot be null');
        }
        $this->container['expiredate'] = $expiredate;

        return $this;
    }

    /**
     * Gets expireperiod
     *
     * @return int|null
     */
    public function getExpireperiod()
    {
        return $this->container['expireperiod'];
    }

    /**
     * Sets expireperiod
     *
     * @param int|null $expireperiod Expire period
     *
     * @return self
     */
    public function setExpireperiod($expireperiod)
    {
        if (is_null($expireperiod)) {
            throw new \InvalidArgumentException('non-nullable expireperiod cannot be null');
        }
        $this->container['expireperiod'] = $expireperiod;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Badge id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets imageauthoremail
     *
     * @return string|null
     */
    public function getImageauthoremail()
    {
        return $this->container['imageauthoremail'];
    }

    /**
     * Sets imageauthoremail
     *
     * @param string|null $imageauthoremail Email of the image author
     *
     * @return self
     */
    public function setImageauthoremail($imageauthoremail)
    {
        if (is_null($imageauthoremail)) {
            throw new \InvalidArgumentException('non-nullable imageauthoremail cannot be null');
        }
        $this->container['imageauthoremail'] = $imageauthoremail;

        return $this;
    }

    /**
     * Gets imageauthorname
     *
     * @return string|null
     */
    public function getImageauthorname()
    {
        return $this->container['imageauthorname'];
    }

    /**
     * Sets imageauthorname
     *
     * @param string|null $imageauthorname Name of the image author
     *
     * @return self
     */
    public function setImageauthorname($imageauthorname)
    {
        if (is_null($imageauthorname)) {
            throw new \InvalidArgumentException('non-nullable imageauthorname cannot be null');
        }
        $this->container['imageauthorname'] = $imageauthorname;

        return $this;
    }

    /**
     * Gets imageauthorurl
     *
     * @return string|null
     */
    public function getImageauthorurl()
    {
        return $this->container['imageauthorurl'];
    }

    /**
     * Sets imageauthorurl
     *
     * @param string|null $imageauthorurl URL of the image author
     *
     * @return self
     */
    public function setImageauthorurl($imageauthorurl)
    {
        if (is_null($imageauthorurl)) {
            throw new \InvalidArgumentException('non-nullable imageauthorurl cannot be null');
        }
        $this->container['imageauthorurl'] = $imageauthorurl;

        return $this;
    }

    /**
     * Gets imagecaption
     *
     * @return string|null
     */
    public function getImagecaption()
    {
        return $this->container['imagecaption'];
    }

    /**
     * Sets imagecaption
     *
     * @param string|null $imagecaption Caption of the image
     *
     * @return self
     */
    public function setImagecaption($imagecaption)
    {
        if (is_null($imagecaption)) {
            throw new \InvalidArgumentException('non-nullable imagecaption cannot be null');
        }
        $this->container['imagecaption'] = $imagecaption;

        return $this;
    }

    /**
     * Gets issuedid
     *
     * @return int|null
     */
    public function getIssuedid()
    {
        return $this->container['issuedid'];
    }

    /**
     * Sets issuedid
     *
     * @param int|null $issuedid Issued id
     *
     * @return self
     */
    public function setIssuedid($issuedid)
    {
        if (is_null($issuedid)) {
            throw new \InvalidArgumentException('non-nullable issuedid cannot be null');
        }
        $this->container['issuedid'] = $issuedid;

        return $this;
    }

    /**
     * Gets issuercontact
     *
     * @return string|null
     */
    public function getIssuercontact()
    {
        return $this->container['issuercontact'];
    }

    /**
     * Sets issuercontact
     *
     * @param string|null $issuercontact Issuer contact
     *
     * @return self
     */
    public function setIssuercontact($issuercontact)
    {
        if (is_null($issuercontact)) {
            throw new \InvalidArgumentException('non-nullable issuercontact cannot be null');
        }
        $this->container['issuercontact'] = $issuercontact;

        return $this;
    }

    /**
     * Gets issuername
     *
     * @return string|null
     */
    public function getIssuername()
    {
        return $this->container['issuername'];
    }

    /**
     * Sets issuername
     *
     * @param string|null $issuername Issuer name
     *
     * @return self
     */
    public function setIssuername($issuername)
    {
        if (is_null($issuername)) {
            throw new \InvalidArgumentException('non-nullable issuername cannot be null');
        }
        $this->container['issuername'] = $issuername;

        return $this;
    }

    /**
     * Gets issuerurl
     *
     * @return string|null
     */
    public function getIssuerurl()
    {
        return $this->container['issuerurl'];
    }

    /**
     * Sets issuerurl
     *
     * @param string|null $issuerurl Issuer URL
     *
     * @return self
     */
    public function setIssuerurl($issuerurl)
    {
        if (is_null($issuerurl)) {
            throw new \InvalidArgumentException('non-nullable issuerurl cannot be null');
        }
        $this->container['issuerurl'] = $issuerurl;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language Language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message Message
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets messagesubject
     *
     * @return string|null
     */
    public function getMessagesubject()
    {
        return $this->container['messagesubject'];
    }

    /**
     * Sets messagesubject
     *
     * @param string|null $messagesubject Message subject
     *
     * @return self
     */
    public function setMessagesubject($messagesubject)
    {
        if (is_null($messagesubject)) {
            throw new \InvalidArgumentException('non-nullable messagesubject cannot be null');
        }
        $this->container['messagesubject'] = $messagesubject;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Badge name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nextcron
     *
     * @return int|null
     */
    public function getNextcron()
    {
        return $this->container['nextcron'];
    }

    /**
     * Sets nextcron
     *
     * @param int|null $nextcron Next cron
     *
     * @return self
     */
    public function setNextcron($nextcron)
    {
        if (is_null($nextcron)) {
            throw new \InvalidArgumentException('non-nullable nextcron cannot be null');
        }
        $this->container['nextcron'] = $nextcron;

        return $this;
    }

    /**
     * Gets notification
     *
     * @return int|null
     */
    public function getNotification()
    {
        return $this->container['notification'];
    }

    /**
     * Sets notification
     *
     * @param int|null $notification Whether to notify when badge is awarded
     *
     * @return self
     */
    public function setNotification($notification)
    {
        if (is_null($notification)) {
            throw new \InvalidArgumentException('non-nullable notification cannot be null');
        }
        $this->container['notification'] = $notification;

        return $this;
    }

    /**
     * Gets relatedbadges
     *
     * @return \OpenAPI\Client\Model\CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInner[]|null
     */
    public function getRelatedbadges()
    {
        return $this->container['relatedbadges'];
    }

    /**
     * Sets relatedbadges
     *
     * @param \OpenAPI\Client\Model\CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInner[]|null $relatedbadges relatedbadges
     *
     * @return self
     */
    public function setRelatedbadges($relatedbadges)
    {
        if (is_null($relatedbadges)) {
            throw new \InvalidArgumentException('non-nullable relatedbadges cannot be null');
        }
        $this->container['relatedbadges'] = $relatedbadges;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status Status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return int|null
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param int|null $timecreated Time created
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified Time modified
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type Type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets uniquehash
     *
     * @return string|null
     */
    public function getUniquehash()
    {
        return $this->container['uniquehash'];
    }

    /**
     * Sets uniquehash
     *
     * @param string|null $uniquehash Unique hash
     *
     * @return self
     */
    public function setUniquehash($uniquehash)
    {
        if (is_null($uniquehash)) {
            throw new \InvalidArgumentException('non-nullable uniquehash cannot be null');
        }
        $this->container['uniquehash'] = $uniquehash;

        return $this;
    }

    /**
     * Gets usercreated
     *
     * @return int|null
     */
    public function getUsercreated()
    {
        return $this->container['usercreated'];
    }

    /**
     * Sets usercreated
     *
     * @param int|null $usercreated User created
     *
     * @return self
     */
    public function setUsercreated($usercreated)
    {
        if (is_null($usercreated)) {
            throw new \InvalidArgumentException('non-nullable usercreated cannot be null');
        }
        $this->container['usercreated'] = $usercreated;

        return $this;
    }

    /**
     * Gets usermodified
     *
     * @return int|null
     */
    public function getUsermodified()
    {
        return $this->container['usermodified'];
    }

    /**
     * Sets usermodified
     *
     * @param int|null $usermodified User modified
     *
     * @return self
     */
    public function setUsermodified($usermodified)
    {
        if (is_null($usermodified)) {
            throw new \InvalidArgumentException('non-nullable usermodified cannot be null');
        }
        $this->container['usermodified'] = $usermodified;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return int|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param int|null $visible Visible
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


