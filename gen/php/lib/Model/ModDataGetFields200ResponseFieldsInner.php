<?php
/**
 * ModDataGetFields200ResponseFieldsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModDataGetFields200ResponseFieldsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModDataGetFields200ResponseFieldsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_data_get_fields_200_response_fields_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dataid' => 'int',
        'description' => 'string',
        'id' => 'int',
        'name' => 'string',
        'param1' => 'string',
        'param2' => 'string',
        'param3' => 'string',
        'param4' => 'string',
        'param5' => 'string',
        'param6' => 'string',
        'param7' => 'string',
        'param8' => 'string',
        'param9' => 'string',
        'param10' => 'string',
        'required' => 'bool',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dataid' => null,
        'description' => null,
        'id' => null,
        'name' => null,
        'param1' => null,
        'param2' => null,
        'param3' => null,
        'param4' => null,
        'param5' => null,
        'param6' => null,
        'param7' => null,
        'param8' => null,
        'param9' => null,
        'param10' => null,
        'required' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dataid' => false,
        'description' => false,
        'id' => false,
        'name' => false,
        'param1' => false,
        'param2' => false,
        'param3' => false,
        'param4' => false,
        'param5' => false,
        'param6' => false,
        'param7' => false,
        'param8' => false,
        'param9' => false,
        'param10' => false,
        'required' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dataid' => 'dataid',
        'description' => 'description',
        'id' => 'id',
        'name' => 'name',
        'param1' => 'param1',
        'param2' => 'param2',
        'param3' => 'param3',
        'param4' => 'param4',
        'param5' => 'param5',
        'param6' => 'param6',
        'param7' => 'param7',
        'param8' => 'param8',
        'param9' => 'param9',
        'param10' => 'param10',
        'required' => 'required',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dataid' => 'setDataid',
        'description' => 'setDescription',
        'id' => 'setId',
        'name' => 'setName',
        'param1' => 'setParam1',
        'param2' => 'setParam2',
        'param3' => 'setParam3',
        'param4' => 'setParam4',
        'param5' => 'setParam5',
        'param6' => 'setParam6',
        'param7' => 'setParam7',
        'param8' => 'setParam8',
        'param9' => 'setParam9',
        'param10' => 'setParam10',
        'required' => 'setRequired',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dataid' => 'getDataid',
        'description' => 'getDescription',
        'id' => 'getId',
        'name' => 'getName',
        'param1' => 'getParam1',
        'param2' => 'getParam2',
        'param3' => 'getParam3',
        'param4' => 'getParam4',
        'param5' => 'getParam5',
        'param6' => 'getParam6',
        'param7' => 'getParam7',
        'param8' => 'getParam8',
        'param9' => 'getParam9',
        'param10' => 'getParam10',
        'required' => 'getRequired',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('dataid', $data ?? [], 0);
        $this->setIfExists('description', $data ?? [], 'null');
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], 'null');
        $this->setIfExists('param1', $data ?? [], 'null');
        $this->setIfExists('param2', $data ?? [], null);
        $this->setIfExists('param3', $data ?? [], null);
        $this->setIfExists('param4', $data ?? [], null);
        $this->setIfExists('param5', $data ?? [], null);
        $this->setIfExists('param6', $data ?? [], null);
        $this->setIfExists('param7', $data ?? [], null);
        $this->setIfExists('param8', $data ?? [], null);
        $this->setIfExists('param9', $data ?? [], null);
        $this->setIfExists('param10', $data ?? [], null);
        $this->setIfExists('required', $data ?? [], 0);
        $this->setIfExists('type', $data ?? [], 'null');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dataid
     *
     * @return int|null
     */
    public function getDataid()
    {
        return $this->container['dataid'];
    }

    /**
     * Sets dataid
     *
     * @param int|null $dataid The field type of the content.
     *
     * @return self
     */
    public function setDataid($dataid)
    {
        if (is_null($dataid)) {
            throw new \InvalidArgumentException('non-nullable dataid cannot be null');
        }
        $this->container['dataid'] = $dataid;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The field description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Field id.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The field name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets param1
     *
     * @return string|null
     */
    public function getParam1()
    {
        return $this->container['param1'];
    }

    /**
     * Sets param1
     *
     * @param string|null $param1 Field parameters
     *
     * @return self
     */
    public function setParam1($param1)
    {
        if (is_null($param1)) {
            throw new \InvalidArgumentException('non-nullable param1 cannot be null');
        }
        $this->container['param1'] = $param1;

        return $this;
    }

    /**
     * Gets param2
     *
     * @return string|null
     */
    public function getParam2()
    {
        return $this->container['param2'];
    }

    /**
     * Sets param2
     *
     * @param string|null $param2 Field parameters
     *
     * @return self
     */
    public function setParam2($param2)
    {
        if (is_null($param2)) {
            throw new \InvalidArgumentException('non-nullable param2 cannot be null');
        }
        $this->container['param2'] = $param2;

        return $this;
    }

    /**
     * Gets param3
     *
     * @return string|null
     */
    public function getParam3()
    {
        return $this->container['param3'];
    }

    /**
     * Sets param3
     *
     * @param string|null $param3 Field parameters
     *
     * @return self
     */
    public function setParam3($param3)
    {
        if (is_null($param3)) {
            throw new \InvalidArgumentException('non-nullable param3 cannot be null');
        }
        $this->container['param3'] = $param3;

        return $this;
    }

    /**
     * Gets param4
     *
     * @return string|null
     */
    public function getParam4()
    {
        return $this->container['param4'];
    }

    /**
     * Sets param4
     *
     * @param string|null $param4 Field parameters
     *
     * @return self
     */
    public function setParam4($param4)
    {
        if (is_null($param4)) {
            throw new \InvalidArgumentException('non-nullable param4 cannot be null');
        }
        $this->container['param4'] = $param4;

        return $this;
    }

    /**
     * Gets param5
     *
     * @return string|null
     */
    public function getParam5()
    {
        return $this->container['param5'];
    }

    /**
     * Sets param5
     *
     * @param string|null $param5 Field parameters
     *
     * @return self
     */
    public function setParam5($param5)
    {
        if (is_null($param5)) {
            throw new \InvalidArgumentException('non-nullable param5 cannot be null');
        }
        $this->container['param5'] = $param5;

        return $this;
    }

    /**
     * Gets param6
     *
     * @return string|null
     */
    public function getParam6()
    {
        return $this->container['param6'];
    }

    /**
     * Sets param6
     *
     * @param string|null $param6 Field parameters
     *
     * @return self
     */
    public function setParam6($param6)
    {
        if (is_null($param6)) {
            throw new \InvalidArgumentException('non-nullable param6 cannot be null');
        }
        $this->container['param6'] = $param6;

        return $this;
    }

    /**
     * Gets param7
     *
     * @return string|null
     */
    public function getParam7()
    {
        return $this->container['param7'];
    }

    /**
     * Sets param7
     *
     * @param string|null $param7 Field parameters
     *
     * @return self
     */
    public function setParam7($param7)
    {
        if (is_null($param7)) {
            throw new \InvalidArgumentException('non-nullable param7 cannot be null');
        }
        $this->container['param7'] = $param7;

        return $this;
    }

    /**
     * Gets param8
     *
     * @return string|null
     */
    public function getParam8()
    {
        return $this->container['param8'];
    }

    /**
     * Sets param8
     *
     * @param string|null $param8 Field parameters
     *
     * @return self
     */
    public function setParam8($param8)
    {
        if (is_null($param8)) {
            throw new \InvalidArgumentException('non-nullable param8 cannot be null');
        }
        $this->container['param8'] = $param8;

        return $this;
    }

    /**
     * Gets param9
     *
     * @return string|null
     */
    public function getParam9()
    {
        return $this->container['param9'];
    }

    /**
     * Sets param9
     *
     * @param string|null $param9 Field parameters
     *
     * @return self
     */
    public function setParam9($param9)
    {
        if (is_null($param9)) {
            throw new \InvalidArgumentException('non-nullable param9 cannot be null');
        }
        $this->container['param9'] = $param9;

        return $this;
    }

    /**
     * Gets param10
     *
     * @return string|null
     */
    public function getParam10()
    {
        return $this->container['param10'];
    }

    /**
     * Sets param10
     *
     * @param string|null $param10 Field parameters
     *
     * @return self
     */
    public function setParam10($param10)
    {
        if (is_null($param10)) {
            throw new \InvalidArgumentException('non-nullable param10 cannot be null');
        }
        $this->container['param10'] = $param10;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required Whether is a field required or not.
     *
     * @return self
     */
    public function setRequired($required)
    {
        if (is_null($required)) {
            throw new \InvalidArgumentException('non-nullable required cannot be null');
        }
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The field type.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


