<?php
/**
 * CoreCompetencyReadPlan200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreCompetencyReadPlan200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreCompetencyReadPlan200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_competency_read_plan_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'canbeedited' => 'bool',
        'canmanage' => 'bool',
        'canrequestreview' => 'bool',
        'canreview' => 'bool',
        'commentarea' => '\OpenAPI\Client\Model\CoreCompetencyReadPlan200ResponseCommentarea',
        'description' => 'string',
        'descriptionformat' => 'int',
        'duedate' => 'int',
        'duedateformatted' => 'string',
        'id' => 'int',
        'isactive' => 'bool',
        'isapproveallowed' => 'bool',
        'isbasedontemplate' => 'bool',
        'iscancelreviewrequestallowed' => 'bool',
        'iscompleteallowed' => 'bool',
        'iscompleted' => 'bool',
        'isdraft' => 'bool',
        'isinreview' => 'bool',
        'isreopenallowed' => 'bool',
        'isrequestreviewallowed' => 'bool',
        'isstartreviewallowed' => 'bool',
        'isstopreviewallowed' => 'bool',
        'isunapproveallowed' => 'bool',
        'isunlinkallowed' => 'bool',
        'iswaitingforreview' => 'bool',
        'name' => 'string',
        'origtemplateid' => 'int',
        'reviewer' => '\OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser',
        'reviewerid' => 'int',
        'status' => 'int',
        'statusname' => 'string',
        'template' => '\OpenAPI\Client\Model\CoreCompetencyCreateTemplate200Response',
        'templateid' => 'int',
        'timecreated' => 'int',
        'timemodified' => 'int',
        'url' => 'string',
        'userid' => 'int',
        'usermodified' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'canbeedited' => null,
        'canmanage' => null,
        'canrequestreview' => null,
        'canreview' => null,
        'commentarea' => null,
        'description' => null,
        'descriptionformat' => null,
        'duedate' => null,
        'duedateformatted' => null,
        'id' => null,
        'isactive' => null,
        'isapproveallowed' => null,
        'isbasedontemplate' => null,
        'iscancelreviewrequestallowed' => null,
        'iscompleteallowed' => null,
        'iscompleted' => null,
        'isdraft' => null,
        'isinreview' => null,
        'isreopenallowed' => null,
        'isrequestreviewallowed' => null,
        'isstartreviewallowed' => null,
        'isstopreviewallowed' => null,
        'isunapproveallowed' => null,
        'isunlinkallowed' => null,
        'iswaitingforreview' => null,
        'name' => null,
        'origtemplateid' => null,
        'reviewer' => null,
        'reviewerid' => null,
        'status' => null,
        'statusname' => null,
        'template' => null,
        'templateid' => null,
        'timecreated' => null,
        'timemodified' => null,
        'url' => null,
        'userid' => null,
        'usermodified' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'canbeedited' => false,
        'canmanage' => false,
        'canrequestreview' => false,
        'canreview' => false,
        'commentarea' => false,
        'description' => false,
        'descriptionformat' => false,
        'duedate' => false,
        'duedateformatted' => false,
        'id' => false,
        'isactive' => false,
        'isapproveallowed' => false,
        'isbasedontemplate' => false,
        'iscancelreviewrequestallowed' => false,
        'iscompleteallowed' => false,
        'iscompleted' => false,
        'isdraft' => false,
        'isinreview' => false,
        'isreopenallowed' => false,
        'isrequestreviewallowed' => false,
        'isstartreviewallowed' => false,
        'isstopreviewallowed' => false,
        'isunapproveallowed' => false,
        'isunlinkallowed' => false,
        'iswaitingforreview' => false,
        'name' => false,
        'origtemplateid' => false,
        'reviewer' => false,
        'reviewerid' => false,
        'status' => false,
        'statusname' => false,
        'template' => false,
        'templateid' => false,
        'timecreated' => false,
        'timemodified' => false,
        'url' => false,
        'userid' => false,
        'usermodified' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canbeedited' => 'canbeedited',
        'canmanage' => 'canmanage',
        'canrequestreview' => 'canrequestreview',
        'canreview' => 'canreview',
        'commentarea' => 'commentarea',
        'description' => 'description',
        'descriptionformat' => 'descriptionformat',
        'duedate' => 'duedate',
        'duedateformatted' => 'duedateformatted',
        'id' => 'id',
        'isactive' => 'isactive',
        'isapproveallowed' => 'isapproveallowed',
        'isbasedontemplate' => 'isbasedontemplate',
        'iscancelreviewrequestallowed' => 'iscancelreviewrequestallowed',
        'iscompleteallowed' => 'iscompleteallowed',
        'iscompleted' => 'iscompleted',
        'isdraft' => 'isdraft',
        'isinreview' => 'isinreview',
        'isreopenallowed' => 'isreopenallowed',
        'isrequestreviewallowed' => 'isrequestreviewallowed',
        'isstartreviewallowed' => 'isstartreviewallowed',
        'isstopreviewallowed' => 'isstopreviewallowed',
        'isunapproveallowed' => 'isunapproveallowed',
        'isunlinkallowed' => 'isunlinkallowed',
        'iswaitingforreview' => 'iswaitingforreview',
        'name' => 'name',
        'origtemplateid' => 'origtemplateid',
        'reviewer' => 'reviewer',
        'reviewerid' => 'reviewerid',
        'status' => 'status',
        'statusname' => 'statusname',
        'template' => 'template',
        'templateid' => 'templateid',
        'timecreated' => 'timecreated',
        'timemodified' => 'timemodified',
        'url' => 'url',
        'userid' => 'userid',
        'usermodified' => 'usermodified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canbeedited' => 'setCanbeedited',
        'canmanage' => 'setCanmanage',
        'canrequestreview' => 'setCanrequestreview',
        'canreview' => 'setCanreview',
        'commentarea' => 'setCommentarea',
        'description' => 'setDescription',
        'descriptionformat' => 'setDescriptionformat',
        'duedate' => 'setDuedate',
        'duedateformatted' => 'setDuedateformatted',
        'id' => 'setId',
        'isactive' => 'setIsactive',
        'isapproveallowed' => 'setIsapproveallowed',
        'isbasedontemplate' => 'setIsbasedontemplate',
        'iscancelreviewrequestallowed' => 'setIscancelreviewrequestallowed',
        'iscompleteallowed' => 'setIscompleteallowed',
        'iscompleted' => 'setIscompleted',
        'isdraft' => 'setIsdraft',
        'isinreview' => 'setIsinreview',
        'isreopenallowed' => 'setIsreopenallowed',
        'isrequestreviewallowed' => 'setIsrequestreviewallowed',
        'isstartreviewallowed' => 'setIsstartreviewallowed',
        'isstopreviewallowed' => 'setIsstopreviewallowed',
        'isunapproveallowed' => 'setIsunapproveallowed',
        'isunlinkallowed' => 'setIsunlinkallowed',
        'iswaitingforreview' => 'setIswaitingforreview',
        'name' => 'setName',
        'origtemplateid' => 'setOrigtemplateid',
        'reviewer' => 'setReviewer',
        'reviewerid' => 'setReviewerid',
        'status' => 'setStatus',
        'statusname' => 'setStatusname',
        'template' => 'setTemplate',
        'templateid' => 'setTemplateid',
        'timecreated' => 'setTimecreated',
        'timemodified' => 'setTimemodified',
        'url' => 'setUrl',
        'userid' => 'setUserid',
        'usermodified' => 'setUsermodified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canbeedited' => 'getCanbeedited',
        'canmanage' => 'getCanmanage',
        'canrequestreview' => 'getCanrequestreview',
        'canreview' => 'getCanreview',
        'commentarea' => 'getCommentarea',
        'description' => 'getDescription',
        'descriptionformat' => 'getDescriptionformat',
        'duedate' => 'getDuedate',
        'duedateformatted' => 'getDuedateformatted',
        'id' => 'getId',
        'isactive' => 'getIsactive',
        'isapproveallowed' => 'getIsapproveallowed',
        'isbasedontemplate' => 'getIsbasedontemplate',
        'iscancelreviewrequestallowed' => 'getIscancelreviewrequestallowed',
        'iscompleteallowed' => 'getIscompleteallowed',
        'iscompleted' => 'getIscompleted',
        'isdraft' => 'getIsdraft',
        'isinreview' => 'getIsinreview',
        'isreopenallowed' => 'getIsreopenallowed',
        'isrequestreviewallowed' => 'getIsrequestreviewallowed',
        'isstartreviewallowed' => 'getIsstartreviewallowed',
        'isstopreviewallowed' => 'getIsstopreviewallowed',
        'isunapproveallowed' => 'getIsunapproveallowed',
        'isunlinkallowed' => 'getIsunlinkallowed',
        'iswaitingforreview' => 'getIswaitingforreview',
        'name' => 'getName',
        'origtemplateid' => 'getOrigtemplateid',
        'reviewer' => 'getReviewer',
        'reviewerid' => 'getReviewerid',
        'status' => 'getStatus',
        'statusname' => 'getStatusname',
        'template' => 'getTemplate',
        'templateid' => 'getTemplateid',
        'timecreated' => 'getTimecreated',
        'timemodified' => 'getTimemodified',
        'url' => 'getUrl',
        'userid' => 'getUserid',
        'usermodified' => 'getUsermodified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('canbeedited', $data ?? [], null);
        $this->setIfExists('canmanage', $data ?? [], null);
        $this->setIfExists('canrequestreview', $data ?? [], null);
        $this->setIfExists('canreview', $data ?? [], null);
        $this->setIfExists('commentarea', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], '');
        $this->setIfExists('descriptionformat', $data ?? [], 1);
        $this->setIfExists('duedate', $data ?? [], 0);
        $this->setIfExists('duedateformatted', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], 0);
        $this->setIfExists('isactive', $data ?? [], null);
        $this->setIfExists('isapproveallowed', $data ?? [], null);
        $this->setIfExists('isbasedontemplate', $data ?? [], null);
        $this->setIfExists('iscancelreviewrequestallowed', $data ?? [], null);
        $this->setIfExists('iscompleteallowed', $data ?? [], null);
        $this->setIfExists('iscompleted', $data ?? [], null);
        $this->setIfExists('isdraft', $data ?? [], null);
        $this->setIfExists('isinreview', $data ?? [], null);
        $this->setIfExists('isreopenallowed', $data ?? [], null);
        $this->setIfExists('isrequestreviewallowed', $data ?? [], null);
        $this->setIfExists('isstartreviewallowed', $data ?? [], null);
        $this->setIfExists('isstopreviewallowed', $data ?? [], null);
        $this->setIfExists('isunapproveallowed', $data ?? [], null);
        $this->setIfExists('isunlinkallowed', $data ?? [], null);
        $this->setIfExists('iswaitingforreview', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('origtemplateid', $data ?? [], null);
        $this->setIfExists('reviewer', $data ?? [], null);
        $this->setIfExists('reviewerid', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], 0);
        $this->setIfExists('statusname', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('templateid', $data ?? [], null);
        $this->setIfExists('timecreated', $data ?? [], 0);
        $this->setIfExists('timemodified', $data ?? [], 0);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('userid', $data ?? [], null);
        $this->setIfExists('usermodified', $data ?? [], 0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['canbeedited'] === null) {
            $invalidProperties[] = "'canbeedited' can't be null";
        }
        if ($this->container['canmanage'] === null) {
            $invalidProperties[] = "'canmanage' can't be null";
        }
        if ($this->container['canrequestreview'] === null) {
            $invalidProperties[] = "'canrequestreview' can't be null";
        }
        if ($this->container['canreview'] === null) {
            $invalidProperties[] = "'canreview' can't be null";
        }
        if ($this->container['commentarea'] === null) {
            $invalidProperties[] = "'commentarea' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['duedate'] === null) {
            $invalidProperties[] = "'duedate' can't be null";
        }
        if ($this->container['duedateformatted'] === null) {
            $invalidProperties[] = "'duedateformatted' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['isactive'] === null) {
            $invalidProperties[] = "'isactive' can't be null";
        }
        if ($this->container['isapproveallowed'] === null) {
            $invalidProperties[] = "'isapproveallowed' can't be null";
        }
        if ($this->container['isbasedontemplate'] === null) {
            $invalidProperties[] = "'isbasedontemplate' can't be null";
        }
        if ($this->container['iscancelreviewrequestallowed'] === null) {
            $invalidProperties[] = "'iscancelreviewrequestallowed' can't be null";
        }
        if ($this->container['iscompleteallowed'] === null) {
            $invalidProperties[] = "'iscompleteallowed' can't be null";
        }
        if ($this->container['iscompleted'] === null) {
            $invalidProperties[] = "'iscompleted' can't be null";
        }
        if ($this->container['isdraft'] === null) {
            $invalidProperties[] = "'isdraft' can't be null";
        }
        if ($this->container['isinreview'] === null) {
            $invalidProperties[] = "'isinreview' can't be null";
        }
        if ($this->container['isreopenallowed'] === null) {
            $invalidProperties[] = "'isreopenallowed' can't be null";
        }
        if ($this->container['isrequestreviewallowed'] === null) {
            $invalidProperties[] = "'isrequestreviewallowed' can't be null";
        }
        if ($this->container['isstartreviewallowed'] === null) {
            $invalidProperties[] = "'isstartreviewallowed' can't be null";
        }
        if ($this->container['isstopreviewallowed'] === null) {
            $invalidProperties[] = "'isstopreviewallowed' can't be null";
        }
        if ($this->container['isunapproveallowed'] === null) {
            $invalidProperties[] = "'isunapproveallowed' can't be null";
        }
        if ($this->container['isunlinkallowed'] === null) {
            $invalidProperties[] = "'isunlinkallowed' can't be null";
        }
        if ($this->container['iswaitingforreview'] === null) {
            $invalidProperties[] = "'iswaitingforreview' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['origtemplateid'] === null) {
            $invalidProperties[] = "'origtemplateid' can't be null";
        }
        if ($this->container['reviewerid'] === null) {
            $invalidProperties[] = "'reviewerid' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['statusname'] === null) {
            $invalidProperties[] = "'statusname' can't be null";
        }
        if ($this->container['templateid'] === null) {
            $invalidProperties[] = "'templateid' can't be null";
        }
        if ($this->container['timecreated'] === null) {
            $invalidProperties[] = "'timecreated' can't be null";
        }
        if ($this->container['timemodified'] === null) {
            $invalidProperties[] = "'timemodified' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['userid'] === null) {
            $invalidProperties[] = "'userid' can't be null";
        }
        if ($this->container['usermodified'] === null) {
            $invalidProperties[] = "'usermodified' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canbeedited
     *
     * @return bool
     */
    public function getCanbeedited()
    {
        return $this->container['canbeedited'];
    }

    /**
     * Sets canbeedited
     *
     * @param bool $canbeedited canbeedited
     *
     * @return self
     */
    public function setCanbeedited($canbeedited)
    {
        if (is_null($canbeedited)) {
            throw new \InvalidArgumentException('non-nullable canbeedited cannot be null');
        }
        $this->container['canbeedited'] = $canbeedited;

        return $this;
    }

    /**
     * Gets canmanage
     *
     * @return bool
     */
    public function getCanmanage()
    {
        return $this->container['canmanage'];
    }

    /**
     * Sets canmanage
     *
     * @param bool $canmanage canmanage
     *
     * @return self
     */
    public function setCanmanage($canmanage)
    {
        if (is_null($canmanage)) {
            throw new \InvalidArgumentException('non-nullable canmanage cannot be null');
        }
        $this->container['canmanage'] = $canmanage;

        return $this;
    }

    /**
     * Gets canrequestreview
     *
     * @return bool
     */
    public function getCanrequestreview()
    {
        return $this->container['canrequestreview'];
    }

    /**
     * Sets canrequestreview
     *
     * @param bool $canrequestreview canrequestreview
     *
     * @return self
     */
    public function setCanrequestreview($canrequestreview)
    {
        if (is_null($canrequestreview)) {
            throw new \InvalidArgumentException('non-nullable canrequestreview cannot be null');
        }
        $this->container['canrequestreview'] = $canrequestreview;

        return $this;
    }

    /**
     * Gets canreview
     *
     * @return bool
     */
    public function getCanreview()
    {
        return $this->container['canreview'];
    }

    /**
     * Sets canreview
     *
     * @param bool $canreview canreview
     *
     * @return self
     */
    public function setCanreview($canreview)
    {
        if (is_null($canreview)) {
            throw new \InvalidArgumentException('non-nullable canreview cannot be null');
        }
        $this->container['canreview'] = $canreview;

        return $this;
    }

    /**
     * Gets commentarea
     *
     * @return \OpenAPI\Client\Model\CoreCompetencyReadPlan200ResponseCommentarea
     */
    public function getCommentarea()
    {
        return $this->container['commentarea'];
    }

    /**
     * Sets commentarea
     *
     * @param \OpenAPI\Client\Model\CoreCompetencyReadPlan200ResponseCommentarea $commentarea commentarea
     *
     * @return self
     */
    public function setCommentarea($commentarea)
    {
        if (is_null($commentarea)) {
            throw new \InvalidArgumentException('non-nullable commentarea cannot be null');
        }
        $this->container['commentarea'] = $commentarea;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets descriptionformat
     *
     * @return int|null
     */
    public function getDescriptionformat()
    {
        return $this->container['descriptionformat'];
    }

    /**
     * Sets descriptionformat
     *
     * @param int|null $descriptionformat description format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setDescriptionformat($descriptionformat)
    {
        if (is_null($descriptionformat)) {
            throw new \InvalidArgumentException('non-nullable descriptionformat cannot be null');
        }
        $this->container['descriptionformat'] = $descriptionformat;

        return $this;
    }

    /**
     * Gets duedate
     *
     * @return int
     */
    public function getDuedate()
    {
        return $this->container['duedate'];
    }

    /**
     * Sets duedate
     *
     * @param int $duedate duedate
     *
     * @return self
     */
    public function setDuedate($duedate)
    {
        if (is_null($duedate)) {
            throw new \InvalidArgumentException('non-nullable duedate cannot be null');
        }
        $this->container['duedate'] = $duedate;

        return $this;
    }

    /**
     * Gets duedateformatted
     *
     * @return string
     */
    public function getDuedateformatted()
    {
        return $this->container['duedateformatted'];
    }

    /**
     * Sets duedateformatted
     *
     * @param string $duedateformatted duedateformatted
     *
     * @return self
     */
    public function setDuedateformatted($duedateformatted)
    {
        if (is_null($duedateformatted)) {
            throw new \InvalidArgumentException('non-nullable duedateformatted cannot be null');
        }
        $this->container['duedateformatted'] = $duedateformatted;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isactive
     *
     * @return bool
     */
    public function getIsactive()
    {
        return $this->container['isactive'];
    }

    /**
     * Sets isactive
     *
     * @param bool $isactive isactive
     *
     * @return self
     */
    public function setIsactive($isactive)
    {
        if (is_null($isactive)) {
            throw new \InvalidArgumentException('non-nullable isactive cannot be null');
        }
        $this->container['isactive'] = $isactive;

        return $this;
    }

    /**
     * Gets isapproveallowed
     *
     * @return bool
     */
    public function getIsapproveallowed()
    {
        return $this->container['isapproveallowed'];
    }

    /**
     * Sets isapproveallowed
     *
     * @param bool $isapproveallowed isapproveallowed
     *
     * @return self
     */
    public function setIsapproveallowed($isapproveallowed)
    {
        if (is_null($isapproveallowed)) {
            throw new \InvalidArgumentException('non-nullable isapproveallowed cannot be null');
        }
        $this->container['isapproveallowed'] = $isapproveallowed;

        return $this;
    }

    /**
     * Gets isbasedontemplate
     *
     * @return bool
     */
    public function getIsbasedontemplate()
    {
        return $this->container['isbasedontemplate'];
    }

    /**
     * Sets isbasedontemplate
     *
     * @param bool $isbasedontemplate isbasedontemplate
     *
     * @return self
     */
    public function setIsbasedontemplate($isbasedontemplate)
    {
        if (is_null($isbasedontemplate)) {
            throw new \InvalidArgumentException('non-nullable isbasedontemplate cannot be null');
        }
        $this->container['isbasedontemplate'] = $isbasedontemplate;

        return $this;
    }

    /**
     * Gets iscancelreviewrequestallowed
     *
     * @return bool
     */
    public function getIscancelreviewrequestallowed()
    {
        return $this->container['iscancelreviewrequestallowed'];
    }

    /**
     * Sets iscancelreviewrequestallowed
     *
     * @param bool $iscancelreviewrequestallowed iscancelreviewrequestallowed
     *
     * @return self
     */
    public function setIscancelreviewrequestallowed($iscancelreviewrequestallowed)
    {
        if (is_null($iscancelreviewrequestallowed)) {
            throw new \InvalidArgumentException('non-nullable iscancelreviewrequestallowed cannot be null');
        }
        $this->container['iscancelreviewrequestallowed'] = $iscancelreviewrequestallowed;

        return $this;
    }

    /**
     * Gets iscompleteallowed
     *
     * @return bool
     */
    public function getIscompleteallowed()
    {
        return $this->container['iscompleteallowed'];
    }

    /**
     * Sets iscompleteallowed
     *
     * @param bool $iscompleteallowed iscompleteallowed
     *
     * @return self
     */
    public function setIscompleteallowed($iscompleteallowed)
    {
        if (is_null($iscompleteallowed)) {
            throw new \InvalidArgumentException('non-nullable iscompleteallowed cannot be null');
        }
        $this->container['iscompleteallowed'] = $iscompleteallowed;

        return $this;
    }

    /**
     * Gets iscompleted
     *
     * @return bool
     */
    public function getIscompleted()
    {
        return $this->container['iscompleted'];
    }

    /**
     * Sets iscompleted
     *
     * @param bool $iscompleted iscompleted
     *
     * @return self
     */
    public function setIscompleted($iscompleted)
    {
        if (is_null($iscompleted)) {
            throw new \InvalidArgumentException('non-nullable iscompleted cannot be null');
        }
        $this->container['iscompleted'] = $iscompleted;

        return $this;
    }

    /**
     * Gets isdraft
     *
     * @return bool
     */
    public function getIsdraft()
    {
        return $this->container['isdraft'];
    }

    /**
     * Sets isdraft
     *
     * @param bool $isdraft isdraft
     *
     * @return self
     */
    public function setIsdraft($isdraft)
    {
        if (is_null($isdraft)) {
            throw new \InvalidArgumentException('non-nullable isdraft cannot be null');
        }
        $this->container['isdraft'] = $isdraft;

        return $this;
    }

    /**
     * Gets isinreview
     *
     * @return bool
     */
    public function getIsinreview()
    {
        return $this->container['isinreview'];
    }

    /**
     * Sets isinreview
     *
     * @param bool $isinreview isinreview
     *
     * @return self
     */
    public function setIsinreview($isinreview)
    {
        if (is_null($isinreview)) {
            throw new \InvalidArgumentException('non-nullable isinreview cannot be null');
        }
        $this->container['isinreview'] = $isinreview;

        return $this;
    }

    /**
     * Gets isreopenallowed
     *
     * @return bool
     */
    public function getIsreopenallowed()
    {
        return $this->container['isreopenallowed'];
    }

    /**
     * Sets isreopenallowed
     *
     * @param bool $isreopenallowed isreopenallowed
     *
     * @return self
     */
    public function setIsreopenallowed($isreopenallowed)
    {
        if (is_null($isreopenallowed)) {
            throw new \InvalidArgumentException('non-nullable isreopenallowed cannot be null');
        }
        $this->container['isreopenallowed'] = $isreopenallowed;

        return $this;
    }

    /**
     * Gets isrequestreviewallowed
     *
     * @return bool
     */
    public function getIsrequestreviewallowed()
    {
        return $this->container['isrequestreviewallowed'];
    }

    /**
     * Sets isrequestreviewallowed
     *
     * @param bool $isrequestreviewallowed isrequestreviewallowed
     *
     * @return self
     */
    public function setIsrequestreviewallowed($isrequestreviewallowed)
    {
        if (is_null($isrequestreviewallowed)) {
            throw new \InvalidArgumentException('non-nullable isrequestreviewallowed cannot be null');
        }
        $this->container['isrequestreviewallowed'] = $isrequestreviewallowed;

        return $this;
    }

    /**
     * Gets isstartreviewallowed
     *
     * @return bool
     */
    public function getIsstartreviewallowed()
    {
        return $this->container['isstartreviewallowed'];
    }

    /**
     * Sets isstartreviewallowed
     *
     * @param bool $isstartreviewallowed isstartreviewallowed
     *
     * @return self
     */
    public function setIsstartreviewallowed($isstartreviewallowed)
    {
        if (is_null($isstartreviewallowed)) {
            throw new \InvalidArgumentException('non-nullable isstartreviewallowed cannot be null');
        }
        $this->container['isstartreviewallowed'] = $isstartreviewallowed;

        return $this;
    }

    /**
     * Gets isstopreviewallowed
     *
     * @return bool
     */
    public function getIsstopreviewallowed()
    {
        return $this->container['isstopreviewallowed'];
    }

    /**
     * Sets isstopreviewallowed
     *
     * @param bool $isstopreviewallowed isstopreviewallowed
     *
     * @return self
     */
    public function setIsstopreviewallowed($isstopreviewallowed)
    {
        if (is_null($isstopreviewallowed)) {
            throw new \InvalidArgumentException('non-nullable isstopreviewallowed cannot be null');
        }
        $this->container['isstopreviewallowed'] = $isstopreviewallowed;

        return $this;
    }

    /**
     * Gets isunapproveallowed
     *
     * @return bool
     */
    public function getIsunapproveallowed()
    {
        return $this->container['isunapproveallowed'];
    }

    /**
     * Sets isunapproveallowed
     *
     * @param bool $isunapproveallowed isunapproveallowed
     *
     * @return self
     */
    public function setIsunapproveallowed($isunapproveallowed)
    {
        if (is_null($isunapproveallowed)) {
            throw new \InvalidArgumentException('non-nullable isunapproveallowed cannot be null');
        }
        $this->container['isunapproveallowed'] = $isunapproveallowed;

        return $this;
    }

    /**
     * Gets isunlinkallowed
     *
     * @return bool
     */
    public function getIsunlinkallowed()
    {
        return $this->container['isunlinkallowed'];
    }

    /**
     * Sets isunlinkallowed
     *
     * @param bool $isunlinkallowed isunlinkallowed
     *
     * @return self
     */
    public function setIsunlinkallowed($isunlinkallowed)
    {
        if (is_null($isunlinkallowed)) {
            throw new \InvalidArgumentException('non-nullable isunlinkallowed cannot be null');
        }
        $this->container['isunlinkallowed'] = $isunlinkallowed;

        return $this;
    }

    /**
     * Gets iswaitingforreview
     *
     * @return bool
     */
    public function getIswaitingforreview()
    {
        return $this->container['iswaitingforreview'];
    }

    /**
     * Sets iswaitingforreview
     *
     * @param bool $iswaitingforreview iswaitingforreview
     *
     * @return self
     */
    public function setIswaitingforreview($iswaitingforreview)
    {
        if (is_null($iswaitingforreview)) {
            throw new \InvalidArgumentException('non-nullable iswaitingforreview cannot be null');
        }
        $this->container['iswaitingforreview'] = $iswaitingforreview;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets origtemplateid
     *
     * @return int
     */
    public function getOrigtemplateid()
    {
        return $this->container['origtemplateid'];
    }

    /**
     * Sets origtemplateid
     *
     * @param int $origtemplateid origtemplateid
     *
     * @return self
     */
    public function setOrigtemplateid($origtemplateid)
    {
        if (is_null($origtemplateid)) {
            throw new \InvalidArgumentException('non-nullable origtemplateid cannot be null');
        }
        $this->container['origtemplateid'] = $origtemplateid;

        return $this;
    }

    /**
     * Gets reviewer
     *
     * @return \OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser|null
     */
    public function getReviewer()
    {
        return $this->container['reviewer'];
    }

    /**
     * Sets reviewer
     *
     * @param \OpenAPI\Client\Model\CoreCompetencyGradeCompetency200ResponseActionuser|null $reviewer reviewer
     *
     * @return self
     */
    public function setReviewer($reviewer)
    {
        if (is_null($reviewer)) {
            throw new \InvalidArgumentException('non-nullable reviewer cannot be null');
        }
        $this->container['reviewer'] = $reviewer;

        return $this;
    }

    /**
     * Gets reviewerid
     *
     * @return int
     */
    public function getReviewerid()
    {
        return $this->container['reviewerid'];
    }

    /**
     * Sets reviewerid
     *
     * @param int $reviewerid reviewerid
     *
     * @return self
     */
    public function setReviewerid($reviewerid)
    {
        if (is_null($reviewerid)) {
            throw new \InvalidArgumentException('non-nullable reviewerid cannot be null');
        }
        $this->container['reviewerid'] = $reviewerid;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets statusname
     *
     * @return string
     */
    public function getStatusname()
    {
        return $this->container['statusname'];
    }

    /**
     * Sets statusname
     *
     * @param string $statusname statusname
     *
     * @return self
     */
    public function setStatusname($statusname)
    {
        if (is_null($statusname)) {
            throw new \InvalidArgumentException('non-nullable statusname cannot be null');
        }
        $this->container['statusname'] = $statusname;

        return $this;
    }

    /**
     * Gets template
     *
     * @return \OpenAPI\Client\Model\CoreCompetencyCreateTemplate200Response|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param \OpenAPI\Client\Model\CoreCompetencyCreateTemplate200Response|null $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets templateid
     *
     * @return int
     */
    public function getTemplateid()
    {
        return $this->container['templateid'];
    }

    /**
     * Sets templateid
     *
     * @param int $templateid templateid
     *
     * @return self
     */
    public function setTemplateid($templateid)
    {
        if (is_null($templateid)) {
            throw new \InvalidArgumentException('non-nullable templateid cannot be null');
        }
        $this->container['templateid'] = $templateid;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return int
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param int $timecreated timecreated
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int $timemodified timemodified
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets userid
     *
     * @return int
     */
    public function getUserid()
    {
        return $this->container['userid'];
    }

    /**
     * Sets userid
     *
     * @param int $userid userid
     *
     * @return self
     */
    public function setUserid($userid)
    {
        if (is_null($userid)) {
            throw new \InvalidArgumentException('non-nullable userid cannot be null');
        }
        $this->container['userid'] = $userid;

        return $this;
    }

    /**
     * Gets usermodified
     *
     * @return int
     */
    public function getUsermodified()
    {
        return $this->container['usermodified'];
    }

    /**
     * Sets usermodified
     *
     * @param int $usermodified usermodified
     *
     * @return self
     */
    public function setUsermodified($usermodified)
    {
        if (is_null($usermodified)) {
            throw new \InvalidArgumentException('non-nullable usermodified cannot be null');
        }
        $this->container['usermodified'] = $usermodified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


