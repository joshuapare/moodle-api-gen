<?php
/**
 * CoreReportbuilderReportsGet200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreReportbuilderReportsGet200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreReportbuilderReportsGet200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_reportbuilder_reports_get_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'area' => 'string',
        'attributes' => '\OpenAPI\Client\Model\CoreReportbuilderReportsGet200ResponseAttributesInner[]',
        'cardview' => '\OpenAPI\Client\Model\CoreReportbuilderReportsGet200ResponseCardview',
        'classes' => 'string',
        'component' => 'string',
        'conditiondata' => 'string',
        'conditions' => '\OpenAPI\Client\Model\CoreReportbuilderConditionsDelete200Response',
        'contextid' => 'int',
        'editmode' => 'bool',
        'filters' => '\OpenAPI\Client\Model\CoreReportbuilderFiltersDelete200Response',
        'filtersapplied' => 'int',
        'filtersform' => 'string',
        'filterspresent' => 'bool',
        'id' => 'int',
        'itemid' => 'int',
        'javascript' => 'string',
        'name' => 'string',
        'settingsdata' => 'string',
        'sidebarmenucards' => '\OpenAPI\Client\Model\CoreReportbuilderReportsGet200ResponseSidebarmenucards',
        'sorting' => '\OpenAPI\Client\Model\CoreReportbuilderColumnsDelete200Response',
        'source' => 'string',
        'table' => 'string',
        'timecreated' => 'int',
        'timemodified' => 'int',
        'type' => 'int',
        'uniquerows' => 'bool',
        'usercreated' => 'int',
        'usermodified' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'area' => null,
        'attributes' => null,
        'cardview' => null,
        'classes' => null,
        'component' => null,
        'conditiondata' => null,
        'conditions' => null,
        'contextid' => null,
        'editmode' => null,
        'filters' => null,
        'filtersapplied' => null,
        'filtersform' => null,
        'filterspresent' => null,
        'id' => null,
        'itemid' => null,
        'javascript' => null,
        'name' => null,
        'settingsdata' => null,
        'sidebarmenucards' => null,
        'sorting' => null,
        'source' => null,
        'table' => null,
        'timecreated' => null,
        'timemodified' => null,
        'type' => null,
        'uniquerows' => null,
        'usercreated' => null,
        'usermodified' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'area' => false,
        'attributes' => false,
        'cardview' => false,
        'classes' => false,
        'component' => false,
        'conditiondata' => false,
        'conditions' => false,
        'contextid' => false,
        'editmode' => false,
        'filters' => false,
        'filtersapplied' => false,
        'filtersform' => false,
        'filterspresent' => false,
        'id' => false,
        'itemid' => false,
        'javascript' => false,
        'name' => false,
        'settingsdata' => false,
        'sidebarmenucards' => false,
        'sorting' => false,
        'source' => false,
        'table' => false,
        'timecreated' => false,
        'timemodified' => false,
        'type' => false,
        'uniquerows' => false,
        'usercreated' => false,
        'usermodified' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'area' => 'area',
        'attributes' => 'attributes',
        'cardview' => 'cardview',
        'classes' => 'classes',
        'component' => 'component',
        'conditiondata' => 'conditiondata',
        'conditions' => 'conditions',
        'contextid' => 'contextid',
        'editmode' => 'editmode',
        'filters' => 'filters',
        'filtersapplied' => 'filtersapplied',
        'filtersform' => 'filtersform',
        'filterspresent' => 'filterspresent',
        'id' => 'id',
        'itemid' => 'itemid',
        'javascript' => 'javascript',
        'name' => 'name',
        'settingsdata' => 'settingsdata',
        'sidebarmenucards' => 'sidebarmenucards',
        'sorting' => 'sorting',
        'source' => 'source',
        'table' => 'table',
        'timecreated' => 'timecreated',
        'timemodified' => 'timemodified',
        'type' => 'type',
        'uniquerows' => 'uniquerows',
        'usercreated' => 'usercreated',
        'usermodified' => 'usermodified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'area' => 'setArea',
        'attributes' => 'setAttributes',
        'cardview' => 'setCardview',
        'classes' => 'setClasses',
        'component' => 'setComponent',
        'conditiondata' => 'setConditiondata',
        'conditions' => 'setConditions',
        'contextid' => 'setContextid',
        'editmode' => 'setEditmode',
        'filters' => 'setFilters',
        'filtersapplied' => 'setFiltersapplied',
        'filtersform' => 'setFiltersform',
        'filterspresent' => 'setFilterspresent',
        'id' => 'setId',
        'itemid' => 'setItemid',
        'javascript' => 'setJavascript',
        'name' => 'setName',
        'settingsdata' => 'setSettingsdata',
        'sidebarmenucards' => 'setSidebarmenucards',
        'sorting' => 'setSorting',
        'source' => 'setSource',
        'table' => 'setTable',
        'timecreated' => 'setTimecreated',
        'timemodified' => 'setTimemodified',
        'type' => 'setType',
        'uniquerows' => 'setUniquerows',
        'usercreated' => 'setUsercreated',
        'usermodified' => 'setUsermodified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'area' => 'getArea',
        'attributes' => 'getAttributes',
        'cardview' => 'getCardview',
        'classes' => 'getClasses',
        'component' => 'getComponent',
        'conditiondata' => 'getConditiondata',
        'conditions' => 'getConditions',
        'contextid' => 'getContextid',
        'editmode' => 'getEditmode',
        'filters' => 'getFilters',
        'filtersapplied' => 'getFiltersapplied',
        'filtersform' => 'getFiltersform',
        'filterspresent' => 'getFilterspresent',
        'id' => 'getId',
        'itemid' => 'getItemid',
        'javascript' => 'getJavascript',
        'name' => 'getName',
        'settingsdata' => 'getSettingsdata',
        'sidebarmenucards' => 'getSidebarmenucards',
        'sorting' => 'getSorting',
        'source' => 'getSource',
        'table' => 'getTable',
        'timecreated' => 'getTimecreated',
        'timemodified' => 'getTimemodified',
        'type' => 'getType',
        'uniquerows' => 'getUniquerows',
        'usercreated' => 'getUsercreated',
        'usermodified' => 'getUsermodified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('area', $data ?? [], '');
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('cardview', $data ?? [], null);
        $this->setIfExists('classes', $data ?? [], 'null');
        $this->setIfExists('component', $data ?? [], '');
        $this->setIfExists('conditiondata', $data ?? [], null);
        $this->setIfExists('conditions', $data ?? [], null);
        $this->setIfExists('contextid', $data ?? [], {});
        $this->setIfExists('editmode', $data ?? [], null);
        $this->setIfExists('filters', $data ?? [], null);
        $this->setIfExists('filtersapplied', $data ?? [], null);
        $this->setIfExists('filtersform', $data ?? [], 'null');
        $this->setIfExists('filterspresent', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], 0);
        $this->setIfExists('itemid', $data ?? [], 0);
        $this->setIfExists('javascript', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('settingsdata', $data ?? [], null);
        $this->setIfExists('sidebarmenucards', $data ?? [], null);
        $this->setIfExists('sorting', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('table', $data ?? [], 'null');
        $this->setIfExists('timecreated', $data ?? [], 0);
        $this->setIfExists('timemodified', $data ?? [], 0);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('uniquerows', $data ?? [], false);
        $this->setIfExists('usercreated', $data ?? [], {});
        $this->setIfExists('usermodified', $data ?? [], 0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['area'] === null) {
            $invalidProperties[] = "'area' can't be null";
        }
        if ($this->container['attributes'] === null) {
            $invalidProperties[] = "'attributes' can't be null";
        }
        if ($this->container['classes'] === null) {
            $invalidProperties[] = "'classes' can't be null";
        }
        if ($this->container['component'] === null) {
            $invalidProperties[] = "'component' can't be null";
        }
        if ($this->container['conditiondata'] === null) {
            $invalidProperties[] = "'conditiondata' can't be null";
        }
        if ($this->container['contextid'] === null) {
            $invalidProperties[] = "'contextid' can't be null";
        }
        if ($this->container['editmode'] === null) {
            $invalidProperties[] = "'editmode' can't be null";
        }
        if ($this->container['filtersapplied'] === null) {
            $invalidProperties[] = "'filtersapplied' can't be null";
        }
        if ($this->container['filtersform'] === null) {
            $invalidProperties[] = "'filtersform' can't be null";
        }
        if ($this->container['filterspresent'] === null) {
            $invalidProperties[] = "'filterspresent' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['itemid'] === null) {
            $invalidProperties[] = "'itemid' can't be null";
        }
        if ($this->container['javascript'] === null) {
            $invalidProperties[] = "'javascript' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['settingsdata'] === null) {
            $invalidProperties[] = "'settingsdata' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['table'] === null) {
            $invalidProperties[] = "'table' can't be null";
        }
        if ($this->container['timecreated'] === null) {
            $invalidProperties[] = "'timecreated' can't be null";
        }
        if ($this->container['timemodified'] === null) {
            $invalidProperties[] = "'timemodified' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['uniquerows'] === null) {
            $invalidProperties[] = "'uniquerows' can't be null";
        }
        if ($this->container['usercreated'] === null) {
            $invalidProperties[] = "'usercreated' can't be null";
        }
        if ($this->container['usermodified'] === null) {
            $invalidProperties[] = "'usermodified' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets area
     *
     * @return string
     */
    public function getArea()
    {
        return $this->container['area'];
    }

    /**
     * Sets area
     *
     * @param string $area area
     *
     * @return self
     */
    public function setArea($area)
    {
        if (is_null($area)) {
            throw new \InvalidArgumentException('non-nullable area cannot be null');
        }
        $this->container['area'] = $area;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\CoreReportbuilderReportsGet200ResponseAttributesInner[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\CoreReportbuilderReportsGet200ResponseAttributesInner[] $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets cardview
     *
     * @return \OpenAPI\Client\Model\CoreReportbuilderReportsGet200ResponseCardview|null
     */
    public function getCardview()
    {
        return $this->container['cardview'];
    }

    /**
     * Sets cardview
     *
     * @param \OpenAPI\Client\Model\CoreReportbuilderReportsGet200ResponseCardview|null $cardview cardview
     *
     * @return self
     */
    public function setCardview($cardview)
    {
        if (is_null($cardview)) {
            throw new \InvalidArgumentException('non-nullable cardview cannot be null');
        }
        $this->container['cardview'] = $cardview;

        return $this;
    }

    /**
     * Gets classes
     *
     * @return string
     */
    public function getClasses()
    {
        return $this->container['classes'];
    }

    /**
     * Sets classes
     *
     * @param string $classes classes
     *
     * @return self
     */
    public function setClasses($classes)
    {
        if (is_null($classes)) {
            throw new \InvalidArgumentException('non-nullable classes cannot be null');
        }
        $this->container['classes'] = $classes;

        return $this;
    }

    /**
     * Gets component
     *
     * @return string
     */
    public function getComponent()
    {
        return $this->container['component'];
    }

    /**
     * Sets component
     *
     * @param string $component component
     *
     * @return self
     */
    public function setComponent($component)
    {
        if (is_null($component)) {
            throw new \InvalidArgumentException('non-nullable component cannot be null');
        }
        $this->container['component'] = $component;

        return $this;
    }

    /**
     * Gets conditiondata
     *
     * @return string
     */
    public function getConditiondata()
    {
        return $this->container['conditiondata'];
    }

    /**
     * Sets conditiondata
     *
     * @param string $conditiondata conditiondata
     *
     * @return self
     */
    public function setConditiondata($conditiondata)
    {
        if (is_null($conditiondata)) {
            throw new \InvalidArgumentException('non-nullable conditiondata cannot be null');
        }
        $this->container['conditiondata'] = $conditiondata;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \OpenAPI\Client\Model\CoreReportbuilderConditionsDelete200Response|null
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \OpenAPI\Client\Model\CoreReportbuilderConditionsDelete200Response|null $conditions conditions
     *
     * @return self
     */
    public function setConditions($conditions)
    {
        if (is_null($conditions)) {
            throw new \InvalidArgumentException('non-nullable conditions cannot be null');
        }
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets contextid
     *
     * @return int
     */
    public function getContextid()
    {
        return $this->container['contextid'];
    }

    /**
     * Sets contextid
     *
     * @param int $contextid contextid
     *
     * @return self
     */
    public function setContextid($contextid)
    {
        if (is_null($contextid)) {
            throw new \InvalidArgumentException('non-nullable contextid cannot be null');
        }
        $this->container['contextid'] = $contextid;

        return $this;
    }

    /**
     * Gets editmode
     *
     * @return bool
     */
    public function getEditmode()
    {
        return $this->container['editmode'];
    }

    /**
     * Sets editmode
     *
     * @param bool $editmode editmode
     *
     * @return self
     */
    public function setEditmode($editmode)
    {
        if (is_null($editmode)) {
            throw new \InvalidArgumentException('non-nullable editmode cannot be null');
        }
        $this->container['editmode'] = $editmode;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \OpenAPI\Client\Model\CoreReportbuilderFiltersDelete200Response|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \OpenAPI\Client\Model\CoreReportbuilderFiltersDelete200Response|null $filters filters
     *
     * @return self
     */
    public function setFilters($filters)
    {
        if (is_null($filters)) {
            throw new \InvalidArgumentException('non-nullable filters cannot be null');
        }
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets filtersapplied
     *
     * @return int
     */
    public function getFiltersapplied()
    {
        return $this->container['filtersapplied'];
    }

    /**
     * Sets filtersapplied
     *
     * @param int $filtersapplied filtersapplied
     *
     * @return self
     */
    public function setFiltersapplied($filtersapplied)
    {
        if (is_null($filtersapplied)) {
            throw new \InvalidArgumentException('non-nullable filtersapplied cannot be null');
        }
        $this->container['filtersapplied'] = $filtersapplied;

        return $this;
    }

    /**
     * Gets filtersform
     *
     * @return string
     */
    public function getFiltersform()
    {
        return $this->container['filtersform'];
    }

    /**
     * Sets filtersform
     *
     * @param string $filtersform filtersform
     *
     * @return self
     */
    public function setFiltersform($filtersform)
    {
        if (is_null($filtersform)) {
            throw new \InvalidArgumentException('non-nullable filtersform cannot be null');
        }
        $this->container['filtersform'] = $filtersform;

        return $this;
    }

    /**
     * Gets filterspresent
     *
     * @return bool
     */
    public function getFilterspresent()
    {
        return $this->container['filterspresent'];
    }

    /**
     * Sets filterspresent
     *
     * @param bool $filterspresent filterspresent
     *
     * @return self
     */
    public function setFilterspresent($filterspresent)
    {
        if (is_null($filterspresent)) {
            throw new \InvalidArgumentException('non-nullable filterspresent cannot be null');
        }
        $this->container['filterspresent'] = $filterspresent;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets itemid
     *
     * @return int
     */
    public function getItemid()
    {
        return $this->container['itemid'];
    }

    /**
     * Sets itemid
     *
     * @param int $itemid itemid
     *
     * @return self
     */
    public function setItemid($itemid)
    {
        if (is_null($itemid)) {
            throw new \InvalidArgumentException('non-nullable itemid cannot be null');
        }
        $this->container['itemid'] = $itemid;

        return $this;
    }

    /**
     * Gets javascript
     *
     * @return string
     */
    public function getJavascript()
    {
        return $this->container['javascript'];
    }

    /**
     * Sets javascript
     *
     * @param string $javascript javascript
     *
     * @return self
     */
    public function setJavascript($javascript)
    {
        if (is_null($javascript)) {
            throw new \InvalidArgumentException('non-nullable javascript cannot be null');
        }
        $this->container['javascript'] = $javascript;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets settingsdata
     *
     * @return string
     */
    public function getSettingsdata()
    {
        return $this->container['settingsdata'];
    }

    /**
     * Sets settingsdata
     *
     * @param string $settingsdata settingsdata
     *
     * @return self
     */
    public function setSettingsdata($settingsdata)
    {
        if (is_null($settingsdata)) {
            throw new \InvalidArgumentException('non-nullable settingsdata cannot be null');
        }
        $this->container['settingsdata'] = $settingsdata;

        return $this;
    }

    /**
     * Gets sidebarmenucards
     *
     * @return \OpenAPI\Client\Model\CoreReportbuilderReportsGet200ResponseSidebarmenucards|null
     */
    public function getSidebarmenucards()
    {
        return $this->container['sidebarmenucards'];
    }

    /**
     * Sets sidebarmenucards
     *
     * @param \OpenAPI\Client\Model\CoreReportbuilderReportsGet200ResponseSidebarmenucards|null $sidebarmenucards sidebarmenucards
     *
     * @return self
     */
    public function setSidebarmenucards($sidebarmenucards)
    {
        if (is_null($sidebarmenucards)) {
            throw new \InvalidArgumentException('non-nullable sidebarmenucards cannot be null');
        }
        $this->container['sidebarmenucards'] = $sidebarmenucards;

        return $this;
    }

    /**
     * Gets sorting
     *
     * @return \OpenAPI\Client\Model\CoreReportbuilderColumnsDelete200Response|null
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param \OpenAPI\Client\Model\CoreReportbuilderColumnsDelete200Response|null $sorting sorting
     *
     * @return self
     */
    public function setSorting($sorting)
    {
        if (is_null($sorting)) {
            throw new \InvalidArgumentException('non-nullable sorting cannot be null');
        }
        $this->container['sorting'] = $sorting;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets table
     *
     * @return string
     */
    public function getTable()
    {
        return $this->container['table'];
    }

    /**
     * Sets table
     *
     * @param string $table table
     *
     * @return self
     */
    public function setTable($table)
    {
        if (is_null($table)) {
            throw new \InvalidArgumentException('non-nullable table cannot be null');
        }
        $this->container['table'] = $table;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return int
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param int $timecreated timecreated
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int $timemodified timemodified
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets uniquerows
     *
     * @return bool
     */
    public function getUniquerows()
    {
        return $this->container['uniquerows'];
    }

    /**
     * Sets uniquerows
     *
     * @param bool $uniquerows uniquerows
     *
     * @return self
     */
    public function setUniquerows($uniquerows)
    {
        if (is_null($uniquerows)) {
            throw new \InvalidArgumentException('non-nullable uniquerows cannot be null');
        }
        $this->container['uniquerows'] = $uniquerows;

        return $this;
    }

    /**
     * Gets usercreated
     *
     * @return int
     */
    public function getUsercreated()
    {
        return $this->container['usercreated'];
    }

    /**
     * Sets usercreated
     *
     * @param int $usercreated usercreated
     *
     * @return self
     */
    public function setUsercreated($usercreated)
    {
        if (is_null($usercreated)) {
            throw new \InvalidArgumentException('non-nullable usercreated cannot be null');
        }
        $this->container['usercreated'] = $usercreated;

        return $this;
    }

    /**
     * Gets usermodified
     *
     * @return int
     */
    public function getUsermodified()
    {
        return $this->container['usermodified'];
    }

    /**
     * Sets usermodified
     *
     * @param int $usermodified usermodified
     *
     * @return self
     */
    public function setUsermodified($usermodified)
    {
        if (is_null($usermodified)) {
            throw new \InvalidArgumentException('non-nullable usermodified cannot be null');
        }
        $this->container['usermodified'] = $usermodified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


