<?php
/**
 * ModAssignGetParticipant200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModAssignGetParticipant200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModAssignGetParticipant200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_assign_get_participant_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allowsubmissionsfromdate' => 'int',
        'blindmarking' => 'bool',
        'cutoffdate' => 'int',
        'duedate' => 'int',
        'duedatestr' => 'string',
        'fullname' => 'string',
        'grantedextension' => 'bool',
        'groupid' => 'int',
        'groupname' => 'string',
        'id' => 'int',
        'requiregrading' => 'bool',
        'submissionstatus' => 'string',
        'submitted' => 'bool',
        'user' => '\OpenAPI\Client\Model\ModAssignGetParticipant200ResponseUser'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allowsubmissionsfromdate' => null,
        'blindmarking' => null,
        'cutoffdate' => null,
        'duedate' => null,
        'duedatestr' => null,
        'fullname' => null,
        'grantedextension' => null,
        'groupid' => null,
        'groupname' => null,
        'id' => null,
        'requiregrading' => null,
        'submissionstatus' => null,
        'submitted' => null,
        'user' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allowsubmissionsfromdate' => false,
        'blindmarking' => false,
        'cutoffdate' => false,
        'duedate' => false,
        'duedatestr' => false,
        'fullname' => false,
        'grantedextension' => false,
        'groupid' => false,
        'groupname' => false,
        'id' => false,
        'requiregrading' => false,
        'submissionstatus' => false,
        'submitted' => false,
        'user' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowsubmissionsfromdate' => 'allowsubmissionsfromdate',
        'blindmarking' => 'blindmarking',
        'cutoffdate' => 'cutoffdate',
        'duedate' => 'duedate',
        'duedatestr' => 'duedatestr',
        'fullname' => 'fullname',
        'grantedextension' => 'grantedextension',
        'groupid' => 'groupid',
        'groupname' => 'groupname',
        'id' => 'id',
        'requiregrading' => 'requiregrading',
        'submissionstatus' => 'submissionstatus',
        'submitted' => 'submitted',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowsubmissionsfromdate' => 'setAllowsubmissionsfromdate',
        'blindmarking' => 'setBlindmarking',
        'cutoffdate' => 'setCutoffdate',
        'duedate' => 'setDuedate',
        'duedatestr' => 'setDuedatestr',
        'fullname' => 'setFullname',
        'grantedextension' => 'setGrantedextension',
        'groupid' => 'setGroupid',
        'groupname' => 'setGroupname',
        'id' => 'setId',
        'requiregrading' => 'setRequiregrading',
        'submissionstatus' => 'setSubmissionstatus',
        'submitted' => 'setSubmitted',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowsubmissionsfromdate' => 'getAllowsubmissionsfromdate',
        'blindmarking' => 'getBlindmarking',
        'cutoffdate' => 'getCutoffdate',
        'duedate' => 'getDuedate',
        'duedatestr' => 'getDuedatestr',
        'fullname' => 'getFullname',
        'grantedextension' => 'getGrantedextension',
        'groupid' => 'getGroupid',
        'groupname' => 'getGroupname',
        'id' => 'getId',
        'requiregrading' => 'getRequiregrading',
        'submissionstatus' => 'getSubmissionstatus',
        'submitted' => 'getSubmitted',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allowsubmissionsfromdate', $data ?? [], null);
        $this->setIfExists('blindmarking', $data ?? [], null);
        $this->setIfExists('cutoffdate', $data ?? [], null);
        $this->setIfExists('duedate', $data ?? [], null);
        $this->setIfExists('duedatestr', $data ?? [], 'null');
        $this->setIfExists('fullname', $data ?? [], null);
        $this->setIfExists('grantedextension', $data ?? [], null);
        $this->setIfExists('groupid', $data ?? [], null);
        $this->setIfExists('groupname', $data ?? [], 'null');
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('requiregrading', $data ?? [], null);
        $this->setIfExists('submissionstatus', $data ?? [], 'null');
        $this->setIfExists('submitted', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['allowsubmissionsfromdate'] === null) {
            $invalidProperties[] = "'allowsubmissionsfromdate' can't be null";
        }
        if ($this->container['blindmarking'] === null) {
            $invalidProperties[] = "'blindmarking' can't be null";
        }
        if ($this->container['cutoffdate'] === null) {
            $invalidProperties[] = "'cutoffdate' can't be null";
        }
        if ($this->container['duedate'] === null) {
            $invalidProperties[] = "'duedate' can't be null";
        }
        if ($this->container['duedatestr'] === null) {
            $invalidProperties[] = "'duedatestr' can't be null";
        }
        if ($this->container['fullname'] === null) {
            $invalidProperties[] = "'fullname' can't be null";
        }
        if ($this->container['grantedextension'] === null) {
            $invalidProperties[] = "'grantedextension' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['requiregrading'] === null) {
            $invalidProperties[] = "'requiregrading' can't be null";
        }
        if ($this->container['submitted'] === null) {
            $invalidProperties[] = "'submitted' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowsubmissionsfromdate
     *
     * @return int
     */
    public function getAllowsubmissionsfromdate()
    {
        return $this->container['allowsubmissionsfromdate'];
    }

    /**
     * Sets allowsubmissionsfromdate
     *
     * @param int $allowsubmissionsfromdate allowsubmissionsfromdate for the user
     *
     * @return self
     */
    public function setAllowsubmissionsfromdate($allowsubmissionsfromdate)
    {
        if (is_null($allowsubmissionsfromdate)) {
            throw new \InvalidArgumentException('non-nullable allowsubmissionsfromdate cannot be null');
        }
        $this->container['allowsubmissionsfromdate'] = $allowsubmissionsfromdate;

        return $this;
    }

    /**
     * Gets blindmarking
     *
     * @return bool
     */
    public function getBlindmarking()
    {
        return $this->container['blindmarking'];
    }

    /**
     * Sets blindmarking
     *
     * @param bool $blindmarking is blind marking enabled for this assignment
     *
     * @return self
     */
    public function setBlindmarking($blindmarking)
    {
        if (is_null($blindmarking)) {
            throw new \InvalidArgumentException('non-nullable blindmarking cannot be null');
        }
        $this->container['blindmarking'] = $blindmarking;

        return $this;
    }

    /**
     * Gets cutoffdate
     *
     * @return int
     */
    public function getCutoffdate()
    {
        return $this->container['cutoffdate'];
    }

    /**
     * Sets cutoffdate
     *
     * @param int $cutoffdate cutoffdate for the user
     *
     * @return self
     */
    public function setCutoffdate($cutoffdate)
    {
        if (is_null($cutoffdate)) {
            throw new \InvalidArgumentException('non-nullable cutoffdate cannot be null');
        }
        $this->container['cutoffdate'] = $cutoffdate;

        return $this;
    }

    /**
     * Gets duedate
     *
     * @return int
     */
    public function getDuedate()
    {
        return $this->container['duedate'];
    }

    /**
     * Sets duedate
     *
     * @param int $duedate duedate for the user
     *
     * @return self
     */
    public function setDuedate($duedate)
    {
        if (is_null($duedate)) {
            throw new \InvalidArgumentException('non-nullable duedate cannot be null');
        }
        $this->container['duedate'] = $duedate;

        return $this;
    }

    /**
     * Gets duedatestr
     *
     * @return string
     */
    public function getDuedatestr()
    {
        return $this->container['duedatestr'];
    }

    /**
     * Sets duedatestr
     *
     * @param string $duedatestr duedate for the user
     *
     * @return self
     */
    public function setDuedatestr($duedatestr)
    {
        if (is_null($duedatestr)) {
            throw new \InvalidArgumentException('non-nullable duedatestr cannot be null');
        }
        $this->container['duedatestr'] = $duedatestr;

        return $this;
    }

    /**
     * Gets fullname
     *
     * @return string
     */
    public function getFullname()
    {
        return $this->container['fullname'];
    }

    /**
     * Sets fullname
     *
     * @param string $fullname The fullname of the user
     *
     * @return self
     */
    public function setFullname($fullname)
    {
        if (is_null($fullname)) {
            throw new \InvalidArgumentException('non-nullable fullname cannot be null');
        }
        $this->container['fullname'] = $fullname;

        return $this;
    }

    /**
     * Gets grantedextension
     *
     * @return bool
     */
    public function getGrantedextension()
    {
        return $this->container['grantedextension'];
    }

    /**
     * Sets grantedextension
     *
     * @param bool $grantedextension have they been granted an extension
     *
     * @return self
     */
    public function setGrantedextension($grantedextension)
    {
        if (is_null($grantedextension)) {
            throw new \InvalidArgumentException('non-nullable grantedextension cannot be null');
        }
        $this->container['grantedextension'] = $grantedextension;

        return $this;
    }

    /**
     * Gets groupid
     *
     * @return int|null
     */
    public function getGroupid()
    {
        return $this->container['groupid'];
    }

    /**
     * Sets groupid
     *
     * @param int|null $groupid for group assignments this is the group id
     *
     * @return self
     */
    public function setGroupid($groupid)
    {
        if (is_null($groupid)) {
            throw new \InvalidArgumentException('non-nullable groupid cannot be null');
        }
        $this->container['groupid'] = $groupid;

        return $this;
    }

    /**
     * Gets groupname
     *
     * @return string|null
     */
    public function getGroupname()
    {
        return $this->container['groupname'];
    }

    /**
     * Sets groupname
     *
     * @param string|null $groupname for group assignments this is the group name
     *
     * @return self
     */
    public function setGroupname($groupname)
    {
        if (is_null($groupname)) {
            throw new \InvalidArgumentException('non-nullable groupname cannot be null');
        }
        $this->container['groupname'] = $groupname;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of the user
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets requiregrading
     *
     * @return bool
     */
    public function getRequiregrading()
    {
        return $this->container['requiregrading'];
    }

    /**
     * Sets requiregrading
     *
     * @param bool $requiregrading is their submission waiting for grading
     *
     * @return self
     */
    public function setRequiregrading($requiregrading)
    {
        if (is_null($requiregrading)) {
            throw new \InvalidArgumentException('non-nullable requiregrading cannot be null');
        }
        $this->container['requiregrading'] = $requiregrading;

        return $this;
    }

    /**
     * Gets submissionstatus
     *
     * @return string|null
     */
    public function getSubmissionstatus()
    {
        return $this->container['submissionstatus'];
    }

    /**
     * Sets submissionstatus
     *
     * @param string|null $submissionstatus The submission status (new, draft, reopened or submitted).                 Empty when not submitted.
     *
     * @return self
     */
    public function setSubmissionstatus($submissionstatus)
    {
        if (is_null($submissionstatus)) {
            throw new \InvalidArgumentException('non-nullable submissionstatus cannot be null');
        }
        $this->container['submissionstatus'] = $submissionstatus;

        return $this;
    }

    /**
     * Gets submitted
     *
     * @return bool
     */
    public function getSubmitted()
    {
        return $this->container['submitted'];
    }

    /**
     * Sets submitted
     *
     * @param bool $submitted have they submitted their assignment
     *
     * @return self
     */
    public function setSubmitted($submitted)
    {
        if (is_null($submitted)) {
            throw new \InvalidArgumentException('non-nullable submitted cannot be null');
        }
        $this->container['submitted'] = $submitted;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\ModAssignGetParticipant200ResponseUser|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\ModAssignGetParticipant200ResponseUser|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


