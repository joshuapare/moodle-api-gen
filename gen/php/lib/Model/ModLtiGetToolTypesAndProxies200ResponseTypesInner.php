<?php
/**
 * ModLtiGetToolTypesAndProxies200ResponseTypesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModLtiGetToolTypesAndProxies200ResponseTypesInner Class Doc Comment
 *
 * @category Class
 * @description Tool
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModLtiGetToolTypesAndProxies200ResponseTypesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_lti_get_tool_types_and_proxies_200_response_types_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'capabilitygroups' => 'object[]',
        'clientid' => 'string',
        'courseid' => 'int',
        'deploymentid' => 'int',
        'description' => 'string',
        'hascapabilitygroups' => 'bool',
        'id' => 'int',
        'instancecount' => 'int',
        'instanceids' => 'object[]',
        'name' => 'string',
        'platformid' => 'string',
        'state' => '\OpenAPI\Client\Model\ModLtiGetToolTypesAndProxies200ResponseTypesInnerState',
        'urls' => '\OpenAPI\Client\Model\ModLtiGetToolTypesAndProxies200ResponseTypesInnerUrls'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'capabilitygroups' => null,
        'clientid' => null,
        'courseid' => null,
        'deploymentid' => null,
        'description' => null,
        'hascapabilitygroups' => null,
        'id' => null,
        'instancecount' => null,
        'instanceids' => null,
        'name' => null,
        'platformid' => null,
        'state' => null,
        'urls' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'capabilitygroups' => false,
        'clientid' => false,
        'courseid' => false,
        'deploymentid' => false,
        'description' => false,
        'hascapabilitygroups' => false,
        'id' => false,
        'instancecount' => false,
        'instanceids' => false,
        'name' => false,
        'platformid' => false,
        'state' => false,
        'urls' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'capabilitygroups' => 'capabilitygroups',
        'clientid' => 'clientid',
        'courseid' => 'courseid',
        'deploymentid' => 'deploymentid',
        'description' => 'description',
        'hascapabilitygroups' => 'hascapabilitygroups',
        'id' => 'id',
        'instancecount' => 'instancecount',
        'instanceids' => 'instanceids',
        'name' => 'name',
        'platformid' => 'platformid',
        'state' => 'state',
        'urls' => 'urls'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'capabilitygroups' => 'setCapabilitygroups',
        'clientid' => 'setClientid',
        'courseid' => 'setCourseid',
        'deploymentid' => 'setDeploymentid',
        'description' => 'setDescription',
        'hascapabilitygroups' => 'setHascapabilitygroups',
        'id' => 'setId',
        'instancecount' => 'setInstancecount',
        'instanceids' => 'setInstanceids',
        'name' => 'setName',
        'platformid' => 'setPlatformid',
        'state' => 'setState',
        'urls' => 'setUrls'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'capabilitygroups' => 'getCapabilitygroups',
        'clientid' => 'getClientid',
        'courseid' => 'getCourseid',
        'deploymentid' => 'getDeploymentid',
        'description' => 'getDescription',
        'hascapabilitygroups' => 'getHascapabilitygroups',
        'id' => 'getId',
        'instancecount' => 'getInstancecount',
        'instanceids' => 'getInstanceids',
        'name' => 'getName',
        'platformid' => 'getPlatformid',
        'state' => 'getState',
        'urls' => 'getUrls'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('capabilitygroups', $data ?? [], null);
        $this->setIfExists('clientid', $data ?? [], null);
        $this->setIfExists('courseid', $data ?? [], 0);
        $this->setIfExists('deploymentid', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('hascapabilitygroups', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('instancecount', $data ?? [], null);
        $this->setIfExists('instanceids', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('platformid', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('urls', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets capabilitygroups
     *
     * @return object[]|null
     */
    public function getCapabilitygroups()
    {
        return $this->container['capabilitygroups'];
    }

    /**
     * Sets capabilitygroups
     *
     * @param object[]|null $capabilitygroups capabilitygroups
     *
     * @return self
     */
    public function setCapabilitygroups($capabilitygroups)
    {
        if (is_null($capabilitygroups)) {
            throw new \InvalidArgumentException('non-nullable capabilitygroups cannot be null');
        }
        $this->container['capabilitygroups'] = $capabilitygroups;

        return $this;
    }

    /**
     * Gets clientid
     *
     * @return string|null
     */
    public function getClientid()
    {
        return $this->container['clientid'];
    }

    /**
     * Sets clientid
     *
     * @param string|null $clientid Client ID
     *
     * @return self
     */
    public function setClientid($clientid)
    {
        if (is_null($clientid)) {
            throw new \InvalidArgumentException('non-nullable clientid cannot be null');
        }
        $this->container['clientid'] = $clientid;

        return $this;
    }

    /**
     * Gets courseid
     *
     * @return int|null
     */
    public function getCourseid()
    {
        return $this->container['courseid'];
    }

    /**
     * Sets courseid
     *
     * @param int|null $courseid Tool type course
     *
     * @return self
     */
    public function setCourseid($courseid)
    {
        if (is_null($courseid)) {
            throw new \InvalidArgumentException('non-nullable courseid cannot be null');
        }
        $this->container['courseid'] = $courseid;

        return $this;
    }

    /**
     * Gets deploymentid
     *
     * @return int|null
     */
    public function getDeploymentid()
    {
        return $this->container['deploymentid'];
    }

    /**
     * Sets deploymentid
     *
     * @param int|null $deploymentid Deployment ID
     *
     * @return self
     */
    public function setDeploymentid($deploymentid)
    {
        if (is_null($deploymentid)) {
            throw new \InvalidArgumentException('non-nullable deploymentid cannot be null');
        }
        $this->container['deploymentid'] = $deploymentid;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Tool type description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets hascapabilitygroups
     *
     * @return bool|null
     */
    public function getHascapabilitygroups()
    {
        return $this->container['hascapabilitygroups'];
    }

    /**
     * Sets hascapabilitygroups
     *
     * @param bool|null $hascapabilitygroups Indicate if capabilitygroups is populated
     *
     * @return self
     */
    public function setHascapabilitygroups($hascapabilitygroups)
    {
        if (is_null($hascapabilitygroups)) {
            throw new \InvalidArgumentException('non-nullable hascapabilitygroups cannot be null');
        }
        $this->container['hascapabilitygroups'] = $hascapabilitygroups;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Tool type id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets instancecount
     *
     * @return int|null
     */
    public function getInstancecount()
    {
        return $this->container['instancecount'];
    }

    /**
     * Sets instancecount
     *
     * @param int|null $instancecount The number of times this tool is being used
     *
     * @return self
     */
    public function setInstancecount($instancecount)
    {
        if (is_null($instancecount)) {
            throw new \InvalidArgumentException('non-nullable instancecount cannot be null');
        }
        $this->container['instancecount'] = $instancecount;

        return $this;
    }

    /**
     * Gets instanceids
     *
     * @return object[]|null
     */
    public function getInstanceids()
    {
        return $this->container['instanceids'];
    }

    /**
     * Sets instanceids
     *
     * @param object[]|null $instanceids instanceids
     *
     * @return self
     */
    public function setInstanceids($instanceids)
    {
        if (is_null($instanceids)) {
            throw new \InvalidArgumentException('non-nullable instanceids cannot be null');
        }
        $this->container['instanceids'] = $instanceids;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Tool type name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets platformid
     *
     * @return string|null
     */
    public function getPlatformid()
    {
        return $this->container['platformid'];
    }

    /**
     * Sets platformid
     *
     * @param string|null $platformid Platform ID
     *
     * @return self
     */
    public function setPlatformid($platformid)
    {
        if (is_null($platformid)) {
            throw new \InvalidArgumentException('non-nullable platformid cannot be null');
        }
        $this->container['platformid'] = $platformid;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxies200ResponseTypesInnerState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxies200ResponseTypesInnerState|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets urls
     *
     * @return \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxies200ResponseTypesInnerUrls|null
     */
    public function getUrls()
    {
        return $this->container['urls'];
    }

    /**
     * Sets urls
     *
     * @param \OpenAPI\Client\Model\ModLtiGetToolTypesAndProxies200ResponseTypesInnerUrls|null $urls urls
     *
     * @return self
     */
    public function setUrls($urls)
    {
        if (is_null($urls)) {
            throw new \InvalidArgumentException('non-nullable urls cannot be null');
        }
        $this->container['urls'] = $urls;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


