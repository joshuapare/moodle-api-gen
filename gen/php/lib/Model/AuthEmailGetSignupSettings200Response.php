<?php
/**
 * AuthEmailGetSignupSettings200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuthEmailGetSignupSettings200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuthEmailGetSignupSettings200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'auth_email_get_signup_settings_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'country' => 'string',
        'defaultcity' => 'string',
        'namefields' => 'object[]',
        'passwordpolicy' => 'string',
        'profilefields' => '\OpenAPI\Client\Model\AuthEmailGetSignupSettings200ResponseProfilefieldsInner[]',
        'recaptchachallengehash' => 'string',
        'recaptchachallengeimage' => 'string',
        'recaptchachallengejs' => 'string',
        'recaptchapublickey' => 'string',
        'sitepolicy' => 'string',
        'sitepolicyhandler' => 'string',
        'warnings' => '\OpenAPI\Client\Model\AuthEmailGetSignupSettings200ResponseWarningsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'country' => null,
        'defaultcity' => null,
        'namefields' => null,
        'passwordpolicy' => null,
        'profilefields' => null,
        'recaptchachallengehash' => null,
        'recaptchachallengeimage' => null,
        'recaptchachallengejs' => null,
        'recaptchapublickey' => null,
        'sitepolicy' => null,
        'sitepolicyhandler' => null,
        'warnings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'country' => false,
        'defaultcity' => false,
        'namefields' => false,
        'passwordpolicy' => false,
        'profilefields' => false,
        'recaptchachallengehash' => false,
        'recaptchachallengeimage' => false,
        'recaptchachallengejs' => false,
        'recaptchapublickey' => false,
        'sitepolicy' => false,
        'sitepolicyhandler' => false,
        'warnings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
        'defaultcity' => 'defaultcity',
        'namefields' => 'namefields',
        'passwordpolicy' => 'passwordpolicy',
        'profilefields' => 'profilefields',
        'recaptchachallengehash' => 'recaptchachallengehash',
        'recaptchachallengeimage' => 'recaptchachallengeimage',
        'recaptchachallengejs' => 'recaptchachallengejs',
        'recaptchapublickey' => 'recaptchapublickey',
        'sitepolicy' => 'sitepolicy',
        'sitepolicyhandler' => 'sitepolicyhandler',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'defaultcity' => 'setDefaultcity',
        'namefields' => 'setNamefields',
        'passwordpolicy' => 'setPasswordpolicy',
        'profilefields' => 'setProfilefields',
        'recaptchachallengehash' => 'setRecaptchachallengehash',
        'recaptchachallengeimage' => 'setRecaptchachallengeimage',
        'recaptchachallengejs' => 'setRecaptchachallengejs',
        'recaptchapublickey' => 'setRecaptchapublickey',
        'sitepolicy' => 'setSitepolicy',
        'sitepolicyhandler' => 'setSitepolicyhandler',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'defaultcity' => 'getDefaultcity',
        'namefields' => 'getNamefields',
        'passwordpolicy' => 'getPasswordpolicy',
        'profilefields' => 'getProfilefields',
        'recaptchachallengehash' => 'getRecaptchachallengehash',
        'recaptchachallengeimage' => 'getRecaptchachallengeimage',
        'recaptchachallengejs' => 'getRecaptchachallengejs',
        'recaptchapublickey' => 'getRecaptchapublickey',
        'sitepolicy' => 'getSitepolicy',
        'sitepolicyhandler' => 'getSitepolicyhandler',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('country', $data ?? [], 'null');
        $this->setIfExists('defaultcity', $data ?? [], 'null');
        $this->setIfExists('namefields', $data ?? [], null);
        $this->setIfExists('passwordpolicy', $data ?? [], 'null');
        $this->setIfExists('profilefields', $data ?? [], null);
        $this->setIfExists('recaptchachallengehash', $data ?? [], 'null');
        $this->setIfExists('recaptchachallengeimage', $data ?? [], 'null');
        $this->setIfExists('recaptchachallengejs', $data ?? [], 'null');
        $this->setIfExists('recaptchapublickey', $data ?? [], 'null');
        $this->setIfExists('sitepolicy', $data ?? [], 'null');
        $this->setIfExists('sitepolicyhandler', $data ?? [], 'null');
        $this->setIfExists('warnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['namefields'] === null) {
            $invalidProperties[] = "'namefields' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Default country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets defaultcity
     *
     * @return string|null
     */
    public function getDefaultcity()
    {
        return $this->container['defaultcity'];
    }

    /**
     * Sets defaultcity
     *
     * @param string|null $defaultcity Default city
     *
     * @return self
     */
    public function setDefaultcity($defaultcity)
    {
        if (is_null($defaultcity)) {
            throw new \InvalidArgumentException('non-nullable defaultcity cannot be null');
        }
        $this->container['defaultcity'] = $defaultcity;

        return $this;
    }

    /**
     * Gets namefields
     *
     * @return object[]
     */
    public function getNamefields()
    {
        return $this->container['namefields'];
    }

    /**
     * Sets namefields
     *
     * @param object[] $namefields namefields
     *
     * @return self
     */
    public function setNamefields($namefields)
    {
        if (is_null($namefields)) {
            throw new \InvalidArgumentException('non-nullable namefields cannot be null');
        }
        $this->container['namefields'] = $namefields;

        return $this;
    }

    /**
     * Gets passwordpolicy
     *
     * @return string|null
     */
    public function getPasswordpolicy()
    {
        return $this->container['passwordpolicy'];
    }

    /**
     * Sets passwordpolicy
     *
     * @param string|null $passwordpolicy Password policy
     *
     * @return self
     */
    public function setPasswordpolicy($passwordpolicy)
    {
        if (is_null($passwordpolicy)) {
            throw new \InvalidArgumentException('non-nullable passwordpolicy cannot be null');
        }
        $this->container['passwordpolicy'] = $passwordpolicy;

        return $this;
    }

    /**
     * Gets profilefields
     *
     * @return \OpenAPI\Client\Model\AuthEmailGetSignupSettings200ResponseProfilefieldsInner[]|null
     */
    public function getProfilefields()
    {
        return $this->container['profilefields'];
    }

    /**
     * Sets profilefields
     *
     * @param \OpenAPI\Client\Model\AuthEmailGetSignupSettings200ResponseProfilefieldsInner[]|null $profilefields profilefields
     *
     * @return self
     */
    public function setProfilefields($profilefields)
    {
        if (is_null($profilefields)) {
            throw new \InvalidArgumentException('non-nullable profilefields cannot be null');
        }
        $this->container['profilefields'] = $profilefields;

        return $this;
    }

    /**
     * Gets recaptchachallengehash
     *
     * @return string|null
     */
    public function getRecaptchachallengehash()
    {
        return $this->container['recaptchachallengehash'];
    }

    /**
     * Sets recaptchachallengehash
     *
     * @param string|null $recaptchachallengehash Recaptcha challenge hash
     *
     * @return self
     */
    public function setRecaptchachallengehash($recaptchachallengehash)
    {
        if (is_null($recaptchachallengehash)) {
            throw new \InvalidArgumentException('non-nullable recaptchachallengehash cannot be null');
        }
        $this->container['recaptchachallengehash'] = $recaptchachallengehash;

        return $this;
    }

    /**
     * Gets recaptchachallengeimage
     *
     * @return string|null
     */
    public function getRecaptchachallengeimage()
    {
        return $this->container['recaptchachallengeimage'];
    }

    /**
     * Sets recaptchachallengeimage
     *
     * @param string|null $recaptchachallengeimage Recaptcha challenge noscript image
     *
     * @return self
     */
    public function setRecaptchachallengeimage($recaptchachallengeimage)
    {
        if (is_null($recaptchachallengeimage)) {
            throw new \InvalidArgumentException('non-nullable recaptchachallengeimage cannot be null');
        }
        $this->container['recaptchachallengeimage'] = $recaptchachallengeimage;

        return $this;
    }

    /**
     * Gets recaptchachallengejs
     *
     * @return string|null
     */
    public function getRecaptchachallengejs()
    {
        return $this->container['recaptchachallengejs'];
    }

    /**
     * Sets recaptchachallengejs
     *
     * @param string|null $recaptchachallengejs Recaptcha challenge js url
     *
     * @return self
     */
    public function setRecaptchachallengejs($recaptchachallengejs)
    {
        if (is_null($recaptchachallengejs)) {
            throw new \InvalidArgumentException('non-nullable recaptchachallengejs cannot be null');
        }
        $this->container['recaptchachallengejs'] = $recaptchachallengejs;

        return $this;
    }

    /**
     * Gets recaptchapublickey
     *
     * @return string|null
     */
    public function getRecaptchapublickey()
    {
        return $this->container['recaptchapublickey'];
    }

    /**
     * Sets recaptchapublickey
     *
     * @param string|null $recaptchapublickey Recaptcha public key
     *
     * @return self
     */
    public function setRecaptchapublickey($recaptchapublickey)
    {
        if (is_null($recaptchapublickey)) {
            throw new \InvalidArgumentException('non-nullable recaptchapublickey cannot be null');
        }
        $this->container['recaptchapublickey'] = $recaptchapublickey;

        return $this;
    }

    /**
     * Gets sitepolicy
     *
     * @return string|null
     */
    public function getSitepolicy()
    {
        return $this->container['sitepolicy'];
    }

    /**
     * Sets sitepolicy
     *
     * @param string|null $sitepolicy Site policy
     *
     * @return self
     */
    public function setSitepolicy($sitepolicy)
    {
        if (is_null($sitepolicy)) {
            throw new \InvalidArgumentException('non-nullable sitepolicy cannot be null');
        }
        $this->container['sitepolicy'] = $sitepolicy;

        return $this;
    }

    /**
     * Gets sitepolicyhandler
     *
     * @return string|null
     */
    public function getSitepolicyhandler()
    {
        return $this->container['sitepolicyhandler'];
    }

    /**
     * Sets sitepolicyhandler
     *
     * @param string|null $sitepolicyhandler Site policy handler
     *
     * @return self
     */
    public function setSitepolicyhandler($sitepolicyhandler)
    {
        if (is_null($sitepolicyhandler)) {
            throw new \InvalidArgumentException('non-nullable sitepolicyhandler cannot be null');
        }
        $this->container['sitepolicyhandler'] = $sitepolicyhandler;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \OpenAPI\Client\Model\AuthEmailGetSignupSettings200ResponseWarningsInner[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \OpenAPI\Client\Model\AuthEmailGetSignupSettings200ResponseWarningsInner[]|null $warnings warnings
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


