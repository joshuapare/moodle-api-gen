<?php
/**
 * CoreMessageGetConversation200ResponseMembersInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreMessageGetConversation200ResponseMembersInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreMessageGetConversation200ResponseMembersInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_message_get_conversation_200_response_members_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'canmessage' => 'bool',
        'canmessageevenifblocked' => 'bool',
        'contactrequests' => '\OpenAPI\Client\Model\CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner[]',
        'conversations' => '\OpenAPI\Client\Model\CoreMessageGetConversation200ResponseMembersInnerConversationsInner[]',
        'fullname' => 'string',
        'id' => 'int',
        'isblocked' => 'bool',
        'iscontact' => 'bool',
        'isdeleted' => 'bool',
        'isonline' => 'bool',
        'profileimageurl' => 'string',
        'profileimageurlsmall' => 'string',
        'profileurl' => 'string',
        'requirescontact' => 'bool',
        'showonlinestatus' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'canmessage' => null,
        'canmessageevenifblocked' => null,
        'contactrequests' => null,
        'conversations' => null,
        'fullname' => null,
        'id' => null,
        'isblocked' => null,
        'iscontact' => null,
        'isdeleted' => null,
        'isonline' => null,
        'profileimageurl' => null,
        'profileimageurlsmall' => null,
        'profileurl' => null,
        'requirescontact' => null,
        'showonlinestatus' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'canmessage' => false,
        'canmessageevenifblocked' => false,
        'contactrequests' => false,
        'conversations' => false,
        'fullname' => false,
        'id' => false,
        'isblocked' => false,
        'iscontact' => false,
        'isdeleted' => false,
        'isonline' => false,
        'profileimageurl' => false,
        'profileimageurlsmall' => false,
        'profileurl' => false,
        'requirescontact' => false,
        'showonlinestatus' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canmessage' => 'canmessage',
        'canmessageevenifblocked' => 'canmessageevenifblocked',
        'contactrequests' => 'contactrequests',
        'conversations' => 'conversations',
        'fullname' => 'fullname',
        'id' => 'id',
        'isblocked' => 'isblocked',
        'iscontact' => 'iscontact',
        'isdeleted' => 'isdeleted',
        'isonline' => 'isonline',
        'profileimageurl' => 'profileimageurl',
        'profileimageurlsmall' => 'profileimageurlsmall',
        'profileurl' => 'profileurl',
        'requirescontact' => 'requirescontact',
        'showonlinestatus' => 'showonlinestatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canmessage' => 'setCanmessage',
        'canmessageevenifblocked' => 'setCanmessageevenifblocked',
        'contactrequests' => 'setContactrequests',
        'conversations' => 'setConversations',
        'fullname' => 'setFullname',
        'id' => 'setId',
        'isblocked' => 'setIsblocked',
        'iscontact' => 'setIscontact',
        'isdeleted' => 'setIsdeleted',
        'isonline' => 'setIsonline',
        'profileimageurl' => 'setProfileimageurl',
        'profileimageurlsmall' => 'setProfileimageurlsmall',
        'profileurl' => 'setProfileurl',
        'requirescontact' => 'setRequirescontact',
        'showonlinestatus' => 'setShowonlinestatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canmessage' => 'getCanmessage',
        'canmessageevenifblocked' => 'getCanmessageevenifblocked',
        'contactrequests' => 'getContactrequests',
        'conversations' => 'getConversations',
        'fullname' => 'getFullname',
        'id' => 'getId',
        'isblocked' => 'getIsblocked',
        'iscontact' => 'getIscontact',
        'isdeleted' => 'getIsdeleted',
        'isonline' => 'getIsonline',
        'profileimageurl' => 'getProfileimageurl',
        'profileimageurlsmall' => 'getProfileimageurlsmall',
        'profileurl' => 'getProfileurl',
        'requirescontact' => 'getRequirescontact',
        'showonlinestatus' => 'getShowonlinestatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('canmessage', $data ?? [], null);
        $this->setIfExists('canmessageevenifblocked', $data ?? [], null);
        $this->setIfExists('contactrequests', $data ?? [], null);
        $this->setIfExists('conversations', $data ?? [], null);
        $this->setIfExists('fullname', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('isblocked', $data ?? [], null);
        $this->setIfExists('iscontact', $data ?? [], null);
        $this->setIfExists('isdeleted', $data ?? [], null);
        $this->setIfExists('isonline', $data ?? [], null);
        $this->setIfExists('profileimageurl', $data ?? [], null);
        $this->setIfExists('profileimageurlsmall', $data ?? [], null);
        $this->setIfExists('profileurl', $data ?? [], 'null');
        $this->setIfExists('requirescontact', $data ?? [], null);
        $this->setIfExists('showonlinestatus', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canmessage
     *
     * @return bool|null
     */
    public function getCanmessage()
    {
        return $this->container['canmessage'];
    }

    /**
     * Sets canmessage
     *
     * @param bool|null $canmessage If the user can be messaged
     *
     * @return self
     */
    public function setCanmessage($canmessage)
    {
        if (is_null($canmessage)) {
            throw new \InvalidArgumentException('non-nullable canmessage cannot be null');
        }
        $this->container['canmessage'] = $canmessage;

        return $this;
    }

    /**
     * Gets canmessageevenifblocked
     *
     * @return bool|null
     */
    public function getCanmessageevenifblocked()
    {
        return $this->container['canmessageevenifblocked'];
    }

    /**
     * Sets canmessageevenifblocked
     *
     * @param bool|null $canmessageevenifblocked If the user can still message even if they get blocked
     *
     * @return self
     */
    public function setCanmessageevenifblocked($canmessageevenifblocked)
    {
        if (is_null($canmessageevenifblocked)) {
            throw new \InvalidArgumentException('non-nullable canmessageevenifblocked cannot be null');
        }
        $this->container['canmessageevenifblocked'] = $canmessageevenifblocked;

        return $this;
    }

    /**
     * Gets contactrequests
     *
     * @return \OpenAPI\Client\Model\CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner[]|null
     */
    public function getContactrequests()
    {
        return $this->container['contactrequests'];
    }

    /**
     * Sets contactrequests
     *
     * @param \OpenAPI\Client\Model\CoreMessageGetConversation200ResponseMembersInnerContactrequestsInner[]|null $contactrequests contactrequests
     *
     * @return self
     */
    public function setContactrequests($contactrequests)
    {
        if (is_null($contactrequests)) {
            throw new \InvalidArgumentException('non-nullable contactrequests cannot be null');
        }
        $this->container['contactrequests'] = $contactrequests;

        return $this;
    }

    /**
     * Gets conversations
     *
     * @return \OpenAPI\Client\Model\CoreMessageGetConversation200ResponseMembersInnerConversationsInner[]|null
     */
    public function getConversations()
    {
        return $this->container['conversations'];
    }

    /**
     * Sets conversations
     *
     * @param \OpenAPI\Client\Model\CoreMessageGetConversation200ResponseMembersInnerConversationsInner[]|null $conversations conversations
     *
     * @return self
     */
    public function setConversations($conversations)
    {
        if (is_null($conversations)) {
            throw new \InvalidArgumentException('non-nullable conversations cannot be null');
        }
        $this->container['conversations'] = $conversations;

        return $this;
    }

    /**
     * Gets fullname
     *
     * @return string|null
     */
    public function getFullname()
    {
        return $this->container['fullname'];
    }

    /**
     * Sets fullname
     *
     * @param string|null $fullname The user's name
     *
     * @return self
     */
    public function setFullname($fullname)
    {
        if (is_null($fullname)) {
            throw new \InvalidArgumentException('non-nullable fullname cannot be null');
        }
        $this->container['fullname'] = $fullname;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The user id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets isblocked
     *
     * @return bool|null
     */
    public function getIsblocked()
    {
        return $this->container['isblocked'];
    }

    /**
     * Sets isblocked
     *
     * @param bool|null $isblocked If the user has been blocked
     *
     * @return self
     */
    public function setIsblocked($isblocked)
    {
        if (is_null($isblocked)) {
            throw new \InvalidArgumentException('non-nullable isblocked cannot be null');
        }
        $this->container['isblocked'] = $isblocked;

        return $this;
    }

    /**
     * Gets iscontact
     *
     * @return bool|null
     */
    public function getIscontact()
    {
        return $this->container['iscontact'];
    }

    /**
     * Sets iscontact
     *
     * @param bool|null $iscontact Is the user a contact?
     *
     * @return self
     */
    public function setIscontact($iscontact)
    {
        if (is_null($iscontact)) {
            throw new \InvalidArgumentException('non-nullable iscontact cannot be null');
        }
        $this->container['iscontact'] = $iscontact;

        return $this;
    }

    /**
     * Gets isdeleted
     *
     * @return bool|null
     */
    public function getIsdeleted()
    {
        return $this->container['isdeleted'];
    }

    /**
     * Sets isdeleted
     *
     * @param bool|null $isdeleted Is the user deleted?
     *
     * @return self
     */
    public function setIsdeleted($isdeleted)
    {
        if (is_null($isdeleted)) {
            throw new \InvalidArgumentException('non-nullable isdeleted cannot be null');
        }
        $this->container['isdeleted'] = $isdeleted;

        return $this;
    }

    /**
     * Gets isonline
     *
     * @return bool|null
     */
    public function getIsonline()
    {
        return $this->container['isonline'];
    }

    /**
     * Sets isonline
     *
     * @param bool|null $isonline The user's online status
     *
     * @return self
     */
    public function setIsonline($isonline)
    {
        if (is_null($isonline)) {
            throw new \InvalidArgumentException('non-nullable isonline cannot be null');
        }
        $this->container['isonline'] = $isonline;

        return $this;
    }

    /**
     * Gets profileimageurl
     *
     * @return string|null
     */
    public function getProfileimageurl()
    {
        return $this->container['profileimageurl'];
    }

    /**
     * Sets profileimageurl
     *
     * @param string|null $profileimageurl User picture URL
     *
     * @return self
     */
    public function setProfileimageurl($profileimageurl)
    {
        if (is_null($profileimageurl)) {
            throw new \InvalidArgumentException('non-nullable profileimageurl cannot be null');
        }
        $this->container['profileimageurl'] = $profileimageurl;

        return $this;
    }

    /**
     * Gets profileimageurlsmall
     *
     * @return string|null
     */
    public function getProfileimageurlsmall()
    {
        return $this->container['profileimageurlsmall'];
    }

    /**
     * Sets profileimageurlsmall
     *
     * @param string|null $profileimageurlsmall Small user picture URL
     *
     * @return self
     */
    public function setProfileimageurlsmall($profileimageurlsmall)
    {
        if (is_null($profileimageurlsmall)) {
            throw new \InvalidArgumentException('non-nullable profileimageurlsmall cannot be null');
        }
        $this->container['profileimageurlsmall'] = $profileimageurlsmall;

        return $this;
    }

    /**
     * Gets profileurl
     *
     * @return string|null
     */
    public function getProfileurl()
    {
        return $this->container['profileurl'];
    }

    /**
     * Sets profileurl
     *
     * @param string|null $profileurl The link to the user's profile page
     *
     * @return self
     */
    public function setProfileurl($profileurl)
    {
        if (is_null($profileurl)) {
            throw new \InvalidArgumentException('non-nullable profileurl cannot be null');
        }
        $this->container['profileurl'] = $profileurl;

        return $this;
    }

    /**
     * Gets requirescontact
     *
     * @return bool|null
     */
    public function getRequirescontact()
    {
        return $this->container['requirescontact'];
    }

    /**
     * Sets requirescontact
     *
     * @param bool|null $requirescontact If the user requires to be contacts
     *
     * @return self
     */
    public function setRequirescontact($requirescontact)
    {
        if (is_null($requirescontact)) {
            throw new \InvalidArgumentException('non-nullable requirescontact cannot be null');
        }
        $this->container['requirescontact'] = $requirescontact;

        return $this;
    }

    /**
     * Gets showonlinestatus
     *
     * @return bool|null
     */
    public function getShowonlinestatus()
    {
        return $this->container['showonlinestatus'];
    }

    /**
     * Sets showonlinestatus
     *
     * @param bool|null $showonlinestatus Show the user's online status?
     *
     * @return self
     */
    public function setShowonlinestatus($showonlinestatus)
    {
        if (is_null($showonlinestatus)) {
            throw new \InvalidArgumentException('non-nullable showonlinestatus cannot be null');
        }
        $this->container['showonlinestatus'] = $showonlinestatus;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


