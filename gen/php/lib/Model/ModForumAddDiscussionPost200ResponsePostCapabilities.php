<?php
/**
 * ModForumAddDiscussionPost200ResponsePostCapabilities
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModForumAddDiscussionPost200ResponsePostCapabilities Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModForumAddDiscussionPost200ResponsePostCapabilities implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_forum_add_discussion_post_200_response_post_capabilities';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'canreplyprivately' => 'bool',
        'controlreadstatus' => 'bool',
        'delete' => 'bool',
        'edit' => 'bool',
        'export' => 'bool',
        'reply' => 'bool',
        'selfenrol' => 'bool',
        'split' => 'bool',
        'view' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'canreplyprivately' => null,
        'controlreadstatus' => null,
        'delete' => null,
        'edit' => null,
        'export' => null,
        'reply' => null,
        'selfenrol' => null,
        'split' => null,
        'view' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'canreplyprivately' => false,
        'controlreadstatus' => false,
        'delete' => false,
        'edit' => false,
        'export' => false,
        'reply' => false,
        'selfenrol' => false,
        'split' => false,
        'view' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canreplyprivately' => 'canreplyprivately',
        'controlreadstatus' => 'controlreadstatus',
        'delete' => 'delete',
        'edit' => 'edit',
        'export' => 'export',
        'reply' => 'reply',
        'selfenrol' => 'selfenrol',
        'split' => 'split',
        'view' => 'view'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canreplyprivately' => 'setCanreplyprivately',
        'controlreadstatus' => 'setControlreadstatus',
        'delete' => 'setDelete',
        'edit' => 'setEdit',
        'export' => 'setExport',
        'reply' => 'setReply',
        'selfenrol' => 'setSelfenrol',
        'split' => 'setSplit',
        'view' => 'setView'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canreplyprivately' => 'getCanreplyprivately',
        'controlreadstatus' => 'getControlreadstatus',
        'delete' => 'getDelete',
        'edit' => 'getEdit',
        'export' => 'getExport',
        'reply' => 'getReply',
        'selfenrol' => 'getSelfenrol',
        'split' => 'getSplit',
        'view' => 'getView'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('canreplyprivately', $data ?? [], null);
        $this->setIfExists('controlreadstatus', $data ?? [], null);
        $this->setIfExists('delete', $data ?? [], null);
        $this->setIfExists('edit', $data ?? [], null);
        $this->setIfExists('export', $data ?? [], null);
        $this->setIfExists('reply', $data ?? [], null);
        $this->setIfExists('selfenrol', $data ?? [], null);
        $this->setIfExists('split', $data ?? [], null);
        $this->setIfExists('view', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['canreplyprivately'] === null) {
            $invalidProperties[] = "'canreplyprivately' can't be null";
        }
        if ($this->container['controlreadstatus'] === null) {
            $invalidProperties[] = "'controlreadstatus' can't be null";
        }
        if ($this->container['delete'] === null) {
            $invalidProperties[] = "'delete' can't be null";
        }
        if ($this->container['edit'] === null) {
            $invalidProperties[] = "'edit' can't be null";
        }
        if ($this->container['export'] === null) {
            $invalidProperties[] = "'export' can't be null";
        }
        if ($this->container['reply'] === null) {
            $invalidProperties[] = "'reply' can't be null";
        }
        if ($this->container['selfenrol'] === null) {
            $invalidProperties[] = "'selfenrol' can't be null";
        }
        if ($this->container['split'] === null) {
            $invalidProperties[] = "'split' can't be null";
        }
        if ($this->container['view'] === null) {
            $invalidProperties[] = "'view' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canreplyprivately
     *
     * @return bool
     */
    public function getCanreplyprivately()
    {
        return $this->container['canreplyprivately'];
    }

    /**
     * Sets canreplyprivately
     *
     * @param bool $canreplyprivately Whether the user can post a private reply
     *
     * @return self
     */
    public function setCanreplyprivately($canreplyprivately)
    {
        if (is_null($canreplyprivately)) {
            throw new \InvalidArgumentException('non-nullable canreplyprivately cannot be null');
        }
        $this->container['canreplyprivately'] = $canreplyprivately;

        return $this;
    }

    /**
     * Gets controlreadstatus
     *
     * @return bool
     */
    public function getControlreadstatus()
    {
        return $this->container['controlreadstatus'];
    }

    /**
     * Sets controlreadstatus
     *
     * @param bool $controlreadstatus Whether the user can control the read status of the post
     *
     * @return self
     */
    public function setControlreadstatus($controlreadstatus)
    {
        if (is_null($controlreadstatus)) {
            throw new \InvalidArgumentException('non-nullable controlreadstatus cannot be null');
        }
        $this->container['controlreadstatus'] = $controlreadstatus;

        return $this;
    }

    /**
     * Gets delete
     *
     * @return bool
     */
    public function getDelete()
    {
        return $this->container['delete'];
    }

    /**
     * Sets delete
     *
     * @param bool $delete Whether the user can delete the post
     *
     * @return self
     */
    public function setDelete($delete)
    {
        if (is_null($delete)) {
            throw new \InvalidArgumentException('non-nullable delete cannot be null');
        }
        $this->container['delete'] = $delete;

        return $this;
    }

    /**
     * Gets edit
     *
     * @return bool
     */
    public function getEdit()
    {
        return $this->container['edit'];
    }

    /**
     * Sets edit
     *
     * @param bool $edit Whether the user can edit the post
     *
     * @return self
     */
    public function setEdit($edit)
    {
        if (is_null($edit)) {
            throw new \InvalidArgumentException('non-nullable edit cannot be null');
        }
        $this->container['edit'] = $edit;

        return $this;
    }

    /**
     * Gets export
     *
     * @return bool
     */
    public function getExport()
    {
        return $this->container['export'];
    }

    /**
     * Sets export
     *
     * @param bool $export Whether the user can export the post
     *
     * @return self
     */
    public function setExport($export)
    {
        if (is_null($export)) {
            throw new \InvalidArgumentException('non-nullable export cannot be null');
        }
        $this->container['export'] = $export;

        return $this;
    }

    /**
     * Gets reply
     *
     * @return bool
     */
    public function getReply()
    {
        return $this->container['reply'];
    }

    /**
     * Sets reply
     *
     * @param bool $reply Whether the user can reply to the post
     *
     * @return self
     */
    public function setReply($reply)
    {
        if (is_null($reply)) {
            throw new \InvalidArgumentException('non-nullable reply cannot be null');
        }
        $this->container['reply'] = $reply;

        return $this;
    }

    /**
     * Gets selfenrol
     *
     * @return bool
     */
    public function getSelfenrol()
    {
        return $this->container['selfenrol'];
    }

    /**
     * Sets selfenrol
     *
     * @param bool $selfenrol Whether the user can self enrol into the course
     *
     * @return self
     */
    public function setSelfenrol($selfenrol)
    {
        if (is_null($selfenrol)) {
            throw new \InvalidArgumentException('non-nullable selfenrol cannot be null');
        }
        $this->container['selfenrol'] = $selfenrol;

        return $this;
    }

    /**
     * Gets split
     *
     * @return bool
     */
    public function getSplit()
    {
        return $this->container['split'];
    }

    /**
     * Sets split
     *
     * @param bool $split Whether the user can split the post
     *
     * @return self
     */
    public function setSplit($split)
    {
        if (is_null($split)) {
            throw new \InvalidArgumentException('non-nullable split cannot be null');
        }
        $this->container['split'] = $split;

        return $this;
    }

    /**
     * Gets view
     *
     * @return bool
     */
    public function getView()
    {
        return $this->container['view'];
    }

    /**
     * Sets view
     *
     * @param bool $view Whether the user can view the post
     *
     * @return self
     */
    public function setView($view)
    {
        if (is_null($view)) {
            throw new \InvalidArgumentException('non-nullable view cannot be null');
        }
        $this->container['view'] = $view;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


