<?php
/**
 * ModH5pactivityGetResults200ResponseAttemptsInnerResultsInnerOptionsInnerCorrectanswer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModH5pactivityGetResults200ResponseAttemptsInnerResultsInnerOptionsInnerCorrectanswer Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModH5pactivityGetResults200ResponseAttemptsInnerResultsInnerOptionsInnerCorrectanswer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_h5pactivity_get_results_200_response_attempts_inner_results_inner_options_inner_correctanswer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'answer' => 'string',
        'checked' => 'bool',
        'correct' => 'bool',
        'fail' => 'bool',
        'incorrect' => 'bool',
        'pass' => 'bool',
        'text' => 'bool',
        'unchecked' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'answer' => null,
        'checked' => null,
        'correct' => null,
        'fail' => null,
        'incorrect' => null,
        'pass' => null,
        'text' => null,
        'unchecked' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'answer' => false,
        'checked' => false,
        'correct' => false,
        'fail' => false,
        'incorrect' => false,
        'pass' => false,
        'text' => false,
        'unchecked' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'answer' => 'answer',
        'checked' => 'checked',
        'correct' => 'correct',
        'fail' => 'fail',
        'incorrect' => 'incorrect',
        'pass' => 'pass',
        'text' => 'text',
        'unchecked' => 'unchecked'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'answer' => 'setAnswer',
        'checked' => 'setChecked',
        'correct' => 'setCorrect',
        'fail' => 'setFail',
        'incorrect' => 'setIncorrect',
        'pass' => 'setPass',
        'text' => 'setText',
        'unchecked' => 'setUnchecked'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'answer' => 'getAnswer',
        'checked' => 'getChecked',
        'correct' => 'getCorrect',
        'fail' => 'getFail',
        'incorrect' => 'getIncorrect',
        'pass' => 'getPass',
        'text' => 'getText',
        'unchecked' => 'getUnchecked'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('answer', $data ?? [], 'null');
        $this->setIfExists('checked', $data ?? [], null);
        $this->setIfExists('correct', $data ?? [], null);
        $this->setIfExists('fail', $data ?? [], null);
        $this->setIfExists('incorrect', $data ?? [], null);
        $this->setIfExists('pass', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('unchecked', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets answer
     *
     * @return string|null
     */
    public function getAnswer()
    {
        return $this->container['answer'];
    }

    /**
     * Sets answer
     *
     * @param string|null $answer Option text value
     *
     * @return self
     */
    public function setAnswer($answer)
    {
        if (is_null($answer)) {
            throw new \InvalidArgumentException('non-nullable answer cannot be null');
        }
        $this->container['answer'] = $answer;

        return $this;
    }

    /**
     * Gets checked
     *
     * @return bool|null
     */
    public function getChecked()
    {
        return $this->container['checked'];
    }

    /**
     * Sets checked
     *
     * @param bool|null $checked If has to be displayed as a checked option
     *
     * @return self
     */
    public function setChecked($checked)
    {
        if (is_null($checked)) {
            throw new \InvalidArgumentException('non-nullable checked cannot be null');
        }
        $this->container['checked'] = $checked;

        return $this;
    }

    /**
     * Gets correct
     *
     * @return bool|null
     */
    public function getCorrect()
    {
        return $this->container['correct'];
    }

    /**
     * Sets correct
     *
     * @param bool|null $correct If has to be displayed as correct
     *
     * @return self
     */
    public function setCorrect($correct)
    {
        if (is_null($correct)) {
            throw new \InvalidArgumentException('non-nullable correct cannot be null');
        }
        $this->container['correct'] = $correct;

        return $this;
    }

    /**
     * Gets fail
     *
     * @return bool|null
     */
    public function getFail()
    {
        return $this->container['fail'];
    }

    /**
     * Sets fail
     *
     * @param bool|null $fail If has to be displayed as failed
     *
     * @return self
     */
    public function setFail($fail)
    {
        if (is_null($fail)) {
            throw new \InvalidArgumentException('non-nullable fail cannot be null');
        }
        $this->container['fail'] = $fail;

        return $this;
    }

    /**
     * Gets incorrect
     *
     * @return bool|null
     */
    public function getIncorrect()
    {
        return $this->container['incorrect'];
    }

    /**
     * Sets incorrect
     *
     * @param bool|null $incorrect If has to be displayed as incorrect
     *
     * @return self
     */
    public function setIncorrect($incorrect)
    {
        if (is_null($incorrect)) {
            throw new \InvalidArgumentException('non-nullable incorrect cannot be null');
        }
        $this->container['incorrect'] = $incorrect;

        return $this;
    }

    /**
     * Gets pass
     *
     * @return bool|null
     */
    public function getPass()
    {
        return $this->container['pass'];
    }

    /**
     * Sets pass
     *
     * @param bool|null $pass If has to be displayed as passed
     *
     * @return self
     */
    public function setPass($pass)
    {
        if (is_null($pass)) {
            throw new \InvalidArgumentException('non-nullable pass cannot be null');
        }
        $this->container['pass'] = $pass;

        return $this;
    }

    /**
     * Gets text
     *
     * @return bool|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param bool|null $text If has to be displayed as simple text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets unchecked
     *
     * @return bool|null
     */
    public function getUnchecked()
    {
        return $this->container['unchecked'];
    }

    /**
     * Sets unchecked
     *
     * @param bool|null $unchecked If has to be displayed as a unchecked option
     *
     * @return self
     */
    public function setUnchecked($unchecked)
    {
        if (is_null($unchecked)) {
            throw new \InvalidArgumentException('non-nullable unchecked cannot be null');
        }
        $this->container['unchecked'] = $unchecked;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


