<?php
/**
 * ModLessonProcessPage200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModLessonProcessPage200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModLessonProcessPage200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_lesson_process_page_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attemptsremaining' => 'int',
        'correctanswer' => 'bool',
        'displaymenu' => 'bool',
        'feedback' => 'string',
        'inmediatejump' => 'bool',
        'isessayquestion' => 'bool',
        'maxattemptsreached' => 'bool',
        'messages' => '\OpenAPI\Client\Model\ModLessonGetPageData200ResponseMessagesInner[]',
        'newpageid' => 'int',
        'noanswer' => 'bool',
        'nodefaultresponse' => 'bool',
        'ongoingscore' => 'string',
        'progress' => 'int',
        'response' => 'string',
        'reviewmode' => 'bool',
        'studentanswer' => 'string',
        'userresponse' => 'string',
        'warnings' => '\OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'attemptsremaining' => null,
        'correctanswer' => null,
        'displaymenu' => null,
        'feedback' => null,
        'inmediatejump' => null,
        'isessayquestion' => null,
        'maxattemptsreached' => null,
        'messages' => null,
        'newpageid' => null,
        'noanswer' => null,
        'nodefaultresponse' => null,
        'ongoingscore' => null,
        'progress' => null,
        'response' => null,
        'reviewmode' => null,
        'studentanswer' => null,
        'userresponse' => null,
        'warnings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'attemptsremaining' => false,
        'correctanswer' => false,
        'displaymenu' => false,
        'feedback' => false,
        'inmediatejump' => false,
        'isessayquestion' => false,
        'maxattemptsreached' => false,
        'messages' => false,
        'newpageid' => false,
        'noanswer' => false,
        'nodefaultresponse' => false,
        'ongoingscore' => false,
        'progress' => false,
        'response' => false,
        'reviewmode' => false,
        'studentanswer' => false,
        'userresponse' => false,
        'warnings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attemptsremaining' => 'attemptsremaining',
        'correctanswer' => 'correctanswer',
        'displaymenu' => 'displaymenu',
        'feedback' => 'feedback',
        'inmediatejump' => 'inmediatejump',
        'isessayquestion' => 'isessayquestion',
        'maxattemptsreached' => 'maxattemptsreached',
        'messages' => 'messages',
        'newpageid' => 'newpageid',
        'noanswer' => 'noanswer',
        'nodefaultresponse' => 'nodefaultresponse',
        'ongoingscore' => 'ongoingscore',
        'progress' => 'progress',
        'response' => 'response',
        'reviewmode' => 'reviewmode',
        'studentanswer' => 'studentanswer',
        'userresponse' => 'userresponse',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attemptsremaining' => 'setAttemptsremaining',
        'correctanswer' => 'setCorrectanswer',
        'displaymenu' => 'setDisplaymenu',
        'feedback' => 'setFeedback',
        'inmediatejump' => 'setInmediatejump',
        'isessayquestion' => 'setIsessayquestion',
        'maxattemptsreached' => 'setMaxattemptsreached',
        'messages' => 'setMessages',
        'newpageid' => 'setNewpageid',
        'noanswer' => 'setNoanswer',
        'nodefaultresponse' => 'setNodefaultresponse',
        'ongoingscore' => 'setOngoingscore',
        'progress' => 'setProgress',
        'response' => 'setResponse',
        'reviewmode' => 'setReviewmode',
        'studentanswer' => 'setStudentanswer',
        'userresponse' => 'setUserresponse',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attemptsremaining' => 'getAttemptsremaining',
        'correctanswer' => 'getCorrectanswer',
        'displaymenu' => 'getDisplaymenu',
        'feedback' => 'getFeedback',
        'inmediatejump' => 'getInmediatejump',
        'isessayquestion' => 'getIsessayquestion',
        'maxattemptsreached' => 'getMaxattemptsreached',
        'messages' => 'getMessages',
        'newpageid' => 'getNewpageid',
        'noanswer' => 'getNoanswer',
        'nodefaultresponse' => 'getNodefaultresponse',
        'ongoingscore' => 'getOngoingscore',
        'progress' => 'getProgress',
        'response' => 'getResponse',
        'reviewmode' => 'getReviewmode',
        'studentanswer' => 'getStudentanswer',
        'userresponse' => 'getUserresponse',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('attemptsremaining', $data ?? [], null);
        $this->setIfExists('correctanswer', $data ?? [], null);
        $this->setIfExists('displaymenu', $data ?? [], null);
        $this->setIfExists('feedback', $data ?? [], 'null');
        $this->setIfExists('inmediatejump', $data ?? [], null);
        $this->setIfExists('isessayquestion', $data ?? [], null);
        $this->setIfExists('maxattemptsreached', $data ?? [], null);
        $this->setIfExists('messages', $data ?? [], null);
        $this->setIfExists('newpageid', $data ?? [], null);
        $this->setIfExists('noanswer', $data ?? [], null);
        $this->setIfExists('nodefaultresponse', $data ?? [], null);
        $this->setIfExists('ongoingscore', $data ?? [], 'null');
        $this->setIfExists('progress', $data ?? [], null);
        $this->setIfExists('response', $data ?? [], 'null');
        $this->setIfExists('reviewmode', $data ?? [], null);
        $this->setIfExists('studentanswer', $data ?? [], 'null');
        $this->setIfExists('userresponse', $data ?? [], 'null');
        $this->setIfExists('warnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['attemptsremaining'] === null) {
            $invalidProperties[] = "'attemptsremaining' can't be null";
        }
        if ($this->container['correctanswer'] === null) {
            $invalidProperties[] = "'correctanswer' can't be null";
        }
        if ($this->container['displaymenu'] === null) {
            $invalidProperties[] = "'displaymenu' can't be null";
        }
        if ($this->container['feedback'] === null) {
            $invalidProperties[] = "'feedback' can't be null";
        }
        if ($this->container['inmediatejump'] === null) {
            $invalidProperties[] = "'inmediatejump' can't be null";
        }
        if ($this->container['isessayquestion'] === null) {
            $invalidProperties[] = "'isessayquestion' can't be null";
        }
        if ($this->container['maxattemptsreached'] === null) {
            $invalidProperties[] = "'maxattemptsreached' can't be null";
        }
        if ($this->container['messages'] === null) {
            $invalidProperties[] = "'messages' can't be null";
        }
        if ($this->container['newpageid'] === null) {
            $invalidProperties[] = "'newpageid' can't be null";
        }
        if ($this->container['noanswer'] === null) {
            $invalidProperties[] = "'noanswer' can't be null";
        }
        if ($this->container['nodefaultresponse'] === null) {
            $invalidProperties[] = "'nodefaultresponse' can't be null";
        }
        if ($this->container['ongoingscore'] === null) {
            $invalidProperties[] = "'ongoingscore' can't be null";
        }
        if ($this->container['progress'] === null) {
            $invalidProperties[] = "'progress' can't be null";
        }
        if ($this->container['response'] === null) {
            $invalidProperties[] = "'response' can't be null";
        }
        if ($this->container['reviewmode'] === null) {
            $invalidProperties[] = "'reviewmode' can't be null";
        }
        if ($this->container['studentanswer'] === null) {
            $invalidProperties[] = "'studentanswer' can't be null";
        }
        if ($this->container['userresponse'] === null) {
            $invalidProperties[] = "'userresponse' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attemptsremaining
     *
     * @return int
     */
    public function getAttemptsremaining()
    {
        return $this->container['attemptsremaining'];
    }

    /**
     * Sets attemptsremaining
     *
     * @param int $attemptsremaining Number of attempts remaining.
     *
     * @return self
     */
    public function setAttemptsremaining($attemptsremaining)
    {
        if (is_null($attemptsremaining)) {
            throw new \InvalidArgumentException('non-nullable attemptsremaining cannot be null');
        }
        $this->container['attemptsremaining'] = $attemptsremaining;

        return $this;
    }

    /**
     * Gets correctanswer
     *
     * @return bool
     */
    public function getCorrectanswer()
    {
        return $this->container['correctanswer'];
    }

    /**
     * Sets correctanswer
     *
     * @param bool $correctanswer Whether the answer is correct.
     *
     * @return self
     */
    public function setCorrectanswer($correctanswer)
    {
        if (is_null($correctanswer)) {
            throw new \InvalidArgumentException('non-nullable correctanswer cannot be null');
        }
        $this->container['correctanswer'] = $correctanswer;

        return $this;
    }

    /**
     * Gets displaymenu
     *
     * @return bool
     */
    public function getDisplaymenu()
    {
        return $this->container['displaymenu'];
    }

    /**
     * Sets displaymenu
     *
     * @param bool $displaymenu Whether we should display the menu or not in this page.
     *
     * @return self
     */
    public function setDisplaymenu($displaymenu)
    {
        if (is_null($displaymenu)) {
            throw new \InvalidArgumentException('non-nullable displaymenu cannot be null');
        }
        $this->container['displaymenu'] = $displaymenu;

        return $this;
    }

    /**
     * Gets feedback
     *
     * @return string
     */
    public function getFeedback()
    {
        return $this->container['feedback'];
    }

    /**
     * Sets feedback
     *
     * @param string $feedback The response feedback.
     *
     * @return self
     */
    public function setFeedback($feedback)
    {
        if (is_null($feedback)) {
            throw new \InvalidArgumentException('non-nullable feedback cannot be null');
        }
        $this->container['feedback'] = $feedback;

        return $this;
    }

    /**
     * Gets inmediatejump
     *
     * @return bool
     */
    public function getInmediatejump()
    {
        return $this->container['inmediatejump'];
    }

    /**
     * Sets inmediatejump
     *
     * @param bool $inmediatejump Whether the page processing redirect directly to anoter page.
     *
     * @return self
     */
    public function setInmediatejump($inmediatejump)
    {
        if (is_null($inmediatejump)) {
            throw new \InvalidArgumentException('non-nullable inmediatejump cannot be null');
        }
        $this->container['inmediatejump'] = $inmediatejump;

        return $this;
    }

    /**
     * Gets isessayquestion
     *
     * @return bool
     */
    public function getIsessayquestion()
    {
        return $this->container['isessayquestion'];
    }

    /**
     * Sets isessayquestion
     *
     * @param bool $isessayquestion Whether is a essay question.
     *
     * @return self
     */
    public function setIsessayquestion($isessayquestion)
    {
        if (is_null($isessayquestion)) {
            throw new \InvalidArgumentException('non-nullable isessayquestion cannot be null');
        }
        $this->container['isessayquestion'] = $isessayquestion;

        return $this;
    }

    /**
     * Gets maxattemptsreached
     *
     * @return bool
     */
    public function getMaxattemptsreached()
    {
        return $this->container['maxattemptsreached'];
    }

    /**
     * Sets maxattemptsreached
     *
     * @param bool $maxattemptsreached Whether we reachered the max number of attempts.
     *
     * @return self
     */
    public function setMaxattemptsreached($maxattemptsreached)
    {
        if (is_null($maxattemptsreached)) {
            throw new \InvalidArgumentException('non-nullable maxattemptsreached cannot be null');
        }
        $this->container['maxattemptsreached'] = $maxattemptsreached;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return \OpenAPI\Client\Model\ModLessonGetPageData200ResponseMessagesInner[]
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \OpenAPI\Client\Model\ModLessonGetPageData200ResponseMessagesInner[] $messages messages
     *
     * @return self
     */
    public function setMessages($messages)
    {
        if (is_null($messages)) {
            throw new \InvalidArgumentException('non-nullable messages cannot be null');
        }
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets newpageid
     *
     * @return int
     */
    public function getNewpageid()
    {
        return $this->container['newpageid'];
    }

    /**
     * Sets newpageid
     *
     * @param int $newpageid New page id (if a jump was made).
     *
     * @return self
     */
    public function setNewpageid($newpageid)
    {
        if (is_null($newpageid)) {
            throw new \InvalidArgumentException('non-nullable newpageid cannot be null');
        }
        $this->container['newpageid'] = $newpageid;

        return $this;
    }

    /**
     * Gets noanswer
     *
     * @return bool
     */
    public function getNoanswer()
    {
        return $this->container['noanswer'];
    }

    /**
     * Sets noanswer
     *
     * @param bool $noanswer Whether there aren't answers.
     *
     * @return self
     */
    public function setNoanswer($noanswer)
    {
        if (is_null($noanswer)) {
            throw new \InvalidArgumentException('non-nullable noanswer cannot be null');
        }
        $this->container['noanswer'] = $noanswer;

        return $this;
    }

    /**
     * Gets nodefaultresponse
     *
     * @return bool
     */
    public function getNodefaultresponse()
    {
        return $this->container['nodefaultresponse'];
    }

    /**
     * Sets nodefaultresponse
     *
     * @param bool $nodefaultresponse Whether there is not a default response.
     *
     * @return self
     */
    public function setNodefaultresponse($nodefaultresponse)
    {
        if (is_null($nodefaultresponse)) {
            throw new \InvalidArgumentException('non-nullable nodefaultresponse cannot be null');
        }
        $this->container['nodefaultresponse'] = $nodefaultresponse;

        return $this;
    }

    /**
     * Gets ongoingscore
     *
     * @return string
     */
    public function getOngoingscore()
    {
        return $this->container['ongoingscore'];
    }

    /**
     * Sets ongoingscore
     *
     * @param string $ongoingscore The ongoing message.
     *
     * @return self
     */
    public function setOngoingscore($ongoingscore)
    {
        if (is_null($ongoingscore)) {
            throw new \InvalidArgumentException('non-nullable ongoingscore cannot be null');
        }
        $this->container['ongoingscore'] = $ongoingscore;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return int
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param int $progress Progress percentage in the lesson.
     *
     * @return self
     */
    public function setProgress($progress)
    {
        if (is_null($progress)) {
            throw new \InvalidArgumentException('non-nullable progress cannot be null');
        }
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets response
     *
     * @return string
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param string $response The response.
     *
     * @return self
     */
    public function setResponse($response)
    {
        if (is_null($response)) {
            throw new \InvalidArgumentException('non-nullable response cannot be null');
        }
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets reviewmode
     *
     * @return bool
     */
    public function getReviewmode()
    {
        return $this->container['reviewmode'];
    }

    /**
     * Sets reviewmode
     *
     * @param bool $reviewmode Whether the user is reviewing.
     *
     * @return self
     */
    public function setReviewmode($reviewmode)
    {
        if (is_null($reviewmode)) {
            throw new \InvalidArgumentException('non-nullable reviewmode cannot be null');
        }
        $this->container['reviewmode'] = $reviewmode;

        return $this;
    }

    /**
     * Gets studentanswer
     *
     * @return string
     */
    public function getStudentanswer()
    {
        return $this->container['studentanswer'];
    }

    /**
     * Sets studentanswer
     *
     * @param string $studentanswer The student answer.
     *
     * @return self
     */
    public function setStudentanswer($studentanswer)
    {
        if (is_null($studentanswer)) {
            throw new \InvalidArgumentException('non-nullable studentanswer cannot be null');
        }
        $this->container['studentanswer'] = $studentanswer;

        return $this;
    }

    /**
     * Gets userresponse
     *
     * @return string
     */
    public function getUserresponse()
    {
        return $this->container['userresponse'];
    }

    /**
     * Sets userresponse
     *
     * @param string $userresponse The user response.
     *
     * @return self
     */
    public function setUserresponse($userresponse)
    {
        if (is_null($userresponse)) {
            throw new \InvalidArgumentException('non-nullable userresponse cannot be null');
        }
        $this->container['userresponse'] = $userresponse;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null $warnings warnings
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


