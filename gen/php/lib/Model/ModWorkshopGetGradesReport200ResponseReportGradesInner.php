<?php
/**
 * ModWorkshopGetGradesReport200ResponseReportGradesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModWorkshopGetGradesReport200ResponseReportGradesInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModWorkshopGetGradesReport200ResponseReportGradesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_workshop_get_grades_report_200_response_report_grades_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gradinggrade' => 'float',
        'reviewedby' => '\OpenAPI\Client\Model\ModWorkshopGetGradesReport200ResponseReportGradesInnerReviewedbyInner[]',
        'reviewerof' => '\OpenAPI\Client\Model\ModWorkshopGetGradesReport200ResponseReportGradesInnerReviewerofInner[]',
        'submissiongrade' => 'float',
        'submissiongradeover' => 'float',
        'submissiongradeoverby' => 'int',
        'submissionid' => 'int',
        'submissionmodified' => 'int',
        'submissionpublished' => 'int',
        'submissiontitle' => 'string',
        'userid' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gradinggrade' => null,
        'reviewedby' => null,
        'reviewerof' => null,
        'submissiongrade' => null,
        'submissiongradeover' => null,
        'submissiongradeoverby' => null,
        'submissionid' => null,
        'submissionmodified' => null,
        'submissionpublished' => null,
        'submissiontitle' => null,
        'userid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'gradinggrade' => false,
        'reviewedby' => false,
        'reviewerof' => false,
        'submissiongrade' => false,
        'submissiongradeover' => false,
        'submissiongradeoverby' => false,
        'submissionid' => false,
        'submissionmodified' => false,
        'submissionpublished' => false,
        'submissiontitle' => false,
        'userid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gradinggrade' => 'gradinggrade',
        'reviewedby' => 'reviewedby',
        'reviewerof' => 'reviewerof',
        'submissiongrade' => 'submissiongrade',
        'submissiongradeover' => 'submissiongradeover',
        'submissiongradeoverby' => 'submissiongradeoverby',
        'submissionid' => 'submissionid',
        'submissionmodified' => 'submissionmodified',
        'submissionpublished' => 'submissionpublished',
        'submissiontitle' => 'submissiontitle',
        'userid' => 'userid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gradinggrade' => 'setGradinggrade',
        'reviewedby' => 'setReviewedby',
        'reviewerof' => 'setReviewerof',
        'submissiongrade' => 'setSubmissiongrade',
        'submissiongradeover' => 'setSubmissiongradeover',
        'submissiongradeoverby' => 'setSubmissiongradeoverby',
        'submissionid' => 'setSubmissionid',
        'submissionmodified' => 'setSubmissionmodified',
        'submissionpublished' => 'setSubmissionpublished',
        'submissiontitle' => 'setSubmissiontitle',
        'userid' => 'setUserid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gradinggrade' => 'getGradinggrade',
        'reviewedby' => 'getReviewedby',
        'reviewerof' => 'getReviewerof',
        'submissiongrade' => 'getSubmissiongrade',
        'submissiongradeover' => 'getSubmissiongradeover',
        'submissiongradeoverby' => 'getSubmissiongradeoverby',
        'submissionid' => 'getSubmissionid',
        'submissionmodified' => 'getSubmissionmodified',
        'submissionpublished' => 'getSubmissionpublished',
        'submissiontitle' => 'getSubmissiontitle',
        'userid' => 'getUserid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('gradinggrade', $data ?? [], null);
        $this->setIfExists('reviewedby', $data ?? [], null);
        $this->setIfExists('reviewerof', $data ?? [], null);
        $this->setIfExists('submissiongrade', $data ?? [], null);
        $this->setIfExists('submissiongradeover', $data ?? [], null);
        $this->setIfExists('submissiongradeoverby', $data ?? [], null);
        $this->setIfExists('submissionid', $data ?? [], null);
        $this->setIfExists('submissionmodified', $data ?? [], null);
        $this->setIfExists('submissionpublished', $data ?? [], null);
        $this->setIfExists('submissiontitle', $data ?? [], 'null');
        $this->setIfExists('userid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gradinggrade
     *
     * @return float|null
     */
    public function getGradinggrade()
    {
        return $this->container['gradinggrade'];
    }

    /**
     * Sets gradinggrade
     *
     * @param float|null $gradinggrade Computed grade for the assessment.
     *
     * @return self
     */
    public function setGradinggrade($gradinggrade)
    {
        if (is_null($gradinggrade)) {
            throw new \InvalidArgumentException('non-nullable gradinggrade cannot be null');
        }
        $this->container['gradinggrade'] = $gradinggrade;

        return $this;
    }

    /**
     * Gets reviewedby
     *
     * @return \OpenAPI\Client\Model\ModWorkshopGetGradesReport200ResponseReportGradesInnerReviewedbyInner[]|null
     */
    public function getReviewedby()
    {
        return $this->container['reviewedby'];
    }

    /**
     * Sets reviewedby
     *
     * @param \OpenAPI\Client\Model\ModWorkshopGetGradesReport200ResponseReportGradesInnerReviewedbyInner[]|null $reviewedby reviewedby
     *
     * @return self
     */
    public function setReviewedby($reviewedby)
    {
        if (is_null($reviewedby)) {
            throw new \InvalidArgumentException('non-nullable reviewedby cannot be null');
        }
        $this->container['reviewedby'] = $reviewedby;

        return $this;
    }

    /**
     * Gets reviewerof
     *
     * @return \OpenAPI\Client\Model\ModWorkshopGetGradesReport200ResponseReportGradesInnerReviewerofInner[]|null
     */
    public function getReviewerof()
    {
        return $this->container['reviewerof'];
    }

    /**
     * Sets reviewerof
     *
     * @param \OpenAPI\Client\Model\ModWorkshopGetGradesReport200ResponseReportGradesInnerReviewerofInner[]|null $reviewerof reviewerof
     *
     * @return self
     */
    public function setReviewerof($reviewerof)
    {
        if (is_null($reviewerof)) {
            throw new \InvalidArgumentException('non-nullable reviewerof cannot be null');
        }
        $this->container['reviewerof'] = $reviewerof;

        return $this;
    }

    /**
     * Gets submissiongrade
     *
     * @return float|null
     */
    public function getSubmissiongrade()
    {
        return $this->container['submissiongrade'];
    }

    /**
     * Sets submissiongrade
     *
     * @param float|null $submissiongrade Aggregated grade for the submission.
     *
     * @return self
     */
    public function setSubmissiongrade($submissiongrade)
    {
        if (is_null($submissiongrade)) {
            throw new \InvalidArgumentException('non-nullable submissiongrade cannot be null');
        }
        $this->container['submissiongrade'] = $submissiongrade;

        return $this;
    }

    /**
     * Gets submissiongradeover
     *
     * @return float|null
     */
    public function getSubmissiongradeover()
    {
        return $this->container['submissiongradeover'];
    }

    /**
     * Sets submissiongradeover
     *
     * @param float|null $submissiongradeover Grade for the assessment overrided                                         by the teacher.
     *
     * @return self
     */
    public function setSubmissiongradeover($submissiongradeover)
    {
        if (is_null($submissiongradeover)) {
            throw new \InvalidArgumentException('non-nullable submissiongradeover cannot be null');
        }
        $this->container['submissiongradeover'] = $submissiongradeover;

        return $this;
    }

    /**
     * Gets submissiongradeoverby
     *
     * @return int|null
     */
    public function getSubmissiongradeoverby()
    {
        return $this->container['submissiongradeoverby'];
    }

    /**
     * Sets submissiongradeoverby
     *
     * @param int|null $submissiongradeoverby The id of the user who overrided                                         the grade.
     *
     * @return self
     */
    public function setSubmissiongradeoverby($submissiongradeoverby)
    {
        if (is_null($submissiongradeoverby)) {
            throw new \InvalidArgumentException('non-nullable submissiongradeoverby cannot be null');
        }
        $this->container['submissiongradeoverby'] = $submissiongradeoverby;

        return $this;
    }

    /**
     * Gets submissionid
     *
     * @return int|null
     */
    public function getSubmissionid()
    {
        return $this->container['submissionid'];
    }

    /**
     * Sets submissionid
     *
     * @param int|null $submissionid Submission id.
     *
     * @return self
     */
    public function setSubmissionid($submissionid)
    {
        if (is_null($submissionid)) {
            throw new \InvalidArgumentException('non-nullable submissionid cannot be null');
        }
        $this->container['submissionid'] = $submissionid;

        return $this;
    }

    /**
     * Gets submissionmodified
     *
     * @return int|null
     */
    public function getSubmissionmodified()
    {
        return $this->container['submissionmodified'];
    }

    /**
     * Sets submissionmodified
     *
     * @param int|null $submissionmodified Timestamp submission was updated.
     *
     * @return self
     */
    public function setSubmissionmodified($submissionmodified)
    {
        if (is_null($submissionmodified)) {
            throw new \InvalidArgumentException('non-nullable submissionmodified cannot be null');
        }
        $this->container['submissionmodified'] = $submissionmodified;

        return $this;
    }

    /**
     * Gets submissionpublished
     *
     * @return int|null
     */
    public function getSubmissionpublished()
    {
        return $this->container['submissionpublished'];
    }

    /**
     * Sets submissionpublished
     *
     * @param int|null $submissionpublished Whether is a submission published.
     *
     * @return self
     */
    public function setSubmissionpublished($submissionpublished)
    {
        if (is_null($submissionpublished)) {
            throw new \InvalidArgumentException('non-nullable submissionpublished cannot be null');
        }
        $this->container['submissionpublished'] = $submissionpublished;

        return $this;
    }

    /**
     * Gets submissiontitle
     *
     * @return string|null
     */
    public function getSubmissiontitle()
    {
        return $this->container['submissiontitle'];
    }

    /**
     * Sets submissiontitle
     *
     * @param string|null $submissiontitle Submission title.
     *
     * @return self
     */
    public function setSubmissiontitle($submissiontitle)
    {
        if (is_null($submissiontitle)) {
            throw new \InvalidArgumentException('non-nullable submissiontitle cannot be null');
        }
        $this->container['submissiontitle'] = $submissiontitle;

        return $this;
    }

    /**
     * Gets userid
     *
     * @return int|null
     */
    public function getUserid()
    {
        return $this->container['userid'];
    }

    /**
     * Sets userid
     *
     * @param int|null $userid The id of the user being displayed in the report.
     *
     * @return self
     */
    public function setUserid($userid)
    {
        if (is_null($userid)) {
            throw new \InvalidArgumentException('non-nullable userid cannot be null');
        }
        $this->container['userid'] = $userid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


