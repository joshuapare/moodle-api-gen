<?php
/**
 * ModFeedbackGetFeedbacksByCourses200ResponseFeedbacksInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModFeedbackGetFeedbacksByCourses200ResponseFeedbacksInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModFeedbackGetFeedbacksByCourses200ResponseFeedbacksInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_feedback_get_feedbacks_by_courses_200_response_feedbacks_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'anonymous' => 'int',
        'autonumbering' => 'bool',
        'completionsubmit' => 'bool',
        'course' => 'int',
        'coursemodule' => 'int',
        'email_notification' => 'bool',
        'id' => 'int',
        'intro' => 'string',
        'introfiles' => '\OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]',
        'introformat' => 'int',
        'lang' => 'string',
        'multiple_submit' => 'bool',
        'name' => 'string',
        'page_after_submit' => 'string',
        'page_after_submitformat' => 'int',
        'pageaftersubmitfiles' => '\OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]',
        'publish_stats' => 'bool',
        'site_after_submit' => 'string',
        'timeclose' => 'int',
        'timemodified' => 'int',
        'timeopen' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'anonymous' => null,
        'autonumbering' => null,
        'completionsubmit' => null,
        'course' => null,
        'coursemodule' => null,
        'email_notification' => null,
        'id' => null,
        'intro' => null,
        'introfiles' => null,
        'introformat' => null,
        'lang' => null,
        'multiple_submit' => null,
        'name' => null,
        'page_after_submit' => null,
        'page_after_submitformat' => null,
        'pageaftersubmitfiles' => null,
        'publish_stats' => null,
        'site_after_submit' => null,
        'timeclose' => null,
        'timemodified' => null,
        'timeopen' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'anonymous' => false,
        'autonumbering' => false,
        'completionsubmit' => false,
        'course' => false,
        'coursemodule' => false,
        'email_notification' => false,
        'id' => false,
        'intro' => false,
        'introfiles' => false,
        'introformat' => false,
        'lang' => false,
        'multiple_submit' => false,
        'name' => false,
        'page_after_submit' => false,
        'page_after_submitformat' => false,
        'pageaftersubmitfiles' => false,
        'publish_stats' => false,
        'site_after_submit' => false,
        'timeclose' => false,
        'timemodified' => false,
        'timeopen' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'anonymous' => 'anonymous',
        'autonumbering' => 'autonumbering',
        'completionsubmit' => 'completionsubmit',
        'course' => 'course',
        'coursemodule' => 'coursemodule',
        'email_notification' => 'email_notification',
        'id' => 'id',
        'intro' => 'intro',
        'introfiles' => 'introfiles',
        'introformat' => 'introformat',
        'lang' => 'lang',
        'multiple_submit' => 'multiple_submit',
        'name' => 'name',
        'page_after_submit' => 'page_after_submit',
        'page_after_submitformat' => 'page_after_submitformat',
        'pageaftersubmitfiles' => 'pageaftersubmitfiles',
        'publish_stats' => 'publish_stats',
        'site_after_submit' => 'site_after_submit',
        'timeclose' => 'timeclose',
        'timemodified' => 'timemodified',
        'timeopen' => 'timeopen'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'anonymous' => 'setAnonymous',
        'autonumbering' => 'setAutonumbering',
        'completionsubmit' => 'setCompletionsubmit',
        'course' => 'setCourse',
        'coursemodule' => 'setCoursemodule',
        'email_notification' => 'setEmailNotification',
        'id' => 'setId',
        'intro' => 'setIntro',
        'introfiles' => 'setIntrofiles',
        'introformat' => 'setIntroformat',
        'lang' => 'setLang',
        'multiple_submit' => 'setMultipleSubmit',
        'name' => 'setName',
        'page_after_submit' => 'setPageAfterSubmit',
        'page_after_submitformat' => 'setPageAfterSubmitformat',
        'pageaftersubmitfiles' => 'setPageaftersubmitfiles',
        'publish_stats' => 'setPublishStats',
        'site_after_submit' => 'setSiteAfterSubmit',
        'timeclose' => 'setTimeclose',
        'timemodified' => 'setTimemodified',
        'timeopen' => 'setTimeopen'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'anonymous' => 'getAnonymous',
        'autonumbering' => 'getAutonumbering',
        'completionsubmit' => 'getCompletionsubmit',
        'course' => 'getCourse',
        'coursemodule' => 'getCoursemodule',
        'email_notification' => 'getEmailNotification',
        'id' => 'getId',
        'intro' => 'getIntro',
        'introfiles' => 'getIntrofiles',
        'introformat' => 'getIntroformat',
        'lang' => 'getLang',
        'multiple_submit' => 'getMultipleSubmit',
        'name' => 'getName',
        'page_after_submit' => 'getPageAfterSubmit',
        'page_after_submitformat' => 'getPageAfterSubmitformat',
        'pageaftersubmitfiles' => 'getPageaftersubmitfiles',
        'publish_stats' => 'getPublishStats',
        'site_after_submit' => 'getSiteAfterSubmit',
        'timeclose' => 'getTimeclose',
        'timemodified' => 'getTimemodified',
        'timeopen' => 'getTimeopen'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('anonymous', $data ?? [], null);
        $this->setIfExists('autonumbering', $data ?? [], 1);
        $this->setIfExists('completionsubmit', $data ?? [], 0);
        $this->setIfExists('course', $data ?? [], null);
        $this->setIfExists('coursemodule', $data ?? [], null);
        $this->setIfExists('email_notification', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('intro', $data ?? [], '');
        $this->setIfExists('introfiles', $data ?? [], null);
        $this->setIfExists('introformat', $data ?? [], 0);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('multiple_submit', $data ?? [], 1);
        $this->setIfExists('name', $data ?? [], 'null');
        $this->setIfExists('page_after_submit', $data ?? [], 'null');
        $this->setIfExists('page_after_submitformat', $data ?? [], 0);
        $this->setIfExists('pageaftersubmitfiles', $data ?? [], null);
        $this->setIfExists('publish_stats', $data ?? [], 0);
        $this->setIfExists('site_after_submit', $data ?? [], 'null');
        $this->setIfExists('timeclose', $data ?? [], null);
        $this->setIfExists('timemodified', $data ?? [], null);
        $this->setIfExists('timeopen', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets anonymous
     *
     * @return int|null
     */
    public function getAnonymous()
    {
        return $this->container['anonymous'];
    }

    /**
     * Sets anonymous
     *
     * @param int|null $anonymous Whether the feedback is anonymous.
     *
     * @return self
     */
    public function setAnonymous($anonymous)
    {
        if (is_null($anonymous)) {
            throw new \InvalidArgumentException('non-nullable anonymous cannot be null');
        }
        $this->container['anonymous'] = $anonymous;

        return $this;
    }

    /**
     * Gets autonumbering
     *
     * @return bool|null
     */
    public function getAutonumbering()
    {
        return $this->container['autonumbering'];
    }

    /**
     * Sets autonumbering
     *
     * @param bool|null $autonumbering Whether questions should be auto-numbered.
     *
     * @return self
     */
    public function setAutonumbering($autonumbering)
    {
        if (is_null($autonumbering)) {
            throw new \InvalidArgumentException('non-nullable autonumbering cannot be null');
        }
        $this->container['autonumbering'] = $autonumbering;

        return $this;
    }

    /**
     * Gets completionsubmit
     *
     * @return bool|null
     */
    public function getCompletionsubmit()
    {
        return $this->container['completionsubmit'];
    }

    /**
     * Sets completionsubmit
     *
     * @param bool|null $completionsubmit If this field is set to 1, then the activity will be automatically marked as complete on submission.
     *
     * @return self
     */
    public function setCompletionsubmit($completionsubmit)
    {
        if (is_null($completionsubmit)) {
            throw new \InvalidArgumentException('non-nullable completionsubmit cannot be null');
        }
        $this->container['completionsubmit'] = $completionsubmit;

        return $this;
    }

    /**
     * Gets course
     *
     * @return int|null
     */
    public function getCourse()
    {
        return $this->container['course'];
    }

    /**
     * Sets course
     *
     * @param int|null $course Course id this feedback is part of.
     *
     * @return self
     */
    public function setCourse($course)
    {
        if (is_null($course)) {
            throw new \InvalidArgumentException('non-nullable course cannot be null');
        }
        $this->container['course'] = $course;

        return $this;
    }

    /**
     * Gets coursemodule
     *
     * @return int|null
     */
    public function getCoursemodule()
    {
        return $this->container['coursemodule'];
    }

    /**
     * Sets coursemodule
     *
     * @param int|null $coursemodule coursemodule
     *
     * @return self
     */
    public function setCoursemodule($coursemodule)
    {
        if (is_null($coursemodule)) {
            throw new \InvalidArgumentException('non-nullable coursemodule cannot be null');
        }
        $this->container['coursemodule'] = $coursemodule;

        return $this;
    }

    /**
     * Gets email_notification
     *
     * @return bool|null
     */
    public function getEmailNotification()
    {
        return $this->container['email_notification'];
    }

    /**
     * Sets email_notification
     *
     * @param bool|null $email_notification Whether email notifications will be sent to teachers.
     *
     * @return self
     */
    public function setEmailNotification($email_notification)
    {
        if (is_null($email_notification)) {
            throw new \InvalidArgumentException('non-nullable email_notification cannot be null');
        }
        $this->container['email_notification'] = $email_notification;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The primary key of the record.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets intro
     *
     * @return string|null
     */
    public function getIntro()
    {
        return $this->container['intro'];
    }

    /**
     * Sets intro
     *
     * @param string|null $intro Feedback introduction text.
     *
     * @return self
     */
    public function setIntro($intro)
    {
        if (is_null($intro)) {
            throw new \InvalidArgumentException('non-nullable intro cannot be null');
        }
        $this->container['intro'] = $intro;

        return $this;
    }

    /**
     * Gets introfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null
     */
    public function getIntrofiles()
    {
        return $this->container['introfiles'];
    }

    /**
     * Sets introfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null $introfiles introfiles
     *
     * @return self
     */
    public function setIntrofiles($introfiles)
    {
        if (is_null($introfiles)) {
            throw new \InvalidArgumentException('non-nullable introfiles cannot be null');
        }
        $this->container['introfiles'] = $introfiles;

        return $this;
    }

    /**
     * Gets introformat
     *
     * @return int|null
     */
    public function getIntroformat()
    {
        return $this->container['introformat'];
    }

    /**
     * Sets introformat
     *
     * @param int|null $introformat intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setIntroformat($introformat)
    {
        if (is_null($introformat)) {
            throw new \InvalidArgumentException('non-nullable introformat cannot be null');
        }
        $this->container['introformat'] = $introformat;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang Forced activity language
     *
     * @return self
     */
    public function setLang($lang)
    {
        if (is_null($lang)) {
            throw new \InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets multiple_submit
     *
     * @return bool|null
     */
    public function getMultipleSubmit()
    {
        return $this->container['multiple_submit'];
    }

    /**
     * Sets multiple_submit
     *
     * @param bool|null $multiple_submit Whether multiple submissions are allowed.
     *
     * @return self
     */
    public function setMultipleSubmit($multiple_submit)
    {
        if (is_null($multiple_submit)) {
            throw new \InvalidArgumentException('non-nullable multiple_submit cannot be null');
        }
        $this->container['multiple_submit'] = $multiple_submit;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Feedback name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets page_after_submit
     *
     * @return string|null
     */
    public function getPageAfterSubmit()
    {
        return $this->container['page_after_submit'];
    }

    /**
     * Sets page_after_submit
     *
     * @param string|null $page_after_submit Text to display after submission.
     *
     * @return self
     */
    public function setPageAfterSubmit($page_after_submit)
    {
        if (is_null($page_after_submit)) {
            throw new \InvalidArgumentException('non-nullable page_after_submit cannot be null');
        }
        $this->container['page_after_submit'] = $page_after_submit;

        return $this;
    }

    /**
     * Gets page_after_submitformat
     *
     * @return int|null
     */
    public function getPageAfterSubmitformat()
    {
        return $this->container['page_after_submitformat'];
    }

    /**
     * Sets page_after_submitformat
     *
     * @param int|null $page_after_submitformat page_after_submit format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setPageAfterSubmitformat($page_after_submitformat)
    {
        if (is_null($page_after_submitformat)) {
            throw new \InvalidArgumentException('non-nullable page_after_submitformat cannot be null');
        }
        $this->container['page_after_submitformat'] = $page_after_submitformat;

        return $this;
    }

    /**
     * Gets pageaftersubmitfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null
     */
    public function getPageaftersubmitfiles()
    {
        return $this->container['pageaftersubmitfiles'];
    }

    /**
     * Sets pageaftersubmitfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null $pageaftersubmitfiles pageaftersubmitfiles
     *
     * @return self
     */
    public function setPageaftersubmitfiles($pageaftersubmitfiles)
    {
        if (is_null($pageaftersubmitfiles)) {
            throw new \InvalidArgumentException('non-nullable pageaftersubmitfiles cannot be null');
        }
        $this->container['pageaftersubmitfiles'] = $pageaftersubmitfiles;

        return $this;
    }

    /**
     * Gets publish_stats
     *
     * @return bool|null
     */
    public function getPublishStats()
    {
        return $this->container['publish_stats'];
    }

    /**
     * Sets publish_stats
     *
     * @param bool|null $publish_stats Whether stats should be published.
     *
     * @return self
     */
    public function setPublishStats($publish_stats)
    {
        if (is_null($publish_stats)) {
            throw new \InvalidArgumentException('non-nullable publish_stats cannot be null');
        }
        $this->container['publish_stats'] = $publish_stats;

        return $this;
    }

    /**
     * Gets site_after_submit
     *
     * @return string|null
     */
    public function getSiteAfterSubmit()
    {
        return $this->container['site_after_submit'];
    }

    /**
     * Sets site_after_submit
     *
     * @param string|null $site_after_submit Link to next page after submission.
     *
     * @return self
     */
    public function setSiteAfterSubmit($site_after_submit)
    {
        if (is_null($site_after_submit)) {
            throw new \InvalidArgumentException('non-nullable site_after_submit cannot be null');
        }
        $this->container['site_after_submit'] = $site_after_submit;

        return $this;
    }

    /**
     * Gets timeclose
     *
     * @return int|null
     */
    public function getTimeclose()
    {
        return $this->container['timeclose'];
    }

    /**
     * Sets timeclose
     *
     * @param int|null $timeclose Allow answers until this time.
     *
     * @return self
     */
    public function setTimeclose($timeclose)
    {
        if (is_null($timeclose)) {
            throw new \InvalidArgumentException('non-nullable timeclose cannot be null');
        }
        $this->container['timeclose'] = $timeclose;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified The time this record was modified.
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets timeopen
     *
     * @return int|null
     */
    public function getTimeopen()
    {
        return $this->container['timeopen'];
    }

    /**
     * Sets timeopen
     *
     * @param int|null $timeopen Allow answers from this time.
     *
     * @return self
     */
    public function setTimeopen($timeopen)
    {
        if (is_null($timeopen)) {
            throw new \InvalidArgumentException('non-nullable timeopen cannot be null');
        }
        $this->container['timeopen'] = $timeopen;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


