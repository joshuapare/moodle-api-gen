<?php
/**
 * ModIomadcertificateGetIomadcertificatesByCourses200ResponseIomadcertificatesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModIomadcertificateGetIomadcertificatesByCourses200ResponseIomadcertificatesInner Class Doc Comment
 *
 * @category Class
 * @description Tool
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModIomadcertificateGetIomadcertificatesByCourses200ResponseIomadcertificatesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_iomadcertificate_get_iomadcertificates_by_courses_200_response_iomadcertificates_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bordercolor' => 'string',
        'borderstyle' => 'string',
        'course' => 'int',
        'coursemodule' => 'int',
        'customtext' => 'string',
        'datefmt' => 'int',
        'delivery' => 'int',
        'emailothers' => 'string',
        'emailteachers' => 'int',
        'gradefmt' => 'int',
        'groupingid' => 'int',
        'groupmode' => 'int',
        'id' => 'int',
        'intro' => 'string',
        'introformat' => 'int',
        'iomadcertificatetype' => 'string',
        'name' => 'string',
        'orientation' => 'string',
        'printdate' => 'string',
        'printgrade' => 'int',
        'printhours' => 'string',
        'printnumber' => 'int',
        'printoutcome' => 'int',
        'printseal' => 'string',
        'printsignature' => 'string',
        'printteacher' => 'int',
        'printwmark' => 'string',
        'reportcert' => 'int',
        'requiredtime' => 'int',
        'requiredtimenotmet' => 'int',
        'savecert' => 'int',
        'section' => 'int',
        'timecreated' => 'int',
        'timemodified' => 'int',
        'visible' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bordercolor' => null,
        'borderstyle' => null,
        'course' => null,
        'coursemodule' => null,
        'customtext' => null,
        'datefmt' => null,
        'delivery' => null,
        'emailothers' => null,
        'emailteachers' => null,
        'gradefmt' => null,
        'groupingid' => null,
        'groupmode' => null,
        'id' => null,
        'intro' => null,
        'introformat' => null,
        'iomadcertificatetype' => null,
        'name' => null,
        'orientation' => null,
        'printdate' => null,
        'printgrade' => null,
        'printhours' => null,
        'printnumber' => null,
        'printoutcome' => null,
        'printseal' => null,
        'printsignature' => null,
        'printteacher' => null,
        'printwmark' => null,
        'reportcert' => null,
        'requiredtime' => null,
        'requiredtimenotmet' => null,
        'savecert' => null,
        'section' => null,
        'timecreated' => null,
        'timemodified' => null,
        'visible' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bordercolor' => false,
        'borderstyle' => false,
        'course' => false,
        'coursemodule' => false,
        'customtext' => false,
        'datefmt' => false,
        'delivery' => false,
        'emailothers' => false,
        'emailteachers' => false,
        'gradefmt' => false,
        'groupingid' => false,
        'groupmode' => false,
        'id' => false,
        'intro' => false,
        'introformat' => false,
        'iomadcertificatetype' => false,
        'name' => false,
        'orientation' => false,
        'printdate' => false,
        'printgrade' => false,
        'printhours' => false,
        'printnumber' => false,
        'printoutcome' => false,
        'printseal' => false,
        'printsignature' => false,
        'printteacher' => false,
        'printwmark' => false,
        'reportcert' => false,
        'requiredtime' => false,
        'requiredtimenotmet' => false,
        'savecert' => false,
        'section' => false,
        'timecreated' => false,
        'timemodified' => false,
        'visible' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bordercolor' => 'bordercolor',
        'borderstyle' => 'borderstyle',
        'course' => 'course',
        'coursemodule' => 'coursemodule',
        'customtext' => 'customtext',
        'datefmt' => 'datefmt',
        'delivery' => 'delivery',
        'emailothers' => 'emailothers',
        'emailteachers' => 'emailteachers',
        'gradefmt' => 'gradefmt',
        'groupingid' => 'groupingid',
        'groupmode' => 'groupmode',
        'id' => 'id',
        'intro' => 'intro',
        'introformat' => 'introformat',
        'iomadcertificatetype' => 'iomadcertificatetype',
        'name' => 'name',
        'orientation' => 'orientation',
        'printdate' => 'printdate',
        'printgrade' => 'printgrade',
        'printhours' => 'printhours',
        'printnumber' => 'printnumber',
        'printoutcome' => 'printoutcome',
        'printseal' => 'printseal',
        'printsignature' => 'printsignature',
        'printteacher' => 'printteacher',
        'printwmark' => 'printwmark',
        'reportcert' => 'reportcert',
        'requiredtime' => 'requiredtime',
        'requiredtimenotmet' => 'requiredtimenotmet',
        'savecert' => 'savecert',
        'section' => 'section',
        'timecreated' => 'timecreated',
        'timemodified' => 'timemodified',
        'visible' => 'visible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bordercolor' => 'setBordercolor',
        'borderstyle' => 'setBorderstyle',
        'course' => 'setCourse',
        'coursemodule' => 'setCoursemodule',
        'customtext' => 'setCustomtext',
        'datefmt' => 'setDatefmt',
        'delivery' => 'setDelivery',
        'emailothers' => 'setEmailothers',
        'emailteachers' => 'setEmailteachers',
        'gradefmt' => 'setGradefmt',
        'groupingid' => 'setGroupingid',
        'groupmode' => 'setGroupmode',
        'id' => 'setId',
        'intro' => 'setIntro',
        'introformat' => 'setIntroformat',
        'iomadcertificatetype' => 'setIomadcertificatetype',
        'name' => 'setName',
        'orientation' => 'setOrientation',
        'printdate' => 'setPrintdate',
        'printgrade' => 'setPrintgrade',
        'printhours' => 'setPrinthours',
        'printnumber' => 'setPrintnumber',
        'printoutcome' => 'setPrintoutcome',
        'printseal' => 'setPrintseal',
        'printsignature' => 'setPrintsignature',
        'printteacher' => 'setPrintteacher',
        'printwmark' => 'setPrintwmark',
        'reportcert' => 'setReportcert',
        'requiredtime' => 'setRequiredtime',
        'requiredtimenotmet' => 'setRequiredtimenotmet',
        'savecert' => 'setSavecert',
        'section' => 'setSection',
        'timecreated' => 'setTimecreated',
        'timemodified' => 'setTimemodified',
        'visible' => 'setVisible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bordercolor' => 'getBordercolor',
        'borderstyle' => 'getBorderstyle',
        'course' => 'getCourse',
        'coursemodule' => 'getCoursemodule',
        'customtext' => 'getCustomtext',
        'datefmt' => 'getDatefmt',
        'delivery' => 'getDelivery',
        'emailothers' => 'getEmailothers',
        'emailteachers' => 'getEmailteachers',
        'gradefmt' => 'getGradefmt',
        'groupingid' => 'getGroupingid',
        'groupmode' => 'getGroupmode',
        'id' => 'getId',
        'intro' => 'getIntro',
        'introformat' => 'getIntroformat',
        'iomadcertificatetype' => 'getIomadcertificatetype',
        'name' => 'getName',
        'orientation' => 'getOrientation',
        'printdate' => 'getPrintdate',
        'printgrade' => 'getPrintgrade',
        'printhours' => 'getPrinthours',
        'printnumber' => 'getPrintnumber',
        'printoutcome' => 'getPrintoutcome',
        'printseal' => 'getPrintseal',
        'printsignature' => 'getPrintsignature',
        'printteacher' => 'getPrintteacher',
        'printwmark' => 'getPrintwmark',
        'reportcert' => 'getReportcert',
        'requiredtime' => 'getRequiredtime',
        'requiredtimenotmet' => 'getRequiredtimenotmet',
        'savecert' => 'getSavecert',
        'section' => 'getSection',
        'timecreated' => 'getTimecreated',
        'timemodified' => 'getTimemodified',
        'visible' => 'getVisible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bordercolor', $data ?? [], 'null');
        $this->setIfExists('borderstyle', $data ?? [], 'null');
        $this->setIfExists('course', $data ?? [], null);
        $this->setIfExists('coursemodule', $data ?? [], null);
        $this->setIfExists('customtext', $data ?? [], 'null');
        $this->setIfExists('datefmt', $data ?? [], null);
        $this->setIfExists('delivery', $data ?? [], null);
        $this->setIfExists('emailothers', $data ?? [], 'null');
        $this->setIfExists('emailteachers', $data ?? [], null);
        $this->setIfExists('gradefmt', $data ?? [], null);
        $this->setIfExists('groupingid', $data ?? [], null);
        $this->setIfExists('groupmode', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('intro', $data ?? [], 'null');
        $this->setIfExists('introformat', $data ?? [], null);
        $this->setIfExists('iomadcertificatetype', $data ?? [], 'null');
        $this->setIfExists('name', $data ?? [], 'null');
        $this->setIfExists('orientation', $data ?? [], 'null');
        $this->setIfExists('printdate', $data ?? [], 'null');
        $this->setIfExists('printgrade', $data ?? [], null);
        $this->setIfExists('printhours', $data ?? [], 'null');
        $this->setIfExists('printnumber', $data ?? [], null);
        $this->setIfExists('printoutcome', $data ?? [], null);
        $this->setIfExists('printseal', $data ?? [], 'null');
        $this->setIfExists('printsignature', $data ?? [], 'null');
        $this->setIfExists('printteacher', $data ?? [], null);
        $this->setIfExists('printwmark', $data ?? [], 'null');
        $this->setIfExists('reportcert', $data ?? [], null);
        $this->setIfExists('requiredtime', $data ?? [], null);
        $this->setIfExists('requiredtimenotmet', $data ?? [], null);
        $this->setIfExists('savecert', $data ?? [], null);
        $this->setIfExists('section', $data ?? [], null);
        $this->setIfExists('timecreated', $data ?? [], null);
        $this->setIfExists('timemodified', $data ?? [], null);
        $this->setIfExists('visible', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bordercolor
     *
     * @return string|null
     */
    public function getBordercolor()
    {
        return $this->container['bordercolor'];
    }

    /**
     * Sets bordercolor
     *
     * @param string|null $bordercolor Border color
     *
     * @return self
     */
    public function setBordercolor($bordercolor)
    {
        if (is_null($bordercolor)) {
            throw new \InvalidArgumentException('non-nullable bordercolor cannot be null');
        }
        $this->container['bordercolor'] = $bordercolor;

        return $this;
    }

    /**
     * Gets borderstyle
     *
     * @return string|null
     */
    public function getBorderstyle()
    {
        return $this->container['borderstyle'];
    }

    /**
     * Sets borderstyle
     *
     * @param string|null $borderstyle Border style
     *
     * @return self
     */
    public function setBorderstyle($borderstyle)
    {
        if (is_null($borderstyle)) {
            throw new \InvalidArgumentException('non-nullable borderstyle cannot be null');
        }
        $this->container['borderstyle'] = $borderstyle;

        return $this;
    }

    /**
     * Gets course
     *
     * @return int|null
     */
    public function getCourse()
    {
        return $this->container['course'];
    }

    /**
     * Sets course
     *
     * @param int|null $course Course id
     *
     * @return self
     */
    public function setCourse($course)
    {
        if (is_null($course)) {
            throw new \InvalidArgumentException('non-nullable course cannot be null');
        }
        $this->container['course'] = $course;

        return $this;
    }

    /**
     * Gets coursemodule
     *
     * @return int|null
     */
    public function getCoursemodule()
    {
        return $this->container['coursemodule'];
    }

    /**
     * Sets coursemodule
     *
     * @param int|null $coursemodule Course module id
     *
     * @return self
     */
    public function setCoursemodule($coursemodule)
    {
        if (is_null($coursemodule)) {
            throw new \InvalidArgumentException('non-nullable coursemodule cannot be null');
        }
        $this->container['coursemodule'] = $coursemodule;

        return $this;
    }

    /**
     * Gets customtext
     *
     * @return string|null
     */
    public function getCustomtext()
    {
        return $this->container['customtext'];
    }

    /**
     * Sets customtext
     *
     * @param string|null $customtext Custom text
     *
     * @return self
     */
    public function setCustomtext($customtext)
    {
        if (is_null($customtext)) {
            throw new \InvalidArgumentException('non-nullable customtext cannot be null');
        }
        $this->container['customtext'] = $customtext;

        return $this;
    }

    /**
     * Gets datefmt
     *
     * @return int|null
     */
    public function getDatefmt()
    {
        return $this->container['datefmt'];
    }

    /**
     * Sets datefmt
     *
     * @param int|null $datefmt Date format
     *
     * @return self
     */
    public function setDatefmt($datefmt)
    {
        if (is_null($datefmt)) {
            throw new \InvalidArgumentException('non-nullable datefmt cannot be null');
        }
        $this->container['datefmt'] = $datefmt;

        return $this;
    }

    /**
     * Gets delivery
     *
     * @return int|null
     */
    public function getDelivery()
    {
        return $this->container['delivery'];
    }

    /**
     * Sets delivery
     *
     * @param int|null $delivery Delivery options
     *
     * @return self
     */
    public function setDelivery($delivery)
    {
        if (is_null($delivery)) {
            throw new \InvalidArgumentException('non-nullable delivery cannot be null');
        }
        $this->container['delivery'] = $delivery;

        return $this;
    }

    /**
     * Gets emailothers
     *
     * @return string|null
     */
    public function getEmailothers()
    {
        return $this->container['emailothers'];
    }

    /**
     * Sets emailothers
     *
     * @param string|null $emailothers Email others?
     *
     * @return self
     */
    public function setEmailothers($emailothers)
    {
        if (is_null($emailothers)) {
            throw new \InvalidArgumentException('non-nullable emailothers cannot be null');
        }
        $this->container['emailothers'] = $emailothers;

        return $this;
    }

    /**
     * Gets emailteachers
     *
     * @return int|null
     */
    public function getEmailteachers()
    {
        return $this->container['emailteachers'];
    }

    /**
     * Sets emailteachers
     *
     * @param int|null $emailteachers Email teachers?
     *
     * @return self
     */
    public function setEmailteachers($emailteachers)
    {
        if (is_null($emailteachers)) {
            throw new \InvalidArgumentException('non-nullable emailteachers cannot be null');
        }
        $this->container['emailteachers'] = $emailteachers;

        return $this;
    }

    /**
     * Gets gradefmt
     *
     * @return int|null
     */
    public function getGradefmt()
    {
        return $this->container['gradefmt'];
    }

    /**
     * Sets gradefmt
     *
     * @param int|null $gradefmt Grade format
     *
     * @return self
     */
    public function setGradefmt($gradefmt)
    {
        if (is_null($gradefmt)) {
            throw new \InvalidArgumentException('non-nullable gradefmt cannot be null');
        }
        $this->container['gradefmt'] = $gradefmt;

        return $this;
    }

    /**
     * Gets groupingid
     *
     * @return int|null
     */
    public function getGroupingid()
    {
        return $this->container['groupingid'];
    }

    /**
     * Sets groupingid
     *
     * @param int|null $groupingid group id
     *
     * @return self
     */
    public function setGroupingid($groupingid)
    {
        if (is_null($groupingid)) {
            throw new \InvalidArgumentException('non-nullable groupingid cannot be null');
        }
        $this->container['groupingid'] = $groupingid;

        return $this;
    }

    /**
     * Gets groupmode
     *
     * @return int|null
     */
    public function getGroupmode()
    {
        return $this->container['groupmode'];
    }

    /**
     * Sets groupmode
     *
     * @param int|null $groupmode group mode
     *
     * @return self
     */
    public function setGroupmode($groupmode)
    {
        if (is_null($groupmode)) {
            throw new \InvalidArgumentException('non-nullable groupmode cannot be null');
        }
        $this->container['groupmode'] = $groupmode;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Certificate id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets intro
     *
     * @return string|null
     */
    public function getIntro()
    {
        return $this->container['intro'];
    }

    /**
     * Sets intro
     *
     * @param string|null $intro The Certificate intro
     *
     * @return self
     */
    public function setIntro($intro)
    {
        if (is_null($intro)) {
            throw new \InvalidArgumentException('non-nullable intro cannot be null');
        }
        $this->container['intro'] = $intro;

        return $this;
    }

    /**
     * Gets introformat
     *
     * @return int|null
     */
    public function getIntroformat()
    {
        return $this->container['introformat'];
    }

    /**
     * Sets introformat
     *
     * @param int|null $introformat intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setIntroformat($introformat)
    {
        if (is_null($introformat)) {
            throw new \InvalidArgumentException('non-nullable introformat cannot be null');
        }
        $this->container['introformat'] = $introformat;

        return $this;
    }

    /**
     * Gets iomadcertificatetype
     *
     * @return string|null
     */
    public function getIomadcertificatetype()
    {
        return $this->container['iomadcertificatetype'];
    }

    /**
     * Sets iomadcertificatetype
     *
     * @param string|null $iomadcertificatetype Type
     *
     * @return self
     */
    public function setIomadcertificatetype($iomadcertificatetype)
    {
        if (is_null($iomadcertificatetype)) {
            throw new \InvalidArgumentException('non-nullable iomadcertificatetype cannot be null');
        }
        $this->container['iomadcertificatetype'] = $iomadcertificatetype;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Certificate name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets orientation
     *
     * @return string|null
     */
    public function getOrientation()
    {
        return $this->container['orientation'];
    }

    /**
     * Sets orientation
     *
     * @param string|null $orientation Orientation
     *
     * @return self
     */
    public function setOrientation($orientation)
    {
        if (is_null($orientation)) {
            throw new \InvalidArgumentException('non-nullable orientation cannot be null');
        }
        $this->container['orientation'] = $orientation;

        return $this;
    }

    /**
     * Gets printdate
     *
     * @return string|null
     */
    public function getPrintdate()
    {
        return $this->container['printdate'];
    }

    /**
     * Sets printdate
     *
     * @param string|null $printdate Print date?
     *
     * @return self
     */
    public function setPrintdate($printdate)
    {
        if (is_null($printdate)) {
            throw new \InvalidArgumentException('non-nullable printdate cannot be null');
        }
        $this->container['printdate'] = $printdate;

        return $this;
    }

    /**
     * Gets printgrade
     *
     * @return int|null
     */
    public function getPrintgrade()
    {
        return $this->container['printgrade'];
    }

    /**
     * Sets printgrade
     *
     * @param int|null $printgrade Print grade?
     *
     * @return self
     */
    public function setPrintgrade($printgrade)
    {
        if (is_null($printgrade)) {
            throw new \InvalidArgumentException('non-nullable printgrade cannot be null');
        }
        $this->container['printgrade'] = $printgrade;

        return $this;
    }

    /**
     * Gets printhours
     *
     * @return string|null
     */
    public function getPrinthours()
    {
        return $this->container['printhours'];
    }

    /**
     * Sets printhours
     *
     * @param string|null $printhours Print hours?
     *
     * @return self
     */
    public function setPrinthours($printhours)
    {
        if (is_null($printhours)) {
            throw new \InvalidArgumentException('non-nullable printhours cannot be null');
        }
        $this->container['printhours'] = $printhours;

        return $this;
    }

    /**
     * Gets printnumber
     *
     * @return int|null
     */
    public function getPrintnumber()
    {
        return $this->container['printnumber'];
    }

    /**
     * Sets printnumber
     *
     * @param int|null $printnumber Print number?
     *
     * @return self
     */
    public function setPrintnumber($printnumber)
    {
        if (is_null($printnumber)) {
            throw new \InvalidArgumentException('non-nullable printnumber cannot be null');
        }
        $this->container['printnumber'] = $printnumber;

        return $this;
    }

    /**
     * Gets printoutcome
     *
     * @return int|null
     */
    public function getPrintoutcome()
    {
        return $this->container['printoutcome'];
    }

    /**
     * Sets printoutcome
     *
     * @param int|null $printoutcome Print outcome?
     *
     * @return self
     */
    public function setPrintoutcome($printoutcome)
    {
        if (is_null($printoutcome)) {
            throw new \InvalidArgumentException('non-nullable printoutcome cannot be null');
        }
        $this->container['printoutcome'] = $printoutcome;

        return $this;
    }

    /**
     * Gets printseal
     *
     * @return string|null
     */
    public function getPrintseal()
    {
        return $this->container['printseal'];
    }

    /**
     * Sets printseal
     *
     * @param string|null $printseal Print seal?
     *
     * @return self
     */
    public function setPrintseal($printseal)
    {
        if (is_null($printseal)) {
            throw new \InvalidArgumentException('non-nullable printseal cannot be null');
        }
        $this->container['printseal'] = $printseal;

        return $this;
    }

    /**
     * Gets printsignature
     *
     * @return string|null
     */
    public function getPrintsignature()
    {
        return $this->container['printsignature'];
    }

    /**
     * Sets printsignature
     *
     * @param string|null $printsignature Print signature?
     *
     * @return self
     */
    public function setPrintsignature($printsignature)
    {
        if (is_null($printsignature)) {
            throw new \InvalidArgumentException('non-nullable printsignature cannot be null');
        }
        $this->container['printsignature'] = $printsignature;

        return $this;
    }

    /**
     * Gets printteacher
     *
     * @return int|null
     */
    public function getPrintteacher()
    {
        return $this->container['printteacher'];
    }

    /**
     * Sets printteacher
     *
     * @param int|null $printteacher Print teacher?
     *
     * @return self
     */
    public function setPrintteacher($printteacher)
    {
        if (is_null($printteacher)) {
            throw new \InvalidArgumentException('non-nullable printteacher cannot be null');
        }
        $this->container['printteacher'] = $printteacher;

        return $this;
    }

    /**
     * Gets printwmark
     *
     * @return string|null
     */
    public function getPrintwmark()
    {
        return $this->container['printwmark'];
    }

    /**
     * Sets printwmark
     *
     * @param string|null $printwmark Print water mark?
     *
     * @return self
     */
    public function setPrintwmark($printwmark)
    {
        if (is_null($printwmark)) {
            throw new \InvalidArgumentException('non-nullable printwmark cannot be null');
        }
        $this->container['printwmark'] = $printwmark;

        return $this;
    }

    /**
     * Gets reportcert
     *
     * @return int|null
     */
    public function getReportcert()
    {
        return $this->container['reportcert'];
    }

    /**
     * Sets reportcert
     *
     * @param int|null $reportcert Report iomadcertificate?
     *
     * @return self
     */
    public function setReportcert($reportcert)
    {
        if (is_null($reportcert)) {
            throw new \InvalidArgumentException('non-nullable reportcert cannot be null');
        }
        $this->container['reportcert'] = $reportcert;

        return $this;
    }

    /**
     * Gets requiredtime
     *
     * @return int|null
     */
    public function getRequiredtime()
    {
        return $this->container['requiredtime'];
    }

    /**
     * Sets requiredtime
     *
     * @param int|null $requiredtime Required time
     *
     * @return self
     */
    public function setRequiredtime($requiredtime)
    {
        if (is_null($requiredtime)) {
            throw new \InvalidArgumentException('non-nullable requiredtime cannot be null');
        }
        $this->container['requiredtime'] = $requiredtime;

        return $this;
    }

    /**
     * Gets requiredtimenotmet
     *
     * @return int|null
     */
    public function getRequiredtimenotmet()
    {
        return $this->container['requiredtimenotmet'];
    }

    /**
     * Sets requiredtimenotmet
     *
     * @param int|null $requiredtimenotmet Whether the time req is met
     *
     * @return self
     */
    public function setRequiredtimenotmet($requiredtimenotmet)
    {
        if (is_null($requiredtimenotmet)) {
            throw new \InvalidArgumentException('non-nullable requiredtimenotmet cannot be null');
        }
        $this->container['requiredtimenotmet'] = $requiredtimenotmet;

        return $this;
    }

    /**
     * Gets savecert
     *
     * @return int|null
     */
    public function getSavecert()
    {
        return $this->container['savecert'];
    }

    /**
     * Sets savecert
     *
     * @param int|null $savecert Save iomadcertificate?
     *
     * @return self
     */
    public function setSavecert($savecert)
    {
        if (is_null($savecert)) {
            throw new \InvalidArgumentException('non-nullable savecert cannot be null');
        }
        $this->container['savecert'] = $savecert;

        return $this;
    }

    /**
     * Gets section
     *
     * @return int|null
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param int|null $section course section id
     *
     * @return self
     */
    public function setSection($section)
    {
        if (is_null($section)) {
            throw new \InvalidArgumentException('non-nullable section cannot be null');
        }
        $this->container['section'] = $section;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return int|null
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param int|null $timecreated Time created
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified Time modified
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return int|null
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param int|null $visible visible
     *
     * @return self
     */
    public function setVisible($visible)
    {
        if (is_null($visible)) {
            throw new \InvalidArgumentException('non-nullable visible cannot be null');
        }
        $this->container['visible'] = $visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


