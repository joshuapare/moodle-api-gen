<?php
/**
 * ModWorkshopGetWorkshopAccessInformation200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModWorkshopGetWorkshopAccessInformation200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModWorkshopGetWorkshopAccessInformation200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_workshop_get_workshop_access_information_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assessingallowed' => 'bool',
        'assessingexamplesallowed' => 'bool',
        'canaddinstance' => 'bool',
        'canallocate' => 'bool',
        'candeletesubmissions' => 'bool',
        'caneditdimensions' => 'bool',
        'canexportsubmissions' => 'bool',
        'canignoredeadlines' => 'bool',
        'canmanageexamples' => 'bool',
        'canoverridegrades' => 'bool',
        'canpeerassess' => 'bool',
        'canpublishsubmissions' => 'bool',
        'cansubmit' => 'bool',
        'canswitchphase' => 'bool',
        'canview' => 'bool',
        'canviewallassessments' => 'bool',
        'canviewallsubmissions' => 'bool',
        'canviewauthornames' => 'bool',
        'canviewauthorpublished' => 'bool',
        'canviewpublishedsubmissions' => 'bool',
        'canviewreviewernames' => 'bool',
        'creatingsubmissionallowed' => 'bool',
        'examplesassessedbeforeassessment' => 'bool',
        'examplesassessedbeforesubmission' => 'bool',
        'modifyingsubmissionallowed' => 'bool',
        'warnings' => '\OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'assessingallowed' => null,
        'assessingexamplesallowed' => null,
        'canaddinstance' => null,
        'canallocate' => null,
        'candeletesubmissions' => null,
        'caneditdimensions' => null,
        'canexportsubmissions' => null,
        'canignoredeadlines' => null,
        'canmanageexamples' => null,
        'canoverridegrades' => null,
        'canpeerassess' => null,
        'canpublishsubmissions' => null,
        'cansubmit' => null,
        'canswitchphase' => null,
        'canview' => null,
        'canviewallassessments' => null,
        'canviewallsubmissions' => null,
        'canviewauthornames' => null,
        'canviewauthorpublished' => null,
        'canviewpublishedsubmissions' => null,
        'canviewreviewernames' => null,
        'creatingsubmissionallowed' => null,
        'examplesassessedbeforeassessment' => null,
        'examplesassessedbeforesubmission' => null,
        'modifyingsubmissionallowed' => null,
        'warnings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'assessingallowed' => false,
        'assessingexamplesallowed' => false,
        'canaddinstance' => false,
        'canallocate' => false,
        'candeletesubmissions' => false,
        'caneditdimensions' => false,
        'canexportsubmissions' => false,
        'canignoredeadlines' => false,
        'canmanageexamples' => false,
        'canoverridegrades' => false,
        'canpeerassess' => false,
        'canpublishsubmissions' => false,
        'cansubmit' => false,
        'canswitchphase' => false,
        'canview' => false,
        'canviewallassessments' => false,
        'canviewallsubmissions' => false,
        'canviewauthornames' => false,
        'canviewauthorpublished' => false,
        'canviewpublishedsubmissions' => false,
        'canviewreviewernames' => false,
        'creatingsubmissionallowed' => false,
        'examplesassessedbeforeassessment' => false,
        'examplesassessedbeforesubmission' => false,
        'modifyingsubmissionallowed' => false,
        'warnings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assessingallowed' => 'assessingallowed',
        'assessingexamplesallowed' => 'assessingexamplesallowed',
        'canaddinstance' => 'canaddinstance',
        'canallocate' => 'canallocate',
        'candeletesubmissions' => 'candeletesubmissions',
        'caneditdimensions' => 'caneditdimensions',
        'canexportsubmissions' => 'canexportsubmissions',
        'canignoredeadlines' => 'canignoredeadlines',
        'canmanageexamples' => 'canmanageexamples',
        'canoverridegrades' => 'canoverridegrades',
        'canpeerassess' => 'canpeerassess',
        'canpublishsubmissions' => 'canpublishsubmissions',
        'cansubmit' => 'cansubmit',
        'canswitchphase' => 'canswitchphase',
        'canview' => 'canview',
        'canviewallassessments' => 'canviewallassessments',
        'canviewallsubmissions' => 'canviewallsubmissions',
        'canviewauthornames' => 'canviewauthornames',
        'canviewauthorpublished' => 'canviewauthorpublished',
        'canviewpublishedsubmissions' => 'canviewpublishedsubmissions',
        'canviewreviewernames' => 'canviewreviewernames',
        'creatingsubmissionallowed' => 'creatingsubmissionallowed',
        'examplesassessedbeforeassessment' => 'examplesassessedbeforeassessment',
        'examplesassessedbeforesubmission' => 'examplesassessedbeforesubmission',
        'modifyingsubmissionallowed' => 'modifyingsubmissionallowed',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assessingallowed' => 'setAssessingallowed',
        'assessingexamplesallowed' => 'setAssessingexamplesallowed',
        'canaddinstance' => 'setCanaddinstance',
        'canallocate' => 'setCanallocate',
        'candeletesubmissions' => 'setCandeletesubmissions',
        'caneditdimensions' => 'setCaneditdimensions',
        'canexportsubmissions' => 'setCanexportsubmissions',
        'canignoredeadlines' => 'setCanignoredeadlines',
        'canmanageexamples' => 'setCanmanageexamples',
        'canoverridegrades' => 'setCanoverridegrades',
        'canpeerassess' => 'setCanpeerassess',
        'canpublishsubmissions' => 'setCanpublishsubmissions',
        'cansubmit' => 'setCansubmit',
        'canswitchphase' => 'setCanswitchphase',
        'canview' => 'setCanview',
        'canviewallassessments' => 'setCanviewallassessments',
        'canviewallsubmissions' => 'setCanviewallsubmissions',
        'canviewauthornames' => 'setCanviewauthornames',
        'canviewauthorpublished' => 'setCanviewauthorpublished',
        'canviewpublishedsubmissions' => 'setCanviewpublishedsubmissions',
        'canviewreviewernames' => 'setCanviewreviewernames',
        'creatingsubmissionallowed' => 'setCreatingsubmissionallowed',
        'examplesassessedbeforeassessment' => 'setExamplesassessedbeforeassessment',
        'examplesassessedbeforesubmission' => 'setExamplesassessedbeforesubmission',
        'modifyingsubmissionallowed' => 'setModifyingsubmissionallowed',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assessingallowed' => 'getAssessingallowed',
        'assessingexamplesallowed' => 'getAssessingexamplesallowed',
        'canaddinstance' => 'getCanaddinstance',
        'canallocate' => 'getCanallocate',
        'candeletesubmissions' => 'getCandeletesubmissions',
        'caneditdimensions' => 'getCaneditdimensions',
        'canexportsubmissions' => 'getCanexportsubmissions',
        'canignoredeadlines' => 'getCanignoredeadlines',
        'canmanageexamples' => 'getCanmanageexamples',
        'canoverridegrades' => 'getCanoverridegrades',
        'canpeerassess' => 'getCanpeerassess',
        'canpublishsubmissions' => 'getCanpublishsubmissions',
        'cansubmit' => 'getCansubmit',
        'canswitchphase' => 'getCanswitchphase',
        'canview' => 'getCanview',
        'canviewallassessments' => 'getCanviewallassessments',
        'canviewallsubmissions' => 'getCanviewallsubmissions',
        'canviewauthornames' => 'getCanviewauthornames',
        'canviewauthorpublished' => 'getCanviewauthorpublished',
        'canviewpublishedsubmissions' => 'getCanviewpublishedsubmissions',
        'canviewreviewernames' => 'getCanviewreviewernames',
        'creatingsubmissionallowed' => 'getCreatingsubmissionallowed',
        'examplesassessedbeforeassessment' => 'getExamplesassessedbeforeassessment',
        'examplesassessedbeforesubmission' => 'getExamplesassessedbeforesubmission',
        'modifyingsubmissionallowed' => 'getModifyingsubmissionallowed',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('assessingallowed', $data ?? [], null);
        $this->setIfExists('assessingexamplesallowed', $data ?? [], null);
        $this->setIfExists('canaddinstance', $data ?? [], null);
        $this->setIfExists('canallocate', $data ?? [], null);
        $this->setIfExists('candeletesubmissions', $data ?? [], null);
        $this->setIfExists('caneditdimensions', $data ?? [], null);
        $this->setIfExists('canexportsubmissions', $data ?? [], null);
        $this->setIfExists('canignoredeadlines', $data ?? [], null);
        $this->setIfExists('canmanageexamples', $data ?? [], null);
        $this->setIfExists('canoverridegrades', $data ?? [], null);
        $this->setIfExists('canpeerassess', $data ?? [], null);
        $this->setIfExists('canpublishsubmissions', $data ?? [], null);
        $this->setIfExists('cansubmit', $data ?? [], null);
        $this->setIfExists('canswitchphase', $data ?? [], null);
        $this->setIfExists('canview', $data ?? [], null);
        $this->setIfExists('canviewallassessments', $data ?? [], null);
        $this->setIfExists('canviewallsubmissions', $data ?? [], null);
        $this->setIfExists('canviewauthornames', $data ?? [], null);
        $this->setIfExists('canviewauthorpublished', $data ?? [], null);
        $this->setIfExists('canviewpublishedsubmissions', $data ?? [], null);
        $this->setIfExists('canviewreviewernames', $data ?? [], null);
        $this->setIfExists('creatingsubmissionallowed', $data ?? [], null);
        $this->setIfExists('examplesassessedbeforeassessment', $data ?? [], null);
        $this->setIfExists('examplesassessedbeforesubmission', $data ?? [], null);
        $this->setIfExists('modifyingsubmissionallowed', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['assessingallowed'] === null) {
            $invalidProperties[] = "'assessingallowed' can't be null";
        }
        if ($this->container['assessingexamplesallowed'] === null) {
            $invalidProperties[] = "'assessingexamplesallowed' can't be null";
        }
        if ($this->container['canaddinstance'] === null) {
            $invalidProperties[] = "'canaddinstance' can't be null";
        }
        if ($this->container['canallocate'] === null) {
            $invalidProperties[] = "'canallocate' can't be null";
        }
        if ($this->container['candeletesubmissions'] === null) {
            $invalidProperties[] = "'candeletesubmissions' can't be null";
        }
        if ($this->container['caneditdimensions'] === null) {
            $invalidProperties[] = "'caneditdimensions' can't be null";
        }
        if ($this->container['canexportsubmissions'] === null) {
            $invalidProperties[] = "'canexportsubmissions' can't be null";
        }
        if ($this->container['canignoredeadlines'] === null) {
            $invalidProperties[] = "'canignoredeadlines' can't be null";
        }
        if ($this->container['canmanageexamples'] === null) {
            $invalidProperties[] = "'canmanageexamples' can't be null";
        }
        if ($this->container['canoverridegrades'] === null) {
            $invalidProperties[] = "'canoverridegrades' can't be null";
        }
        if ($this->container['canpeerassess'] === null) {
            $invalidProperties[] = "'canpeerassess' can't be null";
        }
        if ($this->container['canpublishsubmissions'] === null) {
            $invalidProperties[] = "'canpublishsubmissions' can't be null";
        }
        if ($this->container['cansubmit'] === null) {
            $invalidProperties[] = "'cansubmit' can't be null";
        }
        if ($this->container['canswitchphase'] === null) {
            $invalidProperties[] = "'canswitchphase' can't be null";
        }
        if ($this->container['canview'] === null) {
            $invalidProperties[] = "'canview' can't be null";
        }
        if ($this->container['canviewallassessments'] === null) {
            $invalidProperties[] = "'canviewallassessments' can't be null";
        }
        if ($this->container['canviewallsubmissions'] === null) {
            $invalidProperties[] = "'canviewallsubmissions' can't be null";
        }
        if ($this->container['canviewauthornames'] === null) {
            $invalidProperties[] = "'canviewauthornames' can't be null";
        }
        if ($this->container['canviewauthorpublished'] === null) {
            $invalidProperties[] = "'canviewauthorpublished' can't be null";
        }
        if ($this->container['canviewpublishedsubmissions'] === null) {
            $invalidProperties[] = "'canviewpublishedsubmissions' can't be null";
        }
        if ($this->container['canviewreviewernames'] === null) {
            $invalidProperties[] = "'canviewreviewernames' can't be null";
        }
        if ($this->container['creatingsubmissionallowed'] === null) {
            $invalidProperties[] = "'creatingsubmissionallowed' can't be null";
        }
        if ($this->container['examplesassessedbeforeassessment'] === null) {
            $invalidProperties[] = "'examplesassessedbeforeassessment' can't be null";
        }
        if ($this->container['examplesassessedbeforesubmission'] === null) {
            $invalidProperties[] = "'examplesassessedbeforesubmission' can't be null";
        }
        if ($this->container['modifyingsubmissionallowed'] === null) {
            $invalidProperties[] = "'modifyingsubmissionallowed' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assessingallowed
     *
     * @return bool
     */
    public function getAssessingallowed()
    {
        return $this->container['assessingallowed'];
    }

    /**
     * Sets assessingallowed
     *
     * @param bool $assessingallowed Is the user allowed to create/edit his assessments?
     *
     * @return self
     */
    public function setAssessingallowed($assessingallowed)
    {
        if (is_null($assessingallowed)) {
            throw new \InvalidArgumentException('non-nullable assessingallowed cannot be null');
        }
        $this->container['assessingallowed'] = $assessingallowed;

        return $this;
    }

    /**
     * Gets assessingexamplesallowed
     *
     * @return bool
     */
    public function getAssessingexamplesallowed()
    {
        return $this->container['assessingexamplesallowed'];
    }

    /**
     * Sets assessingexamplesallowed
     *
     * @param bool $assessingexamplesallowed Are reviewers allowed to create/edit their assessments of the example submissions?.
     *
     * @return self
     */
    public function setAssessingexamplesallowed($assessingexamplesallowed)
    {
        if (is_null($assessingexamplesallowed)) {
            throw new \InvalidArgumentException('non-nullable assessingexamplesallowed cannot be null');
        }
        $this->container['assessingexamplesallowed'] = $assessingexamplesallowed;

        return $this;
    }

    /**
     * Gets canaddinstance
     *
     * @return bool
     */
    public function getCanaddinstance()
    {
        return $this->container['canaddinstance'];
    }

    /**
     * Sets canaddinstance
     *
     * @param bool $canaddinstance Whether the user has the capability mod/workshop:addinstance allowed.
     *
     * @return self
     */
    public function setCanaddinstance($canaddinstance)
    {
        if (is_null($canaddinstance)) {
            throw new \InvalidArgumentException('non-nullable canaddinstance cannot be null');
        }
        $this->container['canaddinstance'] = $canaddinstance;

        return $this;
    }

    /**
     * Gets canallocate
     *
     * @return bool
     */
    public function getCanallocate()
    {
        return $this->container['canallocate'];
    }

    /**
     * Sets canallocate
     *
     * @param bool $canallocate Whether the user has the capability mod/workshop:allocate allowed.
     *
     * @return self
     */
    public function setCanallocate($canallocate)
    {
        if (is_null($canallocate)) {
            throw new \InvalidArgumentException('non-nullable canallocate cannot be null');
        }
        $this->container['canallocate'] = $canallocate;

        return $this;
    }

    /**
     * Gets candeletesubmissions
     *
     * @return bool
     */
    public function getCandeletesubmissions()
    {
        return $this->container['candeletesubmissions'];
    }

    /**
     * Sets candeletesubmissions
     *
     * @param bool $candeletesubmissions Whether the user has the capability mod/workshop:deletesubmissions allowed.
     *
     * @return self
     */
    public function setCandeletesubmissions($candeletesubmissions)
    {
        if (is_null($candeletesubmissions)) {
            throw new \InvalidArgumentException('non-nullable candeletesubmissions cannot be null');
        }
        $this->container['candeletesubmissions'] = $candeletesubmissions;

        return $this;
    }

    /**
     * Gets caneditdimensions
     *
     * @return bool
     */
    public function getCaneditdimensions()
    {
        return $this->container['caneditdimensions'];
    }

    /**
     * Sets caneditdimensions
     *
     * @param bool $caneditdimensions Whether the user has the capability mod/workshop:editdimensions allowed.
     *
     * @return self
     */
    public function setCaneditdimensions($caneditdimensions)
    {
        if (is_null($caneditdimensions)) {
            throw new \InvalidArgumentException('non-nullable caneditdimensions cannot be null');
        }
        $this->container['caneditdimensions'] = $caneditdimensions;

        return $this;
    }

    /**
     * Gets canexportsubmissions
     *
     * @return bool
     */
    public function getCanexportsubmissions()
    {
        return $this->container['canexportsubmissions'];
    }

    /**
     * Sets canexportsubmissions
     *
     * @param bool $canexportsubmissions Whether the user has the capability mod/workshop:exportsubmissions allowed.
     *
     * @return self
     */
    public function setCanexportsubmissions($canexportsubmissions)
    {
        if (is_null($canexportsubmissions)) {
            throw new \InvalidArgumentException('non-nullable canexportsubmissions cannot be null');
        }
        $this->container['canexportsubmissions'] = $canexportsubmissions;

        return $this;
    }

    /**
     * Gets canignoredeadlines
     *
     * @return bool
     */
    public function getCanignoredeadlines()
    {
        return $this->container['canignoredeadlines'];
    }

    /**
     * Sets canignoredeadlines
     *
     * @param bool $canignoredeadlines Whether the user has the capability mod/workshop:ignoredeadlines allowed.
     *
     * @return self
     */
    public function setCanignoredeadlines($canignoredeadlines)
    {
        if (is_null($canignoredeadlines)) {
            throw new \InvalidArgumentException('non-nullable canignoredeadlines cannot be null');
        }
        $this->container['canignoredeadlines'] = $canignoredeadlines;

        return $this;
    }

    /**
     * Gets canmanageexamples
     *
     * @return bool
     */
    public function getCanmanageexamples()
    {
        return $this->container['canmanageexamples'];
    }

    /**
     * Sets canmanageexamples
     *
     * @param bool $canmanageexamples Whether the user has the capability mod/workshop:manageexamples allowed.
     *
     * @return self
     */
    public function setCanmanageexamples($canmanageexamples)
    {
        if (is_null($canmanageexamples)) {
            throw new \InvalidArgumentException('non-nullable canmanageexamples cannot be null');
        }
        $this->container['canmanageexamples'] = $canmanageexamples;

        return $this;
    }

    /**
     * Gets canoverridegrades
     *
     * @return bool
     */
    public function getCanoverridegrades()
    {
        return $this->container['canoverridegrades'];
    }

    /**
     * Sets canoverridegrades
     *
     * @param bool $canoverridegrades Whether the user has the capability mod/workshop:overridegrades allowed.
     *
     * @return self
     */
    public function setCanoverridegrades($canoverridegrades)
    {
        if (is_null($canoverridegrades)) {
            throw new \InvalidArgumentException('non-nullable canoverridegrades cannot be null');
        }
        $this->container['canoverridegrades'] = $canoverridegrades;

        return $this;
    }

    /**
     * Gets canpeerassess
     *
     * @return bool
     */
    public function getCanpeerassess()
    {
        return $this->container['canpeerassess'];
    }

    /**
     * Sets canpeerassess
     *
     * @param bool $canpeerassess Whether the user has the capability mod/workshop:peerassess allowed.
     *
     * @return self
     */
    public function setCanpeerassess($canpeerassess)
    {
        if (is_null($canpeerassess)) {
            throw new \InvalidArgumentException('non-nullable canpeerassess cannot be null');
        }
        $this->container['canpeerassess'] = $canpeerassess;

        return $this;
    }

    /**
     * Gets canpublishsubmissions
     *
     * @return bool
     */
    public function getCanpublishsubmissions()
    {
        return $this->container['canpublishsubmissions'];
    }

    /**
     * Sets canpublishsubmissions
     *
     * @param bool $canpublishsubmissions Whether the user has the capability mod/workshop:publishsubmissions allowed.
     *
     * @return self
     */
    public function setCanpublishsubmissions($canpublishsubmissions)
    {
        if (is_null($canpublishsubmissions)) {
            throw new \InvalidArgumentException('non-nullable canpublishsubmissions cannot be null');
        }
        $this->container['canpublishsubmissions'] = $canpublishsubmissions;

        return $this;
    }

    /**
     * Gets cansubmit
     *
     * @return bool
     */
    public function getCansubmit()
    {
        return $this->container['cansubmit'];
    }

    /**
     * Sets cansubmit
     *
     * @param bool $cansubmit Whether the user has the capability mod/workshop:submit allowed.
     *
     * @return self
     */
    public function setCansubmit($cansubmit)
    {
        if (is_null($cansubmit)) {
            throw new \InvalidArgumentException('non-nullable cansubmit cannot be null');
        }
        $this->container['cansubmit'] = $cansubmit;

        return $this;
    }

    /**
     * Gets canswitchphase
     *
     * @return bool
     */
    public function getCanswitchphase()
    {
        return $this->container['canswitchphase'];
    }

    /**
     * Sets canswitchphase
     *
     * @param bool $canswitchphase Whether the user has the capability mod/workshop:switchphase allowed.
     *
     * @return self
     */
    public function setCanswitchphase($canswitchphase)
    {
        if (is_null($canswitchphase)) {
            throw new \InvalidArgumentException('non-nullable canswitchphase cannot be null');
        }
        $this->container['canswitchphase'] = $canswitchphase;

        return $this;
    }

    /**
     * Gets canview
     *
     * @return bool
     */
    public function getCanview()
    {
        return $this->container['canview'];
    }

    /**
     * Sets canview
     *
     * @param bool $canview Whether the user has the capability mod/workshop:view allowed.
     *
     * @return self
     */
    public function setCanview($canview)
    {
        if (is_null($canview)) {
            throw new \InvalidArgumentException('non-nullable canview cannot be null');
        }
        $this->container['canview'] = $canview;

        return $this;
    }

    /**
     * Gets canviewallassessments
     *
     * @return bool
     */
    public function getCanviewallassessments()
    {
        return $this->container['canviewallassessments'];
    }

    /**
     * Sets canviewallassessments
     *
     * @param bool $canviewallassessments Whether the user has the capability mod/workshop:viewallassessments allowed.
     *
     * @return self
     */
    public function setCanviewallassessments($canviewallassessments)
    {
        if (is_null($canviewallassessments)) {
            throw new \InvalidArgumentException('non-nullable canviewallassessments cannot be null');
        }
        $this->container['canviewallassessments'] = $canviewallassessments;

        return $this;
    }

    /**
     * Gets canviewallsubmissions
     *
     * @return bool
     */
    public function getCanviewallsubmissions()
    {
        return $this->container['canviewallsubmissions'];
    }

    /**
     * Sets canviewallsubmissions
     *
     * @param bool $canviewallsubmissions Whether the user has the capability mod/workshop:viewallsubmissions allowed.
     *
     * @return self
     */
    public function setCanviewallsubmissions($canviewallsubmissions)
    {
        if (is_null($canviewallsubmissions)) {
            throw new \InvalidArgumentException('non-nullable canviewallsubmissions cannot be null');
        }
        $this->container['canviewallsubmissions'] = $canviewallsubmissions;

        return $this;
    }

    /**
     * Gets canviewauthornames
     *
     * @return bool
     */
    public function getCanviewauthornames()
    {
        return $this->container['canviewauthornames'];
    }

    /**
     * Sets canviewauthornames
     *
     * @param bool $canviewauthornames Whether the user has the capability mod/workshop:viewauthornames allowed.
     *
     * @return self
     */
    public function setCanviewauthornames($canviewauthornames)
    {
        if (is_null($canviewauthornames)) {
            throw new \InvalidArgumentException('non-nullable canviewauthornames cannot be null');
        }
        $this->container['canviewauthornames'] = $canviewauthornames;

        return $this;
    }

    /**
     * Gets canviewauthorpublished
     *
     * @return bool
     */
    public function getCanviewauthorpublished()
    {
        return $this->container['canviewauthorpublished'];
    }

    /**
     * Sets canviewauthorpublished
     *
     * @param bool $canviewauthorpublished Whether the user has the capability mod/workshop:viewauthorpublished allowed.
     *
     * @return self
     */
    public function setCanviewauthorpublished($canviewauthorpublished)
    {
        if (is_null($canviewauthorpublished)) {
            throw new \InvalidArgumentException('non-nullable canviewauthorpublished cannot be null');
        }
        $this->container['canviewauthorpublished'] = $canviewauthorpublished;

        return $this;
    }

    /**
     * Gets canviewpublishedsubmissions
     *
     * @return bool
     */
    public function getCanviewpublishedsubmissions()
    {
        return $this->container['canviewpublishedsubmissions'];
    }

    /**
     * Sets canviewpublishedsubmissions
     *
     * @param bool $canviewpublishedsubmissions Whether the user has the capability mod/workshop:viewpublishedsubmissions allowed.
     *
     * @return self
     */
    public function setCanviewpublishedsubmissions($canviewpublishedsubmissions)
    {
        if (is_null($canviewpublishedsubmissions)) {
            throw new \InvalidArgumentException('non-nullable canviewpublishedsubmissions cannot be null');
        }
        $this->container['canviewpublishedsubmissions'] = $canviewpublishedsubmissions;

        return $this;
    }

    /**
     * Gets canviewreviewernames
     *
     * @return bool
     */
    public function getCanviewreviewernames()
    {
        return $this->container['canviewreviewernames'];
    }

    /**
     * Sets canviewreviewernames
     *
     * @param bool $canviewreviewernames Whether the user has the capability mod/workshop:viewreviewernames allowed.
     *
     * @return self
     */
    public function setCanviewreviewernames($canviewreviewernames)
    {
        if (is_null($canviewreviewernames)) {
            throw new \InvalidArgumentException('non-nullable canviewreviewernames cannot be null');
        }
        $this->container['canviewreviewernames'] = $canviewreviewernames;

        return $this;
    }

    /**
     * Gets creatingsubmissionallowed
     *
     * @return bool
     */
    public function getCreatingsubmissionallowed()
    {
        return $this->container['creatingsubmissionallowed'];
    }

    /**
     * Sets creatingsubmissionallowed
     *
     * @param bool $creatingsubmissionallowed Is the given user allowed to create their submission?
     *
     * @return self
     */
    public function setCreatingsubmissionallowed($creatingsubmissionallowed)
    {
        if (is_null($creatingsubmissionallowed)) {
            throw new \InvalidArgumentException('non-nullable creatingsubmissionallowed cannot be null');
        }
        $this->container['creatingsubmissionallowed'] = $creatingsubmissionallowed;

        return $this;
    }

    /**
     * Gets examplesassessedbeforeassessment
     *
     * @return bool
     */
    public function getExamplesassessedbeforeassessment()
    {
        return $this->container['examplesassessedbeforeassessment'];
    }

    /**
     * Sets examplesassessedbeforeassessment
     *
     * @param bool $examplesassessedbeforeassessment Whether the given user has assessed all his required examples before assessment                 (always true if there are not examples to assessor not configured to check before assessment).
     *
     * @return self
     */
    public function setExamplesassessedbeforeassessment($examplesassessedbeforeassessment)
    {
        if (is_null($examplesassessedbeforeassessment)) {
            throw new \InvalidArgumentException('non-nullable examplesassessedbeforeassessment cannot be null');
        }
        $this->container['examplesassessedbeforeassessment'] = $examplesassessedbeforeassessment;

        return $this;
    }

    /**
     * Gets examplesassessedbeforesubmission
     *
     * @return bool
     */
    public function getExamplesassessedbeforesubmission()
    {
        return $this->container['examplesassessedbeforesubmission'];
    }

    /**
     * Sets examplesassessedbeforesubmission
     *
     * @param bool $examplesassessedbeforesubmission Whether the given user has assessed all his required examples before submission                 (always true if there are not examples to assess or not configured to check before submission).
     *
     * @return self
     */
    public function setExamplesassessedbeforesubmission($examplesassessedbeforesubmission)
    {
        if (is_null($examplesassessedbeforesubmission)) {
            throw new \InvalidArgumentException('non-nullable examplesassessedbeforesubmission cannot be null');
        }
        $this->container['examplesassessedbeforesubmission'] = $examplesassessedbeforesubmission;

        return $this;
    }

    /**
     * Gets modifyingsubmissionallowed
     *
     * @return bool
     */
    public function getModifyingsubmissionallowed()
    {
        return $this->container['modifyingsubmissionallowed'];
    }

    /**
     * Sets modifyingsubmissionallowed
     *
     * @param bool $modifyingsubmissionallowed Is the user allowed to modify his existing submission?
     *
     * @return self
     */
    public function setModifyingsubmissionallowed($modifyingsubmissionallowed)
    {
        if (is_null($modifyingsubmissionallowed)) {
            throw new \InvalidArgumentException('non-nullable modifyingsubmissionallowed cannot be null');
        }
        $this->container['modifyingsubmissionallowed'] = $modifyingsubmissionallowed;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null $warnings warnings
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


