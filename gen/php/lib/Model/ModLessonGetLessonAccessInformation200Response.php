<?php
/**
 * ModLessonGetLessonAccessInformation200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModLessonGetLessonAccessInformation200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModLessonGetLessonAccessInformation200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_lesson_get_lesson_access_information_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'attemptscount' => 'int',
        'cangrade' => 'bool',
        'canmanage' => 'bool',
        'canviewreports' => 'bool',
        'firstpageid' => 'int',
        'lastpageseen' => 'int',
        'leftduringtimedsession' => 'bool',
        'preventaccessreasons' => '\OpenAPI\Client\Model\ModLessonGetLessonAccessInformation200ResponsePreventaccessreasonsInner[]',
        'reviewmode' => 'bool',
        'warnings' => '\OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'attemptscount' => null,
        'cangrade' => null,
        'canmanage' => null,
        'canviewreports' => null,
        'firstpageid' => null,
        'lastpageseen' => null,
        'leftduringtimedsession' => null,
        'preventaccessreasons' => null,
        'reviewmode' => null,
        'warnings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'attemptscount' => false,
        'cangrade' => false,
        'canmanage' => false,
        'canviewreports' => false,
        'firstpageid' => false,
        'lastpageseen' => false,
        'leftduringtimedsession' => false,
        'preventaccessreasons' => false,
        'reviewmode' => false,
        'warnings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attemptscount' => 'attemptscount',
        'cangrade' => 'cangrade',
        'canmanage' => 'canmanage',
        'canviewreports' => 'canviewreports',
        'firstpageid' => 'firstpageid',
        'lastpageseen' => 'lastpageseen',
        'leftduringtimedsession' => 'leftduringtimedsession',
        'preventaccessreasons' => 'preventaccessreasons',
        'reviewmode' => 'reviewmode',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attemptscount' => 'setAttemptscount',
        'cangrade' => 'setCangrade',
        'canmanage' => 'setCanmanage',
        'canviewreports' => 'setCanviewreports',
        'firstpageid' => 'setFirstpageid',
        'lastpageseen' => 'setLastpageseen',
        'leftduringtimedsession' => 'setLeftduringtimedsession',
        'preventaccessreasons' => 'setPreventaccessreasons',
        'reviewmode' => 'setReviewmode',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attemptscount' => 'getAttemptscount',
        'cangrade' => 'getCangrade',
        'canmanage' => 'getCanmanage',
        'canviewreports' => 'getCanviewreports',
        'firstpageid' => 'getFirstpageid',
        'lastpageseen' => 'getLastpageseen',
        'leftduringtimedsession' => 'getLeftduringtimedsession',
        'preventaccessreasons' => 'getPreventaccessreasons',
        'reviewmode' => 'getReviewmode',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('attemptscount', $data ?? [], null);
        $this->setIfExists('cangrade', $data ?? [], null);
        $this->setIfExists('canmanage', $data ?? [], null);
        $this->setIfExists('canviewreports', $data ?? [], null);
        $this->setIfExists('firstpageid', $data ?? [], null);
        $this->setIfExists('lastpageseen', $data ?? [], null);
        $this->setIfExists('leftduringtimedsession', $data ?? [], null);
        $this->setIfExists('preventaccessreasons', $data ?? [], null);
        $this->setIfExists('reviewmode', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['attemptscount'] === null) {
            $invalidProperties[] = "'attemptscount' can't be null";
        }
        if ($this->container['cangrade'] === null) {
            $invalidProperties[] = "'cangrade' can't be null";
        }
        if ($this->container['canmanage'] === null) {
            $invalidProperties[] = "'canmanage' can't be null";
        }
        if ($this->container['canviewreports'] === null) {
            $invalidProperties[] = "'canviewreports' can't be null";
        }
        if ($this->container['firstpageid'] === null) {
            $invalidProperties[] = "'firstpageid' can't be null";
        }
        if ($this->container['lastpageseen'] === null) {
            $invalidProperties[] = "'lastpageseen' can't be null";
        }
        if ($this->container['leftduringtimedsession'] === null) {
            $invalidProperties[] = "'leftduringtimedsession' can't be null";
        }
        if ($this->container['preventaccessreasons'] === null) {
            $invalidProperties[] = "'preventaccessreasons' can't be null";
        }
        if ($this->container['reviewmode'] === null) {
            $invalidProperties[] = "'reviewmode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attemptscount
     *
     * @return int
     */
    public function getAttemptscount()
    {
        return $this->container['attemptscount'];
    }

    /**
     * Sets attemptscount
     *
     * @param int $attemptscount The number of attempts done by the user.
     *
     * @return self
     */
    public function setAttemptscount($attemptscount)
    {
        if (is_null($attemptscount)) {
            throw new \InvalidArgumentException('non-nullable attemptscount cannot be null');
        }
        $this->container['attemptscount'] = $attemptscount;

        return $this;
    }

    /**
     * Gets cangrade
     *
     * @return bool
     */
    public function getCangrade()
    {
        return $this->container['cangrade'];
    }

    /**
     * Sets cangrade
     *
     * @param bool $cangrade Whether the user can grade the lesson or not.
     *
     * @return self
     */
    public function setCangrade($cangrade)
    {
        if (is_null($cangrade)) {
            throw new \InvalidArgumentException('non-nullable cangrade cannot be null');
        }
        $this->container['cangrade'] = $cangrade;

        return $this;
    }

    /**
     * Gets canmanage
     *
     * @return bool
     */
    public function getCanmanage()
    {
        return $this->container['canmanage'];
    }

    /**
     * Sets canmanage
     *
     * @param bool $canmanage Whether the user can manage the lesson or not.
     *
     * @return self
     */
    public function setCanmanage($canmanage)
    {
        if (is_null($canmanage)) {
            throw new \InvalidArgumentException('non-nullable canmanage cannot be null');
        }
        $this->container['canmanage'] = $canmanage;

        return $this;
    }

    /**
     * Gets canviewreports
     *
     * @return bool
     */
    public function getCanviewreports()
    {
        return $this->container['canviewreports'];
    }

    /**
     * Sets canviewreports
     *
     * @param bool $canviewreports Whether the user can view the lesson reports or not.
     *
     * @return self
     */
    public function setCanviewreports($canviewreports)
    {
        if (is_null($canviewreports)) {
            throw new \InvalidArgumentException('non-nullable canviewreports cannot be null');
        }
        $this->container['canviewreports'] = $canviewreports;

        return $this;
    }

    /**
     * Gets firstpageid
     *
     * @return int
     */
    public function getFirstpageid()
    {
        return $this->container['firstpageid'];
    }

    /**
     * Sets firstpageid
     *
     * @param int $firstpageid The lesson first page id.
     *
     * @return self
     */
    public function setFirstpageid($firstpageid)
    {
        if (is_null($firstpageid)) {
            throw new \InvalidArgumentException('non-nullable firstpageid cannot be null');
        }
        $this->container['firstpageid'] = $firstpageid;

        return $this;
    }

    /**
     * Gets lastpageseen
     *
     * @return int
     */
    public function getLastpageseen()
    {
        return $this->container['lastpageseen'];
    }

    /**
     * Sets lastpageseen
     *
     * @param int $lastpageseen The last page seen id.
     *
     * @return self
     */
    public function setLastpageseen($lastpageseen)
    {
        if (is_null($lastpageseen)) {
            throw new \InvalidArgumentException('non-nullable lastpageseen cannot be null');
        }
        $this->container['lastpageseen'] = $lastpageseen;

        return $this;
    }

    /**
     * Gets leftduringtimedsession
     *
     * @return bool
     */
    public function getLeftduringtimedsession()
    {
        return $this->container['leftduringtimedsession'];
    }

    /**
     * Sets leftduringtimedsession
     *
     * @param bool $leftduringtimedsession Whether the user left during a timed session.
     *
     * @return self
     */
    public function setLeftduringtimedsession($leftduringtimedsession)
    {
        if (is_null($leftduringtimedsession)) {
            throw new \InvalidArgumentException('non-nullable leftduringtimedsession cannot be null');
        }
        $this->container['leftduringtimedsession'] = $leftduringtimedsession;

        return $this;
    }

    /**
     * Gets preventaccessreasons
     *
     * @return \OpenAPI\Client\Model\ModLessonGetLessonAccessInformation200ResponsePreventaccessreasonsInner[]
     */
    public function getPreventaccessreasons()
    {
        return $this->container['preventaccessreasons'];
    }

    /**
     * Sets preventaccessreasons
     *
     * @param \OpenAPI\Client\Model\ModLessonGetLessonAccessInformation200ResponsePreventaccessreasonsInner[] $preventaccessreasons preventaccessreasons
     *
     * @return self
     */
    public function setPreventaccessreasons($preventaccessreasons)
    {
        if (is_null($preventaccessreasons)) {
            throw new \InvalidArgumentException('non-nullable preventaccessreasons cannot be null');
        }
        $this->container['preventaccessreasons'] = $preventaccessreasons;

        return $this;
    }

    /**
     * Gets reviewmode
     *
     * @return bool
     */
    public function getReviewmode()
    {
        return $this->container['reviewmode'];
    }

    /**
     * Sets reviewmode
     *
     * @param bool $reviewmode Whether the lesson is in review mode for the current user.
     *
     * @return self
     */
    public function setReviewmode($reviewmode)
    {
        if (is_null($reviewmode)) {
            throw new \InvalidArgumentException('non-nullable reviewmode cannot be null');
        }
        $this->container['reviewmode'] = $reviewmode;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null $warnings warnings
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


