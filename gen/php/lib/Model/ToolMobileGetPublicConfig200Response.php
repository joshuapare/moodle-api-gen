<?php
/**
 * ToolMobileGetPublicConfig200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ToolMobileGetPublicConfig200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ToolMobileGetPublicConfig200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tool_mobile_get_public_config_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'agedigitalconsentverification' => 'bool',
        'authinstructions' => 'string',
        'authloginviaemail' => 'int',
        'authnoneenabled' => 'int',
        'autolang' => 'int',
        'compactlogourl' => 'string',
        'country' => 'string',
        'enablemobilewebservice' => 'int',
        'enablewebservices' => 'int',
        'forgottenpasswordurl' => 'string',
        'guestlogin' => 'int',
        'httpswwwroot' => 'string',
        'identityproviders' => '\OpenAPI\Client\Model\ToolMobileGetPublicConfig200ResponseIdentityprovidersInner[]',
        'lang' => 'string',
        'langlist' => 'string',
        'langmenu' => 'int',
        'launchurl' => 'string',
        'locale' => 'string',
        'logourl' => 'string',
        'maintenanceenabled' => 'int',
        'maintenancemessage' => 'string',
        'mobilecssurl' => 'string',
        'registerauth' => 'string',
        'rememberusername' => 'int',
        'sitename' => 'string',
        'supportavailability' => 'int',
        'supportemail' => 'string',
        'supportname' => 'string',
        'supportpage' => 'string',
        'tool_mobile_androidappid' => 'string',
        'tool_mobile_disabledfeatures' => 'string',
        'tool_mobile_iosappid' => 'string',
        'tool_mobile_minimumversion' => 'string',
        'tool_mobile_qrcodetype' => 'int',
        'tool_mobile_setuplink' => 'string',
        'typeoflogin' => 'int',
        'warnings' => '\OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]',
        'wwwroot' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'agedigitalconsentverification' => null,
        'authinstructions' => null,
        'authloginviaemail' => null,
        'authnoneenabled' => null,
        'autolang' => null,
        'compactlogourl' => null,
        'country' => null,
        'enablemobilewebservice' => null,
        'enablewebservices' => null,
        'forgottenpasswordurl' => null,
        'guestlogin' => null,
        'httpswwwroot' => null,
        'identityproviders' => null,
        'lang' => null,
        'langlist' => null,
        'langmenu' => null,
        'launchurl' => null,
        'locale' => null,
        'logourl' => null,
        'maintenanceenabled' => null,
        'maintenancemessage' => null,
        'mobilecssurl' => null,
        'registerauth' => null,
        'rememberusername' => null,
        'sitename' => null,
        'supportavailability' => null,
        'supportemail' => null,
        'supportname' => null,
        'supportpage' => null,
        'tool_mobile_androidappid' => null,
        'tool_mobile_disabledfeatures' => null,
        'tool_mobile_iosappid' => null,
        'tool_mobile_minimumversion' => null,
        'tool_mobile_qrcodetype' => null,
        'tool_mobile_setuplink' => null,
        'typeoflogin' => null,
        'warnings' => null,
        'wwwroot' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'agedigitalconsentverification' => false,
        'authinstructions' => false,
        'authloginviaemail' => false,
        'authnoneenabled' => false,
        'autolang' => false,
        'compactlogourl' => false,
        'country' => false,
        'enablemobilewebservice' => false,
        'enablewebservices' => false,
        'forgottenpasswordurl' => false,
        'guestlogin' => false,
        'httpswwwroot' => false,
        'identityproviders' => false,
        'lang' => false,
        'langlist' => false,
        'langmenu' => false,
        'launchurl' => false,
        'locale' => false,
        'logourl' => false,
        'maintenanceenabled' => false,
        'maintenancemessage' => false,
        'mobilecssurl' => false,
        'registerauth' => false,
        'rememberusername' => false,
        'sitename' => false,
        'supportavailability' => false,
        'supportemail' => false,
        'supportname' => false,
        'supportpage' => false,
        'tool_mobile_androidappid' => false,
        'tool_mobile_disabledfeatures' => false,
        'tool_mobile_iosappid' => false,
        'tool_mobile_minimumversion' => false,
        'tool_mobile_qrcodetype' => false,
        'tool_mobile_setuplink' => false,
        'typeoflogin' => false,
        'warnings' => false,
        'wwwroot' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agedigitalconsentverification' => 'agedigitalconsentverification',
        'authinstructions' => 'authinstructions',
        'authloginviaemail' => 'authloginviaemail',
        'authnoneenabled' => 'authnoneenabled',
        'autolang' => 'autolang',
        'compactlogourl' => 'compactlogourl',
        'country' => 'country',
        'enablemobilewebservice' => 'enablemobilewebservice',
        'enablewebservices' => 'enablewebservices',
        'forgottenpasswordurl' => 'forgottenpasswordurl',
        'guestlogin' => 'guestlogin',
        'httpswwwroot' => 'httpswwwroot',
        'identityproviders' => 'identityproviders',
        'lang' => 'lang',
        'langlist' => 'langlist',
        'langmenu' => 'langmenu',
        'launchurl' => 'launchurl',
        'locale' => 'locale',
        'logourl' => 'logourl',
        'maintenanceenabled' => 'maintenanceenabled',
        'maintenancemessage' => 'maintenancemessage',
        'mobilecssurl' => 'mobilecssurl',
        'registerauth' => 'registerauth',
        'rememberusername' => 'rememberusername',
        'sitename' => 'sitename',
        'supportavailability' => 'supportavailability',
        'supportemail' => 'supportemail',
        'supportname' => 'supportname',
        'supportpage' => 'supportpage',
        'tool_mobile_androidappid' => 'tool_mobile_androidappid',
        'tool_mobile_disabledfeatures' => 'tool_mobile_disabledfeatures',
        'tool_mobile_iosappid' => 'tool_mobile_iosappid',
        'tool_mobile_minimumversion' => 'tool_mobile_minimumversion',
        'tool_mobile_qrcodetype' => 'tool_mobile_qrcodetype',
        'tool_mobile_setuplink' => 'tool_mobile_setuplink',
        'typeoflogin' => 'typeoflogin',
        'warnings' => 'warnings',
        'wwwroot' => 'wwwroot'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agedigitalconsentverification' => 'setAgedigitalconsentverification',
        'authinstructions' => 'setAuthinstructions',
        'authloginviaemail' => 'setAuthloginviaemail',
        'authnoneenabled' => 'setAuthnoneenabled',
        'autolang' => 'setAutolang',
        'compactlogourl' => 'setCompactlogourl',
        'country' => 'setCountry',
        'enablemobilewebservice' => 'setEnablemobilewebservice',
        'enablewebservices' => 'setEnablewebservices',
        'forgottenpasswordurl' => 'setForgottenpasswordurl',
        'guestlogin' => 'setGuestlogin',
        'httpswwwroot' => 'setHttpswwwroot',
        'identityproviders' => 'setIdentityproviders',
        'lang' => 'setLang',
        'langlist' => 'setLanglist',
        'langmenu' => 'setLangmenu',
        'launchurl' => 'setLaunchurl',
        'locale' => 'setLocale',
        'logourl' => 'setLogourl',
        'maintenanceenabled' => 'setMaintenanceenabled',
        'maintenancemessage' => 'setMaintenancemessage',
        'mobilecssurl' => 'setMobilecssurl',
        'registerauth' => 'setRegisterauth',
        'rememberusername' => 'setRememberusername',
        'sitename' => 'setSitename',
        'supportavailability' => 'setSupportavailability',
        'supportemail' => 'setSupportemail',
        'supportname' => 'setSupportname',
        'supportpage' => 'setSupportpage',
        'tool_mobile_androidappid' => 'setToolMobileAndroidappid',
        'tool_mobile_disabledfeatures' => 'setToolMobileDisabledfeatures',
        'tool_mobile_iosappid' => 'setToolMobileIosappid',
        'tool_mobile_minimumversion' => 'setToolMobileMinimumversion',
        'tool_mobile_qrcodetype' => 'setToolMobileQrcodetype',
        'tool_mobile_setuplink' => 'setToolMobileSetuplink',
        'typeoflogin' => 'setTypeoflogin',
        'warnings' => 'setWarnings',
        'wwwroot' => 'setWwwroot'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agedigitalconsentverification' => 'getAgedigitalconsentverification',
        'authinstructions' => 'getAuthinstructions',
        'authloginviaemail' => 'getAuthloginviaemail',
        'authnoneenabled' => 'getAuthnoneenabled',
        'autolang' => 'getAutolang',
        'compactlogourl' => 'getCompactlogourl',
        'country' => 'getCountry',
        'enablemobilewebservice' => 'getEnablemobilewebservice',
        'enablewebservices' => 'getEnablewebservices',
        'forgottenpasswordurl' => 'getForgottenpasswordurl',
        'guestlogin' => 'getGuestlogin',
        'httpswwwroot' => 'getHttpswwwroot',
        'identityproviders' => 'getIdentityproviders',
        'lang' => 'getLang',
        'langlist' => 'getLanglist',
        'langmenu' => 'getLangmenu',
        'launchurl' => 'getLaunchurl',
        'locale' => 'getLocale',
        'logourl' => 'getLogourl',
        'maintenanceenabled' => 'getMaintenanceenabled',
        'maintenancemessage' => 'getMaintenancemessage',
        'mobilecssurl' => 'getMobilecssurl',
        'registerauth' => 'getRegisterauth',
        'rememberusername' => 'getRememberusername',
        'sitename' => 'getSitename',
        'supportavailability' => 'getSupportavailability',
        'supportemail' => 'getSupportemail',
        'supportname' => 'getSupportname',
        'supportpage' => 'getSupportpage',
        'tool_mobile_androidappid' => 'getToolMobileAndroidappid',
        'tool_mobile_disabledfeatures' => 'getToolMobileDisabledfeatures',
        'tool_mobile_iosappid' => 'getToolMobileIosappid',
        'tool_mobile_minimumversion' => 'getToolMobileMinimumversion',
        'tool_mobile_qrcodetype' => 'getToolMobileQrcodetype',
        'tool_mobile_setuplink' => 'getToolMobileSetuplink',
        'typeoflogin' => 'getTypeoflogin',
        'warnings' => 'getWarnings',
        'wwwroot' => 'getWwwroot'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('agedigitalconsentverification', $data ?? [], null);
        $this->setIfExists('authinstructions', $data ?? [], 'null');
        $this->setIfExists('authloginviaemail', $data ?? [], null);
        $this->setIfExists('authnoneenabled', $data ?? [], null);
        $this->setIfExists('autolang', $data ?? [], null);
        $this->setIfExists('compactlogourl', $data ?? [], 'null');
        $this->setIfExists('country', $data ?? [], 'null');
        $this->setIfExists('enablemobilewebservice', $data ?? [], null);
        $this->setIfExists('enablewebservices', $data ?? [], null);
        $this->setIfExists('forgottenpasswordurl', $data ?? [], 'null');
        $this->setIfExists('guestlogin', $data ?? [], null);
        $this->setIfExists('httpswwwroot', $data ?? [], 'null');
        $this->setIfExists('identityproviders', $data ?? [], null);
        $this->setIfExists('lang', $data ?? [], 'null');
        $this->setIfExists('langlist', $data ?? [], 'null');
        $this->setIfExists('langmenu', $data ?? [], null);
        $this->setIfExists('launchurl', $data ?? [], 'null');
        $this->setIfExists('locale', $data ?? [], 'null');
        $this->setIfExists('logourl', $data ?? [], 'null');
        $this->setIfExists('maintenanceenabled', $data ?? [], null);
        $this->setIfExists('maintenancemessage', $data ?? [], 'null');
        $this->setIfExists('mobilecssurl', $data ?? [], null);
        $this->setIfExists('registerauth', $data ?? [], 'null');
        $this->setIfExists('rememberusername', $data ?? [], null);
        $this->setIfExists('sitename', $data ?? [], 'null');
        $this->setIfExists('supportavailability', $data ?? [], null);
        $this->setIfExists('supportemail', $data ?? [], 'null');
        $this->setIfExists('supportname', $data ?? [], 'null');
        $this->setIfExists('supportpage', $data ?? [], 'null');
        $this->setIfExists('tool_mobile_androidappid', $data ?? [], 'null');
        $this->setIfExists('tool_mobile_disabledfeatures', $data ?? [], 'null');
        $this->setIfExists('tool_mobile_iosappid', $data ?? [], 'null');
        $this->setIfExists('tool_mobile_minimumversion', $data ?? [], 'null');
        $this->setIfExists('tool_mobile_qrcodetype', $data ?? [], null);
        $this->setIfExists('tool_mobile_setuplink', $data ?? [], 'null');
        $this->setIfExists('typeoflogin', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
        $this->setIfExists('wwwroot', $data ?? [], 'null');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['authinstructions'] === null) {
            $invalidProperties[] = "'authinstructions' can't be null";
        }
        if ($this->container['authloginviaemail'] === null) {
            $invalidProperties[] = "'authloginviaemail' can't be null";
        }
        if ($this->container['authnoneenabled'] === null) {
            $invalidProperties[] = "'authnoneenabled' can't be null";
        }
        if ($this->container['enablemobilewebservice'] === null) {
            $invalidProperties[] = "'enablemobilewebservice' can't be null";
        }
        if ($this->container['enablewebservices'] === null) {
            $invalidProperties[] = "'enablewebservices' can't be null";
        }
        if ($this->container['forgottenpasswordurl'] === null) {
            $invalidProperties[] = "'forgottenpasswordurl' can't be null";
        }
        if ($this->container['guestlogin'] === null) {
            $invalidProperties[] = "'guestlogin' can't be null";
        }
        if ($this->container['httpswwwroot'] === null) {
            $invalidProperties[] = "'httpswwwroot' can't be null";
        }
        if ($this->container['maintenanceenabled'] === null) {
            $invalidProperties[] = "'maintenanceenabled' can't be null";
        }
        if ($this->container['maintenancemessage'] === null) {
            $invalidProperties[] = "'maintenancemessage' can't be null";
        }
        if ($this->container['registerauth'] === null) {
            $invalidProperties[] = "'registerauth' can't be null";
        }
        if ($this->container['rememberusername'] === null) {
            $invalidProperties[] = "'rememberusername' can't be null";
        }
        if ($this->container['sitename'] === null) {
            $invalidProperties[] = "'sitename' can't be null";
        }
        if ($this->container['typeoflogin'] === null) {
            $invalidProperties[] = "'typeoflogin' can't be null";
        }
        if ($this->container['wwwroot'] === null) {
            $invalidProperties[] = "'wwwroot' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agedigitalconsentverification
     *
     * @return bool|null
     */
    public function getAgedigitalconsentverification()
    {
        return $this->container['agedigitalconsentverification'];
    }

    /**
     * Sets agedigitalconsentverification
     *
     * @param bool|null $agedigitalconsentverification Whether age digital consent verification                     is enabled.
     *
     * @return self
     */
    public function setAgedigitalconsentverification($agedigitalconsentverification)
    {
        if (is_null($agedigitalconsentverification)) {
            throw new \InvalidArgumentException('non-nullable agedigitalconsentverification cannot be null');
        }
        $this->container['agedigitalconsentverification'] = $agedigitalconsentverification;

        return $this;
    }

    /**
     * Gets authinstructions
     *
     * @return string
     */
    public function getAuthinstructions()
    {
        return $this->container['authinstructions'];
    }

    /**
     * Sets authinstructions
     *
     * @param string $authinstructions Authentication instructions.
     *
     * @return self
     */
    public function setAuthinstructions($authinstructions)
    {
        if (is_null($authinstructions)) {
            throw new \InvalidArgumentException('non-nullable authinstructions cannot be null');
        }
        $this->container['authinstructions'] = $authinstructions;

        return $this;
    }

    /**
     * Gets authloginviaemail
     *
     * @return int
     */
    public function getAuthloginviaemail()
    {
        return $this->container['authloginviaemail'];
    }

    /**
     * Sets authloginviaemail
     *
     * @param int $authloginviaemail Whether log in via email is enabled.
     *
     * @return self
     */
    public function setAuthloginviaemail($authloginviaemail)
    {
        if (is_null($authloginviaemail)) {
            throw new \InvalidArgumentException('non-nullable authloginviaemail cannot be null');
        }
        $this->container['authloginviaemail'] = $authloginviaemail;

        return $this;
    }

    /**
     * Gets authnoneenabled
     *
     * @return int
     */
    public function getAuthnoneenabled()
    {
        return $this->container['authnoneenabled'];
    }

    /**
     * Sets authnoneenabled
     *
     * @param int $authnoneenabled Whether auth none is enabled.
     *
     * @return self
     */
    public function setAuthnoneenabled($authnoneenabled)
    {
        if (is_null($authnoneenabled)) {
            throw new \InvalidArgumentException('non-nullable authnoneenabled cannot be null');
        }
        $this->container['authnoneenabled'] = $authnoneenabled;

        return $this;
    }

    /**
     * Gets autolang
     *
     * @return int|null
     */
    public function getAutolang()
    {
        return $this->container['autolang'];
    }

    /**
     * Sets autolang
     *
     * @param int|null $autolang Whether to detect default language                     from browser setting.
     *
     * @return self
     */
    public function setAutolang($autolang)
    {
        if (is_null($autolang)) {
            throw new \InvalidArgumentException('non-nullable autolang cannot be null');
        }
        $this->container['autolang'] = $autolang;

        return $this;
    }

    /**
     * Gets compactlogourl
     *
     * @return string|null
     */
    public function getCompactlogourl()
    {
        return $this->container['compactlogourl'];
    }

    /**
     * Sets compactlogourl
     *
     * @param string|null $compactlogourl The site compact logo URL
     *
     * @return self
     */
    public function setCompactlogourl($compactlogourl)
    {
        if (is_null($compactlogourl)) {
            throw new \InvalidArgumentException('non-nullable compactlogourl cannot be null');
        }
        $this->container['compactlogourl'] = $compactlogourl;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Default site country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets enablemobilewebservice
     *
     * @return int
     */
    public function getEnablemobilewebservice()
    {
        return $this->container['enablemobilewebservice'];
    }

    /**
     * Sets enablemobilewebservice
     *
     * @param int $enablemobilewebservice Whether the Mobile service is enabled.
     *
     * @return self
     */
    public function setEnablemobilewebservice($enablemobilewebservice)
    {
        if (is_null($enablemobilewebservice)) {
            throw new \InvalidArgumentException('non-nullable enablemobilewebservice cannot be null');
        }
        $this->container['enablemobilewebservice'] = $enablemobilewebservice;

        return $this;
    }

    /**
     * Gets enablewebservices
     *
     * @return int
     */
    public function getEnablewebservices()
    {
        return $this->container['enablewebservices'];
    }

    /**
     * Sets enablewebservices
     *
     * @param int $enablewebservices Whether Web Services are enabled.
     *
     * @return self
     */
    public function setEnablewebservices($enablewebservices)
    {
        if (is_null($enablewebservices)) {
            throw new \InvalidArgumentException('non-nullable enablewebservices cannot be null');
        }
        $this->container['enablewebservices'] = $enablewebservices;

        return $this;
    }

    /**
     * Gets forgottenpasswordurl
     *
     * @return string
     */
    public function getForgottenpasswordurl()
    {
        return $this->container['forgottenpasswordurl'];
    }

    /**
     * Sets forgottenpasswordurl
     *
     * @param string $forgottenpasswordurl Forgotten password URL.
     *
     * @return self
     */
    public function setForgottenpasswordurl($forgottenpasswordurl)
    {
        if (is_null($forgottenpasswordurl)) {
            throw new \InvalidArgumentException('non-nullable forgottenpasswordurl cannot be null');
        }
        $this->container['forgottenpasswordurl'] = $forgottenpasswordurl;

        return $this;
    }

    /**
     * Gets guestlogin
     *
     * @return int
     */
    public function getGuestlogin()
    {
        return $this->container['guestlogin'];
    }

    /**
     * Sets guestlogin
     *
     * @param int $guestlogin Whether guest login is enabled.
     *
     * @return self
     */
    public function setGuestlogin($guestlogin)
    {
        if (is_null($guestlogin)) {
            throw new \InvalidArgumentException('non-nullable guestlogin cannot be null');
        }
        $this->container['guestlogin'] = $guestlogin;

        return $this;
    }

    /**
     * Gets httpswwwroot
     *
     * @return string
     */
    public function getHttpswwwroot()
    {
        return $this->container['httpswwwroot'];
    }

    /**
     * Sets httpswwwroot
     *
     * @param string $httpswwwroot Site https URL (if httpslogin is enabled).
     *
     * @return self
     */
    public function setHttpswwwroot($httpswwwroot)
    {
        if (is_null($httpswwwroot)) {
            throw new \InvalidArgumentException('non-nullable httpswwwroot cannot be null');
        }
        $this->container['httpswwwroot'] = $httpswwwroot;

        return $this;
    }

    /**
     * Gets identityproviders
     *
     * @return \OpenAPI\Client\Model\ToolMobileGetPublicConfig200ResponseIdentityprovidersInner[]|null
     */
    public function getIdentityproviders()
    {
        return $this->container['identityproviders'];
    }

    /**
     * Sets identityproviders
     *
     * @param \OpenAPI\Client\Model\ToolMobileGetPublicConfig200ResponseIdentityprovidersInner[]|null $identityproviders identityproviders
     *
     * @return self
     */
    public function setIdentityproviders($identityproviders)
    {
        if (is_null($identityproviders)) {
            throw new \InvalidArgumentException('non-nullable identityproviders cannot be null');
        }
        $this->container['identityproviders'] = $identityproviders;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string|null
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string|null $lang Default language for the site.
     *
     * @return self
     */
    public function setLang($lang)
    {
        if (is_null($lang)) {
            throw new \InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets langlist
     *
     * @return string|null
     */
    public function getLanglist()
    {
        return $this->container['langlist'];
    }

    /**
     * Sets langlist
     *
     * @param string|null $langlist Languages on language menu.
     *
     * @return self
     */
    public function setLanglist($langlist)
    {
        if (is_null($langlist)) {
            throw new \InvalidArgumentException('non-nullable langlist cannot be null');
        }
        $this->container['langlist'] = $langlist;

        return $this;
    }

    /**
     * Gets langmenu
     *
     * @return int|null
     */
    public function getLangmenu()
    {
        return $this->container['langmenu'];
    }

    /**
     * Sets langmenu
     *
     * @param int|null $langmenu Whether the language menu should be displayed.
     *
     * @return self
     */
    public function setLangmenu($langmenu)
    {
        if (is_null($langmenu)) {
            throw new \InvalidArgumentException('non-nullable langmenu cannot be null');
        }
        $this->container['langmenu'] = $langmenu;

        return $this;
    }

    /**
     * Gets launchurl
     *
     * @return string|null
     */
    public function getLaunchurl()
    {
        return $this->container['launchurl'];
    }

    /**
     * Sets launchurl
     *
     * @param string|null $launchurl SSO login launch URL.
     *
     * @return self
     */
    public function setLaunchurl($launchurl)
    {
        if (is_null($launchurl)) {
            throw new \InvalidArgumentException('non-nullable launchurl cannot be null');
        }
        $this->container['launchurl'] = $launchurl;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale Sitewide locale.
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets logourl
     *
     * @return string|null
     */
    public function getLogourl()
    {
        return $this->container['logourl'];
    }

    /**
     * Sets logourl
     *
     * @param string|null $logourl The site logo URL
     *
     * @return self
     */
    public function setLogourl($logourl)
    {
        if (is_null($logourl)) {
            throw new \InvalidArgumentException('non-nullable logourl cannot be null');
        }
        $this->container['logourl'] = $logourl;

        return $this;
    }

    /**
     * Gets maintenanceenabled
     *
     * @return int
     */
    public function getMaintenanceenabled()
    {
        return $this->container['maintenanceenabled'];
    }

    /**
     * Sets maintenanceenabled
     *
     * @param int $maintenanceenabled Whether site maintenance is enabled.
     *
     * @return self
     */
    public function setMaintenanceenabled($maintenanceenabled)
    {
        if (is_null($maintenanceenabled)) {
            throw new \InvalidArgumentException('non-nullable maintenanceenabled cannot be null');
        }
        $this->container['maintenanceenabled'] = $maintenanceenabled;

        return $this;
    }

    /**
     * Gets maintenancemessage
     *
     * @return string
     */
    public function getMaintenancemessage()
    {
        return $this->container['maintenancemessage'];
    }

    /**
     * Sets maintenancemessage
     *
     * @param string $maintenancemessage Maintenance message.
     *
     * @return self
     */
    public function setMaintenancemessage($maintenancemessage)
    {
        if (is_null($maintenancemessage)) {
            throw new \InvalidArgumentException('non-nullable maintenancemessage cannot be null');
        }
        $this->container['maintenancemessage'] = $maintenancemessage;

        return $this;
    }

    /**
     * Gets mobilecssurl
     *
     * @return string|null
     */
    public function getMobilecssurl()
    {
        return $this->container['mobilecssurl'];
    }

    /**
     * Sets mobilecssurl
     *
     * @param string|null $mobilecssurl Mobile custom CSS theme
     *
     * @return self
     */
    public function setMobilecssurl($mobilecssurl)
    {
        if (is_null($mobilecssurl)) {
            throw new \InvalidArgumentException('non-nullable mobilecssurl cannot be null');
        }
        $this->container['mobilecssurl'] = $mobilecssurl;

        return $this;
    }

    /**
     * Gets registerauth
     *
     * @return string
     */
    public function getRegisterauth()
    {
        return $this->container['registerauth'];
    }

    /**
     * Sets registerauth
     *
     * @param string $registerauth Authentication method for user registration.
     *
     * @return self
     */
    public function setRegisterauth($registerauth)
    {
        if (is_null($registerauth)) {
            throw new \InvalidArgumentException('non-nullable registerauth cannot be null');
        }
        $this->container['registerauth'] = $registerauth;

        return $this;
    }

    /**
     * Gets rememberusername
     *
     * @return int
     */
    public function getRememberusername()
    {
        return $this->container['rememberusername'];
    }

    /**
     * Sets rememberusername
     *
     * @param int $rememberusername Values: 0 for No, 1 for Yes, 2 for optional.
     *
     * @return self
     */
    public function setRememberusername($rememberusername)
    {
        if (is_null($rememberusername)) {
            throw new \InvalidArgumentException('non-nullable rememberusername cannot be null');
        }
        $this->container['rememberusername'] = $rememberusername;

        return $this;
    }

    /**
     * Gets sitename
     *
     * @return string
     */
    public function getSitename()
    {
        return $this->container['sitename'];
    }

    /**
     * Sets sitename
     *
     * @param string $sitename Site name.
     *
     * @return self
     */
    public function setSitename($sitename)
    {
        if (is_null($sitename)) {
            throw new \InvalidArgumentException('non-nullable sitename cannot be null');
        }
        $this->container['sitename'] = $sitename;

        return $this;
    }

    /**
     * Gets supportavailability
     *
     * @return int|null
     */
    public function getSupportavailability()
    {
        return $this->container['supportavailability'];
    }

    /**
     * Sets supportavailability
     *
     * @param int|null $supportavailability Determines who has access to contact site support.
     *
     * @return self
     */
    public function setSupportavailability($supportavailability)
    {
        if (is_null($supportavailability)) {
            throw new \InvalidArgumentException('non-nullable supportavailability cannot be null');
        }
        $this->container['supportavailability'] = $supportavailability;

        return $this;
    }

    /**
     * Gets supportemail
     *
     * @return string|null
     */
    public function getSupportemail()
    {
        return $this->container['supportemail'];
    }

    /**
     * Sets supportemail
     *
     * @param string|null $supportemail Site support contact email                     (only if age verification is enabled).
     *
     * @return self
     */
    public function setSupportemail($supportemail)
    {
        if (is_null($supportemail)) {
            throw new \InvalidArgumentException('non-nullable supportemail cannot be null');
        }
        $this->container['supportemail'] = $supportemail;

        return $this;
    }

    /**
     * Gets supportname
     *
     * @return string|null
     */
    public function getSupportname()
    {
        return $this->container['supportname'];
    }

    /**
     * Sets supportname
     *
     * @param string|null $supportname Site support contact name                     (only if age verification is enabled).
     *
     * @return self
     */
    public function setSupportname($supportname)
    {
        if (is_null($supportname)) {
            throw new \InvalidArgumentException('non-nullable supportname cannot be null');
        }
        $this->container['supportname'] = $supportname;

        return $this;
    }

    /**
     * Gets supportpage
     *
     * @return string|null
     */
    public function getSupportpage()
    {
        return $this->container['supportpage'];
    }

    /**
     * Sets supportpage
     *
     * @param string|null $supportpage Site support page link.
     *
     * @return self
     */
    public function setSupportpage($supportpage)
    {
        if (is_null($supportpage)) {
            throw new \InvalidArgumentException('non-nullable supportpage cannot be null');
        }
        $this->container['supportpage'] = $supportpage;

        return $this;
    }

    /**
     * Gets tool_mobile_androidappid
     *
     * @return string|null
     */
    public function getToolMobileAndroidappid()
    {
        return $this->container['tool_mobile_androidappid'];
    }

    /**
     * Sets tool_mobile_androidappid
     *
     * @param string|null $tool_mobile_androidappid Android app's unique identifier.
     *
     * @return self
     */
    public function setToolMobileAndroidappid($tool_mobile_androidappid)
    {
        if (is_null($tool_mobile_androidappid)) {
            throw new \InvalidArgumentException('non-nullable tool_mobile_androidappid cannot be null');
        }
        $this->container['tool_mobile_androidappid'] = $tool_mobile_androidappid;

        return $this;
    }

    /**
     * Gets tool_mobile_disabledfeatures
     *
     * @return string|null
     */
    public function getToolMobileDisabledfeatures()
    {
        return $this->container['tool_mobile_disabledfeatures'];
    }

    /**
     * Sets tool_mobile_disabledfeatures
     *
     * @param string|null $tool_mobile_disabledfeatures Disabled features in the app
     *
     * @return self
     */
    public function setToolMobileDisabledfeatures($tool_mobile_disabledfeatures)
    {
        if (is_null($tool_mobile_disabledfeatures)) {
            throw new \InvalidArgumentException('non-nullable tool_mobile_disabledfeatures cannot be null');
        }
        $this->container['tool_mobile_disabledfeatures'] = $tool_mobile_disabledfeatures;

        return $this;
    }

    /**
     * Gets tool_mobile_iosappid
     *
     * @return string|null
     */
    public function getToolMobileIosappid()
    {
        return $this->container['tool_mobile_iosappid'];
    }

    /**
     * Sets tool_mobile_iosappid
     *
     * @param string|null $tool_mobile_iosappid iOS app's unique identifier.
     *
     * @return self
     */
    public function setToolMobileIosappid($tool_mobile_iosappid)
    {
        if (is_null($tool_mobile_iosappid)) {
            throw new \InvalidArgumentException('non-nullable tool_mobile_iosappid cannot be null');
        }
        $this->container['tool_mobile_iosappid'] = $tool_mobile_iosappid;

        return $this;
    }

    /**
     * Gets tool_mobile_minimumversion
     *
     * @return string|null
     */
    public function getToolMobileMinimumversion()
    {
        return $this->container['tool_mobile_minimumversion'];
    }

    /**
     * Sets tool_mobile_minimumversion
     *
     * @param string|null $tool_mobile_minimumversion Minimum required version to access.
     *
     * @return self
     */
    public function setToolMobileMinimumversion($tool_mobile_minimumversion)
    {
        if (is_null($tool_mobile_minimumversion)) {
            throw new \InvalidArgumentException('non-nullable tool_mobile_minimumversion cannot be null');
        }
        $this->container['tool_mobile_minimumversion'] = $tool_mobile_minimumversion;

        return $this;
    }

    /**
     * Gets tool_mobile_qrcodetype
     *
     * @return int|null
     */
    public function getToolMobileQrcodetype()
    {
        return $this->container['tool_mobile_qrcodetype'];
    }

    /**
     * Sets tool_mobile_qrcodetype
     *
     * @param int|null $tool_mobile_qrcodetype QR login configuration.
     *
     * @return self
     */
    public function setToolMobileQrcodetype($tool_mobile_qrcodetype)
    {
        if (is_null($tool_mobile_qrcodetype)) {
            throw new \InvalidArgumentException('non-nullable tool_mobile_qrcodetype cannot be null');
        }
        $this->container['tool_mobile_qrcodetype'] = $tool_mobile_qrcodetype;

        return $this;
    }

    /**
     * Gets tool_mobile_setuplink
     *
     * @return string|null
     */
    public function getToolMobileSetuplink()
    {
        return $this->container['tool_mobile_setuplink'];
    }

    /**
     * Sets tool_mobile_setuplink
     *
     * @param string|null $tool_mobile_setuplink App download page.
     *
     * @return self
     */
    public function setToolMobileSetuplink($tool_mobile_setuplink)
    {
        if (is_null($tool_mobile_setuplink)) {
            throw new \InvalidArgumentException('non-nullable tool_mobile_setuplink cannot be null');
        }
        $this->container['tool_mobile_setuplink'] = $tool_mobile_setuplink;

        return $this;
    }

    /**
     * Gets typeoflogin
     *
     * @return int
     */
    public function getTypeoflogin()
    {
        return $this->container['typeoflogin'];
    }

    /**
     * Sets typeoflogin
     *
     * @param int $typeoflogin The type of login. 1 for app, 2 for browser, 3 for embedded.
     *
     * @return self
     */
    public function setTypeoflogin($typeoflogin)
    {
        if (is_null($typeoflogin)) {
            throw new \InvalidArgumentException('non-nullable typeoflogin cannot be null');
        }
        $this->container['typeoflogin'] = $typeoflogin;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param \OpenAPI\Client\Model\AuthEmailSignupUser200ResponseWarningsInner[]|null $warnings warnings
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }

    /**
     * Gets wwwroot
     *
     * @return string
     */
    public function getWwwroot()
    {
        return $this->container['wwwroot'];
    }

    /**
     * Sets wwwroot
     *
     * @param string $wwwroot Site URL.
     *
     * @return self
     */
    public function setWwwroot($wwwroot)
    {
        if (is_null($wwwroot)) {
            throw new \InvalidArgumentException('non-nullable wwwroot cannot be null');
        }
        $this->container['wwwroot'] = $wwwroot;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


