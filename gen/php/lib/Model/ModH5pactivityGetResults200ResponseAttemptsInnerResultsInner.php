<?php
/**
 * ModH5pactivityGetResults200ResponseAttemptsInnerResultsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModH5pactivityGetResults200ResponseAttemptsInnerResultsInner Class Doc Comment
 *
 * @category Class
 * @description A single result statement tracking information
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModH5pactivityGetResults200ResponseAttemptsInnerResultsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_h5pactivity_get_results_200_response_attempts_inner_results_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'answerlabel' => 'string',
        'attemptid' => 'int',
        'completion' => 'int',
        'content' => 'string',
        'correctlabel' => 'string',
        'description' => 'string',
        'duration' => 'int',
        'id' => 'int',
        'interactiontype' => 'string',
        'maxscore' => 'int',
        'options' => '\OpenAPI\Client\Model\ModH5pactivityGetResults200ResponseAttemptsInnerResultsInnerOptionsInner[]',
        'optionslabel' => 'string',
        'rawscore' => 'int',
        'subcontent' => 'string',
        'success' => 'int',
        'timecreated' => 'int',
        'track' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'answerlabel' => null,
        'attemptid' => null,
        'completion' => null,
        'content' => null,
        'correctlabel' => null,
        'description' => null,
        'duration' => null,
        'id' => null,
        'interactiontype' => null,
        'maxscore' => null,
        'options' => null,
        'optionslabel' => null,
        'rawscore' => null,
        'subcontent' => null,
        'success' => null,
        'timecreated' => null,
        'track' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'answerlabel' => false,
        'attemptid' => false,
        'completion' => false,
        'content' => false,
        'correctlabel' => false,
        'description' => false,
        'duration' => false,
        'id' => false,
        'interactiontype' => false,
        'maxscore' => false,
        'options' => false,
        'optionslabel' => false,
        'rawscore' => false,
        'subcontent' => false,
        'success' => false,
        'timecreated' => false,
        'track' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'answerlabel' => 'answerlabel',
        'attemptid' => 'attemptid',
        'completion' => 'completion',
        'content' => 'content',
        'correctlabel' => 'correctlabel',
        'description' => 'description',
        'duration' => 'duration',
        'id' => 'id',
        'interactiontype' => 'interactiontype',
        'maxscore' => 'maxscore',
        'options' => 'options',
        'optionslabel' => 'optionslabel',
        'rawscore' => 'rawscore',
        'subcontent' => 'subcontent',
        'success' => 'success',
        'timecreated' => 'timecreated',
        'track' => 'track'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'answerlabel' => 'setAnswerlabel',
        'attemptid' => 'setAttemptid',
        'completion' => 'setCompletion',
        'content' => 'setContent',
        'correctlabel' => 'setCorrectlabel',
        'description' => 'setDescription',
        'duration' => 'setDuration',
        'id' => 'setId',
        'interactiontype' => 'setInteractiontype',
        'maxscore' => 'setMaxscore',
        'options' => 'setOptions',
        'optionslabel' => 'setOptionslabel',
        'rawscore' => 'setRawscore',
        'subcontent' => 'setSubcontent',
        'success' => 'setSuccess',
        'timecreated' => 'setTimecreated',
        'track' => 'setTrack'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'answerlabel' => 'getAnswerlabel',
        'attemptid' => 'getAttemptid',
        'completion' => 'getCompletion',
        'content' => 'getContent',
        'correctlabel' => 'getCorrectlabel',
        'description' => 'getDescription',
        'duration' => 'getDuration',
        'id' => 'getId',
        'interactiontype' => 'getInteractiontype',
        'maxscore' => 'getMaxscore',
        'options' => 'getOptions',
        'optionslabel' => 'getOptionslabel',
        'rawscore' => 'getRawscore',
        'subcontent' => 'getSubcontent',
        'success' => 'getSuccess',
        'timecreated' => 'getTimecreated',
        'track' => 'getTrack'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('answerlabel', $data ?? [], 'null');
        $this->setIfExists('attemptid', $data ?? [], null);
        $this->setIfExists('completion', $data ?? [], null);
        $this->setIfExists('content', $data ?? [], 'null');
        $this->setIfExists('correctlabel', $data ?? [], 'null');
        $this->setIfExists('description', $data ?? [], 'null');
        $this->setIfExists('duration', $data ?? [], 0);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('interactiontype', $data ?? [], 'null');
        $this->setIfExists('maxscore', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('optionslabel', $data ?? [], 'null');
        $this->setIfExists('rawscore', $data ?? [], null);
        $this->setIfExists('subcontent', $data ?? [], 'null');
        $this->setIfExists('success', $data ?? [], null);
        $this->setIfExists('timecreated', $data ?? [], null);
        $this->setIfExists('track', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets answerlabel
     *
     * @return string|null
     */
    public function getAnswerlabel()
    {
        return $this->container['answerlabel'];
    }

    /**
     * Sets answerlabel
     *
     * @param string|null $answerlabel Label used for user answers
     *
     * @return self
     */
    public function setAnswerlabel($answerlabel)
    {
        if (is_null($answerlabel)) {
            throw new \InvalidArgumentException('non-nullable answerlabel cannot be null');
        }
        $this->container['answerlabel'] = $answerlabel;

        return $this;
    }

    /**
     * Gets attemptid
     *
     * @return int|null
     */
    public function getAttemptid()
    {
        return $this->container['attemptid'];
    }

    /**
     * Sets attemptid
     *
     * @param int|null $attemptid ID of the H5P attempt
     *
     * @return self
     */
    public function setAttemptid($attemptid)
    {
        if (is_null($attemptid)) {
            throw new \InvalidArgumentException('non-nullable attemptid cannot be null');
        }
        $this->container['attemptid'] = $attemptid;

        return $this;
    }

    /**
     * Gets completion
     *
     * @return int|null
     */
    public function getCompletion()
    {
        return $this->container['completion'];
    }

    /**
     * Sets completion
     *
     * @param int|null $completion Result completion
     *
     * @return self
     */
    public function setCompletion($completion)
    {
        if (is_null($completion)) {
            throw new \InvalidArgumentException('non-nullable completion cannot be null');
        }
        $this->container['completion'] = $completion;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content Result extra content
     *
     * @return self
     */
    public function setContent($content)
    {
        if (is_null($content)) {
            throw new \InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets correctlabel
     *
     * @return string|null
     */
    public function getCorrectlabel()
    {
        return $this->container['correctlabel'];
    }

    /**
     * Sets correctlabel
     *
     * @param string|null $correctlabel Label used for correct answers
     *
     * @return self
     */
    public function setCorrectlabel($correctlabel)
    {
        if (is_null($correctlabel)) {
            throw new \InvalidArgumentException('non-nullable correctlabel cannot be null');
        }
        $this->container['correctlabel'] = $correctlabel;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Result description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration Result duration in seconds
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID of the context
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets interactiontype
     *
     * @return string|null
     */
    public function getInteractiontype()
    {
        return $this->container['interactiontype'];
    }

    /**
     * Sets interactiontype
     *
     * @param string|null $interactiontype Interaction type
     *
     * @return self
     */
    public function setInteractiontype($interactiontype)
    {
        if (is_null($interactiontype)) {
            throw new \InvalidArgumentException('non-nullable interactiontype cannot be null');
        }
        $this->container['interactiontype'] = $interactiontype;

        return $this;
    }

    /**
     * Gets maxscore
     *
     * @return int|null
     */
    public function getMaxscore()
    {
        return $this->container['maxscore'];
    }

    /**
     * Sets maxscore
     *
     * @param int|null $maxscore Result max score
     *
     * @return self
     */
    public function setMaxscore($maxscore)
    {
        if (is_null($maxscore)) {
            throw new \InvalidArgumentException('non-nullable maxscore cannot be null');
        }
        $this->container['maxscore'] = $maxscore;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \OpenAPI\Client\Model\ModH5pactivityGetResults200ResponseAttemptsInnerResultsInnerOptionsInner[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \OpenAPI\Client\Model\ModH5pactivityGetResults200ResponseAttemptsInnerResultsInnerOptionsInner[]|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets optionslabel
     *
     * @return string|null
     */
    public function getOptionslabel()
    {
        return $this->container['optionslabel'];
    }

    /**
     * Sets optionslabel
     *
     * @param string|null $optionslabel Label used for result options
     *
     * @return self
     */
    public function setOptionslabel($optionslabel)
    {
        if (is_null($optionslabel)) {
            throw new \InvalidArgumentException('non-nullable optionslabel cannot be null');
        }
        $this->container['optionslabel'] = $optionslabel;

        return $this;
    }

    /**
     * Gets rawscore
     *
     * @return int|null
     */
    public function getRawscore()
    {
        return $this->container['rawscore'];
    }

    /**
     * Sets rawscore
     *
     * @param int|null $rawscore Result score value
     *
     * @return self
     */
    public function setRawscore($rawscore)
    {
        if (is_null($rawscore)) {
            throw new \InvalidArgumentException('non-nullable rawscore cannot be null');
        }
        $this->container['rawscore'] = $rawscore;

        return $this;
    }

    /**
     * Gets subcontent
     *
     * @return string|null
     */
    public function getSubcontent()
    {
        return $this->container['subcontent'];
    }

    /**
     * Sets subcontent
     *
     * @param string|null $subcontent Subcontent identifier
     *
     * @return self
     */
    public function setSubcontent($subcontent)
    {
        if (is_null($subcontent)) {
            throw new \InvalidArgumentException('non-nullable subcontent cannot be null');
        }
        $this->container['subcontent'] = $subcontent;

        return $this;
    }

    /**
     * Gets success
     *
     * @return int|null
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param int|null $success Result success
     *
     * @return self
     */
    public function setSuccess($success)
    {
        if (is_null($success)) {
            throw new \InvalidArgumentException('non-nullable success cannot be null');
        }
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets timecreated
     *
     * @return int|null
     */
    public function getTimecreated()
    {
        return $this->container['timecreated'];
    }

    /**
     * Sets timecreated
     *
     * @param int|null $timecreated Result creation
     *
     * @return self
     */
    public function setTimecreated($timecreated)
    {
        if (is_null($timecreated)) {
            throw new \InvalidArgumentException('non-nullable timecreated cannot be null');
        }
        $this->container['timecreated'] = $timecreated;

        return $this;
    }

    /**
     * Gets track
     *
     * @return bool|null
     */
    public function getTrack()
    {
        return $this->container['track'];
    }

    /**
     * Sets track
     *
     * @param bool|null $track If the result has valid track information
     *
     * @return self
     */
    public function setTrack($track)
    {
        if (is_null($track)) {
            throw new \InvalidArgumentException('non-nullable track cannot be null');
        }
        $this->container['track'] = $track;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


