<?php
/**
 * ModLessonGetLesson200ResponseLesson
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModLessonGetLesson200ResponseLesson Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModLessonGetLesson200ResponseLesson implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_lesson_get_lesson_200_response_lesson';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activitylink' => 'int',
        'allowofflineattempts' => 'bool',
        'available' => 'int',
        'bgcolor' => 'string',
        'completionendreached' => 'int',
        'completiontimespent' => 'int',
        'conditions' => 'string',
        'course' => 'int',
        'coursemodule' => 'int',
        'custom' => 'bool',
        'deadline' => 'int',
        'dependency' => 'int',
        'displayleft' => 'bool',
        'displayleftif' => 'int',
        'feedback' => 'bool',
        'grade' => 'int',
        'height' => 'int',
        'id' => 'int',
        'intro' => 'string',
        'introfiles' => '\OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]',
        'introformat' => 'int',
        'lang' => 'string',
        'maxanswers' => 'int',
        'maxattempts' => 'int',
        'maxpages' => 'int',
        'mediaclose' => 'int',
        'mediafile' => 'string',
        'mediafiles' => '\OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]',
        'mediaheight' => 'int',
        'mediawidth' => 'int',
        'minquestions' => 'int',
        'modattempts' => 'bool',
        'name' => 'string',
        'nextpagedefault' => 'int',
        'ongoing' => 'bool',
        'password' => 'string',
        'practice' => 'bool',
        'progressbar' => 'bool',
        'retake' => 'bool',
        'review' => 'bool',
        'slideshow' => 'bool',
        'timelimit' => 'int',
        'timemodified' => 'int',
        'usemaxgrade' => 'int',
        'usepassword' => 'bool',
        'width' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'activitylink' => null,
        'allowofflineattempts' => null,
        'available' => null,
        'bgcolor' => null,
        'completionendreached' => null,
        'completiontimespent' => null,
        'conditions' => null,
        'course' => null,
        'coursemodule' => null,
        'custom' => null,
        'deadline' => null,
        'dependency' => null,
        'displayleft' => null,
        'displayleftif' => null,
        'feedback' => null,
        'grade' => null,
        'height' => null,
        'id' => null,
        'intro' => null,
        'introfiles' => null,
        'introformat' => null,
        'lang' => null,
        'maxanswers' => null,
        'maxattempts' => null,
        'maxpages' => null,
        'mediaclose' => null,
        'mediafile' => null,
        'mediafiles' => null,
        'mediaheight' => null,
        'mediawidth' => null,
        'minquestions' => null,
        'modattempts' => null,
        'name' => null,
        'nextpagedefault' => null,
        'ongoing' => null,
        'password' => null,
        'practice' => null,
        'progressbar' => null,
        'retake' => null,
        'review' => null,
        'slideshow' => null,
        'timelimit' => null,
        'timemodified' => null,
        'usemaxgrade' => null,
        'usepassword' => null,
        'width' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'activitylink' => false,
        'allowofflineattempts' => false,
        'available' => false,
        'bgcolor' => false,
        'completionendreached' => false,
        'completiontimespent' => false,
        'conditions' => false,
        'course' => false,
        'coursemodule' => false,
        'custom' => false,
        'deadline' => false,
        'dependency' => false,
        'displayleft' => false,
        'displayleftif' => false,
        'feedback' => false,
        'grade' => false,
        'height' => false,
        'id' => false,
        'intro' => false,
        'introfiles' => false,
        'introformat' => false,
        'lang' => false,
        'maxanswers' => false,
        'maxattempts' => false,
        'maxpages' => false,
        'mediaclose' => false,
        'mediafile' => false,
        'mediafiles' => false,
        'mediaheight' => false,
        'mediawidth' => false,
        'minquestions' => false,
        'modattempts' => false,
        'name' => false,
        'nextpagedefault' => false,
        'ongoing' => false,
        'password' => false,
        'practice' => false,
        'progressbar' => false,
        'retake' => false,
        'review' => false,
        'slideshow' => false,
        'timelimit' => false,
        'timemodified' => false,
        'usemaxgrade' => false,
        'usepassword' => false,
        'width' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activitylink' => 'activitylink',
        'allowofflineattempts' => 'allowofflineattempts',
        'available' => 'available',
        'bgcolor' => 'bgcolor',
        'completionendreached' => 'completionendreached',
        'completiontimespent' => 'completiontimespent',
        'conditions' => 'conditions',
        'course' => 'course',
        'coursemodule' => 'coursemodule',
        'custom' => 'custom',
        'deadline' => 'deadline',
        'dependency' => 'dependency',
        'displayleft' => 'displayleft',
        'displayleftif' => 'displayleftif',
        'feedback' => 'feedback',
        'grade' => 'grade',
        'height' => 'height',
        'id' => 'id',
        'intro' => 'intro',
        'introfiles' => 'introfiles',
        'introformat' => 'introformat',
        'lang' => 'lang',
        'maxanswers' => 'maxanswers',
        'maxattempts' => 'maxattempts',
        'maxpages' => 'maxpages',
        'mediaclose' => 'mediaclose',
        'mediafile' => 'mediafile',
        'mediafiles' => 'mediafiles',
        'mediaheight' => 'mediaheight',
        'mediawidth' => 'mediawidth',
        'minquestions' => 'minquestions',
        'modattempts' => 'modattempts',
        'name' => 'name',
        'nextpagedefault' => 'nextpagedefault',
        'ongoing' => 'ongoing',
        'password' => 'password',
        'practice' => 'practice',
        'progressbar' => 'progressbar',
        'retake' => 'retake',
        'review' => 'review',
        'slideshow' => 'slideshow',
        'timelimit' => 'timelimit',
        'timemodified' => 'timemodified',
        'usemaxgrade' => 'usemaxgrade',
        'usepassword' => 'usepassword',
        'width' => 'width'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activitylink' => 'setActivitylink',
        'allowofflineattempts' => 'setAllowofflineattempts',
        'available' => 'setAvailable',
        'bgcolor' => 'setBgcolor',
        'completionendreached' => 'setCompletionendreached',
        'completiontimespent' => 'setCompletiontimespent',
        'conditions' => 'setConditions',
        'course' => 'setCourse',
        'coursemodule' => 'setCoursemodule',
        'custom' => 'setCustom',
        'deadline' => 'setDeadline',
        'dependency' => 'setDependency',
        'displayleft' => 'setDisplayleft',
        'displayleftif' => 'setDisplayleftif',
        'feedback' => 'setFeedback',
        'grade' => 'setGrade',
        'height' => 'setHeight',
        'id' => 'setId',
        'intro' => 'setIntro',
        'introfiles' => 'setIntrofiles',
        'introformat' => 'setIntroformat',
        'lang' => 'setLang',
        'maxanswers' => 'setMaxanswers',
        'maxattempts' => 'setMaxattempts',
        'maxpages' => 'setMaxpages',
        'mediaclose' => 'setMediaclose',
        'mediafile' => 'setMediafile',
        'mediafiles' => 'setMediafiles',
        'mediaheight' => 'setMediaheight',
        'mediawidth' => 'setMediawidth',
        'minquestions' => 'setMinquestions',
        'modattempts' => 'setModattempts',
        'name' => 'setName',
        'nextpagedefault' => 'setNextpagedefault',
        'ongoing' => 'setOngoing',
        'password' => 'setPassword',
        'practice' => 'setPractice',
        'progressbar' => 'setProgressbar',
        'retake' => 'setRetake',
        'review' => 'setReview',
        'slideshow' => 'setSlideshow',
        'timelimit' => 'setTimelimit',
        'timemodified' => 'setTimemodified',
        'usemaxgrade' => 'setUsemaxgrade',
        'usepassword' => 'setUsepassword',
        'width' => 'setWidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activitylink' => 'getActivitylink',
        'allowofflineattempts' => 'getAllowofflineattempts',
        'available' => 'getAvailable',
        'bgcolor' => 'getBgcolor',
        'completionendreached' => 'getCompletionendreached',
        'completiontimespent' => 'getCompletiontimespent',
        'conditions' => 'getConditions',
        'course' => 'getCourse',
        'coursemodule' => 'getCoursemodule',
        'custom' => 'getCustom',
        'deadline' => 'getDeadline',
        'dependency' => 'getDependency',
        'displayleft' => 'getDisplayleft',
        'displayleftif' => 'getDisplayleftif',
        'feedback' => 'getFeedback',
        'grade' => 'getGrade',
        'height' => 'getHeight',
        'id' => 'getId',
        'intro' => 'getIntro',
        'introfiles' => 'getIntrofiles',
        'introformat' => 'getIntroformat',
        'lang' => 'getLang',
        'maxanswers' => 'getMaxanswers',
        'maxattempts' => 'getMaxattempts',
        'maxpages' => 'getMaxpages',
        'mediaclose' => 'getMediaclose',
        'mediafile' => 'getMediafile',
        'mediafiles' => 'getMediafiles',
        'mediaheight' => 'getMediaheight',
        'mediawidth' => 'getMediawidth',
        'minquestions' => 'getMinquestions',
        'modattempts' => 'getModattempts',
        'name' => 'getName',
        'nextpagedefault' => 'getNextpagedefault',
        'ongoing' => 'getOngoing',
        'password' => 'getPassword',
        'practice' => 'getPractice',
        'progressbar' => 'getProgressbar',
        'retake' => 'getRetake',
        'review' => 'getReview',
        'slideshow' => 'getSlideshow',
        'timelimit' => 'getTimelimit',
        'timemodified' => 'getTimemodified',
        'usemaxgrade' => 'getUsemaxgrade',
        'usepassword' => 'getUsepassword',
        'width' => 'getWidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('activitylink', $data ?? [], null);
        $this->setIfExists('allowofflineattempts', $data ?? [], null);
        $this->setIfExists('available', $data ?? [], null);
        $this->setIfExists('bgcolor', $data ?? [], 'null');
        $this->setIfExists('completionendreached', $data ?? [], null);
        $this->setIfExists('completiontimespent', $data ?? [], null);
        $this->setIfExists('conditions', $data ?? [], 'null');
        $this->setIfExists('course', $data ?? [], null);
        $this->setIfExists('coursemodule', $data ?? [], null);
        $this->setIfExists('custom', $data ?? [], null);
        $this->setIfExists('deadline', $data ?? [], null);
        $this->setIfExists('dependency', $data ?? [], null);
        $this->setIfExists('displayleft', $data ?? [], null);
        $this->setIfExists('displayleftif', $data ?? [], null);
        $this->setIfExists('feedback', $data ?? [], null);
        $this->setIfExists('grade', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('intro', $data ?? [], 'null');
        $this->setIfExists('introfiles', $data ?? [], null);
        $this->setIfExists('introformat', $data ?? [], 0);
        $this->setIfExists('lang', $data ?? [], null);
        $this->setIfExists('maxanswers', $data ?? [], null);
        $this->setIfExists('maxattempts', $data ?? [], null);
        $this->setIfExists('maxpages', $data ?? [], null);
        $this->setIfExists('mediaclose', $data ?? [], null);
        $this->setIfExists('mediafile', $data ?? [], 'null');
        $this->setIfExists('mediafiles', $data ?? [], null);
        $this->setIfExists('mediaheight', $data ?? [], null);
        $this->setIfExists('mediawidth', $data ?? [], null);
        $this->setIfExists('minquestions', $data ?? [], null);
        $this->setIfExists('modattempts', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], 'null');
        $this->setIfExists('nextpagedefault', $data ?? [], null);
        $this->setIfExists('ongoing', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], 'null');
        $this->setIfExists('practice', $data ?? [], null);
        $this->setIfExists('progressbar', $data ?? [], null);
        $this->setIfExists('retake', $data ?? [], null);
        $this->setIfExists('review', $data ?? [], null);
        $this->setIfExists('slideshow', $data ?? [], null);
        $this->setIfExists('timelimit', $data ?? [], null);
        $this->setIfExists('timemodified', $data ?? [], null);
        $this->setIfExists('usemaxgrade', $data ?? [], null);
        $this->setIfExists('usepassword', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['allowofflineattempts'] === null) {
            $invalidProperties[] = "'allowofflineattempts' can't be null";
        }
        if ($this->container['course'] === null) {
            $invalidProperties[] = "'course' can't be null";
        }
        if ($this->container['coursemodule'] === null) {
            $invalidProperties[] = "'coursemodule' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['lang'] === null) {
            $invalidProperties[] = "'lang' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activitylink
     *
     * @return int|null
     */
    public function getActivitylink()
    {
        return $this->container['activitylink'];
    }

    /**
     * Sets activitylink
     *
     * @param int|null $activitylink Id of the next activity to be linked once the lesson is completed
     *
     * @return self
     */
    public function setActivitylink($activitylink)
    {
        if (is_null($activitylink)) {
            throw new \InvalidArgumentException('non-nullable activitylink cannot be null');
        }
        $this->container['activitylink'] = $activitylink;

        return $this;
    }

    /**
     * Gets allowofflineattempts
     *
     * @return bool
     */
    public function getAllowofflineattempts()
    {
        return $this->container['allowofflineattempts'];
    }

    /**
     * Sets allowofflineattempts
     *
     * @param bool $allowofflineattempts Whether to allow the lesson to be attempted offline in the mobile app
     *
     * @return self
     */
    public function setAllowofflineattempts($allowofflineattempts)
    {
        if (is_null($allowofflineattempts)) {
            throw new \InvalidArgumentException('non-nullable allowofflineattempts cannot be null');
        }
        $this->container['allowofflineattempts'] = $allowofflineattempts;

        return $this;
    }

    /**
     * Gets available
     *
     * @return int|null
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param int|null $available Available from
     *
     * @return self
     */
    public function setAvailable($available)
    {
        if (is_null($available)) {
            throw new \InvalidArgumentException('non-nullable available cannot be null');
        }
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets bgcolor
     *
     * @return string|null
     */
    public function getBgcolor()
    {
        return $this->container['bgcolor'];
    }

    /**
     * Sets bgcolor
     *
     * @param string|null $bgcolor Slideshow bgcolor
     *
     * @return self
     */
    public function setBgcolor($bgcolor)
    {
        if (is_null($bgcolor)) {
            throw new \InvalidArgumentException('non-nullable bgcolor cannot be null');
        }
        $this->container['bgcolor'] = $bgcolor;

        return $this;
    }

    /**
     * Gets completionendreached
     *
     * @return int|null
     */
    public function getCompletionendreached()
    {
        return $this->container['completionendreached'];
    }

    /**
     * Sets completionendreached
     *
     * @param int|null $completionendreached Require end reached for completion?
     *
     * @return self
     */
    public function setCompletionendreached($completionendreached)
    {
        if (is_null($completionendreached)) {
            throw new \InvalidArgumentException('non-nullable completionendreached cannot be null');
        }
        $this->container['completionendreached'] = $completionendreached;

        return $this;
    }

    /**
     * Gets completiontimespent
     *
     * @return int|null
     */
    public function getCompletiontimespent()
    {
        return $this->container['completiontimespent'];
    }

    /**
     * Sets completiontimespent
     *
     * @param int|null $completiontimespent Student must do this activity at least for
     *
     * @return self
     */
    public function setCompletiontimespent($completiontimespent)
    {
        if (is_null($completiontimespent)) {
            throw new \InvalidArgumentException('non-nullable completiontimespent cannot be null');
        }
        $this->container['completiontimespent'] = $completiontimespent;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return string|null
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param string|null $conditions Conditions to enable the lesson
     *
     * @return self
     */
    public function setConditions($conditions)
    {
        if (is_null($conditions)) {
            throw new \InvalidArgumentException('non-nullable conditions cannot be null');
        }
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets course
     *
     * @return int
     */
    public function getCourse()
    {
        return $this->container['course'];
    }

    /**
     * Sets course
     *
     * @param int $course Foreign key reference to the course this lesson is part of.
     *
     * @return self
     */
    public function setCourse($course)
    {
        if (is_null($course)) {
            throw new \InvalidArgumentException('non-nullable course cannot be null');
        }
        $this->container['course'] = $course;

        return $this;
    }

    /**
     * Gets coursemodule
     *
     * @return int
     */
    public function getCoursemodule()
    {
        return $this->container['coursemodule'];
    }

    /**
     * Sets coursemodule
     *
     * @param int $coursemodule Course module id.
     *
     * @return self
     */
    public function setCoursemodule($coursemodule)
    {
        if (is_null($coursemodule)) {
            throw new \InvalidArgumentException('non-nullable coursemodule cannot be null');
        }
        $this->container['coursemodule'] = $coursemodule;

        return $this;
    }

    /**
     * Gets custom
     *
     * @return bool|null
     */
    public function getCustom()
    {
        return $this->container['custom'];
    }

    /**
     * Sets custom
     *
     * @param bool|null $custom Custom scoring?
     *
     * @return self
     */
    public function setCustom($custom)
    {
        if (is_null($custom)) {
            throw new \InvalidArgumentException('non-nullable custom cannot be null');
        }
        $this->container['custom'] = $custom;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return int|null
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param int|null $deadline Available until
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        if (is_null($deadline)) {
            throw new \InvalidArgumentException('non-nullable deadline cannot be null');
        }
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets dependency
     *
     * @return int|null
     */
    public function getDependency()
    {
        return $this->container['dependency'];
    }

    /**
     * Sets dependency
     *
     * @param int|null $dependency Dependent on (another lesson id)
     *
     * @return self
     */
    public function setDependency($dependency)
    {
        if (is_null($dependency)) {
            throw new \InvalidArgumentException('non-nullable dependency cannot be null');
        }
        $this->container['dependency'] = $dependency;

        return $this;
    }

    /**
     * Gets displayleft
     *
     * @return bool|null
     */
    public function getDisplayleft()
    {
        return $this->container['displayleft'];
    }

    /**
     * Sets displayleft
     *
     * @param bool|null $displayleft Display left pages menu?
     *
     * @return self
     */
    public function setDisplayleft($displayleft)
    {
        if (is_null($displayleft)) {
            throw new \InvalidArgumentException('non-nullable displayleft cannot be null');
        }
        $this->container['displayleft'] = $displayleft;

        return $this;
    }

    /**
     * Gets displayleftif
     *
     * @return int|null
     */
    public function getDisplayleftif()
    {
        return $this->container['displayleftif'];
    }

    /**
     * Sets displayleftif
     *
     * @param int|null $displayleftif Minimum grade to display menu
     *
     * @return self
     */
    public function setDisplayleftif($displayleftif)
    {
        if (is_null($displayleftif)) {
            throw new \InvalidArgumentException('non-nullable displayleftif cannot be null');
        }
        $this->container['displayleftif'] = $displayleftif;

        return $this;
    }

    /**
     * Gets feedback
     *
     * @return bool|null
     */
    public function getFeedback()
    {
        return $this->container['feedback'];
    }

    /**
     * Sets feedback
     *
     * @param bool|null $feedback Display default feedback
     *
     * @return self
     */
    public function setFeedback($feedback)
    {
        if (is_null($feedback)) {
            throw new \InvalidArgumentException('non-nullable feedback cannot be null');
        }
        $this->container['feedback'] = $feedback;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return int|null
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param int|null $grade The total that the grade is scaled to be out of
     *
     * @return self
     */
    public function setGrade($grade)
    {
        if (is_null($grade)) {
            throw new \InvalidArgumentException('non-nullable grade cannot be null');
        }
        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height Slideshow height
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Standard Moodle primary key.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets intro
     *
     * @return string|null
     */
    public function getIntro()
    {
        return $this->container['intro'];
    }

    /**
     * Sets intro
     *
     * @param string|null $intro Lesson introduction text.
     *
     * @return self
     */
    public function setIntro($intro)
    {
        if (is_null($intro)) {
            throw new \InvalidArgumentException('non-nullable intro cannot be null');
        }
        $this->container['intro'] = $intro;

        return $this;
    }

    /**
     * Gets introfiles
     *
     * @return \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null
     */
    public function getIntrofiles()
    {
        return $this->container['introfiles'];
    }

    /**
     * Sets introfiles
     *
     * @param \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null $introfiles introfiles
     *
     * @return self
     */
    public function setIntrofiles($introfiles)
    {
        if (is_null($introfiles)) {
            throw new \InvalidArgumentException('non-nullable introfiles cannot be null');
        }
        $this->container['introfiles'] = $introfiles;

        return $this;
    }

    /**
     * Gets introformat
     *
     * @return int|null
     */
    public function getIntroformat()
    {
        return $this->container['introformat'];
    }

    /**
     * Sets introformat
     *
     * @param int|null $introformat intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
     *
     * @return self
     */
    public function setIntroformat($introformat)
    {
        if (is_null($introformat)) {
            throw new \InvalidArgumentException('non-nullable introformat cannot be null');
        }
        $this->container['introformat'] = $introformat;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return string
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param string $lang Forced activity language
     *
     * @return self
     */
    public function setLang($lang)
    {
        if (is_null($lang)) {
            throw new \InvalidArgumentException('non-nullable lang cannot be null');
        }
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets maxanswers
     *
     * @return int|null
     */
    public function getMaxanswers()
    {
        return $this->container['maxanswers'];
    }

    /**
     * Sets maxanswers
     *
     * @param int|null $maxanswers Maximum answers per page
     *
     * @return self
     */
    public function setMaxanswers($maxanswers)
    {
        if (is_null($maxanswers)) {
            throw new \InvalidArgumentException('non-nullable maxanswers cannot be null');
        }
        $this->container['maxanswers'] = $maxanswers;

        return $this;
    }

    /**
     * Gets maxattempts
     *
     * @return int|null
     */
    public function getMaxattempts()
    {
        return $this->container['maxattempts'];
    }

    /**
     * Sets maxattempts
     *
     * @param int|null $maxattempts Maximum attempts
     *
     * @return self
     */
    public function setMaxattempts($maxattempts)
    {
        if (is_null($maxattempts)) {
            throw new \InvalidArgumentException('non-nullable maxattempts cannot be null');
        }
        $this->container['maxattempts'] = $maxattempts;

        return $this;
    }

    /**
     * Gets maxpages
     *
     * @return int|null
     */
    public function getMaxpages()
    {
        return $this->container['maxpages'];
    }

    /**
     * Sets maxpages
     *
     * @param int|null $maxpages Number of pages to show
     *
     * @return self
     */
    public function setMaxpages($maxpages)
    {
        if (is_null($maxpages)) {
            throw new \InvalidArgumentException('non-nullable maxpages cannot be null');
        }
        $this->container['maxpages'] = $maxpages;

        return $this;
    }

    /**
     * Gets mediaclose
     *
     * @return int|null
     */
    public function getMediaclose()
    {
        return $this->container['mediaclose'];
    }

    /**
     * Sets mediaclose
     *
     * @param int|null $mediaclose Display a close button in the popup?
     *
     * @return self
     */
    public function setMediaclose($mediaclose)
    {
        if (is_null($mediaclose)) {
            throw new \InvalidArgumentException('non-nullable mediaclose cannot be null');
        }
        $this->container['mediaclose'] = $mediaclose;

        return $this;
    }

    /**
     * Gets mediafile
     *
     * @return string|null
     */
    public function getMediafile()
    {
        return $this->container['mediafile'];
    }

    /**
     * Sets mediafile
     *
     * @param string|null $mediafile Local file path or full external URL
     *
     * @return self
     */
    public function setMediafile($mediafile)
    {
        if (is_null($mediafile)) {
            throw new \InvalidArgumentException('non-nullable mediafile cannot be null');
        }
        $this->container['mediafile'] = $mediafile;

        return $this;
    }

    /**
     * Gets mediafiles
     *
     * @return \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null
     */
    public function getMediafiles()
    {
        return $this->container['mediafiles'];
    }

    /**
     * Sets mediafiles
     *
     * @param \OpenAPI\Client\Model\CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner[]|null $mediafiles mediafiles
     *
     * @return self
     */
    public function setMediafiles($mediafiles)
    {
        if (is_null($mediafiles)) {
            throw new \InvalidArgumentException('non-nullable mediafiles cannot be null');
        }
        $this->container['mediafiles'] = $mediafiles;

        return $this;
    }

    /**
     * Gets mediaheight
     *
     * @return int|null
     */
    public function getMediaheight()
    {
        return $this->container['mediaheight'];
    }

    /**
     * Sets mediaheight
     *
     * @param int|null $mediaheight Popup for media file height
     *
     * @return self
     */
    public function setMediaheight($mediaheight)
    {
        if (is_null($mediaheight)) {
            throw new \InvalidArgumentException('non-nullable mediaheight cannot be null');
        }
        $this->container['mediaheight'] = $mediaheight;

        return $this;
    }

    /**
     * Gets mediawidth
     *
     * @return int|null
     */
    public function getMediawidth()
    {
        return $this->container['mediawidth'];
    }

    /**
     * Sets mediawidth
     *
     * @param int|null $mediawidth Popup for media with
     *
     * @return self
     */
    public function setMediawidth($mediawidth)
    {
        if (is_null($mediawidth)) {
            throw new \InvalidArgumentException('non-nullable mediawidth cannot be null');
        }
        $this->container['mediawidth'] = $mediawidth;

        return $this;
    }

    /**
     * Gets minquestions
     *
     * @return int|null
     */
    public function getMinquestions()
    {
        return $this->container['minquestions'];
    }

    /**
     * Sets minquestions
     *
     * @param int|null $minquestions Minimum number of questions
     *
     * @return self
     */
    public function setMinquestions($minquestions)
    {
        if (is_null($minquestions)) {
            throw new \InvalidArgumentException('non-nullable minquestions cannot be null');
        }
        $this->container['minquestions'] = $minquestions;

        return $this;
    }

    /**
     * Gets modattempts
     *
     * @return bool|null
     */
    public function getModattempts()
    {
        return $this->container['modattempts'];
    }

    /**
     * Sets modattempts
     *
     * @param bool|null $modattempts Allow student review?
     *
     * @return self
     */
    public function setModattempts($modattempts)
    {
        if (is_null($modattempts)) {
            throw new \InvalidArgumentException('non-nullable modattempts cannot be null');
        }
        $this->container['modattempts'] = $modattempts;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Lesson name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nextpagedefault
     *
     * @return int|null
     */
    public function getNextpagedefault()
    {
        return $this->container['nextpagedefault'];
    }

    /**
     * Sets nextpagedefault
     *
     * @param int|null $nextpagedefault Action for a correct answer
     *
     * @return self
     */
    public function setNextpagedefault($nextpagedefault)
    {
        if (is_null($nextpagedefault)) {
            throw new \InvalidArgumentException('non-nullable nextpagedefault cannot be null');
        }
        $this->container['nextpagedefault'] = $nextpagedefault;

        return $this;
    }

    /**
     * Gets ongoing
     *
     * @return bool|null
     */
    public function getOngoing()
    {
        return $this->container['ongoing'];
    }

    /**
     * Sets ongoing
     *
     * @param bool|null $ongoing Display ongoing score?
     *
     * @return self
     */
    public function setOngoing($ongoing)
    {
        if (is_null($ongoing)) {
            throw new \InvalidArgumentException('non-nullable ongoing cannot be null');
        }
        $this->container['ongoing'] = $ongoing;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets practice
     *
     * @return bool|null
     */
    public function getPractice()
    {
        return $this->container['practice'];
    }

    /**
     * Sets practice
     *
     * @param bool|null $practice Practice lesson?
     *
     * @return self
     */
    public function setPractice($practice)
    {
        if (is_null($practice)) {
            throw new \InvalidArgumentException('non-nullable practice cannot be null');
        }
        $this->container['practice'] = $practice;

        return $this;
    }

    /**
     * Gets progressbar
     *
     * @return bool|null
     */
    public function getProgressbar()
    {
        return $this->container['progressbar'];
    }

    /**
     * Sets progressbar
     *
     * @param bool|null $progressbar Display progress bar?
     *
     * @return self
     */
    public function setProgressbar($progressbar)
    {
        if (is_null($progressbar)) {
            throw new \InvalidArgumentException('non-nullable progressbar cannot be null');
        }
        $this->container['progressbar'] = $progressbar;

        return $this;
    }

    /**
     * Gets retake
     *
     * @return bool|null
     */
    public function getRetake()
    {
        return $this->container['retake'];
    }

    /**
     * Sets retake
     *
     * @param bool|null $retake Re-takes allowed
     *
     * @return self
     */
    public function setRetake($retake)
    {
        if (is_null($retake)) {
            throw new \InvalidArgumentException('non-nullable retake cannot be null');
        }
        $this->container['retake'] = $retake;

        return $this;
    }

    /**
     * Gets review
     *
     * @return bool|null
     */
    public function getReview()
    {
        return $this->container['review'];
    }

    /**
     * Sets review
     *
     * @param bool|null $review Provide option to try a question again
     *
     * @return self
     */
    public function setReview($review)
    {
        if (is_null($review)) {
            throw new \InvalidArgumentException('non-nullable review cannot be null');
        }
        $this->container['review'] = $review;

        return $this;
    }

    /**
     * Gets slideshow
     *
     * @return bool|null
     */
    public function getSlideshow()
    {
        return $this->container['slideshow'];
    }

    /**
     * Sets slideshow
     *
     * @param bool|null $slideshow Display lesson as slideshow
     *
     * @return self
     */
    public function setSlideshow($slideshow)
    {
        if (is_null($slideshow)) {
            throw new \InvalidArgumentException('non-nullable slideshow cannot be null');
        }
        $this->container['slideshow'] = $slideshow;

        return $this;
    }

    /**
     * Gets timelimit
     *
     * @return int|null
     */
    public function getTimelimit()
    {
        return $this->container['timelimit'];
    }

    /**
     * Sets timelimit
     *
     * @param int|null $timelimit Time limit
     *
     * @return self
     */
    public function setTimelimit($timelimit)
    {
        if (is_null($timelimit)) {
            throw new \InvalidArgumentException('non-nullable timelimit cannot be null');
        }
        $this->container['timelimit'] = $timelimit;

        return $this;
    }

    /**
     * Gets timemodified
     *
     * @return int|null
     */
    public function getTimemodified()
    {
        return $this->container['timemodified'];
    }

    /**
     * Sets timemodified
     *
     * @param int|null $timemodified Last time settings were updated
     *
     * @return self
     */
    public function setTimemodified($timemodified)
    {
        if (is_null($timemodified)) {
            throw new \InvalidArgumentException('non-nullable timemodified cannot be null');
        }
        $this->container['timemodified'] = $timemodified;

        return $this;
    }

    /**
     * Gets usemaxgrade
     *
     * @return int|null
     */
    public function getUsemaxgrade()
    {
        return $this->container['usemaxgrade'];
    }

    /**
     * Sets usemaxgrade
     *
     * @param int|null $usemaxgrade How to calculate the final grade
     *
     * @return self
     */
    public function setUsemaxgrade($usemaxgrade)
    {
        if (is_null($usemaxgrade)) {
            throw new \InvalidArgumentException('non-nullable usemaxgrade cannot be null');
        }
        $this->container['usemaxgrade'] = $usemaxgrade;

        return $this;
    }

    /**
     * Gets usepassword
     *
     * @return bool|null
     */
    public function getUsepassword()
    {
        return $this->container['usepassword'];
    }

    /**
     * Sets usepassword
     *
     * @param bool|null $usepassword Password protected lesson?
     *
     * @return self
     */
    public function setUsepassword($usepassword)
    {
        if (is_null($usepassword)) {
            throw new \InvalidArgumentException('non-nullable usepassword cannot be null');
        }
        $this->container['usepassword'] = $usepassword;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width Slideshow width
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


