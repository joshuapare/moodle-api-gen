<?php
/**
 * ModAssignSaveGradeRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModAssignSaveGradeRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModAssignSaveGradeRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_assign_save_grade_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'addattempt' => 'bool',
        'advancedgradingdata' => '\OpenAPI\Client\Model\ModAssignSaveGradeRequestAdvancedgradingdata',
        'applytoall' => 'bool',
        'assignmentid' => 'int',
        'attemptnumber' => 'int',
        'grade' => 'float',
        'plugindata' => '\OpenAPI\Client\Model\ModAssignSaveGradeRequestPlugindata',
        'userid' => 'int',
        'workflowstate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'addattempt' => null,
        'advancedgradingdata' => null,
        'applytoall' => null,
        'assignmentid' => null,
        'attemptnumber' => null,
        'grade' => null,
        'plugindata' => null,
        'userid' => null,
        'workflowstate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'addattempt' => false,
        'advancedgradingdata' => false,
        'applytoall' => false,
        'assignmentid' => false,
        'attemptnumber' => false,
        'grade' => false,
        'plugindata' => false,
        'userid' => false,
        'workflowstate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addattempt' => 'addattempt',
        'advancedgradingdata' => 'advancedgradingdata',
        'applytoall' => 'applytoall',
        'assignmentid' => 'assignmentid',
        'attemptnumber' => 'attemptnumber',
        'grade' => 'grade',
        'plugindata' => 'plugindata',
        'userid' => 'userid',
        'workflowstate' => 'workflowstate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addattempt' => 'setAddattempt',
        'advancedgradingdata' => 'setAdvancedgradingdata',
        'applytoall' => 'setApplytoall',
        'assignmentid' => 'setAssignmentid',
        'attemptnumber' => 'setAttemptnumber',
        'grade' => 'setGrade',
        'plugindata' => 'setPlugindata',
        'userid' => 'setUserid',
        'workflowstate' => 'setWorkflowstate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addattempt' => 'getAddattempt',
        'advancedgradingdata' => 'getAdvancedgradingdata',
        'applytoall' => 'getApplytoall',
        'assignmentid' => 'getAssignmentid',
        'attemptnumber' => 'getAttemptnumber',
        'grade' => 'getGrade',
        'plugindata' => 'getPlugindata',
        'userid' => 'getUserid',
        'workflowstate' => 'getWorkflowstate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('addattempt', $data ?? [], null);
        $this->setIfExists('advancedgradingdata', $data ?? [], null);
        $this->setIfExists('applytoall', $data ?? [], null);
        $this->setIfExists('assignmentid', $data ?? [], null);
        $this->setIfExists('attemptnumber', $data ?? [], null);
        $this->setIfExists('grade', $data ?? [], null);
        $this->setIfExists('plugindata', $data ?? [], null);
        $this->setIfExists('userid', $data ?? [], null);
        $this->setIfExists('workflowstate', $data ?? [], 'null');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['addattempt'] === null) {
            $invalidProperties[] = "'addattempt' can't be null";
        }
        if ($this->container['applytoall'] === null) {
            $invalidProperties[] = "'applytoall' can't be null";
        }
        if ($this->container['assignmentid'] === null) {
            $invalidProperties[] = "'assignmentid' can't be null";
        }
        if ($this->container['attemptnumber'] === null) {
            $invalidProperties[] = "'attemptnumber' can't be null";
        }
        if ($this->container['grade'] === null) {
            $invalidProperties[] = "'grade' can't be null";
        }
        if ($this->container['userid'] === null) {
            $invalidProperties[] = "'userid' can't be null";
        }
        if ($this->container['workflowstate'] === null) {
            $invalidProperties[] = "'workflowstate' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addattempt
     *
     * @return bool
     */
    public function getAddattempt()
    {
        return $this->container['addattempt'];
    }

    /**
     * Sets addattempt
     *
     * @param bool $addattempt Allow another attempt if the attempt reopen method is manual
     *
     * @return self
     */
    public function setAddattempt($addattempt)
    {
        if (is_null($addattempt)) {
            throw new \InvalidArgumentException('non-nullable addattempt cannot be null');
        }
        $this->container['addattempt'] = $addattempt;

        return $this;
    }

    /**
     * Gets advancedgradingdata
     *
     * @return \OpenAPI\Client\Model\ModAssignSaveGradeRequestAdvancedgradingdata|null
     */
    public function getAdvancedgradingdata()
    {
        return $this->container['advancedgradingdata'];
    }

    /**
     * Sets advancedgradingdata
     *
     * @param \OpenAPI\Client\Model\ModAssignSaveGradeRequestAdvancedgradingdata|null $advancedgradingdata advancedgradingdata
     *
     * @return self
     */
    public function setAdvancedgradingdata($advancedgradingdata)
    {
        if (is_null($advancedgradingdata)) {
            throw new \InvalidArgumentException('non-nullable advancedgradingdata cannot be null');
        }
        $this->container['advancedgradingdata'] = $advancedgradingdata;

        return $this;
    }

    /**
     * Gets applytoall
     *
     * @return bool
     */
    public function getApplytoall()
    {
        return $this->container['applytoall'];
    }

    /**
     * Sets applytoall
     *
     * @param bool $applytoall If true, this grade will be applied to all members of the group (for group assignments).
     *
     * @return self
     */
    public function setApplytoall($applytoall)
    {
        if (is_null($applytoall)) {
            throw new \InvalidArgumentException('non-nullable applytoall cannot be null');
        }
        $this->container['applytoall'] = $applytoall;

        return $this;
    }

    /**
     * Gets assignmentid
     *
     * @return int
     */
    public function getAssignmentid()
    {
        return $this->container['assignmentid'];
    }

    /**
     * Sets assignmentid
     *
     * @param int $assignmentid The assignment id to operate on
     *
     * @return self
     */
    public function setAssignmentid($assignmentid)
    {
        if (is_null($assignmentid)) {
            throw new \InvalidArgumentException('non-nullable assignmentid cannot be null');
        }
        $this->container['assignmentid'] = $assignmentid;

        return $this;
    }

    /**
     * Gets attemptnumber
     *
     * @return int
     */
    public function getAttemptnumber()
    {
        return $this->container['attemptnumber'];
    }

    /**
     * Sets attemptnumber
     *
     * @param int $attemptnumber The attempt number (-1 means latest attempt)
     *
     * @return self
     */
    public function setAttemptnumber($attemptnumber)
    {
        if (is_null($attemptnumber)) {
            throw new \InvalidArgumentException('non-nullable attemptnumber cannot be null');
        }
        $this->container['attemptnumber'] = $attemptnumber;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return float
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param float $grade The new grade for this user. Ignored if advanced grading used
     *
     * @return self
     */
    public function setGrade($grade)
    {
        if (is_null($grade)) {
            throw new \InvalidArgumentException('non-nullable grade cannot be null');
        }
        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets plugindata
     *
     * @return \OpenAPI\Client\Model\ModAssignSaveGradeRequestPlugindata|null
     */
    public function getPlugindata()
    {
        return $this->container['plugindata'];
    }

    /**
     * Sets plugindata
     *
     * @param \OpenAPI\Client\Model\ModAssignSaveGradeRequestPlugindata|null $plugindata plugindata
     *
     * @return self
     */
    public function setPlugindata($plugindata)
    {
        if (is_null($plugindata)) {
            throw new \InvalidArgumentException('non-nullable plugindata cannot be null');
        }
        $this->container['plugindata'] = $plugindata;

        return $this;
    }

    /**
     * Gets userid
     *
     * @return int
     */
    public function getUserid()
    {
        return $this->container['userid'];
    }

    /**
     * Sets userid
     *
     * @param int $userid The student id to operate on
     *
     * @return self
     */
    public function setUserid($userid)
    {
        if (is_null($userid)) {
            throw new \InvalidArgumentException('non-nullable userid cannot be null');
        }
        $this->container['userid'] = $userid;

        return $this;
    }

    /**
     * Gets workflowstate
     *
     * @return string
     */
    public function getWorkflowstate()
    {
        return $this->container['workflowstate'];
    }

    /**
     * Sets workflowstate
     *
     * @param string $workflowstate The next marking workflow state
     *
     * @return self
     */
    public function setWorkflowstate($workflowstate)
    {
        if (is_null($workflowstate)) {
            throw new \InvalidArgumentException('non-nullable workflowstate cannot be null');
        }
        $this->container['workflowstate'] = $workflowstate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


