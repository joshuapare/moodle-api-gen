<?php
/**
 * ModQuizAddRandomQuestionsRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModQuizAddRandomQuestionsRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModQuizAddRandomQuestionsRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_quiz_add_random_questions_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'addonpage' => 'int',
        'cmid' => 'int',
        'filtercondition' => 'string',
        'newcategory' => 'string',
        'parentcategory' => 'string',
        'randomcount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'addonpage' => null,
        'cmid' => null,
        'filtercondition' => null,
        'newcategory' => null,
        'parentcategory' => null,
        'randomcount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'addonpage' => false,
        'cmid' => false,
        'filtercondition' => false,
        'newcategory' => false,
        'parentcategory' => false,
        'randomcount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addonpage' => 'addonpage',
        'cmid' => 'cmid',
        'filtercondition' => 'filtercondition',
        'newcategory' => 'newcategory',
        'parentcategory' => 'parentcategory',
        'randomcount' => 'randomcount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addonpage' => 'setAddonpage',
        'cmid' => 'setCmid',
        'filtercondition' => 'setFiltercondition',
        'newcategory' => 'setNewcategory',
        'parentcategory' => 'setParentcategory',
        'randomcount' => 'setRandomcount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addonpage' => 'getAddonpage',
        'cmid' => 'getCmid',
        'filtercondition' => 'getFiltercondition',
        'newcategory' => 'getNewcategory',
        'parentcategory' => 'getParentcategory',
        'randomcount' => 'getRandomcount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('addonpage', $data ?? [], null);
        $this->setIfExists('cmid', $data ?? [], null);
        $this->setIfExists('filtercondition', $data ?? [], '');
        $this->setIfExists('newcategory', $data ?? [], '');
        $this->setIfExists('parentcategory', $data ?? [], '0');
        $this->setIfExists('randomcount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['addonpage'] === null) {
            $invalidProperties[] = "'addonpage' can't be null";
        }
        if ($this->container['cmid'] === null) {
            $invalidProperties[] = "'cmid' can't be null";
        }
        if ($this->container['randomcount'] === null) {
            $invalidProperties[] = "'randomcount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addonpage
     *
     * @return int
     */
    public function getAddonpage()
    {
        return $this->container['addonpage'];
    }

    /**
     * Sets addonpage
     *
     * @param int $addonpage The page where random questions will be added to
     *
     * @return self
     */
    public function setAddonpage($addonpage)
    {
        if (is_null($addonpage)) {
            throw new \InvalidArgumentException('non-nullable addonpage cannot be null');
        }
        $this->container['addonpage'] = $addonpage;

        return $this;
    }

    /**
     * Gets cmid
     *
     * @return int
     */
    public function getCmid()
    {
        return $this->container['cmid'];
    }

    /**
     * Sets cmid
     *
     * @param int $cmid The cmid of the quiz
     *
     * @return self
     */
    public function setCmid($cmid)
    {
        if (is_null($cmid)) {
            throw new \InvalidArgumentException('non-nullable cmid cannot be null');
        }
        $this->container['cmid'] = $cmid;

        return $this;
    }

    /**
     * Gets filtercondition
     *
     * @return string|null
     */
    public function getFiltercondition()
    {
        return $this->container['filtercondition'];
    }

    /**
     * Sets filtercondition
     *
     * @param string|null $filtercondition (Optional) The filter condition used when adding random questions from an existing category.                     Not required if adding random questions from a new category.
     *
     * @return self
     */
    public function setFiltercondition($filtercondition)
    {
        if (is_null($filtercondition)) {
            throw new \InvalidArgumentException('non-nullable filtercondition cannot be null');
        }
        $this->container['filtercondition'] = $filtercondition;

        return $this;
    }

    /**
     * Gets newcategory
     *
     * @return string|null
     */
    public function getNewcategory()
    {
        return $this->container['newcategory'];
    }

    /**
     * Sets newcategory
     *
     * @param string|null $newcategory (Optional) The name of a new question category to create and use for the random questions.
     *
     * @return self
     */
    public function setNewcategory($newcategory)
    {
        if (is_null($newcategory)) {
            throw new \InvalidArgumentException('non-nullable newcategory cannot be null');
        }
        $this->container['newcategory'] = $newcategory;

        return $this;
    }

    /**
     * Gets parentcategory
     *
     * @return string|null
     */
    public function getParentcategory()
    {
        return $this->container['parentcategory'];
    }

    /**
     * Sets parentcategory
     *
     * @param string|null $parentcategory (Optional) The parent of the new question category, if creating one.
     *
     * @return self
     */
    public function setParentcategory($parentcategory)
    {
        if (is_null($parentcategory)) {
            throw new \InvalidArgumentException('non-nullable parentcategory cannot be null');
        }
        $this->container['parentcategory'] = $parentcategory;

        return $this;
    }

    /**
     * Gets randomcount
     *
     * @return int
     */
    public function getRandomcount()
    {
        return $this->container['randomcount'];
    }

    /**
     * Sets randomcount
     *
     * @param int $randomcount Number of random questions
     *
     * @return self
     */
    public function setRandomcount($randomcount)
    {
        if (is_null($randomcount)) {
            throw new \InvalidArgumentException('non-nullable randomcount cannot be null');
        }
        $this->container['randomcount'] = $randomcount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


