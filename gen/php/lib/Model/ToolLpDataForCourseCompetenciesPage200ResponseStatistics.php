<?php
/**
 * ToolLpDataForCourseCompetenciesPage200ResponseStatistics
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ToolLpDataForCourseCompetenciesPage200ResponseStatistics Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ToolLpDataForCourseCompetenciesPage200ResponseStatistics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tool_lp_data_for_course_competencies_page_200_response_statistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'canbegradedincourse' => 'bool',
        'canmanagecoursecompetencies' => 'bool',
        'competencycount' => 'int',
        'leastproficient' => '\OpenAPI\Client\Model\CoreCompetencyReadUserEvidence200ResponseCompetenciesInner[]',
        'leastproficientcount' => 'int',
        'proficientcompetencycount' => 'int',
        'proficientcompetencypercentage' => 'float',
        'proficientcompetencypercentageformatted' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'canbegradedincourse' => null,
        'canmanagecoursecompetencies' => null,
        'competencycount' => null,
        'leastproficient' => null,
        'leastproficientcount' => null,
        'proficientcompetencycount' => null,
        'proficientcompetencypercentage' => null,
        'proficientcompetencypercentageformatted' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'canbegradedincourse' => false,
        'canmanagecoursecompetencies' => false,
        'competencycount' => false,
        'leastproficient' => false,
        'leastproficientcount' => false,
        'proficientcompetencycount' => false,
        'proficientcompetencypercentage' => false,
        'proficientcompetencypercentageformatted' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canbegradedincourse' => 'canbegradedincourse',
        'canmanagecoursecompetencies' => 'canmanagecoursecompetencies',
        'competencycount' => 'competencycount',
        'leastproficient' => 'leastproficient',
        'leastproficientcount' => 'leastproficientcount',
        'proficientcompetencycount' => 'proficientcompetencycount',
        'proficientcompetencypercentage' => 'proficientcompetencypercentage',
        'proficientcompetencypercentageformatted' => 'proficientcompetencypercentageformatted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canbegradedincourse' => 'setCanbegradedincourse',
        'canmanagecoursecompetencies' => 'setCanmanagecoursecompetencies',
        'competencycount' => 'setCompetencycount',
        'leastproficient' => 'setLeastproficient',
        'leastproficientcount' => 'setLeastproficientcount',
        'proficientcompetencycount' => 'setProficientcompetencycount',
        'proficientcompetencypercentage' => 'setProficientcompetencypercentage',
        'proficientcompetencypercentageformatted' => 'setProficientcompetencypercentageformatted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canbegradedincourse' => 'getCanbegradedincourse',
        'canmanagecoursecompetencies' => 'getCanmanagecoursecompetencies',
        'competencycount' => 'getCompetencycount',
        'leastproficient' => 'getLeastproficient',
        'leastproficientcount' => 'getLeastproficientcount',
        'proficientcompetencycount' => 'getProficientcompetencycount',
        'proficientcompetencypercentage' => 'getProficientcompetencypercentage',
        'proficientcompetencypercentageformatted' => 'getProficientcompetencypercentageformatted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('canbegradedincourse', $data ?? [], null);
        $this->setIfExists('canmanagecoursecompetencies', $data ?? [], null);
        $this->setIfExists('competencycount', $data ?? [], null);
        $this->setIfExists('leastproficient', $data ?? [], null);
        $this->setIfExists('leastproficientcount', $data ?? [], null);
        $this->setIfExists('proficientcompetencycount', $data ?? [], null);
        $this->setIfExists('proficientcompetencypercentage', $data ?? [], null);
        $this->setIfExists('proficientcompetencypercentageformatted', $data ?? [], 'null');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['canbegradedincourse'] === null) {
            $invalidProperties[] = "'canbegradedincourse' can't be null";
        }
        if ($this->container['canmanagecoursecompetencies'] === null) {
            $invalidProperties[] = "'canmanagecoursecompetencies' can't be null";
        }
        if ($this->container['competencycount'] === null) {
            $invalidProperties[] = "'competencycount' can't be null";
        }
        if ($this->container['leastproficient'] === null) {
            $invalidProperties[] = "'leastproficient' can't be null";
        }
        if ($this->container['leastproficientcount'] === null) {
            $invalidProperties[] = "'leastproficientcount' can't be null";
        }
        if ($this->container['proficientcompetencycount'] === null) {
            $invalidProperties[] = "'proficientcompetencycount' can't be null";
        }
        if ($this->container['proficientcompetencypercentage'] === null) {
            $invalidProperties[] = "'proficientcompetencypercentage' can't be null";
        }
        if ($this->container['proficientcompetencypercentageformatted'] === null) {
            $invalidProperties[] = "'proficientcompetencypercentageformatted' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canbegradedincourse
     *
     * @return bool
     */
    public function getCanbegradedincourse()
    {
        return $this->container['canbegradedincourse'];
    }

    /**
     * Sets canbegradedincourse
     *
     * @param bool $canbegradedincourse canbegradedincourse
     *
     * @return self
     */
    public function setCanbegradedincourse($canbegradedincourse)
    {
        if (is_null($canbegradedincourse)) {
            throw new \InvalidArgumentException('non-nullable canbegradedincourse cannot be null');
        }
        $this->container['canbegradedincourse'] = $canbegradedincourse;

        return $this;
    }

    /**
     * Gets canmanagecoursecompetencies
     *
     * @return bool
     */
    public function getCanmanagecoursecompetencies()
    {
        return $this->container['canmanagecoursecompetencies'];
    }

    /**
     * Sets canmanagecoursecompetencies
     *
     * @param bool $canmanagecoursecompetencies canmanagecoursecompetencies
     *
     * @return self
     */
    public function setCanmanagecoursecompetencies($canmanagecoursecompetencies)
    {
        if (is_null($canmanagecoursecompetencies)) {
            throw new \InvalidArgumentException('non-nullable canmanagecoursecompetencies cannot be null');
        }
        $this->container['canmanagecoursecompetencies'] = $canmanagecoursecompetencies;

        return $this;
    }

    /**
     * Gets competencycount
     *
     * @return int
     */
    public function getCompetencycount()
    {
        return $this->container['competencycount'];
    }

    /**
     * Sets competencycount
     *
     * @param int $competencycount competencycount
     *
     * @return self
     */
    public function setCompetencycount($competencycount)
    {
        if (is_null($competencycount)) {
            throw new \InvalidArgumentException('non-nullable competencycount cannot be null');
        }
        $this->container['competencycount'] = $competencycount;

        return $this;
    }

    /**
     * Gets leastproficient
     *
     * @return \OpenAPI\Client\Model\CoreCompetencyReadUserEvidence200ResponseCompetenciesInner[]
     */
    public function getLeastproficient()
    {
        return $this->container['leastproficient'];
    }

    /**
     * Sets leastproficient
     *
     * @param \OpenAPI\Client\Model\CoreCompetencyReadUserEvidence200ResponseCompetenciesInner[] $leastproficient leastproficient
     *
     * @return self
     */
    public function setLeastproficient($leastproficient)
    {
        if (is_null($leastproficient)) {
            throw new \InvalidArgumentException('non-nullable leastproficient cannot be null');
        }
        $this->container['leastproficient'] = $leastproficient;

        return $this;
    }

    /**
     * Gets leastproficientcount
     *
     * @return int
     */
    public function getLeastproficientcount()
    {
        return $this->container['leastproficientcount'];
    }

    /**
     * Sets leastproficientcount
     *
     * @param int $leastproficientcount leastproficientcount
     *
     * @return self
     */
    public function setLeastproficientcount($leastproficientcount)
    {
        if (is_null($leastproficientcount)) {
            throw new \InvalidArgumentException('non-nullable leastproficientcount cannot be null');
        }
        $this->container['leastproficientcount'] = $leastproficientcount;

        return $this;
    }

    /**
     * Gets proficientcompetencycount
     *
     * @return int
     */
    public function getProficientcompetencycount()
    {
        return $this->container['proficientcompetencycount'];
    }

    /**
     * Sets proficientcompetencycount
     *
     * @param int $proficientcompetencycount proficientcompetencycount
     *
     * @return self
     */
    public function setProficientcompetencycount($proficientcompetencycount)
    {
        if (is_null($proficientcompetencycount)) {
            throw new \InvalidArgumentException('non-nullable proficientcompetencycount cannot be null');
        }
        $this->container['proficientcompetencycount'] = $proficientcompetencycount;

        return $this;
    }

    /**
     * Gets proficientcompetencypercentage
     *
     * @return float
     */
    public function getProficientcompetencypercentage()
    {
        return $this->container['proficientcompetencypercentage'];
    }

    /**
     * Sets proficientcompetencypercentage
     *
     * @param float $proficientcompetencypercentage proficientcompetencypercentage
     *
     * @return self
     */
    public function setProficientcompetencypercentage($proficientcompetencypercentage)
    {
        if (is_null($proficientcompetencypercentage)) {
            throw new \InvalidArgumentException('non-nullable proficientcompetencypercentage cannot be null');
        }
        $this->container['proficientcompetencypercentage'] = $proficientcompetencypercentage;

        return $this;
    }

    /**
     * Gets proficientcompetencypercentageformatted
     *
     * @return string
     */
    public function getProficientcompetencypercentageformatted()
    {
        return $this->container['proficientcompetencypercentageformatted'];
    }

    /**
     * Sets proficientcompetencypercentageformatted
     *
     * @param string $proficientcompetencypercentageformatted proficientcompetencypercentageformatted
     *
     * @return self
     */
    public function setProficientcompetencypercentageformatted($proficientcompetencypercentageformatted)
    {
        if (is_null($proficientcompetencypercentageformatted)) {
            throw new \InvalidArgumentException('non-nullable proficientcompetencypercentageformatted cannot be null');
        }
        $this->container['proficientcompetencypercentageformatted'] = $proficientcompetencypercentageformatted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


