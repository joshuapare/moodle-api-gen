<?php
/**
 * CoreMessageGetConversationBetweenUsersRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CoreMessageGetConversationBetweenUsersRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreMessageGetConversationBetweenUsersRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_message_get_conversation_between_users_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'includecontactrequests' => 'bool',
        'includeprivacyinfo' => 'bool',
        'memberlimit' => 'int',
        'memberoffset' => 'int',
        'messagelimit' => 'int',
        'messageoffset' => 'int',
        'newestmessagesfirst' => 'bool',
        'otheruserid' => 'int',
        'userid' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'includecontactrequests' => null,
        'includeprivacyinfo' => null,
        'memberlimit' => null,
        'memberoffset' => null,
        'messagelimit' => null,
        'messageoffset' => null,
        'newestmessagesfirst' => null,
        'otheruserid' => null,
        'userid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'includecontactrequests' => false,
        'includeprivacyinfo' => false,
        'memberlimit' => false,
        'memberoffset' => false,
        'messagelimit' => false,
        'messageoffset' => false,
        'newestmessagesfirst' => false,
        'otheruserid' => false,
        'userid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'includecontactrequests' => 'includecontactrequests',
        'includeprivacyinfo' => 'includeprivacyinfo',
        'memberlimit' => 'memberlimit',
        'memberoffset' => 'memberoffset',
        'messagelimit' => 'messagelimit',
        'messageoffset' => 'messageoffset',
        'newestmessagesfirst' => 'newestmessagesfirst',
        'otheruserid' => 'otheruserid',
        'userid' => 'userid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'includecontactrequests' => 'setIncludecontactrequests',
        'includeprivacyinfo' => 'setIncludeprivacyinfo',
        'memberlimit' => 'setMemberlimit',
        'memberoffset' => 'setMemberoffset',
        'messagelimit' => 'setMessagelimit',
        'messageoffset' => 'setMessageoffset',
        'newestmessagesfirst' => 'setNewestmessagesfirst',
        'otheruserid' => 'setOtheruserid',
        'userid' => 'setUserid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'includecontactrequests' => 'getIncludecontactrequests',
        'includeprivacyinfo' => 'getIncludeprivacyinfo',
        'memberlimit' => 'getMemberlimit',
        'memberoffset' => 'getMemberoffset',
        'messagelimit' => 'getMessagelimit',
        'messageoffset' => 'getMessageoffset',
        'newestmessagesfirst' => 'getNewestmessagesfirst',
        'otheruserid' => 'getOtheruserid',
        'userid' => 'getUserid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('includecontactrequests', $data ?? [], null);
        $this->setIfExists('includeprivacyinfo', $data ?? [], null);
        $this->setIfExists('memberlimit', $data ?? [], 0);
        $this->setIfExists('memberoffset', $data ?? [], 0);
        $this->setIfExists('messagelimit', $data ?? [], 100);
        $this->setIfExists('messageoffset', $data ?? [], 0);
        $this->setIfExists('newestmessagesfirst', $data ?? [], true);
        $this->setIfExists('otheruserid', $data ?? [], null);
        $this->setIfExists('userid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['includecontactrequests'] === null) {
            $invalidProperties[] = "'includecontactrequests' can't be null";
        }
        if ($this->container['includeprivacyinfo'] === null) {
            $invalidProperties[] = "'includeprivacyinfo' can't be null";
        }
        if ($this->container['otheruserid'] === null) {
            $invalidProperties[] = "'otheruserid' can't be null";
        }
        if ($this->container['userid'] === null) {
            $invalidProperties[] = "'userid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets includecontactrequests
     *
     * @return bool
     */
    public function getIncludecontactrequests()
    {
        return $this->container['includecontactrequests'];
    }

    /**
     * Sets includecontactrequests
     *
     * @param bool $includecontactrequests Include contact requests in the members
     *
     * @return self
     */
    public function setIncludecontactrequests($includecontactrequests)
    {
        if (is_null($includecontactrequests)) {
            throw new \InvalidArgumentException('non-nullable includecontactrequests cannot be null');
        }
        $this->container['includecontactrequests'] = $includecontactrequests;

        return $this;
    }

    /**
     * Gets includeprivacyinfo
     *
     * @return bool
     */
    public function getIncludeprivacyinfo()
    {
        return $this->container['includeprivacyinfo'];
    }

    /**
     * Sets includeprivacyinfo
     *
     * @param bool $includeprivacyinfo Include privacy info in the members
     *
     * @return self
     */
    public function setIncludeprivacyinfo($includeprivacyinfo)
    {
        if (is_null($includeprivacyinfo)) {
            throw new \InvalidArgumentException('non-nullable includeprivacyinfo cannot be null');
        }
        $this->container['includeprivacyinfo'] = $includeprivacyinfo;

        return $this;
    }

    /**
     * Gets memberlimit
     *
     * @return int|null
     */
    public function getMemberlimit()
    {
        return $this->container['memberlimit'];
    }

    /**
     * Sets memberlimit
     *
     * @param int|null $memberlimit Limit for number of members
     *
     * @return self
     */
    public function setMemberlimit($memberlimit)
    {
        if (is_null($memberlimit)) {
            throw new \InvalidArgumentException('non-nullable memberlimit cannot be null');
        }
        $this->container['memberlimit'] = $memberlimit;

        return $this;
    }

    /**
     * Gets memberoffset
     *
     * @return int|null
     */
    public function getMemberoffset()
    {
        return $this->container['memberoffset'];
    }

    /**
     * Sets memberoffset
     *
     * @param int|null $memberoffset Offset for member list
     *
     * @return self
     */
    public function setMemberoffset($memberoffset)
    {
        if (is_null($memberoffset)) {
            throw new \InvalidArgumentException('non-nullable memberoffset cannot be null');
        }
        $this->container['memberoffset'] = $memberoffset;

        return $this;
    }

    /**
     * Gets messagelimit
     *
     * @return int|null
     */
    public function getMessagelimit()
    {
        return $this->container['messagelimit'];
    }

    /**
     * Sets messagelimit
     *
     * @param int|null $messagelimit Limit for number of messages
     *
     * @return self
     */
    public function setMessagelimit($messagelimit)
    {
        if (is_null($messagelimit)) {
            throw new \InvalidArgumentException('non-nullable messagelimit cannot be null');
        }
        $this->container['messagelimit'] = $messagelimit;

        return $this;
    }

    /**
     * Gets messageoffset
     *
     * @return int|null
     */
    public function getMessageoffset()
    {
        return $this->container['messageoffset'];
    }

    /**
     * Sets messageoffset
     *
     * @param int|null $messageoffset Offset for messages list
     *
     * @return self
     */
    public function setMessageoffset($messageoffset)
    {
        if (is_null($messageoffset)) {
            throw new \InvalidArgumentException('non-nullable messageoffset cannot be null');
        }
        $this->container['messageoffset'] = $messageoffset;

        return $this;
    }

    /**
     * Gets newestmessagesfirst
     *
     * @return bool|null
     */
    public function getNewestmessagesfirst()
    {
        return $this->container['newestmessagesfirst'];
    }

    /**
     * Sets newestmessagesfirst
     *
     * @param bool|null $newestmessagesfirst Order messages by newest first
     *
     * @return self
     */
    public function setNewestmessagesfirst($newestmessagesfirst)
    {
        if (is_null($newestmessagesfirst)) {
            throw new \InvalidArgumentException('non-nullable newestmessagesfirst cannot be null');
        }
        $this->container['newestmessagesfirst'] = $newestmessagesfirst;

        return $this;
    }

    /**
     * Gets otheruserid
     *
     * @return int
     */
    public function getOtheruserid()
    {
        return $this->container['otheruserid'];
    }

    /**
     * Sets otheruserid
     *
     * @param int $otheruserid The other user id
     *
     * @return self
     */
    public function setOtheruserid($otheruserid)
    {
        if (is_null($otheruserid)) {
            throw new \InvalidArgumentException('non-nullable otheruserid cannot be null');
        }
        $this->container['otheruserid'] = $otheruserid;

        return $this;
    }

    /**
     * Gets userid
     *
     * @return int
     */
    public function getUserid()
    {
        return $this->container['userid'];
    }

    /**
     * Sets userid
     *
     * @param int $userid The id of the user who we are viewing conversations for
     *
     * @return self
     */
    public function setUserid($userid)
    {
        if (is_null($userid)) {
            throw new \InvalidArgumentException('non-nullable userid cannot be null');
        }
        $this->container['userid'] = $userid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


