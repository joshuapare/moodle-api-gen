<?php
/**
 * ModAssignGetSubmissionStatus200ResponseLastattempt
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModAssignGetSubmissionStatus200ResponseLastattempt Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModAssignGetSubmissionStatus200ResponseLastattempt implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mod_assign_get_submission_status_200_response_lastattempt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'blindmarking' => 'bool',
        'canedit' => 'bool',
        'caneditowner' => 'bool',
        'cansubmit' => 'bool',
        'extensionduedate' => 'int',
        'graded' => 'bool',
        'gradingstatus' => 'string',
        'locked' => 'bool',
        'submission' => '\OpenAPI\Client\Model\ModAssignGetSubmissionStatus200ResponseLastattemptSubmission',
        'submissiongroup' => 'int',
        'submissiongroupmemberswhoneedtosubmit' => 'object[]',
        'submissionsenabled' => 'bool',
        'teamsubmission' => '\OpenAPI\Client\Model\ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission',
        'timelimit' => 'int',
        'usergroups' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'blindmarking' => null,
        'canedit' => null,
        'caneditowner' => null,
        'cansubmit' => null,
        'extensionduedate' => null,
        'graded' => null,
        'gradingstatus' => null,
        'locked' => null,
        'submission' => null,
        'submissiongroup' => null,
        'submissiongroupmemberswhoneedtosubmit' => null,
        'submissionsenabled' => null,
        'teamsubmission' => null,
        'timelimit' => null,
        'usergroups' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'blindmarking' => false,
        'canedit' => false,
        'caneditowner' => false,
        'cansubmit' => false,
        'extensionduedate' => false,
        'graded' => false,
        'gradingstatus' => false,
        'locked' => false,
        'submission' => false,
        'submissiongroup' => false,
        'submissiongroupmemberswhoneedtosubmit' => false,
        'submissionsenabled' => false,
        'teamsubmission' => false,
        'timelimit' => false,
        'usergroups' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'blindmarking' => 'blindmarking',
        'canedit' => 'canedit',
        'caneditowner' => 'caneditowner',
        'cansubmit' => 'cansubmit',
        'extensionduedate' => 'extensionduedate',
        'graded' => 'graded',
        'gradingstatus' => 'gradingstatus',
        'locked' => 'locked',
        'submission' => 'submission',
        'submissiongroup' => 'submissiongroup',
        'submissiongroupmemberswhoneedtosubmit' => 'submissiongroupmemberswhoneedtosubmit',
        'submissionsenabled' => 'submissionsenabled',
        'teamsubmission' => 'teamsubmission',
        'timelimit' => 'timelimit',
        'usergroups' => 'usergroups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'blindmarking' => 'setBlindmarking',
        'canedit' => 'setCanedit',
        'caneditowner' => 'setCaneditowner',
        'cansubmit' => 'setCansubmit',
        'extensionduedate' => 'setExtensionduedate',
        'graded' => 'setGraded',
        'gradingstatus' => 'setGradingstatus',
        'locked' => 'setLocked',
        'submission' => 'setSubmission',
        'submissiongroup' => 'setSubmissiongroup',
        'submissiongroupmemberswhoneedtosubmit' => 'setSubmissiongroupmemberswhoneedtosubmit',
        'submissionsenabled' => 'setSubmissionsenabled',
        'teamsubmission' => 'setTeamsubmission',
        'timelimit' => 'setTimelimit',
        'usergroups' => 'setUsergroups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'blindmarking' => 'getBlindmarking',
        'canedit' => 'getCanedit',
        'caneditowner' => 'getCaneditowner',
        'cansubmit' => 'getCansubmit',
        'extensionduedate' => 'getExtensionduedate',
        'graded' => 'getGraded',
        'gradingstatus' => 'getGradingstatus',
        'locked' => 'getLocked',
        'submission' => 'getSubmission',
        'submissiongroup' => 'getSubmissiongroup',
        'submissiongroupmemberswhoneedtosubmit' => 'getSubmissiongroupmemberswhoneedtosubmit',
        'submissionsenabled' => 'getSubmissionsenabled',
        'teamsubmission' => 'getTeamsubmission',
        'timelimit' => 'getTimelimit',
        'usergroups' => 'getUsergroups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('blindmarking', $data ?? [], null);
        $this->setIfExists('canedit', $data ?? [], null);
        $this->setIfExists('caneditowner', $data ?? [], null);
        $this->setIfExists('cansubmit', $data ?? [], null);
        $this->setIfExists('extensionduedate', $data ?? [], null);
        $this->setIfExists('graded', $data ?? [], null);
        $this->setIfExists('gradingstatus', $data ?? [], 'null');
        $this->setIfExists('locked', $data ?? [], null);
        $this->setIfExists('submission', $data ?? [], null);
        $this->setIfExists('submissiongroup', $data ?? [], null);
        $this->setIfExists('submissiongroupmemberswhoneedtosubmit', $data ?? [], null);
        $this->setIfExists('submissionsenabled', $data ?? [], null);
        $this->setIfExists('teamsubmission', $data ?? [], null);
        $this->setIfExists('timelimit', $data ?? [], null);
        $this->setIfExists('usergroups', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['blindmarking'] === null) {
            $invalidProperties[] = "'blindmarking' can't be null";
        }
        if ($this->container['canedit'] === null) {
            $invalidProperties[] = "'canedit' can't be null";
        }
        if ($this->container['caneditowner'] === null) {
            $invalidProperties[] = "'caneditowner' can't be null";
        }
        if ($this->container['cansubmit'] === null) {
            $invalidProperties[] = "'cansubmit' can't be null";
        }
        if ($this->container['extensionduedate'] === null) {
            $invalidProperties[] = "'extensionduedate' can't be null";
        }
        if ($this->container['graded'] === null) {
            $invalidProperties[] = "'graded' can't be null";
        }
        if ($this->container['gradingstatus'] === null) {
            $invalidProperties[] = "'gradingstatus' can't be null";
        }
        if ($this->container['locked'] === null) {
            $invalidProperties[] = "'locked' can't be null";
        }
        if ($this->container['submissionsenabled'] === null) {
            $invalidProperties[] = "'submissionsenabled' can't be null";
        }
        if ($this->container['usergroups'] === null) {
            $invalidProperties[] = "'usergroups' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets blindmarking
     *
     * @return bool
     */
    public function getBlindmarking()
    {
        return $this->container['blindmarking'];
    }

    /**
     * Sets blindmarking
     *
     * @param bool $blindmarking Whether blind marking is enabled.
     *
     * @return self
     */
    public function setBlindmarking($blindmarking)
    {
        if (is_null($blindmarking)) {
            throw new \InvalidArgumentException('non-nullable blindmarking cannot be null');
        }
        $this->container['blindmarking'] = $blindmarking;

        return $this;
    }

    /**
     * Gets canedit
     *
     * @return bool
     */
    public function getCanedit()
    {
        return $this->container['canedit'];
    }

    /**
     * Sets canedit
     *
     * @param bool $canedit Whether the user can edit the current submission.
     *
     * @return self
     */
    public function setCanedit($canedit)
    {
        if (is_null($canedit)) {
            throw new \InvalidArgumentException('non-nullable canedit cannot be null');
        }
        $this->container['canedit'] = $canedit;

        return $this;
    }

    /**
     * Gets caneditowner
     *
     * @return bool
     */
    public function getCaneditowner()
    {
        return $this->container['caneditowner'];
    }

    /**
     * Sets caneditowner
     *
     * @param bool $caneditowner Whether the owner of the submission can edit it.
     *
     * @return self
     */
    public function setCaneditowner($caneditowner)
    {
        if (is_null($caneditowner)) {
            throw new \InvalidArgumentException('non-nullable caneditowner cannot be null');
        }
        $this->container['caneditowner'] = $caneditowner;

        return $this;
    }

    /**
     * Gets cansubmit
     *
     * @return bool
     */
    public function getCansubmit()
    {
        return $this->container['cansubmit'];
    }

    /**
     * Sets cansubmit
     *
     * @param bool $cansubmit Whether the user can submit.
     *
     * @return self
     */
    public function setCansubmit($cansubmit)
    {
        if (is_null($cansubmit)) {
            throw new \InvalidArgumentException('non-nullable cansubmit cannot be null');
        }
        $this->container['cansubmit'] = $cansubmit;

        return $this;
    }

    /**
     * Gets extensionduedate
     *
     * @return int
     */
    public function getExtensionduedate()
    {
        return $this->container['extensionduedate'];
    }

    /**
     * Sets extensionduedate
     *
     * @param int $extensionduedate Extension due date.
     *
     * @return self
     */
    public function setExtensionduedate($extensionduedate)
    {
        if (is_null($extensionduedate)) {
            throw new \InvalidArgumentException('non-nullable extensionduedate cannot be null');
        }
        $this->container['extensionduedate'] = $extensionduedate;

        return $this;
    }

    /**
     * Gets graded
     *
     * @return bool
     */
    public function getGraded()
    {
        return $this->container['graded'];
    }

    /**
     * Sets graded
     *
     * @param bool $graded Whether the submission is graded.
     *
     * @return self
     */
    public function setGraded($graded)
    {
        if (is_null($graded)) {
            throw new \InvalidArgumentException('non-nullable graded cannot be null');
        }
        $this->container['graded'] = $graded;

        return $this;
    }

    /**
     * Gets gradingstatus
     *
     * @return string
     */
    public function getGradingstatus()
    {
        return $this->container['gradingstatus'];
    }

    /**
     * Sets gradingstatus
     *
     * @param string $gradingstatus Grading status.
     *
     * @return self
     */
    public function setGradingstatus($gradingstatus)
    {
        if (is_null($gradingstatus)) {
            throw new \InvalidArgumentException('non-nullable gradingstatus cannot be null');
        }
        $this->container['gradingstatus'] = $gradingstatus;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked Whether new submissions are locked.
     *
     * @return self
     */
    public function setLocked($locked)
    {
        if (is_null($locked)) {
            throw new \InvalidArgumentException('non-nullable locked cannot be null');
        }
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets submission
     *
     * @return \OpenAPI\Client\Model\ModAssignGetSubmissionStatus200ResponseLastattemptSubmission|null
     */
    public function getSubmission()
    {
        return $this->container['submission'];
    }

    /**
     * Sets submission
     *
     * @param \OpenAPI\Client\Model\ModAssignGetSubmissionStatus200ResponseLastattemptSubmission|null $submission submission
     *
     * @return self
     */
    public function setSubmission($submission)
    {
        if (is_null($submission)) {
            throw new \InvalidArgumentException('non-nullable submission cannot be null');
        }
        $this->container['submission'] = $submission;

        return $this;
    }

    /**
     * Gets submissiongroup
     *
     * @return int|null
     */
    public function getSubmissiongroup()
    {
        return $this->container['submissiongroup'];
    }

    /**
     * Sets submissiongroup
     *
     * @param int|null $submissiongroup The submission group id (for group submissions only).
     *
     * @return self
     */
    public function setSubmissiongroup($submissiongroup)
    {
        if (is_null($submissiongroup)) {
            throw new \InvalidArgumentException('non-nullable submissiongroup cannot be null');
        }
        $this->container['submissiongroup'] = $submissiongroup;

        return $this;
    }

    /**
     * Gets submissiongroupmemberswhoneedtosubmit
     *
     * @return object[]|null
     */
    public function getSubmissiongroupmemberswhoneedtosubmit()
    {
        return $this->container['submissiongroupmemberswhoneedtosubmit'];
    }

    /**
     * Sets submissiongroupmemberswhoneedtosubmit
     *
     * @param object[]|null $submissiongroupmemberswhoneedtosubmit submissiongroupmemberswhoneedtosubmit
     *
     * @return self
     */
    public function setSubmissiongroupmemberswhoneedtosubmit($submissiongroupmemberswhoneedtosubmit)
    {
        if (is_null($submissiongroupmemberswhoneedtosubmit)) {
            throw new \InvalidArgumentException('non-nullable submissiongroupmemberswhoneedtosubmit cannot be null');
        }
        $this->container['submissiongroupmemberswhoneedtosubmit'] = $submissiongroupmemberswhoneedtosubmit;

        return $this;
    }

    /**
     * Gets submissionsenabled
     *
     * @return bool
     */
    public function getSubmissionsenabled()
    {
        return $this->container['submissionsenabled'];
    }

    /**
     * Sets submissionsenabled
     *
     * @param bool $submissionsenabled Whether submissions are enabled or not.
     *
     * @return self
     */
    public function setSubmissionsenabled($submissionsenabled)
    {
        if (is_null($submissionsenabled)) {
            throw new \InvalidArgumentException('non-nullable submissionsenabled cannot be null');
        }
        $this->container['submissionsenabled'] = $submissionsenabled;

        return $this;
    }

    /**
     * Gets teamsubmission
     *
     * @return \OpenAPI\Client\Model\ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission|null
     */
    public function getTeamsubmission()
    {
        return $this->container['teamsubmission'];
    }

    /**
     * Sets teamsubmission
     *
     * @param \OpenAPI\Client\Model\ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission|null $teamsubmission teamsubmission
     *
     * @return self
     */
    public function setTeamsubmission($teamsubmission)
    {
        if (is_null($teamsubmission)) {
            throw new \InvalidArgumentException('non-nullable teamsubmission cannot be null');
        }
        $this->container['teamsubmission'] = $teamsubmission;

        return $this;
    }

    /**
     * Gets timelimit
     *
     * @return int|null
     */
    public function getTimelimit()
    {
        return $this->container['timelimit'];
    }

    /**
     * Sets timelimit
     *
     * @param int|null $timelimit Time limit for submission.
     *
     * @return self
     */
    public function setTimelimit($timelimit)
    {
        if (is_null($timelimit)) {
            throw new \InvalidArgumentException('non-nullable timelimit cannot be null');
        }
        $this->container['timelimit'] = $timelimit;

        return $this;
    }

    /**
     * Gets usergroups
     *
     * @return object[]
     */
    public function getUsergroups()
    {
        return $this->container['usergroups'];
    }

    /**
     * Sets usergroups
     *
     * @param object[] $usergroups usergroups
     *
     * @return self
     */
    public function setUsergroups($usergroups)
    {
        if (is_null($usergroups)) {
            throw new \InvalidArgumentException('non-nullable usergroups cannot be null');
        }
        $this->container['usergroups'] = $usergroups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


